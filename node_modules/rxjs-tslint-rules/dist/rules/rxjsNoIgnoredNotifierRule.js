"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Lint = require("tslint");
var tsutils = require("tsutils");
var peer = require("../support/peer");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var identifiers = tsquery_1.tsquery(sourceFile, "CallExpression Identifier[name=/(repeatWhen|retryWhen)/]");
        identifiers.forEach(function (identifier) {
            var callExpression = identifier.parent;
            if (callExpression.arguments.length > 0) {
                var type = typeChecker.getTypeAtLocation(callExpression);
                if (util_1.couldBeType(type, "MonoTypeOperatorFunction")) {
                    var _a = tslib_1.__read(callExpression.arguments, 1), arg = _a[0];
                    if (tsutils.isArrowFunction(arg) ||
                        tsutils.isFunctionExpression(arg)) {
                        var fail = false;
                        var _b = tslib_1.__read(arg.parameters, 1), parameter = _b[0];
                        if (parameter) {
                            fail =
                                tsquery_1.tsquery(arg.body, "Identifier[name=" + parameter.name.getText() + "]").length === 0;
                        }
                        else {
                            fail = true;
                        }
                        if (fail) {
                            failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                        }
                    }
                }
            }
        });
        return failures;
    };
    Rule.metadata = {
        deprecationMessage: peer.v5 ? peer.v5NotSupportedMessage : undefined,
        description: "Disallows observables not composed from the `repeatWhen` or `retryWhen` notifier.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-ignored-notifier",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Ignoring the notifier is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
