"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Lint = require("tslint");
var tsutils = require("tsutils");
var ts = require("typescript");
var peer = require("../support/peer");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var callExpressions = tsquery_1.tsquery(sourceFile, "CallExpression[expression.name.text=\"subscribe\"]");
        callExpressions.forEach(function (node) {
            var callExpression = node;
            if (tsutils.isPropertyAccessExpression(callExpression.expression)) {
                var propertyAccessExpression_1 = callExpression.expression;
                var args = callExpression.arguments;
                var observable_1 = undefined;
                args.forEach(function (arg) {
                    if (tsutils.isArrowFunction(arg) ||
                        tsutils.isFunctionExpression(arg)) {
                        var modifier = tsutils.getModifier(arg, ts.SyntaxKind.AsyncKeyword);
                        if (modifier) {
                            if (observable_1 === undefined) {
                                var type = typeChecker.getTypeAtLocation(propertyAccessExpression_1.expression);
                                observable_1 = util_1.couldBeType(type, "Observable");
                            }
                            if (observable_1) {
                                failures.push(new Lint.RuleFailure(sourceFile, modifier.getStart(), modifier.getStart() + modifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                            }
                        }
                    }
                });
            }
        });
        return failures;
    };
    Rule.metadata = {
        deprecationMessage: peer.v5 ? peer.v5NotSupportedMessage : undefined,
        description: "Disallows passing async functions to subscribe.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-async-subscribe",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Passing async functions to subscribe is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
