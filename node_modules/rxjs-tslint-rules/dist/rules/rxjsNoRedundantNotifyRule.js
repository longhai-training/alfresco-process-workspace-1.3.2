"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Lint = require("tslint");
var ts = require("typescript");
var peer = require("../support/peer");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var query = "ExpressionStatement[expression.expression.name.text=/^(complete|error)$/] + ExpressionStatement[expression.expression.name.text=/^(next|complete|error)$/]";
        var expressionStatements = tsquery_1.tsquery(sourceFile, query);
        expressionStatements.forEach(function (node) {
            var parent = node.parent;
            if (!ts.isBlock(parent)) {
                return;
            }
            var statements = parent.statements;
            var index = statements.indexOf(node);
            var sibling = statements[index - 1];
            if (getExpressionText(sibling) !== getExpressionText(node)) {
                return;
            }
            if (!isExpressionObserver(sibling, typeChecker) ||
                !isExpressionObserver(node, typeChecker)) {
                return;
            }
            var expressionStatement = node;
            if (ts.isCallExpression(expressionStatement.expression)) {
                var callExpression = expressionStatement.expression;
                if (ts.isPropertyAccessExpression(callExpression.expression)) {
                    var name_1 = callExpression.expression.name;
                    failures.push(new Lint.RuleFailure(sourceFile, name_1.getStart(), name_1.getStart() + name_1.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                }
            }
        });
        return failures;
    };
    Rule.metadata = {
        deprecationMessage: peer.v5 ? peer.v5NotSupportedMessage : undefined,
        description: "Disallows redundant notifications from completed or errored observables.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-redundant-notify",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Redundant notifications are forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
function getExpressionText(expressionStatement) {
    if (!ts.isCallExpression(expressionStatement.expression)) {
        return undefined;
    }
    var callExpression = expressionStatement.expression;
    if (!ts.isPropertyAccessExpression(callExpression.expression)) {
        return undefined;
    }
    var expression = callExpression.expression.expression;
    return expression.getText();
}
function isExpressionObserver(expressionStatement, typeChecker) {
    if (!ts.isCallExpression(expressionStatement.expression)) {
        return false;
    }
    var callExpression = expressionStatement.expression;
    if (!ts.isPropertyAccessExpression(callExpression.expression)) {
        return false;
    }
    var expression = callExpression.expression.expression;
    var type = typeChecker.getTypeAtLocation(expression);
    return util_1.couldBeType(type, /^(Subject|Subscriber)$/);
}
