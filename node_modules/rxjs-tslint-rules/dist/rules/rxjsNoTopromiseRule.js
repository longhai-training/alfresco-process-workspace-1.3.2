"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var peer = require("../support/peer");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var propertyAccessExpressions = tsquery_1.tsquery(sourceFile, "PropertyAccessExpression[name.name=\"toPromise\"]");
        propertyAccessExpressions.forEach(function (propertyAccessExpression) {
            var type = typeChecker.getTypeAtLocation(propertyAccessExpression.expression);
            if (util_1.couldBeType(type, "Observable")) {
                var name_1 = propertyAccessExpression.name;
                failures.push(new Lint.RuleFailure(sourceFile, name_1.getStart(), name_1.getStart() + name_1.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
            }
        });
        return failures;
    };
    Rule.metadata = {
        deprecationMessage: peer.v5 ? peer.v6OnlyMessage : undefined,
        description: "Disallows calling toPromise.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-topromise",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "toPromise is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
