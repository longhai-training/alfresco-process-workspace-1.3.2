/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var SearchConfigurationService = /** @class */ (function () {
    function SearchConfigurationService() {
    }
    /**
     * Generates a QueryBody object with custom search parameters.
     * @param searchTerm Term text to search for
     * @param maxResults Maximum number of search results to show in a page
     * @param skipCount The offset of the start of the page within the results list
     * @returns Query body defined by the parameters
     */
    /**
     * Generates a QueryBody object with custom search parameters.
     * @param {?} searchTerm Term text to search for
     * @param {?} maxResults Maximum number of search results to show in a page
     * @param {?} skipCount The offset of the start of the page within the results list
     * @return {?} Query body defined by the parameters
     */
    SearchConfigurationService.prototype.generateQueryBody = /**
     * Generates a QueryBody object with custom search parameters.
     * @param {?} searchTerm Term text to search for
     * @param {?} maxResults Maximum number of search results to show in a page
     * @param {?} skipCount The offset of the start of the page within the results list
     * @return {?} Query body defined by the parameters
     */
    function (searchTerm, maxResults, skipCount) {
        /** @type {?} */
        var defaultQueryBody = {
            query: {
                query: searchTerm ? "'" + searchTerm + "*' OR name:'" + searchTerm + "*'" : searchTerm
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxResults,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder' OR TYPE:'cm:content'" },
                { query: 'NOT cm:creator:System' }
            ]
        };
        return defaultQueryBody;
    };
    SearchConfigurationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SearchConfigurationService.ctorParameters = function () { return []; };
    /** @nocollapse */ SearchConfigurationService.ngInjectableDef = i0.defineInjectable({ factory: function SearchConfigurationService_Factory() { return new SearchConfigurationService(); }, token: SearchConfigurationService, providedIn: "root" });
    return SearchConfigurationService;
}());
export { SearchConfigurationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWNvbmZpZ3VyYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NlYXJjaC1jb25maWd1cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFJM0M7SUFLSTtJQUNBLENBQUM7SUFFRDs7Ozs7O09BTUc7Ozs7Ozs7O0lBQ0ksc0RBQWlCOzs7Ozs7O0lBQXhCLFVBQXlCLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxTQUFpQjs7WUFDeEUsZ0JBQWdCLEdBQWM7WUFDaEMsS0FBSyxFQUFFO2dCQUNILEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQUksVUFBVSxvQkFBZSxVQUFVLE9BQUksQ0FBQyxDQUFDLENBQUMsVUFBVTthQUMvRTtZQUNELE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQztZQUN4QyxNQUFNLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFNBQVMsRUFBRSxTQUFTO2FBQ3ZCO1lBQ0QsYUFBYSxFQUFFO2dCQUNYLEVBQUUsS0FBSyxFQUFFLHVDQUF1QyxFQUFFO2dCQUNsRCxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRTthQUFDO1NBQzFDO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQztJQUM1QixDQUFDOztnQkEvQkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7Ozs7cUNBdkJEO0NBcURDLEFBaENELElBZ0NDO1NBN0JZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFF1ZXJ5Qm9keSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgU2VhcmNoQ29uZmlndXJhdGlvbkludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZS9zZWFyY2gtY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbmZpZ3VyYXRpb25TZXJ2aWNlIGltcGxlbWVudHMgU2VhcmNoQ29uZmlndXJhdGlvbkludGVyZmFjZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBRdWVyeUJvZHkgb2JqZWN0IHdpdGggY3VzdG9tIHNlYXJjaCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSBzZWFyY2hUZXJtIFRlcm0gdGV4dCB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIG1heFJlc3VsdHMgTWF4aW11bSBudW1iZXIgb2Ygc2VhcmNoIHJlc3VsdHMgdG8gc2hvdyBpbiBhIHBhZ2VcbiAgICAgKiBAcGFyYW0gc2tpcENvdW50IFRoZSBvZmZzZXQgb2YgdGhlIHN0YXJ0IG9mIHRoZSBwYWdlIHdpdGhpbiB0aGUgcmVzdWx0cyBsaXN0XG4gICAgICogQHJldHVybnMgUXVlcnkgYm9keSBkZWZpbmVkIGJ5IHRoZSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgcHVibGljIGdlbmVyYXRlUXVlcnlCb2R5KHNlYXJjaFRlcm06IHN0cmluZywgbWF4UmVzdWx0czogbnVtYmVyLCBza2lwQ291bnQ6IG51bWJlcik6IFF1ZXJ5Qm9keSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRRdWVyeUJvZHk6IFF1ZXJ5Qm9keSA9IHtcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHNlYXJjaFRlcm0gPyBgJyR7c2VhcmNoVGVybX0qJyBPUiBuYW1lOicke3NlYXJjaFRlcm19KidgIDogc2VhcmNoVGVybVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncGF0aCcsICdhbGxvd2FibGVPcGVyYXRpb25zJ10sXG4gICAgICAgICAgICBwYWdpbmc6IHtcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogbWF4UmVzdWx0cyxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHNraXBDb3VudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbHRlclF1ZXJpZXM6IFtcbiAgICAgICAgICAgICAgICB7IHF1ZXJ5OiBcIlRZUEU6J2NtOmZvbGRlcicgT1IgVFlQRTonY206Y29udGVudCdcIiB9LFxuICAgICAgICAgICAgICAgIHsgcXVlcnk6ICdOT1QgY206Y3JlYXRvcjpTeXN0ZW0nIH1dXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRRdWVyeUJvZHk7XG4gICAgfVxufVxuIl19