/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { LoginDialogComponent } from '../login/components/login-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
var LoginDialogService = /** @class */ (function () {
    function LoginDialogService(dialog) {
        this.dialog = dialog;
    }
    /**
     * Opens a dialog to choose a file to upload.
     * @param actionName Name of the action to show in the title
     * @param title Title for the dialog
     * @returns Information about the chosen file(s)
     */
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} actionName Name of the action to show in the title
     * @param {?} title Title for the dialog
     * @return {?} Information about the chosen file(s)
     */
    LoginDialogService.prototype.openLogin = /**
     * Opens a dialog to choose a file to upload.
     * @param {?} actionName Name of the action to show in the title
     * @param {?} title Title for the dialog
     * @return {?} Information about the chosen file(s)
     */
    function (actionName, title) {
        /** @type {?} */
        var logged = new Subject();
        logged.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: title,
            actionName: actionName,
            logged: logged
        };
        this.openLoginDialog(data, 'adf-login-dialog', '630px');
        return logged;
    };
    /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    LoginDialogService.prototype.openLoginDialog = /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(LoginDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /** Closes the currently open dialog. */
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    LoginDialogService.prototype.close = /**
     * Closes the currently open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    LoginDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoginDialogService.ctorParameters = function () { return [
        { type: MatDialog }
    ]; };
    /** @nocollapse */ LoginDialogService.ngInjectableDef = i0.defineInjectable({ factory: function LoginDialogService_Factory() { return new LoginDialogService(i0.inject(i1.MatDialog)); }, token: LoginDialogService, providedIn: "root" });
    return LoginDialogService;
}());
export { LoginDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoginDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9sb2dpbi1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDOzs7QUFHbEY7SUFLSSw0QkFBb0IsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUNyQyxDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7SUFDSCxzQ0FBUzs7Ozs7O0lBQVQsVUFBVSxVQUFrQixFQUFFLEtBQWE7O1lBQ2pDLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBVTtRQUNwQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNsQyxDQUFDLENBQUM7O1lBRUcsSUFBSSxHQUE2QjtZQUNuQyxLQUFLLE9BQUE7WUFDTCxVQUFVLFlBQUE7WUFDVixNQUFNLFFBQUE7U0FDVDtRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7Ozs7O0lBRU8sNENBQWU7Ozs7Ozs7SUFBdkIsVUFBd0IsSUFBOEIsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUNsRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLElBQUksTUFBQSxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUQsd0NBQXdDOzs7OztJQUN4QyxrQ0FBSzs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDOztnQkFyQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFSUSxTQUFTOzs7NkJBakJsQjtDQThEQyxBQXZDRCxJQXVDQztTQXBDWSxrQkFBa0I7Ozs7OztJQUVmLG9DQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvZ2luRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi4vbG9naW4vY29tcG9uZW50cy9sb2dpbi1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2luRGlhbG9nQ29tcG9uZW50RGF0YSB9IGZyb20gJy4uL2xvZ2luL2NvbXBvbmVudHMvbG9naW4tZGlhbG9nLWNvbXBvbmVudC1kYXRhLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9naW5EaWFsb2dTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2cpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIGRpYWxvZyB0byBjaG9vc2UgYSBmaWxlIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gYWN0aW9uTmFtZSBOYW1lIG9mIHRoZSBhY3Rpb24gdG8gc2hvdyBpbiB0aGUgdGl0bGVcbiAgICAgKiBAcGFyYW0gdGl0bGUgVGl0bGUgZm9yIHRoZSBkaWFsb2dcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hvc2VuIGZpbGUocylcbiAgICAgKi9cbiAgICBvcGVuTG9naW4oYWN0aW9uTmFtZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgbG9nZ2VkID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICAgICAgICBsb2dnZWQuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIGNvbXBsZXRlOiB0aGlzLmNsb3NlLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGF0YTogTG9naW5EaWFsb2dDb21wb25lbnREYXRhID0ge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgbG9nZ2VkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vcGVuTG9naW5EaWFsb2coZGF0YSwgJ2FkZi1sb2dpbi1kaWFsb2cnLCAnNjMwcHgnKTtcbiAgICAgICAgcmV0dXJuIGxvZ2dlZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5Mb2dpbkRpYWxvZyhkYXRhOiBMb2dpbkRpYWxvZ0NvbXBvbmVudERhdGEsIGN1cnJlbnRQYW5lbENsYXNzOiBzdHJpbmcsIGNob3NlbldpZHRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cub3BlbihMb2dpbkRpYWxvZ0NvbXBvbmVudCwgeyBkYXRhLCBwYW5lbENsYXNzOiBjdXJyZW50UGFuZWxDbGFzcywgd2lkdGg6IGNob3NlbldpZHRoIH0pO1xuICAgIH1cblxuICAgIC8qKiBDbG9zZXMgdGhlIGN1cnJlbnRseSBvcGVuIGRpYWxvZy4gKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2VBbGwoKTtcbiAgICB9XG5cbn1cbiJdfQ==