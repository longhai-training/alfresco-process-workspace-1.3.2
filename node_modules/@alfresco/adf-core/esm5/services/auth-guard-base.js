/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppConfigValues } from '../app-config/app-config.service';
/**
 * @abstract
 */
var /**
 * @abstract
 */
AuthGuardBase = /** @class */ (function () {
    function AuthGuardBase(authenticationService, router, appConfigService) {
        this.authenticationService = authenticationService;
        this.router = router;
        this.appConfigService = appConfigService;
    }
    Object.defineProperty(AuthGuardBase.prototype, "withCredentials", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.appConfigService.get('auth.withCredentials', false);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuardBase.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.checkLogin(route, state.url);
    };
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuardBase.prototype.canActivateChild = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.canActivate(route, state);
    };
    /**
     * @protected
     * @param {?} provider
     * @param {?} url
     * @return {?}
     */
    AuthGuardBase.prototype.redirectToUrl = /**
     * @protected
     * @param {?} provider
     * @param {?} url
     * @return {?}
     */
    function (provider, url) {
        this.authenticationService.setRedirect({ provider: provider, url: url });
        /** @type {?} */
        var pathToLogin = this.getLoginRoute();
        /** @type {?} */
        var urlToRedirect = "/" + pathToLogin + "?redirectUrl=" + url;
        this.router.navigateByUrl(urlToRedirect);
    };
    /**
     * @protected
     * @return {?}
     */
    AuthGuardBase.prototype.getLoginRoute = /**
     * @protected
     * @return {?}
     */
    function () {
        return (this.appConfigService &&
            this.appConfigService.get(AppConfigValues.LOGIN_ROUTE, 'login'));
    };
    /**
     * @protected
     * @return {?}
     */
    AuthGuardBase.prototype.isOAuthWithoutSilentLogin = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oauth = this.appConfigService.get(AppConfigValues.OAUTHCONFIG, null);
        return (this.authenticationService.isOauth() && oauth.silentLogin === false);
    };
    return AuthGuardBase;
}());
/**
 * @abstract
 */
export { AuthGuardBase };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AuthGuardBase.prototype.authenticationService;
    /**
     * @type {?}
     * @protected
     */
    AuthGuardBase.prototype.router;
    /**
     * @type {?}
     * @protected
     */
    AuthGuardBase.prototype.appConfigService;
    /**
     * @abstract
     * @param {?} activeRoute
     * @param {?} redirectUrl
     * @return {?}
     */
    AuthGuardBase.prototype.checkLogin = function (activeRoute, redirectUrl) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvYXV0aC1ndWFyZC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBLE9BQU8sRUFFSCxlQUFlLEVBQ2xCLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFHMUM7Ozs7SUFhSSx1QkFDYyxxQkFBNEMsRUFDNUMsTUFBYyxFQUNkLGdCQUFrQztRQUZsQywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQzdDLENBQUM7SUFYSixzQkFBYywwQ0FBZTs7Ozs7UUFBN0I7WUFDSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQzVCLHNCQUFzQixFQUN0QixLQUFLLENBQ1IsQ0FBQztRQUNOLENBQUM7OztPQUFBOzs7Ozs7SUFRRCxtQ0FBVzs7Ozs7SUFBWCxVQUNJLEtBQTZCLEVBQzdCLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUVELHdDQUFnQjs7Ozs7SUFBaEIsVUFDSSxLQUE2QixFQUM3QixLQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7Ozs7SUFFUyxxQ0FBYTs7Ozs7O0lBQXZCLFVBQXdCLFFBQWdCLEVBQUUsR0FBVztRQUNqRCxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxVQUFBLEVBQUUsR0FBRyxLQUFBLEVBQUUsQ0FBQyxDQUFDOztZQUVwRCxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRTs7WUFDbEMsYUFBYSxHQUFHLE1BQUksV0FBVyxxQkFBZ0IsR0FBSztRQUUxRCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7OztJQUVTLHFDQUFhOzs7O0lBQXZCO1FBQ0ksT0FBTyxDQUNILElBQUksQ0FBQyxnQkFBZ0I7WUFDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FDckIsZUFBZSxDQUFDLFdBQVcsRUFDM0IsT0FBTyxDQUNWLENBQ0osQ0FBQztJQUNOLENBQUM7Ozs7O0lBRVMsaURBQXlCOzs7O0lBQW5DOztZQUNVLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUNuQyxlQUFlLENBQUMsV0FBVyxFQUMzQixJQUFJLENBQ1A7UUFDRCxPQUFPLENBQ0gsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssS0FBSyxDQUN0RSxDQUFDO0lBQ04sQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQTdERCxJQTZEQzs7Ozs7Ozs7OztJQS9DTyw4Q0FBc0Q7Ozs7O0lBQ3RELCtCQUF3Qjs7Ozs7SUFDeEIseUNBQTRDOzs7Ozs7O0lBZmhELDZFQUdvRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgUm91dGVyLFxuICAgIENhbkFjdGl2YXRlLFxuICAgIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgUm91dGVyU3RhdGVTbmFwc2hvdCxcbiAgICBDYW5BY3RpdmF0ZUNoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHBDb25maWdTZXJ2aWNlLFxuICAgIEFwcENvbmZpZ1ZhbHVlc1xufSBmcm9tICcuLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBPYXV0aENvbmZpZ01vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL29hdXRoLWNvbmZpZy5tb2RlbCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdXRoR3VhcmRCYXNlIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xuICAgIGFic3RyYWN0IGNoZWNrTG9naW4oXG4gICAgICAgIGFjdGl2ZVJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgICAgICByZWRpcmVjdFVybDogc3RyaW5nXG4gICAgKTogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuO1xuXG4gICAgcHJvdGVjdGVkIGdldCB3aXRoQ3JlZGVudGlhbHMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0PGJvb2xlYW4+KFxuICAgICAgICAgICAgJ2F1dGgud2l0aENyZWRlbnRpYWxzJyxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByb3RlY3RlZCBhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcm90ZWN0ZWQgYXBwQ29uZmlnU2VydmljZTogQXBwQ29uZmlnU2VydmljZVxuICAgICkge31cblxuICAgIGNhbkFjdGl2YXRlKFxuICAgICAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICAgICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGVja0xvZ2luKHJvdXRlLCBzdGF0ZS51cmwpO1xuICAgIH1cblxuICAgIGNhbkFjdGl2YXRlQ2hpbGQoXG4gICAgICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgICAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxuICAgICk6IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbkFjdGl2YXRlKHJvdXRlLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlZGlyZWN0VG9VcmwocHJvdmlkZXI6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2Uuc2V0UmVkaXJlY3QoeyBwcm92aWRlciwgdXJsIH0pO1xuXG4gICAgICAgIGNvbnN0IHBhdGhUb0xvZ2luID0gdGhpcy5nZXRMb2dpblJvdXRlKCk7XG4gICAgICAgIGNvbnN0IHVybFRvUmVkaXJlY3QgPSBgLyR7cGF0aFRvTG9naW59P3JlZGlyZWN0VXJsPSR7dXJsfWA7XG5cbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCh1cmxUb1JlZGlyZWN0KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0TG9naW5Sb3V0ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5hcHBDb25maWdTZXJ2aWNlICYmXG4gICAgICAgICAgICB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oXG4gICAgICAgICAgICAgICAgQXBwQ29uZmlnVmFsdWVzLkxPR0lOX1JPVVRFLFxuICAgICAgICAgICAgICAgICdsb2dpbidcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaXNPQXV0aFdpdGhvdXRTaWxlbnRMb2dpbigpIHtcbiAgICAgICAgY29uc3Qgb2F1dGggPSB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0PE9hdXRoQ29uZmlnTW9kZWw+KFxuICAgICAgICAgICAgQXBwQ29uZmlnVmFsdWVzLk9BVVRIQ09ORklHLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuaXNPYXV0aCgpICYmIG9hdXRoLnNpbGVudExvZ2luID09PSBmYWxzZVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==