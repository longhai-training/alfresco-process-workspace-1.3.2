/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable, from, interval, empty } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { concatMap, switchMap, takeWhile, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
var RenditionsService = /** @class */ (function () {
    function RenditionsService(apiService) {
        this.apiService = apiService;
    }
    /**
     * Gets the first available rendition found for a node.
     * @param nodeId ID of the target node
     * @returns Information object for the rendition
     */
    /**
     * Gets the first available rendition found for a node.
     * @param {?} nodeId ID of the target node
     * @return {?} Information object for the rendition
     */
    RenditionsService.prototype.getAvailableRenditionForNode = /**
     * Gets the first available rendition found for a node.
     * @param {?} nodeId ID of the target node
     * @return {?} Information object for the rendition
     */
    function (nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId)).pipe(map((/**
         * @param {?} availableRenditions
         * @return {?}
         */
        function (availableRenditions) {
            /** @type {?} */
            var renditionsAvailable = availableRenditions.list.entries.filter((/**
             * @param {?} rendition
             * @return {?}
             */
            function (rendition) { return (rendition.entry.id === 'pdf' || rendition.entry.id === 'imgpreview'); }));
            /** @type {?} */
            var existingRendition = renditionsAvailable.find((/**
             * @param {?} rend
             * @return {?}
             */
            function (rend) { return rend.entry.status === 'CREATED'; }));
            return existingRendition ? existingRendition : renditionsAvailable[0];
        })));
    };
    /**
     * Generates a rendition for a node using the first available encoding.
     * @param nodeId ID of the target node
     * @returns Null response to indicate completion
     */
    /**
     * Generates a rendition for a node using the first available encoding.
     * @param {?} nodeId ID of the target node
     * @return {?} Null response to indicate completion
     */
    RenditionsService.prototype.generateRenditionForNode = /**
     * Generates a rendition for a node using the first available encoding.
     * @param {?} nodeId ID of the target node
     * @return {?} Null response to indicate completion
     */
    function (nodeId) {
        var _this = this;
        return this.getAvailableRenditionForNode(nodeId).pipe(map((/**
         * @param {?} rendition
         * @return {?}
         */
        function (rendition) {
            if (rendition.entry.status !== 'CREATED') {
                return from(_this.apiService.renditionsApi.createRendition(nodeId, { id: rendition.entry.id }));
            }
            else {
                return empty();
            }
        })));
    };
    /**
     * Checks if the specified rendition is available for a node.
     * @param nodeId ID of the target node
     * @param encoding Name of the rendition encoding
     * @returns True if the rendition is available, false otherwise
     */
    /**
     * Checks if the specified rendition is available for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} True if the rendition is available, false otherwise
     */
    RenditionsService.prototype.isRenditionAvailable = /**
     * Checks if the specified rendition is available for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} True if the rendition is available, false otherwise
     */
    function (nodeId, encoding) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this.getRendition(nodeId, encoding).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var isAvailable = true;
                if (res.entry.status.toString() === 'NOT_CREATED') {
                    isAvailable = false;
                }
                observer.next(isAvailable);
                observer.complete();
            }), (/**
             * @return {?}
             */
            function () {
                observer.next(false);
                observer.complete();
            }));
        }));
    };
    /**
     * Checks if the node can be converted using the specified rendition.
     * @param nodeId ID of the target node
     * @param encoding Name of the rendition encoding
     * @returns True if the node can be converted, false otherwise
     */
    /**
     * Checks if the node can be converted using the specified rendition.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} True if the node can be converted, false otherwise
     */
    RenditionsService.prototype.isConversionPossible = /**
     * Checks if the node can be converted using the specified rendition.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} True if the node can be converted, false otherwise
     */
    function (nodeId, encoding) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this.getRendition(nodeId, encoding).subscribe((/**
             * @return {?}
             */
            function () {
                observer.next(true);
                observer.complete();
            }), (/**
             * @return {?}
             */
            function () {
                observer.next(false);
                observer.complete();
            }));
        }));
    };
    /**
     * Gets a URL linking to the specified rendition of a node.
     * @param nodeId ID of the target node
     * @param encoding Name of the rendition encoding
     * @returns URL string
     */
    /**
     * Gets a URL linking to the specified rendition of a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} URL string
     */
    RenditionsService.prototype.getRenditionUrl = /**
     * Gets a URL linking to the specified rendition of a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} URL string
     */
    function (nodeId, encoding) {
        return this.apiService.contentApi.getRenditionUrl(nodeId, encoding);
    };
    /**
     * Gets information about a rendition of a node.
     * @param nodeId ID of the target node
     * @param encoding Name of the rendition encoding
     * @returns Information object about the rendition
     */
    /**
     * Gets information about a rendition of a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} Information object about the rendition
     */
    RenditionsService.prototype.getRendition = /**
     * Gets information about a rendition of a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} Information object about the rendition
     */
    function (nodeId, encoding) {
        return from(this.apiService.renditionsApi.getRendition(nodeId, encoding));
    };
    /**
     * Gets a list of all renditions for a node.
     * @param nodeId ID of the target node
     * @returns Paged list of rendition details
     */
    /**
     * Gets a list of all renditions for a node.
     * @param {?} nodeId ID of the target node
     * @return {?} Paged list of rendition details
     */
    RenditionsService.prototype.getRenditionsListByNodeId = /**
     * Gets a list of all renditions for a node.
     * @param {?} nodeId ID of the target node
     * @return {?} Paged list of rendition details
     */
    function (nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId));
    };
    /**
     * Creates a rendition for a node.
     * @param nodeId ID of the target node
     * @param encoding Name of the rendition encoding
     * @returns Null response to indicate completion
     */
    /**
     * Creates a rendition for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} Null response to indicate completion
     */
    RenditionsService.prototype.createRendition = /**
     * Creates a rendition for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} Null response to indicate completion
     */
    function (nodeId, encoding) {
        return from(this.apiService.renditionsApi.createRendition(nodeId, { id: encoding }));
    };
    /**
     * Repeatedly attempts to create a rendition, through to success or failure.
     * @param nodeId ID of the target node
     * @param encoding Name of the rendition encoding
     * @param pollingInterval Time interval (in milliseconds) between checks for completion
     * @param retries Number of attempts to make before declaring failure
     * @returns True if the rendition was created, false otherwise
     */
    /**
     * Repeatedly attempts to create a rendition, through to success or failure.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @param {?=} pollingInterval Time interval (in milliseconds) between checks for completion
     * @param {?=} retries Number of attempts to make before declaring failure
     * @return {?} True if the rendition was created, false otherwise
     */
    RenditionsService.prototype.convert = /**
     * Repeatedly attempts to create a rendition, through to success or failure.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @param {?=} pollingInterval Time interval (in milliseconds) between checks for completion
     * @param {?=} retries Number of attempts to make before declaring failure
     * @return {?} True if the rendition was created, false otherwise
     */
    function (nodeId, encoding, pollingInterval, retries) {
        var _this = this;
        if (pollingInterval === void 0) { pollingInterval = 1000; }
        if (retries === void 0) { retries = 5; }
        return this.createRendition(nodeId, encoding)
            .pipe(concatMap((/**
         * @return {?}
         */
        function () { return _this.pollRendition(nodeId, encoding, pollingInterval, retries); })));
    };
    /**
     * @private
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} intervalSize
     * @param {?=} retries
     * @return {?}
     */
    RenditionsService.prototype.pollRendition = /**
     * @private
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} intervalSize
     * @param {?=} retries
     * @return {?}
     */
    function (nodeId, encoding, intervalSize, retries) {
        var _this = this;
        if (intervalSize === void 0) { intervalSize = 1000; }
        if (retries === void 0) { retries = 5; }
        /** @type {?} */
        var attempts = 0;
        return interval(intervalSize)
            .pipe(switchMap((/**
         * @return {?}
         */
        function () { return _this.getRendition(nodeId, encoding); })), takeWhile((/**
         * @param {?} renditionEntry
         * @return {?}
         */
        function (renditionEntry) {
            attempts += 1;
            if (attempts > retries) {
                return false;
            }
            return (renditionEntry.entry.status.toString() !== 'CREATED');
        })));
    };
    RenditionsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RenditionsService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ RenditionsService.ngInjectableDef = i0.defineInjectable({ factory: function RenditionsService_Factory() { return new RenditionsService(i0.inject(i1.AlfrescoApiService)); }, token: RenditionsService, providedIn: "root" });
    return RenditionsService;
}());
export { RenditionsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RenditionsService.prototype.apiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGl0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvcmVuZGl0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUV0RTtJQUtJLDJCQUFvQixVQUE4QjtRQUE5QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0gsd0RBQTRCOzs7OztJQUE1QixVQUE2QixNQUFjO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDakUsR0FBRzs7OztRQUFDLFVBQUMsbUJBQW9DOztnQkFDL0IsbUJBQW1CLEdBQXFCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTs7OztZQUNqRixVQUFDLFNBQVMsSUFBSyxPQUFBLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssS0FBSyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLFlBQVksQ0FBQyxFQUFyRSxDQUFxRSxFQUFDOztnQkFDbkYsaUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsSUFBSTs7OztZQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLEtB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LFlBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQW5DLENBQW1DLEVBQUMsRUFDcEQsU0FBUzs7OztRQUFDLFVBQUMsY0FBOEI7WUFDckMsUUFBUSxJQUFJLENBQUMsQ0FBQztZQUNkLElBQUksUUFBUSxHQUFHLE9BQU8sRUFBRTtnQkFDcEIsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFDRCxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxFQUFDLENBQ0wsQ0FBQztJQUNWLENBQUM7O2dCQXpKSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQUxRLGtCQUFrQjs7OzRCQXBCM0I7Q0FpTEMsQUExSkQsSUEwSkM7U0F2SlksaUJBQWlCOzs7Ozs7SUFFZCx1Q0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZW5kaXRpb25FbnRyeSwgUmVuZGl0aW9uUGFnaW5nIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBpbnRlcnZhbCwgZW1wdHkgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4vYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCBzd2l0Y2hNYXAsIHRha2VXaGlsZSwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFJlbmRpdGlvbnNTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgYXZhaWxhYmxlIHJlbmRpdGlvbiBmb3VuZCBmb3IgYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHJldHVybnMgSW5mb3JtYXRpb24gb2JqZWN0IGZvciB0aGUgcmVuZGl0aW9uXG4gICAgICovXG4gICAgZ2V0QXZhaWxhYmxlUmVuZGl0aW9uRm9yTm9kZShub2RlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UmVuZGl0aW9uRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLnJlbmRpdGlvbnNBcGkuZ2V0UmVuZGl0aW9ucyhub2RlSWQpKS5waXBlKFxuICAgICAgICAgICAgbWFwKChhdmFpbGFibGVSZW5kaXRpb25zOiBSZW5kaXRpb25QYWdpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kaXRpb25zQXZhaWxhYmxlOiBSZW5kaXRpb25FbnRyeVtdID0gYXZhaWxhYmxlUmVuZGl0aW9ucy5saXN0LmVudHJpZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAocmVuZGl0aW9uKSA9PiAocmVuZGl0aW9uLmVudHJ5LmlkID09PSAncGRmJyB8fCByZW5kaXRpb24uZW50cnkuaWQgPT09ICdpbWdwcmV2aWV3JykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUmVuZGl0aW9uID0gcmVuZGl0aW9uc0F2YWlsYWJsZS5maW5kKChyZW5kKSA9PiByZW5kLmVudHJ5LnN0YXR1cyA9PT0gJ0NSRUFURUQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdSZW5kaXRpb24gPyBleGlzdGluZ1JlbmRpdGlvbiA6IHJlbmRpdGlvbnNBdmFpbGFibGVbMF07XG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgcmVuZGl0aW9uIGZvciBhIG5vZGUgdXNpbmcgdGhlIGZpcnN0IGF2YWlsYWJsZSBlbmNvZGluZy5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEByZXR1cm5zIE51bGwgcmVzcG9uc2UgdG8gaW5kaWNhdGUgY29tcGxldGlvblxuICAgICAqL1xuICAgIGdlbmVyYXRlUmVuZGl0aW9uRm9yTm9kZShub2RlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEF2YWlsYWJsZVJlbmRpdGlvbkZvck5vZGUobm9kZUlkKS5waXBlKFxuICAgICAgICAgICAgbWFwKChyZW5kaXRpb246IFJlbmRpdGlvbkVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbmRpdGlvbi5lbnRyeS5zdGF0dXMgIT09ICdDUkVBVEVEJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UucmVuZGl0aW9uc0FwaS5jcmVhdGVSZW5kaXRpb24obm9kZUlkLCB7IGlkOiByZW5kaXRpb24uZW50cnkuaWQgfSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBzcGVjaWZpZWQgcmVuZGl0aW9uIGlzIGF2YWlsYWJsZSBmb3IgYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHBhcmFtIGVuY29kaW5nIE5hbWUgb2YgdGhlIHJlbmRpdGlvbiBlbmNvZGluZ1xuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHJlbmRpdGlvbiBpcyBhdmFpbGFibGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGlzUmVuZGl0aW9uQXZhaWxhYmxlKG5vZGVJZDogc3RyaW5nLCBlbmNvZGluZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UmVuZGl0aW9uKG5vZGVJZCwgZW5jb2RpbmcpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc0F2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXMuZW50cnkuc3RhdHVzLnRvU3RyaW5nKCkgPT09ICdOT1RfQ1JFQVRFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpc0F2YWlsYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgbm9kZSBjYW4gYmUgY29udmVydGVkIHVzaW5nIHRoZSBzcGVjaWZpZWQgcmVuZGl0aW9uLlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHBhcmFtIGVuY29kaW5nIE5hbWUgb2YgdGhlIHJlbmRpdGlvbiBlbmNvZGluZ1xuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIG5vZGUgY2FuIGJlIGNvbnZlcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaXNDb252ZXJzaW9uUG9zc2libGUobm9kZUlkOiBzdHJpbmcsIGVuY29kaW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5nZXRSZW5kaXRpb24obm9kZUlkLCBlbmNvZGluZykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIFVSTCBsaW5raW5nIHRvIHRoZSBzcGVjaWZpZWQgcmVuZGl0aW9uIG9mIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSBlbmNvZGluZyBOYW1lIG9mIHRoZSByZW5kaXRpb24gZW5jb2RpbmdcbiAgICAgKiBAcmV0dXJucyBVUkwgc3RyaW5nXG4gICAgICovXG4gICAgZ2V0UmVuZGl0aW9uVXJsKG5vZGVJZDogc3RyaW5nLCBlbmNvZGluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5jb250ZW50QXBpLmdldFJlbmRpdGlvblVybChub2RlSWQsIGVuY29kaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IGEgcmVuZGl0aW9uIG9mIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSBlbmNvZGluZyBOYW1lIG9mIHRoZSByZW5kaXRpb24gZW5jb2RpbmdcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbiBvYmplY3QgYWJvdXQgdGhlIHJlbmRpdGlvblxuICAgICAqL1xuICAgIGdldFJlbmRpdGlvbihub2RlSWQ6IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZyk6IE9ic2VydmFibGU8UmVuZGl0aW9uRW50cnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLnJlbmRpdGlvbnNBcGkuZ2V0UmVuZGl0aW9uKG5vZGVJZCwgZW5jb2RpbmcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbGlzdCBvZiBhbGwgcmVuZGl0aW9ucyBmb3IgYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHJldHVybnMgUGFnZWQgbGlzdCBvZiByZW5kaXRpb24gZGV0YWlsc1xuICAgICAqL1xuICAgIGdldFJlbmRpdGlvbnNMaXN0QnlOb2RlSWQobm9kZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFJlbmRpdGlvblBhZ2luZz4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UucmVuZGl0aW9uc0FwaS5nZXRSZW5kaXRpb25zKG5vZGVJZCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZW5kaXRpb24gZm9yIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSBlbmNvZGluZyBOYW1lIG9mIHRoZSByZW5kaXRpb24gZW5jb2RpbmdcbiAgICAgKiBAcmV0dXJucyBOdWxsIHJlc3BvbnNlIHRvIGluZGljYXRlIGNvbXBsZXRpb25cbiAgICAgKi9cbiAgICBjcmVhdGVSZW5kaXRpb24obm9kZUlkOiBzdHJpbmcsIGVuY29kaW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHt9PiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXBpU2VydmljZS5yZW5kaXRpb25zQXBpLmNyZWF0ZVJlbmRpdGlvbihub2RlSWQsIHsgaWQ6IGVuY29kaW5nIH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRlZGx5IGF0dGVtcHRzIHRvIGNyZWF0ZSBhIHJlbmRpdGlvbiwgdGhyb3VnaCB0byBzdWNjZXNzIG9yIGZhaWx1cmUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gZW5jb2RpbmcgTmFtZSBvZiB0aGUgcmVuZGl0aW9uIGVuY29kaW5nXG4gICAgICogQHBhcmFtIHBvbGxpbmdJbnRlcnZhbCBUaW1lIGludGVydmFsIChpbiBtaWxsaXNlY29uZHMpIGJldHdlZW4gY2hlY2tzIGZvciBjb21wbGV0aW9uXG4gICAgICogQHBhcmFtIHJldHJpZXMgTnVtYmVyIG9mIGF0dGVtcHRzIHRvIG1ha2UgYmVmb3JlIGRlY2xhcmluZyBmYWlsdXJlXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcmVuZGl0aW9uIHdhcyBjcmVhdGVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBjb252ZXJ0KG5vZGVJZDogc3RyaW5nLCBlbmNvZGluZzogc3RyaW5nLCBwb2xsaW5nSW50ZXJ2YWw6IG51bWJlciA9IDEwMDAsIHJldHJpZXM6IG51bWJlciA9IDUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVuZGl0aW9uKG5vZGVJZCwgZW5jb2RpbmcpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjb25jYXRNYXAoKCkgPT4gdGhpcy5wb2xsUmVuZGl0aW9uKG5vZGVJZCwgZW5jb2RpbmcsIHBvbGxpbmdJbnRlcnZhbCwgcmV0cmllcykpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgcG9sbFJlbmRpdGlvbihub2RlSWQ6IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZywgaW50ZXJ2YWxTaXplOiBudW1iZXIgPSAxMDAwLCByZXRyaWVzOiBudW1iZXIgPSA1KSB7XG4gICAgICAgIGxldCBhdHRlbXB0cyA9IDA7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbChpbnRlcnZhbFNpemUpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5nZXRSZW5kaXRpb24obm9kZUlkLCBlbmNvZGluZykpLFxuICAgICAgICAgICAgICAgIHRha2VXaGlsZSgocmVuZGl0aW9uRW50cnk6IFJlbmRpdGlvbkVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGF0dGVtcHRzICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRlbXB0cyA+IHJldHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHJlbmRpdGlvbkVudHJ5LmVudHJ5LnN0YXR1cy50b1N0cmluZygpICE9PSAnQ1JFQVRFRCcpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==