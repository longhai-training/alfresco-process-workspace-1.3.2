/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { BpmProductVersionModel, EcmProductVersionModel } from '../models/product-version.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
var DiscoveryApiService = /** @class */ (function () {
    function DiscoveryApiService(apiService) {
        this.apiService = apiService;
    }
    /**
     * Gets product information for Content Services.
     * @returns ProductVersionModel containing product details
     */
    /**
     * Gets product information for Content Services.
     * @return {?} ProductVersionModel containing product details
     */
    DiscoveryApiService.prototype.getEcmProductInfo = /**
     * Gets product information for Content Services.
     * @return {?} ProductVersionModel containing product details
     */
    function () {
        return from(this.apiService.getInstance().discovery.discoveryApi.getRepositoryInformation())
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return new EcmProductVersionModel(res); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return throwError(err); })));
    };
    /**
     * Gets product information for Process Services.
     * @returns ProductVersionModel containing product details
     */
    /**
     * Gets product information for Process Services.
     * @return {?} ProductVersionModel containing product details
     */
    DiscoveryApiService.prototype.getBpmProductInfo = /**
     * Gets product information for Process Services.
     * @return {?} ProductVersionModel containing product details
     */
    function () {
        return from(this.apiService.getInstance().activiti.aboutApi.getAppVersion())
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return new BpmProductVersionModel(res); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return throwError(err); })));
    };
    DiscoveryApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DiscoveryApiService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ DiscoveryApiService.ngInjectableDef = i0.defineInjectable({ factory: function DiscoveryApiService_Factory() { return new DiscoveryApiService(i0.inject(i1.AlfrescoApiService)); }, token: DiscoveryApiService, providedIn: "root" });
    return DiscoveryApiService;
}());
export { DiscoveryApiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DiscoveryApiService.prototype.apiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY292ZXJ5LWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvZGlzY292ZXJ5LWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDakcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBR2pEO0lBS0ksNkJBQW9CLFVBQThCO1FBQTlCLGVBQVUsR0FBVixVQUFVLENBQW9CO0lBQUksQ0FBQztJQUV2RDs7O09BR0c7Ozs7O0lBQ0ksK0NBQWlCOzs7O0lBQXhCO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLENBQUM7YUFDdkYsSUFBSSxDQUNELEdBQUc7Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQS9CLENBQStCLEVBQUMsRUFDN0MsVUFBVTs7OztRQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFmLENBQWUsRUFBQyxDQUN2QyxDQUFDO0lBQ1YsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7SUFDSSwrQ0FBaUI7Ozs7SUFBeEI7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDdkUsSUFBSSxDQUNELEdBQUc7Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLElBQUksc0JBQXNCLENBQUMsR0FBRyxDQUFDLEVBQS9CLENBQStCLEVBQUMsRUFDN0MsVUFBVTs7OztRQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFmLENBQWUsRUFBQyxDQUN2QyxDQUFDO0lBQ1YsQ0FBQzs7Z0JBN0JKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBTlEsa0JBQWtCOzs7OEJBcEIzQjtDQXNEQyxBQTlCRCxJQThCQztTQTNCWSxtQkFBbUI7Ozs7OztJQUVoQix5Q0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCcG1Qcm9kdWN0VmVyc2lvbk1vZGVsLCBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2R1Y3QtdmVyc2lvbi5tb2RlbCc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEaXNjb3ZlcnlBcGlTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7IH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvZHVjdCBpbmZvcm1hdGlvbiBmb3IgQ29udGVudCBTZXJ2aWNlcy5cbiAgICAgKiBAcmV0dXJucyBQcm9kdWN0VmVyc2lvbk1vZGVsIGNvbnRhaW5pbmcgcHJvZHVjdCBkZXRhaWxzXG4gICAgICovXG4gICAgcHVibGljIGdldEVjbVByb2R1Y3RJbmZvKCk6IE9ic2VydmFibGU8RWNtUHJvZHVjdFZlcnNpb25Nb2RlbD4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5kaXNjb3ZlcnkuZGlzY292ZXJ5QXBpLmdldFJlcG9zaXRvcnlJbmZvcm1hdGlvbigpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IG5ldyBFY21Qcm9kdWN0VmVyc2lvbk1vZGVsKHJlcykpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhyb3dFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHByb2R1Y3QgaW5mb3JtYXRpb24gZm9yIFByb2Nlc3MgU2VydmljZXMuXG4gICAgICogQHJldHVybnMgUHJvZHVjdFZlcnNpb25Nb2RlbCBjb250YWluaW5nIHByb2R1Y3QgZGV0YWlsc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRCcG1Qcm9kdWN0SW5mbygpOiBPYnNlcnZhYmxlPEJwbVByb2R1Y3RWZXJzaW9uTW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkuYWJvdXRBcGkuZ2V0QXBwVmVyc2lvbigpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXMpID0+IG5ldyBCcG1Qcm9kdWN0VmVyc2lvbk1vZGVsKHJlcykpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhyb3dFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=