/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./user-preferences.service";
var FavoritesApiService = /** @class */ (function () {
    function FavoritesApiService(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    FavoritesApiService.remapEntry = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var entry = _a.entry;
        entry.properties = {
            'cm:title': entry.title,
            'cm:description': entry.description
        };
        return { entry: entry };
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    FavoritesApiService.prototype.remapFavoritesData = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (data === void 0) { data = {}; }
        /** @type {?} */
        var list = (data.list || {});
        /** @type {?} */
        var pagination = (list.pagination || {});
        /** @type {?} */
        var entries = this
            .remapFavoriteEntries(list.entries || []);
        return (/** @type {?} */ ({
            list: { entries: entries, pagination: pagination }
        }));
    };
    /**
     * @param {?} entries
     * @return {?}
     */
    FavoritesApiService.prototype.remapFavoriteEntries = /**
     * @param {?} entries
     * @return {?}
     */
    function (entries) {
        return entries
            .map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var target = _a.entry.target;
            return ({
                entry: target.file || target.folder
            });
        }))
            .filter((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var entry = _a.entry;
            return (!!entry);
        }))
            .map(FavoritesApiService.remapEntry);
    };
    Object.defineProperty(FavoritesApiService.prototype, "favoritesApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().core.favoritesApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the favorites for a user.
     * @param personId ID of the user
     * @param options Options supported by JS-API
     * @returns List of favorites
     */
    /**
     * Gets the favorites for a user.
     * @param {?} personId ID of the user
     * @param {?=} options Options supported by JS-API
     * @return {?} List of favorites
     */
    FavoritesApiService.prototype.getFavorites = /**
     * Gets the favorites for a user.
     * @param {?} personId ID of the user
     * @param {?=} options Options supported by JS-API
     * @return {?} List of favorites
     */
    function (personId, options) {
        /** @type {?} */
        var defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: ['properties', 'allowableOperations']
        };
        /** @type {?} */
        var queryOptions = Object.assign(defaultOptions, options);
        /** @type {?} */
        var promise = this.favoritesApi
            .getFavorites(personId, queryOptions)
            .then(this.remapFavoritesData);
        return from(promise).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return of(err); })));
    };
    FavoritesApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FavoritesApiService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: UserPreferencesService }
    ]; };
    /** @nocollapse */ FavoritesApiService.ngInjectableDef = i0.defineInjectable({ factory: function FavoritesApiService_Factory() { return new FavoritesApiService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.UserPreferencesService)); }, token: FavoritesApiService, providedIn: "root" });
    return FavoritesApiService;
}());
export { FavoritesApiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FavoritesApiService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    FavoritesApiService.prototype.preferences;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRTVDO0lBa0NJLDZCQUNZLFVBQThCLEVBQzlCLFdBQW1DO1FBRG5DLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtJQUM1QyxDQUFDOzs7OztJQWhDRyw4QkFBVTs7OztJQUFqQixVQUFrQixFQUFjO1lBQVosZ0JBQUs7UUFDckIsS0FBSyxDQUFDLFVBQVUsR0FBRztZQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSztZQUN2QixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsV0FBVztTQUN0QyxDQUFDO1FBRUYsT0FBTyxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxnREFBa0I7Ozs7SUFBbEIsVUFBbUIsSUFBYztRQUFkLHFCQUFBLEVBQUEsU0FBYzs7WUFDdkIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7O1lBQ3hCLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDOztZQUNwQyxPQUFPLEdBQVUsSUFBSTthQUN0QixvQkFBb0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUU3QyxPQUFPLG1CQUFhO1lBQ2hCLElBQUksRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLFVBQVUsWUFBQSxFQUFFO1NBQ2hDLEVBQUEsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRUQsa0RBQW9COzs7O0lBQXBCLFVBQXFCLE9BQWM7UUFDL0IsT0FBTyxPQUFPO2FBQ1QsR0FBRzs7OztRQUFDLFVBQUMsRUFBeUI7Z0JBQWQsd0JBQU07WUFBYSxPQUFBLENBQUM7Z0JBQ2pDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNO2FBQ3RDLENBQUM7UUFGa0MsQ0FFbEMsRUFBQzthQUNGLE1BQU07Ozs7UUFBQyxVQUFDLEVBQVM7Z0JBQVAsZ0JBQUs7WUFBTyxPQUFBLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUFULENBQVMsRUFBQzthQUNoQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQU9ELHNCQUFZLDZDQUFZOzs7OztRQUF4QjtZQUNHLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzFELENBQUM7OztPQUFBO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7SUFDSCwwQ0FBWTs7Ozs7O0lBQVosVUFBYSxRQUFnQixFQUFFLE9BQWE7O1lBQ2xDLGNBQWMsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjO1lBQ3pDLFNBQVMsRUFBRSxDQUFDO1lBQ1osS0FBSyxFQUFFLGdEQUFnRDtZQUN2RCxPQUFPLEVBQUUsQ0FBRSxZQUFZLEVBQUUscUJBQXFCLENBQUU7U0FDbkQ7O1lBQ0ssWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQzs7WUFDckQsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZO2FBQzVCLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDO2FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFFbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNyQixVQUFVOzs7O1FBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQVAsQ0FBTyxFQUFDLENBQy9CLENBQUM7SUFDTixDQUFDOztnQkFoRUosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFOUSxrQkFBa0I7Z0JBQ2xCLHNCQUFzQjs7OzhCQXJCL0I7Q0F5RkMsQUFqRUQsSUFpRUM7U0E5RFksbUJBQW1COzs7Ozs7SUFnQ3hCLHlDQUFzQzs7Ozs7SUFDdEMsMENBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZyB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4vYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJy4vdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRmF2b3JpdGVzQXBpU2VydmljZSB7XG5cbiAgICBzdGF0aWMgcmVtYXBFbnRyeSh7IGVudHJ5IH06IGFueSk6IGFueSB7XG4gICAgICAgIGVudHJ5LnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAnY206dGl0bGUnOiBlbnRyeS50aXRsZSxcbiAgICAgICAgICAgICdjbTpkZXNjcmlwdGlvbic6IGVudHJ5LmRlc2NyaXB0aW9uXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHsgZW50cnkgfTtcbiAgICB9XG5cbiAgICByZW1hcEZhdm9yaXRlc0RhdGEoZGF0YTogYW55ID0ge30pOiBOb2RlUGFnaW5nIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IChkYXRhLmxpc3QgfHwge30pO1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0gKGxpc3QucGFnaW5hdGlvbiB8fCB7fSk7XG4gICAgICAgIGNvbnN0IGVudHJpZXM6IGFueVtdID0gdGhpc1xuICAgICAgICAgICAgLnJlbWFwRmF2b3JpdGVFbnRyaWVzKGxpc3QuZW50cmllcyB8fCBbXSk7XG5cbiAgICAgICAgcmV0dXJuIDxOb2RlUGFnaW5nPiB7XG4gICAgICAgICAgICBsaXN0OiB7IGVudHJpZXMsIHBhZ2luYXRpb24gfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbWFwRmF2b3JpdGVFbnRyaWVzKGVudHJpZXM6IGFueVtdKSB7XG4gICAgICAgIHJldHVybiBlbnRyaWVzXG4gICAgICAgICAgICAubWFwKCh7IGVudHJ5OiB7IHRhcmdldCB9fTogYW55KSA9PiAoe1xuICAgICAgICAgICAgICAgIGVudHJ5OiB0YXJnZXQuZmlsZSB8fCB0YXJnZXQuZm9sZGVyXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHsgZW50cnkgfSkgPT4gKCEhZW50cnkpKVxuICAgICAgICAgICAgLm1hcChGYXZvcml0ZXNBcGlTZXJ2aWNlLnJlbWFwRW50cnkpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzU2VydmljZVxuICAgICkge31cblxuICAgIHByaXZhdGUgZ2V0IGZhdm9yaXRlc0FwaSgpIHtcbiAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS5mYXZvcml0ZXNBcGk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmF2b3JpdGVzIGZvciBhIHVzZXIuXG4gICAgICogQHBhcmFtIHBlcnNvbklkIElEIG9mIHRoZSB1c2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBzdXBwb3J0ZWQgYnkgSlMtQVBJXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBmYXZvcml0ZXNcbiAgICAgKi9cbiAgICBnZXRGYXZvcml0ZXMocGVyc29uSWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnByZWZlcmVuY2VzLnBhZ2luYXRpb25TaXplLFxuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgd2hlcmU6ICcoRVhJU1RTKHRhcmdldC9maWxlKSBPUiBFWElTVFModGFyZ2V0L2ZvbGRlcikpJyxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsgJ3Byb3BlcnRpZXMnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucycgXVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBxdWVyeU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZmF2b3JpdGVzQXBpXG4gICAgICAgICAgICAuZ2V0RmF2b3JpdGVzKHBlcnNvbklkLCBxdWVyeU9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih0aGlzLnJlbWFwRmF2b3JpdGVzRGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIGZyb20ocHJvbWlzZSkucGlwZShcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gb2YoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=