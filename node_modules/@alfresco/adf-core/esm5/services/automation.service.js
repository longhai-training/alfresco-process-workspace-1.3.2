/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { StorageService } from './storage.service';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./storage.service";
var CoreAutomationService = /** @class */ (function () {
    function CoreAutomationService(appConfigService, alfrescoApiService, storageService) {
        this.appConfigService = appConfigService;
        this.alfrescoApiService = alfrescoApiService;
        this.storageService = storageService;
    }
    /**
     * @return {?}
     */
    CoreAutomationService.prototype.setup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var adfProxy = window['adf'] || {};
        adfProxy.setConfigField = (/**
         * @param {?} field
         * @param {?} value
         * @return {?}
         */
        function (field, value) {
            _this.appConfigService.config[field] = JSON.parse(value);
        });
        adfProxy.setStorageItem = (/**
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        function (key, data) {
            _this.storageService.setItem(key, data);
        });
        adfProxy.clearStorage = (/**
         * @return {?}
         */
        function () {
            _this.storageService.clear();
        });
        adfProxy.apiReset = (/**
         * @return {?}
         */
        function () {
            _this.alfrescoApiService.reset();
        });
        window['adf'] = adfProxy;
    };
    CoreAutomationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CoreAutomationService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService },
        { type: StorageService }
    ]; };
    /** @nocollapse */ CoreAutomationService.ngInjectableDef = i0.defineInjectable({ factory: function CoreAutomationService_Factory() { return new CoreAutomationService(i0.inject(i1.AppConfigService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.StorageService)); }, token: CoreAutomationService, providedIn: "root" });
    return CoreAutomationService;
}());
export { CoreAutomationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    CoreAutomationService.prototype.storageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b21hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvYXV0b21hdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7OztBQUVuRDtJQUlJLCtCQUFvQixnQkFBa0MsRUFDbEMsa0JBQXNDLEVBQ3RDLGNBQThCO1FBRjlCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDbEQsQ0FBQzs7OztJQUVELHFDQUFLOzs7SUFBTDtRQUFBLGlCQW9CQzs7WUFuQlMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBRXBDLFFBQVEsQ0FBQyxjQUFjOzs7OztRQUFHLFVBQUMsS0FBYSxFQUFFLEtBQWE7WUFDbkQsS0FBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQSxDQUFDO1FBRUYsUUFBUSxDQUFDLGNBQWM7Ozs7O1FBQUcsVUFBQyxHQUFXLEVBQUUsSUFBWTtZQUNoRCxLQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFBLENBQUM7UUFFRixRQUFRLENBQUMsWUFBWTs7O1FBQUc7WUFDcEIsS0FBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxDQUFDLENBQUEsQ0FBQztRQUVGLFFBQVEsQ0FBQyxRQUFROzs7UUFBRztZQUNoQixLQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFBLENBQUM7UUFFRixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7O2dCQTdCSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQU5RLGdCQUFnQjtnQkFDaEIsa0JBQWtCO2dCQUNsQixjQUFjOzs7Z0NBcEJ2QjtDQW9EQyxBQTlCRCxJQThCQztTQTNCWSxxQkFBcUI7Ozs7OztJQUNsQixpREFBMEM7Ozs7O0lBQzFDLG1EQUE4Qzs7Ozs7SUFDOUMsK0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yYWdlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvcmVBdXRvbWF0aW9uU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgY29uc3QgYWRmUHJveHkgPSB3aW5kb3dbJ2FkZiddIHx8IHt9O1xuXG4gICAgICAgIGFkZlByb3h5LnNldENvbmZpZ0ZpZWxkID0gKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwQ29uZmlnU2VydmljZS5jb25maWdbZmllbGRdID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuc2V0U3RvcmFnZUl0ZW0gPSAoa2V5OiBzdHJpbmcsIGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYWRmUHJveHkuY2xlYXJTdG9yYWdlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5jbGVhcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZlByb3h5LmFwaVJlc2V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UucmVzZXQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3dbJ2FkZiddID0gYWRmUHJveHk7XG4gICAgfVxufVxuIl19