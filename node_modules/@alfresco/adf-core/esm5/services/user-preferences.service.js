/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./storage.service";
/** @enum {string} */
var UserPreferenceValues = {
    PaginationSize: 'paginationSize',
    Locale: 'locale',
    SupportedPageSizes: 'supportedPageSizes',
    ExpandedSideNavStatus: 'expandedSidenav',
};
export { UserPreferenceValues };
var UserPreferencesService = /** @class */ (function () {
    function UserPreferencesService(translate, appConfig, storage) {
        this.translate = translate;
        this.appConfig = appConfig;
        this.storage = storage;
        this.defaults = {
            paginationSize: 25,
            supportedPageSizes: [5, 10, 15, 20],
            locale: 'en',
            expandedSidenav: true
        };
        this.userPreferenceStatus = this.defaults;
        this.appConfig.onLoad.subscribe(this.initUserPreferenceStatus.bind(this));
        this.onChangeSubject = new BehaviorSubject(this.userPreferenceStatus);
        this.onChange = this.onChangeSubject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    UserPreferencesService.prototype.initUserPreferenceStatus = /**
     * @private
     * @return {?}
     */
    function () {
        this.initUserLanguage();
        this.set(UserPreferenceValues.PaginationSize, this.paginationSize);
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(this.supportedPageSizes));
    };
    /**
     * @private
     * @return {?}
     */
    UserPreferencesService.prototype.initUserLanguage = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.locale || this.appConfig.get(UserPreferenceValues.Locale)) {
            this.set(UserPreferenceValues.Locale, (this.locale || this.getDefaultLocale()));
        }
        else {
            this.setWithoutStore(UserPreferenceValues.Locale, (this.locale || this.getDefaultLocale()));
        }
    };
    /**
     * Sets up a callback to notify when a property has changed.
     * @param property The property to watch
     * @returns Notification callback
     */
    /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    UserPreferencesService.prototype.select = /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    function (property) {
        return this.onChange
            .pipe(map((/**
         * @param {?} userPreferenceStatus
         * @return {?}
         */
        function (userPreferenceStatus) { return userPreferenceStatus[property]; })), distinctUntilChanged());
    };
    /**
     * Gets a preference property.
     * @param property Name of the property
     * @param defaultValue Default to return if the property is not found
     * @returns Preference property
     */
    /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    UserPreferencesService.prototype.get = /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    function (property, defaultValue) {
        /** @type {?} */
        var key = this.getPropertyKey(property);
        /** @type {?} */
        var value = this.storage.getItem(key);
        if (value === undefined || value === null) {
            return defaultValue;
        }
        return value;
    };
    /**
     * Sets a preference property.
     * @param property Name of the property
     * @param value New value for the property
     */
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    UserPreferencesService.prototype.set = /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    function (property, value) {
        if (!property) {
            return;
        }
        this.storage.setItem(this.getPropertyKey(property), value);
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    };
    /**
     * Sets a preference property.
     * @param property Name of the property
     * @param value New value for the property
     */
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    UserPreferencesService.prototype.setWithoutStore = /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    function (property, value) {
        if (!property) {
            return;
        }
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    };
    /**
     * Check if an item is present in the storage
     * @param property Name of the property
     * @returns True if the item is present, false otherwise
     */
    /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    UserPreferencesService.prototype.hasItem = /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    function (property) {
        if (!property) {
            return;
        }
        return this.storage.hasItem(this.getPropertyKey(property));
    };
    /**
     * Gets the active storage prefix for preferences.
     * @returns Storage prefix
     */
    /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    UserPreferencesService.prototype.getStoragePrefix = /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    function () {
        return this.storage.getItem('USER_PROFILE') || 'GUEST';
    };
    /**
     * Sets the active storage prefix for preferences.
     * @param value Name of the prefix
     */
    /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    UserPreferencesService.prototype.setStoragePrefix = /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    function (value) {
        this.storage.setItem('USER_PROFILE', value || 'GUEST');
        this.initUserPreferenceStatus();
    };
    /**
     * Gets the full property key with prefix.
     * @param property The property name
     * @returns Property key
     */
    /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    UserPreferencesService.prototype.getPropertyKey = /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    function (property) {
        return this.getStoragePrefix() + "__" + property;
    };
    Object.defineProperty(UserPreferencesService.prototype, "supportedPageSizes", {
        /**
         * Gets an array containing the available page sizes.
         * @returns Array of page size values
         */
        get: /**
         * Gets an array containing the available page sizes.
         * @return {?} Array of page size values
         */
        function () {
            /** @type {?} */
            var supportedPageSizes = this.get(UserPreferenceValues.SupportedPageSizes);
            if (supportedPageSizes) {
                return JSON.parse(supportedPageSizes);
            }
            else {
                return this.appConfig.get('pagination.supportedPageSizes', this.defaults.supportedPageSizes);
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserPreferencesService.prototype, "paginationSize", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var paginationSize = this.get(UserPreferenceValues.PaginationSize);
            if (paginationSize) {
                return Number(paginationSize);
            }
            else {
                return Number(this.appConfig.get('pagination.size', this.defaults.paginationSize));
            }
        },
        /** Pagination size. */
        set: /**
         * Pagination size.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.PaginationSize, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserPreferencesService.prototype, "locale", {
        /** Current locale setting. */
        get: /**
         * Current locale setting.
         * @return {?}
         */
        function () {
            return this.get(UserPreferenceValues.Locale);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.set(UserPreferenceValues.Locale, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the default locale.
     * @returns Default locale language code
     */
    /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    UserPreferencesService.prototype.getDefaultLocale = /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    function () {
        return this.appConfig.get(UserPreferenceValues.Locale) || this.translate.getBrowserCultureLang() || 'en';
    };
    UserPreferencesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserPreferencesService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: AppConfigService },
        { type: StorageService }
    ]; };
    /** @nocollapse */ UserPreferencesService.ngInjectableDef = i0.defineInjectable({ factory: function UserPreferencesService_Factory() { return new UserPreferencesService(i0.inject(i1.TranslateService), i0.inject(i2.AppConfigService), i0.inject(i3.StorageService)); }, token: UserPreferencesService, providedIn: "root" });
    return UserPreferencesService;
}());
export { UserPreferencesService };
if (false) {
    /** @type {?} */
    UserPreferencesService.prototype.defaults;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.userPreferenceStatus;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.onChangeSubject;
    /** @type {?} */
    UserPreferencesService.prototype.onChange;
    /** @type {?} */
    UserPreferencesService.prototype.translate;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.storage;
}
//# sourceMappingURL=data:application/json;base64,