/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiCompatibility, AlfrescoApiConfig } from '@alfresco/js-api';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
/* tslint:disable:adf-file-name */
var AlfrescoApiService = /** @class */ (function () {
    function AlfrescoApiService(appConfig) {
        this.appConfig = appConfig;
        /**
         * Publish/subscribe to events related to node updates.
         */
        this.nodeUpdated = new Subject();
    }
    /**
     * @return {?}
     */
    AlfrescoApiService.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.alfrescoApi;
    };
    Object.defineProperty(AlfrescoApiService.prototype, "taskApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().activiti.taskApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "contentApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "nodesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().nodes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "renditionsApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.renditionsApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "sharedLinksApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.sharedlinksApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "sitesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.sitesApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "favoritesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.favoritesApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "peopleApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.peopleApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "searchApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().search.searchApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "versionsApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.versionsApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "classesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.classesApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoApiService.prototype, "groupsApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().core.groupsApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AlfrescoApiService.prototype.load = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.appConfig.load().then((/**
                         * @return {?}
                         */
                        function () {
                            _this.initAlfrescoApi();
                        }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    AlfrescoApiService.prototype.reset = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.initAlfrescoApi();
                return [2 /*return*/];
            });
        });
    };
    /**
     * @protected
     * @return {?}
     */
    AlfrescoApiService.prototype.initAlfrescoApi = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oauth = Object.assign({}, this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        if (oauth) {
            oauth.redirectUri = window.location.origin + (oauth.redirectUri || '/');
            oauth.redirectUriLogout = window.location.origin + (oauth.redirectUriLogout || '/');
        }
        /** @type {?} */
        var config = new AlfrescoApiConfig({
            provider: this.appConfig.get(AppConfigValues.PROVIDERS),
            hostEcm: this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: this.appConfig.get(AppConfigValues.BPMHOST),
            authType: this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: this.appConfig.get(AppConfigValues.DISABLECSRF),
            withCredentials: this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false),
            oauth2: oauth
        });
        if (this.alfrescoApi && this.isDifferentConfig(this.lastConfig, config)) {
            this.lastConfig = config;
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.lastConfig = config;
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    };
    /**
     * @param {?} lastConfig
     * @param {?} newConfig
     * @return {?}
     */
    AlfrescoApiService.prototype.isDifferentConfig = /**
     * @param {?} lastConfig
     * @param {?} newConfig
     * @return {?}
     */
    function (lastConfig, newConfig) {
        return JSON.stringify(lastConfig) !== JSON.stringify(newConfig);
    };
    AlfrescoApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AlfrescoApiService.ctorParameters = function () { return [
        { type: AppConfigService }
    ]; };
    /** @nocollapse */ AlfrescoApiService.ngInjectableDef = i0.defineInjectable({ factory: function AlfrescoApiService_Factory() { return new AlfrescoApiService(i0.inject(i1.AppConfigService)); }, token: AlfrescoApiService, providedIn: "root" });
    return AlfrescoApiService;
}());
export { AlfrescoApiService };
if (false) {
    /**
     * Publish/subscribe to events related to node updates.
     * @type {?}
     */
    AlfrescoApiService.prototype.nodeUpdated;
    /**
     * @type {?}
     * @protected
     */
    AlfrescoApiService.prototype.alfrescoApi;
    /** @type {?} */
    AlfrescoApiService.prototype.lastConfig;
    /**
     * @type {?}
     * @protected
     */
    AlfrescoApiService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,