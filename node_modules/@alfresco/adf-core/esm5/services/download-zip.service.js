/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { LogService } from './log.service';
import { AlfrescoApiService } from './alfresco-api.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
var DownloadZipService = /** @class */ (function () {
    function DownloadZipService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Creates a new download.
     * @param payload Object containing the node IDs of the items to add to the ZIP file
     * @returns Status object for the download
     */
    /**
     * Creates a new download.
     * @param {?} payload Object containing the node IDs of the items to add to the ZIP file
     * @return {?} Status object for the download
     */
    DownloadZipService.prototype.createDownload = /**
     * Creates a new download.
     * @param {?} payload Object containing the node IDs of the items to add to the ZIP file
     * @return {?} Status object for the download
     */
    function (payload) {
        var _this = this;
        return from(this.apiService.getInstance().core.downloadsApi.createDownload(payload)).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets a content URL for the given node.
     * @param nodeId Node to get URL for.
     * @param attachment Toggles whether to retrieve content as an attachment for download
     * @returns URL string
     */
    /**
     * Gets a content URL for the given node.
     * @param {?} nodeId Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @return {?} URL string
     */
    DownloadZipService.prototype.getContentUrl = /**
     * Gets a content URL for the given node.
     * @param {?} nodeId Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @return {?} URL string
     */
    function (nodeId, attachment) {
        return this.apiService.getInstance().content.getContentUrl(nodeId, attachment);
    };
    /**
     * Gets a Node via its node ID.
     * @param nodeId ID of the target node
     * @returns Details of the node
     */
    /**
     * Gets a Node via its node ID.
     * @param {?} nodeId ID of the target node
     * @return {?} Details of the node
     */
    DownloadZipService.prototype.getNode = /**
     * Gets a Node via its node ID.
     * @param {?} nodeId ID of the target node
     * @return {?} Details of the node
     */
    function (nodeId) {
        return from(this.apiService.getInstance().core.nodesApi.getNode(nodeId));
    };
    /**
     * Gets status information for a download node.
     * @param downloadId ID of the download node
     * @returns Status object for the download
     */
    /**
     * Gets status information for a download node.
     * @param {?} downloadId ID of the download node
     * @return {?} Status object for the download
     */
    DownloadZipService.prototype.getDownload = /**
     * Gets status information for a download node.
     * @param {?} downloadId ID of the download node
     * @return {?} Status object for the download
     */
    function (downloadId) {
        return from(this.apiService.getInstance().core.downloadsApi.getDownload(downloadId));
    };
    /**
     * Cancels a download.
     * @param downloadId ID of the target download node
     */
    /**
     * Cancels a download.
     * @param {?} downloadId ID of the target download node
     * @return {?}
     */
    DownloadZipService.prototype.cancelDownload = /**
     * Cancels a download.
     * @param {?} downloadId ID of the target download node
     * @return {?}
     */
    function (downloadId) {
        this.apiService.getInstance().core.downloadsApi.cancelDownload(downloadId);
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    DownloadZipService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    DownloadZipService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DownloadZipService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ DownloadZipService.ngInjectableDef = i0.defineInjectable({ factory: function DownloadZipService_Factory() { return new DownloadZipService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: DownloadZipService, providedIn: "root" });
    return DownloadZipService;
}());
export { DownloadZipService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DownloadZipService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    DownloadZipService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWQtemlwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9kb3dubG9hZC16aXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRTVDO0lBS0ksNEJBQW9CLFVBQThCLEVBQzlCLFVBQXNCO1FBRHRCLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7Ozs7OztJQUNILDJDQUFjOzs7OztJQUFkLFVBQWUsT0FBMkI7UUFBMUMsaUJBSUM7UUFIRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNyRixVQUFVOzs7O1FBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixFQUFDLENBQzdDLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7SUFDSCwwQ0FBYTs7Ozs7O0lBQWIsVUFBYyxNQUFjLEVBQUUsVUFBb0I7UUFDOUMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7SUFDSCxvQ0FBTzs7Ozs7SUFBUCxVQUFRLE1BQWM7UUFDbEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7SUFDSCx3Q0FBVzs7Ozs7SUFBWCxVQUFZLFVBQWtCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSCwyQ0FBYzs7Ozs7SUFBZCxVQUFlLFVBQWtCO1FBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7O0lBRU8sd0NBQVc7Ozs7O0lBQW5CLFVBQW9CLEtBQVU7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7O2dCQTNESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQUxRLGtCQUFrQjtnQkFEbEIsVUFBVTs7OzZCQXBCbkI7Q0FvRkMsQUE1REQsSUE0REM7U0F6RFksa0JBQWtCOzs7Ozs7SUFFZix3Q0FBc0M7Ozs7O0lBQ3RDLHdDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE5vZGVFbnRyeSwgRG93bmxvYWRFbnRyeSwgRG93bmxvYWRCb2R5Q3JlYXRlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnLi9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRG93bmxvYWRaaXBTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZG93bmxvYWQuXG4gICAgICogQHBhcmFtIHBheWxvYWQgT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5vZGUgSURzIG9mIHRoZSBpdGVtcyB0byBhZGQgdG8gdGhlIFpJUCBmaWxlXG4gICAgICogQHJldHVybnMgU3RhdHVzIG9iamVjdCBmb3IgdGhlIGRvd25sb2FkXG4gICAgICovXG4gICAgY3JlYXRlRG93bmxvYWQocGF5bG9hZDogRG93bmxvYWRCb2R5Q3JlYXRlKTogT2JzZXJ2YWJsZTxEb3dubG9hZEVudHJ5PiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmNvcmUuZG93bmxvYWRzQXBpLmNyZWF0ZURvd25sb2FkKHBheWxvYWQpKS5waXBlKFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGNvbnRlbnQgVVJMIGZvciB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIE5vZGUgdG8gZ2V0IFVSTCBmb3IuXG4gICAgICogQHBhcmFtIGF0dGFjaG1lbnQgVG9nZ2xlcyB3aGV0aGVyIHRvIHJldHJpZXZlIGNvbnRlbnQgYXMgYW4gYXR0YWNobWVudCBmb3IgZG93bmxvYWRcbiAgICAgKiBAcmV0dXJucyBVUkwgc3RyaW5nXG4gICAgICovXG4gICAgZ2V0Q29udGVudFVybChub2RlSWQ6IHN0cmluZywgYXR0YWNobWVudD86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29udGVudC5nZXRDb250ZW50VXJsKG5vZGVJZCwgYXR0YWNobWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIE5vZGUgdmlhIGl0cyBub2RlIElELlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBub2RlXG4gICAgICogQHJldHVybnMgRGV0YWlscyBvZiB0aGUgbm9kZVxuICAgICAqL1xuICAgIGdldE5vZGUobm9kZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE5vZGVFbnRyeT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLm5vZGVzQXBpLmdldE5vZGUobm9kZUlkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBzdGF0dXMgaW5mb3JtYXRpb24gZm9yIGEgZG93bmxvYWQgbm9kZS5cbiAgICAgKiBAcGFyYW0gZG93bmxvYWRJZCBJRCBvZiB0aGUgZG93bmxvYWQgbm9kZVxuICAgICAqIEByZXR1cm5zIFN0YXR1cyBvYmplY3QgZm9yIHRoZSBkb3dubG9hZFxuICAgICAqL1xuICAgIGdldERvd25sb2FkKGRvd25sb2FkSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8RG93bmxvYWRFbnRyeT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLmRvd25sb2Fkc0FwaS5nZXREb3dubG9hZChkb3dubG9hZElkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIGRvd25sb2FkLlxuICAgICAqIEBwYXJhbSBkb3dubG9hZElkIElEIG9mIHRoZSB0YXJnZXQgZG93bmxvYWQgbm9kZVxuICAgICAqL1xuICAgIGNhbmNlbERvd25sb2FkKGRvd25sb2FkSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jb3JlLmRvd25sb2Fkc0FwaS5jYW5jZWxEb3dubG9hZChkb3dubG9hZElkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==