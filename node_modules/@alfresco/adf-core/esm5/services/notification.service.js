/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material';
import { TranslationService } from './translation.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "./translation.service";
import * as i3 from "../app-config/app-config.service";
var NotificationService = /** @class */ (function () {
    function NotificationService(snackBar, translationService, appConfigService) {
        this.snackBar = snackBar;
        this.translationService = translationService;
        this.appConfigService = appConfigService;
        this.DEFAULT_DURATION_MESSAGE = 5000;
        this.DEFAULT_DURATION_MESSAGE = this.appConfigService.get(AppConfigValues.NOTIFY_DURATION) || this.DEFAULT_DURATION_MESSAGE;
    }
    /**
     * Opens a SnackBar notification to show a message.
     * @param message The message (or resource key) to show.
     * @param config Time before notification disappears after being shown or MatSnackBarConfig object
     * @returns Information/control object for the SnackBar
     */
    /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    NotificationService.prototype.openSnackMessage = /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    function (message, config) {
        if (!config) {
            config = this.DEFAULT_DURATION_MESSAGE;
        }
        /** @type {?} */
        var translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, null, config);
    };
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param message The message (or resource key) to show.
     * @param action Caption for the response button
     * @param config Time before notification disappears after being shown or MatSnackBarConfig object
     * @returns Information/control object for the SnackBar
     */
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    NotificationService.prototype.openSnackMessageAction = /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    function (message, action, config) {
        if (!config) {
            config = this.DEFAULT_DURATION_MESSAGE;
        }
        /** @type {?} */
        var translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, action, config);
    };
    /**
     *  dismiss the notification snackbar
     */
    /**
     *  dismiss the notification snackbar
     * @return {?}
     */
    NotificationService.prototype.dismissSnackMessageAction = /**
     *  dismiss the notification snackbar
     * @return {?}
     */
    function () {
        return this.snackBar.dismiss();
    };
    NotificationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NotificationService.ctorParameters = function () { return [
        { type: MatSnackBar },
        { type: TranslationService },
        { type: AppConfigService }
    ]; };
    /** @nocollapse */ NotificationService.ngInjectableDef = i0.defineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(i0.inject(i1.MatSnackBar), i0.inject(i2.TranslationService), i0.inject(i3.AppConfigService)); }, token: NotificationService, providedIn: "root" });
    return NotificationService;
}());
export { NotificationService };
if (false) {
    /** @type {?} */
    NotificationService.prototype.DEFAULT_DURATION_MESSAGE;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.snackBar;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQXFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbkYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7OztBQUVyRjtJQU9JLDZCQUFvQixRQUFxQixFQUNyQixrQkFBc0MsRUFDdEMsZ0JBQWtDO1FBRmxDLGFBQVEsR0FBUixRQUFRLENBQWE7UUFDckIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSnRELDZCQUF3QixHQUFXLElBQUksQ0FBQztRQUtwQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLHdCQUF3QixDQUFDO0lBRXhJLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILDhDQUFnQjs7Ozs7O0lBQWhCLFVBQWlCLE9BQWUsRUFBRSxNQUFtQztRQUNqRSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsTUFBTSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztTQUMxQzs7WUFFSyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUVsRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLEdBQUc7Z0JBQ0wsUUFBUSxFQUFFLE1BQU07YUFDbkIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVEOzs7Ozs7T0FNRzs7Ozs7Ozs7SUFDSCxvREFBc0I7Ozs7Ozs7SUFBdEIsVUFBdUIsT0FBZSxFQUFFLE1BQWMsRUFBRSxNQUFtQztRQUN2RixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsTUFBTSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztTQUMxQzs7WUFFSyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUVsRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLEdBQUc7Z0JBQ0wsUUFBUSxFQUFFLE1BQU07YUFDbkIsQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHVEQUF5Qjs7OztJQUF6QjtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQyxDQUFDOztnQkFoRUosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFOUSxXQUFXO2dCQUNYLGtCQUFrQjtnQkFDbEIsZ0JBQWdCOzs7OEJBcEJ6QjtDQXVGQyxBQWpFRCxJQWlFQztTQTlEWSxtQkFBbUI7OztJQUU1Qix1REFBd0M7Ozs7O0lBRTVCLHVDQUE2Qjs7Ozs7SUFDN0IsaURBQThDOzs7OztJQUM5QywrQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTbmFja0JhciwgTWF0U25hY2tCYXJSZWYsIE1hdFNuYWNrQmFyQ29uZmlnIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi90cmFuc2xhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcENvbmZpZ1NlcnZpY2UsIEFwcENvbmZpZ1ZhbHVlcyB9IGZyb20gJy4uL2FwcC1jb25maWcvYXBwLWNvbmZpZy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25TZXJ2aWNlIHtcblxuICAgIERFRkFVTFRfRFVSQVRJT05fTUVTU0FHRTogbnVtYmVyID0gNTAwMDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc25hY2tCYXI6IE1hdFNuYWNrQmFyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuREVGQVVMVF9EVVJBVElPTl9NRVNTQUdFID0gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldDxudW1iZXI+KEFwcENvbmZpZ1ZhbHVlcy5OT1RJRllfRFVSQVRJT04pIHx8IHRoaXMuREVGQVVMVF9EVVJBVElPTl9NRVNTQUdFO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBTbmFja0JhciBub3RpZmljYXRpb24gdG8gc2hvdyBhIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgKG9yIHJlc291cmNlIGtleSkgdG8gc2hvdy5cbiAgICAgKiBAcGFyYW0gY29uZmlnIFRpbWUgYmVmb3JlIG5vdGlmaWNhdGlvbiBkaXNhcHBlYXJzIGFmdGVyIGJlaW5nIHNob3duIG9yIE1hdFNuYWNrQmFyQ29uZmlnIG9iamVjdFxuICAgICAqIEByZXR1cm5zIEluZm9ybWF0aW9uL2NvbnRyb2wgb2JqZWN0IGZvciB0aGUgU25hY2tCYXJcbiAgICAgKi9cbiAgICBvcGVuU25hY2tNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgY29uZmlnPzogbnVtYmVyIHwgTWF0U25hY2tCYXJDb25maWcpOiBNYXRTbmFja0JhclJlZjxhbnk+IHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHRoaXMuREVGQVVMVF9EVVJBVElPTl9NRVNTQUdFO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNsYXRlZE1lc3NhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KG1lc3NhZ2UpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBjb25maWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zbmFja0Jhci5vcGVuKHRyYW5zbGF0ZWRNZXNzYWdlLCBudWxsLCBjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgU25hY2tCYXIgbm90aWZpY2F0aW9uIHdpdGggYSBtZXNzYWdlIGFuZCBhIHJlc3BvbnNlIGJ1dHRvbi5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSAob3IgcmVzb3VyY2Uga2V5KSB0byBzaG93LlxuICAgICAqIEBwYXJhbSBhY3Rpb24gQ2FwdGlvbiBmb3IgdGhlIHJlc3BvbnNlIGJ1dHRvblxuICAgICAqIEBwYXJhbSBjb25maWcgVGltZSBiZWZvcmUgbm90aWZpY2F0aW9uIGRpc2FwcGVhcnMgYWZ0ZXIgYmVpbmcgc2hvd24gb3IgTWF0U25hY2tCYXJDb25maWcgb2JqZWN0XG4gICAgICogQHJldHVybnMgSW5mb3JtYXRpb24vY29udHJvbCBvYmplY3QgZm9yIHRoZSBTbmFja0JhclxuICAgICAqL1xuICAgIG9wZW5TbmFja01lc3NhZ2VBY3Rpb24obWVzc2FnZTogc3RyaW5nLCBhY3Rpb246IHN0cmluZywgY29uZmlnPzogbnVtYmVyIHwgTWF0U25hY2tCYXJDb25maWcpOiBNYXRTbmFja0JhclJlZjxhbnk+IHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHRoaXMuREVGQVVMVF9EVVJBVElPTl9NRVNTQUdFO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNsYXRlZE1lc3NhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KG1lc3NhZ2UpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBjb25maWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zbmFja0Jhci5vcGVuKHRyYW5zbGF0ZWRNZXNzYWdlLCBhY3Rpb24sIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIGRpc21pc3MgdGhlIG5vdGlmaWNhdGlvbiBzbmFja2JhclxuICAgICAqL1xuICAgIGRpc21pc3NTbmFja01lc3NhZ2VBY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLmRpc21pc3MoKTtcbiAgICB9XG59XG4iXX0=