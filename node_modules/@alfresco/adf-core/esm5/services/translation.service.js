/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { UserPreferencesService, UserPreferenceValues } from './user-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "./user-preferences.service";
/** @type {?} */
export var TRANSLATION_PROVIDER = new InjectionToken('Injection token for translation providers.');
/**
 * @record
 */
export function TranslationProvider() { }
if (false) {
    /** @type {?} */
    TranslationProvider.prototype.name;
    /** @type {?} */
    TranslationProvider.prototype.source;
}
var TranslationService = /** @class */ (function () {
    function TranslationService(translate, userPreferencesService, providers) {
        var e_1, _a;
        var _this = this;
        this.translate = translate;
        this.customLoader = (/** @type {?} */ (this.translate.currentLoader));
        this.defaultLang = 'en';
        translate.setDefaultLang(this.defaultLang);
        this.customLoader.setDefaultLang(this.defaultLang);
        if (providers && providers.length > 0) {
            try {
                for (var providers_1 = tslib_1.__values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {
                    var provider = providers_1_1.value;
                    this.addTranslationFolder(provider.name, provider.source);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        userPreferencesService.select(UserPreferenceValues.Locale).subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            if (locale) {
                _this.userLang = locale;
                _this.use(_this.userLang);
            }
        }));
    }
    /**
     * Adds a new folder of translation source files.
     * @param name Name for the translation provider
     * @param path Path to the folder
     */
    /**
     * Adds a new folder of translation source files.
     * @param {?=} name Name for the translation provider
     * @param {?=} path Path to the folder
     * @return {?}
     */
    TranslationService.prototype.addTranslationFolder = /**
     * Adds a new folder of translation source files.
     * @param {?=} name Name for the translation provider
     * @param {?=} path Path to the folder
     * @return {?}
     */
    function (name, path) {
        if (name === void 0) { name = ''; }
        if (path === void 0) { path = ''; }
        if (!this.customLoader.providerRegistered(name)) {
            this.customLoader.registerProvider(name, path);
            if (this.userLang) {
                this.loadTranslation(this.userLang, this.defaultLang);
            }
            else {
                this.loadTranslation(this.defaultLang);
            }
        }
    };
    /**
     * Loads a translation file.
     * @param lang Language code for the language to load
     * @param fallback Language code to fall back to if the first one was unavailable
     */
    /**
     * Loads a translation file.
     * @param {?} lang Language code for the language to load
     * @param {?=} fallback Language code to fall back to if the first one was unavailable
     * @return {?}
     */
    TranslationService.prototype.loadTranslation = /**
     * Loads a translation file.
     * @param {?} lang Language code for the language to load
     * @param {?=} fallback Language code to fall back to if the first one was unavailable
     * @return {?}
     */
    function (lang, fallback) {
        var _this = this;
        this.translate.getTranslation(lang).subscribe((/**
         * @return {?}
         */
        function () {
            _this.translate.use(lang);
            _this.onTranslationChanged(lang);
        }), (/**
         * @return {?}
         */
        function () {
            if (fallback && fallback !== lang) {
                _this.loadTranslation(fallback);
            }
        }));
    };
    /**
     * Triggers a notification callback when the translation language changes.
     * @param lang The new language code
     */
    /**
     * Triggers a notification callback when the translation language changes.
     * @param {?} lang The new language code
     * @return {?}
     */
    TranslationService.prototype.onTranslationChanged = /**
     * Triggers a notification callback when the translation language changes.
     * @param {?} lang The new language code
     * @return {?}
     */
    function (lang) {
        this.translate.onTranslationChange.next({
            lang: lang,
            translations: this.customLoader.getFullTranslationJSON(lang)
        });
    };
    /**
     * Sets the target language for translations.
     * @param lang Code name for the language
     * @returns Translations available for the language
     */
    /**
     * Sets the target language for translations.
     * @param {?} lang Code name for the language
     * @return {?} Translations available for the language
     */
    TranslationService.prototype.use = /**
     * Sets the target language for translations.
     * @param {?} lang Code name for the language
     * @return {?} Translations available for the language
     */
    function (lang) {
        this.customLoader.init(lang);
        return this.translate.use(lang);
    };
    /**
     * Gets the translation for the supplied key.
     * @param key Key to translate
     * @param interpolateParams String(s) to be interpolated into the main message
     * @returns Translated text
     */
    /**
     * Gets the translation for the supplied key.
     * @param {?} key Key to translate
     * @param {?=} interpolateParams String(s) to be interpolated into the main message
     * @return {?} Translated text
     */
    TranslationService.prototype.get = /**
     * Gets the translation for the supplied key.
     * @param {?} key Key to translate
     * @param {?=} interpolateParams String(s) to be interpolated into the main message
     * @return {?} Translated text
     */
    function (key, interpolateParams) {
        return this.translate.get(key, interpolateParams);
    };
    /**
     * Directly returns the translation for the supplied key.
     * @param key Key to translate
     * @param interpolateParams String(s) to be interpolated into the main message
     * @returns Translated text
     */
    /**
     * Directly returns the translation for the supplied key.
     * @param {?} key Key to translate
     * @param {?=} interpolateParams String(s) to be interpolated into the main message
     * @return {?} Translated text
     */
    TranslationService.prototype.instant = /**
     * Directly returns the translation for the supplied key.
     * @param {?} key Key to translate
     * @param {?=} interpolateParams String(s) to be interpolated into the main message
     * @return {?} Translated text
     */
    function (key, interpolateParams) {
        return key ? this.translate.instant(key, interpolateParams) : '';
    };
    TranslationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TranslationService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: UserPreferencesService },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLATION_PROVIDER,] }] }
    ]; };
    /** @nocollapse */ TranslationService.ngInjectableDef = i0.defineInjectable({ factory: function TranslationService_Factory() { return new TranslationService(i0.inject(i1.TranslateService), i0.inject(i2.UserPreferencesService), i0.inject(TRANSLATION_PROVIDER, 8)); }, token: TranslationService, providedIn: "root" });
    return TranslationService;
}());
export { TranslationService };
if (false) {
    /** @type {?} */
    TranslationService.prototype.defaultLang;
    /** @type {?} */
    TranslationService.prototype.userLang;
    /** @type {?} */
    TranslationService.prototype.customLoader;
    /** @type {?} */
    TranslationService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,