/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable, Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { map, catchError, tap } from 'rxjs/operators';
import { HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./cookie.service";
import * as i4 from "./log.service";
/** @type {?} */
var REMEMBER_ME_COOKIE_KEY = 'ALFRESCO_REMEMBER_ME';
/** @type {?} */
var REMEMBER_ME_UNTIL = 1000 * 60 * 60 * 24 * 30;
var AuthenticationService = /** @class */ (function () {
    function AuthenticationService(appConfig, alfrescoApi, cookie, logService) {
        this.appConfig = appConfig;
        this.alfrescoApi = alfrescoApi;
        this.cookie = cookie;
        this.logService = logService;
        this.redirectUrl = null;
        this.bearerExcludedUrls = ['auth/realms', 'resources/', 'assets/'];
        this.onLogin = new Subject();
        this.onLogout = new Subject();
    }
    /**
     * Checks if the user logged in.
     * @returns True if logged in, false otherwise
     */
    /**
     * Checks if the user logged in.
     * @return {?} True if logged in, false otherwise
     */
    AuthenticationService.prototype.isLoggedIn = /**
     * Checks if the user logged in.
     * @return {?} True if logged in, false otherwise
     */
    function () {
        if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
            return false;
        }
        return this.alfrescoApi.getInstance().isLoggedIn();
    };
    /**
     * Does the provider support OAuth?
     * @returns True if supported, false otherwise
     */
    /**
     * Does the provider support OAuth?
     * @return {?} True if supported, false otherwise
     */
    AuthenticationService.prototype.isOauth = /**
     * Does the provider support OAuth?
     * @return {?} True if supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isOauthConfiguration();
    };
    /**
     * Does the provider support ECM?
     * @returns True if supported, false otherwise
     */
    /**
     * Does the provider support ECM?
     * @return {?} True if supported, false otherwise
     */
    AuthenticationService.prototype.isECMProvider = /**
     * Does the provider support ECM?
     * @return {?} True if supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isEcmConfiguration();
    };
    /**
     * Does the provider support BPM?
     * @returns True if supported, false otherwise
     */
    /**
     * Does the provider support BPM?
     * @return {?} True if supported, false otherwise
     */
    AuthenticationService.prototype.isBPMProvider = /**
     * Does the provider support BPM?
     * @return {?} True if supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isBpmConfiguration();
    };
    /**
     * Does the provider support both ECM and BPM?
     * @returns True if both are supported, false otherwise
     */
    /**
     * Does the provider support both ECM and BPM?
     * @return {?} True if both are supported, false otherwise
     */
    AuthenticationService.prototype.isALLProvider = /**
     * Does the provider support both ECM and BPM?
     * @return {?} True if both are supported, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().isEcmBpmConfiguration();
    };
    /**
     * Logs the user in.
     * @param username Username for the login
     * @param password Password for the login
     * @param rememberMe Stores the user's login details if true
     * @returns Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    /**
     * Logs the user in.
     * @param {?} username Username for the login
     * @param {?} password Password for the login
     * @param {?=} rememberMe Stores the user's login details if true
     * @return {?} Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    AuthenticationService.prototype.login = /**
     * Logs the user in.
     * @param {?} username Username for the login
     * @param {?} password Password for the login
     * @param {?=} rememberMe Stores the user's login details if true
     * @return {?} Object with auth type ("ECM", "BPM" or "ALL") and auth ticket
     */
    function (username, password, rememberMe) {
        var _this = this;
        if (rememberMe === void 0) { rememberMe = false; }
        return from(this.alfrescoApi.getInstance().login(username, password))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.saveRememberMeCookie(rememberMe);
            _this.onLogin.next(response);
            return {
                type: _this.appConfig.get(AppConfigValues.PROVIDERS),
                ticket: response
            };
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Logs the user in with SSO
     */
    /**
     * Logs the user in with SSO
     * @return {?}
     */
    AuthenticationService.prototype.ssoImplicitLogin = /**
     * Logs the user in with SSO
     * @return {?}
     */
    function () {
        this.alfrescoApi.getInstance().implicitLogin();
    };
    /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @param rememberMe Enables a long-life cookie
     */
    /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @private
     * @param {?} rememberMe Enables a long-life cookie
     * @return {?}
     */
    AuthenticationService.prototype.saveRememberMeCookie = /**
     * Saves the "remember me" cookie as either a long-life cookie or a session cookie.
     * @private
     * @param {?} rememberMe Enables a long-life cookie
     * @return {?}
     */
    function (rememberMe) {
        /** @type {?} */
        var expiration = null;
        if (rememberMe) {
            expiration = new Date();
            /** @type {?} */
            var time = expiration.getTime();
            /** @type {?} */
            var expireTime = time + REMEMBER_ME_UNTIL;
            expiration.setTime(expireTime);
        }
        this.cookie.setItem(REMEMBER_ME_COOKIE_KEY, '1', expiration, null);
    };
    /**
     * Checks whether the "remember me" cookie was set or not.
     * @returns True if set, false otherwise
     */
    /**
     * Checks whether the "remember me" cookie was set or not.
     * @return {?} True if set, false otherwise
     */
    AuthenticationService.prototype.isRememberMeSet = /**
     * Checks whether the "remember me" cookie was set or not.
     * @return {?} True if set, false otherwise
     */
    function () {
        return (this.cookie.getItem(REMEMBER_ME_COOKIE_KEY) === null) ? false : true;
    };
    /**
     * Logs the user out.
     * @returns Response event called when logout is complete
     */
    /**
     * Logs the user out.
     * @return {?} Response event called when logout is complete
     */
    AuthenticationService.prototype.logout = /**
     * Logs the user out.
     * @return {?} Response event called when logout is complete
     */
    function () {
        var _this = this;
        return from(this.callApiLogout())
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.onLogout.next(response);
            return response;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @private
     * @return {?}
     */
    AuthenticationService.prototype.callApiLogout = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.alfrescoApi.getInstance()) {
            return this.alfrescoApi.getInstance().logout();
        }
    };
    /**
     * Gets the ECM ticket stored in the Storage.
     * @returns The ticket or `null` if none was found
     */
    /**
     * Gets the ECM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    AuthenticationService.prototype.getTicketEcm = /**
     * Gets the ECM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    function () {
        return this.alfrescoApi.getInstance().getTicketEcm();
    };
    /**
     * Gets the BPM ticket stored in the Storage.
     * @returns The ticket or `null` if none was found
     */
    /**
     * Gets the BPM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    AuthenticationService.prototype.getTicketBpm = /**
     * Gets the BPM ticket stored in the Storage.
     * @return {?} The ticket or `null` if none was found
     */
    function () {
        return this.alfrescoApi.getInstance().getTicketBpm();
    };
    /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @returns The ticket or `null` if none was found
     */
    /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @return {?} The ticket or `null` if none was found
     */
    AuthenticationService.prototype.getTicketEcmBase64 = /**
     * Gets the BPM ticket from the Storage in Base 64 format.
     * @return {?} The ticket or `null` if none was found
     */
    function () {
        /** @type {?} */
        var ticket = this.alfrescoApi.getInstance().getTicketEcm();
        if (ticket) {
            return 'Basic ' + btoa(ticket);
        }
        return null;
    };
    /**
     * Checks if the user is logged in on an ECM provider.
     * @returns True if logged in, false otherwise
     */
    /**
     * Checks if the user is logged in on an ECM provider.
     * @return {?} True if logged in, false otherwise
     */
    AuthenticationService.prototype.isEcmLoggedIn = /**
     * Checks if the user is logged in on an ECM provider.
     * @return {?} True if logged in, false otherwise
     */
    function () {
        if (this.isECMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isEcmLoggedIn();
        }
        return false;
    };
    /**
     * Checks if the user is logged in on a BPM provider.
     * @returns True if logged in, false otherwise
     */
    /**
     * Checks if the user is logged in on a BPM provider.
     * @return {?} True if logged in, false otherwise
     */
    AuthenticationService.prototype.isBpmLoggedIn = /**
     * Checks if the user is logged in on a BPM provider.
     * @return {?} True if logged in, false otherwise
     */
    function () {
        if (this.isBPMProvider() || this.isALLProvider()) {
            if (!this.isOauth() && this.cookie.isEnabled() && !this.isRememberMeSet()) {
                return false;
            }
            return this.alfrescoApi.getInstance().isBpmLoggedIn();
        }
        return false;
    };
    /**
     * Gets the ECM username.
     * @returns The ECM username
     */
    /**
     * Gets the ECM username.
     * @return {?} The ECM username
     */
    AuthenticationService.prototype.getEcmUsername = /**
     * Gets the ECM username.
     * @return {?} The ECM username
     */
    function () {
        return this.alfrescoApi.getInstance().getEcmUsername();
    };
    /**
     * Gets the BPM username
     * @returns The BPM username
     */
    /**
     * Gets the BPM username
     * @return {?} The BPM username
     */
    AuthenticationService.prototype.getBpmUsername = /**
     * Gets the BPM username
     * @return {?} The BPM username
     */
    function () {
        return this.alfrescoApi.getInstance().getBpmUsername();
    };
    /** Sets the URL to redirect to after login.
     * @param url URL to redirect to
     */
    /**
     * Sets the URL to redirect to after login.
     * @param {?} url URL to redirect to
     * @return {?}
     */
    AuthenticationService.prototype.setRedirect = /**
     * Sets the URL to redirect to after login.
     * @param {?} url URL to redirect to
     * @return {?}
     */
    function (url) {
        this.redirectUrl = url;
    };
    /** Gets the URL to redirect to after login.
     * @returns The redirect URL
     */
    /**
     * Gets the URL to redirect to after login.
     * @return {?} The redirect URL
     */
    AuthenticationService.prototype.getRedirect = /**
     * Gets the URL to redirect to after login.
     * @return {?} The redirect URL
     */
    function () {
        /** @type {?} */
        var provider = (/** @type {?} */ (this.appConfig.get(AppConfigValues.PROVIDERS)));
        return this.hasValidRedirection(provider) ? this.redirectUrl.url : null;
    };
    /**
     * Gets information about the user currently logged into APS.
     * @returns User information
     */
    /**
     * Gets information about the user currently logged into APS.
     * @return {?} User information
     */
    AuthenticationService.prototype.getBpmLoggedUser = /**
     * Gets information about the user currently logged into APS.
     * @return {?} User information
     */
    function () {
        return from(this.alfrescoApi.getInstance().activiti.profileApi.getProfile());
    };
    /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    AuthenticationService.prototype.hasValidRedirection = /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        return this.redirectUrl && (this.redirectUrl.provider === provider || this.hasSelectedProviderAll(provider));
    };
    /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    AuthenticationService.prototype.hasSelectedProviderAll = /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        return this.redirectUrl && (this.redirectUrl.provider === 'ALL' || provider === 'ALL');
    };
    /**
     * Prints an error message in the console browser
     * @param error Error message
     * @returns Object representing the error message
     */
    /**
     * Prints an error message in the console browser
     * @param {?} error Error message
     * @return {?} Object representing the error message
     */
    AuthenticationService.prototype.handleError = /**
     * Prints an error message in the console browser
     * @param {?} error Error message
     * @return {?} Object representing the error message
     */
    function (error) {
        this.logService.error('Error when logging in', error);
        return throwError(error || 'Server error');
    };
    /**
     * Gets the set of URLs that the token bearer is excluded from.
     * @returns Array of URL strings
     */
    /**
     * Gets the set of URLs that the token bearer is excluded from.
     * @return {?} Array of URL strings
     */
    AuthenticationService.prototype.getBearerExcludedUrls = /**
     * Gets the set of URLs that the token bearer is excluded from.
     * @return {?} Array of URL strings
     */
    function () {
        return this.bearerExcludedUrls;
    };
    /**
     * Gets the auth token.
     * @returns Auth token string
     */
    /**
     * Gets the auth token.
     * @return {?} Auth token string
     */
    AuthenticationService.prototype.getToken = /**
     * Gets the auth token.
     * @return {?} Auth token string
     */
    function () {
        return localStorage.getItem('access_token');
    };
    /**
     * Adds the auth token to an HTTP header using the 'bearer' scheme.
     * @param headersArg Header that will receive the token
     * @returns The new header with the token added
     */
    /**
     * Adds the auth token to an HTTP header using the 'bearer' scheme.
     * @param {?=} headersArg Header that will receive the token
     * @return {?} The new header with the token added
     */
    AuthenticationService.prototype.addTokenToHeader = /**
     * Adds the auth token to an HTTP header using the 'bearer' scheme.
     * @param {?=} headersArg Header that will receive the token
     * @return {?} The new header with the token added
     */
    function (headersArg) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var headers = headersArg;
            if (!headers) {
                headers = new HttpHeaders();
            }
            try {
                /** @type {?} */
                var token = _this.getToken();
                headers = headers.set('Authorization', 'bearer ' + token);
                observer.next(headers);
                observer.complete();
            }
            catch (error) {
                observer.error(error);
            }
        }));
    };
    /**
     * Checks if SSO is configured correctly.
     * @returns True if configured correctly, false otherwise
     */
    /**
     * Checks if SSO is configured correctly.
     * @return {?} True if configured correctly, false otherwise
     */
    AuthenticationService.prototype.isSSODiscoveryConfigured = /**
     * Checks if SSO is configured correctly.
     * @return {?} True if configured correctly, false otherwise
     */
    function () {
        return this.alfrescoApi.getInstance().storage.getItem('discovery') ? true : false;
    };
    AuthenticationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AuthenticationService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService },
        { type: CookieService },
        { type: LogService }
    ]; };
    /** @nocollapse */ AuthenticationService.ngInjectableDef = i0.defineInjectable({ factory: function AuthenticationService_Factory() { return new AuthenticationService(i0.inject(i1.AppConfigService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.CookieService), i0.inject(i4.LogService)); }, token: AuthenticationService, providedIn: "root" });
    return AuthenticationService;
}());
export { AuthenticationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.redirectUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.bearerExcludedUrls;
    /** @type {?} */
    AuthenticationService.prototype.onLogin;
    /** @type {?} */
    AuthenticationService.prototype.onLogout;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.alfrescoApi;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.cookie;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,