/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var LogLevelsEnum = /** @class */ (function (_super) {
    tslib_1.__extends(LogLevelsEnum, _super);
    function LogLevelsEnum() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LogLevelsEnum.TRACE = 5;
    LogLevelsEnum.DEBUG = 4;
    LogLevelsEnum.INFO = 3;
    LogLevelsEnum.WARN = 2;
    LogLevelsEnum.ERROR = 1;
    LogLevelsEnum.SILENT = 0;
    return LogLevelsEnum;
}(Number));
export { LogLevelsEnum };
if (false) {
    /** @type {?} */
    LogLevelsEnum.TRACE;
    /** @type {?} */
    LogLevelsEnum.DEBUG;
    /** @type {?} */
    LogLevelsEnum.INFO;
    /** @type {?} */
    LogLevelsEnum.WARN;
    /** @type {?} */
    LogLevelsEnum.ERROR;
    /** @type {?} */
    LogLevelsEnum.SILENT;
}
/** @type {?} */
export var logLevels = [
    { level: LogLevelsEnum.TRACE, name: 'TRACE' },
    { level: LogLevelsEnum.DEBUG, name: 'DEBUG' },
    { level: LogLevelsEnum.INFO, name: 'INFO' },
    { level: LogLevelsEnum.WARN, name: 'WARN' },
    { level: LogLevelsEnum.ERROR, name: 'ERROR' },
    { level: LogLevelsEnum.SILENT, name: 'SILENT' }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLWxldmVscy5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbIm1vZGVscy9sb2ctbGV2ZWxzLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQTtJQUFtQyx5Q0FBTTtJQUF6Qzs7SUFPQSxDQUFDO0lBTlUsbUJBQUssR0FBVyxDQUFDLENBQUM7SUFDbEIsbUJBQUssR0FBVyxDQUFDLENBQUM7SUFDbEIsa0JBQUksR0FBVyxDQUFDLENBQUM7SUFDakIsa0JBQUksR0FBVyxDQUFDLENBQUM7SUFDakIsbUJBQUssR0FBVyxDQUFDLENBQUM7SUFDbEIsb0JBQU0sR0FBVyxDQUFDLENBQUM7SUFDOUIsb0JBQUM7Q0FBQSxBQVBELENBQW1DLE1BQU0sR0FPeEM7U0FQWSxhQUFhOzs7SUFDdEIsb0JBQXlCOztJQUN6QixvQkFBeUI7O0lBQ3pCLG1CQUF3Qjs7SUFDeEIsbUJBQXdCOztJQUN4QixvQkFBeUI7O0lBQ3pCLHFCQUEwQjs7O0FBRzlCLE1BQU0sS0FBSyxTQUFTLEdBQVU7SUFDMUIsRUFBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDO0lBQzNDLEVBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBQztJQUMzQyxFQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUM7SUFDekMsRUFBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDO0lBQ3pDLEVBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBQztJQUMzQyxFQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUM7Q0FDaEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgY2xhc3MgTG9nTGV2ZWxzRW51bSBleHRlbmRzIE51bWJlciB7XG4gICAgc3RhdGljIFRSQUNFOiBudW1iZXIgPSA1O1xuICAgIHN0YXRpYyBERUJVRzogbnVtYmVyID0gNDtcbiAgICBzdGF0aWMgSU5GTzogbnVtYmVyID0gMztcbiAgICBzdGF0aWMgV0FSTjogbnVtYmVyID0gMjtcbiAgICBzdGF0aWMgRVJST1I6IG51bWJlciA9IDE7XG4gICAgc3RhdGljIFNJTEVOVDogbnVtYmVyID0gMDtcbn1cblxuZXhwb3J0IGxldCBsb2dMZXZlbHM6IGFueVtdID0gW1xuICAgIHtsZXZlbDogTG9nTGV2ZWxzRW51bS5UUkFDRSwgbmFtZTogJ1RSQUNFJ30sXG4gICAge2xldmVsOiBMb2dMZXZlbHNFbnVtLkRFQlVHLCBuYW1lOiAnREVCVUcnfSxcbiAgICB7bGV2ZWw6IExvZ0xldmVsc0VudW0uSU5GTywgbmFtZTogJ0lORk8nfSxcbiAgICB7bGV2ZWw6IExvZ0xldmVsc0VudW0uV0FSTiwgbmFtZTogJ1dBUk4nfSxcbiAgICB7bGV2ZWw6IExvZ0xldmVsc0VudW0uRVJST1IsIG5hbWU6ICdFUlJPUid9LFxuICAgIHtsZXZlbDogTG9nTGV2ZWxzRW51bS5TSUxFTlQsIG5hbWU6ICdTSUxFTlQnfVxuXTtcbiJdfQ==