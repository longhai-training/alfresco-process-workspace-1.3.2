/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
var InfoDrawerTabComponent = /** @class */ (function () {
    function InfoDrawerTabComponent() {
        /**
         * The title of the tab.
         */
        this.label = '';
        /**
         * Icon to render for the tab.
         */
        this.icon = null;
    }
    InfoDrawerTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-info-drawer-tab',
                    template: '<ng-template><ng-content></ng-content></ng-template>'
                }] }
    ];
    InfoDrawerTabComponent.propDecorators = {
        label: [{ type: Input }],
        icon: [{ type: Input }],
        content: [{ type: ViewChild, args: [TemplateRef,] }]
    };
    return InfoDrawerTabComponent;
}());
export { InfoDrawerTabComponent };
if (false) {
    /**
     * The title of the tab.
     * @type {?}
     */
    InfoDrawerTabComponent.prototype.label;
    /**
     * Icon to render for the tab.
     * @type {?}
     */
    InfoDrawerTabComponent.prototype.icon;
    /** @type {?} */
    InfoDrawerTabComponent.prototype.content;
}
var InfoDrawerComponent = /** @class */ (function () {
    function InfoDrawerComponent() {
        /**
         * The title of the info drawer.
         */
        this.title = null;
        /**
         * The selected index tab.
         */
        this.selectedIndex = 0;
        /**
         * Emitted when the currently active tab changes.
         */
        this.currentTab = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InfoDrawerComponent.prototype.showTabLayout = /**
     * @return {?}
     */
    function () {
        return this.contentBlocks.length > 0;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InfoDrawerComponent.prototype.onTabChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.currentTab.emit(event.index);
    };
    InfoDrawerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-info-drawer',
                    template: "<adf-info-drawer-layout>\n    <div *ngIf=\"title\" info-drawer-title>{{title}}</div>\n    <ng-content *ngIf=\"!title\" info-drawer-title select=\"[info-drawer-title]\"></ng-content>\n\n    <ng-content info-drawer-buttons select=\"[info-drawer-buttons]\"></ng-content>\n\n    <ng-container info-drawer-content *ngIf=\"showTabLayout(); then tabLayout else singleLayout\"></ng-container>\n\n    <ng-template #tabLayout>\n        <mat-tab-group [(selectedIndex)]=\"selectedIndex\" class=\"adf-info-drawer-tabs\" (selectedTabChange)=\"onTabChange($event)\">\n            <mat-tab *ngFor=\"let contentBlock of contentBlocks\"\n                [label]=\"contentBlock.label\"\n                class=\"adf-info-drawer-tab\">\n\n                <ng-template mat-tab-label>\n                    <mat-icon *ngIf=\"contentBlock.icon\">{{ contentBlock.icon }}</mat-icon>\n                    <span *ngIf=\"contentBlock.label\">{{ contentBlock.label }}</span>\n                </ng-template>\n\n                <ng-container *ngTemplateOutlet=\"contentBlock.content\"></ng-container>\n            </mat-tab>\n        </mat-tab-group>\n    </ng-template>\n\n    <ng-template #singleLayout>\n        <ng-content select=\"[info-drawer-content]\"></ng-content>\n    </ng-template>\n</adf-info-drawer-layout>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-info-drawer' },
                    styles: [".adf-info-drawer{display:block}.adf-info-drawer .mat-tab-label{min-width:0}.adf-info-drawer .adf-info-drawer-layout-content{padding:0}.adf-info-drawer .adf-info-drawer-layout-content>:not(.adf-info-drawer-tabs){padding:10px}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-tab-body-content>*,.adf-info-drawer .adf-info-drawer-layout-content>:not(.adf-info-drawer-tabs)>*{margin-bottom:20px;display:block}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-tab-body-content>:last-child{margin-bottom:0}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-tab-label{flex-grow:1}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-tab-label .mat-icon+span{padding-left:5px}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-ink-bar{height:4px}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-tab-body{padding:10px}.adf-info-drawer .adf-info-drawer-layout-content .adf-info-drawer-tabs .mat-tab-body-content{overflow:initial}"]
                }] }
    ];
    InfoDrawerComponent.propDecorators = {
        title: [{ type: Input }],
        selectedIndex: [{ type: Input }],
        currentTab: [{ type: Output }],
        contentBlocks: [{ type: ContentChildren, args: [InfoDrawerTabComponent,] }]
    };
    return InfoDrawerComponent;
}());
export { InfoDrawerComponent };
if (false) {
    /**
     * The title of the info drawer.
     * @type {?}
     */
    InfoDrawerComponent.prototype.title;
    /**
     * The selected index tab.
     * @type {?}
     */
    InfoDrawerComponent.prototype.selectedIndex;
    /**
     * Emitted when the currently active tab changes.
     * @type {?}
     */
    InfoDrawerComponent.prototype.currentTab;
    /** @type {?} */
    InfoDrawerComponent.prototype.contentBlocks;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mby1kcmF3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiaW5mby1kcmF3ZXIvaW5mby1kcmF3ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlJO0lBQUE7Ozs7UUFPSSxVQUFLLEdBQVcsRUFBRSxDQUFDOzs7O1FBSW5CLFNBQUksR0FBVyxJQUFJLENBQUM7SUFJeEIsQ0FBQzs7Z0JBZkEsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSxzREFBc0Q7aUJBQ25FOzs7d0JBR0ksS0FBSzt1QkFJTCxLQUFLOzBCQUdMLFNBQVMsU0FBQyxXQUFXOztJQUUxQiw2QkFBQztDQUFBLEFBZkQsSUFlQztTQVhZLHNCQUFzQjs7Ozs7O0lBRS9CLHVDQUNtQjs7Ozs7SUFHbkIsc0NBQ29COztJQUVwQix5Q0FDMEI7O0FBRzlCO0lBQUE7Ozs7UUFVSSxVQUFLLEdBQWdCLElBQUksQ0FBQzs7OztRQUkxQixrQkFBYSxHQUFXLENBQUMsQ0FBQzs7OztRQUkxQixlQUFVLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7SUFZbEUsQ0FBQzs7OztJQVBHLDJDQUFhOzs7SUFBYjtRQUNJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBRUQseUNBQVc7Ozs7SUFBWCxVQUFZLEtBQXdCO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDOztnQkE3QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLHN4Q0FBMkM7b0JBRTNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUU7O2lCQUN2Qzs7O3dCQUdJLEtBQUs7Z0NBSUwsS0FBSzs2QkFJTCxNQUFNO2dDQUdOLGVBQWUsU0FBQyxzQkFBc0I7O0lBVTNDLDBCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0F2QlksbUJBQW1COzs7Ozs7SUFFNUIsb0NBQzBCOzs7OztJQUcxQiw0Q0FDMEI7Ozs7O0lBRzFCLHlDQUM4RDs7SUFFOUQsNENBQ2lEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0VGFiQ2hhbmdlRXZlbnQgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1pbmZvLWRyYXdlci10YWInLFxuICAgIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgSW5mb0RyYXdlclRhYkNvbXBvbmVudCB7XG4gICAgLyoqIFRoZSB0aXRsZSBvZiB0aGUgdGFiLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbGFiZWw6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIEljb24gdG8gcmVuZGVyIGZvciB0aGUgdGFiLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgaWNvbjogc3RyaW5nID0gbnVsbDtcblxuICAgIEBWaWV3Q2hpbGQoVGVtcGxhdGVSZWYpXG4gICAgY29udGVudDogVGVtcGxhdGVSZWY8YW55Pjtcbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtaW5mby1kcmF3ZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9pbmZvLWRyYXdlci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vaW5mby1kcmF3ZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ2FkZi1pbmZvLWRyYXdlcicgfVxufSlcbmV4cG9ydCBjbGFzcyBJbmZvRHJhd2VyQ29tcG9uZW50IHtcbiAgICAvKiogVGhlIHRpdGxlIG9mIHRoZSBpbmZvIGRyYXdlci4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRpdGxlOiBzdHJpbmd8bnVsbCA9IG51bGw7XG5cbiAgICAvKiogVGhlIHNlbGVjdGVkIGluZGV4IHRhYi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdGVkSW5kZXg6IG51bWJlciA9IDA7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRhYiBjaGFuZ2VzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGN1cnJlbnRUYWI6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBAQ29udGVudENoaWxkcmVuKEluZm9EcmF3ZXJUYWJDb21wb25lbnQpXG4gICAgY29udGVudEJsb2NrczogUXVlcnlMaXN0PEluZm9EcmF3ZXJUYWJDb21wb25lbnQ+O1xuXG4gICAgc2hvd1RhYkxheW91dCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudEJsb2Nrcy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIG9uVGFiQ2hhbmdlKGV2ZW50OiBNYXRUYWJDaGFuZ2VFdmVudCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUYWIuZW1pdChldmVudC5pbmRleCk7XG4gICAgfVxufVxuIl19