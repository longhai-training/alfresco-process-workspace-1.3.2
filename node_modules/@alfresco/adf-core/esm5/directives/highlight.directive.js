/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { HighlightTransformService } from '../services/highlight-transform.service';
var HighlightDirective = /** @class */ (function () {
    function HighlightDirective(el, renderer, highlightTransformService) {
        this.el = el;
        this.renderer = renderer;
        this.highlightTransformService = highlightTransformService;
        /**
         * Class selector for highlightable elements.
         */
        this.selector = '';
        /**
         * Text to highlight.
         */
        this.search = '';
        /**
         * CSS class used to apply highlighting.
         */
        this.classToApply = 'adf-highlight';
    }
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.highlight();
    };
    /**
     * @param {?=} search
     * @param {?=} selector
     * @param {?=} classToApply
     * @return {?}
     */
    HighlightDirective.prototype.highlight = /**
     * @param {?=} search
     * @param {?=} selector
     * @param {?=} classToApply
     * @return {?}
     */
    function (search, selector, classToApply) {
        var _this = this;
        if (search === void 0) { search = this.search; }
        if (selector === void 0) { selector = this.selector; }
        if (classToApply === void 0) { classToApply = this.classToApply; }
        if (search && selector) {
            /** @type {?} */
            var elements = this.el.nativeElement.querySelectorAll(selector);
            elements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var highlightTransformResult = _this.highlightTransformService.highlight(element.innerHTML, search, classToApply);
                if (highlightTransformResult.changed) {
                    _this.renderer.setProperty(element, 'innerHTML', highlightTransformResult.text);
                }
            }));
        }
    };
    HighlightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-highlight]'
                },] }
    ];
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HighlightTransformService }
    ]; };
    HighlightDirective.propDecorators = {
        selector: [{ type: Input, args: ['adf-highlight-selector',] }],
        search: [{ type: Input, args: ['adf-highlight',] }],
        classToApply: [{ type: Input, args: ['adf-highlight-class',] }]
    };
    return HighlightDirective;
}());
export { HighlightDirective };
if (false) {
    /**
     * Class selector for highlightable elements.
     * @type {?}
     */
    HighlightDirective.prototype.selector;
    /**
     * Text to highlight.
     * @type {?}
     */
    HighlightDirective.prototype.search;
    /**
     * CSS class used to apply highlighting.
     * @type {?}
     */
    HighlightDirective.prototype.classToApply;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.highlightTransformService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvaGlnaGxpZ2h0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFFLHlCQUF5QixFQUE0QixNQUFNLHlDQUF5QyxDQUFDO0FBRTlHO0lBaUJJLDRCQUNZLEVBQWMsRUFDZCxRQUFtQixFQUNuQix5QkFBb0Q7UUFGcEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjs7OztRQWJoRSxhQUFRLEdBQVcsRUFBRSxDQUFDOzs7O1FBSXRCLFdBQU0sR0FBVyxFQUFFLENBQUM7Ozs7UUFJcEIsaUJBQVksR0FBVyxlQUFlLENBQUM7SUFNdkMsQ0FBQzs7OztJQUVELCtDQUFrQjs7O0lBQWxCO1FBQ0ksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7Ozs7SUFFTSxzQ0FBUzs7Ozs7O0lBQWhCLFVBQWlCLE1BQW9CLEVBQUUsUUFBd0IsRUFBRSxZQUFnQztRQUFqRyxpQkFXQztRQVhnQix1QkFBQSxFQUFBLFNBQVMsSUFBSSxDQUFDLE1BQU07UUFBRSx5QkFBQSxFQUFBLFdBQVcsSUFBSSxDQUFDLFFBQVE7UUFBRSw2QkFBQSxFQUFBLGVBQWUsSUFBSSxDQUFDLFlBQVk7UUFDN0YsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFOztnQkFDZCxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1lBRWpFLFFBQVEsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxPQUFPOztvQkFDZix3QkFBd0IsR0FBNkIsS0FBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUM7Z0JBQzVJLElBQUksd0JBQXdCLENBQUMsT0FBTyxFQUFFO29CQUNsQyxLQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNsRjtZQUNMLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOztnQkF0Q0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7aUJBQzlCOzs7O2dCQUxtQixVQUFVO2dCQUFTLFNBQVM7Z0JBQ3ZDLHlCQUF5Qjs7OzJCQVE3QixLQUFLLFNBQUMsd0JBQXdCO3lCQUk5QixLQUFLLFNBQUMsZUFBZTsrQkFJckIsS0FBSyxTQUFDLHFCQUFxQjs7SUF5QmhDLHlCQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0FwQ1ksa0JBQWtCOzs7Ozs7SUFHM0Isc0NBQ3NCOzs7OztJQUd0QixvQ0FDb0I7Ozs7O0lBR3BCLDBDQUN1Qzs7Ozs7SUFHbkMsZ0NBQXNCOzs7OztJQUN0QixzQ0FBMkI7Ozs7O0lBQzNCLHVEQUE0RCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAgKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlLCBIaWdobGlnaHRUcmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi9zZXJ2aWNlcy9oaWdobGlnaHQtdHJhbnNmb3JtLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1thZGYtaGlnaGxpZ2h0XSdcbn0pXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG5cbiAgICAvKiogQ2xhc3Mgc2VsZWN0b3IgZm9yIGhpZ2hsaWdodGFibGUgZWxlbWVudHMuICovXG4gICAgQElucHV0KCdhZGYtaGlnaGxpZ2h0LXNlbGVjdG9yJylcbiAgICBzZWxlY3Rvcjogc3RyaW5nID0gJyc7XG5cbiAgICAvKiogVGV4dCB0byBoaWdobGlnaHQuICovXG4gICAgQElucHV0KCdhZGYtaGlnaGxpZ2h0JylcbiAgICBzZWFyY2g6IHN0cmluZyA9ICcnO1xuXG4gICAgLyoqIENTUyBjbGFzcyB1c2VkIHRvIGFwcGx5IGhpZ2hsaWdodGluZy4gKi9cbiAgICBASW5wdXQoJ2FkZi1oaWdobGlnaHQtY2xhc3MnKVxuICAgIGNsYXNzVG9BcHBseTogc3RyaW5nID0gJ2FkZi1oaWdobGlnaHQnO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICAgICAgcHJpdmF0ZSBoaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlOiBIaWdobGlnaHRUcmFuc2Zvcm1TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgICAgICB0aGlzLmhpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWdobGlnaHQoc2VhcmNoID0gdGhpcy5zZWFyY2gsIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciwgY2xhc3NUb0FwcGx5ID0gdGhpcy5jbGFzc1RvQXBwbHkpIHtcbiAgICAgICAgaWYgKHNlYXJjaCAmJiBzZWxlY3Rvcikge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoaWdobGlnaHRUcmFuc2Zvcm1SZXN1bHQ6IEhpZ2hsaWdodFRyYW5zZm9ybVJlc3VsdCA9IHRoaXMuaGlnaGxpZ2h0VHJhbnNmb3JtU2VydmljZS5oaWdobGlnaHQoZWxlbWVudC5pbm5lckhUTUwsIHNlYXJjaCwgY2xhc3NUb0FwcGx5KTtcbiAgICAgICAgICAgICAgICBpZiAoaGlnaGxpZ2h0VHJhbnNmb3JtUmVzdWx0LmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eShlbGVtZW50LCAnaW5uZXJIVE1MJywgaGlnaGxpZ2h0VHJhbnNmb3JtUmVzdWx0LnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19