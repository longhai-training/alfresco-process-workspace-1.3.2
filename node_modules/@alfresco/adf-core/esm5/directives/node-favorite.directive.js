/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { from, forkJoin, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { catchError, map } from 'rxjs/operators';
var NodeFavoriteDirective = /** @class */ (function () {
    function NodeFavoriteDirective(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.favorites = [];
        /**
         * Array of nodes to toggle as favorites.
         */
        this.selection = [];
        /**
         * Emitted when the favorite setting is complete.
         */
        this.toggle = new EventEmitter();
        /**
         * Emitted when the favorite setting fails.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NodeFavoriteDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.toggleFavorite();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NodeFavoriteDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes.selection.currentValue.length) {
            this.favorites = [];
            return;
        }
        this.markFavoritesNodes(changes.selection.currentValue);
    };
    /**
     * @return {?}
     */
    NodeFavoriteDirective.prototype.toggleFavorite = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.favorites.length) {
            return;
        }
        /** @type {?} */
        var every = this.favorites.every((/**
         * @param {?} selected
         * @return {?}
         */
        function (selected) { return selected.entry.isFavorite; }));
        if (every) {
            /** @type {?} */
            var batch = this.favorites.map((/**
             * @param {?} selected
             * @return {?}
             */
            function (selected) {
                // shared files have nodeId
                /** @type {?} */
                var id = ((/** @type {?} */ (selected))).entry.nodeId || selected.entry.id;
                return from(_this.alfrescoApiService.favoritesApi.removeFavoriteSite('-me-', id));
            }));
            forkJoin(batch).subscribe((/**
             * @return {?}
             */
            function () {
                _this.favorites.map((/**
                 * @param {?} selected
                 * @return {?}
                 */
                function (selected) { return selected.entry.isFavorite = false; }));
                _this.toggle.emit();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.error.emit(error); }));
        }
        if (!every) {
            /** @type {?} */
            var notFavorite_1 = this.favorites.filter((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return !node.entry.isFavorite; }));
            /** @type {?} */
            var body = notFavorite_1.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return _this.createFavoriteBody(node); }));
            from(this.alfrescoApiService.favoritesApi.addFavorite('-me-', (/** @type {?} */ (body))))
                .subscribe((/**
             * @return {?}
             */
            function () {
                notFavorite_1.map((/**
                 * @param {?} selected
                 * @return {?}
                 */
                function (selected) { return selected.entry.isFavorite = true; }));
                _this.toggle.emit();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.error.emit(error); }));
        }
    };
    /**
     * @param {?} selection
     * @return {?}
     */
    NodeFavoriteDirective.prototype.markFavoritesNodes = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        var _this = this;
        if (selection.length <= this.favorites.length) {
            /** @type {?} */
            var newFavorites = this.reduce(this.favorites, selection);
            this.favorites = newFavorites;
        }
        /** @type {?} */
        var result = this.diff(selection, this.favorites);
        /** @type {?} */
        var batch = this.getProcessBatch(result);
        forkJoin(batch).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _a;
            (_a = _this.favorites).push.apply(_a, tslib_1.__spread(data));
        }));
    };
    /**
     * @return {?}
     */
    NodeFavoriteDirective.prototype.hasFavorites = /**
     * @return {?}
     */
    function () {
        if (this.favorites && !this.favorites.length) {
            return false;
        }
        return this.favorites.every((/**
         * @param {?} selected
         * @return {?}
         */
        function (selected) { return selected.entry.isFavorite; }));
    };
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    NodeFavoriteDirective.prototype.getProcessBatch = /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        var _this = this;
        return selection.map((/**
         * @param {?} selected
         * @return {?}
         */
        function (selected) { return _this.getFavorite(selected); }));
    };
    /**
     * @private
     * @param {?} selected
     * @return {?}
     */
    NodeFavoriteDirective.prototype.getFavorite = /**
     * @private
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        /** @type {?} */
        var node = selected.entry;
        // ACS 6.x with 'isFavorite' include
        if (node && node.hasOwnProperty('isFavorite')) {
            return of(selected);
        }
        // ACS 5.x and 6.x without 'isFavorite' include
        var _a = (/** @type {?} */ (node)), name = _a.name, isFile = _a.isFile, isFolder = _a.isFolder;
        /** @type {?} */
        var id = ((/** @type {?} */ (node))).nodeId || node.id;
        /** @type {?} */
        var promise = this.alfrescoApiService.favoritesApi.getFavorite('-me-', id);
        return from(promise).pipe(map((/**
         * @return {?}
         */
        function () { return ({
            entry: {
                id: id,
                isFolder: isFolder,
                isFile: isFile,
                name: name,
                isFavorite: true
            }
        }); })), catchError((/**
         * @return {?}
         */
        function () {
            return of({
                entry: {
                    id: id,
                    isFolder: isFolder,
                    isFile: isFile,
                    name: name,
                    isFavorite: false
                }
            });
        })));
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    NodeFavoriteDirective.prototype.createFavoriteBody = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _a;
        /** @type {?} */
        var type = this.getNodeType(node);
        // shared files have nodeId
        /** @type {?} */
        var id = node.entry.nodeId || node.entry.id;
        return {
            target: (_a = {},
                _a[type] = {
                    guid: id
                },
                _a)
        };
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    NodeFavoriteDirective.prototype.getNodeType = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        // shared could only be files
        if (!node.entry.isFile && !node.entry.isFolder) {
            return 'file';
        }
        return node.entry.isFile ? 'file' : 'folder';
    };
    /**
     * @private
     * @param {?} list
     * @param {?} patch
     * @return {?}
     */
    NodeFavoriteDirective.prototype.diff = /**
     * @private
     * @param {?} list
     * @param {?} patch
     * @return {?}
     */
    function (list, patch) {
        /** @type {?} */
        var ids = patch.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.entry.id; }));
        return list.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return ids.includes(item.entry.id) ? null : item; }));
    };
    /**
     * @private
     * @param {?} patch
     * @param {?} comparator
     * @return {?}
     */
    NodeFavoriteDirective.prototype.reduce = /**
     * @private
     * @param {?} patch
     * @param {?} comparator
     * @return {?}
     */
    function (patch, comparator) {
        /** @type {?} */
        var ids = comparator.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.entry.id; }));
        return patch.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return ids.includes(item.entry.id) ? item : null; }));
    };
    NodeFavoriteDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-node-favorite]',
                    exportAs: 'adfFavorite'
                },] }
    ];
    /** @nocollapse */
    NodeFavoriteDirective.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    NodeFavoriteDirective.propDecorators = {
        selection: [{ type: Input, args: ['adf-node-favorite',] }],
        toggle: [{ type: Output }],
        error: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeFavoriteDirective;
}());
export { NodeFavoriteDirective };
if (false) {
    /** @type {?} */
    NodeFavoriteDirective.prototype.favorites;
    /**
     * Array of nodes to toggle as favorites.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.selection;
    /**
     * Emitted when the favorite setting is complete.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.toggle;
    /**
     * Emitted when the favorite setting fails.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    NodeFavoriteDirective.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,