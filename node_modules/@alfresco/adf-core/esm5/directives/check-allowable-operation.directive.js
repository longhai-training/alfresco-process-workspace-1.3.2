/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { ChangeDetectorRef, Directive, ElementRef, Host, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { ContentService } from './../services/content.service';
import { EXTENDIBLE_COMPONENT } from './../interface/injection.tokens';
/**
 * @record
 */
export function NodeAllowableOperationSubject() { }
if (false) {
    /** @type {?} */
    NodeAllowableOperationSubject.prototype.disabled;
}
var CheckAllowableOperationDirective = /** @class */ (function () {
    function CheckAllowableOperationDirective(elementRef, renderer, contentService, changeDetector, parentComponent) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.contentService = contentService;
        this.changeDetector = changeDetector;
        this.parentComponent = parentComponent;
        /**
         * Node permission to check (create, delete, update, updatePermissions,
         * !create, !delete, !update, !updatePermissions).
         */
        this.permission = null;
        /**
         * Nodes to check permission for.
         */
        this.nodes = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.nodes && !changes.nodes.firstChange) {
            this.updateElement();
        }
    };
    /**
     * Updates disabled state for the decorated element
     *
     * @memberof CheckAllowableOperationDirective
     */
    /**
     * Updates disabled state for the decorated element
     *
     * \@memberof CheckAllowableOperationDirective
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.updateElement = /**
     * Updates disabled state for the decorated element
     *
     * \@memberof CheckAllowableOperationDirective
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enable = this.hasAllowableOperations(this.nodes, this.permission);
        if (enable) {
            this.enable();
        }
        else {
            this.disable();
        }
        return enable;
    };
    /**
     * @private
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.enable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.parentComponent) {
            this.parentComponent.disabled = false;
            this.changeDetector.detectChanges();
        }
        else {
            this.enableElement();
        }
    };
    /**
     * @private
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.disable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.parentComponent) {
            this.parentComponent.disabled = true;
            this.changeDetector.detectChanges();
        }
        else {
            this.disableElement();
        }
    };
    /**
     * Enables decorated element
     *
     * @memberof CheckAllowableOperationDirective
     */
    /**
     * Enables decorated element
     *
     * \@memberof CheckAllowableOperationDirective
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.enableElement = /**
     * Enables decorated element
     *
     * \@memberof CheckAllowableOperationDirective
     * @return {?}
     */
    function () {
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
    };
    /**
     * Disables decorated element
     *
     * @memberof CheckAllowableOperationDirective
     */
    /**
     * Disables decorated element
     *
     * \@memberof CheckAllowableOperationDirective
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.disableElement = /**
     * Disables decorated element
     *
     * \@memberof CheckAllowableOperationDirective
     * @return {?}
     */
    function () {
        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'true');
    };
    /**
     * Checks whether all nodes have a particular permission
     *
     * @param  nodes Node collection to check
     * @param  permission Permission to check for each node
     * @memberof CheckAllowableOperationDirective
     */
    /**
     * Checks whether all nodes have a particular permission
     *
     * \@memberof CheckAllowableOperationDirective
     * @param {?} nodes Node collection to check
     * @param {?} permission Permission to check for each node
     * @return {?}
     */
    CheckAllowableOperationDirective.prototype.hasAllowableOperations = /**
     * Checks whether all nodes have a particular permission
     *
     * \@memberof CheckAllowableOperationDirective
     * @param {?} nodes Node collection to check
     * @param {?} permission Permission to check for each node
     * @return {?}
     */
    function (nodes, permission) {
        var _this = this;
        if (nodes && nodes.length > 0) {
            return nodes.every((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return _this.contentService.hasAllowableOperations(node.entry, permission); }));
        }
        return false;
    };
    CheckAllowableOperationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-check-allowable-operation]'
                },] }
    ];
    /** @nocollapse */
    CheckAllowableOperationDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ContentService },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Host }, { type: Optional }, { type: Inject, args: [EXTENDIBLE_COMPONENT,] }] }
    ]; };
    CheckAllowableOperationDirective.propDecorators = {
        permission: [{ type: Input, args: ['adf-check-allowable-operation',] }],
        nodes: [{ type: Input, args: ['adf-nodes',] }]
    };
    return CheckAllowableOperationDirective;
}());
export { CheckAllowableOperationDirective };
if (false) {
    /**
     * Node permission to check (create, delete, update, updatePermissions,
     * !create, !delete, !update, !updatePermissions).
     * @type {?}
     */
    CheckAllowableOperationDirective.prototype.permission;
    /**
     * Nodes to check permission for.
     * @type {?}
     */
    CheckAllowableOperationDirective.prototype.nodes;
    /**
     * @type {?}
     * @private
     */
    CheckAllowableOperationDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    CheckAllowableOperationDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    CheckAllowableOperationDirective.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    CheckAllowableOperationDirective.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    CheckAllowableOperationDirective.prototype.parentComponent;
}
//# sourceMappingURL=data:application/json;base64,