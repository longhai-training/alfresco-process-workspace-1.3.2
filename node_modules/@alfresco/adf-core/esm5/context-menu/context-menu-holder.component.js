/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OverlayContainer } from '@angular/cdk/overlay';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { Component, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { MatMenuTrigger } from '@angular/material';
import { ContextMenuService } from './context-menu.service';
var ContextMenuHolderComponent = /** @class */ (function () {
    function ContextMenuHolderComponent(viewport, overlayContainer, contextMenuService, renderer) {
        this.viewport = viewport;
        this.overlayContainer = overlayContainer;
        this.contextMenuService = contextMenuService;
        this.renderer = renderer;
        this.links = [];
        this.mouseLocation = { left: 0, top: 0 };
        this.menuElement = null;
        this.subscriptions = [];
        this.showIcons = false;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.onShowContextMenu = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.mdMenuElement) {
            this.updatePosition();
        }
    };
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.contextMenuService.show.subscribe((/**
         * @param {?} mouseEvent
         * @return {?}
         */
        function (mouseEvent) { return _this.showMenu(mouseEvent.event, mouseEvent.obj); })), this.menuTrigger.onMenuOpen.subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var container = _this.overlayContainer.getContainerElement();
            if (container) {
                _this.contextMenuListenerFn = _this.renderer.listen(container, 'contextmenu', (/**
                 * @param {?} contextmenuEvent
                 * @return {?}
                 */
                function (contextmenuEvent) {
                    contextmenuEvent.preventDefault();
                }));
            }
            _this.menuElement = _this.getContextMenuElement();
        })), this.menuTrigger.onMenuClose.subscribe((/**
         * @return {?}
         */
        function () {
            _this.menuElement = null;
            if (_this.contextMenuListenerFn) {
                _this.contextMenuListenerFn();
            }
        })));
    };
    /**
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.contextMenuListenerFn) {
            this.contextMenuListenerFn();
        }
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
        this.menuElement = null;
    };
    /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.onMenuItemClick = /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    function (event, menuItem) {
        if (menuItem && menuItem.model && menuItem.model.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        menuItem.subject.next(menuItem);
    };
    /**
     * @param {?} mouseEvent
     * @param {?} links
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.showMenu = /**
     * @param {?} mouseEvent
     * @param {?} links
     * @return {?}
     */
    function (mouseEvent, links) {
        this.links = links;
        if (mouseEvent) {
            this.mouseLocation = {
                left: mouseEvent.clientX,
                top: mouseEvent.clientY
            };
        }
        this.menuTrigger.openMenu();
        if (this.mdMenuElement) {
            this.updatePosition();
        }
    };
    Object.defineProperty(ContextMenuHolderComponent.prototype, "mdMenuElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.menuElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.locationCss = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            left: this.mouseLocation.left + 'px',
            top: this.mouseLocation.top + 'px'
        };
    };
    /**
     * @private
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.updatePosition = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.mdMenuElement.parentElement) {
                if (_this.mdMenuElement.clientWidth + _this.mouseLocation.left > _this.viewport.getViewportRect().width) {
                    _this.menuTrigger.menu.xPosition = 'before';
                    _this.mdMenuElement.parentElement.style.left = _this.mouseLocation.left - _this.mdMenuElement.clientWidth + 'px';
                }
                else {
                    _this.menuTrigger.menu.xPosition = 'after';
                    _this.mdMenuElement.parentElement.style.left = _this.locationCss().left;
                }
                if (_this.mdMenuElement.clientHeight + _this.mouseLocation.top > _this.viewport.getViewportRect().height) {
                    _this.menuTrigger.menu.yPosition = 'above';
                    _this.mdMenuElement.parentElement.style.top = _this.mouseLocation.top - _this.mdMenuElement.clientHeight + 'px';
                }
                else {
                    _this.menuTrigger.menu.yPosition = 'below';
                    _this.mdMenuElement.parentElement.style.top = _this.locationCss().top;
                }
            }
        }), 0);
    };
    /**
     * @private
     * @return {?}
     */
    ContextMenuHolderComponent.prototype.getContextMenuElement = /**
     * @private
     * @return {?}
     */
    function () {
        return this.overlayContainer.getContainerElement().querySelector('.context-menu');
    };
    ContextMenuHolderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-context-menu-holder',
                    template: "\n        <button mat-button [matMenuTriggerFor]=\"contextMenu\"></button>\n        <mat-menu #contextMenu=\"matMenu\" class=\"context-menu\">\n            <ng-container *ngFor=\"let link of links\">\n                <button *ngIf=\"link.model?.visible\"\n                        [attr.data-automation-id]=\"'context-'+((link.title || link.model?.title) | translate)\"\n                        mat-menu-item\n                        [disabled]=\"link.model?.disabled\"\n                        (click)=\"onMenuItemClick($event, link)\">\n                    <mat-icon *ngIf=\"showIcons && link.model?.icon\">{{ link.model.icon }}</mat-icon>\n                    {{ (link.title || link.model?.title) | translate }}\n                </button>\n            </ng-container>\n        </mat-menu>\n    "
                }] }
    ];
    /** @nocollapse */
    ContextMenuHolderComponent.ctorParameters = function () { return [
        { type: ViewportRuler },
        { type: OverlayContainer },
        { type: ContextMenuService },
        { type: Renderer2 }
    ]; };
    ContextMenuHolderComponent.propDecorators = {
        showIcons: [{ type: Input }],
        menuTrigger: [{ type: ViewChild, args: [MatMenuTrigger,] }],
        onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return ContextMenuHolderComponent;
}());
export { ContextMenuHolderComponent };
if (false) {
    /** @type {?} */
    ContextMenuHolderComponent.prototype.links;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.mouseLocation;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.menuElement;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.contextMenuListenerFn;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.showIcons;
    /** @type {?} */
    ContextMenuHolderComponent.prototype.menuTrigger;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.viewport;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.overlayContainer;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.contextMenuService;
    /**
     * @type {?}
     * @private
     */
    ContextMenuHolderComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LWhvbGRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJjb250ZXh0LW1lbnUvY29udGV4dC1tZW51LWhvbGRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQ7SUE4Q0ksb0NBQ1ksUUFBdUIsRUFDdkIsZ0JBQWtDLEVBQ2xDLGtCQUFzQyxFQUN0QyxRQUFtQjtRQUhuQixhQUFRLEdBQVIsUUFBUSxDQUFlO1FBQ3ZCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBL0IvQixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRUgsa0JBQWEsR0FBa0MsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNuRSxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUNuQixrQkFBYSxHQUFtQixFQUFFLENBQUM7UUFJM0MsY0FBUyxHQUFZLEtBQUssQ0FBQztJQXlCM0IsQ0FBQzs7Ozs7SUFuQkQsc0RBQWlCOzs7O0lBRGpCLFVBQ2tCLEtBQWtCO1FBQ2hDLElBQUksS0FBSyxFQUFFO1lBQ1AsS0FBSyxDQUFDLGNBQWMs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d0RBQThDOzs7OztJQUM5Qyw4Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBPdmVybGF5Q29udGFpbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgVmlld3BvcnRSdWxlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdE1lbnVUcmlnZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb250ZXh0TWVudVNlcnZpY2UgfSBmcm9tICcuL2NvbnRleHQtbWVudS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29udGV4dC1tZW51LWhvbGRlcicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGJ1dHRvbiBtYXQtYnV0dG9uIFttYXRNZW51VHJpZ2dlckZvcl09XCJjb250ZXh0TWVudVwiPjwvYnV0dG9uPlxuICAgICAgICA8bWF0LW1lbnUgI2NvbnRleHRNZW51PVwibWF0TWVudVwiIGNsYXNzPVwiY29udGV4dC1tZW51XCI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBsaW5rIG9mIGxpbmtzXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiAqbmdJZj1cImxpbmsubW9kZWw/LnZpc2libGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1hdXRvbWF0aW9uLWlkXT1cIidjb250ZXh0LScrKChsaW5rLnRpdGxlIHx8IGxpbmsubW9kZWw/LnRpdGxlKSB8IHRyYW5zbGF0ZSlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0LW1lbnUtaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImxpbmsubW9kZWw/LmRpc2FibGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIChjbGljayk9XCJvbk1lbnVJdGVtQ2xpY2soJGV2ZW50LCBsaW5rKVwiPlxuICAgICAgICAgICAgICAgICAgICA8bWF0LWljb24gKm5nSWY9XCJzaG93SWNvbnMgJiYgbGluay5tb2RlbD8uaWNvblwiPnt7IGxpbmsubW9kZWwuaWNvbiB9fTwvbWF0LWljb24+XG4gICAgICAgICAgICAgICAgICAgIHt7IChsaW5rLnRpdGxlIHx8IGxpbmsubW9kZWw/LnRpdGxlKSB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvbWF0LW1lbnU+XG4gICAgYFxufSlcbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudUhvbGRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBsaW5rcyA9IFtdO1xuXG4gICAgcHJpdmF0ZSBtb3VzZUxvY2F0aW9uOiB7IGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIgfSA9IHsgbGVmdDogMCwgdG9wOiAwIH07XG4gICAgcHJpdmF0ZSBtZW51RWxlbWVudCA9IG51bGw7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICAgIHByaXZhdGUgY29udGV4dE1lbnVMaXN0ZW5lckZuOiAoKSA9PiB2b2lkO1xuXG4gICAgQElucHV0KClcbiAgICBzaG93SWNvbnM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBWaWV3Q2hpbGQoTWF0TWVudVRyaWdnZXIpXG4gICAgbWVudVRyaWdnZXI6IE1hdE1lbnVUcmlnZ2VyO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY29udGV4dG1lbnUnLCBbJyRldmVudCddKVxuICAgIG9uU2hvd0NvbnRleHRNZW51KGV2ZW50PzogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcbiAgICBvblJlc2l6ZShldmVudCkge1xuICAgICAgICBpZiAodGhpcy5tZE1lbnVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB2aWV3cG9ydDogVmlld3BvcnRSdWxlcixcbiAgICAgICAgcHJpdmF0ZSBvdmVybGF5Q29udGFpbmVyOiBPdmVybGF5Q29udGFpbmVyLFxuICAgICAgICBwcml2YXRlIGNvbnRleHRNZW51U2VydmljZTogQ29udGV4dE1lbnVTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcbiAgICApIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51U2VydmljZS5zaG93LnN1YnNjcmliZSgobW91c2VFdmVudCkgPT4gdGhpcy5zaG93TWVudShtb3VzZUV2ZW50LmV2ZW50LCBtb3VzZUV2ZW50Lm9iaikpLFxuXG4gICAgICAgICAgICB0aGlzLm1lbnVUcmlnZ2VyLm9uTWVudU9wZW4uc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLm92ZXJsYXlDb250YWluZXIuZ2V0Q29udGFpbmVyRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudUxpc3RlbmVyRm4gPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbihjb250YWluZXIsICdjb250ZXh0bWVudScsIChjb250ZXh0bWVudUV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dG1lbnVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tZW51RWxlbWVudCA9IHRoaXMuZ2V0Q29udGV4dE1lbnVFbGVtZW50KCk7XG4gICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgdGhpcy5tZW51VHJpZ2dlci5vbk1lbnVDbG9zZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWVudUVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHRNZW51TGlzdGVuZXJGbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51TGlzdGVuZXJGbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHRNZW51TGlzdGVuZXJGbikge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0TWVudUxpc3RlbmVyRm4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzdWJzY3JpcHRpb24pID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG5cbiAgICAgICAgdGhpcy5tZW51RWxlbWVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgb25NZW51SXRlbUNsaWNrKGV2ZW50OiBFdmVudCwgbWVudUl0ZW06IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAobWVudUl0ZW0gJiYgbWVudUl0ZW0ubW9kZWwgJiYgbWVudUl0ZW0ubW9kZWwuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZW51SXRlbS5zdWJqZWN0Lm5leHQobWVudUl0ZW0pO1xuICAgIH1cblxuICAgIHNob3dNZW51KG1vdXNlRXZlbnQsIGxpbmtzKSB7XG4gICAgICAgIHRoaXMubGlua3MgPSBsaW5rcztcblxuICAgICAgICBpZiAobW91c2VFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5tb3VzZUxvY2F0aW9uID0ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IG1vdXNlRXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICB0b3A6IG1vdXNlRXZlbnQuY2xpZW50WVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWVudVRyaWdnZXIub3Blbk1lbnUoKTtcblxuICAgICAgICBpZiAodGhpcy5tZE1lbnVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbWRNZW51RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVudUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2NhdGlvbkNzcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMubW91c2VMb2NhdGlvbi5sZWZ0ICsgJ3B4JyxcbiAgICAgICAgICAgIHRvcDogdGhpcy5tb3VzZUxvY2F0aW9uLnRvcCArICdweCdcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1kTWVudUVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1kTWVudUVsZW1lbnQuY2xpZW50V2lkdGggKyB0aGlzLm1vdXNlTG9jYXRpb24ubGVmdCA+IHRoaXMudmlld3BvcnQuZ2V0Vmlld3BvcnRSZWN0KCkud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51VHJpZ2dlci5tZW51LnhQb3NpdGlvbiA9ICdiZWZvcmUnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1kTWVudUVsZW1lbnQucGFyZW50RWxlbWVudC5zdHlsZS5sZWZ0ID0gdGhpcy5tb3VzZUxvY2F0aW9uLmxlZnQgLSB0aGlzLm1kTWVudUVsZW1lbnQuY2xpZW50V2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVudVRyaWdnZXIubWVudS54UG9zaXRpb24gPSAnYWZ0ZXInO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1kTWVudUVsZW1lbnQucGFyZW50RWxlbWVudC5zdHlsZS5sZWZ0ID0gdGhpcy5sb2NhdGlvbkNzcygpLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWRNZW51RWxlbWVudC5jbGllbnRIZWlnaHQgKyB0aGlzLm1vdXNlTG9jYXRpb24udG9wID4gdGhpcy52aWV3cG9ydC5nZXRWaWV3cG9ydFJlY3QoKS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW51VHJpZ2dlci5tZW51LnlQb3NpdGlvbiA9ICdhYm92ZSc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWRNZW51RWxlbWVudC5wYXJlbnRFbGVtZW50LnN0eWxlLnRvcCA9IHRoaXMubW91c2VMb2NhdGlvbi50b3AgLSB0aGlzLm1kTWVudUVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbnVUcmlnZ2VyLm1lbnUueVBvc2l0aW9uID0gJ2JlbG93JztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZE1lbnVFbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUudG9wID0gdGhpcy5sb2NhdGlvbkNzcygpLnRvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q29udGV4dE1lbnVFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vdmVybGF5Q29udGFpbmVyLmdldENvbnRhaW5lckVsZW1lbnQoKS5xdWVyeVNlbGVjdG9yKCcuY29udGV4dC1tZW51Jyk7XG4gICAgfVxufVxuIl19