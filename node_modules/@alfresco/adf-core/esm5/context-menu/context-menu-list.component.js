/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, HostListener, Optional, Inject, QueryList, ViewChildren } from '@angular/core';
import { trigger } from '@angular/animations';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { MatMenuItem } from '@angular/material';
import { ContextMenuOverlayRef } from './context-menu-overlay';
import { contextMenuAnimation } from './animations';
import { CONTEXT_MENU_DATA } from './context-menu.tokens';
var ContextMenuListComponent = /** @class */ (function () {
    function ContextMenuListComponent(contextMenuOverlayRef, data) {
        this.contextMenuOverlayRef = contextMenuOverlayRef;
        this.data = data;
        this.links = this.data;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ContextMenuListComponent.prototype.handleKeydownEscape = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            this.contextMenuOverlayRef.close();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ContextMenuListComponent.prototype.handleKeydownEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            /** @type {?} */
            var keyCode = event.keyCode;
            if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                this.keyManager.onKeydown(event);
            }
        }
    };
    /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    ContextMenuListComponent.prototype.onMenuItemClick = /**
     * @param {?} event
     * @param {?} menuItem
     * @return {?}
     */
    function (event, menuItem) {
        if (menuItem && menuItem.model && menuItem.model.disabled) {
            event.preventDefault();
            event.stopImmediatePropagation();
            return;
        }
        menuItem.subject.next(menuItem);
        this.contextMenuOverlayRef.close();
    };
    /**
     * @return {?}
     */
    ContextMenuListComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.keyManager = new FocusKeyManager(this.items);
        this.keyManager.setFirstItemActive();
    };
    ContextMenuListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-context-menu',
                    template: "\n        <div mat-menu class=\"mat-menu-panel\" @panelAnimation>\n            <div id=\"adf-context-menu-content\" class=\"mat-menu-content\">\n                <ng-container *ngFor=\"let link of links\">\n                    <button *ngIf=\"link.model?.visible\"\n                            [attr.data-automation-id]=\"'context-'+((link.title || link.model?.title) | translate)\"\n                            mat-menu-item\n                            [disabled]=\"link.model?.disabled\"\n                            (click)=\"onMenuItemClick($event, link)\">\n                        <mat-icon *ngIf=\"link.model?.icon\">{{ link.model.icon }}</mat-icon>\n                        <span>{{ (link.title || link.model?.title) | translate }}</span>\n                    </button>\n                </ng-container>\n            </div>\n        </div>\n    ",
                    host: {
                        role: 'menu',
                        class: 'adf-context-menu'
                    },
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        trigger('panelAnimation', contextMenuAnimation)
                    ]
                }] }
    ];
    /** @nocollapse */
    ContextMenuListComponent.ctorParameters = function () { return [
        { type: ContextMenuOverlayRef, decorators: [{ type: Inject, args: [ContextMenuOverlayRef,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONTEXT_MENU_DATA,] }] }
    ]; };
    ContextMenuListComponent.propDecorators = {
        items: [{ type: ViewChildren, args: [MatMenuItem,] }],
        handleKeydownEscape: [{ type: HostListener, args: ['document:keydown.Escape', ['$event'],] }],
        handleKeydownEvent: [{ type: HostListener, args: ['document:keydown', ['$event'],] }]
    };
    return ContextMenuListComponent;
}());
export { ContextMenuListComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContextMenuListComponent.prototype.keyManager;
    /** @type {?} */
    ContextMenuListComponent.prototype.items;
    /** @type {?} */
    ContextMenuListComponent.prototype.links;
    /**
     * @type {?}
     * @private
     */
    ContextMenuListComponent.prototype.contextMenuOverlayRef;
    /**
     * @type {?}
     * @private
     */
    ContextMenuListComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY29udGV4dC1tZW51L2NvbnRleHQtbWVudS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFDMUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUM1QyxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRDtJQWlESSxrQ0FDMkMscUJBQTRDLEVBQ3BDLElBQVM7UUFEakIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUNwQyxTQUFJLEdBQUosSUFBSSxDQUFLO1FBRXhELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMzQixDQUFDOzs7OztJQXJCRCxzREFBbUI7Ozs7SUFEbkIsVUFDb0IsS0FBb0I7UUFDcEMsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdEM7SUFDTCxDQUFDOzs7OztJQUdELHFEQUFrQjs7OztJQURsQixVQUNtQixLQUFvQjtRQUNuQyxJQUFJLEtBQUssRUFBRTs7Z0JBQ0QsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPO1lBQzdCLElBQUksT0FBTyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssVUFBVSxFQUFFO2dCQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNwQztTQUNKO0lBQ0wsQ0FBQzs7Ozs7O0lBU0Qsa0RBQWU7Ozs7O0lBQWYsVUFBZ0IsS0FBWSxFQUFFLFFBQWE7UUFDdkMsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUN2RCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFDakMsT0FBTztTQUNWO1FBRUQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7SUFFRCxrREFBZTs7O0lBQWY7UUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZUFBZSxDQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDekMsQ0FBQzs7Z0JBdEVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsczFCQWVUO29CQUNELElBQUksRUFBRTt3QkFDRixJQUFJLEVBQUUsTUFBTTt3QkFDWixLQUFLLEVBQUUsa0JBQWtCO3FCQUM1QjtvQkFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsVUFBVSxFQUFFO3dCQUNSLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxvQkFBb0IsQ0FBQztxQkFDbEQ7aUJBQ0o7Ozs7Z0JBOUJRLHFCQUFxQix1QkFzRHJCLE1BQU0sU0FBQyxxQkFBcUI7Z0RBQzVCLFFBQVEsWUFBSSxNQUFNLFNBQUMsaUJBQWlCOzs7d0JBdEJ4QyxZQUFZLFNBQUMsV0FBVztzQ0FHeEIsWUFBWSxTQUFDLHlCQUF5QixFQUFFLENBQUMsUUFBUSxDQUFDO3FDQU9sRCxZQUFZLFNBQUMsa0JBQWtCLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBZ0NoRCwrQkFBQztDQUFBLEFBdkVELElBdUVDO1NBNUNZLHdCQUF3Qjs7Ozs7O0lBQ2pDLDhDQUFpRDs7SUFDakQseUNBQXlEOztJQUN6RCx5Q0FBYTs7Ozs7SUFvQlQseURBQW1GOzs7OztJQUNuRix3Q0FBd0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIEhvc3RMaXN0ZW5lciwgQWZ0ZXJWaWV3SW5pdCxcbiAgICBPcHRpb25hbCwgSW5qZWN0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IERPV05fQVJST1csIFVQX0FSUk9XIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IEZvY3VzS2V5TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE1hdE1lbnVJdGVtIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgQ29udGV4dE1lbnVPdmVybGF5UmVmIH0gZnJvbSAnLi9jb250ZXh0LW1lbnUtb3ZlcmxheSc7XG5pbXBvcnQgeyBjb250ZXh0TWVudUFuaW1hdGlvbiB9IGZyb20gJy4vYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDT05URVhUX01FTlVfREFUQSB9IGZyb20gJy4vY29udGV4dC1tZW51LnRva2Vucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNvbnRleHQtbWVudScsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBtYXQtbWVudSBjbGFzcz1cIm1hdC1tZW51LXBhbmVsXCIgQHBhbmVsQW5pbWF0aW9uPlxuICAgICAgICAgICAgPGRpdiBpZD1cImFkZi1jb250ZXh0LW1lbnUtY29udGVudFwiIGNsYXNzPVwibWF0LW1lbnUtY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGxpbmsgb2YgbGlua3NcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiAqbmdJZj1cImxpbmsubW9kZWw/LnZpc2libGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtYXV0b21hdGlvbi1pZF09XCInY29udGV4dC0nKygobGluay50aXRsZSB8fCBsaW5rLm1vZGVsPy50aXRsZSkgfCB0cmFuc2xhdGUpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXQtbWVudS1pdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImxpbmsubW9kZWw/LmRpc2FibGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwib25NZW51SXRlbUNsaWNrKCRldmVudCwgbGluaylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxtYXQtaWNvbiAqbmdJZj1cImxpbmsubW9kZWw/Lmljb25cIj57eyBsaW5rLm1vZGVsLmljb24gfX08L21hdC1pY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgKGxpbmsudGl0bGUgfHwgbGluay5tb2RlbD8udGl0bGUpIHwgdHJhbnNsYXRlIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICBgLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgcm9sZTogJ21lbnUnLFxuICAgICAgICBjbGFzczogJ2FkZi1jb250ZXh0LW1lbnUnXG4gICAgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGFuaW1hdGlvbnM6IFtcbiAgICAgICAgdHJpZ2dlcigncGFuZWxBbmltYXRpb24nLCBjb250ZXh0TWVudUFuaW1hdGlvbilcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIENvbnRleHRNZW51TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUga2V5TWFuYWdlcjogRm9jdXNLZXlNYW5hZ2VyPE1hdE1lbnVJdGVtPjtcbiAgICBAVmlld0NoaWxkcmVuKE1hdE1lbnVJdGVtKSBpdGVtczogUXVlcnlMaXN0PE1hdE1lbnVJdGVtPjtcbiAgICBsaW5rczogYW55W107XG5cbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duLkVzY2FwZScsIFsnJGV2ZW50J10pXG4gICAgaGFuZGxlS2V5ZG93bkVzY2FwZShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVPdmVybGF5UmVmLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDprZXlkb3duJywgWyckZXZlbnQnXSlcbiAgICBoYW5kbGVLZXlkb3duRXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSBVUF9BUlJPVyB8fCBrZXlDb2RlID09PSBET1dOX0FSUk9XKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlNYW5hZ2VyLm9uS2V5ZG93bihldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChDb250ZXh0TWVudU92ZXJsYXlSZWYpIHByaXZhdGUgY29udGV4dE1lbnVPdmVybGF5UmVmOiBDb250ZXh0TWVudU92ZXJsYXlSZWYsXG4gICAgICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQ09OVEVYVF9NRU5VX0RBVEEpIHByaXZhdGUgZGF0YTogYW55XG4gICAgKSB7XG4gICAgICAgIHRoaXMubGlua3MgPSB0aGlzLmRhdGE7XG4gICAgfVxuXG4gICAgb25NZW51SXRlbUNsaWNrKGV2ZW50OiBFdmVudCwgbWVudUl0ZW06IGFueSkge1xuICAgICAgICBpZiAobWVudUl0ZW0gJiYgbWVudUl0ZW0ubW9kZWwgJiYgbWVudUl0ZW0ubW9kZWwuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lbnVJdGVtLnN1YmplY3QubmV4dChtZW51SXRlbSk7XG4gICAgICAgIHRoaXMuY29udGV4dE1lbnVPdmVybGF5UmVmLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmtleU1hbmFnZXIgPSBuZXcgRm9jdXNLZXlNYW5hZ2VyPE1hdE1lbnVJdGVtPih0aGlzLml0ZW1zKTtcbiAgICAgICAgdGhpcy5rZXlNYW5hZ2VyLnNldEZpcnN0SXRlbUFjdGl2ZSgpO1xuICAgIH1cbn1cbiJdfQ==