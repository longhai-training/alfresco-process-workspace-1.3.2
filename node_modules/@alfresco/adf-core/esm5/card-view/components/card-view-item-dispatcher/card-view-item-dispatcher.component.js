/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ComponentFactoryResolver, Input, ViewChild } from '@angular/core';
import { CardItemTypeService } from '../../services/card-item-types.service';
import { CardViewContentProxyDirective } from '../../directives/card-view-content-proxy.directive';
var CardViewItemDispatcherComponent = /** @class */ (function () {
    function CardViewItemDispatcherComponent(cardItemTypeService, resolver) {
        var _this = this;
        this.cardItemTypeService = cardItemTypeService;
        this.resolver = resolver;
        this.displayEmpty = true;
        this.loaded = false;
        this.componentReference = null;
        /** @type {?} */
        var dynamicLifeCycleMethods = [
            'ngOnInit',
            'ngDoCheck',
            'ngAfterContentInit',
            'ngAfterContentChecked',
            'ngAfterViewInit',
            'ngAfterViewChecked',
            'ngOnDestroy'
        ];
        dynamicLifeCycleMethods.forEach((/**
         * @param {?} method
         * @return {?}
         */
        function (method) {
            _this[method] = _this.proxy.bind(_this, method);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        Object.keys(changes)
            .map((/**
         * @param {?} changeName
         * @return {?}
         */
        function (changeName) { return [changeName, changes[changeName]]; }))
            .forEach((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), inputParamName = _b[0], simpleChange = _b[1];
            _this.componentReference.instance[inputParamName] = simpleChange.currentValue;
        }));
        this.proxy('ngOnChanges', changes);
    };
    /**
     * @private
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.loadComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factoryClass = this.cardItemTypeService.resolveComponentType(this.property);
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(factoryClass);
        this.componentReference = this.content.viewContainerRef.createComponent(factory);
        this.componentReference.instance.editable = this.editable;
        this.componentReference.instance.property = this.property;
        this.componentReference.instance.displayEmpty = this.displayEmpty;
    };
    /**
     * @private
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.proxy = /**
     * @private
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.componentReference.instance[methodName]) {
            this.componentReference.instance[methodName].apply(this.componentReference.instance, args);
        }
    };
    CardViewItemDispatcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-item-dispatcher',
                    template: '<ng-template adf-card-view-content-proxy></ng-template>'
                }] }
    ];
    /** @nocollapse */
    CardViewItemDispatcherComponent.ctorParameters = function () { return [
        { type: CardItemTypeService },
        { type: ComponentFactoryResolver }
    ]; };
    CardViewItemDispatcherComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        content: [{ type: ViewChild, args: [CardViewContentProxyDirective,] }]
    };
    return CardViewItemDispatcherComponent;
}());
export { CardViewItemDispatcherComponent };
if (false) {
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.property;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.editable;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.displayEmpty;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.loaded;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.componentReference;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngOnInit;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngDoCheck;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.cardItemTypeService;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWl0ZW0tZGlzcGF0Y2hlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJjYXJkLXZpZXcvY29tcG9uZW50cy9jYXJkLXZpZXctaXRlbS1kaXNwYXRjaGVyL2NhcmQtdmlldy1pdGVtLWRpc3BhdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUNULHdCQUF3QixFQUN4QixLQUFLLEVBSUwsU0FBUyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBRW5HO0lBdUJJLHlDQUFvQixtQkFBd0MsRUFDeEMsUUFBa0M7UUFEdEQsaUJBZUM7UUFmbUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQVp0RCxpQkFBWSxHQUFZLElBQUksQ0FBQztRQUtyQixXQUFNLEdBQVksS0FBSyxDQUFDO1FBQ3hCLHVCQUFrQixHQUFRLElBQUksQ0FBQzs7WUFPN0IsdUJBQXVCLEdBQUc7WUFDNUIsVUFBVTtZQUNWLFdBQVc7WUFDWCxvQkFBb0I7WUFDcEIsdUJBQXVCO1lBQ3ZCLGlCQUFpQjtZQUNqQixvQkFBb0I7WUFDcEIsYUFBYTtTQUNoQjtRQUVELHVCQUF1QixDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLE1BQU07WUFDbkMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQscURBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQWxDLGlCQWFDO1FBWkcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDdEI7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUNmLEdBQUc7Ozs7UUFBQyxVQUFDLFVBQVUsSUFBSyxPQUFBLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFqQyxDQUFpQyxFQUFDO2FBQ3RELE9BQU87Ozs7UUFBQyxVQUFDLEVBQXNEO2dCQUF0RCwwQkFBc0QsRUFBckQsc0JBQWMsRUFBRSxvQkFBWTtZQUNuQyxLQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUM7UUFDakYsQ0FBQyxFQUFDLENBQUM7UUFFUCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7OztJQUVPLHVEQUFhOzs7O0lBQXJCOztZQUNVLFlBQVksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7WUFFM0UsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsWUFBWSxDQUFDO1FBQ25FLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUN0RSxDQUFDOzs7Ozs7O0lBRU8sK0NBQUs7Ozs7OztJQUFiLFVBQWMsVUFBVTtRQUFFLGNBQU87YUFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1lBQVAsNkJBQU87O1FBQzdCLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlGO0lBQ0wsQ0FBQzs7Z0JBdEVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsK0JBQStCO29CQUN6QyxRQUFRLEVBQUUseURBQXlEO2lCQUN0RTs7OztnQkFOUSxtQkFBbUI7Z0JBUnhCLHdCQUF3Qjs7OzJCQWdCdkIsS0FBSzsyQkFHTCxLQUFLOytCQUdMLEtBQUs7MEJBR0wsU0FBUyxTQUFDLDZCQUE2Qjs7SUF5RDVDLHNDQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0FuRVksK0JBQStCOzs7SUFDeEMsbURBQ3VCOztJQUV2QixtREFDa0I7O0lBRWxCLHVEQUM2Qjs7Ozs7SUFFN0Isa0RBQytDOzs7OztJQUUvQyxpREFBZ0M7Ozs7O0lBQ2hDLDZEQUF1Qzs7SUFFdkMsbURBQWdCOztJQUNoQixvREFBaUI7Ozs7O0lBRUwsOERBQWdEOzs7OztJQUNoRCxtREFBMEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIFNpbXBsZUNoYW5nZSxcbiAgICBTaW1wbGVDaGFuZ2VzLFxuICAgIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhcmRWaWV3SXRlbSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2FyZC12aWV3LWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IENhcmRJdGVtVHlwZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jYXJkLWl0ZW0tdHlwZXMuc2VydmljZSc7XG5pbXBvcnQgeyBDYXJkVmlld0NvbnRlbnRQcm94eURpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvY2FyZC12aWV3LWNvbnRlbnQtcHJveHkuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2FyZC12aWV3LWl0ZW0tZGlzcGF0Y2hlcicsXG4gICAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgYWRmLWNhcmQtdmlldy1jb250ZW50LXByb3h5PjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBDYXJkVmlld0l0ZW1EaXNwYXRjaGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBASW5wdXQoKVxuICAgIHByb3BlcnR5OiBDYXJkVmlld0l0ZW07XG5cbiAgICBASW5wdXQoKVxuICAgIGVkaXRhYmxlOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RW1wdHk6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgQFZpZXdDaGlsZChDYXJkVmlld0NvbnRlbnRQcm94eURpcmVjdGl2ZSlcbiAgICBwcml2YXRlIGNvbnRlbnQ6IENhcmRWaWV3Q29udGVudFByb3h5RGlyZWN0aXZlO1xuXG4gICAgcHJpdmF0ZSBsb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGNvbXBvbmVudFJlZmVyZW5jZTogYW55ID0gbnVsbDtcblxuICAgIHB1YmxpYyBuZ09uSW5pdDtcbiAgICBwdWJsaWMgbmdEb0NoZWNrO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjYXJkSXRlbVR5cGVTZXJ2aWNlOiBDYXJkSXRlbVR5cGVTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgICAgICBjb25zdCBkeW5hbWljTGlmZUN5Y2xlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgICduZ09uSW5pdCcsXG4gICAgICAgICAgICAnbmdEb0NoZWNrJyxcbiAgICAgICAgICAgICduZ0FmdGVyQ29udGVudEluaXQnLFxuICAgICAgICAgICAgJ25nQWZ0ZXJDb250ZW50Q2hlY2tlZCcsXG4gICAgICAgICAgICAnbmdBZnRlclZpZXdJbml0JyxcbiAgICAgICAgICAgICduZ0FmdGVyVmlld0NoZWNrZWQnLFxuICAgICAgICAgICAgJ25nT25EZXN0cm95J1xuICAgICAgICBdO1xuXG4gICAgICAgIGR5bmFtaWNMaWZlQ3ljbGVNZXRob2RzLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdID0gdGhpcy5wcm94eS5iaW5kKHRoaXMsIG1ldGhvZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkQ29tcG9uZW50KCk7XG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3Qua2V5cyhjaGFuZ2VzKVxuICAgICAgICAgICAgLm1hcCgoY2hhbmdlTmFtZSkgPT4gW2NoYW5nZU5hbWUsIGNoYW5nZXNbY2hhbmdlTmFtZV1dKVxuICAgICAgICAgICAgLmZvckVhY2goKFtpbnB1dFBhcmFtTmFtZSwgc2ltcGxlQ2hhbmdlXTogW3N0cmluZywgU2ltcGxlQ2hhbmdlXSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlW2lucHV0UGFyYW1OYW1lXSA9IHNpbXBsZUNoYW5nZS5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnByb3h5KCduZ09uQ2hhbmdlcycsIGNoYW5nZXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZENvbXBvbmVudCgpIHtcbiAgICAgICAgY29uc3QgZmFjdG9yeUNsYXNzID0gdGhpcy5jYXJkSXRlbVR5cGVTZXJ2aWNlLnJlc29sdmVDb21wb25lbnRUeXBlKHRoaXMucHJvcGVydHkpO1xuXG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGZhY3RvcnlDbGFzcyk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmZXJlbmNlID0gdGhpcy5jb250ZW50LnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlLmVkaXRhYmxlID0gdGhpcy5lZGl0YWJsZTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2UucHJvcGVydHkgPSB0aGlzLnByb3BlcnR5O1xuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZS5kaXNwbGF5RW1wdHkgPSB0aGlzLmRpc3BsYXlFbXB0eTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByb3h5KG1ldGhvZE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZVttZXRob2ROYW1lXS5hcHBseSh0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZSwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=