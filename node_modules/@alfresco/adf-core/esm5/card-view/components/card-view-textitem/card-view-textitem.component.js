/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild } from '@angular/core';
import { CardViewTextItemModel } from '../../models/card-view-textitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { AppConfigService } from '../../../app-config/app-config.service';
var CardViewTextItemComponent = /** @class */ (function () {
    function CardViewTextItemComponent(cardViewUpdateService, appConfig) {
        this.cardViewUpdateService = cardViewUpdateService;
        this.appConfig = appConfig;
        this.editable = false;
        this.displayEmpty = true;
        this.inEdit = false;
        this.valueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator') || CardViewTextItemComponent.DEFAULT_SEPARATOR;
    }
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.editedValue = this.property.multiline ? this.property.displayValue : this.property.value;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.showProperty = /**
     * @return {?}
     */
    function () {
        return this.displayEmpty || !this.property.isEmpty();
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.isEditable = /**
     * @return {?}
     */
    function () {
        return this.editable && this.property.editable;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.isClickable = /**
     * @return {?}
     */
    function () {
        return !!this.property.clickable;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.hasIcon = /**
     * @return {?}
     */
    function () {
        return !!this.property.icon;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.hasErrors = /**
     * @return {?}
     */
    function () {
        return this.errorMessages && this.errorMessages.length > 0;
    };
    /**
     * @param {?} editStatus
     * @return {?}
     */
    CardViewTextItemComponent.prototype.setEditMode = /**
     * @param {?} editStatus
     * @return {?}
     */
    function (editStatus) {
        var _this = this;
        this.inEdit = editStatus;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.editorInput) {
                _this.editorInput.nativeElement.click();
            }
        }), 0);
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.editedValue = this.property.multiline ? this.property.displayValue : this.property.value;
        this.setEditMode(false);
        this.resetErrorMessages();
    };
    /**
     * @private
     * @return {?}
     */
    CardViewTextItemComponent.prototype.resetErrorMessages = /**
     * @private
     * @return {?}
     */
    function () {
        this.errorMessages = [];
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        if (this.property.isValid(this.editedValue)) {
            /** @type {?} */
            var updatedValue = this.prepareValueForUpload(this.property, this.editedValue);
            this.cardViewUpdateService.update(this.property, updatedValue);
            this.property.value = updatedValue;
            this.setEditMode(false);
            this.resetErrorMessages();
        }
        else {
            this.errorMessages = this.property.getValidationErrors(this.editedValue);
        }
    };
    /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    CardViewTextItemComponent.prototype.prepareValueForUpload = /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    function (property, value) {
        if (property.multivalued) {
            /** @type {?} */
            var listOfValues = value.split(this.valueSeparator.trim()).map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.trim(); }));
            return listOfValues;
        }
        return value;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.onTextAreaInputChange = /**
     * @return {?}
     */
    function () {
        this.errorMessages = this.property.getValidationErrors(this.editedValue);
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.clicked = /**
     * @return {?}
     */
    function () {
        if (typeof this.property.clickCallBack === 'function') {
            this.property.clickCallBack();
        }
        else {
            this.cardViewUpdateService.clicked(this.property);
        }
    };
    CardViewTextItemComponent.DEFAULT_SEPARATOR = ', ';
    CardViewTextItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-textitem',
                    template: "<div [attr.data-automation-id]=\"'card-textitem-label-' + property.key\" class=\"adf-property-label\" *ngIf=\"showProperty() || isEditable()\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value\">\n    <span *ngIf=\"!isEditable()\">\n        <span *ngIf=\"!isClickable(); else elseBlock\" [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n            <span *ngIf=\"showProperty()\" class=\"adf-textitem-ellipsis\">{{ property.displayValue }}</span>\n        </span>\n        <ng-template #elseBlock>\n            <div class=\"adf-textitem-clickable\" (click)=\"clicked()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                <span class=\"adf-textitem-clickable-value\" [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n                    <span *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n                </span>\n            </div>\n        </ng-template>\n    </span>\n    <span *ngIf=\"isEditable()\">\n        <div *ngIf=\"!inEdit\" (click)=\"setEditMode(true)\" class=\"adf-textitem-readonly\" [attr.data-automation-id]=\"'card-textitem-edit-toggle-' + property.key\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n            </span>\n            <mat-icon fxFlex=\"0 0 auto\"\n                [attr.data-automation-id]=\"'card-textitem-edit-icon-' + property.key\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                class=\"adf-textitem-icon\">create</mat-icon>\n        </div>\n        <div *ngIf=\"inEdit\" class=\"adf-textitem-editable\">\n            <div class=\"adf-textitem-editable-controls\">\n                <mat-form-field floatPlaceholder=\"never\" class=\"adf-input-container\">\n                    <input *ngIf=\"!property.multiline\" #editorInput\n                        matInput\n                        class=\"adf-input\"\n                        [placeholder]=\"property.default | translate\"\n                        [(ngModel)]=\"editedValue\"\n                        [attr.data-automation-id]=\"'card-textitem-editinput-' + property.key\">\n                    <textarea *ngIf=\"property.multiline\" #editorInput\n                        matInput\n                        matTextareaAutosize\n                        matAutosizeMaxRows=\"1\"\n                        matAutosizeMaxRows=\"5\"\n                        class=\"adf-textarea\"\n                        [placeholder]=\"property.default | translate\"\n                        [(ngModel)]=\"editedValue\"\n                        (input)=\"onTextAreaInputChange()\"\n                        [attr.data-automation-id]=\"'card-textitem-edittextarea-' + property.key\"></textarea>\n                </mat-form-field>\n                <mat-icon\n                    [ngClass]=\"{'disable': hasErrors()}\"\n                    (click)=\"update()\"\n                    [attr.data-automation-id]=\"'card-textitem-update-' + property.key\"\n                    class=\"adf-textitem-icon adf-update-icon\"\n                    [class.adf-button-disabled]=\"hasErrors()\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.SAVE' | translate\">done</mat-icon>\n                <mat-icon\n                    class=\"adf-textitem-icon adf-reset-icon\"\n                    (click)=\"reset()\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.CANCEL' | translate\"\n                    [attr.data-automation-id]=\"'card-textitem-reset-' + property.key\">clear</mat-icon>\n\n            </div>\n            <mat-error  [attr.data-automation-id]=\"'card-textitem-error-' + property.key\" class=\"adf-textitem-editable-error\" *ngIf=\"hasErrors()\">\n                <ul>\n                    <li *ngFor=\"let errorMessage of errorMessages\">{{ errorMessage | translate }}</li>\n                </ul>\n            </mat-error>\n        </div>\n    </span>\n    <ng-template #elseEmptyValueBlock>\n        <span class=\"adf-textitem-default-value\">{{ property.default | translate }}</span>\n    </ng-template>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CardViewTextItemComponent.ctorParameters = function () { return [
        { type: CardViewUpdateService },
        { type: AppConfigService }
    ]; };
    CardViewTextItemComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        editorInput: [{ type: ViewChild, args: ['editorInput',] }]
    };
    return CardViewTextItemComponent;
}());
export { CardViewTextItemComponent };
if (false) {
    /** @type {?} */
    CardViewTextItemComponent.DEFAULT_SEPARATOR;
    /** @type {?} */
    CardViewTextItemComponent.prototype.property;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editable;
    /** @type {?} */
    CardViewTextItemComponent.prototype.displayEmpty;
    /**
     * @type {?}
     * @private
     */
    CardViewTextItemComponent.prototype.editorInput;
    /** @type {?} */
    CardViewTextItemComponent.prototype.inEdit;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editedValue;
    /** @type {?} */
    CardViewTextItemComponent.prototype.errorMessages;
    /** @type {?} */
    CardViewTextItemComponent.prototype.valueSeparator;
    /**
     * @type {?}
     * @private
     */
    CardViewTextItemComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    CardViewTextItemComponent.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,