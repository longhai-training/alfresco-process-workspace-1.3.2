/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { EcmUserService } from '../userinfo/services/ecm-user.service';
import { PeopleProcessService } from '../services/people-process.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
var CommentListComponent = /** @class */ (function () {
    function CommentListComponent(peopleProcessService, ecmUserService, userPreferenceService) {
        var _this = this;
        this.peopleProcessService = peopleProcessService;
        this.ecmUserService = ecmUserService;
        this.userPreferenceService = userPreferenceService;
        /**
         * Emitted when the user clicks on one of the comment rows.
         */
        this.clickRow = new EventEmitter();
        userPreferenceService.select(UserPreferenceValues.Locale).subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            _this.currentLocale = locale;
        }));
    }
    /**
     * @param {?} comment
     * @return {?}
     */
    CommentListComponent.prototype.selectComment = /**
     * @param {?} comment
     * @return {?}
     */
    function (comment) {
        if (this.selectedComment) {
            this.selectedComment.isSelected = false;
        }
        comment.isSelected = true;
        this.selectedComment = comment;
        this.clickRow.emit(this.selectedComment);
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.getUserShortName = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        /** @type {?} */
        var shortName = '';
        if (user) {
            if (user.firstName) {
                shortName = user.firstName[0].toUpperCase();
            }
            if (user.lastName) {
                shortName += user.lastName[0].toUpperCase();
            }
        }
        return shortName;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.isPictureDefined = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return user.pictureId || user.avatarId;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.getUserImage = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        if (this.isAContentUsers(user)) {
            return this.ecmUserService.getUserProfileImage(user.avatarId);
        }
        else {
            return this.peopleProcessService.getUserImage(user);
        }
    };
    /**
     * @private
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.isAContentUsers = /**
     * @private
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return user.avatarId;
    };
    CommentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-comment-list',
                    template: " <mat-list class=\"adf-comment-list\">\n    <mat-list-item *ngFor=\"let comment of comments\"\n                  (click)=\"selectComment(comment)\"\n                  class=\"adf-comment-list-item\"\n                  [class.adf-is-selected]=\"comment.isSelected\"\n                  id=\"adf-comment-{{comment?.id}}\">\n        <div id=\"comment-user-icon\" class=\"adf-comment-img-container\">\n            <div\n                *ngIf=\"!isPictureDefined(comment.createdBy)\"\n                class=\"adf-comment-user-icon\">\n                {{getUserShortName(comment.createdBy)}}\n            </div>\n            <div>\n                <img [alt]=\"comment.createdBy\" *ngIf=\"isPictureDefined(comment.createdBy)\"\n                      class=\"adf-people-img\"\n                     [src]=\"getUserImage(comment.createdBy)\" />\n            </div>\n        </div>\n        <div class=\"adf-comment-contents\">\n            <div matLine id=\"comment-user\" class=\"adf-comment-user-name\">\n                {{comment.createdBy?.firstName}} {{comment.createdBy?.lastName}}\n            </div>\n            <div matLine id=\"comment-message\" class=\"adf-comment-message\" [innerHTML]=\"comment.message\"></div>\n            <div matLine id=\"comment-time\" class=\"adf-comment-message-time\">\n                {{ comment.created | adfTimeAgo: currentLocale }}\n            </div>\n        </div>\n    </mat-list-item>\n</mat-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CommentListComponent.ctorParameters = function () { return [
        { type: PeopleProcessService },
        { type: EcmUserService },
        { type: UserPreferencesService }
    ]; };
    CommentListComponent.propDecorators = {
        comments: [{ type: Input }],
        clickRow: [{ type: Output }]
    };
    return CommentListComponent;
}());
export { CommentListComponent };
if (false) {
    /**
     * The comments data used to populate the list.
     * @type {?}
     */
    CommentListComponent.prototype.comments;
    /**
     * Emitted when the user clicks on one of the comment rows.
     * @type {?}
     */
    CommentListComponent.prototype.clickRow;
    /** @type {?} */
    CommentListComponent.prototype.selectedComment;
    /** @type {?} */
    CommentListComponent.prototype.currentLocale;
    /** @type {?} */
    CommentListComponent.prototype.peopleProcessService;
    /** @type {?} */
    CommentListComponent.prototype.ecmUserService;
    /** @type {?} */
    CommentListComponent.prototype.userPreferenceService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNvbW1lbnRzL2NvbW1lbnQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFcEc7SUFxQkksOEJBQW1CLG9CQUEwQyxFQUMxQyxjQUE4QixFQUM5QixxQkFBNkM7UUFGaEUsaUJBTUM7UUFOa0IseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF3Qjs7OztRQVJoRSxhQUFRLEdBQStCLElBQUksWUFBWSxFQUFnQixDQUFDO1FBU3BFLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxNQUFNO1lBQ3ZFLEtBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFRCw0Q0FBYTs7OztJQUFiLFVBQWMsT0FBcUI7UUFDL0IsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUMzQztRQUNELE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7OztJQUVELCtDQUFnQjs7OztJQUFoQixVQUFpQixJQUFTOztZQUNsQixTQUFTLEdBQUcsRUFBRTtRQUNsQixJQUFJLElBQUksRUFBRTtZQUNOLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDaEIsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDL0M7WUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDL0M7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsK0NBQWdCOzs7O0lBQWhCLFVBQWlCLElBQVM7UUFDdEIsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCwyQ0FBWTs7OztJQUFaLFVBQWEsSUFBUztRQUNsQixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRTthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sOENBQWU7Ozs7O0lBQXZCLFVBQXdCLElBQVM7UUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7O2dCQWpFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIseTZDQUE0QztvQkFFNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkFSUSxvQkFBb0I7Z0JBRHBCLGNBQWM7Z0JBRWQsc0JBQXNCOzs7MkJBWTFCLEtBQUs7MkJBSUwsTUFBTTs7SUFvRFgsMkJBQUM7Q0FBQSxBQWxFRCxJQWtFQztTQTNEWSxvQkFBb0I7Ozs7OztJQUc3Qix3Q0FDeUI7Ozs7O0lBR3pCLHdDQUN3RTs7SUFFeEUsK0NBQThCOztJQUU5Qiw2Q0FBYzs7SUFFRixvREFBaUQ7O0lBQ2pELDhDQUFxQzs7SUFDckMscURBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tZW50TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvY29tbWVudC5tb2RlbCc7XG5pbXBvcnQgeyBFY21Vc2VyU2VydmljZSB9IGZyb20gJy4uL3VzZXJpbmZvL3NlcnZpY2VzL2VjbS11c2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGVvcGxlUHJvY2Vzc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wZW9wbGUtcHJvY2Vzcy5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsIFVzZXJQcmVmZXJlbmNlVmFsdWVzIH0gZnJvbSAnLi4vc2VydmljZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29tbWVudC1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29tbWVudC1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jb21tZW50LWxpc3QuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgQ29tbWVudExpc3RDb21wb25lbnQge1xuXG4gICAgLyoqIFRoZSBjb21tZW50cyBkYXRhIHVzZWQgdG8gcG9wdWxhdGUgdGhlIGxpc3QuICovXG4gICAgQElucHV0KClcbiAgICBjb21tZW50czogQ29tbWVudE1vZGVsW107XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBvbmUgb2YgdGhlIGNvbW1lbnQgcm93cy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjbGlja1JvdzogRXZlbnRFbWl0dGVyPENvbW1lbnRNb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbW1lbnRNb2RlbD4oKTtcblxuICAgIHNlbGVjdGVkQ29tbWVudDogQ29tbWVudE1vZGVsO1xuXG4gICAgY3VycmVudExvY2FsZTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwZW9wbGVQcm9jZXNzU2VydmljZTogUGVvcGxlUHJvY2Vzc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIGVjbVVzZXJTZXJ2aWNlOiBFY21Vc2VyU2VydmljZSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgdXNlclByZWZlcmVuY2VTZXJ2aWNlOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlKSB7XG4gICAgICAgIHVzZXJQcmVmZXJlbmNlU2VydmljZS5zZWxlY3QoVXNlclByZWZlcmVuY2VWYWx1ZXMuTG9jYWxlKS5zdWJzY3JpYmUoKGxvY2FsZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9jYWxlID0gbG9jYWxlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWxlY3RDb21tZW50KGNvbW1lbnQ6IENvbW1lbnRNb2RlbCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENvbW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb21tZW50LmlzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb21tZW50LmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQ29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIHRoaXMuY2xpY2tSb3cuZW1pdCh0aGlzLnNlbGVjdGVkQ29tbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0VXNlclNob3J0TmFtZSh1c2VyOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgc2hvcnROYW1lID0gJyc7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICBpZiAodXNlci5maXJzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWUgPSB1c2VyLmZpcnN0TmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXIubGFzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWUgKz0gdXNlci5sYXN0TmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaG9ydE5hbWU7XG4gICAgfVxuXG4gICAgaXNQaWN0dXJlRGVmaW5lZCh1c2VyOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHVzZXIucGljdHVyZUlkIHx8IHVzZXIuYXZhdGFySWQ7XG4gICAgfVxuXG4gICAgZ2V0VXNlckltYWdlKHVzZXI6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmlzQUNvbnRlbnRVc2Vycyh1c2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWNtVXNlclNlcnZpY2UuZ2V0VXNlclByb2ZpbGVJbWFnZSh1c2VyLmF2YXRhcklkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlb3BsZVByb2Nlc3NTZXJ2aWNlLmdldFVzZXJJbWFnZSh1c2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNBQ29udGVudFVzZXJzKHVzZXI6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXNlci5hdmF0YXJJZDtcbiAgICB9XG59XG4iXX0=