/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentProcessService } from '../services/comment-process.service';
import { CommentContentService } from '../services/comment-content.service';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
var CommentsComponent = /** @class */ (function () {
    function CommentsComponent(commentProcessService, commentContentService) {
        var _this = this;
        this.commentProcessService = commentProcessService;
        this.commentContentService = commentContentService;
        /**
         * Are the comments read only?
         */
        this.readOnly = false;
        /**
         * Emitted when an error occurs while displaying/adding a comment.
         */
        this.error = new EventEmitter();
        this.comments = [];
        this.beingAdded = false;
        this.comment$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return _this.commentObserver = observer; }))
            .pipe(share());
        this.comment$.subscribe((/**
         * @param {?} comment
         * @return {?}
         */
        function (comment) {
            _this.comments.push(comment);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CommentsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.taskId = null;
        this.nodeId = null;
        this.taskId = changes['taskId'] ? changes['taskId'].currentValue : null;
        this.nodeId = changes['nodeId'] ? changes['nodeId'].currentValue : null;
        if (this.taskId || this.nodeId) {
            this.getComments();
        }
        else {
            this.resetComments();
        }
    };
    /**
     * @private
     * @return {?}
     */
    CommentsComponent.prototype.getComments = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resetComments();
        if (this.isATask()) {
            this.commentProcessService.getTaskComments(this.taskId).subscribe((/**
             * @param {?} comments
             * @return {?}
             */
            function (comments) {
                if (comments && comments instanceof Array) {
                    comments = comments.sort((/**
                     * @param {?} comment1
                     * @param {?} comment2
                     * @return {?}
                     */
                    function (comment1, comment2) {
                        /** @type {?} */
                        var date1 = new Date(comment1.created);
                        /** @type {?} */
                        var date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    }));
                    comments.forEach((/**
                     * @param {?} currentComment
                     * @return {?}
                     */
                    function (currentComment) {
                        _this.commentObserver.next(currentComment);
                    }));
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }
        if (this.isANode()) {
            this.commentContentService.getNodeComments(this.nodeId).subscribe((/**
             * @param {?} comments
             * @return {?}
             */
            function (comments) {
                if (comments && comments instanceof Array) {
                    comments = comments.sort((/**
                     * @param {?} comment1
                     * @param {?} comment2
                     * @return {?}
                     */
                    function (comment1, comment2) {
                        /** @type {?} */
                        var date1 = new Date(comment1.created);
                        /** @type {?} */
                        var date2 = new Date(comment2.created);
                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                    }));
                    comments.forEach((/**
                     * @param {?} comment
                     * @return {?}
                     */
                    function (comment) {
                        _this.commentObserver.next(comment);
                    }));
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    CommentsComponent.prototype.resetComments = /**
     * @private
     * @return {?}
     */
    function () {
        this.comments = [];
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.message && this.message.trim() && !this.beingAdded) {
            /** @type {?} */
            var comment = this.sanitize(this.message);
            this.beingAdded = true;
            if (this.isATask()) {
                this.commentProcessService.addTaskComment(this.taskId, comment)
                    .subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    _this.comments.unshift(res);
                    _this.message = '';
                    _this.beingAdded = false;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    _this.error.emit(err);
                    _this.beingAdded = false;
                }));
            }
            if (this.isANode()) {
                this.commentContentService.addNodeComment(this.nodeId, comment)
                    .subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    _this.comments.unshift(res);
                    _this.message = '';
                    _this.beingAdded = false;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    _this.error.emit(err);
                    _this.beingAdded = false;
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.message = '';
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.isReadOnly = /**
     * @return {?}
     */
    function () {
        return this.readOnly;
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.isATask = /**
     * @return {?}
     */
    function () {
        return this.taskId ? true : false;
    };
    /**
     * @return {?}
     */
    CommentsComponent.prototype.isANode = /**
     * @return {?}
     */
    function () {
        return this.nodeId ? true : false;
    };
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    CommentsComponent.prototype.sanitize = /**
     * @private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        return input.replace(/<[^>]+>/g, '')
            .replace(/^\s+|\s+$|\s+(?=\s)/g, '')
            .replace(/\r?\n/g, '<br/>');
    };
    CommentsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-comments',
                    template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\">\n        {{'COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n            <mat-form-field class=\"adf-full-width\">\n                <textarea (keyup.escape)=\"clear()\" matInput id=\"comment-input\" placeholder=\"{{'COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\"></textarea>\n            </mat-form-field>\n\n            <div class=\"adf-comments-input-actions\">\n                <button mat-button\n                    class=\"adf-comments-input-add\"\n                    data-automation-id=\"comments-input-add\"\n                    color=\"primary\"\n                    (click)=\"add()\"\n                    [disabled]=\"!message\">\n                    {{ 'COMMENTS.ADD' | translate }}\n                </button>\n            </div>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CommentsComponent.ctorParameters = function () { return [
        { type: CommentProcessService },
        { type: CommentContentService }
    ]; };
    CommentsComponent.propDecorators = {
        taskId: [{ type: Input }],
        nodeId: [{ type: Input }],
        readOnly: [{ type: Input }],
        error: [{ type: Output }]
    };
    return CommentsComponent;
}());
export { CommentsComponent };
if (false) {
    /**
     * The numeric ID of the task.
     * @type {?}
     */
    CommentsComponent.prototype.taskId;
    /**
     * The numeric ID of the node.
     * @type {?}
     */
    CommentsComponent.prototype.nodeId;
    /**
     * Are the comments read only?
     * @type {?}
     */
    CommentsComponent.prototype.readOnly;
    /**
     * Emitted when an error occurs while displaying/adding a comment.
     * @type {?}
     */
    CommentsComponent.prototype.error;
    /** @type {?} */
    CommentsComponent.prototype.comments;
    /**
     * @type {?}
     * @private
     */
    CommentsComponent.prototype.commentObserver;
    /** @type {?} */
    CommentsComponent.prototype.comment$;
    /** @type {?} */
    CommentsComponent.prototype.message;
    /** @type {?} */
    CommentsComponent.prototype.beingAdded;
    /**
     * @type {?}
     * @private
     */
    CommentsComponent.prototype.commentProcessService;
    /**
     * @type {?}
     * @private
     */
    CommentsComponent.prototype.commentContentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY29tbWVudHMvY29tbWVudHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRTVFLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDO0lBZ0NJLDJCQUFvQixxQkFBNEMsRUFBVSxxQkFBNEM7UUFBdEgsaUJBTUM7UUFObUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUFVLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7Ozs7UUFmdEgsYUFBUSxHQUFZLEtBQUssQ0FBQzs7OztRQUkxQixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFbkQsYUFBUSxHQUFvQixFQUFFLENBQUM7UUFPL0IsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUd4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksVUFBVTs7OztRQUFlLFVBQUMsUUFBUSxJQUFLLE9BQUEsS0FBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLEVBQS9CLENBQStCLEVBQUM7YUFDdEYsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxPQUFxQjtZQUMxQyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNo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QUUsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Z0JBbEtKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsNGxDQUF3Qzs7aUJBRTNDOzs7O2dCQVhRLHFCQUFxQjtnQkFDckIscUJBQXFCOzs7eUJBY3pCLEtBQUs7eUJBSUwsS0FBSzsyQkFJTCxLQUFLO3dCQUlMLE1BQU07O0lBK0lYLHdCQUFDO0NBQUEsQUFuS0QsSUFtS0M7U0E5SlksaUJBQWlCOzs7Ozs7SUFHMUIsbUNBQ2U7Ozs7O0lBR2YsbUNBQ2U7Ozs7O0lBR2YscUNBQzBCOzs7OztJQUcxQixrQ0FDbUQ7O0lBRW5ELHFDQUErQjs7Ozs7SUFFL0IsNENBQWdEOztJQUNoRCxxQ0FBbUM7O0lBRW5DLG9DQUFnQjs7SUFFaEIsdUNBQTRCOzs7OztJQUVoQixrREFBb0Q7Ozs7O0lBQUUsa0RBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tbWVudFByb2Nlc3NTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWVudC1wcm9jZXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tbWVudENvbnRlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tbWVudC1jb250ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tbWVudE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2NvbW1lbnQubW9kZWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb21tZW50cycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NvbW1lbnRzLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jb21tZW50cy5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIENvbW1lbnRzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBUaGUgbnVtZXJpYyBJRCBvZiB0aGUgdGFzay4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhc2tJZDogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSBudW1lcmljIElEIG9mIHRoZSBub2RlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogQXJlIHRoZSBjb21tZW50cyByZWFkIG9ubHk/ICovXG4gICAgQElucHV0KClcbiAgICByZWFkT25seTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgZGlzcGxheWluZy9hZGRpbmcgYSBjb21tZW50LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29tbWVudHM6IENvbW1lbnRNb2RlbCBbXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBjb21tZW50T2JzZXJ2ZXI6IE9ic2VydmVyPENvbW1lbnRNb2RlbD47XG4gICAgY29tbWVudCQ6IE9ic2VydmFibGU8Q29tbWVudE1vZGVsPjtcblxuICAgIG1lc3NhZ2U6IHN0cmluZztcblxuICAgIGJlaW5nQWRkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tbWVudFByb2Nlc3NTZXJ2aWNlOiBDb21tZW50UHJvY2Vzc1NlcnZpY2UsIHByaXZhdGUgY29tbWVudENvbnRlbnRTZXJ2aWNlOiBDb21tZW50Q29udGVudFNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5jb21tZW50JCA9IG5ldyBPYnNlcnZhYmxlPENvbW1lbnRNb2RlbD4oKG9ic2VydmVyKSA9PiB0aGlzLmNvbW1lbnRPYnNlcnZlciA9IG9ic2VydmVyKVxuICAgICAgICAgICAgLnBpcGUoc2hhcmUoKSk7XG4gICAgICAgIHRoaXMuY29tbWVudCQuc3Vic2NyaWJlKChjb21tZW50OiBDb21tZW50TW9kZWwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29tbWVudHMucHVzaChjb21tZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLnRhc2tJZCA9IG51bGw7XG4gICAgICAgIHRoaXMubm9kZUlkID0gbnVsbDtcblxuICAgICAgICB0aGlzLnRhc2tJZCA9IGNoYW5nZXNbJ3Rhc2tJZCddID8gY2hhbmdlc1sndGFza0lkJ10uY3VycmVudFZhbHVlIDogbnVsbDtcbiAgICAgICAgdGhpcy5ub2RlSWQgPSBjaGFuZ2VzWydub2RlSWQnXSA/IGNoYW5nZXNbJ25vZGVJZCddLmN1cnJlbnRWYWx1ZSA6IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMudGFza0lkIHx8IHRoaXMubm9kZUlkKSB7XG4gICAgICAgICAgICB0aGlzLmdldENvbW1lbnRzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Q29tbWVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q29tbWVudHMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVzZXRDb21tZW50cygpO1xuICAgICAgICBpZiAodGhpcy5pc0FUYXNrKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tbWVudFByb2Nlc3NTZXJ2aWNlLmdldFRhc2tDb21tZW50cyh0aGlzLnRhc2tJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChjb21tZW50czogQ29tbWVudE1vZGVsW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRzICYmIGNvbW1lbnRzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gY29tbWVudHMuc29ydCgoY29tbWVudDE6IENvbW1lbnRNb2RlbCwgY29tbWVudDI6IENvbW1lbnRNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUxID0gbmV3IERhdGUoY29tbWVudDEuY3JlYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZTIgPSBuZXcgRGF0ZShjb21tZW50Mi5jcmVhdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTEgPiBkYXRlMiA/IC0xIDogZGF0ZTEgPCBkYXRlMiA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5mb3JFYWNoKChjdXJyZW50Q29tbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbWVudE9ic2VydmVyLm5leHQoY3VycmVudENvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNBTm9kZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbW1lbnRDb250ZW50U2VydmljZS5nZXROb2RlQ29tbWVudHModGhpcy5ub2RlSWQpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoY29tbWVudHM6IENvbW1lbnRNb2RlbFtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50cyAmJiBjb21tZW50cyBpbnN0YW5jZW9mIEFycmF5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gY29tbWVudHMuc29ydCgoY29tbWVudDE6IENvbW1lbnRNb2RlbCwgY29tbWVudDI6IENvbW1lbnRNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUxID0gbmV3IERhdGUoY29tbWVudDEuY3JlYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZTIgPSBuZXcgRGF0ZShjb21tZW50Mi5jcmVhdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTEgPiBkYXRlMiA/IC0xIDogZGF0ZTEgPCBkYXRlMiA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5mb3JFYWNoKChjb21tZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tZW50T2JzZXJ2ZXIubmV4dChjb21tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0Q29tbWVudHMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tbWVudHMgPSBbXTtcbiAgICB9XG5cbiAgICBhZGQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2UgJiYgdGhpcy5tZXNzYWdlLnRyaW0oKSAmJiAhdGhpcy5iZWluZ0FkZGVkKSB7XG4gICAgICAgICAgICBjb25zdCBjb21tZW50ID0gdGhpcy5zYW5pdGl6ZSh0aGlzLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICB0aGlzLmJlaW5nQWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNBVGFzaygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tZW50UHJvY2Vzc1NlcnZpY2UuYWRkVGFza0NvbW1lbnQodGhpcy50YXNrSWQsIGNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzOiBDb21tZW50TW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1lbnRzLnVuc2hpZnQocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlaW5nQWRkZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlaW5nQWRkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBTm9kZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tZW50Q29udGVudFNlcnZpY2UuYWRkTm9kZUNvbW1lbnQodGhpcy5ub2RlSWQsIGNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzOiBDb21tZW50TW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1lbnRzLnVuc2hpZnQocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlaW5nQWRkZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlaW5nQWRkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnJztcbiAgICB9XG5cbiAgICBpc1JlYWRPbmx5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkT25seTtcbiAgICB9XG5cbiAgICBpc0FUYXNrKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrSWQgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNBTm9kZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZUlkID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2FuaXRpemUoaW5wdXQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvPFtePl0rPi9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzK3xcXHMrJHxcXHMrKD89XFxzKS9nLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHI/XFxuL2csICc8YnIvPicpO1xuICAgIH1cbn1cbiJdfQ==