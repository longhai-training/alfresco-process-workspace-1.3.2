/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectDataRow } from './object-datarow.model';
import { ObjectDataColumn } from './object-datacolumn.model';
import { DataSorting } from './data-sorting.model';
import { Subject } from 'rxjs';
// Simple implementation of the DataTableAdapter interface.
var 
// Simple implementation of the DataTableAdapter interface.
ObjectDataTableAdapter = /** @class */ (function () {
    function ObjectDataTableAdapter(data, schema) {
        if (data === void 0) { data = []; }
        if (schema === void 0) { schema = []; }
        this._rows = [];
        this._columns = [];
        if (data && data.length > 0) {
            this._rows = data.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return new ObjectDataRow(item);
            }));
        }
        if (schema && schema.length > 0) {
            this._columns = schema.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return new ObjectDataColumn(item);
            }));
            // Sort by first sortable or just first column
            /** @type {?} */
            var sortable = this._columns.filter((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.sortable; }));
            if (sortable.length > 0) {
                this.sort(sortable[0].key, 'asc');
            }
        }
        this.rowsChanged = new Subject();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ObjectDataTableAdapter.generateSchema = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var schema = [];
        if (data && data.length) {
            /** @type {?} */
            var rowToExaminate = data[0];
            if (typeof rowToExaminate === 'object') {
                for (var key in rowToExaminate) {
                    if (rowToExaminate.hasOwnProperty(key)) {
                        schema.push({
                            type: 'text',
                            key: key,
                            title: key,
                            sortable: false
                        });
                    }
                }
            }
        }
        return schema;
    };
    /**
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.getRows = /**
     * @return {?}
     */
    function () {
        return this._rows;
    };
    /**
     * @param {?} rows
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.setRows = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        this._rows = rows || [];
        this.sort();
        this.rowsChanged.next(this._rows);
    };
    /**
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.getColumns = /**
     * @return {?}
     */
    function () {
        return this._columns;
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.setColumns = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        this._columns = columns || [];
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.getValue = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        if (!row) {
            throw new Error('Row not found');
        }
        if (!col) {
            throw new Error('Column not found');
        }
        /** @type {?} */
        var value = row.getValue(col.key);
        if (col.type === 'icon') {
            /** @type {?} */
            var icon = row.getValue(col.key);
            return icon;
        }
        return value;
    };
    /**
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.getSorting = /**
     * @return {?}
     */
    function () {
        return this._sorting;
    };
    /**
     * @param {?} sorting
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.setSorting = /**
     * @param {?} sorting
     * @return {?}
     */
    function (sorting) {
        this._sorting = sorting;
        if (sorting && sorting.key) {
            this._rows.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                /** @type {?} */
                var left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                var right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right)
                    : right.localeCompare(left);
            }));
        }
    };
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    ObjectDataTableAdapter.prototype.sort = /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    function (key, direction) {
        /** @type {?} */
        var sorting = this._sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    };
    return ObjectDataTableAdapter;
}());
// Simple implementation of the DataTableAdapter interface.
export { ObjectDataTableAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjectDataTableAdapter.prototype._sorting;
    /**
     * @type {?}
     * @private
     */
    ObjectDataTableAdapter.prototype._rows;
    /**
     * @type {?}
     * @private
     */
    ObjectDataTableAdapter.prototype._columns;
    /** @type {?} */
    ObjectDataTableAdapter.prototype.selectedRow;
    /** @type {?} */
    ObjectDataTableAdapter.prototype.rowsChanged;
}
//# sourceMappingURL=data:application/json;base64,