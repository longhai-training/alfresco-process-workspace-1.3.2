/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { AlfrescoApiService } from '../../../services/alfresco-api.service';
import { BehaviorSubject } from 'rxjs';
var DataTableCellComponent = /** @class */ (function () {
    function DataTableCellComponent(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.value$ = new BehaviorSubject('');
    }
    /**
     * @return {?}
     */
    DataTableCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateValue();
        this.sub = this.alfrescoApiService.nodeUpdated.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (_this.row) {
                if (_this.row['node'].entry.id === node.id) {
                    _this.row['node'].entry = node;
                    _this.row['cache'][_this.column.key] = _this.column.key.split('.').reduce((/**
                     * @param {?} source
                     * @param {?} key
                     * @return {?}
                     */
                    function (source, key) { return source[key]; }), node);
                    _this.updateValue();
                }
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    DataTableCellComponent.prototype.updateValue = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.column && this.column.key && this.row && this.data) {
            /** @type {?} */
            var value = this.data.getValue(this.row, this.column);
            this.value$.next(value);
            if (!this.tooltip) {
                this.tooltip = value;
            }
        }
    };
    /**
     * @return {?}
     */
    DataTableCellComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.sub) {
            this.sub.unsubscribe();
            this.sub = null;
        }
    };
    DataTableCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-datatable-cell',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n        <ng-container>\n            <span *ngIf=\"copyContent; else defaultCell\"\n                adf-clipboard=\"CLIPBOARD.CLICK_TO_COPY\"\n                [clipboard-notification]=\"'CLIPBOARD.SUCCESS_COPY'\"\n                [attr.aria-label]=\"value$ | async\"\n                [title]=\"tooltip\"\n                class=\"adf-datatable-cell-value\"\n                >{{ value$ | async }}</span>\n        </ng-container>\n        <ng-template #defaultCell>\n            <span\n                [attr.aria-label]=\"value$ | async\"\n                [title]=\"tooltip\"\n                class=\"adf-datatable-cell-value\"\n            >{{ value$ | async }}</span>\n        </ng-template>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-datatable-content-cell' }
                }] }
    ];
    /** @nocollapse */
    DataTableCellComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    DataTableCellComponent.propDecorators = {
        data: [{ type: Input }],
        column: [{ type: Input }],
        row: [{ type: Input }],
        copyContent: [{ type: Input }],
        tooltip: [{ type: Input }]
    };
    return DataTableCellComponent;
}());
export { DataTableCellComponent };
if (false) {
    /**
     * Data table adapter instance.
     * @type {?}
     */
    DataTableCellComponent.prototype.data;
    /**
     * Data that defines the column.
     * @type {?}
     */
    DataTableCellComponent.prototype.column;
    /**
     * Data that defines the row.
     * @type {?}
     */
    DataTableCellComponent.prototype.row;
    /** @type {?} */
    DataTableCellComponent.prototype.value$;
    /**
     * Enables/disables a Clipboard directive to allow copying of the cell's content.
     * @type {?}
     */
    DataTableCellComponent.prototype.copyContent;
    /**
     * Text for the cell's tooltip.
     * @type {?}
     */
    DataTableCellComponent.prototype.tooltip;
    /**
     * @type {?}
     * @private
     */
    DataTableCellComponent.prototype.sub;
    /**
     * @type {?}
     * @protected
     */
    DataTableCellComponent.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLWNlbGwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiZGF0YXRhYmxlL2NvbXBvbmVudHMvZGF0YXRhYmxlL2RhdGF0YWJsZS1jZWxsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxLQUFLLEVBRUwsaUJBQWlCLEVBRXBCLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzVFLE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3JEO0lBaURJLGdDQUFzQixrQkFBc0M7UUFBdEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVo1RCxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQU0sRUFBRSxDQUFDLENBQUM7SUFZeUIsQ0FBQzs7OztJQUVoRSx5Q0FBUTs7O0lBQVI7UUFBQSxpQkFXQztRQVZHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBVTtZQUNoRSxJQUFJLEtBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxLQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsRUFBRTtvQkFDdkMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO29CQUM5QixLQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O29CQUFDLFVBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBWCxDQUFXLEdBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzNHLEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDdEI7YUFDSjtRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFUyw0Q0FBVzs7OztJQUFyQjtRQUNJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7O2dCQUNuRCxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRXZELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2FBQ3hCO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsNENBQVc7OztJQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNuQjtJQUNMLENBQUM7O2dCQWpGSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRSwyckJBaUJUO29CQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUU7aUJBQ2hEOzs7O2dCQTNCUSxrQkFBa0I7Ozt1QkE4QnRCLEtBQUs7eUJBSUwsS0FBSztzQkFJTCxLQUFLOzhCQU1MLEtBQUs7MEJBSUwsS0FBSzs7SUFzQ1YsNkJBQUM7Q0FBQSxBQWxGRCxJQWtGQztTQTFEWSxzQkFBc0I7Ozs7OztJQUUvQixzQ0FDdUI7Ozs7O0lBR3ZCLHdDQUNtQjs7Ozs7SUFHbkIscUNBQ2E7O0lBRWIsd0NBQXNDOzs7OztJQUd0Qyw2Q0FDcUI7Ozs7O0lBR3JCLHlDQUNnQjs7Ozs7SUFFaEIscUNBQTBCOzs7OztJQUVkLG9EQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhQ29sdW1uIH0gZnJvbSAnLi4vLi4vZGF0YS9kYXRhLWNvbHVtbi5tb2RlbCc7XG5pbXBvcnQgeyBEYXRhUm93IH0gZnJvbSAnLi4vLi4vZGF0YS9kYXRhLXJvdy5tb2RlbCc7XG5pbXBvcnQgeyBEYXRhVGFibGVBZGFwdGVyIH0gZnJvbSAnLi4vLi4vZGF0YS9kYXRhdGFibGUtYWRhcHRlcic7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9hbGZyZXNjby1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1kYXRhdGFibGUtY2VsbCcsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPG5nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwiY29weUNvbnRlbnQ7IGVsc2UgZGVmYXVsdENlbGxcIlxuICAgICAgICAgICAgICAgIGFkZi1jbGlwYm9hcmQ9XCJDTElQQk9BUkQuQ0xJQ0tfVE9fQ09QWVwiXG4gICAgICAgICAgICAgICAgW2NsaXBib2FyZC1ub3RpZmljYXRpb25dPVwiJ0NMSVBCT0FSRC5TVUNDRVNTX0NPUFknXCJcbiAgICAgICAgICAgICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cInZhbHVlJCB8IGFzeW5jXCJcbiAgICAgICAgICAgICAgICBbdGl0bGVdPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJhZGYtZGF0YXRhYmxlLWNlbGwtdmFsdWVcIlxuICAgICAgICAgICAgICAgID57eyB2YWx1ZSQgfCBhc3luYyB9fTwvc3Bhbj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdENlbGw+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwidmFsdWUkIHwgYXN5bmNcIlxuICAgICAgICAgICAgICAgIFt0aXRsZV09XCJ0b29sdGlwXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImFkZi1kYXRhdGFibGUtY2VsbC12YWx1ZVwiXG4gICAgICAgICAgICA+e3sgdmFsdWUkIHwgYXN5bmMgfX08L3NwYW4+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgYCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtZGF0YXRhYmxlLWNvbnRlbnQtY2VsbCcgfVxufSlcbmV4cG9ydCBjbGFzcyBEYXRhVGFibGVDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIC8qKiBEYXRhIHRhYmxlIGFkYXB0ZXIgaW5zdGFuY2UuICovXG4gICAgQElucHV0KClcbiAgICBkYXRhOiBEYXRhVGFibGVBZGFwdGVyO1xuXG4gICAgLyoqIERhdGEgdGhhdCBkZWZpbmVzIHRoZSBjb2x1bW4uICovXG4gICAgQElucHV0KClcbiAgICBjb2x1bW46IERhdGFDb2x1bW47XG5cbiAgICAvKiogRGF0YSB0aGF0IGRlZmluZXMgdGhlIHJvdy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHJvdzogRGF0YVJvdztcblxuICAgIHZhbHVlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55PignJyk7XG5cbiAgICAvKiogRW5hYmxlcy9kaXNhYmxlcyBhIENsaXBib2FyZCBkaXJlY3RpdmUgdG8gYWxsb3cgY29weWluZyBvZiB0aGUgY2VsbCdzIGNvbnRlbnQuICovXG4gICAgQElucHV0KClcbiAgICBjb3B5Q29udGVudDogYm9vbGVhbjtcblxuICAgIC8qKiBUZXh0IGZvciB0aGUgY2VsbCdzIHRvb2x0aXAuICovXG4gICAgQElucHV0KClcbiAgICB0b29sdGlwOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHN1YjogU3Vic2NyaXB0aW9uO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICAgICAgdGhpcy5zdWIgPSB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5ub2RlVXBkYXRlZC5zdWJzY3JpYmUoKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvdykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvd1snbm9kZSddLmVudHJ5LmlkID09PSBub2RlLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93Wydub2RlJ10uZW50cnkgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd1snY2FjaGUnXVt0aGlzLmNvbHVtbi5rZXldID0gdGhpcy5jb2x1bW4ua2V5LnNwbGl0KCcuJykucmVkdWNlKChzb3VyY2UsIGtleSkgPT4gc291cmNlW2tleV0sIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlVmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbiAmJiB0aGlzLmNvbHVtbi5rZXkgJiYgdGhpcy5yb3cgJiYgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YS5nZXRWYWx1ZSh0aGlzLnJvdywgdGhpcy5jb2x1bW4pO1xuXG4gICAgICAgICAgICB0aGlzLnZhbHVlJC5uZXh0KHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXAgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWIpIHtcbiAgICAgICAgICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnN1YiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=