/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Location } from '@angular/common';
import { Component, ContentChild, EventEmitter, HostListener, ElementRef, Input, Output, TemplateRef, ViewEncapsulation } from '@angular/core';
import { BaseEvent } from '../../events';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { PreviousRouteService } from '../../services/previous-route.service';
import { ViewerMoreActionsComponent } from './viewer-more-actions.component';
import { ViewerOpenWithComponent } from './viewer-open-with.component';
import { ViewerSidebarComponent } from './viewer-sidebar.component';
import { ViewerToolbarComponent } from './viewer-toolbar.component';
import { ViewUtilService } from '../services/view-util.service';
import { AppExtensionService } from '@alfresco/adf-extensions';
import { Router } from '@angular/router';
var ViewerComponent = /** @class */ (function () {
    function ViewerComponent(apiService, viewUtils, logService, location, extensionService, el, router, previousRouteService) {
        this.apiService = apiService;
        this.viewUtils = viewUtils;
        this.logService = logService;
        this.location = location;
        this.extensionService = extensionService;
        this.el = el;
        this.router = router;
        this.previousRouteService = previousRouteService;
        /**
         * If you want to load an external file that does not come from ACS you
         * can use this URL to specify where to load the file from.
         */
        this.urlFile = '';
        /**
         * Viewer to use with the `urlFile` address (`pdf`, `image`, `media`, `text`).
         * Used when `urlFile` has no filename and extension.
         */
        this.urlFileViewer = null;
        /**
         * Node Id of the file to load.
         */
        this.nodeId = null;
        /**
         * Shared link id (to display shared file).
         */
        this.sharedLinkId = null;
        /**
         * If `true` then show the Viewer as a full page over the current content.
         * Otherwise fit inside the parent div.
         */
        this.overlayMode = false;
        /**
         * Hide or show the viewer
         */
        this.showViewer = true;
        /**
         * Hide or show the toolbar
         */
        this.showToolbar = true;
        /**
         * Allows `back` navigation
         */
        this.allowGoBack = true;
        /**
         * Toggles downloading.
         */
        this.allowDownload = true;
        /**
         * Toggles printing.
         */
        this.allowPrint = false;
        /**
         * Toggles the 'Full Screen' feature.
         */
        this.allowFullScreen = true;
        /**
         * Toggles before/next navigation. You can use the arrow buttons to navigate
         * between documents in the collection.
         */
        this.allowNavigate = false;
        /**
         * Toggles the "before" ("<") button. Requires `allowNavigate` to be enabled.
         */
        this.canNavigateBefore = true;
        /**
         * Toggles the next (">") button. Requires `allowNavigate` to be enabled.
         */
        this.canNavigateNext = true;
        /**
         * Allow the left the sidebar.
         */
        this.allowLeftSidebar = false;
        /**
         * Allow the right sidebar.
         */
        this.allowRightSidebar = false;
        /**
         * Toggles PDF thumbnails.
         */
        this.allowThumbnails = true;
        /**
         * Toggles right sidebar visibility. Requires `allowRightSidebar` to be set to `true`.
         */
        this.showRightSidebar = false;
        /**
         * Toggles left sidebar visibility. Requires `allowLeftSidebar` to be set to `true`.
         */
        this.showLeftSidebar = false;
        /**
         * The template for the right sidebar. The template context contains the loaded node data.
         */
        this.sidebarRightTemplate = null;
        /**
         * The template for the left sidebar. The template context contains the loaded node data.
         */
        this.sidebarLeftTemplate = null;
        /**
         * The template for the pdf thumbnails.
         */
        this.thumbnailsTemplate = null;
        /**
         * Number of times the Viewer will retry fetching content Rendition.
         * There is a delay of at least one second between attempts.
         */
        this.maxRetries = 10;
        /**
         * Emitted when user clicks the 'Back' button.
         */
        this.goBack = new EventEmitter();
        /**
         * Emitted when user clicks the 'Print' button.
         */
        this.print = new EventEmitter();
        /**
         * Emitted when the viewer is shown or hidden.
         */
        this.showViewerChange = new EventEmitter();
        /**
         * Emitted when the filename extension changes.
         */
        this.extensionChange = new EventEmitter();
        /**
         * Emitted when user clicks 'Navigate Before' ("<") button.
         */
        this.navigateBefore = new EventEmitter();
        /**
         * Emitted when user clicks 'Navigate Next' (">") button.
         */
        this.navigateNext = new EventEmitter();
        /**
         * Emitted when the shared link used is not valid.
         */
        this.invalidSharedLink = new EventEmitter();
        this.viewerType = 'unknown';
        this.isLoading = false;
        this.extensionTemplates = [];
        this.externalExtensions = [];
        this.sidebarRightTemplateContext = { node: null };
        this.sidebarLeftTemplateContext = { node: null };
        this.viewerExtensions = [];
        this.subscriptions = [];
        // Extensions that are supported by the Viewer without conversion
        this.extensions = {
            image: ['png', 'jpg', 'jpeg', 'gif', 'bpm', 'svg'],
            media: ['wav', 'mp4', 'mp3', 'webm', 'ogg'],
            text: ['txt', 'xml', 'html', 'json', 'ts', 'css', 'md'],
            pdf: ['pdf']
        };
        // Mime types that are supported by the Viewer without conversion
        this.mimeTypes = {
            text: ['text/plain', 'text/csv', 'text/xml', 'text/html', 'application/x-javascript'],
            pdf: ['application/pdf'],
            image: ['image/png', 'image/jpeg', 'image/gif', 'image/bmp', 'image/svg+xml'],
            media: ['video/mp4', 'video/webm', 'video/ogg', 'audio/mpeg', 'audio/ogg', 'audio/wav']
        };
    }
    /**
     * @return {?}
     */
    ViewerComponent.prototype.isSourceDefined = /**
     * @return {?}
     */
    function () {
        return (this.urlFile || this.blobFile || this.nodeId || this.sharedLinkId) ? true : false;
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.apiService.nodeUpdated.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return _this.onNodeUpdated(node); })));
        this.loadExtensions();
    };
    /**
     * @private
     * @return {?}
     */
    ViewerComponent.prototype.loadExtensions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.viewerExtensions = this.extensionService.getViewerExtensions();
        this.viewerExtensions
            .forEach((/**
         * @param {?} extension
         * @return {?}
         */
        function (extension) {
            _this.externalExtensions.push(extension.fileExtension);
        }));
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    ViewerComponent.prototype.onNodeUpdated = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.id === this.nodeId) {
            this.generateCacheBusterNumber();
            this.isLoading = true;
            this.setUpNodeFile(node).then((/**
             * @return {?}
             */
            function () {
                _this.isLoading = false;
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ViewerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.showViewer) {
            if (!this.isSourceDefined()) {
                throw new Error('A content source attribute value is missing.');
            }
            this.isLoading = true;
            if (this.blobFile) {
                this.setUpBlobData();
                this.isLoading = false;
            }
            else if (this.urlFile) {
                this.setUpUrlFile();
                this.isLoading = false;
            }
            else if (this.nodeId) {
                this.apiService.nodesApi.getNode(this.nodeId, { include: ['allowableOperations'] }).then((/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) {
                    _this.nodeEntry = node;
                    _this.setUpNodeFile(node.entry).then((/**
                     * @return {?}
                     */
                    function () {
                        _this.isLoading = false;
                    }));
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.isLoading = false;
                    _this.logService.error('This node does not exist');
                }));
            }
            else if (this.sharedLinkId) {
                this.allowGoBack = false;
                this.apiService.sharedLinksApi.getSharedLink(this.sharedLinkId).then((/**
                 * @param {?} sharedLinkEntry
                 * @return {?}
                 */
                function (sharedLinkEntry) {
                    _this.setUpSharedLinkFile(sharedLinkEntry);
                    _this.isLoading = false;
                }), (/**
                 * @return {?}
                 */
                function () {
                    _this.isLoading = false;
                    _this.logService.error('This sharedLink does not exist');
                    _this.invalidSharedLink.next();
                }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ViewerComponent.prototype.setUpBlobData = /**
     * @private
     * @return {?}
     */
    function () {
        this.fileTitle = this.getDisplayName('Unknown');
        this.mimeType = this.blobFile.type;
        this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
        this.allowDownload = false;
        // TODO: wrap blob into the data url and allow downloading
        this.extensionChange.emit(this.mimeType);
        this.scrollTop();
    };
    /**
     * @private
     * @return {?}
     */
    ViewerComponent.prototype.setUpUrlFile = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filenameFromUrl = this.getFilenameFromUrl(this.urlFile);
        this.fileTitle = this.getDisplayName(filenameFromUrl);
        this.extension = this.getFileExtension(filenameFromUrl);
        this.urlFileContent = this.urlFile;
        this.fileName = this.displayName;
        this.viewerType = this.urlFileViewer || this.getViewerTypeByExtension(this.extension);
        if (this.viewerType === 'unknown') {
            this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
        }
        this.extensionChange.emit(this.extension);
        this.scrollTop();
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    ViewerComponent.prototype.setUpNodeFile = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var setupNode;
            return tslib_1.__generator(this, function (_a) {
                if (data.content) {
                    this.mimeType = data.content.mimeType;
                }
                this.fileTitle = this.getDisplayName(data.name);
                this.urlFileContent = this.apiService.contentApi.getContentUrl(data.id);
                this.urlFileContent = this.cacheBusterNumber ? this.urlFileContent + '&' + this.cacheBusterNumber : this.urlFileContent;
                this.extension = this.getFileExtension(data.name);
                this.fileName = data.name;
                this.viewerType = this.getViewerTypeByExtension(this.extension);
                if (this.viewerType === 'unknown') {
                    this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
                }
                if (this.viewerType === 'unknown') {
                    setupNode = this.displayNodeRendition(data.id);
                }
                this.extensionChange.emit(this.extension);
                this.sidebarRightTemplateContext.node = data;
                this.sidebarLeftTemplateContext.node = data;
                this.scrollTop();
                return [2 /*return*/, setupNode];
            });
        });
    };
    /**
     * @private
     * @param {?} details
     * @return {?}
     */
    ViewerComponent.prototype.setUpSharedLinkFile = /**
     * @private
     * @param {?} details
     * @return {?}
     */
    function (details) {
        this.mimeType = details.entry.content.mimeType;
        this.fileTitle = this.getDisplayName(details.entry.name);
        this.extension = this.getFileExtension(details.entry.name);
        this.fileName = details.entry.name;
        this.urlFileContent = this.apiService.contentApi.getSharedLinkContentUrl(this.sharedLinkId, false);
        this.viewerType = this.getViewerTypeByMimeType(this.mimeType);
        if (this.viewerType === 'unknown') {
            this.viewerType = this.getViewerTypeByExtension(this.extension);
        }
        if (this.viewerType === 'unknown') {
            this.displaySharedLinkRendition(this.sharedLinkId);
        }
        this.extensionChange.emit(this.extension);
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.toggleSidebar = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.showRightSidebar = !this.showRightSidebar;
        if (this.showRightSidebar && this.nodeId) {
            this.apiService.getInstance().nodes.getNode(this.nodeId, { include: ['allowableOperations'] })
                .then((/**
             * @param {?} nodeEntry
             * @return {?}
             */
            function (nodeEntry) {
                _this.sidebarRightTemplateContext.node = nodeEntry.entry;
            }));
        }
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.toggleLeftSidebar = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.showLeftSidebar = !this.showLeftSidebar;
        if (this.showRightSidebar && this.nodeId) {
            this.apiService.getInstance().nodes.getNode(this.nodeId, { include: ['allowableOperations'] })
                .then((/**
             * @param {?} nodeEntry
             * @return {?}
             */
            function (nodeEntry) {
                _this.sidebarLeftTemplateContext.node = nodeEntry.entry;
            }));
        }
    };
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    ViewerComponent.prototype.getDisplayName = /**
     * @private
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.displayName || name;
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.scrollTop = /**
     * @return {?}
     */
    function () {
        window.scrollTo(0, 1);
    };
    /**
     * @param {?} mimeType
     * @return {?}
     */
    ViewerComponent.prototype.getViewerTypeByMimeType = /**
     * @param {?} mimeType
     * @return {?}
     */
    function (mimeType) {
        var e_1, _a;
        if (mimeType) {
            mimeType = mimeType.toLowerCase();
            /** @type {?} */
            var editorTypes = Object.keys(this.mimeTypes);
            try {
                for (var editorTypes_1 = tslib_1.__values(editorTypes), editorTypes_1_1 = editorTypes_1.next(); !editorTypes_1_1.done; editorTypes_1_1 = editorTypes_1.next()) {
                    var type = editorTypes_1_1.value;
                    if (this.mimeTypes[type].indexOf(mimeType) >= 0) {
                        return type;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (editorTypes_1_1 && !editorTypes_1_1.done && (_a = editorTypes_1.return)) _a.call(editorTypes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return 'unknown';
    };
    /**
     * @param {?} extension
     * @return {?}
     */
    ViewerComponent.prototype.getViewerTypeByExtension = /**
     * @param {?} extension
     * @return {?}
     */
    function (extension) {
        if (extension) {
            extension = extension.toLowerCase();
        }
        if (this.isCustomViewerExtension(extension)) {
            return 'custom';
        }
        if (this.extensions.image.indexOf(extension) >= 0) {
            return 'image';
        }
        if (this.extensions.media.indexOf(extension) >= 0) {
            return 'media';
        }
        if (this.extensions.text.indexOf(extension) >= 0) {
            return 'text';
        }
        if (this.extensions.pdf.indexOf(extension) >= 0) {
            return 'pdf';
        }
        return 'unknown';
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.onBackButtonClick = /**
     * @return {?}
     */
    function () {
        if (this.overlayMode) {
            this.close();
        }
        else {
            /** @type {?} */
            var event_1 = new BaseEvent();
            this.goBack.next(event_1);
            if (!event_1.defaultPrevented) {
                /** @type {?} */
                var previousUrl = this.previousRouteService.getPreviousUrl();
                if (previousUrl && previousUrl.includes('login') || window.history.length <= 2) {
                    this.router.navigate([{ outlets: { overlay: null, primary: ['home'] } }]);
                }
                else {
                    this.location.back();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.onNavigateBeforeClick = /**
     * @return {?}
     */
    function () {
        this.navigateBefore.next();
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.onNavigateNextClick = /**
     * @return {?}
     */
    function () {
        this.navigateNext.next();
    };
    /**
     * close the viewer
     */
    /**
     * close the viewer
     * @return {?}
     */
    ViewerComponent.prototype.close = /**
     * close the viewer
     * @return {?}
     */
    function () {
        if (this.otherMenu) {
            this.otherMenu.hidden = false;
        }
        this.showViewer = false;
        this.showViewerChange.emit(this.showViewer);
    };
    /**
     * get File name from url
     *
     * @param  url - url file
     */
    /**
     * get File name from url
     *
     * @param {?} url - url file
     * @return {?}
     */
    ViewerComponent.prototype.getFilenameFromUrl = /**
     * get File name from url
     *
     * @param {?} url - url file
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var anchor = url.indexOf('#');
        /** @type {?} */
        var query = url.indexOf('?');
        /** @type {?} */
        var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
        return url.substring(url.lastIndexOf('/', end) + 1, end);
    };
    /**
     * Get file extension from the string.
     * Supports the URL formats like:
     * http://localhost/test.jpg?cache=1000
     * http://localhost/test.jpg#cache=1000
     *
     * @param fileName - file name
     */
    /**
     * Get file extension from the string.
     * Supports the URL formats like:
     * http://localhost/test.jpg?cache=1000
     * http://localhost/test.jpg#cache=1000
     *
     * @param {?} fileName - file name
     * @return {?}
     */
    ViewerComponent.prototype.getFileExtension = /**
     * Get file extension from the string.
     * Supports the URL formats like:
     * http://localhost/test.jpg?cache=1000
     * http://localhost/test.jpg#cache=1000
     *
     * @param {?} fileName - file name
     * @return {?}
     */
    function (fileName) {
        if (fileName) {
            /** @type {?} */
            var match = fileName.match(/\.([^\./\?\#]+)($|\?|\#)/);
            return match ? match[1] : null;
        }
        return null;
    };
    /**
     * @param {?} extension
     * @return {?}
     */
    ViewerComponent.prototype.isCustomViewerExtension = /**
     * @param {?} extension
     * @return {?}
     */
    function (extension) {
        /** @type {?} */
        var extensions = this.externalExtensions || [];
        if (extension && extensions.length > 0) {
            extension = extension.toLowerCase();
            return extensions.flat().indexOf(extension) >= 0;
        }
        return false;
    };
    /**
     * Keyboard event listener
     * @param  event
     */
    /**
     * Keyboard event listener
     * @param {?} event
     * @return {?}
     */
    ViewerComponent.prototype.handleKeyboardEvent = /**
     * Keyboard event listener
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode;
        // Esc
        if (key === 27 && this.overlayMode) { // esc
            this.close();
        }
        // Left arrow
        if (key === 37 && this.canNavigateBefore) {
            event.preventDefault();
            this.onNavigateBeforeClick();
        }
        // Right arrow
        if (key === 39 && this.canNavigateNext) {
            event.preventDefault();
            this.onNavigateNextClick();
        }
        // Ctrl+F
        if (key === 70 && event.ctrlKey) {
            event.preventDefault();
            this.enterFullScreen();
        }
    };
    /**
     * @return {?}
     */
    ViewerComponent.prototype.printContent = /**
     * @return {?}
     */
    function () {
        if (this.allowPrint) {
            /** @type {?} */
            var args = new BaseEvent();
            this.print.next(args);
            if (!args.defaultPrevented) {
                this.viewUtils.printFileGeneric(this.nodeId, this.mimeType);
            }
        }
    };
    /**
     * Triggers full screen mode with a main content area displayed.
     */
    /**
     * Triggers full screen mode with a main content area displayed.
     * @return {?}
     */
    ViewerComponent.prototype.enterFullScreen = /**
     * Triggers full screen mode with a main content area displayed.
     * @return {?}
     */
    function () {
        if (this.allowFullScreen) {
            /** @type {?} */
            var container = this.el.nativeElement.querySelector('.adf-viewer__fullscreen-container');
            if (container) {
                if (container.requestFullscreen) {
                    container.requestFullscreen();
                }
                else if (container.webkitRequestFullscreen) {
                    container.webkitRequestFullscreen();
                }
                else if (container.mozRequestFullScreen) {
                    container.mozRequestFullScreen();
                }
                else if (container.msRequestFullscreen) {
                    container.msRequestFullscreen();
                }
            }
        }
    };
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    ViewerComponent.prototype.displayNodeRendition = /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rendition, renditionId, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.resolveRendition(nodeId, 'pdf')];
                    case 1:
                        rendition = _a.sent();
                        if (rendition) {
                            renditionId = rendition.entry.id;
                            if (renditionId === 'pdf') {
                                this.viewerType = 'pdf';
                            }
                            else if (renditionId === 'imgpreview') {
                                this.viewerType = 'image';
                            }
                            this.urlFileContent = this.apiService.contentApi.getRenditionUrl(nodeId, renditionId);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        this.logService.error(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} sharedId
     * @return {?}
     */
    ViewerComponent.prototype.displaySharedLinkRendition = /**
     * @private
     * @param {?} sharedId
     * @return {?}
     */
    function (sharedId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rendition, error_1, rendition, error_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, this.apiService.renditionsApi.getSharedLinkRendition(sharedId, 'pdf')];
                    case 1:
                        rendition = _a.sent();
                        if (rendition.entry.status.toString() === 'CREATED') {
                            this.viewerType = 'pdf';
                            this.urlFileContent = this.apiService.contentApi.getSharedLinkRenditionUrl(sharedId, 'pdf');
                        }
                        return [3 /*break*/, 7];
                    case 2:
                        error_1 = _a.sent();
                        this.logService.error(error_1);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.apiService.renditionsApi.getSharedLinkRendition(sharedId, 'imgpreview')];
                    case 4:
                        rendition = _a.sent();
                        if (rendition.entry.status.toString() === 'CREATED') {
                            this.viewerType = 'image';
                            this.urlFileContent = this.apiService.contentApi.getSharedLinkRenditionUrl(sharedId, 'imgpreview');
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        error_2 = _a.sent();
                        this.logService.error(error_2);
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} nodeId
     * @param {?} renditionId
     * @return {?}
     */
    ViewerComponent.prototype.resolveRendition = /**
     * @private
     * @param {?} nodeId
     * @param {?} renditionId
     * @return {?}
     */
    function (nodeId, renditionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var supportedRendition, rendition, status_1, err_2;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        renditionId = renditionId.toLowerCase();
                        return [4 /*yield*/, this.apiService.renditionsApi.getRenditions(nodeId)];
                    case 1:
                        supportedRendition = _a.sent();
                        rendition = supportedRendition.list.entries.find((/**
                         * @param {?} renditionEntry
                         * @return {?}
                         */
                        function (renditionEntry) { return renditionEntry.entry.id.toLowerCase() === renditionId; }));
                        if (!rendition) {
                            renditionId = 'imgpreview';
                            rendition = supportedRendition.list.entries.find((/**
                             * @param {?} renditionEntry
                             * @return {?}
                             */
                            function (renditionEntry) { return renditionEntry.entry.id.toLowerCase() === renditionId; }));
                        }
                        if (!rendition) return [3 /*break*/, 6];
                        status_1 = rendition.entry.status.toString();
                        if (!(status_1 === 'NOT_CREATED')) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, this.apiService.renditionsApi.createRendition(nodeId, { id: renditionId }).then((/**
                             * @return {?}
                             */
                            function () {
                                _this.viewerType = 'in_creation';
                            }))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.waitRendition(nodeId, renditionId)];
                    case 4:
                        rendition = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_2 = _a.sent();
                        this.logService.error(err_2);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, rendition];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} nodeId
     * @param {?} renditionId
     * @return {?}
     */
    ViewerComponent.prototype.waitRendition = /**
     * @private
     * @param {?} nodeId
     * @param {?} renditionId
     * @return {?}
     */
    function (nodeId, renditionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentRetry;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                currentRetry = 0;
                return [2 /*return*/, new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        /** @type {?} */
                        var intervalId = setInterval((/**
                         * @return {?}
                         */
                        function () {
                            currentRetry++;
                            if (_this.maxRetries >= currentRetry) {
                                _this.apiService.renditionsApi.getRendition(nodeId, renditionId).then((/**
                                 * @param {?} rendition
                                 * @return {?}
                                 */
                                function (rendition) {
                                    /** @type {?} */
                                    var status = rendition.entry.status.toString();
                                    if (status === 'CREATED') {
                                        if (renditionId === 'pdf') {
                                            _this.viewerType = 'pdf';
                                        }
                                        else if (renditionId === 'imgpreview') {
                                            _this.viewerType = 'image';
                                        }
                                        _this.urlFileContent = _this.apiService.contentApi.getRenditionUrl(nodeId, renditionId);
                                        clearInterval(intervalId);
                                        return resolve(rendition);
                                    }
                                }), (/**
                                 * @return {?}
                                 */
                                function () {
                                    _this.viewerType = 'error_in_creation';
                                    return reject();
                                }));
                            }
                        }), 1000);
                    }))];
            });
        });
    };
    /**
     * @param {?} extensionAllowed
     * @return {?}
     */
    ViewerComponent.prototype.checkExtensions = /**
     * @param {?} extensionAllowed
     * @return {?}
     */
    function (extensionAllowed) {
        var _this = this;
        if (typeof extensionAllowed === 'string') {
            return this.extension.toLowerCase() === extensionAllowed.toLowerCase();
        }
        else if (extensionAllowed.length > 0) {
            return extensionAllowed.find((/**
             * @param {?} currentExtension
             * @return {?}
             */
            function (currentExtension) {
                return _this.extension.toLowerCase() === currentExtension.toLowerCase();
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    ViewerComponent.prototype.generateCacheBusterNumber = /**
     * @private
     * @return {?}
     */
    function () {
        this.cacheBusterNumber = Date.now();
    };
    ViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-viewer',
                    template: "<div *ngIf=\"showViewer\"\n     class=\"adf-viewer-container\"\n     [class.adf-viewer-overlay-container]=\"overlayMode\"\n     [class.adf-viewer-inline-container]=\"!overlayMode\">\n\n    <div class=\"adf-viewer-content\" fxLayout=\"column\">\n        <ng-content select=\"adf-viewer-toolbar\"></ng-content>\n        <ng-container *ngIf=\"showToolbar && !toolbar\">\n            <adf-toolbar color=\"default\" id=\"adf-viewer-toolbar\" class=\"adf-viewer-toolbar\">\n\n                <adf-toolbar-title>\n\n                    <ng-container *ngIf=\"allowLeftSidebar\">\n                        <button\n                            mat-icon-button\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.INFO' | translate }}\"\n                            data-automation-id=\"adf-toolbar-left-sidebar\"\n                            [color]=\"showLeftSidebar ? 'accent' : 'default'\"\n                            (click)=\"toggleLeftSidebar()\">\n                            <mat-icon>info_outline</mat-icon>\n                        </button>\n                    </ng-container>\n\n                    <button *ngIf=\"allowGoBack\"\n                            class=\"adf-viewer-close-button\"\n                            data-automation-id=\"adf-toolbar-back\"\n                            mat-icon-button\n                            title=\"{{ 'ADF_VIEWER.ACTIONS.CLOSE' | translate }}\"\n                            (click)=\"onBackButtonClick()\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </adf-toolbar-title>\n\n                <div fxFlex=\"1 1 auto\" class=\"adf-viewer__file-title\">\n                    <button\n                        *ngIf=\"allowNavigate && canNavigateBefore\"\n                        data-automation-id=\"adf-toolbar-pref-file\"\n                        mat-icon-button\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.PREV_FILE' | translate }}\"\n                        (click)=\"onNavigateBeforeClick()\">\n                        <mat-icon>navigate_before</mat-icon>\n                    </button>\n                    <img class=\"adf-viewer__mimeicon\" [alt]=\"mimeType | adfMimeTypeIcon\" [src]=\"mimeType | adfMimeTypeIcon\" data-automation-id=\"adf-file-thumbnail\">\n                    <span class=\"adf-viewer__display-name\" id=\"adf-viewer-display-name\">{{ fileTitle }}</span>\n                    <button\n                        *ngIf=\"allowNavigate && canNavigateNext\"\n                        data-automation-id=\"adf-toolbar-next-file\"\n                        mat-icon-button\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.NEXT_FILE' | translate }}\"\n                        (click)=\"onNavigateNextClick()\">\n                        <mat-icon>navigate_next</mat-icon>\n                    </button>\n                </div>\n\n                <ng-content select=\"adf-viewer-toolbar-actions\"></ng-content>\n\n                <ng-container *ngIf=\"mnuOpenWith\" data-automation-id='adf-toolbar-custom-btn'>\n                    <button\n                        id=\"adf-viewer-openwith\"\n                        mat-button\n                        [matMenuTriggerFor]=\"mnuOpenWith\"\n                        data-automation-id=\"adf-toolbar-open-with\">\n                        <span>{{ 'ADF_VIEWER.ACTIONS.OPEN_WITH' | translate }}</span>\n                        <mat-icon>arrow_drop_down</mat-icon>\n                    </button>\n                    <mat-menu #mnuOpenWith=\"matMenu\" [overlapTrigger]=\"false\">\n                        <ng-content select=\"adf-viewer-open-with\"></ng-content>\n                    </mat-menu>\n                </ng-container>\n\n                <adf-toolbar-divider></adf-toolbar-divider>\n\n                <button\n                    id=\"adf-viewer-download\"\n                    *ngIf=\"allowDownload\"\n                    mat-icon-button\n                    title=\"{{ 'ADF_VIEWER.ACTIONS.DOWNLOAD' | translate }}\"\n                    data-automation-id=\"adf-toolbar-download\"\n                    [adfNodeDownload]=\"nodeEntry\">\n                    <mat-icon>file_download</mat-icon>\n                </button>\n\n                <button\n                    id=\"adf-viewer-print\"\n                    *ngIf=\"allowPrint\"\n                    mat-icon-button\n                    title=\"{{ 'ADF_VIEWER.ACTIONS.PRINT' | translate }}\"\n                    data-automation-id=\"adf-toolbar-print\"\n                    (click)=\"printContent()\">\n                    <mat-icon>print</mat-icon>\n                </button>\n\n                <button\n                    id=\"adf-viewer-fullscreen\"\n                    *ngIf=\"viewerType !== 'media' && allowFullScreen\"\n                    mat-icon-button\n                    title=\"{{ 'ADF_VIEWER.ACTIONS.FULLSCREEN' | translate }}\"\n                    data-automation-id=\"adf-toolbar-fullscreen\"\n                    (click)=\"enterFullScreen()\">\n                    <mat-icon>fullscreen</mat-icon>\n                </button>\n\n                <ng-container *ngIf=\"allowRightSidebar\">\n                    <adf-toolbar-divider></adf-toolbar-divider>\n\n                    <button\n                        mat-icon-button\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.INFO' | translate }}\"\n                        data-automation-id=\"adf-toolbar-sidebar\"\n                        [color]=\"showRightSidebar ? 'accent' : 'default'\"\n                        (click)=\"toggleSidebar()\">\n                        <mat-icon>info_outline</mat-icon>\n                    </button>\n\n                </ng-container>\n\n                <ng-container *ngIf=\"mnuMoreActions\">\n                    <button\n                        id=\"adf-viewer-moreactions\"\n                        mat-icon-button\n                        [matMenuTriggerFor]=\"mnuMoreActions\"\n                        title=\"{{ 'ADF_VIEWER.ACTIONS.MORE_ACTIONS' | translate }}\"\n                        data-automation-id=\"adf-toolbar-more-actions\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #mnuMoreActions=\"matMenu\" [overlapTrigger]=\"false\">\n                        <ng-content select=\"adf-viewer-more-actions\"></ng-content>\n                    </mat-menu>\n                </ng-container>\n\n            </adf-toolbar>\n        </ng-container>\n\n        <div fxLayout=\"row\" fxFlex=\"1 1 auto\">\n            <ng-container *ngIf=\"allowRightSidebar && showRightSidebar\">\n                <div class=\"adf-viewer__sidebar\" [ngClass]=\"'adf-viewer__sidebar__right'\" fxFlexOrder=\"4\"  id=\"adf-right-sidebar\" >\n                    <ng-container *ngIf=\"sidebarRightTemplate\">\n                        <ng-container *ngTemplateOutlet=\"sidebarRightTemplate;context:sidebarRightTemplateContext\"></ng-container>\n                    </ng-container>\n                    <ng-content *ngIf=\"!sidebarRightTemplate\" select=\"adf-viewer-sidebar\"></ng-content>\n                </div>\n            </ng-container>\n\n            <ng-container *ngIf=\"allowLeftSidebar && showLeftSidebar\">\n                <div class=\"adf-viewer__sidebar\" [ngClass]=\"'adf-viewer__sidebar__left'\" fxFlexOrder=\"1\"  id=\"adf-left-sidebar\" >\n                    <ng-container *ngIf=\"sidebarLeftTemplate\">\n                        <ng-container *ngTemplateOutlet=\"sidebarLeftTemplate;context:sidebarLeftTemplateContext\"></ng-container>\n                    </ng-container>\n                    <ng-content *ngIf=\"!sidebarLeftTemplate\" select=\"adf-viewer-sidebar\"></ng-content>\n                </div>\n            </ng-container>\n\n            <div  *ngIf=\"isLoading\"  class=\"adf-viewer-main\" fxFlexOrder=\"1\" fxFlex=\"1 1 auto\">\n                <div class=\"adf-viewer-layout-content adf-viewer__fullscreen-container\">\n                    <div class=\"adf-viewer-content-container\">\n                        <ng-container *ngIf=\"isLoading\">\n                            <div class=\"adf-viewer__loading-screen\" fxFlex=\"1 1 auto\">\n                                <h2>{{ 'ADF_VIEWER.LOADING' | translate }}</h2>\n                                <div>\n                                    <mat-spinner></mat-spinner>\n                                </div>\n                            </div>\n                        </ng-container>\n\n                    </div>\n                </div>\n            </div>\n\n            <div  *ngIf=\"!isLoading\"  class=\"adf-viewer-main\" fxFlexOrder=\"1\" fxFlex=\"1 1 auto\">\n                <div class=\"adf-viewer-layout-content adf-viewer__fullscreen-container\">\n                    <div class=\"adf-viewer-content-container\" [ngSwitch]=\"viewerType\">\n\n                        <ng-container *ngSwitchCase=\"'pdf'\">\n                            <adf-pdf-viewer [thumbnailsTemplate]=\"thumbnailsTemplate\" [allowThumbnails]=\"allowThumbnails\" [blobFile]=\"blobFile\" [urlFile]=\"urlFileContent\" [nameFile]=\"displayName\"></adf-pdf-viewer>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'image'\">\n                            <adf-img-viewer [urlFile]=\"urlFileContent\" [nameFile]=\"displayName\" [blobFile]=\"blobFile\"></adf-img-viewer>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'media'\">\n                            <adf-media-player id=\"adf-mdedia-player\" [urlFile]=\"urlFileContent\" [mimeType]=\"mimeType\" [blobFile]=\"blobFile\" [nameFile]=\"displayName\"></adf-media-player>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'text'\">\n                            <adf-txt-viewer [urlFile]=\"urlFileContent\" [blobFile]=\"blobFile\"></adf-txt-viewer>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'in_creation'\">\n                            <div class=\"adf-viewer__loading-screen\" fxFlex=\"1 1 auto\">\n                                <h2>{{ 'ADF_VIEWER.LOADING' | translate }}</h2>\n                                <div>\n                                    <mat-spinner></mat-spinner>\n                                </div>\n                            </div>\n                        </ng-container>\n\n                        <ng-container *ngSwitchCase=\"'custom'\">\n                            <ng-container *ngFor=\"let ext of viewerExtensions\">\n                                <adf-preview-extension\n                                    *ngIf=\"checkExtensions(ext.fileExtension)\"\n                                    [id]=\"ext.component\"\n                                    [node]=\"nodeEntry.entry\"\n                                    [url]=\"urlFileContent\"\n                                    [extension]=\"extension\"\n                                    [attr.data-automation-id]=\"ext.component\">\n                                </adf-preview-extension>\n                            </ng-container>\n\n                            <span class=\"adf-viewer-custom-content\" *ngFor=\"let extensionTemplate of extensionTemplates\">\n                                <ng-template\n                                    *ngIf=\"extensionTemplate.isVisible\"\n                                    [ngTemplateOutlet]=\"extensionTemplate.template\"\n                                    [ngTemplateOutletContext]=\"{ urlFileContent: urlFileContent, extension:extension }\">\n                                </ng-template>\n                            </span>\n                        </ng-container>\n\n                        <ng-container *ngSwitchDefault>\n                            <adf-viewer-unknown-format></adf-viewer-unknown-format>\n                        </ng-container>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n",
                    host: { 'class': 'adf-viewer' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ViewerComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: ViewUtilService },
        { type: LogService },
        { type: Location },
        { type: AppExtensionService },
        { type: ElementRef },
        { type: Router },
        { type: PreviousRouteService }
    ]; };
    ViewerComponent.propDecorators = {
        toolbar: [{ type: ContentChild, args: [ViewerToolbarComponent,] }],
        sidebar: [{ type: ContentChild, args: [ViewerSidebarComponent,] }],
        mnuOpenWith: [{ type: ContentChild, args: [ViewerOpenWithComponent,] }],
        mnuMoreActions: [{ type: ContentChild, args: [ViewerMoreActionsComponent,] }],
        urlFile: [{ type: Input }],
        urlFileViewer: [{ type: Input }],
        blobFile: [{ type: Input }],
        nodeId: [{ type: Input }],
        sharedLinkId: [{ type: Input }],
        overlayMode: [{ type: Input }],
        showViewer: [{ type: Input }],
        showToolbar: [{ type: Input }],
        displayName: [{ type: Input }],
        allowGoBack: [{ type: Input }],
        allowDownload: [{ type: Input }],
        allowPrint: [{ type: Input }],
        allowFullScreen: [{ type: Input }],
        allowNavigate: [{ type: Input }],
        canNavigateBefore: [{ type: Input }],
        canNavigateNext: [{ type: Input }],
        allowLeftSidebar: [{ type: Input }],
        allowRightSidebar: [{ type: Input }],
        allowThumbnails: [{ type: Input }],
        showRightSidebar: [{ type: Input }],
        showLeftSidebar: [{ type: Input }],
        sidebarRightTemplate: [{ type: Input }],
        sidebarLeftTemplate: [{ type: Input }],
        thumbnailsTemplate: [{ type: Input }],
        mimeType: [{ type: Input }],
        fileName: [{ type: Input }],
        maxRetries: [{ type: Input }],
        goBack: [{ type: Output }],
        print: [{ type: Output }],
        showViewerChange: [{ type: Output }],
        extensionChange: [{ type: Output }],
        navigateBefore: [{ type: Output }],
        navigateNext: [{ type: Output }],
        invalidSharedLink: [{ type: Output }],
        handleKeyboardEvent: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
    };
    return ViewerComponent;
}());
export { ViewerComponent };
if (false) {
    /** @type {?} */
    ViewerComponent.prototype.toolbar;
    /** @type {?} */
    ViewerComponent.prototype.sidebar;
    /** @type {?} */
    ViewerComponent.prototype.mnuOpenWith;
    /** @type {?} */
    ViewerComponent.prototype.mnuMoreActions;
    /**
     * If you want to load an external file that does not come from ACS you
     * can use this URL to specify where to load the file from.
     * @type {?}
     */
    ViewerComponent.prototype.urlFile;
    /**
     * Viewer to use with the `urlFile` address (`pdf`, `image`, `media`, `text`).
     * Used when `urlFile` has no filename and extension.
     * @type {?}
     */
    ViewerComponent.prototype.urlFileViewer;
    /**
     * Loads a Blob File
     * @type {?}
     */
    ViewerComponent.prototype.blobFile;
    /**
     * Node Id of the file to load.
     * @type {?}
     */
    ViewerComponent.prototype.nodeId;
    /**
     * Shared link id (to display shared file).
     * @type {?}
     */
    ViewerComponent.prototype.sharedLinkId;
    /**
     * If `true` then show the Viewer as a full page over the current content.
     * Otherwise fit inside the parent div.
     * @type {?}
     */
    ViewerComponent.prototype.overlayMode;
    /**
     * Hide or show the viewer
     * @type {?}
     */
    ViewerComponent.prototype.showViewer;
    /**
     * Hide or show the toolbar
     * @type {?}
     */
    ViewerComponent.prototype.showToolbar;
    /**
     * Specifies the name of the file when it is not available from the URL.
     * @type {?}
     */
    ViewerComponent.prototype.displayName;
    /**
     * Allows `back` navigation
     * @type {?}
     */
    ViewerComponent.prototype.allowGoBack;
    /**
     * Toggles downloading.
     * @type {?}
     */
    ViewerComponent.prototype.allowDownload;
    /**
     * Toggles printing.
     * @type {?}
     */
    ViewerComponent.prototype.allowPrint;
    /**
     * Toggles the 'Full Screen' feature.
     * @type {?}
     */
    ViewerComponent.prototype.allowFullScreen;
    /**
     * Toggles before/next navigation. You can use the arrow buttons to navigate
     * between documents in the collection.
     * @type {?}
     */
    ViewerComponent.prototype.allowNavigate;
    /**
     * Toggles the "before" ("<") button. Requires `allowNavigate` to be enabled.
     * @type {?}
     */
    ViewerComponent.prototype.canNavigateBefore;
    /**
     * Toggles the next (">") button. Requires `allowNavigate` to be enabled.
     * @type {?}
     */
    ViewerComponent.prototype.canNavigateNext;
    /**
     * Allow the left the sidebar.
     * @type {?}
     */
    ViewerComponent.prototype.allowLeftSidebar;
    /**
     * Allow the right sidebar.
     * @type {?}
     */
    ViewerComponent.prototype.allowRightSidebar;
    /**
     * Toggles PDF thumbnails.
     * @type {?}
     */
    ViewerComponent.prototype.allowThumbnails;
    /**
     * Toggles right sidebar visibility. Requires `allowRightSidebar` to be set to `true`.
     * @type {?}
     */
    ViewerComponent.prototype.showRightSidebar;
    /**
     * Toggles left sidebar visibility. Requires `allowLeftSidebar` to be set to `true`.
     * @type {?}
     */
    ViewerComponent.prototype.showLeftSidebar;
    /**
     * The template for the right sidebar. The template context contains the loaded node data.
     * @type {?}
     */
    ViewerComponent.prototype.sidebarRightTemplate;
    /**
     * The template for the left sidebar. The template context contains the loaded node data.
     * @type {?}
     */
    ViewerComponent.prototype.sidebarLeftTemplate;
    /**
     * The template for the pdf thumbnails.
     * @type {?}
     */
    ViewerComponent.prototype.thumbnailsTemplate;
    /**
     * MIME type of the file content (when not determined by the filename extension).
     * @type {?}
     */
    ViewerComponent.prototype.mimeType;
    /**
     * Content filename.
     * @type {?}
     */
    ViewerComponent.prototype.fileName;
    /**
     * Number of times the Viewer will retry fetching content Rendition.
     * There is a delay of at least one second between attempts.
     * @type {?}
     */
    ViewerComponent.prototype.maxRetries;
    /**
     * Emitted when user clicks the 'Back' button.
     * @type {?}
     */
    ViewerComponent.prototype.goBack;
    /**
     * Emitted when user clicks the 'Print' button.
     * @type {?}
     */
    ViewerComponent.prototype.print;
    /**
     * Emitted when the viewer is shown or hidden.
     * @type {?}
     */
    ViewerComponent.prototype.showViewerChange;
    /**
     * Emitted when the filename extension changes.
     * @type {?}
     */
    ViewerComponent.prototype.extensionChange;
    /**
     * Emitted when user clicks 'Navigate Before' ("<") button.
     * @type {?}
     */
    ViewerComponent.prototype.navigateBefore;
    /**
     * Emitted when user clicks 'Navigate Next' (">") button.
     * @type {?}
     */
    ViewerComponent.prototype.navigateNext;
    /**
     * Emitted when the shared link used is not valid.
     * @type {?}
     */
    ViewerComponent.prototype.invalidSharedLink;
    /** @type {?} */
    ViewerComponent.prototype.viewerType;
    /** @type {?} */
    ViewerComponent.prototype.isLoading;
    /** @type {?} */
    ViewerComponent.prototype.nodeEntry;
    /** @type {?} */
    ViewerComponent.prototype.extensionTemplates;
    /** @type {?} */
    ViewerComponent.prototype.externalExtensions;
    /** @type {?} */
    ViewerComponent.prototype.urlFileContent;
    /** @type {?} */
    ViewerComponent.prototype.otherMenu;
    /** @type {?} */
    ViewerComponent.prototype.extension;
    /** @type {?} */
    ViewerComponent.prototype.sidebarRightTemplateContext;
    /** @type {?} */
    ViewerComponent.prototype.sidebarLeftTemplateContext;
    /** @type {?} */
    ViewerComponent.prototype.fileTitle;
    /** @type {?} */
    ViewerComponent.prototype.viewerExtensions;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.cacheBusterNumber;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.extensions;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.mimeTypes;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.viewUtils;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.location;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.extensionService;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ViewerComponent.prototype.previousRouteService;
}
//# sourceMappingURL=data:application/json;base64,