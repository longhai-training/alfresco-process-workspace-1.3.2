/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:adf-license-banner  */
/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
/**
 *
 * RenderingQueueServices rendering of the views for pages and thumbnails.
 *
 */
var RenderingQueueServices = /** @class */ (function () {
    function RenderingQueueServices() {
        this.renderingStates = {
            INITIAL: 0,
            RUNNING: 1,
            PAUSED: 2,
            FINISHED: 3
        };
        this.CLEANUP_TIMEOUT = 30000;
        this.pdfViewer = null;
        this.pdfThumbnailViewer = null;
        this.onIdle = null;
        this.highestPriorityPage = null;
        this.idleTimeout = null;
        this.printing = false;
        this.isThumbnailViewEnabled = false;
    }
    /**
     * @param pdfViewer
     */
    /**
     * @param {?} pdfViewer
     * @return {?}
     */
    RenderingQueueServices.prototype.setViewer = /**
     * @param {?} pdfViewer
     * @return {?}
     */
    function (pdfViewer) {
        this.pdfViewer = pdfViewer;
    };
    /**
     * @param pdfThumbnailViewer
     */
    /**
     * @param {?} pdfThumbnailViewer
     * @return {?}
     */
    RenderingQueueServices.prototype.setThumbnailViewer = /**
     * @param {?} pdfThumbnailViewer
     * @return {?}
     */
    function (pdfThumbnailViewer) {
        this.pdfThumbnailViewer = pdfThumbnailViewer;
    };
    /**
     * @param  view
     */
    /**
     * @param {?} view
     * @return {?}
     */
    RenderingQueueServices.prototype.isHighestPriority = /**
     * @param {?} view
     * @return {?}
     */
    function (view) {
        return this.highestPriorityPage === view.renderingId;
    };
    /**
     * @param {?} currentlyVisiblePages
     * @return {?}
     */
    RenderingQueueServices.prototype.renderHighestPriority = /**
     * @param {?} currentlyVisiblePages
     * @return {?}
     */
    function (currentlyVisiblePages) {
        if (this.idleTimeout) {
            clearTimeout(this.idleTimeout);
            this.idleTimeout = null;
        }
        // Pages have a higher priority than thumbnails, so check them first.
        if (this.pdfViewer.forceRendering(currentlyVisiblePages)) {
            return;
        }
        // No pages needed rendering so check thumbnails.
        if (this.pdfThumbnailViewer && this.isThumbnailViewEnabled) {
            if (this.pdfThumbnailViewer.forceRendering()) {
                return;
            }
        }
        if (this.printing) {
            // If printing is currently ongoing do not reschedule cleanup.
            return;
        }
        if (this.onIdle) {
            this.idleTimeout = setTimeout(this.onIdle.bind(this), this.CLEANUP_TIMEOUT);
        }
    };
    /**
     * @param {?} visible
     * @param {?} views
     * @param {?} scrolledDown
     * @return {?}
     */
    RenderingQueueServices.prototype.getHighestPriority = /**
     * @param {?} visible
     * @param {?} views
     * @param {?} scrolledDown
     * @return {?}
     */
    function (visible, views, scrolledDown) {
        // The state has changed figure out which page has the highest priority to
        // render next (if any).
        // Priority:
        // 1 visible pages
        // 2 if last scrolled down page after the visible pages
        // 2 if last scrolled up page before the visible pages
        /** @type {?} */
        var visibleViews = visible.views;
        /** @type {?} */
        var numVisible = visibleViews.length;
        if (numVisible === 0) {
            return false;
        }
        for (var i = 0; i < numVisible; ++i) {
            /** @type {?} */
            var view = visibleViews[i].view;
            if (!this.isViewFinished(view)) {
                return view;
            }
        }
        // All the visible views have rendered, try to render next/previous pages.
        if (scrolledDown) {
            /** @type {?} */
            var nextPageIndex = visible.last.id;
            // ID's start at 1 so no need to add 1.
            if (views[nextPageIndex] && !this.isViewFinished(views[nextPageIndex])) {
                return views[nextPageIndex];
            }
        }
        else {
            /** @type {?} */
            var previousPageIndex = visible.first.id - 2;
            if (views[previousPageIndex] && !this.isViewFinished(views[previousPageIndex])) {
                return views[previousPageIndex];
            }
        }
        // Everything that needs to be rendered has been.
        return null;
    };
    /**
     * @param view
     */
    /**
     * @param {?} view
     * @return {?}
     */
    RenderingQueueServices.prototype.isViewFinished = /**
     * @param {?} view
     * @return {?}
     */
    function (view) {
        return view.renderingState === this.renderingStates.FINISHED;
    };
    /**
     * Render a page or thumbnail view. This calls the appropriate function
     * based on the views state. If the view is already rendered it will return
     * false.
     * @param view
     */
    /**
     * Render a page or thumbnail view. This calls the appropriate function
     * based on the views state. If the view is already rendered it will return
     * false.
     * @param {?} view
     * @return {?}
     */
    RenderingQueueServices.prototype.renderView = /**
     * Render a page or thumbnail view. This calls the appropriate function
     * based on the views state. If the view is already rendered it will return
     * false.
     * @param {?} view
     * @return {?}
     */
    function (view) {
        /** @type {?} */
        var state = view.renderingState;
        switch (state) {
            case this.renderingStates.FINISHED:
                return false;
            case this.renderingStates.PAUSED:
                this.highestPriorityPage = view.renderingId;
                view.resume();
                break;
            case this.renderingStates.RUNNING:
                this.highestPriorityPage = view.renderingId;
                break;
            case this.renderingStates.INITIAL:
                this.highestPriorityPage = view.renderingId;
                /** @type {?} */
                var continueRendering = (/**
                 * @return {?}
                 */
                function () {
                    this.renderHighestPriority();
                }).bind(this);
                view.draw().then(continueRendering, continueRendering);
                break;
            default:
                break;
        }
        return true;
    };
    RenderingQueueServices.decorators = [
        { type: Injectable }
    ];
    return RenderingQueueServices;
}());
export { RenderingQueueServices };
if (false) {
    /** @type {?} */
    RenderingQueueServices.prototype.renderingStates;
    /** @type {?} */
    RenderingQueueServices.prototype.CLEANUP_TIMEOUT;
    /** @type {?} */
    RenderingQueueServices.prototype.pdfViewer;
    /** @type {?} */
    RenderingQueueServices.prototype.pdfThumbnailViewer;
    /** @type {?} */
    RenderingQueueServices.prototype.onIdle;
    /** @type {?} */
    RenderingQueueServices.prototype.highestPriorityPage;
    /** @type {?} */
    RenderingQueueServices.prototype.idleTimeout;
    /** @type {?} */
    RenderingQueueServices.prototype.printing;
    /** @type {?} */
    RenderingQueueServices.prototype.isThumbnailViewEnabled;
}
//# sourceMappingURL=data:application/json;base64,