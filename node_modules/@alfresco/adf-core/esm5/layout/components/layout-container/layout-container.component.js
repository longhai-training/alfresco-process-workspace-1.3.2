/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatSidenav } from '@angular/material';
import { sidenavAnimation, contentAnimationLeft, contentAnimationRight } from '../../helpers/animations';
var LayoutContainerComponent = /** @class */ (function () {
    function LayoutContainerComponent() {
        this.hideSidenav = false;
        this.expandedSidenav = true;
        /**
         * The side that the drawer is attached to 'start' | 'end' page
         */
        this.position = 'start';
        this.SIDENAV_STATES = { MOBILE: {}, EXPANDED: {}, COMPACT: {} };
        this.CONTENT_STATES = { MOBILE: {}, EXPANDED: {}, COMPACT: {} };
        this.onMediaQueryChange = this.onMediaQueryChange.bind(this);
    }
    /**
     * @return {?}
     */
    LayoutContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.SIDENAV_STATES.MOBILE = { value: 'expanded', params: { width: this.sidenavMax } };
        this.SIDENAV_STATES.EXPANDED = { value: 'expanded', params: { width: this.sidenavMax } };
        this.SIDENAV_STATES.COMPACT = { value: 'compact', params: { width: this.sidenavMin } };
        this.CONTENT_STATES.MOBILE = { value: 'expanded', params: { margin: 0 } };
        this.CONTENT_STATES.EXPANDED = { value: 'expanded', params: { margin: this.sidenavMin } };
        this.CONTENT_STATES.COMPACT = { value: 'compact', params: { margin: this.sidenavMax } };
        this.mediaQueryList.addListener(this.onMediaQueryChange);
        if (this.isMobileScreenSize) {
            this.sidenavAnimationState = this.SIDENAV_STATES.MOBILE;
            this.contentAnimationState = this.CONTENT_STATES.MOBILE;
        }
        else if (this.expandedSidenav) {
            this.sidenavAnimationState = this.SIDENAV_STATES.EXPANDED;
            this.contentAnimationState = this.CONTENT_STATES.COMPACT;
        }
        else {
            this.sidenavAnimationState = this.SIDENAV_STATES.COMPACT;
            this.contentAnimationState = this.CONTENT_STATES.EXPANDED;
        }
    };
    /**
     * @return {?}
     */
    LayoutContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.mediaQueryList.removeListener(this.onMediaQueryChange);
    };
    /**
     * @return {?}
     */
    LayoutContainerComponent.prototype.toggleMenu = /**
     * @return {?}
     */
    function () {
        if (this.isMobileScreenSize) {
            this.sidenav.toggle();
        }
        else {
            this.sidenavAnimationState = this.toggledSidenavAnimation;
            this.contentAnimationState = this.toggledContentAnimation;
        }
    };
    Object.defineProperty(LayoutContainerComponent.prototype, "toggledSidenavAnimation", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.sidenavAnimationState === this.SIDENAV_STATES.EXPANDED
                ? this.SIDENAV_STATES.COMPACT
                : this.SIDENAV_STATES.EXPANDED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutContainerComponent.prototype, "toggledContentAnimation", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (this.isMobileScreenSize) {
                return this.CONTENT_STATES.MOBILE;
            }
            if (this.sidenavAnimationState === this.SIDENAV_STATES.EXPANDED) {
                return this.CONTENT_STATES.COMPACT;
            }
            else {
                return this.CONTENT_STATES.EXPANDED;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutContainerComponent.prototype, "isMobileScreenSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mediaQueryList.matches;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    LayoutContainerComponent.prototype.onMediaQueryChange = /**
     * @private
     * @return {?}
     */
    function () {
        this.sidenavAnimationState = this.SIDENAV_STATES.EXPANDED;
        this.contentAnimationState = this.toggledContentAnimation;
    };
    /**
     * @return {?}
     */
    LayoutContainerComponent.prototype.getContentAnimationStateLeft = /**
     * @return {?}
     */
    function () {
        if (this.position === 'start') {
            return this.contentAnimationState;
        }
        else {
            return { value: 'compact', params: { width: this.sidenavMin } };
        }
    };
    /**
     * @return {?}
     */
    LayoutContainerComponent.prototype.getContentAnimationStateRight = /**
     * @return {?}
     */
    function () {
        if (this.position === 'end') {
            return this.contentAnimationState;
        }
        else {
            return { value: 'compact', params: { width: this.sidenavMin } };
        }
    };
    LayoutContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-layout-container',
                    template: "<mat-sidenav-container>\n    <mat-sidenav\n        [position]=\"position\"\n        [disableClose]=\"!isMobileScreenSize\"\n        [ngClass]=\"{ 'adf-sidenav--hidden': hideSidenav }\"\n        [@sidenavAnimation]=\"sidenavAnimationState\"\n        [opened]=\"!isMobileScreenSize\"\n        [mode]=\"isMobileScreenSize ? 'over' : 'side'\">\n        <ng-content sidenav select=\"[app-layout-navigation]\"></ng-content>\n    </mat-sidenav>\n\n    <div>\n        <div class=\"adf-rtl-container-alignment adf-container-full-width\" [@contentAnimationLeft]=\"getContentAnimationStateLeft()\" [@contentAnimationRight]=\"getContentAnimationStateRight()\">\n            <ng-content select=\"[app-layout-content]\"></ng-content>\n        </div>\n    </div>\n</mat-sidenav-container>\n",
                    encapsulation: ViewEncapsulation.None,
                    animations: [sidenavAnimation, contentAnimationLeft, contentAnimationRight],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LayoutContainerComponent.ctorParameters = function () { return []; };
    LayoutContainerComponent.propDecorators = {
        sidenavMin: [{ type: Input }],
        sidenavMax: [{ type: Input }],
        mediaQueryList: [{ type: Input }],
        hideSidenav: [{ type: Input }],
        expandedSidenav: [{ type: Input }],
        position: [{ type: Input }],
        sidenav: [{ type: ViewChild, args: [MatSidenav,] }]
    };
    return LayoutContainerComponent;
}());
export { LayoutContainerComponent };
if (false) {
    /** @type {?} */
    LayoutContainerComponent.prototype.sidenavMin;
    /** @type {?} */
    LayoutContainerComponent.prototype.sidenavMax;
    /** @type {?} */
    LayoutContainerComponent.prototype.mediaQueryList;
    /** @type {?} */
    LayoutContainerComponent.prototype.hideSidenav;
    /** @type {?} */
    LayoutContainerComponent.prototype.expandedSidenav;
    /**
     * The side that the drawer is attached to 'start' | 'end' page
     * @type {?}
     */
    LayoutContainerComponent.prototype.position;
    /** @type {?} */
    LayoutContainerComponent.prototype.sidenav;
    /** @type {?} */
    LayoutContainerComponent.prototype.sidenavAnimationState;
    /** @type {?} */
    LayoutContainerComponent.prototype.contentAnimationState;
    /** @type {?} */
    LayoutContainerComponent.prototype.SIDENAV_STATES;
    /** @type {?} */
    LayoutContainerComponent.prototype.CONTENT_STATES;
}
//# sourceMappingURL=data:application/json;base64,