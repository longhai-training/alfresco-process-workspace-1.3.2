/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ContentChild, Input, Output, ViewChild, EventEmitter, ViewEncapsulation } from '@angular/core';
import { MediaMatcher } from '@angular/cdk/layout';
import { SidenavLayoutContentDirective } from '../../directives/sidenav-layout-content.directive';
import { SidenavLayoutHeaderDirective } from '../../directives/sidenav-layout-header.directive';
import { SidenavLayoutNavigationDirective } from '../../directives/sidenav-layout-navigation.directive';
import { BehaviorSubject } from 'rxjs';
var SidenavLayoutComponent = /** @class */ (function () {
    function SidenavLayoutComponent(mediaMatcher) {
        var _this = this;
        this.mediaMatcher = mediaMatcher;
        /**
         * The direction of the layout. 'ltr' or 'rtl'
         */
        this.direction = 'ltr';
        /**
         * The side that the drawer is attached to. Possible values are 'start' and 'end'.
         */
        this.position = 'start';
        /**
         * Toggles showing/hiding the navigation region.
         */
        this.hideSidenav = false;
        /**
         * Should the navigation region be expanded initially?
         */
        this.expandedSidenav = true;
        /**
         * Emitted when the menu toggle and the collapsed/expanded state of the sideNav changes.
         */
        this.expanded = new EventEmitter();
        this.templateContext = {
            toggleMenu: (/**
             * @return {?}
             */
            function () { }),
            isMenuMinimized: (/**
             * @return {?}
             */
            function () { return _this.isMenuMinimized; })
        };
        this.onMediaQueryChange = this.onMediaQueryChange.bind(this);
    }
    /**
     * @return {?}
     */
    SidenavLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var initialMenuState = !this.expandedSidenav;
        this.menuOpenStateSubject = new BehaviorSubject(initialMenuState);
        this.menuOpenState$ = this.menuOpenStateSubject.asObservable();
        /** @type {?} */
        var stepOver = this.stepOver || SidenavLayoutComponent.STEP_OVER;
        this.isMenuMinimized = initialMenuState;
        this.mediaQueryList = this.mediaMatcher.matchMedia("(max-width: " + stepOver + "px)");
        this.mediaQueryList.addListener(this.onMediaQueryChange);
    };
    /**
     * @return {?}
     */
    SidenavLayoutComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.templateContext.toggleMenu = this.toggleMenu.bind(this);
    };
    /**
     * @return {?}
     */
    SidenavLayoutComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.mediaQueryList.removeListener(this.onMediaQueryChange);
    };
    /**
     * @return {?}
     */
    SidenavLayoutComponent.prototype.toggleMenu = /**
     * @return {?}
     */
    function () {
        if (!this.mediaQueryList.matches) {
            this.isMenuMinimized = !this.isMenuMinimized;
        }
        else {
            this.isMenuMinimized = false;
        }
        this.container.toggleMenu();
        this.expanded.emit(!this.isMenuMinimized);
    };
    Object.defineProperty(SidenavLayoutComponent.prototype, "isMenuMinimized", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isMenuMinimized;
        },
        set: /**
         * @param {?} menuState
         * @return {?}
         */
        function (menuState) {
            this._isMenuMinimized = menuState;
            this.menuOpenStateSubject.next(!menuState);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidenavLayoutComponent.prototype, "isHeaderInside", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mediaQueryList.matches;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidenavLayoutComponent.prototype, "headerTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.headerDirective && this.headerDirective.template || this.emptyTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidenavLayoutComponent.prototype, "navigationTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.navigationDirective && this.navigationDirective.template || this.emptyTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidenavLayoutComponent.prototype, "contentTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.contentDirective && this.contentDirective.template || this.emptyTemplate;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SidenavLayoutComponent.prototype.onMediaQueryChange = /**
     * @return {?}
     */
    function () {
        this.isMenuMinimized = false;
        this.expanded.emit(!this.isMenuMinimized);
    };
    SidenavLayoutComponent.STEP_OVER = 600;
    SidenavLayoutComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-sidenav-layout',
                    template: "<div [dir]=\"direction\" class=\"adf-sidenav-layout-full-space\">\n    <ng-container *ngIf=\"!isHeaderInside\">\n        <ng-container class=\"adf-sidenav-layout-outer-header\"\n                      *ngTemplateOutlet=\"headerTemplate; context:templateContext\"></ng-container>\n    </ng-container>\n\n    <adf-layout-container #container\n                          [position]=\"position\"\n                          [sidenavMin]=\"sidenavMin\"\n                          [sidenavMax]=\"sidenavMax\"\n                          [mediaQueryList]=\"mediaQueryList\"\n                          [hideSidenav]=\"hideSidenav\"\n                          [expandedSidenav]=\"expandedSidenav\"\n                          data-automation-id=\"adf-layout-container\"\n                          class=\"adf-layout__content\">\n\n        <ng-container app-layout-navigation\n                      *ngTemplateOutlet=\"navigationTemplate; context:templateContext\"></ng-container>\n\n        <ng-container app-layout-content>\n            <ng-container *ngIf=\"isHeaderInside\">\n                <ng-container *ngTemplateOutlet=\"headerTemplate; context:templateContext\"></ng-container>\n            </ng-container>\n            <ng-container *ngTemplateOutlet=\"contentTemplate; context:templateContext\"></ng-container>\n        </ng-container>\n    </adf-layout-container>\n\n    <ng-template #emptyTemplate></ng-template>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-sidenav-layout' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SidenavLayoutComponent.ctorParameters = function () { return [
        { type: MediaMatcher }
    ]; };
    SidenavLayoutComponent.propDecorators = {
        direction: [{ type: Input }],
        position: [{ type: Input }],
        sidenavMin: [{ type: Input }],
        sidenavMax: [{ type: Input }],
        stepOver: [{ type: Input }],
        hideSidenav: [{ type: Input }],
        expandedSidenav: [{ type: Input }],
        expanded: [{ type: Output }],
        headerDirective: [{ type: ContentChild, args: [SidenavLayoutHeaderDirective,] }],
        navigationDirective: [{ type: ContentChild, args: [SidenavLayoutNavigationDirective,] }],
        contentDirective: [{ type: ContentChild, args: [SidenavLayoutContentDirective,] }],
        container: [{ type: ViewChild, args: ['container',] }],
        emptyTemplate: [{ type: ViewChild, args: ['emptyTemplate',] }]
    };
    return SidenavLayoutComponent;
}());
export { SidenavLayoutComponent };
if (false) {
    /** @type {?} */
    SidenavLayoutComponent.STEP_OVER;
    /**
     * The direction of the layout. 'ltr' or 'rtl'
     * @type {?}
     */
    SidenavLayoutComponent.prototype.direction;
    /**
     * The side that the drawer is attached to. Possible values are 'start' and 'end'.
     * @type {?}
     */
    SidenavLayoutComponent.prototype.position;
    /**
     * Minimum size of the navigation region.
     * @type {?}
     */
    SidenavLayoutComponent.prototype.sidenavMin;
    /**
     * Maximum size of the navigation region.
     * @type {?}
     */
    SidenavLayoutComponent.prototype.sidenavMax;
    /**
     * Screen size at which display switches from small screen to large screen configuration.
     * @type {?}
     */
    SidenavLayoutComponent.prototype.stepOver;
    /**
     * Toggles showing/hiding the navigation region.
     * @type {?}
     */
    SidenavLayoutComponent.prototype.hideSidenav;
    /**
     * Should the navigation region be expanded initially?
     * @type {?}
     */
    SidenavLayoutComponent.prototype.expandedSidenav;
    /**
     * Emitted when the menu toggle and the collapsed/expanded state of the sideNav changes.
     * @type {?}
     */
    SidenavLayoutComponent.prototype.expanded;
    /** @type {?} */
    SidenavLayoutComponent.prototype.headerDirective;
    /** @type {?} */
    SidenavLayoutComponent.prototype.navigationDirective;
    /** @type {?} */
    SidenavLayoutComponent.prototype.contentDirective;
    /**
     * @type {?}
     * @private
     */
    SidenavLayoutComponent.prototype.menuOpenStateSubject;
    /** @type {?} */
    SidenavLayoutComponent.prototype.menuOpenState$;
    /** @type {?} */
    SidenavLayoutComponent.prototype.container;
    /** @type {?} */
    SidenavLayoutComponent.prototype.emptyTemplate;
    /** @type {?} */
    SidenavLayoutComponent.prototype.mediaQueryList;
    /** @type {?} */
    SidenavLayoutComponent.prototype._isMenuMinimized;
    /** @type {?} */
    SidenavLayoutComponent.prototype.templateContext;
    /**
     * @type {?}
     * @private
     */
    SidenavLayoutComponent.prototype.mediaMatcher;
}
//# sourceMappingURL=data:application/json;base64,