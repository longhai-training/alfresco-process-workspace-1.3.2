/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import moment from 'moment-es6';
import { from, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
var WidgetVisibilityService = /** @class */ (function () {
    function WidgetVisibilityService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * @param {?} form
     * @return {?}
     */
    WidgetVisibilityService.prototype.refreshVisibility = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        var _this = this;
        if (form && form.tabs && form.tabs.length > 0) {
            form.tabs.map((/**
             * @param {?} tabModel
             * @return {?}
             */
            function (tabModel) { return _this.refreshEntityVisibility(tabModel); }));
        }
        if (form) {
            form.getFormFields().map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return _this.refreshEntityVisibility(field); }));
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    WidgetVisibilityService.prototype.refreshEntityVisibility = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var visible = this.evaluateVisibility(element.form, element.visibilityCondition);
        element.isVisible = visible;
    };
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    WidgetVisibilityService.prototype.evaluateVisibility = /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    function (form, visibilityObj) {
        /** @type {?} */
        var isLeftFieldPresent = visibilityObj && (visibilityObj.leftFormFieldId || visibilityObj.leftRestResponseId);
        if (!isLeftFieldPresent || isLeftFieldPresent === 'null') {
            return true;
        }
        else {
            return this.isFieldVisible(form, visibilityObj);
        }
    };
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    WidgetVisibilityService.prototype.isFieldVisible = /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    function (form, visibilityObj) {
        /** @type {?} */
        var leftValue = this.getLeftValue(form, visibilityObj);
        /** @type {?} */
        var rightValue = this.getRightValue(form, visibilityObj);
        /** @type {?} */
        var actualResult = this.evaluateCondition(leftValue, rightValue, visibilityObj.operator);
        if (visibilityObj.nextCondition) {
            return this.evaluateLogicalOperation(visibilityObj.nextConditionOperator, actualResult, this.isFieldVisible(form, visibilityObj.nextCondition));
        }
        else {
            return actualResult;
        }
    };
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    WidgetVisibilityService.prototype.getLeftValue = /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    function (form, visibilityObj) {
        /** @type {?} */
        var leftValue = '';
        if (visibilityObj.leftRestResponseId && visibilityObj.leftRestResponseId !== 'null') {
            leftValue = this.getVariableValue(form, visibilityObj.leftRestResponseId, this.processVarList);
        }
        else if (visibilityObj.leftFormFieldId) {
            leftValue = this.getFormValue(form, visibilityObj.leftFormFieldId);
            leftValue = leftValue ? leftValue : this.getVariableValue(form, visibilityObj.leftFormFieldId, this.processVarList);
        }
        return leftValue;
    };
    /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    WidgetVisibilityService.prototype.getRightValue = /**
     * @param {?} form
     * @param {?} visibilityObj
     * @return {?}
     */
    function (form, visibilityObj) {
        /** @type {?} */
        var valueFound = '';
        if (visibilityObj.rightRestResponseId) {
            valueFound = this.getVariableValue(form, visibilityObj.rightRestResponseId, this.processVarList);
        }
        else if (visibilityObj.rightFormFieldId) {
            valueFound = this.getFormValue(form, visibilityObj.rightFormFieldId);
        }
        else {
            if (moment(visibilityObj.rightValue, 'YYYY-MM-DD', true).isValid()) {
                valueFound = visibilityObj.rightValue + 'T00:00:00.000Z';
            }
            else {
                valueFound = visibilityObj.rightValue;
            }
        }
        return valueFound;
    };
    /**
     * @param {?} form
     * @param {?} fieldId
     * @return {?}
     */
    WidgetVisibilityService.prototype.getFormValue = /**
     * @param {?} form
     * @param {?} fieldId
     * @return {?}
     */
    function (form, fieldId) {
        /** @type {?} */
        var value = this.getFieldValue(form.values, fieldId);
        if (!value) {
            value = this.searchValueInForm(form, fieldId);
        }
        return value;
    };
    /**
     * @param {?} valueList
     * @param {?} fieldId
     * @return {?}
     */
    WidgetVisibilityService.prototype.getFieldValue = /**
     * @param {?} valueList
     * @param {?} fieldId
     * @return {?}
     */
    function (valueList, fieldId) {
        /** @type {?} */
        var dropDownFilterByName;
        /** @type {?} */
        var valueFound;
        if (fieldId && fieldId.indexOf('_LABEL') > 0) {
            dropDownFilterByName = fieldId.substring(0, fieldId.length - 6);
            if (valueList[dropDownFilterByName]) {
                valueFound = valueList[dropDownFilterByName].name;
            }
        }
        else if (valueList[fieldId] && valueList[fieldId].id) {
            valueFound = valueList[fieldId].id;
        }
        else {
            valueFound = valueList[fieldId];
        }
        return valueFound;
    };
    /**
     * @param {?} form
     * @param {?} fieldId
     * @return {?}
     */
    WidgetVisibilityService.prototype.searchValueInForm = /**
     * @param {?} form
     * @param {?} fieldId
     * @return {?}
     */
    function (form, fieldId) {
        var _this = this;
        /** @type {?} */
        var fieldValue = '';
        form.getFormFields().forEach((/**
         * @param {?} formField
         * @return {?}
         */
        function (formField) {
            if (_this.isSearchedField(formField, fieldId)) {
                fieldValue = _this.getObjectValue(formField, fieldId);
                if (!fieldValue) {
                    if (formField.value && formField.value.id) {
                        fieldValue = formField.value.id;
                    }
                    else {
                        fieldValue = formField.value;
                    }
                }
            }
        }));
        return fieldValue;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} fieldId
     * @return {?}
     */
    WidgetVisibilityService.prototype.getObjectValue = /**
     * @private
     * @param {?} field
     * @param {?} fieldId
     * @return {?}
     */
    function (field, fieldId) {
        /** @type {?} */
        var value = '';
        if (field.value && field.value.name) {
            value = field.value.name;
        }
        else if (field.options) {
            /** @type {?} */
            var option = field.options.find((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) { return opt.id === field.value; }));
            if (option) {
                value = this.getValueFromOption(fieldId, option);
            }
        }
        return value;
    };
    /**
     * @private
     * @param {?} fieldId
     * @param {?} option
     * @return {?}
     */
    WidgetVisibilityService.prototype.getValueFromOption = /**
     * @private
     * @param {?} fieldId
     * @param {?} option
     * @return {?}
     */
    function (fieldId, option) {
        /** @type {?} */
        var optionValue = '';
        if (fieldId && fieldId.indexOf('_LABEL') > 0) {
            optionValue = option.name;
        }
        else {
            optionValue = option.id;
        }
        return optionValue;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} fieldToFind
     * @return {?}
     */
    WidgetVisibilityService.prototype.isSearchedField = /**
     * @private
     * @param {?} field
     * @param {?} fieldToFind
     * @return {?}
     */
    function (field, fieldToFind) {
        /** @type {?} */
        var formattedFieldName = this.removeLabel(field, fieldToFind);
        return field.id ? field.id.toUpperCase() === formattedFieldName.toUpperCase() : false;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} fieldToFind
     * @return {?}
     */
    WidgetVisibilityService.prototype.removeLabel = /**
     * @private
     * @param {?} field
     * @param {?} fieldToFind
     * @return {?}
     */
    function (field, fieldToFind) {
        /** @type {?} */
        var formattedFieldName = fieldToFind || '';
        if (field.fieldType === 'RestFieldRepresentation' && fieldToFind.indexOf('_LABEL') > 0) {
            formattedFieldName = fieldToFind.substring(0, fieldToFind.length - 6);
        }
        return formattedFieldName;
    };
    /**
     * @param {?} form
     * @param {?} name
     * @param {?} processVarList
     * @return {?}
     */
    WidgetVisibilityService.prototype.getVariableValue = /**
     * @param {?} form
     * @param {?} name
     * @param {?} processVarList
     * @return {?}
     */
    function (form, name, processVarList) {
        return this.getFormVariableValue(form, name) ||
            this.getProcessVariableValue(name, processVarList);
    };
    /**
     * @private
     * @param {?} form
     * @param {?} name
     * @return {?}
     */
    WidgetVisibilityService.prototype.getFormVariableValue = /**
     * @private
     * @param {?} form
     * @param {?} name
     * @return {?}
     */
    function (form, name) {
        if (form.json.variables) {
            /** @type {?} */
            var formVariable = form.json.variables.find((/**
             * @param {?} formVar
             * @return {?}
             */
            function (formVar) { return formVar.name === name; }));
            return formVariable ? formVariable.value : formVariable;
        }
    };
    /**
     * @private
     * @param {?} name
     * @param {?} processVarList
     * @return {?}
     */
    WidgetVisibilityService.prototype.getProcessVariableValue = /**
     * @private
     * @param {?} name
     * @param {?} processVarList
     * @return {?}
     */
    function (name, processVarList) {
        if (this.processVarList) {
            /** @type {?} */
            var processVariable = this.processVarList.find((/**
             * @param {?} variable
             * @return {?}
             */
            function (variable) { return variable.id === name; }));
            return processVariable ? processVariable.value : processVariable;
        }
    };
    /**
     * @param {?} logicOp
     * @param {?} previousValue
     * @param {?} newValue
     * @return {?}
     */
    WidgetVisibilityService.prototype.evaluateLogicalOperation = /**
     * @param {?} logicOp
     * @param {?} previousValue
     * @param {?} newValue
     * @return {?}
     */
    function (logicOp, previousValue, newValue) {
        switch (logicOp) {
            case 'and':
                return previousValue && newValue;
            case 'or':
                return previousValue || newValue;
            case 'and-not':
                return previousValue && !newValue;
            case 'or-not':
                return previousValue || !newValue;
            default:
                this.logService.error('NO valid operation! wrong op request : ' + logicOp);
                break;
        }
    };
    /**
     * @param {?} leftValue
     * @param {?} rightValue
     * @param {?} operator
     * @return {?}
     */
    WidgetVisibilityService.prototype.evaluateCondition = /**
     * @param {?} leftValue
     * @param {?} rightValue
     * @param {?} operator
     * @return {?}
     */
    function (leftValue, rightValue, operator) {
        switch (operator) {
            case '==':
                return leftValue + '' === rightValue + '';
            case '<':
                return leftValue < rightValue;
            case '!=':
                return leftValue + '' !== rightValue + '';
            case '>':
                return leftValue > rightValue;
            case '>=':
                return leftValue >= rightValue;
            case '<=':
                return leftValue <= rightValue;
            case 'empty':
                return leftValue ? leftValue === '' : true;
            case '!empty':
                return leftValue ? leftValue !== '' : false;
            default:
                this.logService.error('NO valid operation!');
                break;
        }
        return;
    };
    /**
     * @return {?}
     */
    WidgetVisibilityService.prototype.cleanProcessVariable = /**
     * @return {?}
     */
    function () {
        this.processVarList = [];
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    WidgetVisibilityService.prototype.getTaskProcessVariable = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.taskFormsApi.getTaskFormVariables(taskId))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var jsonRes = _this.toJson(res);
            _this.processVarList = (/** @type {?} */ (jsonRes));
            return jsonRes;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} res
     * @return {?}
     */
    WidgetVisibilityService.prototype.toJson = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        return res || {};
    };
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    WidgetVisibilityService.prototype.handleError = /**
     * @private
     * @param {?} err
     * @return {?}
     */
    function (err) {
        this.logService.error('Error while performing a call');
        return throwError('Error while performing a call - Server error');
    };
    WidgetVisibilityService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WidgetVisibilityService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ WidgetVisibilityService.ngInjectableDef = i0.defineInjectable({ factory: function WidgetVisibilityService_Factory() { return new WidgetVisibilityService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: WidgetVisibilityService, providedIn: "root" });
    return WidgetVisibilityService;
}());
export { WidgetVisibilityService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityService.prototype.processVarList;
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,