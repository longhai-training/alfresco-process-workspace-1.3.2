/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import { AmountWidgetComponent, CheckboxWidgetComponent, ContainerWidgetComponent, DateWidgetComponent, DisplayTextWidgetComponentComponent, DocumentWidgetComponent, DropdownWidgetComponent, DynamicTableWidgetComponent, FunctionalGroupWidgetComponent, HyperlinkWidgetComponent, MultilineTextWidgetComponentComponent, NumberWidgetComponent, PeopleWidgetComponent, RadioButtonsWidgetComponent, TextWidgetComponent, TypeaheadWidgetComponent, UnknownWidgetComponent, UploadWidgetComponent, DateTimeWidgetComponent } from './../components/widgets/index';
import * as i0 from "@angular/core";
var FormRenderingService = /** @class */ (function (_super) {
    tslib_1.__extends(FormRenderingService, _super);
    function FormRenderingService() {
        var _this = _super.call(this) || this;
        _this.defaultValue = UnknownWidgetComponent;
        _this.types = {
            'text': DynamicComponentResolver.fromType(TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),
            'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(DateTimeWidgetComponent)
        };
        return _this;
    }
    FormRenderingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FormRenderingService.ctorParameters = function () { return []; };
    /** @nocollapse */ FormRenderingService.ngInjectableDef = i0.defineInjectable({ factory: function FormRenderingService_Factory() { return new FormRenderingService(); }, token: FormRenderingService, providedIn: "root" });
    return FormRenderingService;
}(DynamicComponentMapper));
export { FormRenderingService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.defaultValue;
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.types;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLHNCQUFzQixFQUFtQyx3QkFBd0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3BKLE9BQU8sRUFBRSxVQUFVLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUNILHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsd0JBQXdCLEVBQ3hCLG1CQUFtQixFQUNuQixtQ0FBbUMsRUFDbkMsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2QiwyQkFBMkIsRUFDM0IsOEJBQThCLEVBQzlCLHdCQUF3QixFQUN4QixxQ0FBcUMsRUFDckMscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQiwyQkFBMkIsRUFDM0IsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN4QixzQkFBc0IsRUFDdEIscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUMxQixNQUFNLCtCQUErQixDQUFDOztBQUV2QztJQUcwQyxnREFBc0I7SUEwQjVEO1FBQUEsWUFDSSxpQkFBTyxTQUNWO1FBMUJTLGtCQUFZLEdBQWEsc0JBQXNCLENBQUM7UUFDaEQsV0FBSyxHQUF1RDtZQUNsRSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQzlELFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDaEUsU0FBUyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNuRSxpQkFBaUIsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUNBQXFDLENBQUM7WUFDM0YsU0FBUyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztZQUNyRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3RFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDOUQsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNsRSxlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDO1lBQy9FLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQztZQUN2RixXQUFXLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQ3hFLFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbEUsa0JBQWtCLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDO1lBQ3JGLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUM7WUFDL0UsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUN4RSxPQUFPLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQ3BFLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7WUFDdEUsUUFBUSxFQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNuRSxVQUFVLEVBQUcsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1NBQzFFLENBQUM7O0lBSUYsQ0FBQzs7Z0JBL0JKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7OytCQTVDRDtDQTBFQyxBQWhDRCxDQUcwQyxzQkFBc0IsR0E2Qi9EO1NBN0JZLG9CQUFvQjs7Ozs7O0lBRTdCLDRDQUEwRDs7Ozs7SUFDMUQscUNBcUJFIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1hcHBlciwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICAgIEFtb3VudFdpZGdldENvbXBvbmVudCxcbiAgICBDaGVja2JveFdpZGdldENvbXBvbmVudCxcbiAgICBDb250YWluZXJXaWRnZXRDb21wb25lbnQsXG4gICAgRGF0ZVdpZGdldENvbXBvbmVudCxcbiAgICBEaXNwbGF5VGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCxcbiAgICBEb2N1bWVudFdpZGdldENvbXBvbmVudCxcbiAgICBEcm9wZG93bldpZGdldENvbXBvbmVudCxcbiAgICBEeW5hbWljVGFibGVXaWRnZXRDb21wb25lbnQsXG4gICAgRnVuY3Rpb25hbEdyb3VwV2lkZ2V0Q29tcG9uZW50LFxuICAgIEh5cGVybGlua1dpZGdldENvbXBvbmVudCxcbiAgICBNdWx0aWxpbmVUZXh0V2lkZ2V0Q29tcG9uZW50Q29tcG9uZW50LFxuICAgIE51bWJlcldpZGdldENvbXBvbmVudCxcbiAgICBQZW9wbGVXaWRnZXRDb21wb25lbnQsXG4gICAgUmFkaW9CdXR0b25zV2lkZ2V0Q29tcG9uZW50LFxuICAgIFRleHRXaWRnZXRDb21wb25lbnQsXG4gICAgVHlwZWFoZWFkV2lkZ2V0Q29tcG9uZW50LFxuICAgIFVua25vd25XaWRnZXRDb21wb25lbnQsXG4gICAgVXBsb2FkV2lkZ2V0Q29tcG9uZW50LFxuICAgIERhdGVUaW1lV2lkZ2V0Q29tcG9uZW50XG59IGZyb20gJy4vLi4vY29tcG9uZW50cy93aWRnZXRzL2luZGV4JztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGb3JtUmVuZGVyaW5nU2VydmljZSBleHRlbmRzIER5bmFtaWNDb21wb25lbnRNYXBwZXIge1xuXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRWYWx1ZTogVHlwZTx7fT4gPSBVbmtub3duV2lkZ2V0Q29tcG9uZW50O1xuICAgIHByb3RlY3RlZCB0eXBlczogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIH0gPSB7XG4gICAgICAgICd0ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnc3RyaW5nJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnaW50ZWdlcic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShOdW1iZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnbXVsdGktbGluZS10ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKE11bHRpbGluZVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAnYm9vbGVhbic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDaGVja2JveFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkcm9wZG93bic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEcm9wZG93bldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkYXRlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERhdGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnYW1vdW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKEFtb3VudFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdyYWRpby1idXR0b25zJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFJhZGlvQnV0dG9uc1dpZGdldENvbXBvbmVudCksXG4gICAgICAgICdoeXBlcmxpbmsnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoSHlwZXJsaW5rV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JlYWRvbmx5LXRleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGlzcGxheVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAndHlwZWFoZWFkJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFR5cGVhaGVhZFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdwZW9wbGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoUGVvcGxlV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2Z1bmN0aW9uYWwtZ3JvdXAnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRnVuY3Rpb25hbEdyb3VwV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2R5bmFtaWMtdGFibGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRHluYW1pY1RhYmxlV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2NvbnRhaW5lcic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDb250YWluZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZ3JvdXAnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RvY3VtZW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERvY3VtZW50V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3VwbG9hZCc6ICBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVXBsb2FkV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RhdGV0aW1lJzogIER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEYXRlVGltZVdpZGdldENvbXBvbmVudClcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuIl19