/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContainerModel } from './widgets/core/container.model';
/**
 * @abstract
 */
var FormBaseModel = /** @class */ (function () {
    function FormBaseModel() {
        this.values = {};
        this.tabs = [];
        this.fields = [];
        this.outcomes = [];
        this.readOnly = false;
    }
    /**
     * @return {?}
     */
    FormBaseModel.prototype.hasTabs = /**
     * @return {?}
     */
    function () {
        return this.tabs && this.tabs.length > 0;
    };
    /**
     * @return {?}
     */
    FormBaseModel.prototype.hasFields = /**
     * @return {?}
     */
    function () {
        return this.fields && this.fields.length > 0;
    };
    /**
     * @return {?}
     */
    FormBaseModel.prototype.hasOutcomes = /**
     * @return {?}
     */
    function () {
        return this.outcomes && this.outcomes.length > 0;
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormBaseModel.prototype.getFieldById = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        return this.getFormFields().find((/**
         * @param {?} field
         * @return {?}
         */
        function (field) { return field.id === fieldId; }));
    };
    // TODO: consider evaluating and caching once the form is loaded
    // TODO: consider evaluating and caching once the form is loaded
    /**
     * @return {?}
     */
    FormBaseModel.prototype.getFormFields = 
    // TODO: consider evaluating and caching once the form is loaded
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var formFieldModel = [];
        for (var i = 0; i < this.fields.length; i++) {
            /** @type {?} */
            var field = this.fields[i];
            if (field instanceof ContainerModel) {
                /** @type {?} */
                var container = (/** @type {?} */ (field));
                formFieldModel.push(container.field);
                container.field.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) {
                    formFieldModel.push.apply(formFieldModel, tslib_1.__spread(column.fields));
                }));
            }
        }
        return formFieldModel;
    };
    FormBaseModel.UNSET_TASK_NAME = 'Nameless task';
    FormBaseModel.SAVE_OUTCOME = '$save';
    FormBaseModel.COMPLETE_OUTCOME = '$complete';
    FormBaseModel.START_PROCESS_OUTCOME = '$startProcess';
    return FormBaseModel;
}());
export { FormBaseModel };
if (false) {
    /** @type {?} */
    FormBaseModel.UNSET_TASK_NAME;
    /** @type {?} */
    FormBaseModel.SAVE_OUTCOME;
    /** @type {?} */
    FormBaseModel.COMPLETE_OUTCOME;
    /** @type {?} */
    FormBaseModel.START_PROCESS_OUTCOME;
    /** @type {?} */
    FormBaseModel.prototype.json;
    /** @type {?} */
    FormBaseModel.prototype.isValid;
    /** @type {?} */
    FormBaseModel.prototype.values;
    /** @type {?} */
    FormBaseModel.prototype.tabs;
    /** @type {?} */
    FormBaseModel.prototype.fields;
    /** @type {?} */
    FormBaseModel.prototype.outcomes;
    /** @type {?} */
    FormBaseModel.prototype.className;
    /** @type {?} */
    FormBaseModel.prototype.readOnly;
    /** @type {?} */
    FormBaseModel.prototype.taskName;
    /**
     * @abstract
     * @return {?}
     */
    FormBaseModel.prototype.validateForm = function () { };
    /**
     * @abstract
     * @param {?} field
     * @return {?}
     */
    FormBaseModel.prototype.validateField = function (field) { };
    /**
     * @abstract
     * @param {?} field
     * @return {?}
     */
    FormBaseModel.prototype.onFormFieldChanged = function (field) { };
    /**
     * @abstract
     * @return {?}
     */
    FormBaseModel.prototype.markAsInvalid = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1iYXNlLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiZm9ybS9jb21wb25lbnRzL2Zvcm0tYmFzZS5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7O0FBRWhFO0lBQUE7UUFVSSxXQUFNLEdBQWUsRUFBRSxDQUFDO1FBQ3hCLFNBQUksR0FBZSxFQUFFLENBQUM7UUFDdEIsV0FBTSxHQUFzQixFQUFFLENBQUM7UUFDL0IsYUFBUSxHQUF1QixFQUFFLENBQUM7UUFHbEMsYUFBUSxHQUFZLEtBQUssQ0FBQztJQTJDOUIsQ0FBQzs7OztJQXhDRywrQkFBTzs7O0lBQVA7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFFRCxpQ0FBUzs7O0lBQVQ7UUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFRCxtQ0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7O0lBRUQsb0NBQVk7Ozs7SUFBWixVQUFhLE9BQWU7UUFDeEIsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSTs7OztRQUFDLFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPLEVBQXBCLENBQW9CLEVBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsZ0VBQWdFOzs7OztJQUNoRSxxQ0FBYTs7Ozs7SUFBYjs7WUFDVSxjQUFjLEdBQXFCLEVBQUU7UUFFM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDbkMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRTVCLElBQUksS0FBSyxZQUFZLGNBQWMsRUFBRTs7b0JBQzNCLFNBQVMsR0FBRyxtQkFBaUIsS0FBSyxFQUFBO2dCQUN4QyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFFckMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTzs7OztnQkFBQyxVQUFDLE1BQU07b0JBQ25DLGNBQWMsQ0FBQyxJQUFJLE9BQW5CLGNBQWMsbUJBQVMsTUFBTSxDQUFDLE1BQU0sR0FBRTtnQkFDMUMsQ0FBQyxFQUFDLENBQUM7YUFDTjtTQUNKO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQW5ETSw2QkFBZSxHQUFXLGVBQWUsQ0FBQztJQUMxQywwQkFBWSxHQUFXLE9BQU8sQ0FBQztJQUMvQiw4QkFBZ0IsR0FBVyxXQUFXLENBQUM7SUFDdkMsbUNBQXFCLEdBQVcsZUFBZSxDQUFDO0lBc0QzRCxvQkFBQztDQUFBLEFBM0RELElBMkRDO1NBM0RxQixhQUFhOzs7SUFFL0IsOEJBQWlEOztJQUNqRCwyQkFBc0M7O0lBQ3RDLCtCQUE4Qzs7SUFDOUMsb0NBQXVEOztJQUV2RCw2QkFBVTs7SUFDVixnQ0FBaUI7O0lBRWpCLCtCQUF3Qjs7SUFDeEIsNkJBQXNCOztJQUN0QiwrQkFBK0I7O0lBQy9CLGlDQUFrQzs7SUFFbEMsa0NBQWtCOztJQUNsQixpQ0FBMEI7O0lBQzFCLGlDQUFTOzs7OztJQXNDVCx1REFBd0I7Ozs7OztJQUN4Qiw2REFBOEM7Ozs7OztJQUM5QyxrRUFBbUQ7Ozs7O0lBQ25ELHdEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZvcm1WYWx1ZXMgfSBmcm9tICcuL3dpZGdldHMvY29yZS9mb3JtLXZhbHVlcyc7XG5pbXBvcnQgeyBUYWJNb2RlbCB9IGZyb20gJy4vd2lkZ2V0cy9jb3JlL3RhYi5tb2RlbCc7XG5pbXBvcnQgeyBGb3JtV2lkZ2V0TW9kZWwgfSBmcm9tICcuL3dpZGdldHMvY29yZS9mb3JtLXdpZGdldC5tb2RlbCc7XG5pbXBvcnQgeyBGb3JtT3V0Y29tZU1vZGVsIH0gZnJvbSAnLi93aWRnZXRzL2NvcmUvZm9ybS1vdXRjb21lLm1vZGVsJztcbmltcG9ydCB7IEZvcm1GaWVsZE1vZGVsIH0gZnJvbSAnLi93aWRnZXRzL2NvcmUvZm9ybS1maWVsZC5tb2RlbCc7XG5pbXBvcnQgeyBDb250YWluZXJNb2RlbCB9IGZyb20gJy4vd2lkZ2V0cy9jb3JlL2NvbnRhaW5lci5tb2RlbCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGb3JtQmFzZU1vZGVsIHtcblxuICAgIHN0YXRpYyBVTlNFVF9UQVNLX05BTUU6IHN0cmluZyA9ICdOYW1lbGVzcyB0YXNrJztcbiAgICBzdGF0aWMgU0FWRV9PVVRDT01FOiBzdHJpbmcgPSAnJHNhdmUnO1xuICAgIHN0YXRpYyBDT01QTEVURV9PVVRDT01FOiBzdHJpbmcgPSAnJGNvbXBsZXRlJztcbiAgICBzdGF0aWMgU1RBUlRfUFJPQ0VTU19PVVRDT01FOiBzdHJpbmcgPSAnJHN0YXJ0UHJvY2Vzcyc7XG5cbiAgICBqc29uOiBhbnk7XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcblxuICAgIHZhbHVlczogRm9ybVZhbHVlcyA9IHt9O1xuICAgIHRhYnM6IFRhYk1vZGVsW10gPSBbXTtcbiAgICBmaWVsZHM6IEZvcm1XaWRnZXRNb2RlbFtdID0gW107XG4gICAgb3V0Y29tZXM6IEZvcm1PdXRjb21lTW9kZWxbXSA9IFtdO1xuXG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgcmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB0YXNrTmFtZTtcblxuICAgIGhhc1RhYnMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYnMgJiYgdGhpcy50YWJzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgaGFzRmllbGRzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZHMgJiYgdGhpcy5maWVsZHMubGVuZ3RoID4gMDtcbiAgICB9XG5cbiAgICBoYXNPdXRjb21lcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0Y29tZXMgJiYgdGhpcy5vdXRjb21lcy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGdldEZpZWxkQnlJZChmaWVsZElkOiBzdHJpbmcpOiBGb3JtRmllbGRNb2RlbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZvcm1GaWVsZHMoKS5maW5kKChmaWVsZCkgPT4gZmllbGQuaWQgPT09IGZpZWxkSWQpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IGNvbnNpZGVyIGV2YWx1YXRpbmcgYW5kIGNhY2hpbmcgb25jZSB0aGUgZm9ybSBpcyBsb2FkZWRcbiAgICBnZXRGb3JtRmllbGRzKCk6IEZvcm1GaWVsZE1vZGVsW10ge1xuICAgICAgICBjb25zdCBmb3JtRmllbGRNb2RlbDogRm9ybUZpZWxkTW9kZWxbXSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZHNbaV07XG5cbiAgICAgICAgICAgIGlmIChmaWVsZCBpbnN0YW5jZW9mIENvbnRhaW5lck1vZGVsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gPENvbnRhaW5lck1vZGVsPiBmaWVsZDtcbiAgICAgICAgICAgICAgICBmb3JtRmllbGRNb2RlbC5wdXNoKGNvbnRhaW5lci5maWVsZCk7XG5cbiAgICAgICAgICAgICAgICBjb250YWluZXIuZmllbGQuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybUZpZWxkTW9kZWwucHVzaCguLi5jb2x1bW4uZmllbGRzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtRmllbGRNb2RlbDtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCB2YWxpZGF0ZUZvcm0oKTtcbiAgICBhYnN0cmFjdCB2YWxpZGF0ZUZpZWxkKGZpZWxkOiBGb3JtRmllbGRNb2RlbCk7XG4gICAgYWJzdHJhY3Qgb25Gb3JtRmllbGRDaGFuZ2VkKGZpZWxkOiBGb3JtRmllbGRNb2RlbCk7XG4gICAgYWJzdHJhY3QgbWFya0FzSW52YWxpZCgpO1xufVxuIl19