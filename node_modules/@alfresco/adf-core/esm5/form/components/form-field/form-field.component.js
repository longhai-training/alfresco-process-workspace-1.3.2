/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Compiler, Component, ComponentFactoryResolver, Input, NgModule, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { FormRenderingService } from './../../services/form-rendering.service';
import { WidgetVisibilityService } from './../../services/widget-visibility.service';
import { FormFieldModel } from './../widgets/core/form-field.model';
var FormFieldComponent = /** @class */ (function () {
    function FormFieldComponent(formRenderingService, componentFactoryResolver, visibilityService, compiler) {
        this.formRenderingService = formRenderingService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.visibilityService = visibilityService;
        this.compiler = compiler;
        /**
         * Contains all the necessary data needed to determine what UI Widget
         * to use when rendering the field in the form. You would typically not
         * create this data manually but instead create the form in APS and export
         * it to get to all the `FormFieldModel` definitions.
         */
        this.field = null;
        this.focus = false;
    }
    /**
     * @return {?}
     */
    FormFieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var w = window;
        if (w.adf === undefined) {
            w.adf = {};
        }
        /** @type {?} */
        var originalField = this.getField();
        if (originalField) {
            /** @type {?} */
            var customTemplate = this.field.form.customFieldTemplates[originalField.type];
            if (customTemplate && this.hasController(originalField.type)) {
                /** @type {?} */
                var factory = this.getComponentFactorySync(originalField.type, customTemplate);
                this.componentRef = this.container.createComponent(factory);
                /** @type {?} */
                var instance = this.componentRef.instance;
                if (instance) {
                    instance.field = originalField;
                }
            }
            else {
                /** @type {?} */
                var componentType = this.formRenderingService.resolveComponentType(originalField);
                if (componentType) {
                    /** @type {?} */
                    var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    this.componentRef = this.container.createComponent(factory);
                    /** @type {?} */
                    var instance = (/** @type {?} */ (this.componentRef.instance));
                    instance.field = this.field;
                    instance.fieldChanged.subscribe((/**
                     * @param {?} field
                     * @return {?}
                     */
                    function (field) {
                        if (field && _this.field.form) {
                            _this.visibilityService.refreshVisibility(field.form);
                            field.form.onFormFieldChanged(field);
                        }
                    }));
                }
            }
        }
    };
    /**
     * @return {?}
     */
    FormFieldComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormFieldComponent.prototype.getField = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.field && this.field.params) {
            /** @type {?} */
            var wrappedField = this.field.params.field;
            if (wrappedField && wrappedField.type) {
                return wrappedField;
            }
        }
        return this.field;
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    FormFieldComponent.prototype.hasController = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return (adf && adf.components && adf.components[type]);
    };
    /**
     * @private
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    FormFieldComponent.prototype.getComponentFactorySync = /**
     * @private
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    function (type, template) {
        /** @type {?} */
        var componentInfo = adf.components[type];
        if (componentInfo.factory) {
            return componentInfo.factory;
        }
        /** @type {?} */
        var metadata = {
            selector: "runtime-component-" + type,
            template: template
        };
        /** @type {?} */
        var factory = this.createComponentFactorySync(this.compiler, metadata, componentInfo.class);
        componentInfo.factory = factory;
        return factory;
    };
    /**
     * @private
     * @param {?} compiler
     * @param {?} metadata
     * @param {?} componentClass
     * @return {?}
     */
    FormFieldComponent.prototype.createComponentFactorySync = /**
     * @private
     * @param {?} compiler
     * @param {?} metadata
     * @param {?} componentClass
     * @return {?}
     */
    function (compiler, metadata, componentClass) {
        /** @type {?} */
        var cmpClass = componentClass || /** @class */ (function () {
            function RuntimeComponent() {
            }
            return RuntimeComponent;
        }());
        /** @type {?} */
        var decoratedCmp = Component(metadata)(cmpClass);
        var RuntimeComponentModule = /** @class */ (function () {
            function RuntimeComponentModule() {
            }
            RuntimeComponentModule.decorators = [
                { type: NgModule, args: [{ imports: [], declarations: [decoratedCmp] },] },
            ];
            return RuntimeComponentModule;
        }());
        /** @type {?} */
        var module = compiler.compileModuleAndAllComponentsSync(RuntimeComponentModule);
        return module.componentFactories.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.componentType === decoratedCmp; }));
    };
    /**
     * @return {?}
     */
    FormFieldComponent.prototype.focusToggle = /**
     * @return {?}
     */
    function () {
        this.focus = !this.focus;
    };
    FormFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-form-field',
                    template: "\n        <div [id]=\"'field-'+field?.id+'-container'\"\n            [hidden]=\"!field?.isVisible\"\n            [class.adf-focus]=\"focus\"\n            (focusin)=\"focusToggle()\"\n            (focusout)=\"focusToggle()\">\n            <div #container></div>\n        </div>\n    ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    FormFieldComponent.ctorParameters = function () { return [
        { type: FormRenderingService },
        { type: ComponentFactoryResolver },
        { type: WidgetVisibilityService },
        { type: Compiler }
    ]; };
    FormFieldComponent.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        field: [{ type: Input }]
    };
    return FormFieldComponent;
}());
export { FormFieldComponent };
if (false) {
    /** @type {?} */
    FormFieldComponent.prototype.container;
    /**
     * Contains all the necessary data needed to determine what UI Widget
     * to use when rendering the field in the form. You would typically not
     * create this data manually but instead create the form in APS and export
     * it to get to all the `FormFieldModel` definitions.
     * @type {?}
     */
    FormFieldComponent.prototype.field;
    /** @type {?} */
    FormFieldComponent.prototype.componentRef;
    /** @type {?} */
    FormFieldComponent.prototype.focus;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.formRenderingService;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.compiler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJmb3JtL2NvbXBvbmVudHMvZm9ybS1maWVsZC9mb3JtLWZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsUUFBUSxFQUNSLFNBQVMsRUFDVCx3QkFBd0IsRUFFeEIsS0FBSyxFQUVMLFFBQVEsRUFHUixTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFLcEU7SUE4QkksNEJBQW9CLG9CQUEwQyxFQUMxQyx3QkFBa0QsRUFDbEQsaUJBQTBDLEVBQzFDLFFBQWtCO1FBSGxCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXlCO1FBQzFDLGFBQVEsR0FBUixRQUFRLENBQVU7Ozs7Ozs7UUFUdEMsVUFBSyxHQUFtQixJQUFJLENBQUM7UUFJN0IsVUFBSyxHQUFZLEtBQUssQ0FBQztJQU12QixDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSO1FBQUEsaUJBK0JDOztZQTlCUyxDQUFDLEdBQVEsTUFBTTtRQUNyQixJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1NBQ2Q7O1lBQ0ssYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDckMsSUFBSSxhQUFhLEVBQUU7O2dC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RTt3QkFRakQsS0FBSzs7SUFvR1YseUJBQUM7Q0FBQSxBQTNIRCxJQTJIQztTQTlHWSxrQkFBa0I7OztJQUUzQix1Q0FDNEI7Ozs7Ozs7O0lBTzVCLG1DQUM2Qjs7SUFFN0IsMENBQStCOztJQUUvQixtQ0FBdUI7Ozs7O0lBRVgsa0RBQWtEOzs7OztJQUNsRCxzREFBMEQ7Ozs7O0lBQzFELCtDQUFrRDs7Ozs7SUFDbEQsc0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb21waWxlcixcbiAgICBDb21wb25lbnQsIENvbXBvbmVudEZhY3RvcnksXG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIENvbXBvbmVudFJlZixcbiAgICBJbnB1dCxcbiAgICBNb2R1bGVXaXRoQ29tcG9uZW50RmFjdG9yaWVzLFxuICAgIE5nTW9kdWxlLFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkluaXQsXG4gICAgVmlld0NoaWxkLFxuICAgIFZpZXdDb250YWluZXJSZWYsXG4gICAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZvcm1SZW5kZXJpbmdTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9zZXJ2aWNlcy9mb3JtLXJlbmRlcmluZy5zZXJ2aWNlJztcbmltcG9ydCB7IFdpZGdldFZpc2liaWxpdHlTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi9zZXJ2aWNlcy93aWRnZXQtdmlzaWJpbGl0eS5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1GaWVsZE1vZGVsIH0gZnJvbSAnLi8uLi93aWRnZXRzL2NvcmUvZm9ybS1maWVsZC5tb2RlbCc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuLy4uL3dpZGdldHMvd2lkZ2V0LmNvbXBvbmVudCc7XG5cbmRlY2xhcmUgdmFyIGFkZjogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1mb3JtLWZpZWxkJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2IFtpZF09XCInZmllbGQtJytmaWVsZD8uaWQrJy1jb250YWluZXInXCJcbiAgICAgICAgICAgIFtoaWRkZW5dPVwiIWZpZWxkPy5pc1Zpc2libGVcIlxuICAgICAgICAgICAgW2NsYXNzLmFkZi1mb2N1c109XCJmb2N1c1wiXG4gICAgICAgICAgICAoZm9jdXNpbik9XCJmb2N1c1RvZ2dsZSgpXCJcbiAgICAgICAgICAgIChmb2N1c291dCk9XCJmb2N1c1RvZ2dsZSgpXCI+XG4gICAgICAgICAgICA8ZGl2ICNjb250YWluZXI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIGAsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBGb3JtRmllbGRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBAVmlld0NoaWxkKCdjb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcbiAgICBjb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgICAvKiogQ29udGFpbnMgYWxsIHRoZSBuZWNlc3NhcnkgZGF0YSBuZWVkZWQgdG8gZGV0ZXJtaW5lIHdoYXQgVUkgV2lkZ2V0XG4gICAgICogdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBmaWVsZCBpbiB0aGUgZm9ybS4gWW91IHdvdWxkIHR5cGljYWxseSBub3RcbiAgICAgKiBjcmVhdGUgdGhpcyBkYXRhIG1hbnVhbGx5IGJ1dCBpbnN0ZWFkIGNyZWF0ZSB0aGUgZm9ybSBpbiBBUFMgYW5kIGV4cG9ydFxuICAgICAqIGl0IHRvIGdldCB0byBhbGwgdGhlIGBGb3JtRmllbGRNb2RlbGAgZGVmaW5pdGlvbnMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBmaWVsZDogRm9ybUZpZWxkTW9kZWwgPSBudWxsO1xuXG4gICAgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8e30+O1xuXG4gICAgZm9jdXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybVJlbmRlcmluZ1NlcnZpY2U6IEZvcm1SZW5kZXJpbmdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB2aXNpYmlsaXR5U2VydmljZTogV2lkZ2V0VmlzaWJpbGl0eVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb21waWxlcjogQ29tcGlsZXIpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgY29uc3QgdzogYW55ID0gd2luZG93O1xuICAgICAgICBpZiAody5hZGYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdy5hZGYgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmlnaW5hbEZpZWxkID0gdGhpcy5nZXRGaWVsZCgpO1xuICAgICAgICBpZiAob3JpZ2luYWxGaWVsZCkge1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tVGVtcGxhdGUgPSB0aGlzLmZpZWxkLmZvcm0uY3VzdG9tRmllbGRUZW1wbGF0ZXNbb3JpZ2luYWxGaWVsZC50eXBlXTtcbiAgICAgICAgICAgIGlmIChjdXN0b21UZW1wbGF0ZSAmJiB0aGlzLmhhc0NvbnRyb2xsZXIob3JpZ2luYWxGaWVsZC50eXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmdldENvbXBvbmVudEZhY3RvcnlTeW5jKG9yaWdpbmFsRmllbGQudHlwZSwgY3VzdG9tVGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlOiBhbnkgPSB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZmllbGQgPSBvcmlnaW5hbEZpZWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VHlwZSA9IHRoaXMuZm9ybVJlbmRlcmluZ1NlcnZpY2UucmVzb2x2ZUNvbXBvbmVudFR5cGUob3JpZ2luYWxGaWVsZCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudFR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSA8V2lkZ2V0Q29tcG9uZW50PiB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZmllbGQgPSB0aGlzLmZpZWxkO1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5maWVsZENoYW5nZWQuc3Vic2NyaWJlKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkICYmIHRoaXMuZmllbGQuZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eVNlcnZpY2UucmVmcmVzaFZpc2liaWxpdHkoZmllbGQuZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuZm9ybS5vbkZvcm1GaWVsZENoYW5nZWQoZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50UmVmKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEZpZWxkKCk6IEZvcm1GaWVsZE1vZGVsIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQgJiYgdGhpcy5maWVsZC5wYXJhbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRGaWVsZCA9IHRoaXMuZmllbGQucGFyYW1zLmZpZWxkO1xuICAgICAgICAgICAgaWYgKHdyYXBwZWRGaWVsZCAmJiB3cmFwcGVkRmllbGQudHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkRmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNDb250cm9sbGVyKHR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKGFkZiAmJiBhZGYuY29tcG9uZW50cyAmJiBhZGYuY29tcG9uZW50c1t0eXBlXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb21wb25lbnRGYWN0b3J5U3luYyh0eXBlOiBzdHJpbmcsIHRlbXBsYXRlOiBzdHJpbmcpOiBDb21wb25lbnRGYWN0b3J5PGFueT4ge1xuICAgICAgICBjb25zdCBjb21wb25lbnRJbmZvID0gYWRmLmNvbXBvbmVudHNbdHlwZV07XG5cbiAgICAgICAgaWYgKGNvbXBvbmVudEluZm8uZmFjdG9yeSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudEluZm8uZmFjdG9yeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgc2VsZWN0b3I6IGBydW50aW1lLWNvbXBvbmVudC0ke3R5cGV9YCxcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmNyZWF0ZUNvbXBvbmVudEZhY3RvcnlTeW5jKHRoaXMuY29tcGlsZXIsIG1ldGFkYXRhLCBjb21wb25lbnRJbmZvLmNsYXNzKTtcbiAgICAgICAgY29tcG9uZW50SW5mby5mYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVDb21wb25lbnRGYWN0b3J5U3luYyhjb21waWxlcjogQ29tcGlsZXIsIG1ldGFkYXRhOiBDb21wb25lbnQsIGNvbXBvbmVudENsYXNzOiBhbnkpOiBDb21wb25lbnRGYWN0b3J5PGFueT4ge1xuICAgICAgICBjb25zdCBjbXBDbGFzcyA9IGNvbXBvbmVudENsYXNzIHx8IGNsYXNzIFJ1bnRpbWVDb21wb25lbnQge1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkZWNvcmF0ZWRDbXAgPSBDb21wb25lbnQobWV0YWRhdGEpKGNtcENsYXNzKTtcblxuICAgICAgICBATmdNb2R1bGUoeyBpbXBvcnRzOiBbXSwgZGVjbGFyYXRpb25zOiBbZGVjb3JhdGVkQ21wXSB9KVxuICAgICAgICBjbGFzcyBSdW50aW1lQ29tcG9uZW50TW9kdWxlIHtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1vZHVsZTogTW9kdWxlV2l0aENvbXBvbmVudEZhY3Rvcmllczxhbnk+ID0gY29tcGlsZXIuY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNTeW5jKFJ1bnRpbWVDb21wb25lbnRNb2R1bGUpO1xuICAgICAgICByZXR1cm4gbW9kdWxlLmNvbXBvbmVudEZhY3Rvcmllcy5maW5kKCh4KSA9PiB4LmNvbXBvbmVudFR5cGUgPT09IGRlY29yYXRlZENtcCk7XG4gICAgfVxuXG4gICAgZm9jdXNUb2dnbGUoKSB7XG4gICAgICAgIHRoaXMuZm9jdXMgPSAhdGhpcy5mb2N1cztcbiAgICB9XG59XG4iXX0=