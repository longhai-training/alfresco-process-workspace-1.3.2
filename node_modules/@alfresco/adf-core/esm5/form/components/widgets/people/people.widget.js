/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { PeopleProcessService } from '../../../../services/people-process.service';
import { Component, ElementRef, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormService } from '../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
import { FormControl } from '@angular/forms';
import { of } from 'rxjs';
import { catchError, distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
var PeopleWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PeopleWidgetComponent, _super);
    function PeopleWidgetComponent(formService, peopleProcessService) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.peopleProcessService = peopleProcessService;
        _this.searchTerm = new FormControl();
        _this.errorMsg = '';
        _this.searchTerms$ = _this.searchTerm.valueChanges;
        _this.users$ = _this.searchTerms$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.errorMsg = '';
        })), distinctUntilChanged(), switchMap((/**
         * @param {?} searchTerm
         * @return {?}
         */
        function (searchTerm) {
            /** @type {?} */
            var value = searchTerm.email ? _this.getDisplayName(searchTerm) : searchTerm;
            return _this.formService.getWorkflowUsers(value, _this.groupId)
                .pipe(catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.errorMsg = err.message;
                return of();
            })));
        })), map((/**
         * @param {?} list
         * @return {?}
         */
        function (list) {
            /** @type {?} */
            var value = _this.searchTerm.value.email ? _this.getDisplayName(_this.searchTerm.value) : _this.searchTerm.value;
            _this.checkUserAndValidateForm(list, value);
            return list;
        })));
        _this.peopleSelected = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    PeopleWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field) {
            if (this.field.value) {
                this.searchTerm.setValue(this.field.value);
            }
            if (this.field.readOnly) {
                this.searchTerm.disable();
            }
            /** @type {?} */
            var params = this.field.params;
            if (params && params.restrictWithGroup) {
                /** @type {?} */
                var restrictWithGroup = (/** @type {?} */ (params.restrictWithGroup));
                this.groupId = restrictWithGroup.id;
            }
        }
    };
    /**
     * @param {?} list
     * @param {?} value
     * @return {?}
     */
    PeopleWidgetComponent.prototype.checkUserAndValidateForm = /**
     * @param {?} list
     * @param {?} value
     * @return {?}
     */
    function (list, value) {
        /** @type {?} */
        var isValidUser = this.isValidUser(list, value);
        if (isValidUser || value === '') {
            this.field.validationSummary.message = '';
            this.field.validate();
            this.field.form.validateForm();
        }
        else {
            this.field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';
            this.field.markAsInvalid();
            this.field.form.markAsInvalid();
        }
    };
    /**
     * @param {?} users
     * @param {?} name
     * @return {?}
     */
    PeopleWidgetComponent.prototype.isValidUser = /**
     * @param {?} users
     * @param {?} name
     * @return {?}
     */
    function (users, name) {
        var _this = this;
        if (users) {
            return users.find((/**
             * @param {?} user
             * @return {?}
             */
            function (user) {
                /** @type {?} */
                var selectedUser = _this.getDisplayName(user).toLocaleLowerCase() === name.toLocaleLowerCase();
                if (selectedUser) {
                    _this.peopleSelected.emit(user && user.id || undefined);
                }
                return selectedUser;
            }));
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PeopleWidgetComponent.prototype.getDisplayName = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            /** @type {?} */
            var displayName = (model.firstName || '') + " " + (model.lastName || '');
            return displayName.trim();
        }
        return '';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PeopleWidgetComponent.prototype.onItemSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this.field.value = item;
        }
    };
    PeopleWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'people-widget',
                    template: "<div class=\"adf-people-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\"\n     id=\"people-widget-content\">\n    <mat-form-field>\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n        <input #inputValue\n               matInput\n               class=\"adf-input\"\n               data-automation-id=\"adf-people-search-input\"\n               type=\"text\"\n               [id]=\"field.id\"\n               [formControl]=\"searchTerm\"\n               placeholder=\"{{field.placeholder}}\"\n               [matAutocomplete]=\"auto\">\n        <mat-autocomplete class=\"adf-people-widget-list\"\n                          #auto=\"matAutocomplete\"\n                          (optionSelected)=\"onItemSelect($event.option.value)\"\n                          [displayWith]=\"getDisplayName\">\n            <mat-option *ngFor=\"let user of users$ | async; let i = index\" [value]=\"user\">\n                <div class=\"adf-people-widget-row\" id=\"adf-people-widget-user-{{i}}\">\n                    <div [outerHTML]=\"user | usernameInitials:'adf-people-widget-pic'\"></div>\n                    <div *ngIf=\"user.pictureId\" class=\"adf-people-widget-image-row\">\n                        <img id=\"adf-people-widget-pic-{{i}}\" class=\"adf-people-widget-image\"\n                             [alt]=\"getDisplayName(user)\" [src]=\"peopleProcessService.getUserImage(user)\"/>\n                    </div>\n                    <span class=\"adf-people-label-name\">{{getDisplayName(user)}}</span>\n                </div>\n            </mat-option>\n        </mat-autocomplete>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PeopleWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: PeopleProcessService }
    ]; };
    PeopleWidgetComponent.propDecorators = {
        input: [{ type: ViewChild, args: ['inputValue',] }],
        peopleSelected: [{ type: Output }]
    };
    return PeopleWidgetComponent;
}(WidgetComponent));
export { PeopleWidgetComponent };
if (false) {
    /** @type {?} */
    PeopleWidgetComponent.prototype.input;
    /** @type {?} */
    PeopleWidgetComponent.prototype.peopleSelected;
    /** @type {?} */
    PeopleWidgetComponent.prototype.groupId;
    /** @type {?} */
    PeopleWidgetComponent.prototype.value;
    /** @type {?} */
    PeopleWidgetComponent.prototype.searchTerm;
    /** @type {?} */
    PeopleWidgetComponent.prototype.errorMsg;
    /** @type {?} */
    PeopleWidgetComponent.prototype.searchTerms$;
    /** @type {?} */
    PeopleWidgetComponent.prototype.users$;
    /** @type {?} */
    PeopleWidgetComponent.prototype.formService;
    /** @type {?} */
    PeopleWidgetComponent.prototype.peopleProcessService;
}
//# sourceMappingURL=data:application/json;base64,