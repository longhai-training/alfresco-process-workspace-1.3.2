/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { LogService } from '../../../../services/log.service';
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from '../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
var RadioButtonsWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(RadioButtonsWidgetComponent, _super);
    function RadioButtonsWidgetComponent(formService, logService) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.logService = logService;
        return _this;
    }
    /**
     * @return {?}
     */
    RadioButtonsWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field && this.field.restUrl) {
            if (this.field.form.taskId) {
                this.getOptionsByTaskId();
            }
            else {
                this.getOptionsByProcessDefinitionId();
            }
        }
    };
    /**
     * @return {?}
     */
    RadioButtonsWidgetComponent.prototype.getOptionsByTaskId = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        function (formFieldOption) {
            _this.field.options = formFieldOption || [];
            _this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); }));
    };
    /**
     * @return {?}
     */
    RadioButtonsWidgetComponent.prototype.getOptionsByProcessDefinitionId = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        function (formFieldOption) {
            _this.field.options = formFieldOption || [];
            _this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} optionSelected
     * @return {?}
     */
    RadioButtonsWidgetComponent.prototype.onOptionClick = /**
     * @param {?} optionSelected
     * @return {?}
     */
    function (optionSelected) {
        this.field.value = optionSelected;
        this.fieldChanged.emit(this.field);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    RadioButtonsWidgetComponent.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
    };
    RadioButtonsWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'radio-buttons-widget',
                    template: "<div class=\"adf-radio-buttons-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\" [id]=\"field.id\">\n    <div class=\"adf-radio-button-container\">\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n        <mat-radio-group class=\"adf-radio-group\" [(ngModel)]=\"field.value\">\n            <mat-radio-button\n                [id]=\"field.id + '-' + opt.id\"\n                [name]=\"field.id\"\n                [value]=\"opt.id\"\n                [disabled]=\"field.readOnly\"\n                [checked]=\"field.value === opt.id\"\n                (change)=\"onOptionClick(opt.id)\"\n                color=\"primary\"\n                class=\"adf-radio-button\" *ngFor=\"let opt of field.options\" >\n                {{opt.name}}\n            </mat-radio-button>\n        </mat-radio-group>\n    </div>\n    <error-widget [error]=\"field.validationSummary\" ></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n\n\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-radio-button-container{margin-bottom:15px}.adf-radio-group{display:inline-flex;flex-direction:column}.adf-radio-button{margin:5px}"]
                }] }
    ];
    /** @nocollapse */
    RadioButtonsWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService }
    ]; };
    return RadioButtonsWidgetComponent;
}(WidgetComponent));
export { RadioButtonsWidgetComponent };
if (false) {
    /** @type {?} */
    RadioButtonsWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    RadioButtonsWidgetComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tYnV0dG9ucy53aWRnZXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJmb3JtL2NvbXBvbmVudHMvd2lkZ2V0cy9yYWRpby1idXR0b25zL3JhZGlvLWJ1dHRvbnMud2lkZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxTQUFTLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTdELE9BQU8sRUFBRSxRQUFRLEVBQUcsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbkU7SUFPaUQsdURBQWU7SUFFNUQscUNBQW1CLFdBQXdCLEVBQ3ZCLFVBQXNCO1FBRDFDLFlBRUssa0JBQU0sV0FBVyxDQUFDLFNBQ3RCO1FBSGtCLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3ZCLGdCQUFVLEdBQVYsVUFBVSxDQUFZOztJQUUxQyxDQUFDOzs7O0lBRUQsOENBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUN4QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzthQUM3QjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsK0JBQStCLEVBQUUsQ0FBQzthQUMxQztTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELHdEQUFrQjs7O0lBQWxCO1FBQUEsaUJBYUM7UUFaRyxJQUFJLENBQUMsV0FBVzthQUNYLGtCQUFrQixDQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ2hCO2FBQ0EsU0FBUzs7OztRQUNOLFVBQUMsZUFBa0M7WUFDL0IsS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsZUFBZSxJQUFJLEVBQUUsQ0FBQztZQUMzQyxLQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzVCLENBQUM7Ozs7UUFDRCxVQUFDLEdBQUcsSUFBSyxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLEVBQ2pDLENBQUM7SUFDVixDQUFDOzs7O0lBRUQscUVBQStCOzs7SUFBL0I7UUFBQSxpQkFhQztRQVpHLElBQUksQ0FBQyxXQUFXO2FBQ1gsNkJBQTZCLENBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDaEI7YUFDQSxTQUFTOzs7O1FBQ04sVUFBQyxlQUFrQztZQUMvQixLQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxlQUFlLElBQUksRUFBRSxDQUFDO1lBQzNDLEtBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsQ0FBQzs7OztRQUNELFVBQUMsR0FBRyxJQUFLLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsRUFDakMsQ0FBQztJQUNWLENBQUM7Ozs7O0lBRUQsbURBQWE7Ozs7SUFBYixVQUFjLGNBQW1CO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7SUFFRCxpREFBVzs7OztJQUFYLFVBQVksS0FBVTtRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOztnQkE3REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLHdvQ0FBMEM7b0JBRTFDLElBQUksRUFBRSxRQUFRO29CQUNkLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBVlEsV0FBVztnQkFGWCxVQUFVOztJQXFFbkIsa0NBQUM7Q0FBQSxBQS9ERCxDQU9pRCxlQUFlLEdBd0QvRDtTQXhEWSwyQkFBMkI7OztJQUV4QixrREFBK0I7Ozs7O0lBQy9CLGlEQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9sb2cuc2VydmljZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvZm9ybS5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1GaWVsZE9wdGlvbiB9IGZyb20gJy4vLi4vY29yZS9mb3JtLWZpZWxkLW9wdGlvbic7XG5pbXBvcnQgeyBiYXNlSG9zdCAsIFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vLi4vd2lkZ2V0LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncmFkaW8tYnV0dG9ucy13aWRnZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9yYWRpby1idXR0b25zLndpZGdldC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9yYWRpby1idXR0b25zLndpZGdldC5zY3NzJ10sXG4gICAgaG9zdDogYmFzZUhvc3QsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBSYWRpb0J1dHRvbnNXaWRnZXRDb21wb25lbnQgZXh0ZW5kcyBXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICAgICAgIHN1cGVyKGZvcm1TZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQgJiYgdGhpcy5maWVsZC5yZXN0VXJsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC5mb3JtLnRhc2tJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9uc0J5VGFza0lkKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9uc0J5UHJvY2Vzc0RlZmluaXRpb25JZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0T3B0aW9uc0J5VGFza0lkKCkge1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0UmVzdEZpZWxkVmFsdWVzKFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQuZm9ybS50YXNrSWQsXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZC5pZFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoZm9ybUZpZWxkT3B0aW9uOiBGb3JtRmllbGRPcHRpb25bXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMgPSBmb3JtRmllbGRPcHRpb24gfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQudXBkYXRlRm9ybSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldE9wdGlvbnNCeVByb2Nlc3NEZWZpbml0aW9uSWQoKSB7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2VcbiAgICAgICAgICAgIC5nZXRSZXN0RmllbGRWYWx1ZXNCeVByb2Nlc3NJZChcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLmZvcm0ucHJvY2Vzc0RlZmluaXRpb25JZCxcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLmlkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChmb3JtRmllbGRPcHRpb246IEZvcm1GaWVsZE9wdGlvbltdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQub3B0aW9ucyA9IGZvcm1GaWVsZE9wdGlvbiB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZC51cGRhdGVGb3JtKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycilcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgb25PcHRpb25DbGljayhvcHRpb25TZWxlY3RlZDogYW55KSB7XG4gICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBvcHRpb25TZWxlY3RlZDtcbiAgICAgICAgdGhpcy5maWVsZENoYW5nZWQuZW1pdCh0aGlzLmZpZWxkKTtcbiAgICB9XG5cbiAgICBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgfVxuXG59XG4iXX0=