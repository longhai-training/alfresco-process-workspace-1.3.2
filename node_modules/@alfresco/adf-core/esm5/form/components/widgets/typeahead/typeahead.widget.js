/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { LogService } from '../../../../services/log.service';
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
var TypeaheadWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TypeaheadWidgetComponent, _super);
    function TypeaheadWidgetComponent(formService, logService) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.logService = logService;
        _this.minTermLength = 1;
        _this.options = [];
        return _this;
    }
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field.form.taskId && this.field.restUrl) {
            this.getValuesByTaskId();
        }
        else if (this.field.form.processDefinitionId && this.field.restUrl) {
            this.getValuesByProcessDefinitionId();
        }
        if (this.isReadOnlyType()) {
            this.value = this.field.value;
        }
    };
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.getValuesByTaskId = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        function (formFieldOption) {
            /** @type {?} */
            var options = formFieldOption || [];
            _this.field.options = options;
            /** @type {?} */
            var fieldValue = _this.field.value;
            if (fieldValue) {
                /** @type {?} */
                var toSelect = options.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === fieldValue || item.name.toLocaleLowerCase() === fieldValue.toLocaleLowerCase(); }));
                if (toSelect) {
                    _this.value = toSelect.name;
                }
            }
            _this.onFieldChanged(_this.field);
            _this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); }));
    };
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.getValuesByProcessDefinitionId = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        function (formFieldOption) {
            /** @type {?} */
            var options = formFieldOption || [];
            _this.field.options = options;
            /** @type {?} */
            var fieldValue = _this.field.value;
            if (fieldValue) {
                /** @type {?} */
                var toSelect = options.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === fieldValue; }));
                if (toSelect) {
                    _this.value = toSelect.name;
                }
            }
            _this.onFieldChanged(_this.field);
            _this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); }));
    };
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.getOptions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this.value.trim().toLocaleLowerCase();
        return this.field.options.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var name = item.name.toLocaleLowerCase();
            return name.indexOf(val) > -1;
        }));
    };
    /**
     * @param {?} optionName
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.isValidOptionName = /**
     * @param {?} optionName
     * @return {?}
     */
    function (optionName) {
        /** @type {?} */
        var option = this.field.options.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.name && item.name.toLocaleLowerCase() === optionName.toLocaleLowerCase(); }));
        return option ? true : false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.onKeyUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.value && this.value.trim().length >= this.minTermLength && this.oldValue !== this.value) {
            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {
                if (this.value.length >= this.minTermLength) {
                    this.options = this.getOptions();
                    this.oldValue = this.value;
                    if (this.isValidOptionName(this.value)) {
                        this.field.value = this.options[0].id;
                    }
                }
            }
        }
        if (this.isValueDefined() && this.value.trim().length === 0) {
            this.oldValue = this.value;
            this.options = [];
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.onItemSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this.field.value = item.id;
            this.value = item.name;
            this.onFieldChanged(this.field);
        }
    };
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.validate = /**
     * @return {?}
     */
    function () {
        this.field.value = this.value;
    };
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.isValueDefined = /**
     * @return {?}
     */
    function () {
        return this.value !== null && this.value !== undefined;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
    };
    /**
     * @return {?}
     */
    TypeaheadWidgetComponent.prototype.isReadOnlyType = /**
     * @return {?}
     */
    function () {
        return this.field.type === 'readonly' ? true : false;
    };
    TypeaheadWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'typeahead-widget',
                    template: "<div class=\"adf-typeahead-widget-container\">\n    <div class=\"adf-typeahead-widget {{field.className}}\"\n        [class.is-dirty]=\"value\"\n        [class.adf-invalid]=\"!field.isValid\"\n        [class.adf-readonly]=\"field.readOnly\"\n        id=\"typehead-div\">\n        <mat-form-field>\n            <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}</label>\n            <input matInput class=\"adf-input\"\n                   type=\"text\"\n                   [id]=\"field.id\"\n                   [(ngModel)]=\"value\"\n                   (ngModelChange)=\"validate()\"\n                   (keyup)=\"onKeyUp($event)\"\n                   [disabled]=\"field.readOnly\"\n                   placeholder=\"{{field.placeholder}}\"\n                   [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onItemSelect($event.option.value)\">\n                <mat-option *ngFor=\"let item of options\" [value]=\"item\">\n                    <span [id]=\"field.name+'_option_'+item.id\">{{item.name}}</span>\n                </mat-option>\n            </mat-autocomplete>\n        </mat-form-field>\n\n        <error-widget [error]=\"field.validationSummary\"></error-widget>\n        <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n    </div>\n</div>\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-typeahead-widget-container{position:relative;display:block}.adf-typeahead-widget{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    TypeaheadWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService }
    ]; };
    return TypeaheadWidgetComponent;
}(WidgetComponent));
export { TypeaheadWidgetComponent };
if (false) {
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.minTermLength;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.value;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.oldValue;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.options;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    TypeaheadWidgetComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,