/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../services/form.service';
import { FormFieldModel } from './core/index';
/** @type {?} */
export var baseHost = {
    '(click)': 'event($event)',
    '(blur)': 'event($event)',
    '(change)': 'event($event)',
    '(focus)': 'event($event)',
    '(focusin)': 'event($event)',
    '(focusout)': 'event($event)',
    '(input)': 'event($event)',
    '(invalid)': 'event($event)',
    '(select)': 'event($event)'
};
/**
 * Base widget component.
 */
var WidgetComponent = /** @class */ (function () {
    function WidgetComponent(formService) {
        this.formService = formService;
        /**
         * Does the widget show a read-only value? (ie, can't be edited)
         */
        this.readOnly = false;
        /**
         * Emitted when a field value changes.
         */
        this.fieldChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    WidgetComponent.prototype.hasField = /**
     * @return {?}
     */
    function () {
        return this.field ? true : false;
    };
    // Note for developers:
    // returns <any> object to be able binding it to the <element required="required"> attribute
    // Note for developers:
    // returns <any> object to be able binding it to the <element required="required"> attribute
    /**
     * @return {?}
     */
    WidgetComponent.prototype.isRequired = 
    // Note for developers:
    // returns <any> object to be able binding it to the <element required="required"> attribute
    /**
     * @return {?}
     */
    function () {
        if (this.field && this.field.required) {
            return true;
        }
        return null;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.isValid = /**
     * @return {?}
     */
    function () {
        return this.field.validationSummary ? true : false;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.hasValue = /**
     * @return {?}
     */
    function () {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.isInvalidFieldRequired = /**
     * @return {?}
     */
    function () {
        return !this.field.isValid && !this.field.validationSummary && this.isRequired();
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.fieldChanged.emit(this.field);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.checkVisibility = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.fieldChanged.emit(field);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.onFieldChanged = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.fieldChanged.emit(field);
    };
    /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.getHyperlinkUrl = /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var url = WidgetComponent.DEFAULT_HYPERLINK_URL;
        if (field && field.hyperlinkUrl) {
            url = field.hyperlinkUrl;
            if (!/^https?:\/\//i.test(url)) {
                url = "" + WidgetComponent.DEFAULT_HYPERLINK_SCHEME + url;
            }
        }
        return url;
    };
    /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.getHyperlinkText = /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field) {
            return field.displayText || field.hyperlinkUrl;
        }
        return null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    WidgetComponent.prototype.event = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.formService.formEvents.next(event);
    };
    WidgetComponent.DEFAULT_HYPERLINK_URL = '#';
    WidgetComponent.DEFAULT_HYPERLINK_SCHEME = 'http://';
    WidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'base-widget',
                    template: '',
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    WidgetComponent.ctorParameters = function () { return [
        { type: FormService }
    ]; };
    WidgetComponent.propDecorators = {
        readOnly: [{ type: Input }],
        field: [{ type: Input }],
        fieldChanged: [{ type: Output }]
    };
    return WidgetComponent;
}());
export { WidgetComponent };
if (false) {
    /** @type {?} */
    WidgetComponent.DEFAULT_HYPERLINK_URL;
    /** @type {?} */
    WidgetComponent.DEFAULT_HYPERLINK_SCHEME;
    /**
     * Does the widget show a read-only value? (ie, can't be edited)
     * @type {?}
     */
    WidgetComponent.prototype.readOnly;
    /**
     * Data to be displayed in the field
     * @type {?}
     */
    WidgetComponent.prototype.field;
    /**
     * Emitted when a field value changes.
     * @type {?}
     */
    WidgetComponent.prototype.fieldChanged;
    /** @type {?} */
    WidgetComponent.prototype.formService;
}
//# sourceMappingURL=data:application/json;base64,