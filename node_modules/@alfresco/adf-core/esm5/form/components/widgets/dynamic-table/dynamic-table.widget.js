/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { LogService } from '../../../../services/log.service';
import { ChangeDetectorRef, Component, ElementRef, ViewEncapsulation } from '@angular/core';
import { WidgetVisibilityService } from '../../../services/widget-visibility.service';
import { FormService } from './../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
import { DynamicTableModel } from './dynamic-table.widget.model';
var DynamicTableWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicTableWidgetComponent, _super);
    function DynamicTableWidgetComponent(formService, elementRef, visibilityService, logService, cd) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.elementRef = elementRef;
        _this.visibilityService = visibilityService;
        _this.logService = logService;
        _this.cd = cd;
        _this.ERROR_MODEL_NOT_FOUND = 'Table model not found';
        _this.editMode = false;
        _this.editRow = null;
        _this.selectArrayCode = [32, 0, 13];
        return _this;
    }
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field) {
            this.content = new DynamicTableModel(this.field, this.formService);
            this.visibilityService.refreshVisibility(this.field.form);
        }
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.forceFocusOnAddButton = /**
     * @return {?}
     */
    function () {
        if (this.content) {
            this.cd.detectChanges();
            /** @type {?} */
            var buttonAddRow = (/** @type {?} */ (this.elementRef.nativeElement.querySelector('#' + this.content.id + '-add-row')));
            if (this.isDynamicTableReady(buttonAddRow)) {
                buttonAddRow.focus();
            }
        }
    };
    /**
     * @private
     * @param {?} buttonAddRow
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.isDynamicTableReady = /**
     * @private
     * @param {?} buttonAddRow
     * @return {?}
     */
    function (buttonAddRow) {
        return this.field && !this.editMode && buttonAddRow;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.isValid = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var valid = true;
        if (this.content && this.content.field) {
            valid = this.content.field.isValid;
        }
        return valid;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.onRowClicked = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (this.content) {
            this.content.selectedRow = row;
        }
    };
    /**
     * @param {?} $event
     * @param {?} row
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.onKeyPressed = /**
     * @param {?} $event
     * @param {?} row
     * @return {?}
     */
    function ($event, row) {
        if (this.content && this.isEnterOrSpacePressed($event.keyCode)) {
            this.content.selectedRow = row;
        }
    };
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.isEnterOrSpacePressed = /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return this.selectArrayCode.indexOf(keyCode) !== -1;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.hasSelection = /**
     * @return {?}
     */
    function () {
        return !!(this.content && this.content.selectedRow);
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.moveSelectionUp = /**
     * @return {?}
     */
    function () {
        if (this.content && !this.readOnly) {
            this.content.moveRow(this.content.selectedRow, -1);
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.moveSelectionDown = /**
     * @return {?}
     */
    function () {
        if (this.content && !this.readOnly) {
            this.content.moveRow(this.content.selectedRow, 1);
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.deleteSelection = /**
     * @return {?}
     */
    function () {
        if (this.content && !this.readOnly) {
            this.content.deleteRow(this.content.selectedRow);
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.addNewRow = /**
     * @return {?}
     */
    function () {
        if (this.content && !this.readOnly) {
            this.editRow = (/** @type {?} */ ({
                isNew: true,
                selected: false,
                value: {}
            }));
            this.editMode = true;
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.editSelection = /**
     * @return {?}
     */
    function () {
        if (this.content && !this.readOnly) {
            this.editRow = this.copyRow(this.content.selectedRow);
            this.editMode = true;
            return true;
        }
        return false;
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.getCellValue = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        if (this.content) {
            /** @type {?} */
            var cellValue = this.content.getCellValue(row, column);
            if (column.type === 'Amount') {
                return (column.amountCurrency || '$') + ' ' + (cellValue || 0);
            }
            return cellValue;
        }
        return null;
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.onSaveChanges = /**
     * @return {?}
     */
    function () {
        if (this.content) {
            if (this.editRow.isNew) {
                /** @type {?} */
                var row = this.copyRow(this.editRow);
                this.content.selectedRow = null;
                this.content.addRow(row);
                this.editRow.isNew = false;
            }
            else {
                this.content.selectedRow.value = this.copyObject(this.editRow.value);
            }
            this.content.flushValue();
        }
        else {
            this.logService.error(this.ERROR_MODEL_NOT_FOUND);
        }
        this.editMode = false;
        this.forceFocusOnAddButton();
    };
    /**
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.onCancelChanges = /**
     * @return {?}
     */
    function () {
        this.editMode = false;
        this.editRow = null;
        this.forceFocusOnAddButton();
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.copyRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return (/** @type {?} */ ({
            value: this.copyObject(row.value)
        }));
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    DynamicTableWidgetComponent.prototype.copyObject = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var result = obj;
        if (typeof obj === 'object' && obj !== null && obj !== undefined) {
            result = Object.assign({}, obj);
            Object.keys(obj).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (typeof obj[key] === 'object') {
                    result[key] = _this.copyObject(obj[key]);
                }
            }));
        }
        return result;
    };
    DynamicTableWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dynamic-table-widget',
                    template: "<div class=\"adf-dynamic-table-scrolling {{field.className}}\"\n    [class.adf-invalid]=\"!isValid()\">\n    <div class=\"adf-label\">{{content.name}}<span *ngIf=\"isRequired()\">*</span></div>\n\n    <div *ngIf=\"!editMode\">\n        <div class=\"adf-table-container\">\n            <table class=\"adf-full-width adf-dynamic-table\" id=\"dynamic-table-{{content.id}}\">\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let column of content.visibleColumns\">\n                            {{column.name}}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let row of content.rows; let idx = index\" tabindex=\"0\" id=\"{{content.id}}-row-{{idx}}\"\n                        [class.adf-dynamic-table-widget__row-selected]=\"row.selected\" (keyup)=\"onKeyPressed($event, row)\">\n                        <td *ngFor=\"let column of content.visibleColumns\"\n                            (click)=\"onRowClicked(row)\">\n                            <span *ngIf=\"column.type !== 'Boolean' else checkbox\">\n                                {{ getCellValue(row, column) }}\n                            </span>\n                            <ng-template #checkbox>\n                                <mat-checkbox disabled [checked]=\"getCellValue(row, column)\">\n                                </mat-checkbox>\n                            </ng-template>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <div *ngIf=\"!readOnly\">\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"moveSelectionUp()\">\n                <mat-icon>arrow_upward</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"moveSelectionDown()\">\n                <mat-icon>arrow_downward</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"field.readOnly\"\n                    id=\"{{content.id}}-add-row\"\n                    (click)=\"addNewRow()\">\n                <mat-icon>add_circle_outline</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"deleteSelection()\">\n                <mat-icon>remove_circle_outline</mat-icon>\n            </button>\n            <button mat-button\n                    [disabled]=\"!hasSelection()\"\n                    (click)=\"editSelection()\">\n                <mat-icon>edit</mat-icon>\n            </button>\n        </div>\n     </div>\n\n     <row-editor *ngIf=\"editMode\"\n        [table]=\"content\"\n        [row]=\"editRow\"\n        (save)=\"onSaveChanges()\"\n        (cancel)=\"onCancelChanges()\">\n     </row-editor>\n    <error-widget [error]=\"field.validationSummary\" ></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DynamicTableWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: ElementRef },
        { type: WidgetVisibilityService },
        { type: LogService },
        { type: ChangeDetectorRef }
    ]; };
    return DynamicTableWidgetComponent;
}(WidgetComponent));
export { DynamicTableWidgetComponent };
if (false) {
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.ERROR_MODEL_NOT_FOUND;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.content;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.editMode;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.editRow;
    /**
     * @type {?}
     * @private
     */
    DynamicTableWidgetComponent.prototype.selectArrayCode;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.formService;
    /** @type {?} */
    DynamicTableWidgetComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DynamicTableWidgetComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @private
     */
    DynamicTableWidgetComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    DynamicTableWidgetComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,