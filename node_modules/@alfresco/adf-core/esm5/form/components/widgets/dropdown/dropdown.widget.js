/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { LogService } from '../../../../services/log.service';
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from '../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
var DropdownWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownWidgetComponent, _super);
    function DropdownWidgetComponent(formService, logService) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.logService = logService;
        return _this;
    }
    /**
     * @return {?}
     */
    DropdownWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field && this.field.restUrl) {
            if (this.field.form.taskId) {
                this.getValuesByTaskId();
            }
            else {
                this.getValuesByProcessDefinitionId();
            }
        }
    };
    /**
     * @return {?}
     */
    DropdownWidgetComponent.prototype.getValuesByTaskId = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        function (formFieldOption) {
            /** @type {?} */
            var options = [];
            if (_this.field.emptyOption) {
                options.push(_this.field.emptyOption);
            }
            _this.field.options = options.concat((formFieldOption || []));
            _this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); }));
    };
    /**
     * @return {?}
     */
    DropdownWidgetComponent.prototype.getValuesByProcessDefinitionId = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        function (formFieldOption) {
            /** @type {?} */
            var options = [];
            if (_this.field.emptyOption) {
                options.push(_this.field.emptyOption);
            }
            _this.field.options = options.concat((formFieldOption || []));
            _this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} option
     * @param {?} fieldValue
     * @return {?}
     */
    DropdownWidgetComponent.prototype.getOptionValue = /**
     * @param {?} option
     * @param {?} fieldValue
     * @return {?}
     */
    function (option, fieldValue) {
        /** @type {?} */
        var optionValue = '';
        if (option.id === 'empty' || option.name !== fieldValue) {
            optionValue = option.id;
        }
        else {
            optionValue = option.name;
        }
        return optionValue;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    DropdownWidgetComponent.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
    };
    /**
     * @return {?}
     */
    DropdownWidgetComponent.prototype.isReadOnlyType = /**
     * @return {?}
     */
    function () {
        return this.field.type === 'readonly' ? true : false;
    };
    DropdownWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dropdown-widget',
                    template: "<div class=\"adf-dropdown-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n    <mat-form-field>\n        <mat-select class=\"adf-select\"\n                    [id]=\"field.id\"\n                    [(ngModel)]=\"field.value\"\n                    [disabled]=\"field.readOnly\"\n                    (ngModelChange)=\"onFieldChanged(field)\">\n            <mat-option *ngFor=\"let opt of field.options\"\n                        [value]=\"getOptionValue(opt, field.value)\"\n                        [id]=\"opt.id\">{{opt.name}}\n            </mat-option>\n            <mat-option id=\"readonlyOption\" *ngIf=\"isReadOnlyType()\" [value]=\"field.value\">{{field.value}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget class=\"adf-dropdown-required-message\" *ngIf=\"isInvalidFieldRequired()\"\n                  required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-dropdown-widget{width:100%;margin-top:13px}.adf-dropdown-widget .adf-select{padding-top:0!important;width:100%}.adf-dropdown-widget .mat-select-value-text{font-size:14px}.adf-dropdown-widget-select{width:100%}.adf-dropdown-widget-dropdown-required-message .adf-error-text-container{margin-top:1px!important}"]
                }] }
    ];
    /** @nocollapse */
    DropdownWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService }
    ]; };
    return DropdownWidgetComponent;
}(WidgetComponent));
export { DropdownWidgetComponent };
if (false) {
    /** @type {?} */
    DropdownWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    DropdownWidgetComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,