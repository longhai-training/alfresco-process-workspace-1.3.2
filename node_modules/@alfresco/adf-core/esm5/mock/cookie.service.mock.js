/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CookieService } from '../services/cookie.service';
var CookieServiceMock = /** @class */ (function (_super) {
    tslib_1.__extends(CookieServiceMock, _super);
    function CookieServiceMock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @override */
    /**
     * @override
     * @return {?}
     */
    CookieServiceMock.prototype.isEnabled = /**
     * @override
     * @return {?}
     */
    function () {
        return true;
    };
    /** @override */
    /**
     * @override
     * @param {?} key
     * @return {?}
     */
    CookieServiceMock.prototype.getItem = /**
     * @override
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this[key] && this[key].data || null;
    };
    /** @override */
    /**
     * @override
     * @param {?} key
     * @param {?} data
     * @param {?} expiration
     * @param {?} path
     * @return {?}
     */
    CookieServiceMock.prototype.setItem = /**
     * @override
     * @param {?} key
     * @param {?} data
     * @param {?} expiration
     * @param {?} path
     * @return {?}
     */
    function (key, data, expiration, path) {
        this[key] = { data: data, expiration: expiration, path: path };
    };
    /** @override */
    /**
     * @override
     * @return {?}
     */
    CookieServiceMock.prototype.clear = /**
     * @override
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (_this.hasOwnProperty(key) && typeof (_this[key]) !== 'function') {
                _this[key] = undefined;
            }
        }));
    };
    return CookieServiceMock;
}(CookieService));
export { CookieServiceMock };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbIm1vY2svY29va2llLnNlcnZpY2UubW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTNEO0lBQXVDLDZDQUFhO0lBQXBEOztJQXlCQSxDQUFDO0lBdkJHLGdCQUFnQjs7Ozs7SUFDaEIscUNBQVM7Ozs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxnQkFBZ0I7Ozs7OztJQUNoQixtQ0FBTzs7Ozs7SUFBUCxVQUFRLEdBQVc7UUFDZixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztJQUMvQyxDQUFDO0lBRUQsZ0JBQWdCOzs7Ozs7Ozs7SUFDaEIsbUNBQU87Ozs7Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsSUFBWSxFQUFFLFVBQXVCLEVBQUUsSUFBbUI7UUFDM0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUMsSUFBSSxNQUFBLEVBQUUsVUFBVSxZQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZ0JBQWdCOzs7OztJQUNoQixpQ0FBSzs7OztJQUFMO1FBQUEsaUJBTUM7UUFMRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLEdBQUc7WUFDMUIsSUFBSSxLQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU0sQ0FBQyxLQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxVQUFVLEVBQUU7Z0JBQzlELEtBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUM7YUFDekI7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUF6QkQsQ0FBdUMsYUFBYSxHQXlCbkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29va2llLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgQ29va2llU2VydmljZU1vY2sgZXh0ZW5kcyBDb29raWVTZXJ2aWNlIHtcblxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBpc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBnZXRJdGVtKGtleTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzW2tleV0gJiYgdGhpc1trZXldLmRhdGEgfHwgbnVsbDtcbiAgICB9XG5cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nLCBleHBpcmF0aW9uOiBEYXRlIHwgbnVsbCwgcGF0aDogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICB0aGlzW2tleV0gPSB7ZGF0YSwgZXhwaXJhdGlvbiwgcGF0aH07XG4gICAgfVxuXG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KGtleSkgJiYgdHlwZW9mKHRoaXNba2V5XSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==