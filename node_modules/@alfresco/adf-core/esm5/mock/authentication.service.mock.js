/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { of, throwError } from 'rxjs';
// TODO: should be extending AuthenticationService
var 
// TODO: should be extending AuthenticationService
AuthenticationMock /*extends AuthenticationService*/ = /** @class */ (function () {
    function AuthenticationMock() {
        this.redirectUrl = null;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    AuthenticationMock.prototype.setRedirectUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.redirectUrl = url;
    };
    /**
     * @return {?}
     */
    AuthenticationMock.prototype.getRedirectUrl = /**
     * @return {?}
     */
    function () {
        return this.redirectUrl ? this.redirectUrl.url : null;
    };
    // TODO: real auth service returns Observable<string>
    // TODO: real auth service returns Observable<string>
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    AuthenticationMock.prototype.login = 
    // TODO: real auth service returns Observable<string>
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    function (username, password) {
        if (username === 'fake-username' && password === 'fake-password') {
            return of({ type: 'type', ticket: 'ticket' });
        }
        if (username === 'fake-username-CORS-error' && password === 'fake-password') {
            return throwError({
                error: {
                    crossDomain: true,
                    message: 'ERROR: the network is offline, Origin is not allowed by Access-Control-Allow-Origin'
                }
            });
        }
        if (username === 'fake-username-CSRF-error' && password === 'fake-password') {
            return throwError({ message: 'ERROR: Invalid CSRF-token', status: 403 });
        }
        if (username === 'fake-username-ECM-access-error' && password === 'fake-password') {
            return throwError({ message: 'ERROR: 00170728 Access Denied.  The system is currently in read-only mode', status: 403 });
        }
        return throwError('Fake server error');
    };
    return AuthenticationMock;
}());
// TODO: should be extending AuthenticationService
export { AuthenticationMock };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthenticationMock.prototype.redirectUrl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5tb2NrLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsibW9jay9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlLm1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBSWxEOzttQkFBZ0MsaUNBQWlDO0lBQWpFO1FBQ1ksZ0JBQVcsR0FBcUIsSUFBSSxDQUFDO0lBbUNqRCxDQUFDOzs7OztJQWpDRywyQ0FBYzs7OztJQUFkLFVBQWUsR0FBcUI7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVELDJDQUFjOzs7SUFBZDtRQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMxRCxDQUFDO0lBRUQscURBQXFEOzs7Ozs7O0lBQ3JELGtDQUFLOzs7Ozs7O0lBQUwsVUFBTSxRQUFnQixFQUFFLFFBQWdCO1FBQ3BDLElBQUksUUFBUSxLQUFLLGVBQWUsSUFBSSxRQUFRLEtBQUssZUFBZSxFQUFFO1lBQzlELE9BQU8sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksUUFBUSxLQUFLLDBCQUEwQixJQUFJLFFBQVEsS0FBSyxlQUFlLEVBQUU7WUFDekUsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsS0FBSyxFQUFFO29CQUNILFdBQVcsRUFBRSxJQUFJO29CQUNqQixPQUFPLEVBQUUscUZBQXFGO2lCQUNqRzthQUNKLENBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxRQUFRLEtBQUssMEJBQTBCLElBQUksUUFBUSxLQUFLLGVBQWUsRUFBRTtZQUN6RSxPQUFPLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUMxRTtRQUVELElBQUksUUFBUSxLQUFLLGdDQUFnQyxJQUFJLFFBQVEsS0FBSyxlQUFlLEVBQUU7WUFDL0UsT0FBTyxVQUFVLENBQUMsRUFBQyxPQUFPLEVBQUUsMkVBQTJFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7U0FDMUg7UUFFRCxPQUFPLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFwQ0QsSUFvQ0M7Ozs7Ozs7O0lBbkNHLHlDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZWRpcmVjdGlvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3JlZGlyZWN0aW9uLm1vZGVsJztcblxuLy8gVE9ETzogc2hvdWxkIGJlIGV4dGVuZGluZyBBdXRoZW50aWNhdGlvblNlcnZpY2VcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvbk1vY2sgLypleHRlbmRzIEF1dGhlbnRpY2F0aW9uU2VydmljZSovIHtcbiAgICBwcml2YXRlIHJlZGlyZWN0VXJsOiBSZWRpcmVjdGlvbk1vZGVsID0gbnVsbDtcblxuICAgIHNldFJlZGlyZWN0VXJsKHVybDogUmVkaXJlY3Rpb25Nb2RlbCkge1xuICAgICAgICB0aGlzLnJlZGlyZWN0VXJsID0gdXJsO1xuICAgIH1cblxuICAgIGdldFJlZGlyZWN0VXJsKCk6IHN0cmluZ3xudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkaXJlY3RVcmwgPyB0aGlzLnJlZGlyZWN0VXJsLnVybCA6IG51bGw7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVhbCBhdXRoIHNlcnZpY2UgcmV0dXJucyBPYnNlcnZhYmxlPHN0cmluZz5cbiAgICBsb2dpbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTx7IHR5cGU6IHN0cmluZywgdGlja2V0OiBhbnkgfT4ge1xuICAgICAgICBpZiAodXNlcm5hbWUgPT09ICdmYWtlLXVzZXJuYW1lJyAmJiBwYXNzd29yZCA9PT0gJ2Zha2UtcGFzc3dvcmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gb2YoeyB0eXBlOiAndHlwZScsIHRpY2tldDogJ3RpY2tldCd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUtQ09SUy1lcnJvcicgJiYgcGFzc3dvcmQgPT09ICdmYWtlLXBhc3N3b3JkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3Ioe1xuICAgICAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgICAgIGNyb3NzRG9tYWluOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRVJST1I6IHRoZSBuZXR3b3JrIGlzIG9mZmxpbmUsIE9yaWdpbiBpcyBub3QgYWxsb3dlZCBieSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlcm5hbWUgPT09ICdmYWtlLXVzZXJuYW1lLUNTUkYtZXJyb3InICYmIHBhc3N3b3JkID09PSAnZmFrZS1wYXNzd29yZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKHttZXNzYWdlOiAnRVJST1I6IEludmFsaWQgQ1NSRi10b2tlbicsIHN0YXR1czogNDAzfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlcm5hbWUgPT09ICdmYWtlLXVzZXJuYW1lLUVDTS1hY2Nlc3MtZXJyb3InICYmIHBhc3N3b3JkID09PSAnZmFrZS1wYXNzd29yZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKHttZXNzYWdlOiAnRVJST1I6IDAwMTcwNzI4IEFjY2VzcyBEZW5pZWQuICBUaGUgc3lzdGVtIGlzIGN1cnJlbnRseSBpbiByZWFkLW9ubHkgbW9kZScsIHN0YXR1czogNDAzfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcignRmFrZSBzZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG4iXX0=