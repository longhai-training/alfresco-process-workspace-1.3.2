/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
var NodeNameTooltipPipe = /** @class */ (function () {
    function NodeNameTooltipPipe() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.transform = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            return this.getNodeTooltip(node);
        }
        return null;
    };
    /**
     * @private
     * @param {?} lines
     * @param {?} line
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.containsLine = /**
     * @private
     * @param {?} lines
     * @param {?} line
     * @return {?}
     */
    function (lines, line) {
        return lines.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.toLowerCase() === line.toLowerCase();
        }));
    };
    /**
     * @private
     * @param {?} lines
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.removeDuplicateLines = /**
     * @private
     * @param {?} lines
     * @return {?}
     */
    function (lines) {
        var _this = this;
        /** @type {?} */
        var reducer = (/**
         * @param {?} acc
         * @param {?} line
         * @return {?}
         */
        function (acc, line) {
            if (!_this.containsLine(acc, line)) {
                acc.push(line);
            }
            return acc;
        });
        return lines.reduce(reducer, []);
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    NodeNameTooltipPipe.prototype.getNodeTooltip = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (!node || !node.entry) {
            return null;
        }
        var _a = node.entry, properties = _a.properties, name = _a.name;
        /** @type {?} */
        var lines = [name];
        if (properties) {
            var title = properties["cm:title"], description = properties["cm:description"];
            if (title && description) {
                lines[0] = title;
                lines[1] = description;
            }
            if (title) {
                lines[1] = title;
            }
            if (description) {
                lines[1] = description;
            }
        }
        return this.removeDuplicateLines(lines).join("\n");
    };
    NodeNameTooltipPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'adfNodeNameTooltip'
                },] }
    ];
    return NodeNameTooltipPipe;
}());
export { NodeNameTooltipPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1uYW1lLXRvb2x0aXAucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL25vZGUtbmFtZS10b29sdGlwLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQ7SUFBQTtJQXlEQSxDQUFDOzs7OztJQXBERyx1Q0FBUzs7OztJQUFULFVBQVUsSUFBZTtRQUNyQixJQUFJLElBQUksRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7Ozs7SUFFTywwQ0FBWTs7Ozs7O0lBQXBCLFVBQXFCLEtBQWUsRUFBRSxJQUFZO1FBQzlDLE9BQU8sS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFDLElBQVk7WUFDM0IsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JELENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7O0lBRU8sa0RBQW9COzs7OztJQUE1QixVQUE2QixLQUFlO1FBQTVDLGlCQU9DOztZQU5TLE9BQU87Ozs7O1FBQUcsVUFBQyxHQUFhLEVBQUUsSUFBWTtZQUN4QyxJQUFJLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUFFO1lBQ3RELE9BQU8sR0FBRyxDQUFDO1FBQ2YsQ0FBQyxDQUFBO1FBRUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFFTyw0Q0FBYzs7Ozs7SUFBdEIsVUFBdUIsSUFBZTtRQUNsQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNmO1FBRU8sSUFBQSxlQUEyQixFQUFsQiwwQkFBVSxFQUFFLGNBQU07O1lBQzdCLEtBQUssR0FBRyxDQUFFLElBQUksQ0FBRTtRQUV0QixJQUFJLFVBQVUsRUFBRTtZQUVSLElBQUEsOEJBQWlCLEVBQ2pCLDBDQUE2QjtZQUdqQyxJQUFJLEtBQUssSUFBSSxXQUFXLEVBQUU7Z0JBQ3RCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2pCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUM7YUFDMUI7WUFFRCxJQUFJLEtBQUssRUFBRTtnQkFDUCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ3BCO1lBRUQsSUFBSSxXQUFXLEVBQUU7Z0JBQ2IsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQzthQUMxQjtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELENBQUM7O2dCQXhESixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLG9CQUFvQjtpQkFDN0I7O0lBdURELDBCQUFDO0NBQUEsQUF6REQsSUF5REM7U0F0RFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnYWRmTm9kZU5hbWVUb29sdGlwJ1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlTmFtZVRvb2x0aXBQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICB0cmFuc2Zvcm0obm9kZTogTm9kZUVudHJ5KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVUb29sdGlwKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udGFpbnNMaW5lKGxpbmVzOiBzdHJpbmdbXSwgbGluZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBsaW5lcy5zb21lKChpdGVtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvTG93ZXJDYXNlKCkgPT09IGxpbmUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVEdXBsaWNhdGVMaW5lcyhsaW5lczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IHJlZHVjZXIgPSAoYWNjOiBzdHJpbmdbXSwgbGluZTogc3RyaW5nKTogc3RyaW5nW10gPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zTGluZShhY2MsIGxpbmUpKSB7IGFjYy5wdXNoKGxpbmUpOyB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBsaW5lcy5yZWR1Y2UocmVkdWNlciwgW10pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Tm9kZVRvb2x0aXAobm9kZTogTm9kZUVudHJ5KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLmVudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZW50cnk6IHsgcHJvcGVydGllcywgbmFtZSB9IH0gPSBub2RlO1xuICAgICAgICBjb25zdCBsaW5lcyA9IFsgbmFtZSBdO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgJ2NtOnRpdGxlJzogdGl0bGUsXG4gICAgICAgICAgICAgICAgJ2NtOmRlc2NyaXB0aW9uJzogZGVzY3JpcHRpb25cbiAgICAgICAgICAgIH0gPSBwcm9wZXJ0aWVzO1xuXG4gICAgICAgICAgICBpZiAodGl0bGUgJiYgZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBsaW5lc1swXSA9IHRpdGxlO1xuICAgICAgICAgICAgICAgIGxpbmVzWzFdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgICAgIGxpbmVzWzFdID0gdGl0bGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIGxpbmVzWzFdID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVEdXBsaWNhdGVMaW5lcyhsaW5lcykuam9pbihgXFxuYCk7XG4gICAgfVxufVxuIl19