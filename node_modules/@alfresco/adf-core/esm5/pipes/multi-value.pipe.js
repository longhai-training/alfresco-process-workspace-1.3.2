/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Pipe } from '@angular/core';
var MultiValuePipe = /** @class */ (function () {
    function MultiValuePipe() {
    }
    /**
     * @param {?} values
     * @param {?=} valueSeparator
     * @return {?}
     */
    MultiValuePipe.prototype.transform = /**
     * @param {?} values
     * @param {?=} valueSeparator
     * @return {?}
     */
    function (values, valueSeparator) {
        if (valueSeparator === void 0) { valueSeparator = MultiValuePipe.DEFAULT_SEPARATOR; }
        if (values && values instanceof Array) {
            /** @type {?} */
            var valueList = values.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value.trim(); }));
            return valueList.join(valueSeparator);
        }
        return (/** @type {?} */ (values));
    };
    MultiValuePipe.DEFAULT_SEPARATOR = ', ';
    MultiValuePipe.decorators = [
        { type: Pipe, args: [{ name: 'multiValue' },] }
    ];
    return MultiValuePipe;
}());
export { MultiValuePipe };
if (false) {
    /** @type {?} */
    MultiValuePipe.DEFAULT_SEPARATOR;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktdmFsdWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL211bHRpLXZhbHVlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQ7SUFBQTtJQWNBLENBQUM7Ozs7OztJQVRHLGtDQUFTOzs7OztJQUFULFVBQVUsTUFBMEIsRUFBRSxjQUF5RDtRQUF6RCwrQkFBQSxFQUFBLGlCQUF5QixjQUFjLENBQUMsaUJBQWlCO1FBRTNGLElBQUksTUFBTSxJQUFJLE1BQU0sWUFBWSxLQUFLLEVBQUU7O2dCQUM3QixTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBWixDQUFZLEVBQUM7WUFDckQsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsT0FBTyxtQkFBUyxNQUFNLEVBQUEsQ0FBQztJQUMzQixDQUFDO0lBVk0sZ0NBQWlCLEdBQUcsSUFBSSxDQUFDOztnQkFIbkMsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTs7SUFjNUIscUJBQUM7Q0FBQSxBQWRELElBY0M7U0FiWSxjQUFjOzs7SUFFdkIsaUNBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7IG5hbWU6ICdtdWx0aVZhbHVlJyB9KVxuZXhwb3J0IGNsYXNzIE11bHRpVmFsdWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9TRVBBUkFUT1IgPSAnLCAnO1xuXG4gICAgdHJhbnNmb3JtKHZhbHVlczogc3RyaW5nIHwgc3RyaW5nIFtdLCB2YWx1ZVNlcGFyYXRvcjogc3RyaW5nID0gTXVsdGlWYWx1ZVBpcGUuREVGQVVMVF9TRVBBUkFUT1IpOiBzdHJpbmcge1xuXG4gICAgICAgIGlmICh2YWx1ZXMgJiYgdmFsdWVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTGlzdCA9IHZhbHVlcy5tYXAoKHZhbHVlKSA9PiB2YWx1ZS50cmltKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlTGlzdC5qb2luKHZhbHVlU2VwYXJhdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiA8c3RyaW5nPiB2YWx1ZXM7XG4gICAgfVxufVxuIl19