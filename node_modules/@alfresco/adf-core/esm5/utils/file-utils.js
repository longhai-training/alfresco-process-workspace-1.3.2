/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @record
 */
export function FileInfo() { }
if (false) {
    /** @type {?|undefined} */
    FileInfo.prototype.entry;
    /** @type {?|undefined} */
    FileInfo.prototype.file;
    /** @type {?|undefined} */
    FileInfo.prototype.relativeFolder;
}
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * @param {?} folder
     * @return {?}
     */
    FileUtils.flatten = /**
     * @param {?} folder
     * @return {?}
     */
    function (folder) {
        /** @type {?} */
        var reader = folder.createReader();
        /** @type {?} */
        var files = [];
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var iterations = [];
            ((/**
             * @return {?}
             */
            function traverse() {
                reader.readEntries((/**
                 * @param {?} entries
                 * @return {?}
                 */
                function (entries) {
                    if (!entries.length) {
                        Promise.all(iterations).then((/**
                         * @return {?}
                         */
                        function () { return resolve(files); }));
                    }
                    else {
                        iterations.push(Promise.all(entries.map((/**
                         * @param {?} entry
                         * @return {?}
                         */
                        function (entry) {
                            if (entry.isFile) {
                                return new Promise((/**
                                 * @param {?} resolveFile
                                 * @return {?}
                                 */
                                function (resolveFile) {
                                    entry.file((/**
                                     * @param {?} file
                                     * @return {?}
                                     */
                                    function (file) {
                                        files.push({
                                            entry: entry,
                                            file: file,
                                            relativeFolder: entry.fullPath.replace(/\/[^\/]*$/, '')
                                        });
                                        resolveFile();
                                    }));
                                }));
                            }
                            else {
                                return FileUtils.flatten(entry).then((/**
                                 * @param {?} result
                                 * @return {?}
                                 */
                                function (result) {
                                    files.push.apply(files, tslib_1.__spread(result));
                                }));
                            }
                        }))));
                        // Try calling traverse() again for the same dir, according to spec
                        traverse();
                    }
                }));
            }))();
        }));
    };
    /**
     * @param {?} fileList
     * @return {?}
     */
    FileUtils.toFileArray = /**
     * @param {?} fileList
     * @return {?}
     */
    function (fileList) {
        /** @type {?} */
        var result = [];
        if (fileList && fileList.length > 0) {
            for (var i = 0; i < fileList.length; i++) {
                result.push(fileList[i]);
            }
        }
        return result;
    };
    return FileUtils;
}());
export { FileUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInV0aWxzL2ZpbGUtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLDhCQUlDOzs7SUFIRyx5QkFBWTs7SUFDWix3QkFBWTs7SUFDWixrQ0FBd0I7O0FBRzVCO0lBQUE7SUFpREEsQ0FBQzs7Ozs7SUEvQ1UsaUJBQU87Ozs7SUFBZCxVQUFlLE1BQVc7O1lBQ2hCLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFOztZQUM5QixLQUFLLEdBQWUsRUFBRTtRQUM1QixPQUFPLElBQUksT0FBTzs7OztRQUFDLFVBQUMsT0FBTzs7Z0JBQ2pCLFVBQVUsR0FBRyxFQUFFO1lBQ3JCOzs7WUFBQyxTQUFTLFFBQVE7Z0JBQ2QsTUFBTSxDQUFDLFdBQVc7Ozs7Z0JBQUMsVUFBQyxPQUFPO29CQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTt3QkFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJOzs7d0JBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBZCxDQUFjLEVBQUMsQ0FBQztxQkFDdEQ7eUJBQU07d0JBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHOzs7O3dCQUFDLFVBQUMsS0FBSzs0QkFDMUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dDQUNkLE9BQU8sSUFBSSxPQUFPOzs7O2dDQUFDLFVBQUMsV0FBVztvQ0FDM0IsS0FBSyxDQUFDLElBQUk7Ozs7b0NBQUMsVUFBVSxJQUFVO3dDQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDOzRDQUNQLEtBQUssRUFBRSxLQUFLOzRDQUNaLElBQUksRUFBRSxJQUFJOzRDQUNWLGNBQWMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO3lDQUMxRCxDQUFDLENBQUM7d0NBQ0gsV0FBVyxFQUFFLENBQUM7b0NBQ2xCLENBQUMsRUFBQyxDQUFDO2dDQUNQLENBQUMsRUFBQyxDQUFDOzZCQUNOO2lDQUFNO2dDQUNILE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJOzs7O2dDQUFDLFVBQUMsTUFBTTtvQ0FDeEMsS0FBSyxDQUFDLElBQUksT0FBVixLQUFLLG1CQUFTLE1BQU0sR0FBRTtnQ0FDMUIsQ0FBQyxFQUFDLENBQUM7NkJBQ047d0JBQ0wsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNMLG1FQUFtRTt3QkFDbkUsUUFBUSxFQUFFLENBQUM7cUJBQ2Q7Z0JBQ0wsQ0FBQyxFQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsRUFBRSxDQUFDO1FBQ1QsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVNLHFCQUFXOzs7O0lBQWxCLFVBQW1CLFFBQWtCOztZQUMzQixNQUFNLEdBQUcsRUFBRTtRQUVqQixJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtTQUNKO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FBQyxBQWpERCxJQWlEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUluZm8ge1xuICAgIGVudHJ5PzogYW55O1xuICAgIGZpbGU/OiBGaWxlO1xuICAgIHJlbGF0aXZlRm9sZGVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRmlsZVV0aWxzIHtcblxuICAgIHN0YXRpYyBmbGF0dGVuKGZvbGRlcjogYW55KTogUHJvbWlzZTxGaWxlSW5mb1tdPiB7XG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGZvbGRlci5jcmVhdGVSZWFkZXIoKTtcbiAgICAgICAgY29uc3QgZmlsZXM6IEZpbGVJbmZvW10gPSBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVyYXRpb25zID0gW107XG4gICAgICAgICAgICAoZnVuY3Rpb24gdHJhdmVyc2UoKSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRFbnRyaWVzKChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZW50cmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKGl0ZXJhdGlvbnMpLnRoZW4oKCkgPT4gcmVzb2x2ZShmaWxlcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0aW9ucy5wdXNoKFByb21pc2UuYWxsKGVudHJpZXMubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlRmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuZmlsZShmdW5jdGlvbiAoZmlsZTogRmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeTogZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlRm9sZGVyOiBlbnRyeS5mdWxsUGF0aC5yZXBsYWNlKC9cXC9bXlxcL10qJC8sICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVGaWxlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZpbGVVdGlscy5mbGF0dGVuKGVudHJ5KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goLi4ucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSBjYWxsaW5nIHRyYXZlcnNlKCkgYWdhaW4gZm9yIHRoZSBzYW1lIGRpciwgYWNjb3JkaW5nIHRvIHNwZWNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0ZpbGVBcnJheShmaWxlTGlzdDogRmlsZUxpc3QpOiBGaWxlW10ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgICBpZiAoZmlsZUxpc3QgJiYgZmlsZUxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZpbGVMaXN0W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIl19