/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { ContentService } from '../../services/content.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { EcmUserModel } from '../models/ecm-user.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/content.service";
import * as i3 from "../../services/log.service";
var EcmUserService = /** @class */ (function () {
    function EcmUserService(apiService, contentService, logService) {
        this.apiService = apiService;
        this.contentService = contentService;
        this.logService = logService;
    }
    /**
     * Gets information about a user identified by their username.
     * @param userName Target username
     * @returns User information
     */
    /**
     * Gets information about a user identified by their username.
     * @param {?} userName Target username
     * @return {?} User information
     */
    EcmUserService.prototype.getUserInfo = /**
     * Gets information about a user identified by their username.
     * @param {?} userName Target username
     * @return {?} User information
     */
    function (userName) {
        var _this = this;
        return from(this.apiService.getInstance().core.peopleApi.getPerson(userName))
            .pipe(map((/**
         * @param {?} personEntry
         * @return {?}
         */
        function (personEntry) {
            return new EcmUserModel(personEntry.entry);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets information about the user who is currently logged-in.
     * @returns User information as for getUserInfo
     */
    /**
     * Gets information about the user who is currently logged-in.
     * @return {?} User information as for getUserInfo
     */
    EcmUserService.prototype.getCurrentUserInfo = /**
     * Gets information about the user who is currently logged-in.
     * @return {?} User information as for getUserInfo
     */
    function () {
        return this.getUserInfo('-me-');
    };
    /**
     * Returns a profile image as a URL.
     * @param avatarId Target avatar
     * @returns Image URL
     */
    /**
     * Returns a profile image as a URL.
     * @param {?} avatarId Target avatar
     * @return {?} Image URL
     */
    EcmUserService.prototype.getUserProfileImage = /**
     * Returns a profile image as a URL.
     * @param {?} avatarId Target avatar
     * @return {?} Image URL
     */
    function (avatarId) {
        if (avatarId) {
            /** @type {?} */
            var nodeObj = { entry: { id: avatarId } };
            return this.contentService.getContentUrl(nodeObj);
        }
    };
    /**
     * Throw the error
     * @param error
     */
    /**
     * Throw the error
     * @private
     * @param {?} error
     * @return {?}
     */
    EcmUserService.prototype.handleError = /**
     * Throw the error
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    EcmUserService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EcmUserService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: ContentService },
        { type: LogService }
    ]; };
    /** @nocollapse */ EcmUserService.ngInjectableDef = i0.defineInjectable({ factory: function EcmUserService_Factory() { return new EcmUserService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.ContentService), i0.inject(i3.LogService)); }, token: EcmUserService, providedIn: "root" });
    return EcmUserService;
}());
export { EcmUserService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcmUserService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    EcmUserService.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    EcmUserService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNtLXVzZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInVzZXJpbmZvL3NlcnZpY2VzL2VjbS11c2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7OztBQUd4RDtJQUtJLHdCQUFvQixVQUE4QixFQUM5QixjQUE4QixFQUM5QixVQUFzQjtRQUZ0QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUM5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUMxQyxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0gsb0NBQVc7Ozs7O0lBQVgsVUFBWSxRQUFnQjtRQUE1QixpQkFRQztRQVBHLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEUsSUFBSSxDQUNELEdBQUc7Ozs7UUFBQyxVQUFDLFdBQXdCO1lBQ3pCLE9BQU8sSUFBSSxZQUFZLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLENBQUMsRUFBQyxFQUNGLFVBQVU7Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLEVBQUMsQ0FDN0MsQ0FBQztJQUNWLENBQUM7SUFFRDs7O09BR0c7Ozs7O0lBQ0gsMkNBQWtCOzs7O0lBQWxCO1FBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7SUFDSCw0Q0FBbUI7Ozs7O0lBQW5CLFVBQW9CLFFBQWdCO1FBQ2hDLElBQUksUUFBUSxFQUFFOztnQkFDSixPQUFPLEdBQUcsRUFBQyxLQUFLLEVBQUUsRUFBQyxFQUFFLEVBQUUsUUFBUSxFQUFDLEVBQUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNyRDtJQUNMLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7SUFDSyxvQ0FBVzs7Ozs7O0lBQW5CLFVBQW9CLEtBQVU7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsT0FBTyxVQUFVLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7O2dCQXBESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVBRLGtCQUFrQjtnQkFEbEIsY0FBYztnQkFFZCxVQUFVOzs7eUJBdEJuQjtDQWdGQyxBQXRERCxJQXNEQztTQW5EWSxjQUFjOzs7Ozs7SUFFWCxvQ0FBc0M7Ozs7O0lBQ3RDLHdDQUFzQzs7Ozs7SUFDdEMsb0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb250ZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYWxmcmVzY28tYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xvZy5zZXJ2aWNlJztcbmltcG9ydCB7IEVjbVVzZXJNb2RlbCB9IGZyb20gJy4uL21vZGVscy9lY20tdXNlci5tb2RlbCc7XG5pbXBvcnQgeyBQZXJzb25FbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEVjbVVzZXJTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgaW5mb3JtYXRpb24gYWJvdXQgYSB1c2VyIGlkZW50aWZpZWQgYnkgdGhlaXIgdXNlcm5hbWUuXG4gICAgICogQHBhcmFtIHVzZXJOYW1lIFRhcmdldCB1c2VybmFtZVxuICAgICAqIEByZXR1cm5zIFVzZXIgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBnZXRVc2VySW5mbyh1c2VyTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxFY21Vc2VyTW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuY29yZS5wZW9wbGVBcGkuZ2V0UGVyc29uKHVzZXJOYW1lKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocGVyc29uRW50cnk6IFBlcnNvbkVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRWNtVXNlck1vZGVsKHBlcnNvbkVudHJ5LmVudHJ5KTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciB3aG8gaXMgY3VycmVudGx5IGxvZ2dlZC1pbi5cbiAgICAgKiBAcmV0dXJucyBVc2VyIGluZm9ybWF0aW9uIGFzIGZvciBnZXRVc2VySW5mb1xuICAgICAqL1xuICAgIGdldEN1cnJlbnRVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VXNlckluZm8oJy1tZS0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJvZmlsZSBpbWFnZSBhcyBhIFVSTC5cbiAgICAgKiBAcGFyYW0gYXZhdGFySWQgVGFyZ2V0IGF2YXRhclxuICAgICAqIEByZXR1cm5zIEltYWdlIFVSTFxuICAgICAqL1xuICAgIGdldFVzZXJQcm9maWxlSW1hZ2UoYXZhdGFySWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoYXZhdGFySWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVPYmogPSB7ZW50cnk6IHtpZDogYXZhdGFySWR9fTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmdldENvbnRlbnRVcmwobm9kZU9iaik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaHJvdyB0aGUgZXJyb3JcbiAgICAgKiBAcGFyYW0gZXJyb3JcbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cblxufVxuIl19