/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input, EventEmitter, Output } from '@angular/core';
export class SortingPickerComponent {
    constructor() {
        /**
         * Available sorting options
         */
        this.options = [];
        /**
         * Current sorting direction
         */
        this.ascending = true;
        /**
         * Raised each time sorting key gets changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Raised each time direction gets changed.
         */
        this.sortingChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onOptionChanged(event) {
        this.selected = event.value;
        this.valueChange.emit(this.selected);
    }
    /**
     * @return {?}
     */
    toggleSortDirection() {
        this.ascending = !this.ascending;
        this.sortingChange.emit(this.ascending);
    }
}
SortingPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-sorting-picker',
                template: "<mat-form-field>\n    <mat-select [(value)]=\"selected\" (selectionChange)=\"onOptionChanged($event)\">\n        <mat-option *ngFor=\"let option of options\" [value]=\"option.key\">\n            {{ option.label | translate }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n\n<button *ngIf=\"selected\" mat-icon-button (click)=\"toggleSortDirection()\">\n    <mat-icon *ngIf=\"ascending\">arrow_upward</mat-icon>\n    <mat-icon *ngIf=\"!ascending\">arrow_downward</mat-icon>\n</button>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-sorting-picker' }
            }] }
];
SortingPickerComponent.propDecorators = {
    options: [{ type: Input }],
    selected: [{ type: Input }],
    ascending: [{ type: Input }],
    valueChange: [{ type: Output }],
    sortingChange: [{ type: Output }]
};
if (false) {
    /**
     * Available sorting options
     * @type {?}
     */
    SortingPickerComponent.prototype.options;
    /**
     * Currently selected option key
     * @type {?}
     */
    SortingPickerComponent.prototype.selected;
    /**
     * Current sorting direction
     * @type {?}
     */
    SortingPickerComponent.prototype.ascending;
    /**
     * Raised each time sorting key gets changed.
     * @type {?}
     */
    SortingPickerComponent.prototype.valueChange;
    /**
     * Raised each time direction gets changed.
     * @type {?}
     */
    SortingPickerComponent.prototype.sortingChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGluZy1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic29ydGluZy1waWNrZXIvc29ydGluZy1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTMUYsTUFBTSxPQUFPLHNCQUFzQjtJQU5uQzs7OztRQVVJLFlBQU8sR0FBd0MsRUFBRSxDQUFDOzs7O1FBUWxELGNBQVMsR0FBRyxJQUFJLENBQUM7Ozs7UUFJakIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDOzs7O1FBSXpDLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztJQVdoRCxDQUFDOzs7OztJQVRHLGVBQWUsQ0FBQyxLQUFzQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCxtQkFBbUI7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixpZ0JBQThDO2dCQUM5QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFO2FBQ3hDOzs7c0JBSUksS0FBSzt1QkFJTCxLQUFLO3dCQUlMLEtBQUs7MEJBSUwsTUFBTTs0QkFJTixNQUFNOzs7Ozs7O0lBaEJQLHlDQUNrRDs7Ozs7SUFHbEQsMENBQ2lCOzs7OztJQUdqQiwyQ0FDaUI7Ozs7O0lBR2pCLDZDQUN5Qzs7Ozs7SUFHekMsK0NBQzRDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTZWxlY3RDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNvcnRpbmctcGlja2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc29ydGluZy1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1zb3J0aW5nLXBpY2tlcicgfVxufSlcbmV4cG9ydCBjbGFzcyBTb3J0aW5nUGlja2VyQ29tcG9uZW50IHtcblxuICAgIC8qKiBBdmFpbGFibGUgc29ydGluZyBvcHRpb25zICovXG4gICAgQElucHV0KClcbiAgICBvcHRpb25zOiBBcnJheTx7a2V5OiBzdHJpbmcsIGxhYmVsOiBzdHJpbmd9PiA9IFtdO1xuXG4gICAgLyoqIEN1cnJlbnRseSBzZWxlY3RlZCBvcHRpb24ga2V5ICovXG4gICAgQElucHV0KClcbiAgICBzZWxlY3RlZDogc3RyaW5nO1xuXG4gICAgLyoqIEN1cnJlbnQgc29ydGluZyBkaXJlY3Rpb24gKi9cbiAgICBASW5wdXQoKVxuICAgIGFzY2VuZGluZyA9IHRydWU7XG5cbiAgICAvKiogUmFpc2VkIGVhY2ggdGltZSBzb3J0aW5nIGtleSBnZXRzIGNoYW5nZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAgIC8qKiBSYWlzZWQgZWFjaCB0aW1lIGRpcmVjdGlvbiBnZXRzIGNoYW5nZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc29ydGluZ0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIG9uT3B0aW9uQ2hhbmdlZChldmVudDogTWF0U2VsZWN0Q2hhbmdlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBldmVudC52YWx1ZTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMuc2VsZWN0ZWQpO1xuICAgIH1cblxuICAgIHRvZ2dsZVNvcnREaXJlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYXNjZW5kaW5nID0gIXRoaXMuYXNjZW5kaW5nO1xuICAgICAgICB0aGlzLnNvcnRpbmdDaGFuZ2UuZW1pdCh0aGlzLmFzY2VuZGluZyk7XG4gICAgfVxufVxuIl19