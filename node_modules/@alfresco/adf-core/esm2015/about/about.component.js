/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, Input } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { AuthenticationService } from '../services/authentication.service';
import { DiscoveryApiService } from '../services/discovery-api.service';
import { ObjectDataTableAdapter } from '../datatable/data/object-datatable-adapter';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { AppExtensionService } from '@alfresco/adf-extensions';
export class AboutComponent {
    /**
     * @param {?} http
     * @param {?} appConfig
     * @param {?} authService
     * @param {?} discovery
     * @param {?} appExtensions
     */
    constructor(http, appConfig, authService, discovery, appExtensions) {
        this.http = http;
        this.appConfig = appConfig;
        this.authService = authService;
        this.discovery = discovery;
        this.extensionColumns = ['$id', '$name', '$version', '$vendor', '$license', '$runtime', '$description'];
        /**
         * Commit corresponding to the version of ADF to be used.
         */
        this.githubUrlCommitAlpha = 'https://github.com/Alfresco/alfresco-ng2-components/commits/';
        /**
         * Toggles showing/hiding of extensions block.
         */
        this.showExtensions = true;
        /**
         * Regular expression for filtering dependencies packages.
         */
        this.regexp = '^(@alfresco)';
        this.ecmHost = '';
        this.bpmHost = '';
        this.ecmVersion = null;
        this.bpmVersion = null;
        this.extensions$ = appExtensions.references$;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.authService.isEcmLoggedIn()) {
            this.discovery.getEcmProductInfo().subscribe((/**
             * @param {?} ecmVers
             * @return {?}
             */
            (ecmVers) => {
                this.ecmVersion = ecmVers;
                this.modules = new ObjectDataTableAdapter(this.ecmVersion.modules, [
                    { type: 'text', key: 'id', title: 'ABOUT.TABLE_HEADERS.MODULES.ID', sortable: true },
                    { type: 'text', key: 'title', title: 'ABOUT.TABLE_HEADERS.MODULES.TITLE', sortable: true },
                    { type: 'text', key: 'version', title: 'ABOUT.TABLE_HEADERS.MODULES.DESCRIPTION', sortable: true },
                    {
                        type: 'text',
                        key: 'installDate',
                        title: 'ABOUT.TABLE_HEADERS.MODULES.INSTALL_DATE',
                        sortable: true
                    },
                    {
                        type: 'text',
                        key: 'installState',
                        title: 'ABOUT.TABLE_HEADERS.MODULES.INSTALL_STATE',
                        sortable: true
                    },
                    {
                        type: 'text',
                        key: 'versionMin',
                        title: 'ABOUT.TABLE_HEADERS.MODULES.VERSION_MIN',
                        sortable: true
                    },
                    {
                        type: 'text',
                        key: 'versionMax',
                        title: 'ABOUT.TABLE_HEADERS.MODULES.VERSION_MAX',
                        sortable: true
                    }
                ]);
                this.status = new ObjectDataTableAdapter([this.ecmVersion.status], [
                    { type: 'text', key: 'isReadOnly', title: 'ABOUT.TABLE_HEADERS.STATUS.READ_ONLY', sortable: true },
                    {
                        type: 'text',
                        key: 'isAuditEnabled',
                        title: 'ABOUT.TABLE_HEADERS.STATUS.AUDIT_ENABLED',
                        sortable: true
                    },
                    {
                        type: 'text',
                        key: 'isQuickShareEnabled',
                        title: 'ABOUT.TABLE_HEADERS.STATUS.QUICK_SHARE_ENABLED',
                        sortable: true
                    },
                    {
                        type: 'text',
                        key: 'isThumbnailGenerationEnabled',
                        title: 'ABOUT.TABLE_HEADERS.STATUS.THUMBNAIL_ENABLED',
                        sortable: true
                    }
                ]);
                this.license = new ObjectDataTableAdapter([this.ecmVersion.license], [
                    { type: 'text', key: 'issuedAt', title: 'ABOUT.TABLE_HEADERS.LICENSE.ISSUES_AT', sortable: true },
                    { type: 'text', key: 'expiresAt', title: 'ABOUT.TABLE_HEADERS.LICENSE.EXPIRES_AT', sortable: true },
                    {
                        type: 'text',
                        key: 'remainingDays',
                        title: 'ABOUT.TABLE_HEADERS.LICENSE.REMAINING_DAYS',
                        sortable: true
                    },
                    { type: 'text', key: 'holder', title: 'ABOUT.TABLE_HEADERS.LICENSE.HOLDER', sortable: true },
                    { type: 'text', key: 'mode', title: 'ABOUT.TABLE_HEADERS.LICENSE.MODE', sortable: true },
                    {
                        type: 'text',
                        key: 'isClusterEnabled',
                        title: 'ABOUT.TABLE_HEADERS.LICENSE.CLUSTER_ENABLED',
                        sortable: true
                    },
                    {
                        type: 'text',
                        key: 'isCryptodocEnabled',
                        title: 'ABOUT.TABLE_HEADERS.LICENSE.CRYPTODOC_ENABLED',
                        sortable: true
                    }
                ]);
            }));
        }
        if (this.authService.isBpmLoggedIn()) {
            this.discovery.getBpmProductInfo().subscribe((/**
             * @param {?} bpmVers
             * @return {?}
             */
            (bpmVers) => {
                this.bpmVersion = bpmVers;
            }));
        }
        this.http.get('/versions.json?' + new Date()).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            const alfrescoPackages = Object.keys(response.dependencies).filter((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                return new RegExp(this.regexp).test(val);
            }));
            /** @type {?} */
            const alfrescoPackagesTableRepresentation = [];
            alfrescoPackages.forEach((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                alfrescoPackagesTableRepresentation.push({
                    name: val,
                    version: (response.dependencies[val].version || response.dependencies[val].required.version)
                });
            }));
            this.gitHubLinkCreation(alfrescoPackagesTableRepresentation);
            this.data = new ObjectDataTableAdapter(alfrescoPackagesTableRepresentation, [
                { type: 'text', key: 'name', title: 'Name', sortable: true },
                { type: 'text', key: 'version', title: 'Version', sortable: true }
            ]);
        }));
        this.ecmHost = this.appConfig.get(AppConfigValues.ECMHOST);
        this.bpmHost = this.appConfig.get(AppConfigValues.BPMHOST);
    }
    /**
     * @private
     * @param {?} alfrescoPackagesTableRepresentation
     * @return {?}
     */
    gitHubLinkCreation(alfrescoPackagesTableRepresentation) {
        /** @type {?} */
        const corePackage = alfrescoPackagesTableRepresentation.find((/**
         * @param {?} packageUp
         * @return {?}
         */
        (packageUp) => {
            return packageUp.name === '@alfresco/adf-core';
        }));
        if (corePackage) {
            /** @type {?} */
            const commitIsh = corePackage.version.split('-');
            if (commitIsh.length > 1) {
                this.githubUrlCommitAlpha = this.githubUrlCommitAlpha + commitIsh[1];
            }
            else {
                this.githubUrlCommitAlpha = this.githubUrlCommitAlpha + corePackage.version;
            }
        }
    }
}
AboutComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-about',
                template: "<div class=\"adf-about-container\">\n    <div class=\"adf-extension-details-container\" *ngIf=\"showExtensions\">\n        <h3>{{ 'ABOUT.TITLE' | translate }}</h3>\n        <mat-table [dataSource]=\"extensions$ | async\">\n            <!-- $id Column -->\n            <ng-container matColumnDef=\"$id\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.ID' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$id}}</mat-cell>\n            </ng-container>\n\n            <!-- $name Column -->\n            <ng-container matColumnDef=\"$name\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.NAME' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$name}}</mat-cell>\n            </ng-container>\n\n            <!-- $version Column -->\n            <ng-container matColumnDef=\"$version\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.VERSION' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$version}}</mat-cell>\n            </ng-container>\n\n            <!-- $vendor Column -->\n            <ng-container matColumnDef=\"$vendor\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.VENDOR' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$vendor}}</mat-cell>\n            </ng-container>\n\n            <!-- $license Column -->\n            <ng-container matColumnDef=\"$license\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.LICENSE' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$license}}</mat-cell>\n            </ng-container>\n\n            <!-- $runtime Column -->\n            <ng-container matColumnDef=\"$runtime\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.RUNTIME' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$runtime}}</mat-cell>\n            </ng-container>\n\n            <!-- $description Column -->\n            <ng-container matColumnDef=\"$description\">\n                <mat-header-cell *matHeaderCellDef>{{ 'ABOUT.TABLE_HEADERS.DESCRIPTION' | translate }}</mat-header-cell>\n                <mat-cell *matCellDef=\"let element\">{{element.$description}}</mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"extensionColumns\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: extensionColumns;\"></mat-row>\n        </mat-table>\n    </div>\n    <h3>{{ 'ABOUT.SERVER_SETTINGS.TITLE' | translate }}</h3>\n    <mat-list>\n        <small>{{ 'ABOUT.SERVER_SETTINGS.DESCRIPTION' | translate }}</small>\n        <mat-list-item>\n            <h4 matLine> {{ 'ABOUT.SERVER_SETTINGS.PROCESS_SERVICE_HOST' | translate: { value: bpmHost } }}</h4>\n        </mat-list-item>\n        <mat-divider></mat-divider>\n        <mat-list-item>\n            <h4 matLine>{{ 'ABOUT.SERVER_SETTINGS.PROCESS_SERVICE_HOST' | translate: { value: ecmHost } }}</h4>\n        </mat-list-item>\n    </mat-list>\n\n    <h3>{{ 'ABOUT.VERSIONS.TITLE' | translate }}</h3>\n    <div *ngIf=\"bpmVersion\">\n        <h3>{{ 'ABOUT.VERSIONS.PROCESS_SERVICE' | translate }}</h3>\n        <div> {{ 'ABOUT.VERSIONS.divS.EDITION' | translate }} </div> {{ bpmVersion.edition }}\n        <p></p>\n        <div> {{ 'ABOUT.VERSIONS.divS.VERSION' | translate }} </div> {{ bpmVersion.majorVersion }}.{{\n        bpmVersion.minorVersion }}.{{ bpmVersion.revisionVersion }}\n    </div>\n    <div *ngIf=\"ecmVersion\">\n        <h3>{{ 'ABOUT.VERSIONS.CONTENT_SERVICE' | translate }}</h3>\n        <div>{{ 'ABOUT.VERSIONS.divS.EDITION' | translate }}</div> {{ ecmVersion.edition }}\n        <p></p>\n        <div> {{ 'ABOUT.VERSIONS.divS.VERSION' | translate }} </div> {{ ecmVersion.version.display }}\n        <p></p>\n        <h4>{{ 'ABOUT.VERSIONS.divS.LICENSE' | translate }}</h4>\n        <adf-datatable [data]=\"license\"></adf-datatable>\n\n        <h4> {{ 'ABOUT.VERSIONS.divS.STATUS' | translate }}</h4>\n        <adf-datatable [data]=\"status\"></adf-datatable>\n\n        <h4>{{ 'ABOUT.VERSIONS.divS.MODULES' | translate }}</h4>\n\n        <adf-datatable [data]=\"modules\"></adf-datatable>\n    </div>\n\n    <div *ngIf=\"githubUrlCommitAlpha\">\n        <h3>{{ 'ABOUT.SOURCE_CODE.TITLE' | translate }}</h3>\n        <small>{{ 'ABOUT.SOURCE_CODE.DESCRIPTION' | translate }}</small>\n        <div>\n            <a [href]=\"githubUrlCommitAlpha\">{{githubUrlCommitAlpha}}</a>\n        </div>\n    </div>\n\n    <h3>{{ 'ABOUT.PACKAGES.TITLE' | translate }}</h3>\n    <small>{{ 'ABOUT.PACKAGES.DESCRIPTION' | translate }}</small>\n    <adf-datatable [data]=\"data\"></adf-datatable>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-about-container{padding:10px}.adf-table-version{width:60%;border:0;border-spacing:0;text-align:center}"]
            }] }
];
/** @nocollapse */
AboutComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: AppConfigService },
    { type: AuthenticationService },
    { type: DiscoveryApiService },
    { type: AppExtensionService }
];
AboutComponent.propDecorators = {
    githubUrlCommitAlpha: [{ type: Input }],
    showExtensions: [{ type: Input }],
    regexp: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AboutComponent.prototype.data;
    /** @type {?} */
    AboutComponent.prototype.status;
    /** @type {?} */
    AboutComponent.prototype.license;
    /** @type {?} */
    AboutComponent.prototype.modules;
    /** @type {?} */
    AboutComponent.prototype.extensionColumns;
    /** @type {?} */
    AboutComponent.prototype.extensions$;
    /**
     * Commit corresponding to the version of ADF to be used.
     * @type {?}
     */
    AboutComponent.prototype.githubUrlCommitAlpha;
    /**
     * Toggles showing/hiding of extensions block.
     * @type {?}
     */
    AboutComponent.prototype.showExtensions;
    /**
     * Regular expression for filtering dependencies packages.
     * @type {?}
     */
    AboutComponent.prototype.regexp;
    /** @type {?} */
    AboutComponent.prototype.ecmHost;
    /** @type {?} */
    AboutComponent.prototype.bpmHost;
    /** @type {?} */
    AboutComponent.prototype.ecmVersion;
    /** @type {?} */
    AboutComponent.prototype.bpmVersion;
    /**
     * @type {?}
     * @private
     */
    AboutComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AboutComponent.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    AboutComponent.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    AboutComponent.prototype.discovery;
}
//# sourceMappingURL=data:application/json;base64,