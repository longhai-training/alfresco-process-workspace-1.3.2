/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentChild, Directive, Input, TemplateRef } from '@angular/core';
import { ViewerComponent } from '../components/viewer.component';
export class ViewerExtensionDirective {
    /**
     * @param {?} viewerComponent
     */
    constructor(viewerComponent) {
        this.viewerComponent = viewerComponent;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.templateModel = { template: this.template, isVisible: false };
        this.viewerComponent.extensionTemplates.push(this.templateModel);
        this.viewerComponent.extensionChange.subscribe((/**
         * @param {?} fileExtension
         * @return {?}
         */
        (fileExtension) => {
            this.templateModel.isVisible = this.isVisible(fileExtension);
        }));
        if (this.supportedExtensions instanceof Array) {
            this.supportedExtensions.forEach((/**
             * @param {?} extension
             * @return {?}
             */
            (extension) => {
                this.viewerComponent.externalExtensions.push(extension);
            }));
        }
    }
    /**
     * check if the current extension in the viewer is compatible with this extension checking against supportedExtensions
     * @param {?} fileExtension
     * @return {?}
     */
    isVisible(fileExtension) {
        /** @type {?} */
        let supportedExtension;
        if (this.supportedExtensions && (this.supportedExtensions instanceof Array)) {
            supportedExtension = this.supportedExtensions.find((/**
             * @param {?} extension
             * @return {?}
             */
            (extension) => {
                return extension.toLowerCase() === fileExtension;
            }));
        }
        return !!supportedExtension;
    }
}
ViewerExtensionDirective.decorators = [
    { type: Directive, args: [{
                selector: 'adf-viewer-extension'
            },] }
];
/** @nocollapse */
ViewerExtensionDirective.ctorParameters = () => [
    { type: ViewerComponent }
];
ViewerExtensionDirective.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    urlFileContent: [{ type: Input }],
    extension: [{ type: Input }],
    supportedExtensions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ViewerExtensionDirective.prototype.template;
    /** @type {?} */
    ViewerExtensionDirective.prototype.urlFileContent;
    /** @type {?} */
    ViewerExtensionDirective.prototype.extension;
    /** @type {?} */
    ViewerExtensionDirective.prototype.supportedExtensions;
    /** @type {?} */
    ViewerExtensionDirective.prototype.templateModel;
    /**
     * @type {?}
     * @private
     */
    ViewerExtensionDirective.prototype.viewerComponent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2VyLWV4dGVuc2lvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJ2aWV3ZXIvZGlyZWN0aXZlcy92aWV3ZXItZXh0ZW5zaW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQW9CLFlBQVksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFLakUsTUFBTSxPQUFPLHdCQUF3Qjs7OztJQWdCakMsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQ3BELENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBRW5FLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVqRSxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUM3RCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsbUJBQW1CLFlBQVksS0FBSyxFQUFFO1lBQzNDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUQsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7OztJQUtELFNBQVMsQ0FBQyxhQUFhOztZQUNmLGtCQUEwQjtRQUU5QixJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsWUFBWSxLQUFLLENBQUMsRUFBRTtZQUN6RSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSTs7OztZQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQzdELE9BQU8sU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLGFBQWEsQ0FBQztZQUVyRCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBRUQsT0FBTyxDQUFDLENBQUMsa0JBQWtCLENBQUM7SUFDaEMsQ0FBQzs7O1lBcERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOzs7O1lBSlEsZUFBZTs7O3VCQU9uQixZQUFZLFNBQUMsV0FBVzs2QkFHeEIsS0FBSzt3QkFHTCxLQUFLO2tDQUdMLEtBQUs7Ozs7SUFUTiw0Q0FDYzs7SUFFZCxrREFDdUI7O0lBRXZCLDZDQUNrQjs7SUFFbEIsdURBQzhCOztJQUU5QixpREFBbUI7Ozs7O0lBRVAsbURBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkLCBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy92aWV3ZXIuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdmlld2VyLWV4dGVuc2lvbidcbn0pXG5leHBvcnQgY2xhc3MgVmlld2VyRXh0ZW5zaW9uRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgICBAQ29udGVudENoaWxkKFRlbXBsYXRlUmVmKVxuICAgIHRlbXBsYXRlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHVybEZpbGVDb250ZW50OiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIGV4dGVuc2lvbjogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBzdXBwb3J0ZWRFeHRlbnNpb25zOiBzdHJpbmdbXTtcblxuICAgIHRlbXBsYXRlTW9kZWw6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld2VyQ29tcG9uZW50OiBWaWV3ZXJDb21wb25lbnQpIHtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVNb2RlbCA9IHsgdGVtcGxhdGU6IHRoaXMudGVtcGxhdGUsIGlzVmlzaWJsZTogZmFsc2UgfTtcblxuICAgICAgICB0aGlzLnZpZXdlckNvbXBvbmVudC5leHRlbnNpb25UZW1wbGF0ZXMucHVzaCh0aGlzLnRlbXBsYXRlTW9kZWwpO1xuXG4gICAgICAgIHRoaXMudmlld2VyQ29tcG9uZW50LmV4dGVuc2lvbkNoYW5nZS5zdWJzY3JpYmUoKGZpbGVFeHRlbnNpb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVNb2RlbC5pc1Zpc2libGUgPSB0aGlzLmlzVmlzaWJsZShmaWxlRXh0ZW5zaW9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9ucyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB0aGlzLnN1cHBvcnRlZEV4dGVuc2lvbnMuZm9yRWFjaCgoZXh0ZW5zaW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ZXJDb21wb25lbnQuZXh0ZXJuYWxFeHRlbnNpb25zLnB1c2goZXh0ZW5zaW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgaWYgdGhlIGN1cnJlbnQgZXh0ZW5zaW9uIGluIHRoZSB2aWV3ZXIgaXMgY29tcGF0aWJsZSB3aXRoIHRoaXMgZXh0ZW5zaW9uIGNoZWNraW5nIGFnYWluc3Qgc3VwcG9ydGVkRXh0ZW5zaW9uc1xuICAgICAqL1xuICAgIGlzVmlzaWJsZShmaWxlRXh0ZW5zaW9uKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBzdXBwb3J0ZWRFeHRlbnNpb246IHN0cmluZztcblxuICAgICAgICBpZiAodGhpcy5zdXBwb3J0ZWRFeHRlbnNpb25zICYmICh0aGlzLnN1cHBvcnRlZEV4dGVuc2lvbnMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgIHN1cHBvcnRlZEV4dGVuc2lvbiA9IHRoaXMuc3VwcG9ydGVkRXh0ZW5zaW9ucy5maW5kKChleHRlbnNpb24pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkgPT09IGZpbGVFeHRlbnNpb247XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhc3VwcG9ydGVkRXh0ZW5zaW9uO1xuICAgIH1cblxufVxuIl19