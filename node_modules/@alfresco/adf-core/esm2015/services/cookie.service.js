/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class CookieService {
    /**
     * Checks if cookies are enabled.
     * @return {?} True if enabled, false otherwise
     */
    isEnabled() {
        // for certain scenarios Chrome may say 'true' but have cookies still disabled
        if (navigator.cookieEnabled === false) {
            return false;
        }
        document.cookie = 'test-cookie';
        return document.cookie.indexOf('test-cookie') >= 0;
    }
    /**
     * Retrieves a cookie by its key.
     * @param {?} key Key to identify the cookie
     * @return {?} The cookie data or null if it is not found
     */
    getItem(key) {
        /** @type {?} */
        const regexp = new RegExp('(?:' + key + '|;\s*' + key + ')=(.*?)(?:;|$)', 'g');
        /** @type {?} */
        const result = regexp.exec(document.cookie);
        return (result === null) ? null : result[1];
    }
    /**
     * Sets a cookie.
     * @param {?} key Key to identify the cookie
     * @param {?} data Data value to set for the cookie
     * @param {?} expiration Expiration date of the data
     * @param {?} path "Pathname" to store the cookie
     * @return {?}
     */
    setItem(key, data, expiration, path) {
        document.cookie = `${key}=${data}` +
            (expiration ? ';expires=' + expiration.toUTCString() : '') +
            (path ? `;path=${path}` : ';path=/');
    }
    /**
     * Placeholder for testing purposes - do not use.
     * @return {?}
     */
    clear() {
        /* placeholder for testing purposes */
    }
}
CookieService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ CookieService.ngInjectableDef = i0.defineInjectable({ factory: function CookieService_Factory() { return new CookieService(); }, token: CookieService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9jb29raWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sYUFBYTs7Ozs7SUFNdEIsU0FBUztRQUNMLDhFQUE4RTtRQUM5RSxJQUFJLFNBQVMsQ0FBQyxhQUFhLEtBQUssS0FBSyxFQUFFO1lBQ25DLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsUUFBUSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUM7UUFDaEMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Ozs7O0lBT0QsT0FBTyxDQUFDLEdBQVc7O2NBQ1QsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLENBQUM7O2NBQ3hFLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDM0MsT0FBTyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7Ozs7O0lBU0QsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsVUFBdUIsRUFBRSxJQUFtQjtRQUMzRSxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRTtZQUM5QixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzFELENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7OztJQUdELEtBQUs7UUFDRCxzQ0FBc0M7SUFDMUMsQ0FBQzs7O1lBOUNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb29raWVTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBjb29raWVzIGFyZSBlbmFibGVkLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyBmb3IgY2VydGFpbiBzY2VuYXJpb3MgQ2hyb21lIG1heSBzYXkgJ3RydWUnIGJ1dCBoYXZlIGNvb2tpZXMgc3RpbGwgZGlzYWJsZWRcbiAgICAgICAgaWYgKG5hdmlnYXRvci5jb29raWVFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gJ3Rlc3QtY29va2llJztcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCd0ZXN0LWNvb2tpZScpID49IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgY29va2llIGJ5IGl0cyBrZXkuXG4gICAgICogQHBhcmFtIGtleSBLZXkgdG8gaWRlbnRpZnkgdGhlIGNvb2tpZVxuICAgICAqIEByZXR1cm5zIFRoZSBjb29raWUgZGF0YSBvciBudWxsIGlmIGl0IGlzIG5vdCBmb3VuZFxuICAgICAqL1xuICAgIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIGtleSArICd8O1xccyonICsga2V5ICsgJyk9KC4qPykoPzo7fCQpJywgJ2cnKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVnZXhwLmV4ZWMoZG9jdW1lbnQuY29va2llKTtcbiAgICAgICAgcmV0dXJuIChyZXN1bHQgPT09IG51bGwpID8gbnVsbCA6IHJlc3VsdFsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgY29va2llLlxuICAgICAqIEBwYXJhbSBrZXkgS2V5IHRvIGlkZW50aWZ5IHRoZSBjb29raWVcbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHZhbHVlIHRvIHNldCBmb3IgdGhlIGNvb2tpZVxuICAgICAqIEBwYXJhbSBleHBpcmF0aW9uIEV4cGlyYXRpb24gZGF0ZSBvZiB0aGUgZGF0YVxuICAgICAqIEBwYXJhbSBwYXRoIFwiUGF0aG5hbWVcIiB0byBzdG9yZSB0aGUgY29va2llXG4gICAgICovXG4gICAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nLCBleHBpcmF0aW9uOiBEYXRlIHwgbnVsbCwgcGF0aDogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBgJHtrZXl9PSR7ZGF0YX1gICtcbiAgICAgICAgICAgIChleHBpcmF0aW9uID8gJztleHBpcmVzPScgKyBleHBpcmF0aW9uLnRvVVRDU3RyaW5nKCkgOiAnJykgK1xuICAgICAgICAgICAgKHBhdGggPyBgO3BhdGg9JHtwYXRofWAgOiAnO3BhdGg9LycpO1xuICAgIH1cblxuICAgIC8qKiBQbGFjZWhvbGRlciBmb3IgdGVzdGluZyBwdXJwb3NlcyAtIGRvIG5vdCB1c2UuICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIC8qIHBsYWNlaG9sZGVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzICovXG4gICAgfVxufVxuIl19