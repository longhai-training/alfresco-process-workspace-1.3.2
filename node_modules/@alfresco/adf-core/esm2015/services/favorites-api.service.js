/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { UserPreferencesService } from './user-preferences.service';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./user-preferences.service";
export class FavoritesApiService {
    /**
     * @param {?} apiService
     * @param {?} preferences
     */
    constructor(apiService, preferences) {
        this.apiService = apiService;
        this.preferences = preferences;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    static remapEntry({ entry }) {
        entry.properties = {
            'cm:title': entry.title,
            'cm:description': entry.description
        };
        return { entry };
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    remapFavoritesData(data = {}) {
        /** @type {?} */
        const list = (data.list || {});
        /** @type {?} */
        const pagination = (list.pagination || {});
        /** @type {?} */
        const entries = this
            .remapFavoriteEntries(list.entries || []);
        return (/** @type {?} */ ({
            list: { entries, pagination }
        }));
    }
    /**
     * @param {?} entries
     * @return {?}
     */
    remapFavoriteEntries(entries) {
        return entries
            .map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ entry: { target } }) => ({
            entry: target.file || target.folder
        })))
            .filter((/**
         * @param {?} __0
         * @return {?}
         */
        ({ entry }) => (!!entry)))
            .map(FavoritesApiService.remapEntry);
    }
    /**
     * @private
     * @return {?}
     */
    get favoritesApi() {
        return this.apiService.getInstance().core.favoritesApi;
    }
    /**
     * Gets the favorites for a user.
     * @param {?} personId ID of the user
     * @param {?=} options Options supported by JS-API
     * @return {?} List of favorites
     */
    getFavorites(personId, options) {
        /** @type {?} */
        const defaultOptions = {
            maxItems: this.preferences.paginationSize,
            skipCount: 0,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: ['properties', 'allowableOperations']
        };
        /** @type {?} */
        const queryOptions = Object.assign(defaultOptions, options);
        /** @type {?} */
        const promise = this.favoritesApi
            .getFavorites(personId, queryOptions)
            .then(this.remapFavoritesData);
        return from(promise).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => of(err))));
    }
}
FavoritesApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FavoritesApiService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: UserPreferencesService }
];
/** @nocollapse */ FavoritesApiService.ngInjectableDef = i0.defineInjectable({ factory: function FavoritesApiService_Factory() { return new FavoritesApiService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.UserPreferencesService)); }, token: FavoritesApiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FavoritesApiService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    FavoritesApiService.prototype.preferences;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvZmF2b3JpdGVzLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBSzVDLE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBK0I1QixZQUNZLFVBQThCLEVBQzlCLFdBQW1DO1FBRG5DLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtJQUM1QyxDQUFDOzs7OztJQWhDSixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFPO1FBQzVCLEtBQUssQ0FBQyxVQUFVLEdBQUc7WUFDZixVQUFVLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDdkIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDdEMsQ0FBQztRQUVGLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLE9BQVksRUFBRTs7Y0FDdkIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7O2NBQ3hCLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDOztjQUNwQyxPQUFPLEdBQVUsSUFBSTthQUN0QixvQkFBb0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUU3QyxPQUFPLG1CQUFhO1lBQ2hCLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7U0FDaEMsRUFBQSxDQUFDO0lBQ04sQ0FBQzs7Ozs7SUFFRCxvQkFBb0IsQ0FBQyxPQUFjO1FBQy9CLE9BQU8sT0FBTzthQUNULEdBQUc7Ozs7UUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTTtTQUN0QyxDQUFDLEVBQUM7YUFDRixNQUFNOzs7O1FBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBQzthQUNoQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7SUFPRCxJQUFZLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDMUQsQ0FBQzs7Ozs7OztJQVFELFlBQVksQ0FBQyxRQUFnQixFQUFFLE9BQWE7O2NBQ2xDLGNBQWMsR0FBRztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjO1lBQ3pDLFNBQVMsRUFBRSxDQUFDO1lBQ1osS0FBSyxFQUFFLGdEQUFnRDtZQUN2RCxPQUFPLEVBQUUsQ0FBRSxZQUFZLEVBQUUscUJBQXFCLENBQUU7U0FDbkQ7O2NBQ0ssWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQzs7Y0FDckQsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZO2FBQzVCLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDO2FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFFbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNyQixVQUFVOzs7O1FBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUMvQixDQUFDO0lBQ04sQ0FBQzs7O1lBaEVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQU5RLGtCQUFrQjtZQUNsQixzQkFBc0I7Ozs7Ozs7O0lBc0N2Qix5Q0FBc0M7Ozs7O0lBQ3RDLDBDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVQYWdpbmcgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICcuL2FsZnJlc2NvLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuL3VzZXItcHJlZmVyZW5jZXMuc2VydmljZSc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZhdm9yaXRlc0FwaVNlcnZpY2Uge1xuXG4gICAgc3RhdGljIHJlbWFwRW50cnkoeyBlbnRyeSB9OiBhbnkpOiBhbnkge1xuICAgICAgICBlbnRyeS5wcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgJ2NtOnRpdGxlJzogZW50cnkudGl0bGUsXG4gICAgICAgICAgICAnY206ZGVzY3JpcHRpb24nOiBlbnRyeS5kZXNjcmlwdGlvblxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7IGVudHJ5IH07XG4gICAgfVxuXG4gICAgcmVtYXBGYXZvcml0ZXNEYXRhKGRhdGE6IGFueSA9IHt9KTogTm9kZVBhZ2luZyB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSAoZGF0YS5saXN0IHx8IHt9KTtcbiAgICAgICAgY29uc3QgcGFnaW5hdGlvbiA9IChsaXN0LnBhZ2luYXRpb24gfHwge30pO1xuICAgICAgICBjb25zdCBlbnRyaWVzOiBhbnlbXSA9IHRoaXNcbiAgICAgICAgICAgIC5yZW1hcEZhdm9yaXRlRW50cmllcyhsaXN0LmVudHJpZXMgfHwgW10pO1xuXG4gICAgICAgIHJldHVybiA8Tm9kZVBhZ2luZz4ge1xuICAgICAgICAgICAgbGlzdDogeyBlbnRyaWVzLCBwYWdpbmF0aW9uIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1hcEZhdm9yaXRlRW50cmllcyhlbnRyaWVzOiBhbnlbXSkge1xuICAgICAgICByZXR1cm4gZW50cmllc1xuICAgICAgICAgICAgLm1hcCgoeyBlbnRyeTogeyB0YXJnZXQgfX06IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICBlbnRyeTogdGFyZ2V0LmZpbGUgfHwgdGFyZ2V0LmZvbGRlclxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAuZmlsdGVyKCh7IGVudHJ5IH0pID0+ICghIWVudHJ5KSlcbiAgICAgICAgICAgIC5tYXAoRmF2b3JpdGVzQXBpU2VydmljZS5yZW1hcEVudHJ5KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcHJlZmVyZW5jZXM6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2VcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGdldCBmYXZvcml0ZXNBcGkoKSB7XG4gICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmNvcmUuZmF2b3JpdGVzQXBpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZhdm9yaXRlcyBmb3IgYSB1c2VyLlxuICAgICAqIEBwYXJhbSBwZXJzb25JZCBJRCBvZiB0aGUgdXNlclxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgc3VwcG9ydGVkIGJ5IEpTLUFQSVxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgZmF2b3JpdGVzXG4gICAgICovXG4gICAgZ2V0RmF2b3JpdGVzKHBlcnNvbklkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5wcmVmZXJlbmNlcy5wYWdpbmF0aW9uU2l6ZSxcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIHdoZXJlOiAnKEVYSVNUUyh0YXJnZXQvZmlsZSkgT1IgRVhJU1RTKHRhcmdldC9mb2xkZXIpKScsXG4gICAgICAgICAgICBpbmNsdWRlOiBbICdwcm9wZXJ0aWVzJywgJ2FsbG93YWJsZU9wZXJhdGlvbnMnIF1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmZhdm9yaXRlc0FwaVxuICAgICAgICAgICAgLmdldEZhdm9yaXRlcyhwZXJzb25JZCwgcXVlcnlPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4odGhpcy5yZW1hcEZhdm9yaXRlc0RhdGEpO1xuXG4gICAgICAgIHJldHVybiBmcm9tKHByb21pc2UpLnBpcGUoXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IG9mKGVycikpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19