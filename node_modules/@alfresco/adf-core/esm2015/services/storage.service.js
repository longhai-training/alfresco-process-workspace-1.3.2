/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService } from '../app-config/app-config.service';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
export class StorageService {
    /**
     * @param {?} appConfigService
     */
    constructor(appConfigService) {
        this.appConfigService = appConfigService;
        this.memoryStore = {};
        this.useLocalStorage = false;
        this.useLocalStorage = this.storageAvailable('localStorage');
        this.appConfigService.onLoad.subscribe(this.getAppPrefix.bind(this));
    }
    /**
     * Gets an item.
     * @param {?} key Key to identify the item
     * @return {?} The item (if any) retrieved by the key
     */
    getItem(key) {
        if (this.useLocalStorage) {
            return localStorage.getItem(this.storagePrefix + key);
        }
        else {
            return this.memoryStore.hasOwnProperty(this.storagePrefix + key) ? this.memoryStore[this.storagePrefix + key] : null;
        }
    }
    /**
     * Stores an item
     * @param {?} key Key to identify the item
     * @param {?} data Data to store
     * @return {?}
     */
    setItem(key, data) {
        if (this.useLocalStorage) {
            localStorage.setItem(this.storagePrefix + key, data);
        }
        else {
            this.memoryStore[this.storagePrefix + key] = data.toString();
        }
    }
    /**
     * Removes all currently stored items.
     * @return {?}
     */
    clear() {
        if (this.useLocalStorage) {
            localStorage.clear();
        }
        else {
            this.memoryStore = {};
        }
    }
    /**
     * Removes a single item.
     * @param {?} key Key to identify the item
     * @return {?}
     */
    removeItem(key) {
        if (this.useLocalStorage) {
            localStorage.removeItem(this.storagePrefix + key);
        }
        else {
            delete this.memoryStore[this.storagePrefix + key];
        }
    }
    /**
     * Is any item currently stored under `key`?
     * @param {?} key Key identifying item to check
     * @return {?} True if key retrieves an item, false otherwise
     */
    hasItem(key) {
        if (this.useLocalStorage) {
            return localStorage.getItem(this.storagePrefix + key) ? true : false;
        }
        else {
            return this.memoryStore.hasOwnProperty(key);
        }
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    storageAvailable(type) {
        try {
            /** @type {?} */
            const storage = window[type];
            /** @type {?} */
            const key = '__storage_test__';
            storage.setItem(key, key);
            storage.removeItem(key, key);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Sets the prefix that is used for the local storage of the app
     * It assigns the string that is defined i the app config,
     * empty prefix otherwise.
     * @return {?}
     */
    getAppPrefix() {
        /** @type {?} */
        const appConfiguration = this.appConfigService.get('application');
        if (appConfiguration && appConfiguration.storagePrefix) {
            this.storagePrefix = appConfiguration.storagePrefix + '_';
        }
        else {
            this.storagePrefix = '';
        }
    }
}
StorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
StorageService.ctorParameters = () => [
    { type: AppConfigService }
];
/** @nocollapse */ StorageService.ngInjectableDef = i0.defineInjectable({ factory: function StorageService_Factory() { return new StorageService(i0.inject(i1.AppConfigService)); }, token: StorageService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    StorageService.prototype.memoryStore;
    /**
     * @type {?}
     * @private
     */
    StorageService.prototype.useLocalStorage;
    /** @type {?} */
    StorageService.prototype.storagePrefix;
    /**
     * @type {?}
     * @private
     */
    StorageService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,