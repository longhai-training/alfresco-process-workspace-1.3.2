/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable, from, interval, empty } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { concatMap, switchMap, takeWhile, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
export class RenditionsService {
    /**
     * @param {?} apiService
     */
    constructor(apiService) {
        this.apiService = apiService;
    }
    /**
     * Gets the first available rendition found for a node.
     * @param {?} nodeId ID of the target node
     * @return {?} Information object for the rendition
     */
    getAvailableRenditionForNode(nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId)).pipe(map((/**
         * @param {?} availableRenditions
         * @return {?}
         */
        (availableRenditions) => {
            /** @type {?} */
            const renditionsAvailable = availableRenditions.list.entries.filter((/**
             * @param {?} rendition
             * @return {?}
             */
            (rendition) => (rendition.entry.id === 'pdf' || rendition.entry.id === 'imgpreview')));
            /** @type {?} */
            const existingRendition = renditionsAvailable.find((/**
             * @param {?} rend
             * @return {?}
             */
            (rend) => rend.entry.status === 'CREATED'));
            return existingRendition ? existingRendition : renditionsAvailable[0];
        })));
    }
    /**
     * Generates a rendition for a node using the first available encoding.
     * @param {?} nodeId ID of the target node
     * @return {?} Null response to indicate completion
     */
    generateRenditionForNode(nodeId) {
        return this.getAvailableRenditionForNode(nodeId).pipe(map((/**
         * @param {?} rendition
         * @return {?}
         */
        (rendition) => {
            if (rendition.entry.status !== 'CREATED') {
                return from(this.apiService.renditionsApi.createRendition(nodeId, { id: rendition.entry.id }));
            }
            else {
                return empty();
            }
        })));
    }
    /**
     * Checks if the specified rendition is available for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} True if the rendition is available, false otherwise
     */
    isRenditionAvailable(nodeId, encoding) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.getRendition(nodeId, encoding).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                let isAvailable = true;
                if (res.entry.status.toString() === 'NOT_CREATED') {
                    isAvailable = false;
                }
                observer.next(isAvailable);
                observer.complete();
            }), (/**
             * @return {?}
             */
            () => {
                observer.next(false);
                observer.complete();
            }));
        }));
    }
    /**
     * Checks if the node can be converted using the specified rendition.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} True if the node can be converted, false otherwise
     */
    isConversionPossible(nodeId, encoding) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.getRendition(nodeId, encoding).subscribe((/**
             * @return {?}
             */
            () => {
                observer.next(true);
                observer.complete();
            }), (/**
             * @return {?}
             */
            () => {
                observer.next(false);
                observer.complete();
            }));
        }));
    }
    /**
     * Gets a URL linking to the specified rendition of a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} URL string
     */
    getRenditionUrl(nodeId, encoding) {
        return this.apiService.contentApi.getRenditionUrl(nodeId, encoding);
    }
    /**
     * Gets information about a rendition of a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} Information object about the rendition
     */
    getRendition(nodeId, encoding) {
        return from(this.apiService.renditionsApi.getRendition(nodeId, encoding));
    }
    /**
     * Gets a list of all renditions for a node.
     * @param {?} nodeId ID of the target node
     * @return {?} Paged list of rendition details
     */
    getRenditionsListByNodeId(nodeId) {
        return from(this.apiService.renditionsApi.getRenditions(nodeId));
    }
    /**
     * Creates a rendition for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @return {?} Null response to indicate completion
     */
    createRendition(nodeId, encoding) {
        return from(this.apiService.renditionsApi.createRendition(nodeId, { id: encoding }));
    }
    /**
     * Repeatedly attempts to create a rendition, through to success or failure.
     * @param {?} nodeId ID of the target node
     * @param {?} encoding Name of the rendition encoding
     * @param {?=} pollingInterval Time interval (in milliseconds) between checks for completion
     * @param {?=} retries Number of attempts to make before declaring failure
     * @return {?} True if the rendition was created, false otherwise
     */
    convert(nodeId, encoding, pollingInterval = 1000, retries = 5) {
        return this.createRendition(nodeId, encoding)
            .pipe(concatMap((/**
         * @return {?}
         */
        () => this.pollRendition(nodeId, encoding, pollingInterval, retries))));
    }
    /**
     * @private
     * @param {?} nodeId
     * @param {?} encoding
     * @param {?=} intervalSize
     * @param {?=} retries
     * @return {?}
     */
    pollRendition(nodeId, encoding, intervalSize = 1000, retries = 5) {
        /** @type {?} */
        let attempts = 0;
        return interval(intervalSize)
            .pipe(switchMap((/**
         * @return {?}
         */
        () => this.getRendition(nodeId, encoding))), takeWhile((/**
         * @param {?} renditionEntry
         * @return {?}
         */
        (renditionEntry) => {
            attempts += 1;
            if (attempts > retries) {
                return false;
            }
            return (renditionEntry.entry.status.toString() !== 'CREATED');
        })));
    }
}
RenditionsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
RenditionsService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/** @nocollapse */ RenditionsService.ngInjectableDef = i0.defineInjectable({ factory: function RenditionsService_Factory() { return new RenditionsService(i0.inject(i1.AlfrescoApiService)); }, token: RenditionsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    RenditionsService.prototype.apiService;
}
//# sourceMappingURL=data:application/json;base64,