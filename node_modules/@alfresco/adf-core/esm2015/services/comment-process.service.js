/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { CommentModel } from '../models/comment.model';
import { UserProcessModel } from '../models/user-process.model';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
export class CommentProcessService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Adds a comment to a task.
     * @param {?} taskId ID of the target task
     * @param {?} message Text for the comment
     * @return {?} Details about the comment
     */
    addTaskComment(taskId, message) {
        return from(this.apiService.getInstance().activiti.taskApi.addTaskComment({ message: message }, taskId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets all comments that have been added to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Details for each comment
     */
    getTaskComments(taskId) {
        return from(this.apiService.getInstance().activiti.taskApi.getTaskComments(taskId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            const comments = [];
            response.data.forEach((/**
             * @param {?} comment
             * @return {?}
             */
            (comment) => {
                /** @type {?} */
                const user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({
                    id: comment.id,
                    message: comment.message,
                    created: comment.created,
                    createdBy: user
                }));
            }));
            return comments;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets all comments that have been added to a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @return {?} Details for each comment
     */
    getProcessInstanceComments(processInstanceId) {
        return from(this.apiService.getInstance().activiti.commentsApi.getProcessInstanceComments(processInstanceId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            const comments = [];
            response.data.forEach((/**
             * @param {?} comment
             * @return {?}
             */
            (comment) => {
                /** @type {?} */
                const user = new UserProcessModel(comment.createdBy);
                comments.push(new CommentModel({
                    id: comment.id,
                    message: comment.message,
                    created: comment.created,
                    createdBy: user
                }));
            }));
            return comments;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Adds a comment to a process instance.
     * @param {?} processInstanceId ID of the target process instance
     * @param {?} message Text for the comment
     * @return {?} Details of the comment added
     */
    addProcessInstanceComment(processInstanceId, message) {
        return from(this.apiService.getInstance().activiti.commentsApi.addProcessInstanceComment({ message: message }, processInstanceId)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return new CommentModel({
                id: response.id,
                message: response.message,
                created: response.created,
                createdBy: response.createdBy
            });
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
CommentProcessService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CommentProcessService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ CommentProcessService.ngInjectableDef = i0.defineInjectable({ factory: function CommentProcessService_Factory() { return new CommentProcessService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: CommentProcessService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommentProcessService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    CommentProcessService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,