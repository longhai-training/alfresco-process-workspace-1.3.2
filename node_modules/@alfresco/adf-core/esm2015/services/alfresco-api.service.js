/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiCompatibility, AlfrescoApiConfig } from '@alfresco/js-api';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../app-config/app-config.service";
/* tslint:disable:adf-file-name */
export class AlfrescoApiService {
    /**
     * @param {?} appConfig
     */
    constructor(appConfig) {
        this.appConfig = appConfig;
        /**
         * Publish/subscribe to events related to node updates.
         */
        this.nodeUpdated = new Subject();
    }
    /**
     * @return {?}
     */
    getInstance() {
        return this.alfrescoApi;
    }
    /**
     * @return {?}
     */
    get taskApi() {
        return this.getInstance().activiti.taskApi;
    }
    /**
     * @return {?}
     */
    get contentApi() {
        return this.getInstance().content;
    }
    /**
     * @return {?}
     */
    get nodesApi() {
        return this.getInstance().nodes;
    }
    /**
     * @return {?}
     */
    get renditionsApi() {
        return this.getInstance().core.renditionsApi;
    }
    /**
     * @return {?}
     */
    get sharedLinksApi() {
        return this.getInstance().core.sharedlinksApi;
    }
    /**
     * @return {?}
     */
    get sitesApi() {
        return this.getInstance().core.sitesApi;
    }
    /**
     * @return {?}
     */
    get favoritesApi() {
        return this.getInstance().core.favoritesApi;
    }
    /**
     * @return {?}
     */
    get peopleApi() {
        return this.getInstance().core.peopleApi;
    }
    /**
     * @return {?}
     */
    get searchApi() {
        return this.getInstance().search.searchApi;
    }
    /**
     * @return {?}
     */
    get versionsApi() {
        return this.getInstance().core.versionsApi;
    }
    /**
     * @return {?}
     */
    get classesApi() {
        return this.getInstance().core.classesApi;
    }
    /**
     * @return {?}
     */
    get groupsApi() {
        return this.getInstance().core.groupsApi;
    }
    /**
     * @return {?}
     */
    load() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.appConfig.load().then((/**
             * @return {?}
             */
            () => {
                this.initAlfrescoApi();
            }));
        });
    }
    /**
     * @return {?}
     */
    reset() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.initAlfrescoApi();
        });
    }
    /**
     * @protected
     * @return {?}
     */
    initAlfrescoApi() {
        /** @type {?} */
        const oauth = Object.assign({}, this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        if (oauth) {
            oauth.redirectUri = window.location.origin + (oauth.redirectUri || '/');
            oauth.redirectUriLogout = window.location.origin + (oauth.redirectUriLogout || '/');
        }
        /** @type {?} */
        const config = new AlfrescoApiConfig({
            provider: this.appConfig.get(AppConfigValues.PROVIDERS),
            hostEcm: this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: this.appConfig.get(AppConfigValues.BPMHOST),
            authType: this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: this.appConfig.get(AppConfigValues.DISABLECSRF),
            withCredentials: this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false),
            oauth2: oauth
        });
        if (this.alfrescoApi && this.isDifferentConfig(this.lastConfig, config)) {
            this.lastConfig = config;
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.lastConfig = config;
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    }
    /**
     * @param {?} lastConfig
     * @param {?} newConfig
     * @return {?}
     */
    isDifferentConfig(lastConfig, newConfig) {
        return JSON.stringify(lastConfig) !== JSON.stringify(newConfig);
    }
}
AlfrescoApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AlfrescoApiService.ctorParameters = () => [
    { type: AppConfigService }
];
/** @nocollapse */ AlfrescoApiService.ngInjectableDef = i0.defineInjectable({ factory: function AlfrescoApiService_Factory() { return new AlfrescoApiService(i0.inject(i1.AppConfigService)); }, token: AlfrescoApiService, providedIn: "root" });
if (false) {
    /**
     * Publish/subscribe to events related to node updates.
     * @type {?}
     */
    AlfrescoApiService.prototype.nodeUpdated;
    /**
     * @type {?}
     * @protected
     */
    AlfrescoApiService.prototype.alfrescoApi;
    /** @type {?} */
    AlfrescoApiService.prototype.lastConfig;
    /**
     * @type {?}
     * @protected
     */
    AlfrescoApiService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,