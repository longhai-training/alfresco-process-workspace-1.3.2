/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppConfigValues } from '../app-config/app-config.service';
/**
 * @abstract
 */
export class AuthGuardBase {
    /**
     * @param {?} authenticationService
     * @param {?} router
     * @param {?} appConfigService
     */
    constructor(authenticationService, router, appConfigService) {
        this.authenticationService = authenticationService;
        this.router = router;
        this.appConfigService = appConfigService;
    }
    /**
     * @protected
     * @return {?}
     */
    get withCredentials() {
        return this.appConfigService.get('auth.withCredentials', false);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return this.checkLogin(route, state.url);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    /**
     * @protected
     * @param {?} provider
     * @param {?} url
     * @return {?}
     */
    redirectToUrl(provider, url) {
        this.authenticationService.setRedirect({ provider, url });
        /** @type {?} */
        const pathToLogin = this.getLoginRoute();
        /** @type {?} */
        const urlToRedirect = `/${pathToLogin}?redirectUrl=${url}`;
        this.router.navigateByUrl(urlToRedirect);
    }
    /**
     * @protected
     * @return {?}
     */
    getLoginRoute() {
        return (this.appConfigService &&
            this.appConfigService.get(AppConfigValues.LOGIN_ROUTE, 'login'));
    }
    /**
     * @protected
     * @return {?}
     */
    isOAuthWithoutSilentLogin() {
        /** @type {?} */
        const oauth = this.appConfigService.get(AppConfigValues.OAUTHCONFIG, null);
        return (this.authenticationService.isOauth() && oauth.silentLogin === false);
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AuthGuardBase.prototype.authenticationService;
    /**
     * @type {?}
     * @protected
     */
    AuthGuardBase.prototype.router;
    /**
     * @type {?}
     * @protected
     */
    AuthGuardBase.prototype.appConfigService;
    /**
     * @abstract
     * @param {?} activeRoute
     * @param {?} redirectUrl
     * @return {?}
     */
    AuthGuardBase.prototype.checkLogin = function (activeRoute, redirectUrl) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvYXV0aC1ndWFyZC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBLE9BQU8sRUFFSCxlQUFlLEVBQ2xCLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFHMUMsTUFBTSxPQUFnQixhQUFhOzs7Ozs7SUFhL0IsWUFDYyxxQkFBNEMsRUFDNUMsTUFBYyxFQUNkLGdCQUFrQztRQUZsQywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQzdDLENBQUM7Ozs7O0lBWEosSUFBYyxlQUFlO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FDNUIsc0JBQXNCLEVBQ3RCLEtBQUssQ0FDUixDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBUUQsV0FBVyxDQUNQLEtBQTZCLEVBQzdCLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUNaLEtBQTZCLEVBQzdCLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Ozs7OztJQUVTLGFBQWEsQ0FBQyxRQUFnQixFQUFFLEdBQVc7UUFDakQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDOztjQUVwRCxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRTs7Y0FDbEMsYUFBYSxHQUFHLElBQUksV0FBVyxnQkFBZ0IsR0FBRyxFQUFFO1FBRTFELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRVMsYUFBYTtRQUNuQixPQUFPLENBQ0gsSUFBSSxDQUFDLGdCQUFnQjtZQUNyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUNyQixlQUFlLENBQUMsV0FBVyxFQUMzQixPQUFPLENBQ1YsQ0FDSixDQUFDO0lBQ04sQ0FBQzs7Ozs7SUFFUyx5QkFBeUI7O2NBQ3pCLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUNuQyxlQUFlLENBQUMsV0FBVyxFQUMzQixJQUFJLENBQ1A7UUFDRCxPQUFPLENBQ0gsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssS0FBSyxDQUN0RSxDQUFDO0lBQ04sQ0FBQztDQUNKOzs7Ozs7SUEvQ08sOENBQXNEOzs7OztJQUN0RCwrQkFBd0I7Ozs7O0lBQ3hCLHlDQUE0Qzs7Ozs7OztJQWZoRCw2RUFHb0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIFJvdXRlcixcbiAgICBDYW5BY3RpdmF0ZSxcbiAgICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICAgIFJvdXRlclN0YXRlU25hcHNob3QsXG4gICAgQ2FuQWN0aXZhdGVDaGlsZFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwQ29uZmlnU2VydmljZSxcbiAgICBBcHBDb25maWdWYWx1ZXNcbn0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2F1dGhDb25maWdNb2RlbCB9IGZyb20gJy4uL21vZGVscy9vYXV0aC1jb25maWcubW9kZWwnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXV0aEd1YXJkQmFzZSBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIHtcbiAgICBhYnN0cmFjdCBjaGVja0xvZ2luKFxuICAgICAgICBhY3RpdmVSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICAgICAgcmVkaXJlY3RVcmw6IHN0cmluZ1xuICAgICk6IE9ic2VydmFibGU8Ym9vbGVhbj4gfCBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbjtcblxuICAgIHByb3RlY3RlZCBnZXQgd2l0aENyZWRlbnRpYWxzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldDxib29sZWFuPihcbiAgICAgICAgICAgICdhdXRoLndpdGhDcmVkZW50aWFscycsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcm90ZWN0ZWQgYXV0aGVudGljYXRpb25TZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgcHJvdGVjdGVkIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2VcbiAgICApIHt9XG5cbiAgICBjYW5BY3RpdmF0ZShcbiAgICAgICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gICAgICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XG4gICAgKTogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tMb2dpbihyb3V0ZSwgc3RhdGUudXJsKTtcbiAgICB9XG5cbiAgICBjYW5BY3RpdmF0ZUNoaWxkKFxuICAgICAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICAgICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcbiAgICApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5BY3RpdmF0ZShyb3V0ZSwgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZWRpcmVjdFRvVXJsKHByb3ZpZGVyOiBzdHJpbmcsIHVybDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLnNldFJlZGlyZWN0KHsgcHJvdmlkZXIsIHVybCB9KTtcblxuICAgICAgICBjb25zdCBwYXRoVG9Mb2dpbiA9IHRoaXMuZ2V0TG9naW5Sb3V0ZSgpO1xuICAgICAgICBjb25zdCB1cmxUb1JlZGlyZWN0ID0gYC8ke3BhdGhUb0xvZ2lufT9yZWRpcmVjdFVybD0ke3VybH1gO1xuXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwodXJsVG9SZWRpcmVjdCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldExvZ2luUm91dGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuYXBwQ29uZmlnU2VydmljZSAmJlxuICAgICAgICAgICAgdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KFxuICAgICAgICAgICAgICAgIEFwcENvbmZpZ1ZhbHVlcy5MT0dJTl9ST1VURSxcbiAgICAgICAgICAgICAgICAnbG9naW4nXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGlzT0F1dGhXaXRob3V0U2lsZW50TG9naW4oKSB7XG4gICAgICAgIGNvbnN0IG9hdXRoID0gdGhpcy5hcHBDb25maWdTZXJ2aWNlLmdldDxPYXV0aENvbmZpZ01vZGVsPihcbiAgICAgICAgICAgIEFwcENvbmZpZ1ZhbHVlcy5PQVVUSENPTkZJRyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmlzT2F1dGgoKSAmJiBvYXV0aC5zaWxlbnRMb2dpbiA9PT0gZmFsc2VcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=