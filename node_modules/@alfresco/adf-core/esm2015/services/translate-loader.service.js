/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, throwError, of } from 'rxjs';
import { ComponentTranslationModel } from '../models/component.model';
import { ObjectUtils } from '../utils/object-utils';
import { map, catchError, retry } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class TranslateLoaderService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.prefix = 'i18n';
        this.suffix = '.json';
        this.providers = [];
        this.queue = [];
        this.defaultLang = 'en';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setDefaultLang(value) {
        this.defaultLang = value || 'en';
    }
    /**
     * @param {?} name
     * @param {?} path
     * @return {?}
     */
    registerProvider(name, path) {
        /** @type {?} */
        const registered = this.providers.find((/**
         * @param {?} provider
         * @return {?}
         */
        (provider) => provider.name === name));
        if (registered) {
            registered.path = path;
        }
        else {
            this.providers.push(new ComponentTranslationModel({ name: name, path: path }));
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    providerRegistered(name) {
        return this.providers.find((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x.name === name)) ? true : false;
    }
    /**
     * @param {?} lang
     * @param {?} component
     * @param {?=} fallbackUrl
     * @return {?}
     */
    fetchLanguageFile(lang, component, fallbackUrl) {
        /** @type {?} */
        const translationUrl = fallbackUrl || `${component.path}/${this.prefix}/${lang}${this.suffix}?v=${Date.now()}`;
        return this.http.get(translationUrl).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            component.json[lang] = res;
        })), retry(3), catchError((/**
         * @return {?}
         */
        () => {
            if (!fallbackUrl && lang.includes('-')) {
                const [langId] = lang.split('-');
                if (langId && langId !== this.defaultLang) {
                    /** @type {?} */
                    const url = `${component.path}/${this.prefix}/${langId}${this.suffix}?v=${Date.now()}`;
                    return this.fetchLanguageFile(lang, component, url);
                }
            }
            return throwError(`Failed to load ${translationUrl}`);
        })));
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getComponentToFetch(lang) {
        /** @type {?} */
        const observableBatch = [];
        if (!this.queue[lang]) {
            this.queue[lang] = [];
        }
        this.providers.forEach((/**
         * @param {?} component
         * @return {?}
         */
        (component) => {
            if (!this.isComponentInQueue(lang, component.name)) {
                this.queue[lang].push(component.name);
                observableBatch.push(this.fetchLanguageFile(lang, component));
            }
        }));
        return observableBatch;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    init(lang) {
        if (this.queue[lang] === undefined) {
            this.queue[lang] = [];
        }
    }
    /**
     * @param {?} lang
     * @param {?} name
     * @return {?}
     */
    isComponentInQueue(lang, name) {
        return (this.queue[lang] || []).find((/**
         * @param {?} x
         * @return {?}
         */
        (x) => x === name)) ? true : false;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getFullTranslationJSON(lang) {
        /** @type {?} */
        let result = {};
        this.providers
            .slice(0)
            .sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.name === 'app') {
                return 1;
            }
            if (b.name === 'app') {
                return -1;
            }
            return a.name.localeCompare(b.name);
        }))
            .forEach((/**
         * @param {?} model
         * @return {?}
         */
        (model) => {
            if (model.json && model.json[lang]) {
                result = ObjectUtils.merge(result, model.json[lang]);
            }
        }));
        return result;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getTranslation(lang) {
        /** @type {?} */
        let hasFailures = false;
        /** @type {?} */
        const batch = [
            ...this.getComponentToFetch(lang).map((/**
             * @param {?} observable
             * @return {?}
             */
            (observable) => {
                return observable.pipe(catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    console.warn(error);
                    hasFailures = true;
                    return of(error);
                })));
            }))
        ];
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            if (batch.length > 0) {
                forkJoin(batch).subscribe((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const fullTranslation = this.getFullTranslationJSON(lang);
                    if (fullTranslation) {
                        observer.next(fullTranslation);
                    }
                    if (hasFailures) {
                        observer.error('Failed to load some resources');
                    }
                    else {
                        observer.complete();
                    }
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    observer.error('Failed to load some resources');
                }));
            }
            else {
                /** @type {?} */
                const fullTranslation = this.getFullTranslationJSON(lang);
                if (fullTranslation) {
                    observer.next(fullTranslation);
                    observer.complete();
                }
            }
        }));
    }
}
TranslateLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TranslateLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ TranslateLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function TranslateLoaderService_Factory() { return new TranslateLoaderService(i0.inject(i1.HttpClient)); }, token: TranslateLoaderService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.suffix;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.providers;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.queue;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.defaultLang;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,