/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Minimatch } from 'minimatch-browser';
import { Subject } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { FileUploadCompleteEvent, FileUploadDeleteEvent, FileUploadErrorEvent, FileUploadEvent } from '../events/file.event';
import { FileUploadStatus } from '../models/file.model';
import { AlfrescoApiService } from './alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "../app-config/app-config.service";
export class UploadService {
    /**
     * @param {?} apiService
     * @param {?} appConfigService
     */
    constructor(apiService, appConfigService) {
        this.apiService = apiService;
        this.appConfigService = appConfigService;
        this.cache = {};
        this.totalComplete = 0;
        this.totalAborted = 0;
        this.totalError = 0;
        this.excludedFileList = [];
        this.matchingOptions = null;
        this.activeTask = null;
        this.queue = [];
        this.queueChanged = new Subject();
        this.fileUpload = new Subject();
        this.fileUploadStarting = new Subject();
        this.fileUploadCancelled = new Subject();
        this.fileUploadProgress = new Subject();
        this.fileUploadAborted = new Subject();
        this.fileUploadError = new Subject();
        this.fileUploadComplete = new Subject();
        this.fileUploadDeleted = new Subject();
        this.fileDeleted = new Subject();
    }
    /**
     * Checks whether the service is uploading a file.
     * @return {?} True if a file is uploading, false otherwise
     */
    isUploading() {
        return this.activeTask ? true : false;
    }
    /**
     * Gets the file Queue
     * @return {?} Array of files that form the queue
     */
    getQueue() {
        return this.queue;
    }
    /**
     * Adds files to the uploading queue to be uploaded
     * @param {...?} files One or more separate parameters or an array of files to queue
     * @return {?} Array of files that were not blocked from upload by the ignore list
     */
    addToQueue(...files) {
        /** @type {?} */
        const allowedFiles = files.filter((/**
         * @param {?} currentFile
         * @return {?}
         */
        (currentFile) => this.filterElement(currentFile)));
        this.queue = this.queue.concat(allowedFiles);
        this.queueChanged.next(this.queue);
        return allowedFiles;
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    filterElement(file) {
        /** @type {?} */
        let isAllowed = true;
        this.excludedFileList = (/** @type {?} */ (this.appConfigService.get('files.excluded')));
        if (this.excludedFileList) {
            this.matchingOptions = this.appConfigService.get('files.match-options');
            isAllowed = this.excludedFileList.filter((/**
             * @param {?} pattern
             * @return {?}
             */
            (pattern) => {
                /** @type {?} */
                const minimatch = new Minimatch(pattern, this.matchingOptions);
                return minimatch.match(file.name);
            })).length === 0;
        }
        return isAllowed;
    }
    /**
     * Finds all the files in the queue that are not yet uploaded and uploads them into the directory folder.
     * @param {?=} emitter Emitter to invoke on file status change
     * @return {?}
     */
    uploadFilesInTheQueue(emitter) {
        if (!this.activeTask) {
            /** @type {?} */
            const file = this.queue.find((/**
             * @param {?} currentFile
             * @return {?}
             */
            (currentFile) => currentFile.status === FileUploadStatus.Pending));
            if (file) {
                this.onUploadStarting(file);
                /** @type {?} */
                const promise = this.beginUpload(file, emitter);
                this.activeTask = promise;
                this.cache[file.id] = promise;
                /** @type {?} */
                const next = (/**
                 * @return {?}
                 */
                () => {
                    this.activeTask = null;
                    setTimeout((/**
                     * @return {?}
                     */
                    () => this.uploadFilesInTheQueue(emitter)), 100);
                });
                promise.next = next;
                promise.then((/**
                 * @return {?}
                 */
                () => next()), (/**
                 * @return {?}
                 */
                () => next()));
            }
        }
    }
    /**
     * Cancels uploading of files.
     * @param {...?} files One or more separate parameters or an array of files specifying uploads to cancel
     * @return {?}
     */
    cancelUpload(...files) {
        files.forEach((/**
         * @param {?} file
         * @return {?}
         */
        (file) => {
            /** @type {?} */
            const promise = this.cache[file.id];
            if (promise) {
                promise.abort();
                delete this.cache[file.id];
            }
            else {
                /** @type {?} */
                const performAction = this.getAction(file);
                performAction();
            }
        }));
    }
    /**
     * Clears the upload queue
     * @return {?}
     */
    clearQueue() {
        this.queue = [];
        this.totalComplete = 0;
        this.totalAborted = 0;
        this.totalError = 0;
    }
    /**
     * Gets an upload promise for a file.
     * @param {?} file The target file
     * @return {?} Promise that is resolved if the upload is successful or error otherwise
     */
    getUploadPromise(file) {
        /** @type {?} */
        const opts = {
            renditions: 'doclib',
            include: ['allowableOperations']
        };
        if (file.options.newVersion === true) {
            opts.overwrite = true;
            opts.majorVersion = file.options.majorVersion;
            opts.comment = file.options.comment;
            opts.name = file.name;
        }
        else {
            opts.autoRename = true;
        }
        if (file.options.nodeType) {
            opts.nodeType = file.options.nodeType;
        }
        if (file.id) {
            return this.apiService.getInstance().node.updateNodeContent(file.id, file.file, opts);
        }
        else {
            return this.apiService.getInstance().upload.uploadFile(file.file, file.options.path, file.options.parentId, file.options, opts);
        }
    }
    /**
     * @private
     * @param {?} file
     * @param {?} emitter
     * @return {?}
     */
    beginUpload(file, emitter) {
        /** @type {?} */
        const promise = this.getUploadPromise(file);
        promise.on('progress', (/**
         * @param {?} progress
         * @return {?}
         */
        (progress) => {
            this.onUploadProgress(file, progress);
        }))
            .on('abort', (/**
         * @return {?}
         */
        () => {
            this.onUploadAborted(file);
            if (emitter) {
                emitter.emit({ value: 'File aborted' });
            }
        }))
            .on('error', (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.onUploadError(file, err);
            if (emitter) {
                emitter.emit({ value: 'Error file uploaded' });
            }
        }))
            .on('success', (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.onUploadComplete(file, data);
            if (emitter) {
                emitter.emit({ value: data });
            }
        }))
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
        }));
        return promise;
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    onUploadStarting(file) {
        if (file) {
            file.status = FileUploadStatus.Starting;
            /** @type {?} */
            const event = new FileUploadEvent(file, FileUploadStatus.Starting);
            this.fileUpload.next(event);
            this.fileUploadStarting.next(event);
        }
    }
    /**
     * @private
     * @param {?} file
     * @param {?} progress
     * @return {?}
     */
    onUploadProgress(file, progress) {
        if (file) {
            file.progress = progress;
            file.status = FileUploadStatus.Progress;
            /** @type {?} */
            const event = new FileUploadEvent(file, FileUploadStatus.Progress);
            this.fileUpload.next(event);
            this.fileUploadProgress.next(event);
        }
    }
    /**
     * @private
     * @param {?} file
     * @param {?} error
     * @return {?}
     */
    onUploadError(file, error) {
        if (file) {
            file.errorCode = (error || {}).status;
            file.status = FileUploadStatus.Error;
            this.totalError++;
            /** @type {?} */
            const promise = this.cache[file.id];
            if (promise) {
                delete this.cache[file.id];
            }
            /** @type {?} */
            const event = new FileUploadErrorEvent(file, error, this.totalError);
            this.fileUpload.next(event);
            this.fileUploadError.next(event);
        }
    }
    /**
     * @private
     * @param {?} file
     * @param {?} data
     * @return {?}
     */
    onUploadComplete(file, data) {
        if (file) {
            file.status = FileUploadStatus.Complete;
            file.data = data;
            this.totalComplete++;
            /** @type {?} */
            const promise = this.cache[file.id];
            if (promise) {
                delete this.cache[file.id];
            }
            /** @type {?} */
            const event = new FileUploadCompleteEvent(file, this.totalComplete, data, this.totalAborted);
            this.fileUpload.next(event);
            this.fileUploadComplete.next(event);
        }
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    onUploadAborted(file) {
        if (file) {
            file.status = FileUploadStatus.Aborted;
            this.totalAborted++;
            /** @type {?} */
            const promise = this.cache[file.id];
            if (promise) {
                delete this.cache[file.id];
            }
            /** @type {?} */
            const event = new FileUploadEvent(file, FileUploadStatus.Aborted);
            this.fileUpload.next(event);
            this.fileUploadAborted.next(event);
            promise.next();
        }
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    onUploadCancelled(file) {
        if (file) {
            file.status = FileUploadStatus.Cancelled;
            /** @type {?} */
            const event = new FileUploadEvent(file, FileUploadStatus.Cancelled);
            this.fileUpload.next(event);
            this.fileUploadCancelled.next(event);
        }
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    onUploadDeleted(file) {
        if (file) {
            file.status = FileUploadStatus.Deleted;
            this.totalComplete--;
            /** @type {?} */
            const event = new FileUploadDeleteEvent(file, this.totalComplete);
            this.fileUpload.next(event);
            this.fileUploadDeleted.next(event);
        }
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    getAction(file) {
        /** @type {?} */
        const actions = {
            [FileUploadStatus.Pending]: (/**
             * @return {?}
             */
            () => this.onUploadCancelled(file)),
            [FileUploadStatus.Deleted]: (/**
             * @return {?}
             */
            () => this.onUploadDeleted(file)),
            [FileUploadStatus.Error]: (/**
             * @return {?}
             */
            () => this.onUploadError(file, null))
        };
        return actions[file.status];
    }
}
UploadService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UploadService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: AppConfigService }
];
/** @nocollapse */ UploadService.ngInjectableDef = i0.defineInjectable({ factory: function UploadService_Factory() { return new UploadService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.AppConfigService)); }, token: UploadService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.totalComplete;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.totalAborted;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.totalError;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.excludedFileList;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.matchingOptions;
    /** @type {?} */
    UploadService.prototype.activeTask;
    /** @type {?} */
    UploadService.prototype.queue;
    /** @type {?} */
    UploadService.prototype.queueChanged;
    /** @type {?} */
    UploadService.prototype.fileUpload;
    /** @type {?} */
    UploadService.prototype.fileUploadStarting;
    /** @type {?} */
    UploadService.prototype.fileUploadCancelled;
    /** @type {?} */
    UploadService.prototype.fileUploadProgress;
    /** @type {?} */
    UploadService.prototype.fileUploadAborted;
    /** @type {?} */
    UploadService.prototype.fileUploadError;
    /** @type {?} */
    UploadService.prototype.fileUploadComplete;
    /** @type {?} */
    UploadService.prototype.fileUploadDeleted;
    /** @type {?} */
    UploadService.prototype.fileDeleted;
    /**
     * @type {?}
     * @protected
     */
    UploadService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,