/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiCompatibility } from '@alfresco/js-api';
import * as i0 from "@angular/core";
/* tslint:disable:adf-file-name */
export class ExternalAlfrescoApiService {
    /**
     * @return {?}
     */
    getInstance() {
        return this.alfrescoApi;
    }
    /**
     * @return {?}
     */
    get contentApi() {
        return this.getInstance().content;
    }
    /**
     * @return {?}
     */
    get nodesApi() {
        return this.getInstance().nodes;
    }
    /**
     * @param {?} ecmHost
     * @param {?} contextRoot
     * @return {?}
     */
    init(ecmHost, contextRoot) {
        /** @type {?} */
        const domainPrefix = this.createPrefixFromHost(ecmHost);
        /** @type {?} */
        const config = {
            provider: 'ECM',
            hostEcm: ecmHost,
            authType: 'BASIC',
            contextRoot: contextRoot,
            domainPrefix
        };
        this.initAlfrescoApi(config);
    }
    /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    initAlfrescoApi(config) {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    createPrefixFromHost(url) {
        /** @type {?} */
        const match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
        /** @type {?} */
        let result = null;
        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
            result = match[2];
        }
        return result;
    }
}
ExternalAlfrescoApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ExternalAlfrescoApiService.ngInjectableDef = i0.defineInjectable({ factory: function ExternalAlfrescoApiService_Factory() { return new ExternalAlfrescoApiService(); }, token: ExternalAlfrescoApiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ExternalAlfrescoApiService.prototype.alfrescoApi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYWxmcmVzY28tYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9leHRlcm5hbC1hbGZyZXNjby1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDSCx3QkFBd0IsRUFHM0IsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBTTFCLE1BQU0sT0FBTywwQkFBMEI7Ozs7SUFJbkMsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDcEMsQ0FBQzs7Ozs7O0lBRUQsSUFBSSxDQUFDLE9BQWUsRUFBRSxXQUFtQjs7Y0FFL0IsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7O2NBRWpELE1BQU0sR0FBRztZQUNYLFFBQVEsRUFBRSxLQUFLO1lBQ2YsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLE9BQU87WUFDakIsV0FBVyxFQUFFLFdBQVc7WUFDeEIsWUFBWTtTQUNmO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7SUFFUyxlQUFlLENBQUMsTUFBTTtRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0M7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7Ozs7OztJQUVPLG9CQUFvQixDQUFDLEdBQVc7O2NBQzlCLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLCtCQUErQixDQUFDOztZQUNwRCxNQUFNLEdBQUcsSUFBSTtRQUNqQixJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzFGLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDckI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7WUFoREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7OztJQUdHLGlEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5LFxuICAgIENvbnRlbnRBcGksXG4gICAgQ29yZVxufSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbi8qIHRzbGludDpkaXNhYmxlOmFkZi1maWxlLW5hbWUgKi9cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRlcm5hbEFsZnJlc2NvQXBpU2VydmljZSB7XG5cbiAgICBwcm90ZWN0ZWQgYWxmcmVzY29BcGk6IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eTtcblxuICAgIGdldEluc3RhbmNlKCk6IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvQXBpO1xuICAgIH1cblxuICAgIGdldCBjb250ZW50QXBpKCk6IENvbnRlbnRBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IG5vZGVzQXBpKCk6IENvcmUuTm9kZXNBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLm5vZGVzO1xuICAgIH1cblxuICAgIGluaXQoZWNtSG9zdDogc3RyaW5nLCBjb250ZXh0Um9vdDogc3RyaW5nKSB7XG5cbiAgICAgICAgY29uc3QgZG9tYWluUHJlZml4ID0gdGhpcy5jcmVhdGVQcmVmaXhGcm9tSG9zdChlY21Ib3N0KTtcblxuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBwcm92aWRlcjogJ0VDTScsXG4gICAgICAgICAgICBob3N0RWNtOiBlY21Ib3N0LFxuICAgICAgICAgICAgYXV0aFR5cGU6ICdCQVNJQycsXG4gICAgICAgICAgICBjb250ZXh0Um9vdDogY29udGV4dFJvb3QsXG4gICAgICAgICAgICBkb21haW5QcmVmaXhcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbml0QWxmcmVzY29BcGkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaW5pdEFsZnJlc2NvQXBpKGNvbmZpZykge1xuICAgICAgICBpZiAodGhpcy5hbGZyZXNjb0FwaSkge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaS5jb25maWd1cmVKc0FwaShjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaSA9IG5ldyBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUHJlZml4RnJvbUhvc3QodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvOlxcL1xcLyh3d3dbMC05XT9cXC4pPyguW14vOl0rKS9pKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGlmIChtYXRjaCAhPSBudWxsICYmIG1hdGNoLmxlbmd0aCA+IDIgJiYgdHlwZW9mIG1hdGNoWzJdID09PSAnc3RyaW5nJyAmJiBtYXRjaFsyXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBtYXRjaFsyXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==