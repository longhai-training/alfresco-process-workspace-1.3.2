/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { MatSnackBar } from '@angular/material';
import { TranslationService } from './translation.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/snack-bar";
import * as i2 from "./translation.service";
import * as i3 from "../app-config/app-config.service";
export class NotificationService {
    /**
     * @param {?} snackBar
     * @param {?} translationService
     * @param {?} appConfigService
     */
    constructor(snackBar, translationService, appConfigService) {
        this.snackBar = snackBar;
        this.translationService = translationService;
        this.appConfigService = appConfigService;
        this.DEFAULT_DURATION_MESSAGE = 5000;
        this.DEFAULT_DURATION_MESSAGE = this.appConfigService.get(AppConfigValues.NOTIFY_DURATION) || this.DEFAULT_DURATION_MESSAGE;
    }
    /**
     * Opens a SnackBar notification to show a message.
     * @param {?} message The message (or resource key) to show.
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    openSnackMessage(message, config) {
        if (!config) {
            config = this.DEFAULT_DURATION_MESSAGE;
        }
        /** @type {?} */
        const translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, null, config);
    }
    /**
     * Opens a SnackBar notification with a message and a response button.
     * @param {?} message The message (or resource key) to show.
     * @param {?} action Caption for the response button
     * @param {?=} config Time before notification disappears after being shown or MatSnackBarConfig object
     * @return {?} Information/control object for the SnackBar
     */
    openSnackMessageAction(message, action, config) {
        if (!config) {
            config = this.DEFAULT_DURATION_MESSAGE;
        }
        /** @type {?} */
        const translatedMessage = this.translationService.instant(message);
        if (typeof config === 'number') {
            config = {
                duration: config
            };
        }
        return this.snackBar.open(translatedMessage, action, config);
    }
    /**
     *  dismiss the notification snackbar
     * @return {?}
     */
    dismissSnackMessageAction() {
        return this.snackBar.dismiss();
    }
}
NotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NotificationService.ctorParameters = () => [
    { type: MatSnackBar },
    { type: TranslationService },
    { type: AppConfigService }
];
/** @nocollapse */ NotificationService.ngInjectableDef = i0.defineInjectable({ factory: function NotificationService_Factory() { return new NotificationService(i0.inject(i1.MatSnackBar), i0.inject(i2.TranslationService), i0.inject(i3.AppConfigService)); }, token: NotificationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NotificationService.prototype.DEFAULT_DURATION_MESSAGE;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.snackBar;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    NotificationService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQXFDLE1BQU0sbUJBQW1CLENBQUM7QUFDbkYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7OztBQUtyRixNQUFNLE9BQU8sbUJBQW1COzs7Ozs7SUFJNUIsWUFBb0IsUUFBcUIsRUFDckIsa0JBQXNDLEVBQ3RDLGdCQUFrQztRQUZsQyxhQUFRLEdBQVIsUUFBUSxDQUFhO1FBQ3JCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUp0RCw2QkFBd0IsR0FBVyxJQUFJLENBQUM7UUFLcEMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQVMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztJQUV4SSxDQUFDOzs7Ozs7O0lBUUQsZ0JBQWdCLENBQUMsT0FBZSxFQUFFLE1BQW1DO1FBQ2pFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDO1NBQzFDOztjQUVLLGlCQUFpQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRWxFLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzVCLE1BQU0sR0FBRztnQkFDTCxRQUFRLEVBQUUsTUFBTTthQUNuQixDQUFDO1NBQ0w7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7OztJQVNELHNCQUFzQixDQUFDLE9BQWUsRUFBRSxNQUFjLEVBQUUsTUFBbUM7UUFDdkYsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE1BQU0sR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUM7U0FDMUM7O2NBRUssaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFFbEUsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDNUIsTUFBTSxHQUFHO2dCQUNMLFFBQVEsRUFBRSxNQUFNO2FBQ25CLENBQUM7U0FDTDtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7O0lBS0QseUJBQXlCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7WUFoRUosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBTlEsV0FBVztZQUNYLGtCQUFrQjtZQUNsQixnQkFBZ0I7Ozs7O0lBT3JCLHVEQUF3Qzs7Ozs7SUFFNUIsdUNBQTZCOzs7OztJQUM3QixpREFBOEM7Ozs7O0lBQzlDLCtDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFNuYWNrQmFyLCBNYXRTbmFja0JhclJlZiwgTWF0U25hY2tCYXJDb25maWcgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgQXBwQ29uZmlnVmFsdWVzIH0gZnJvbSAnLi4vYXBwLWNvbmZpZy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblNlcnZpY2Uge1xuXG4gICAgREVGQVVMVF9EVVJBVElPTl9NRVNTQUdFOiBudW1iZXIgPSA1MDAwO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzbmFja0JhcjogTWF0U25hY2tCYXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5ERUZBVUxUX0RVUkFUSU9OX01FU1NBR0UgPSB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oQXBwQ29uZmlnVmFsdWVzLk5PVElGWV9EVVJBVElPTikgfHwgdGhpcy5ERUZBVUxUX0RVUkFUSU9OX01FU1NBR0U7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIFNuYWNrQmFyIG5vdGlmaWNhdGlvbiB0byBzaG93IGEgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSAob3IgcmVzb3VyY2Uga2V5KSB0byBzaG93LlxuICAgICAqIEBwYXJhbSBjb25maWcgVGltZSBiZWZvcmUgbm90aWZpY2F0aW9uIGRpc2FwcGVhcnMgYWZ0ZXIgYmVpbmcgc2hvd24gb3IgTWF0U25hY2tCYXJDb25maWcgb2JqZWN0XG4gICAgICogQHJldHVybnMgSW5mb3JtYXRpb24vY29udHJvbCBvYmplY3QgZm9yIHRoZSBTbmFja0JhclxuICAgICAqL1xuICAgIG9wZW5TbmFja01lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCBjb25maWc/OiBudW1iZXIgfCBNYXRTbmFja0JhckNvbmZpZyk6IE1hdFNuYWNrQmFyUmVmPGFueT4ge1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnID0gdGhpcy5ERUZBVUxUX0RVUkFUSU9OX01FU1NBR0U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0cmFuc2xhdGVkTWVzc2FnZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQobWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGNvbmZpZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLm9wZW4odHJhbnNsYXRlZE1lc3NhZ2UsIG51bGwsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBTbmFja0JhciBub3RpZmljYXRpb24gd2l0aCBhIG1lc3NhZ2UgYW5kIGEgcmVzcG9uc2UgYnV0dG9uLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIChvciByZXNvdXJjZSBrZXkpIHRvIHNob3cuXG4gICAgICogQHBhcmFtIGFjdGlvbiBDYXB0aW9uIGZvciB0aGUgcmVzcG9uc2UgYnV0dG9uXG4gICAgICogQHBhcmFtIGNvbmZpZyBUaW1lIGJlZm9yZSBub3RpZmljYXRpb24gZGlzYXBwZWFycyBhZnRlciBiZWluZyBzaG93biBvciBNYXRTbmFja0JhckNvbmZpZyBvYmplY3RcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbi9jb250cm9sIG9iamVjdCBmb3IgdGhlIFNuYWNrQmFyXG4gICAgICovXG4gICAgb3BlblNuYWNrTWVzc2FnZUFjdGlvbihtZXNzYWdlOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nLCBjb25maWc/OiBudW1iZXIgfCBNYXRTbmFja0JhckNvbmZpZyk6IE1hdFNuYWNrQmFyUmVmPGFueT4ge1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnID0gdGhpcy5ERUZBVUxUX0RVUkFUSU9OX01FU1NBR0U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0cmFuc2xhdGVkTWVzc2FnZSA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQobWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGNvbmZpZ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNuYWNrQmFyLm9wZW4odHJhbnNsYXRlZE1lc3NhZ2UsIGFjdGlvbiwgY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgZGlzbWlzcyB0aGUgbm90aWZpY2F0aW9uIHNuYWNrYmFyXG4gICAgICovXG4gICAgZGlzbWlzc1NuYWNrTWVzc2FnZUFjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc25hY2tCYXIuZGlzbWlzcygpO1xuICAgIH1cbn1cbiJdfQ==