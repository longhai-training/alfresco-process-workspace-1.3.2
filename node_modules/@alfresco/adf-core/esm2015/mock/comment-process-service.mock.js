/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentModel } from '../models/comment.model';
import { UserProcessModel } from '../models/user-process.model';
/** @type {?} */
export let fakeUser1 = { id: 1, email: 'fake-email@dom.com', firstName: 'firstName', lastName: 'lastName' };
/** @type {?} */
export let fakeUser2 = { id: 1001, email: 'some-one@somegroup.com', firstName: 'some', lastName: 'one' };
/** @type {?} */
export let fakeTasksComment = {
    size: 2, total: 2, start: 0,
    data: [
        {
            id: 1, message: 'fake-message-1', created: '', createdBy: fakeUser1
        },
        {
            id: 2, message: 'fake-message-2', created: '', createdBy: fakeUser1
        }
    ]
};
/** @type {?} */
export let fakeProcessComment = new CommentModel({ id: 1, message: 'Test', created: new Date('2016-11-10T03:37:30.010+0000'), createdBy: new UserProcessModel({
        id: 13,
        firstName: 'Wilbur',
        lastName: 'Adams',
        email: 'wilbur@app.com'
    }) });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC1wcm9jZXNzLXNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbIm1vY2svY29tbWVudC1wcm9jZXNzLXNlcnZpY2UubW9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBRWhFLE1BQU0sS0FBSyxTQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7O0FBRTNHLE1BQU0sS0FBSyxTQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7O0FBRXhHLE1BQU0sS0FBSyxnQkFBZ0IsR0FBRztJQUMxQixJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDM0IsSUFBSSxFQUFFO1FBQ0Y7WUFDSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTO1NBQ3RFO1FBQ0Q7WUFDSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTO1NBQ3RFO0tBQ0o7Q0FDSjs7QUFFRCxNQUFNLEtBQUssa0JBQWtCLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksSUFBSSxDQUFDLDhCQUE4QixDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksZ0JBQWdCLENBQUM7UUFDekosRUFBRSxFQUFFLEVBQUU7UUFDTixTQUFTLEVBQUUsUUFBUTtRQUNuQixRQUFRLEVBQUUsT0FBTztRQUNqQixLQUFLLEVBQUUsZ0JBQWdCO0tBQzFCLENBQUMsRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tbWVudE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2NvbW1lbnQubW9kZWwnO1xuaW1wb3J0IHsgVXNlclByb2Nlc3NNb2RlbCB9IGZyb20gJy4uL21vZGVscy91c2VyLXByb2Nlc3MubW9kZWwnO1xuXG5leHBvcnQgbGV0IGZha2VVc2VyMSA9IHsgaWQ6IDEsIGVtYWlsOiAnZmFrZS1lbWFpbEBkb20uY29tJywgZmlyc3ROYW1lOiAnZmlyc3ROYW1lJywgbGFzdE5hbWU6ICdsYXN0TmFtZScgfTtcblxuZXhwb3J0IGxldCBmYWtlVXNlcjIgPSB7IGlkOiAxMDAxLCBlbWFpbDogJ3NvbWUtb25lQHNvbWVncm91cC5jb20nLCBmaXJzdE5hbWU6ICdzb21lJywgbGFzdE5hbWU6ICdvbmUnIH07XG5cbmV4cG9ydCBsZXQgZmFrZVRhc2tzQ29tbWVudCA9IHtcbiAgICBzaXplOiAyLCB0b3RhbDogMiwgc3RhcnQ6IDAsXG4gICAgZGF0YTogW1xuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMSwgbWVzc2FnZTogJ2Zha2UtbWVzc2FnZS0xJywgY3JlYXRlZDogJycsIGNyZWF0ZWRCeTogZmFrZVVzZXIxXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAyLCBtZXNzYWdlOiAnZmFrZS1tZXNzYWdlLTInLCBjcmVhdGVkOiAnJywgY3JlYXRlZEJ5OiBmYWtlVXNlcjFcbiAgICAgICAgfVxuICAgIF1cbn07XG5cbmV4cG9ydCBsZXQgZmFrZVByb2Nlc3NDb21tZW50ID0gbmV3IENvbW1lbnRNb2RlbCh7aWQ6IDEsIG1lc3NhZ2U6ICdUZXN0JywgY3JlYXRlZDogbmV3IERhdGUoJzIwMTYtMTEtMTBUMDM6Mzc6MzAuMDEwKzAwMDAnKSwgY3JlYXRlZEJ5OiBuZXcgVXNlclByb2Nlc3NNb2RlbCh7XG4gICAgaWQ6IDEzLFxuICAgIGZpcnN0TmFtZTogJ1dpbGJ1cicsXG4gICAgbGFzdE5hbWU6ICdBZGFtcycsXG4gICAgZW1haWw6ICd3aWxidXJAYXBwLmNvbSdcbn0pfSk7XG4iXX0=