/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
export class ActivitiContentService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Returns a list of child nodes below the specified folder
     *
     * @param {?} accountId
     * @param {?} folderId
     * @return {?}
     */
    getAlfrescoNodes(accountId, folderId) {
        /** @type {?} */
        const apiService = this.apiService.getInstance();
        /** @type {?} */
        const accountShortId = accountId.replace('alfresco-', '');
        return from(apiService.activiti.alfrescoApi.getContentInFolder(accountShortId, folderId))
            .pipe(map(this.toJsonArray), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Returns a list of all the repositories configured
     *
     * @param {?} tenantId
     * @param {?} includeAccount
     * @return {?}
     */
    getAlfrescoRepositories(tenantId, includeAccount) {
        /** @type {?} */
        const apiService = this.apiService.getInstance();
        /** @type {?} */
        const opts = {
            tenantId: tenantId,
            includeAccounts: includeAccount
        };
        return from(apiService.activiti.alfrescoApi.getRepositories(opts))
            .pipe(map(this.toJsonArray), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Returns a list of child nodes below the specified folder
     *
     * @param {?} accountId
     * @param {?} node
     * @param {?} siteId
     * @return {?}
     */
    linkAlfrescoNode(accountId, node, siteId) {
        /** @type {?} */
        const apiService = this.apiService.getInstance();
        return from(apiService.activiti.contentApi.createTemporaryRelatedContent({
            link: true,
            name: node.title,
            simpleType: node.simpleType,
            source: accountId,
            sourceId: node.id + '@' + siteId
        }))
            .pipe(map(this.toJson), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} node
     * @param {?} siteId
     * @param {?} accountId
     * @return {?}
     */
    applyAlfrescoNode(node, siteId, accountId) {
        /** @type {?} */
        const apiService = this.apiService.getInstance();
        /** @type {?} */
        const currentSideId = siteId ? siteId : this.getSiteNameFromNodePath(node);
        /** @type {?} */
        const params = {
            source: accountId,
            mimeType: node.content.mimeType,
            sourceId: node.id + ';' + node.properties['cm:versionLabel'] + '@' + currentSideId,
            name: node.name,
            link: false
        };
        return from(apiService.activiti.contentApi.createTemporaryRelatedContent(params))
            .pipe(map(this.toJson), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getSiteNameFromNodePath(node) {
        /** @type {?} */
        let siteName = '';
        if (node.path) {
            /** @type {?} */
            const foundNode = node.path
                .elements.find((/**
             * @param {?} pathNode
             * @return {?}
             */
            (pathNode) => pathNode.nodeType === 'st:site' &&
                pathNode.name !== 'Sites'));
            siteName = foundNode ? foundNode.name : '';
        }
        return siteName.toLocaleLowerCase();
    }
    /**
     * @param {?} res
     * @return {?}
     */
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    /**
     * @param {?} res
     * @return {?}
     */
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        /** @type {?} */
        let errMsg = ActivitiContentService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : ActivitiContentService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
ActivitiContentService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
ActivitiContentService.GENERIC_ERROR_MESSAGE = 'Server error';
ActivitiContentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ActivitiContentService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ ActivitiContentService.ngInjectableDef = i0.defineInjectable({ factory: function ActivitiContentService_Factory() { return new ActivitiContentService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: ActivitiContentService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ActivitiContentService.UNKNOWN_ERROR_MESSAGE;
    /** @type {?} */
    ActivitiContentService.GENERIC_ERROR_MESSAGE;
    /**
     * @type {?}
     * @private
     */
    ActivitiContentService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    ActivitiContentService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,