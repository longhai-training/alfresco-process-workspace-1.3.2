/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import { AmountWidgetComponent, CheckboxWidgetComponent, ContainerWidgetComponent, DateWidgetComponent, DisplayTextWidgetComponentComponent, DocumentWidgetComponent, DropdownWidgetComponent, DynamicTableWidgetComponent, FunctionalGroupWidgetComponent, HyperlinkWidgetComponent, MultilineTextWidgetComponentComponent, NumberWidgetComponent, PeopleWidgetComponent, RadioButtonsWidgetComponent, TextWidgetComponent, TypeaheadWidgetComponent, UnknownWidgetComponent, UploadWidgetComponent, DateTimeWidgetComponent } from './../components/widgets/index';
import * as i0 from "@angular/core";
export class FormRenderingService extends DynamicComponentMapper {
    constructor() {
        super();
        this.defaultValue = UnknownWidgetComponent;
        this.types = {
            'text': DynamicComponentResolver.fromType(TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),
            'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(DateTimeWidgetComponent)
        };
    }
}
FormRenderingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FormRenderingService.ctorParameters = () => [];
/** @nocollapse */ FormRenderingService.ngInjectableDef = i0.defineInjectable({ factory: function FormRenderingService_Factory() { return new FormRenderingService(); }, token: FormRenderingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.defaultValue;
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.types;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsc0JBQXNCLEVBQW1DLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDcEosT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUN2Qix3QkFBd0IsRUFDeEIsbUJBQW1CLEVBQ25CLG1DQUFtQyxFQUNuQyx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLDJCQUEyQixFQUMzQiw4QkFBOEIsRUFDOUIsd0JBQXdCLEVBQ3hCLHFDQUFxQyxFQUNyQyxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLDJCQUEyQixFQUMzQixtQkFBbUIsRUFDbkIsd0JBQXdCLEVBQ3hCLHNCQUFzQixFQUN0QixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQzFCLE1BQU0sK0JBQStCLENBQUM7O0FBS3ZDLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxzQkFBc0I7SUEwQjVEO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUF6QkYsaUJBQVksR0FBYSxzQkFBc0IsQ0FBQztRQUNoRCxVQUFLLEdBQXVEO1lBQ2xFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDOUQsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUNoRSxTQUFTLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ25FLGlCQUFpQixFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQ0FBcUMsQ0FBQztZQUMzRixTQUFTLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3JFLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7WUFDdEUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUM5RCxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ2xFLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUM7WUFDL0UsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUN4RSxlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1DQUFtQyxDQUFDO1lBQ3ZGLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNsRSxrQkFBa0IsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUM7WUFDckYsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQztZQUMvRSxXQUFXLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQ3hFLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDcEUsVUFBVSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztZQUN0RSxRQUFRLEVBQUcsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ25FLFVBQVUsRUFBRyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7U0FDMUUsQ0FBQztJQUlGLENBQUM7OztZQS9CSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7Ozs7SUFHRyw0Q0FBMEQ7Ozs7O0lBQzFELHFDQXFCRSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnRNYXBwZXIsIER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24sIER5bmFtaWNDb21wb25lbnRSZXNvbHZlciB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2R5bmFtaWMtY29tcG9uZW50LW1hcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtcbiAgICBBbW91bnRXaWRnZXRDb21wb25lbnQsXG4gICAgQ2hlY2tib3hXaWRnZXRDb21wb25lbnQsXG4gICAgQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50LFxuICAgIERhdGVXaWRnZXRDb21wb25lbnQsXG4gICAgRGlzcGxheVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQsXG4gICAgRG9jdW1lbnRXaWRnZXRDb21wb25lbnQsXG4gICAgRHJvcGRvd25XaWRnZXRDb21wb25lbnQsXG4gICAgRHluYW1pY1RhYmxlV2lkZ2V0Q29tcG9uZW50LFxuICAgIEZ1bmN0aW9uYWxHcm91cFdpZGdldENvbXBvbmVudCxcbiAgICBIeXBlcmxpbmtXaWRnZXRDb21wb25lbnQsXG4gICAgTXVsdGlsaW5lVGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCxcbiAgICBOdW1iZXJXaWRnZXRDb21wb25lbnQsXG4gICAgUGVvcGxlV2lkZ2V0Q29tcG9uZW50LFxuICAgIFJhZGlvQnV0dG9uc1dpZGdldENvbXBvbmVudCxcbiAgICBUZXh0V2lkZ2V0Q29tcG9uZW50LFxuICAgIFR5cGVhaGVhZFdpZGdldENvbXBvbmVudCxcbiAgICBVbmtub3duV2lkZ2V0Q29tcG9uZW50LFxuICAgIFVwbG9hZFdpZGdldENvbXBvbmVudCxcbiAgICBEYXRlVGltZVdpZGdldENvbXBvbmVudFxufSBmcm9tICcuLy4uL2NvbXBvbmVudHMvd2lkZ2V0cy9pbmRleCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRm9ybVJlbmRlcmluZ1NlcnZpY2UgZXh0ZW5kcyBEeW5hbWljQ29tcG9uZW50TWFwcGVyIHtcblxuICAgIHByb3RlY3RlZCBkZWZhdWx0VmFsdWU6IFR5cGU8e30+ID0gVW5rbm93bldpZGdldENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgdHlwZXM6IHsgW2tleTogc3RyaW5nXTogRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiB9ID0ge1xuICAgICAgICAndGV4dCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShUZXh0V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3N0cmluZyc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShUZXh0V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2ludGVnZXInOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoTnVtYmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ211bHRpLWxpbmUtdGV4dCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShNdWx0aWxpbmVUZXh0V2lkZ2V0Q29tcG9uZW50Q29tcG9uZW50KSxcbiAgICAgICAgJ2Jvb2xlYW4nOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2hlY2tib3hXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZHJvcGRvd24nOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRHJvcGRvd25XaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZGF0ZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEYXRlV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2Ftb3VudCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShBbW91bnRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAncmFkaW8tYnV0dG9ucyc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShSYWRpb0J1dHRvbnNXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnaHlwZXJsaW5rJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKEh5cGVybGlua1dpZGdldENvbXBvbmVudCksXG4gICAgICAgICdyZWFkb25seS10ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERpc3BsYXlUZXh0V2lkZ2V0Q29tcG9uZW50Q29tcG9uZW50KSxcbiAgICAgICAgJ3R5cGVhaGVhZCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShUeXBlYWhlYWRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAncGVvcGxlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFBlb3BsZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdmdW5jdGlvbmFsLWdyb3VwJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKEZ1bmN0aW9uYWxHcm91cFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkeW5hbWljLXRhYmxlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKER5bmFtaWNUYWJsZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdjb250YWluZXInOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2dyb3VwJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENvbnRhaW5lcldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkb2N1bWVudCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEb2N1bWVudFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICd1cGxvYWQnOiAgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFVwbG9hZFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkYXRldGltZSc6ICBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGF0ZVRpbWVXaWRnZXRDb21wb25lbnQpXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cbiJdfQ==