/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ObjectUtils } from '../utils/object-utils';
import { Subject } from 'rxjs';
import { map, distinctUntilChanged } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @enum {string} */
const AppConfigValues = {
    APP_CONFIG_LANGUAGES_KEY: 'languages',
    PROVIDERS: 'providers',
    OAUTHCONFIG: 'oauth2',
    ECMHOST: 'ecmHost',
    BASESHAREURL: 'baseShareUrl',
    BPMHOST: 'bpmHost',
    IDENTITY_HOST: 'identityHost',
    AUTHTYPE: 'authType',
    CONTEXTROOTECM: 'contextRootEcm',
    CONTEXTROOTBPM: 'contextRootBpm',
    ALFRESCO_REPOSITORY_NAME: 'alfrescoRepositoryName',
    LOG_LEVEL: 'logLevel',
    LOGIN_ROUTE: 'loginRoute',
    DISABLECSRF: 'disableCSRF',
    AUTH_WITH_CREDENTIALS: 'auth.withCredentials',
    APPLICATION: 'application',
    NOTIFY_DURATION: 'notificationDefaultDuration',
};
export { AppConfigValues };
/** @enum {string} */
const Status = {
    INIT: 'init',
    LOADING: 'loading',
    LOADED: 'loaded',
};
export { Status };
/* spellchecker: enable */
export class AppConfigService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.config = {
            application: {
                name: 'Alfresco ADF Application'
            },
            ecmHost: 'http://{hostname}{:port}/ecm',
            bpmHost: 'http://{hostname}{:port}/bpm',
            logLevel: 'silent',
            alfrescoRepositoryName: 'alfresco-1'
        };
        this.status = Status.INIT;
        this.onLoadSubject = new Subject();
        this.onLoad = this.onLoadSubject.asObservable();
    }
    /**
     * Requests notification of a property value when it is loaded.
     * @param {?} property The desired property value
     * @return {?} Property value, when loaded
     */
    select(property) {
        return this.onLoadSubject
            .pipe(map((/**
         * @param {?} config
         * @return {?}
         */
        (config) => config[property])), distinctUntilChanged());
    }
    /**
     * Gets the value of a named property.
     * @template T
     * @param {?} key Name of the property
     * @param {?=} defaultValue Value to return if the key is not found
     * @return {?} Value of the property
     */
    get(key, defaultValue) {
        /** @type {?} */
        let result = ObjectUtils.getValue(this.config, key);
        if (typeof result === 'string') {
            /** @type {?} */
            const keywords = new Map();
            keywords.set('hostname', this.getLocationHostname());
            keywords.set(':port', this.getLocationPort(':'));
            keywords.set('port', this.getLocationPort());
            keywords.set('protocol', this.getLocationProtocol());
            result = this.formatString(result, keywords);
        }
        if (result === undefined) {
            return defaultValue;
        }
        return (/** @type {?} */ (result));
    }
    /**
     * Gets the location.protocol value.
     * @return {?} The location.protocol string
     */
    getLocationProtocol() {
        return location.protocol;
    }
    /**
     * Gets the location.hostname property.
     * @return {?} Value of the property
     */
    getLocationHostname() {
        return location.hostname;
    }
    /**
     * Gets the location.port property.
     * @param {?=} prefix Text added before port value
     * @return {?} Port with prefix
     */
    getLocationPort(prefix = '') {
        return location.port ? prefix + location.port : '';
    }
    /**
     * Loads the config file.
     * @return {?} Notification when loading is complete
     */
    load() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const configUrl = `app.config.json?v=${Date.now()}`;
            if (this.status === Status.INIT) {
                this.status = Status.LOADING;
                yield this.http.get(configUrl).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.status = Status.LOADED;
                    this.config = Object.assign({}, this.config, data || {});
                    this.onLoadSubject.next(this.config);
                    resolve(this.config);
                }), (/**
                 * @return {?}
                 */
                () => {
                    resolve(this.config);
                }));
            }
            else if (this.status === Status.LOADED) {
                resolve(this.config);
            }
            else if (this.status === Status.LOADING) {
                this.onLoad.subscribe((/**
                 * @return {?}
                 */
                () => {
                    resolve(this.config);
                }));
            }
        })));
    }
    /**
     * @private
     * @param {?} str
     * @param {?} keywords
     * @return {?}
     */
    formatString(str, keywords) {
        /** @type {?} */
        let result = str;
        keywords.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            const expr = new RegExp('{' + key + '}', 'gm');
            result = result.replace(expr, value);
        }));
        return result;
    }
}
AppConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AppConfigService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ AppConfigService.ngInjectableDef = i0.defineInjectable({ factory: function AppConfigService_Factory() { return new AppConfigService(i0.inject(i1.HttpClient)); }, token: AppConfigService, providedIn: "root" });
if (false) {
    /** @type {?} */
    AppConfigService.prototype.config;
    /** @type {?} */
    AppConfigService.prototype.status;
    /**
     * @type {?}
     * @protected
     */
    AppConfigService.prototype.onLoadSubject;
    /** @type {?} */
    AppConfigService.prototype.onLoad;
    /**
     * @type {?}
     * @private
     */
    AppConfigService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,