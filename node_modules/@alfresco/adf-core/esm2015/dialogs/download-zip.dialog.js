/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { LogService } from '../services/log.service';
import { DownloadZipService } from '../services/download-zip.service';
export class DownloadZipDialogComponent {
    /**
     * @param {?} dialogRef
     * @param {?} data
     * @param {?} logService
     * @param {?} downloadZipService
     */
    constructor(dialogRef, data, logService, downloadZipService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.logService = logService;
        this.downloadZipService = downloadZipService;
        // flag for async threads
        this.cancelled = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {
            if (!this.cancelled) {
                this.downloadZip(this.data.nodeIds);
            }
            else {
                this.logService.log('Cancelled');
            }
        }
    }
    /**
     * @return {?}
     */
    cancelDownload() {
        this.cancelled = true;
        this.downloadZipService.cancelDownload(this.downloadId);
        this.dialogRef.close(false);
    }
    /**
     * @param {?} nodeIds
     * @return {?}
     */
    downloadZip(nodeIds) {
        if (nodeIds && nodeIds.length > 0) {
            this.downloadZipService.createDownload({ nodeIds }).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data && data.entry && data.entry.id) {
                    /** @type {?} */
                    const url = this.downloadZipService.getContentUrl(data.entry.id, true);
                    this.downloadZipService.getNode(data.entry.id).subscribe((/**
                     * @param {?} downloadNode
                     * @return {?}
                     */
                    (downloadNode) => {
                        this.logService.log(downloadNode);
                        /** @type {?} */
                        const fileName = downloadNode.entry.name;
                        this.downloadId = data.entry.id;
                        this.waitAndDownload(data.entry.id, url, fileName);
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    waitAndDownload(downloadId, url, fileName) {
        if (this.cancelled) {
            return;
        }
        this.downloadZipService.getDownload(downloadId).subscribe((/**
         * @param {?} downloadEntry
         * @return {?}
         */
        (downloadEntry) => {
            if (downloadEntry.entry) {
                if (downloadEntry.entry.status === 'DONE') {
                    this.download(url, fileName);
                }
                else {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.waitAndDownload(downloadId, url, fileName);
                    }), 1000);
                }
            }
        }));
    }
    /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    download(url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            const link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        this.dialogRef.close(true);
    }
}
DownloadZipDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-download-zip-dialog',
                template: "<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<div mat-dialog-actions>\n    <span class=\"adf-spacer\"></span>\n    <button mat-button color=\"primary\" id=\"cancel-button\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</div>\n",
                host: { 'class': 'adf-download-zip-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-spacer{flex:1 1 auto}.adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
            }] }
];
/** @nocollapse */
DownloadZipDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: LogService },
    { type: DownloadZipService }
];
if (false) {
    /** @type {?} */
    DownloadZipDialogComponent.prototype.cancelled;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.downloadId;
    /**
     * @type {?}
     * @private
     */
    DownloadZipDialogComponent.prototype.dialogRef;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    DownloadZipDialogComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    DownloadZipDialogComponent.prototype.downloadZipService;
}
//# sourceMappingURL=data:application/json;base64,