/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CardViewBaseItemModel } from './card-view-baseitem.model';
export class CardViewTextItemModel extends CardViewBaseItemModel {
    /**
     * @param {?} cardViewTextItemProperties
     */
    constructor(cardViewTextItemProperties) {
        super(cardViewTextItemProperties);
        this.type = 'text';
        this.multiline = !!cardViewTextItemProperties.multiline;
        this.multivalued = !!cardViewTextItemProperties.multivalued;
        this.pipes = cardViewTextItemProperties.pipes || [];
        this.clickCallBack = cardViewTextItemProperties.clickCallBack ? cardViewTextItemProperties.clickCallBack : null;
    }
    /**
     * @return {?}
     */
    get displayValue() {
        if (this.isEmpty()) {
            return this.default;
        }
        else {
            return this.applyPipes(this.value);
        }
    }
    /**
     * @private
     * @param {?} displayValue
     * @return {?}
     */
    applyPipes(displayValue) {
        if (this.pipes.length) {
            displayValue = this.pipes.reduce((/**
             * @param {?} accumulator
             * @param {?} __1
             * @return {?}
             */
            (accumulator, { pipe, params = [] }) => {
                return pipe.transform(accumulator, ...params);
            }), displayValue);
        }
        return displayValue;
    }
}
if (false) {
    /** @type {?} */
    CardViewTextItemModel.prototype.type;
    /** @type {?} */
    CardViewTextItemModel.prototype.multiline;
    /** @type {?} */
    CardViewTextItemModel.prototype.multivalued;
    /** @type {?} */
    CardViewTextItemModel.prototype.pipes;
    /** @type {?} */
    CardViewTextItemModel.prototype.clickCallBack;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXRleHRpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L21vZGVscy9jYXJkLXZpZXctdGV4dGl0ZW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHbkUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHFCQUFxQjs7OztJQU81RCxZQUFZLDBCQUFzRDtRQUM5RCxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQVB0QyxTQUFJLEdBQVcsTUFBTSxDQUFDO1FBUWxCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxXQUFXLENBQUM7UUFDNUQsSUFBSSxDQUFDLEtBQUssR0FBRywwQkFBMEIsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLEdBQUcsMEJBQTBCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwSCxDQUFDOzs7O0lBRUQsSUFBSSxZQUFZO1FBQ1osSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3ZCO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sVUFBVSxDQUFDLFlBQVk7UUFDM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNuQixZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNOzs7OztZQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFO2dCQUNwRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDbEQsQ0FBQyxHQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKOzs7SUEvQkcscUNBQXNCOztJQUN0QiwwQ0FBb0I7O0lBQ3BCLDRDQUFzQjs7SUFDdEIsc0NBQXVDOztJQUN2Qyw4Q0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDYXJkVmlld0l0ZW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NhcmQtdmlldy1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEeW5hbWljQ29tcG9uZW50TW9kZWwgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9keW5hbWljLWNvbXBvbmVudC1tYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDYXJkVmlld0Jhc2VJdGVtTW9kZWwgfSBmcm9tICcuL2NhcmQtdmlldy1iYXNlaXRlbS5tb2RlbCc7XG5pbXBvcnQgeyBDYXJkVmlld1RleHRJdGVtUGlwZVByb3BlcnR5LCBDYXJkVmlld1RleHRJdGVtUHJvcGVydGllcyB9IGZyb20gJy4uL2ludGVyZmFjZXMvY2FyZC12aWV3LmludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXdUZXh0SXRlbU1vZGVsIGV4dGVuZHMgQ2FyZFZpZXdCYXNlSXRlbU1vZGVsIGltcGxlbWVudHMgQ2FyZFZpZXdJdGVtLCBEeW5hbWljQ29tcG9uZW50TW9kZWwge1xuICAgIHR5cGU6IHN0cmluZyA9ICd0ZXh0JztcbiAgICBtdWx0aWxpbmU/OiBib29sZWFuO1xuICAgIG11bHRpdmFsdWVkPzogYm9vbGVhbjtcbiAgICBwaXBlcz86IENhcmRWaWV3VGV4dEl0ZW1QaXBlUHJvcGVydHlbXTtcbiAgICBjbGlja0NhbGxCYWNrPzogYW55O1xuXG4gICAgY29uc3RydWN0b3IoY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXM6IENhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKGNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzKTtcbiAgICAgICAgdGhpcy5tdWx0aWxpbmUgPSAhIWNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzLm11bHRpbGluZTtcbiAgICAgICAgdGhpcy5tdWx0aXZhbHVlZCA9ICEhY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMubXVsdGl2YWx1ZWQ7XG4gICAgICAgIHRoaXMucGlwZXMgPSBjYXJkVmlld1RleHRJdGVtUHJvcGVydGllcy5waXBlcyB8fCBbXTtcbiAgICAgICAgdGhpcy5jbGlja0NhbGxCYWNrID0gY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMuY2xpY2tDYWxsQmFjayA/IGNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzLmNsaWNrQ2FsbEJhY2sgOiBudWxsO1xuICAgIH1cblxuICAgIGdldCBkaXNwbGF5VmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5UGlwZXModGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5UGlwZXMoZGlzcGxheVZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBpcGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGlzcGxheVZhbHVlID0gdGhpcy5waXBlcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCB7IHBpcGUsIHBhcmFtcyA9IFtdIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlwZS50cmFuc2Zvcm0oYWNjdW11bGF0b3IsIC4uLnBhcmFtcyk7XG4gICAgICAgICAgICB9LCBkaXNwbGF5VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRpc3BsYXlWYWx1ZTtcbiAgICB9XG59XG4iXX0=