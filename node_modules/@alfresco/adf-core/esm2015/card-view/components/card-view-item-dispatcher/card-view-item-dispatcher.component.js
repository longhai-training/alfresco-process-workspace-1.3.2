/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ComponentFactoryResolver, Input, ViewChild } from '@angular/core';
import { CardItemTypeService } from '../../services/card-item-types.service';
import { CardViewContentProxyDirective } from '../../directives/card-view-content-proxy.directive';
export class CardViewItemDispatcherComponent {
    /**
     * @param {?} cardItemTypeService
     * @param {?} resolver
     */
    constructor(cardItemTypeService, resolver) {
        this.cardItemTypeService = cardItemTypeService;
        this.resolver = resolver;
        this.displayEmpty = true;
        this.loaded = false;
        this.componentReference = null;
        /** @type {?} */
        const dynamicLifeCycleMethods = [
            'ngOnInit',
            'ngDoCheck',
            'ngAfterContentInit',
            'ngAfterContentChecked',
            'ngAfterViewInit',
            'ngAfterViewChecked',
            'ngOnDestroy'
        ];
        dynamicLifeCycleMethods.forEach((/**
         * @param {?} method
         * @return {?}
         */
        (method) => {
            this[method] = this.proxy.bind(this, method);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        Object.keys(changes)
            .map((/**
         * @param {?} changeName
         * @return {?}
         */
        (changeName) => [changeName, changes[changeName]]))
            .forEach((/**
         * @param {?} __0
         * @return {?}
         */
        ([inputParamName, simpleChange]) => {
            this.componentReference.instance[inputParamName] = simpleChange.currentValue;
        }));
        this.proxy('ngOnChanges', changes);
    }
    /**
     * @private
     * @return {?}
     */
    loadComponent() {
        /** @type {?} */
        const factoryClass = this.cardItemTypeService.resolveComponentType(this.property);
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(factoryClass);
        this.componentReference = this.content.viewContainerRef.createComponent(factory);
        this.componentReference.instance.editable = this.editable;
        this.componentReference.instance.property = this.property;
        this.componentReference.instance.displayEmpty = this.displayEmpty;
    }
    /**
     * @private
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    proxy(methodName, ...args) {
        if (this.componentReference.instance[methodName]) {
            this.componentReference.instance[methodName].apply(this.componentReference.instance, args);
        }
    }
}
CardViewItemDispatcherComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-card-view-item-dispatcher',
                template: '<ng-template adf-card-view-content-proxy></ng-template>'
            }] }
];
/** @nocollapse */
CardViewItemDispatcherComponent.ctorParameters = () => [
    { type: CardItemTypeService },
    { type: ComponentFactoryResolver }
];
CardViewItemDispatcherComponent.propDecorators = {
    property: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    content: [{ type: ViewChild, args: [CardViewContentProxyDirective,] }]
};
if (false) {
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.property;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.editable;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.displayEmpty;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.loaded;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.componentReference;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngOnInit;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngDoCheck;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.cardItemTypeService;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWl0ZW0tZGlzcGF0Y2hlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJjYXJkLXZpZXcvY29tcG9uZW50cy9jYXJkLXZpZXctaXRlbS1kaXNwYXRjaGVyL2NhcmQtdmlldy1pdGVtLWRpc3BhdGNoZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFDSCxTQUFTLEVBQ1Qsd0JBQXdCLEVBQ3hCLEtBQUssRUFJTCxTQUFTLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFNbkcsTUFBTSxPQUFPLCtCQUErQjs7Ozs7SUFtQnhDLFlBQW9CLG1CQUF3QyxFQUN4QyxRQUFrQztRQURsQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBWnRELGlCQUFZLEdBQVksSUFBSSxDQUFDO1FBS3JCLFdBQU0sR0FBWSxLQUFLLENBQUM7UUFDeEIsdUJBQWtCLEdBQVEsSUFBSSxDQUFDOztjQU83Qix1QkFBdUIsR0FBRztZQUM1QixVQUFVO1lBQ1YsV0FBVztZQUNYLG9CQUFvQjtZQUNwQix1QkFBdUI7WUFDdkIsaUJBQWlCO1lBQ2pCLG9CQUFvQjtZQUNwQixhQUFhO1NBQ2hCO1FBRUQsdUJBQXVCLENBQUMsT0FBTzs7OztRQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDZixHQUFHOzs7O1FBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDO2FBQ3RELE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBeUIsRUFBRSxFQUFFO1lBQ2hFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQztRQUNqRixDQUFDLEVBQUMsQ0FBQztRQUVQLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRU8sYUFBYTs7Y0FDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7O2NBRTNFLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQztRQUNuRSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMxRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzFELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDdEUsQ0FBQzs7Ozs7OztJQUVPLEtBQUssQ0FBQyxVQUFVLEVBQUUsR0FBRyxJQUFJO1FBQzdCLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM5QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzlGO0lBQ0wsQ0FBQzs7O1lBdEVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsK0JBQStCO2dCQUN6QyxRQUFRLEVBQUUseURBQXlEO2FBQ3RFOzs7O1lBTlEsbUJBQW1CO1lBUnhCLHdCQUF3Qjs7O3VCQWdCdkIsS0FBSzt1QkFHTCxLQUFLOzJCQUdMLEtBQUs7c0JBR0wsU0FBUyxTQUFDLDZCQUE2Qjs7OztJQVR4QyxtREFDdUI7O0lBRXZCLG1EQUNrQjs7SUFFbEIsdURBQzZCOzs7OztJQUU3QixrREFDK0M7Ozs7O0lBRS9DLGlEQUFnQzs7Ozs7SUFDaEMsNkRBQXVDOztJQUV2QyxtREFBZ0I7O0lBQ2hCLG9EQUFpQjs7Ozs7SUFFTCw4REFBZ0Q7Ozs7O0lBQ2hELG1EQUEwQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgU2ltcGxlQ2hhbmdlLFxuICAgIFNpbXBsZUNoYW5nZXMsXG4gICAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2FyZEl0ZW1UeXBlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NhcmQtaXRlbS10eXBlcy5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3Q29udGVudFByb3h5RGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9jYXJkLXZpZXctY29udGVudC1wcm94eS5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jYXJkLXZpZXctaXRlbS1kaXNwYXRjaGVyJyxcbiAgICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZSBhZGYtY2FyZC12aWV3LWNvbnRlbnQtcHJveHk+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIENhcmRWaWV3SXRlbURpc3BhdGNoZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIEBJbnB1dCgpXG4gICAgcHJvcGVydHk6IENhcmRWaWV3SXRlbTtcblxuICAgIEBJbnB1dCgpXG4gICAgZWRpdGFibGU6IGJvb2xlYW47XG5cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlFbXB0eTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBAVmlld0NoaWxkKENhcmRWaWV3Q29udGVudFByb3h5RGlyZWN0aXZlKVxuICAgIHByaXZhdGUgY29udGVudDogQ2FyZFZpZXdDb250ZW50UHJveHlEaXJlY3RpdmU7XG5cbiAgICBwcml2YXRlIGxvYWRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgY29tcG9uZW50UmVmZXJlbmNlOiBhbnkgPSBudWxsO1xuXG4gICAgcHVibGljIG5nT25Jbml0O1xuICAgIHB1YmxpYyBuZ0RvQ2hlY2s7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhcmRJdGVtVHlwZVNlcnZpY2U6IENhcmRJdGVtVHlwZVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNMaWZlQ3ljbGVNZXRob2RzID0gW1xuICAgICAgICAgICAgJ25nT25Jbml0JyxcbiAgICAgICAgICAgICduZ0RvQ2hlY2snLFxuICAgICAgICAgICAgJ25nQWZ0ZXJDb250ZW50SW5pdCcsXG4gICAgICAgICAgICAnbmdBZnRlckNvbnRlbnRDaGVja2VkJyxcbiAgICAgICAgICAgICduZ0FmdGVyVmlld0luaXQnLFxuICAgICAgICAgICAgJ25nQWZ0ZXJWaWV3Q2hlY2tlZCcsXG4gICAgICAgICAgICAnbmdPbkRlc3Ryb3knXG4gICAgICAgIF07XG5cbiAgICAgICAgZHluYW1pY0xpZmVDeWNsZU1ldGhvZHMuZm9yRWFjaCgobWV0aG9kKSA9PiB7XG4gICAgICAgICAgICB0aGlzW21ldGhvZF0gPSB0aGlzLnByb3h5LmJpbmQodGhpcywgbWV0aG9kKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRDb21wb25lbnQoKTtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKGNoYW5nZXMpXG4gICAgICAgICAgICAubWFwKChjaGFuZ2VOYW1lKSA9PiBbY2hhbmdlTmFtZSwgY2hhbmdlc1tjaGFuZ2VOYW1lXV0pXG4gICAgICAgICAgICAuZm9yRWFjaCgoW2lucHV0UGFyYW1OYW1lLCBzaW1wbGVDaGFuZ2VdOiBbc3RyaW5nLCBTaW1wbGVDaGFuZ2VdKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2VbaW5wdXRQYXJhbU5hbWVdID0gc2ltcGxlQ2hhbmdlLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucHJveHkoJ25nT25DaGFuZ2VzJywgY2hhbmdlcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkQ29tcG9uZW50KCkge1xuICAgICAgICBjb25zdCBmYWN0b3J5Q2xhc3MgPSB0aGlzLmNhcmRJdGVtVHlwZVNlcnZpY2UucmVzb2x2ZUNvbXBvbmVudFR5cGUodGhpcy5wcm9wZXJ0eSk7XG5cbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoZmFjdG9yeUNsYXNzKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2UgPSB0aGlzLmNvbnRlbnQudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSk7XG5cbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2UuZWRpdGFibGUgPSB0aGlzLmVkaXRhYmxlO1xuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZmVyZW5jZS5pbnN0YW5jZS5wcm9wZXJ0eSA9IHRoaXMucHJvcGVydHk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlLmRpc3BsYXlFbXB0eSA9IHRoaXMuZGlzcGxheUVtcHR5O1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJveHkobWV0aG9kTmFtZSwgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRSZWZlcmVuY2UuaW5zdGFuY2VbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMuY29tcG9uZW50UmVmZXJlbmNlLmluc3RhbmNlLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==