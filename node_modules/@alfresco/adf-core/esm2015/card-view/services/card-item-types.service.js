/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { CardViewDateItemComponent } from '../components/card-view-dateitem/card-view-dateitem.component';
import { CardViewMapItemComponent } from '../components/card-view-mapitem/card-view-mapitem.component';
import { CardViewTextItemComponent } from '../components/card-view-textitem/card-view-textitem.component';
import { CardViewSelectItemComponent } from '../components/card-view-selectitem/card-view-selectitem.component';
import { CardViewBoolItemComponent } from '../components/card-view-boolitem/card-view-boolitem.component';
import { CardViewKeyValuePairsItemComponent } from '../components/card-view-keyvaluepairsitem/card-view-keyvaluepairsitem.component';
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import * as i0 from "@angular/core";
export class CardItemTypeService extends DynamicComponentMapper {
    constructor() {
        super(...arguments);
        this.defaultValue = CardViewTextItemComponent;
        this.types = {
            'text': DynamicComponentResolver.fromType(CardViewTextItemComponent),
            'select': DynamicComponentResolver.fromType(CardViewSelectItemComponent),
            'int': DynamicComponentResolver.fromType(CardViewTextItemComponent),
            'float': DynamicComponentResolver.fromType(CardViewTextItemComponent),
            'date': DynamicComponentResolver.fromType(CardViewDateItemComponent),
            'datetime': DynamicComponentResolver.fromType(CardViewDateItemComponent),
            'bool': DynamicComponentResolver.fromType(CardViewBoolItemComponent),
            'map': DynamicComponentResolver.fromType(CardViewMapItemComponent),
            'keyvaluepairs': DynamicComponentResolver.fromType(CardViewKeyValuePairsItemComponent)
        };
    }
}
CardItemTypeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ CardItemTypeService.ngInjectableDef = i0.defineInjectable({ factory: function CardItemTypeService_Factory() { return new CardItemTypeService(); }, token: CardItemTypeService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    CardItemTypeService.prototype.defaultValue;
    /**
     * @type {?}
     * @protected
     */
    CardItemTypeService.prototype.types;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1pdGVtLXR5cGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJjYXJkLXZpZXcvc2VydmljZXMvY2FyZC1pdGVtLXR5cGVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUN2RyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtRUFBbUUsQ0FBQztBQUNoSCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpRkFBaUYsQ0FBQztBQUNySSxPQUFPLEVBQUUsc0JBQXNCLEVBQW1DLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7O0FBS3BKLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxzQkFBc0I7SUFIL0Q7O1FBS2MsaUJBQVksR0FBYSx5QkFBeUIsQ0FBQztRQUVuRCxVQUFLLEdBQXVEO1lBQ2xFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7WUFDcEUsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQztZQUN4RSxLQUFLLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDO1lBQ25FLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7WUFDckUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQztZQUNwRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDO1lBQ3hFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUM7WUFDcEUsS0FBSyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUNsRSxlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxDQUFDO1NBQ3pGLENBQUM7S0FDTDs7O1lBbEJBLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7SUFHRywyQ0FBNkQ7Ozs7O0lBRTdELG9DQVVFIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdEYXRlSXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2FyZC12aWV3LWRhdGVpdGVtL2NhcmQtdmlldy1kYXRlaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FyZFZpZXdNYXBJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkLXZpZXctbWFwaXRlbS9jYXJkLXZpZXctbWFwaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FyZFZpZXdUZXh0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2FyZC12aWV3LXRleHRpdGVtL2NhcmQtdmlldy10ZXh0aXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FyZFZpZXdTZWxlY3RJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYXJkLXZpZXctc2VsZWN0aXRlbS9jYXJkLXZpZXctc2VsZWN0aXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FyZFZpZXdCb29sSXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2FyZC12aWV3LWJvb2xpdGVtL2NhcmQtdmlldy1ib29saXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ2FyZFZpZXdLZXlWYWx1ZVBhaXJzSXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2FyZC12aWV3LWtleXZhbHVlcGFpcnNpdGVtL2NhcmQtdmlldy1rZXl2YWx1ZXBhaXJzaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1hcHBlciwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENhcmRJdGVtVHlwZVNlcnZpY2UgZXh0ZW5kcyBEeW5hbWljQ29tcG9uZW50TWFwcGVyIHtcblxuICAgIHByb3RlY3RlZCBkZWZhdWx0VmFsdWU6IFR5cGU8e30+ID0gQ2FyZFZpZXdUZXh0SXRlbUNvbXBvbmVudDtcblxuICAgIHByb3RlY3RlZCB0eXBlczogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIH0gPSB7XG4gICAgICAgICd0ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENhcmRWaWV3VGV4dEl0ZW1Db21wb25lbnQpLFxuICAgICAgICAnc2VsZWN0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENhcmRWaWV3U2VsZWN0SXRlbUNvbXBvbmVudCksXG4gICAgICAgICdpbnQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdUZXh0SXRlbUNvbXBvbmVudCksXG4gICAgICAgICdmbG9hdCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld1RleHRJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2RhdGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdEYXRlSXRlbUNvbXBvbmVudCksXG4gICAgICAgICdkYXRldGltZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDYXJkVmlld0RhdGVJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2Jvb2wnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdCb29sSXRlbUNvbXBvbmVudCksXG4gICAgICAgICdtYXAnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdNYXBJdGVtQ29tcG9uZW50KSxcbiAgICAgICAgJ2tleXZhbHVlcGFpcnMnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ2FyZFZpZXdLZXlWYWx1ZVBhaXJzSXRlbUNvbXBvbmVudClcbiAgICB9O1xufVxuIl19