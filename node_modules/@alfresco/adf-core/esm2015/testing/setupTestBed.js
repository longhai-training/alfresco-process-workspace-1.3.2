/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TestBed } from '@angular/core/testing';
/**
 * @record
 */
function DoneFn() { }
if (false) {
    /** @type {?} */
    DoneFn.prototype.fail;
    /* Skipping unhandled member: (): void;*/
}
/** @type {?} */
const resetTestingModule = TestBed.resetTestingModule;
/** @type {?} */
const preventAngularFromResetting = (/**
 * @return {?}
 */
() => (TestBed.resetTestingModule = (/**
 * @return {?}
 */
() => TestBed)));
const ɵ0 = preventAngularFromResetting;
/** @type {?} */
const allowAngularToReset = (/**
 * @return {?}
 */
() => (TestBed.resetTestingModule = resetTestingModule));
const ɵ1 = allowAngularToReset;
/** @type {?} */
export const setupTestBed = (/**
 * @param {?} moduleDef
 * @return {?}
 */
(moduleDef) => {
    beforeAll((/**
     * @param {?} done
     * @return {?}
     */
    (done) => ((/**
     * @return {?}
     */
    () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        localStorage.clear();
        sessionStorage.clear();
        resetTestingModule();
        preventAngularFromResetting();
        TestBed.configureTestingModule(moduleDef);
        yield TestBed.compileComponents();
        // prevent Angular from resetting testing module
        TestBed.resetTestingModule = (/**
         * @return {?}
         */
        () => TestBed);
    })))()
        .then(done)
        .catch(done.fail)));
    afterAll((/**
     * @return {?}
     */
    () => allowAngularToReset()));
});
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBUZXN0QmVkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsidGVzdGluZy9zZXR1cFRlc3RCZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxPQUFPLEVBQXNCLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFFcEUscUJBR0M7OztJQURHLHNCQUF5Qzs7OztNQU12QyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsa0JBQWtCOztNQUMvQywyQkFBMkI7OztBQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQjs7O0FBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBLENBQUMsQ0FBQTs7O01BQ2hGLG1CQUFtQjs7O0FBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQTs7O0FBRW5GLE1BQU0sT0FBTyxZQUFZOzs7O0FBQUcsQ0FBQyxTQUE2QixFQUFFLEVBQUU7SUFDMUQsU0FBUzs7OztJQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDZjs7O0lBQUMsR0FBUyxFQUFFO1FBQ1IsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixrQkFBa0IsRUFBRSxDQUFDO1FBQ3JCLDJCQUEyQixFQUFFLENBQUM7UUFDOUIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFbEMsZ0RBQWdEO1FBQ2hELE9BQU8sQ0FBQyxrQkFBa0I7OztRQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQSxDQUFDO0lBQy9DLENBQUMsQ0FBQSxFQUFDLEVBQUU7U0FDQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ1YsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDeEIsQ0FBQztJQUVGLFFBQVE7OztJQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEVBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBUZXN0QmVkLCBUZXN0TW9kdWxlTWV0YWRhdGEgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbnRlcmZhY2UgRG9uZUZuIGV4dGVuZHMgRnVuY3Rpb24ge1xuICAgICgpOiB2b2lkO1xuICAgIGZhaWw6IChtZXNzYWdlPzogRXJyb3IgfCBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmRlY2xhcmUgZnVuY3Rpb24gYmVmb3JlQWxsKGFjdGlvbjogKGRvbmU6IERvbmVGbikgPT4gdm9pZCwgdGltZW91dD86IG51bWJlcik6IHZvaWQ7XG5kZWNsYXJlIGZ1bmN0aW9uIGFmdGVyQWxsKGFjdGlvbjogKGRvbmU6IERvbmVGbikgPT4gdm9pZCwgdGltZW91dD86IG51bWJlcik6IHZvaWQ7XG5cbmNvbnN0IHJlc2V0VGVzdGluZ01vZHVsZSA9IFRlc3RCZWQucmVzZXRUZXN0aW5nTW9kdWxlO1xuY29uc3QgcHJldmVudEFuZ3VsYXJGcm9tUmVzZXR0aW5nID0gKCkgPT4gKFRlc3RCZWQucmVzZXRUZXN0aW5nTW9kdWxlID0gKCkgPT4gVGVzdEJlZCk7XG5jb25zdCBhbGxvd0FuZ3VsYXJUb1Jlc2V0ID0gKCkgPT4gKFRlc3RCZWQucmVzZXRUZXN0aW5nTW9kdWxlID0gcmVzZXRUZXN0aW5nTW9kdWxlKTtcblxuZXhwb3J0IGNvbnN0IHNldHVwVGVzdEJlZCA9IChtb2R1bGVEZWY6IFRlc3RNb2R1bGVNZXRhZGF0YSkgPT4ge1xuICAgIGJlZm9yZUFsbCgoZG9uZSkgPT5cbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgICAgICAgIHJlc2V0VGVzdGluZ01vZHVsZSgpO1xuICAgICAgICAgICAgcHJldmVudEFuZ3VsYXJGcm9tUmVzZXR0aW5nKCk7XG4gICAgICAgICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlRGVmKTtcbiAgICAgICAgICAgIGF3YWl0IFRlc3RCZWQuY29tcGlsZUNvbXBvbmVudHMoKTtcblxuICAgICAgICAgICAgLy8gcHJldmVudCBBbmd1bGFyIGZyb20gcmVzZXR0aW5nIHRlc3RpbmcgbW9kdWxlXG4gICAgICAgICAgICBUZXN0QmVkLnJlc2V0VGVzdGluZ01vZHVsZSA9ICgpID0+IFRlc3RCZWQ7XG4gICAgICAgIH0pKClcbiAgICAgICAgICAgIC50aGVuKGRvbmUpXG4gICAgICAgICAgICAuY2F0Y2goZG9uZS5mYWlsKVxuICAgICk7XG5cbiAgICBhZnRlckFsbCgoKSA9PiBhbGxvd0FuZ3VsYXJUb1Jlc2V0KCkpO1xufTtcbiJdfQ==