/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener } from '@angular/core';
import { MatDialog } from '@angular/material';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { DownloadZipDialogComponent } from '../dialogs/download-zip.dialog';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class NodeDownloadDirective {
    /**
     * @param {?} apiService
     * @param {?} dialog
     */
    constructor(apiService, dialog) {
        this.apiService = apiService;
        this.dialog = dialog;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.downloadNodes(this.nodes);
    }
    /**
     * Downloads multiple selected nodes.
     * Packs result into a .ZIP archive if there is more than one node selected.
     * @param {?} selection Multiple selected nodes to download
     * @return {?}
     */
    downloadNodes(selection) {
        if (!this.isSelectionValid(selection)) {
            return;
        }
        if (selection instanceof Array) {
            if (selection.length === 1) {
                this.downloadNode(selection[0]);
            }
            else {
                this.downloadZip(selection);
            }
        }
        else {
            this.downloadNode(selection);
        }
    }
    /**
     * Downloads a single node.
     * Packs result into a .ZIP archive is the node is a Folder.
     * @param {?} node Node to download
     * @return {?}
     */
    downloadNode(node) {
        if (node && node.entry) {
            /** @type {?} */
            const entry = node.entry;
            if (entry.isFile) {
                this.downloadFile(node);
            }
            if (entry.isFolder) {
                this.downloadZip([node]);
            }
            // Check if there's nodeId for Shared Files
            if (!entry.isFile && !entry.isFolder && ((/** @type {?} */ (entry))).nodeId) {
                this.downloadFile(node);
            }
        }
    }
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    isSelectionValid(selection) {
        return selection || (selection instanceof Array && selection.length > 0);
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    downloadFile(node) {
        if (node && node.entry) {
            /** @type {?} */
            const contentApi = this.apiService.getInstance().content;
            // nodeId for Shared node
            /** @type {?} */
            const id = ((/** @type {?} */ (node.entry))).nodeId || node.entry.id;
            /** @type {?} */
            const url = contentApi.getContentUrl(id, true);
            /** @type {?} */
            const fileName = node.entry.name;
            this.download(url, fileName);
        }
    }
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    downloadZip(selection) {
        if (selection && selection.length > 0) {
            // nodeId for Shared node
            /** @type {?} */
            const nodeIds = selection.map((/**
             * @param {?} node
             * @return {?}
             */
            (node) => (node.entry.nodeId || node.entry.id)));
            this.dialog.open(DownloadZipDialogComponent, {
                width: '600px',
                disableClose: true,
                data: {
                    nodeIds
                }
            });
        }
    }
    /**
     * @private
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    download(url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            const link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
}
NodeDownloadDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-node-download], [adfNodeDownload]'
            },] }
];
/** @nocollapse */
NodeDownloadDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: MatDialog }
];
NodeDownloadDirective.propDecorators = {
    nodes: [{ type: Input, args: ['adfNodeDownload',] }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /**
     * Nodes to download.
     * @type {?}
     */
    NodeDownloadDirective.prototype.nodes;
    /**
     * @type {?}
     * @private
     */
    NodeDownloadDirective.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    NodeDownloadDirective.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,