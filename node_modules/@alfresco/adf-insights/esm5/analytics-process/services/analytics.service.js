/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, throwError } from 'rxjs';
import { ParameterValueModel } from '../../diagram/models/report/parameterValue.model';
import { ReportParametersModel } from '../../diagram/models/report/reportParameters.model';
import { BarChart } from '../../diagram/models/chart/barChart.model';
import { DetailsTableChart } from '../../diagram/models/chart/detailsTableChart.model';
import { HeatMapChart } from '../../diagram/models/chart/heatMapChart.model';
import { MultiBarChart } from '../../diagram/models/chart/multiBarChart.model';
import { PieChart } from '../../diagram/models/chart/pieChart.model';
import { TableChart } from '../../diagram/models/chart/tableChart.model';
import { map, catchError } from 'rxjs/operators';
var AnalyticsService = /** @class */ (function () {
    function AnalyticsService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Retrieve all the Deployed app
     */
    /**
     * Retrieve all the Deployed app
     * @param {?} appId
     * @return {?}
     */
    AnalyticsService.prototype.getReportList = /**
     * Retrieve all the Deployed app
     * @param {?} appId
     * @return {?}
     */
    function (appId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.getReportList())
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var reports = [];
            res.forEach((/**
             * @param {?} report
             * @return {?}
             */
            function (report) {
                /** @type {?} */
                var reportModel = new ReportParametersModel(report);
                if (_this.isReportValid(appId, report)) {
                    reports.push(reportModel);
                }
            }));
            return reports;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Retrieve Report by name
     * @param reportName - string - The name of report
     */
    /**
     * Retrieve Report by name
     * @param {?} reportName - string - The name of report
     * @return {?}
     */
    AnalyticsService.prototype.getReportByName = /**
     * Retrieve Report by name
     * @param {?} reportName - string - The name of report
     * @return {?}
     */
    function (reportName) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.getReportList())
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response.find((/**
             * @param {?} report
             * @return {?}
             */
            function (report) { return report.name === reportName; }));
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @private
     * @param {?} appId
     * @param {?} report
     * @return {?}
     */
    AnalyticsService.prototype.isReportValid = /**
     * @private
     * @param {?} appId
     * @param {?} report
     * @return {?}
     */
    function (appId, report) {
        /** @type {?} */
        var isValid = true;
        if (appId && appId !== 0 && report.name.includes('Process definition overview')) {
            isValid = false;
        }
        return isValid;
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    AnalyticsService.prototype.getReportParams = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.getReportParams(reportId))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return new ReportParametersModel(res);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} type
     * @param {?} appId
     * @param {?=} reportId
     * @param {?=} processDefinitionId
     * @return {?}
     */
    AnalyticsService.prototype.getParamValuesByType = /**
     * @param {?} type
     * @param {?} appId
     * @param {?=} reportId
     * @param {?=} processDefinitionId
     * @return {?}
     */
    function (type, appId, reportId, processDefinitionId) {
        if (type === 'status') {
            return this.getProcessStatusValues();
        }
        else if (type === 'processDefinition') {
            if (appId === null || appId === undefined) {
                return this.getProcessDefinitionsValuesNoApp();
            }
            else {
                return this.getProcessDefinitionsValues(appId);
            }
        }
        else if (type === 'dateInterval') {
            return this.getDateIntervalValues();
        }
        else if (type === 'task' && reportId && processDefinitionId) {
            return this.getTasksByProcessDefinitionId(reportId, processDefinitionId);
        }
        else {
            return new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                observer.next(null);
                observer.complete();
            }));
        }
    };
    /**
     * @return {?}
     */
    AnalyticsService.prototype.getProcessStatusValues = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var paramOptions = [];
        paramOptions.push(new ParameterValueModel({ id: 'All', name: 'All' }));
        paramOptions.push(new ParameterValueModel({ id: 'Active', name: 'Active' }));
        paramOptions.push(new ParameterValueModel({ id: 'Complete', name: 'Complete' }));
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            observer.next(paramOptions);
            observer.complete();
        }));
    };
    /**
     * @return {?}
     */
    AnalyticsService.prototype.getDateIntervalValues = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var paramOptions = [];
        paramOptions.push(new ParameterValueModel({ id: 'byHour', name: 'By hour' }));
        paramOptions.push(new ParameterValueModel({ id: 'byDay', name: 'By day' }));
        paramOptions.push(new ParameterValueModel({ id: 'byWeek', name: 'By week' }));
        paramOptions.push(new ParameterValueModel({ id: 'byMonth', name: 'By month' }));
        paramOptions.push(new ParameterValueModel({ id: 'byYear', name: 'By year' }));
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            observer.next(paramOptions);
            observer.complete();
        }));
    };
    /**
     * @return {?}
     */
    AnalyticsService.prototype.getMetricValues = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var paramOptions = [];
        paramOptions.push(new ParameterValueModel({ id: 'totalCount', name: 'Number of times a step is executed' }));
        paramOptions.push(new ParameterValueModel({ id: 'totalTime', name: 'Total time spent in a process step' }));
        paramOptions.push(new ParameterValueModel({ id: 'avgTime', name: 'Average time spent in a process step' }));
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            observer.next(paramOptions);
            observer.complete();
        }));
    };
    /**
     * @return {?}
     */
    AnalyticsService.prototype.getProcessDefinitionsValuesNoApp = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.getProcessDefinitions())
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var paramOptions = [];
            res.forEach((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) {
                paramOptions.push(new ParameterValueModel(opt));
            }));
            return paramOptions;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} appId
     * @return {?}
     */
    AnalyticsService.prototype.getProcessDefinitionsValues = /**
     * @param {?} appId
     * @return {?}
     */
    function (appId) {
        var _this = this;
        /** @type {?} */
        var options = { 'appDefinitionId': appId };
        return from(this.apiService.getInstance().activiti.processDefinitionsApi.getProcessDefinitions(options))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var paramOptions = [];
            res.data.forEach((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) {
                paramOptions.push(new ParameterValueModel(opt));
            }));
            return paramOptions;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} reportId
     * @param {?} processDefinitionId
     * @return {?}
     */
    AnalyticsService.prototype.getTasksByProcessDefinitionId = /**
     * @param {?} reportId
     * @param {?} processDefinitionId
     * @return {?}
     */
    function (reportId, processDefinitionId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.getTasksByProcessDefinitionId(reportId, processDefinitionId))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var paramOptions = [];
            res.forEach((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) {
                paramOptions.push(new ParameterValueModel({ id: opt, name: opt }));
            }));
            return paramOptions;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    AnalyticsService.prototype.getReportsByParams = /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    function (reportId, paramsQuery) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.getReportsByParams(reportId, paramsQuery))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var elements = [];
            res.elements.forEach((/**
             * @param {?} chartData
             * @return {?}
             */
            function (chartData) {
                if (chartData.type === 'pieChart') {
                    elements.push(new PieChart(chartData));
                }
                else if (chartData.type === 'table') {
                    elements.push(new TableChart(chartData));
                }
                else if (chartData.type === 'processDefinitionHeatMap') {
                    elements.push(new HeatMapChart(chartData));
                }
                else if (chartData.type === 'masterDetailTable') {
                    elements.push(new DetailsTableChart(chartData));
                }
                else if (chartData.type === 'barChart') {
                    elements.push(new BarChart(chartData));
                }
                else if (chartData.type === 'multiBarChart') {
                    elements.push(new MultiBarChart(chartData));
                }
            }));
            return elements;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @return {?}
     */
    AnalyticsService.prototype.createDefaultReports = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.createDefaultReports())
            .pipe(map(this.toJson), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} reportId
     * @param {?} name
     * @return {?}
     */
    AnalyticsService.prototype.updateReport = /**
     * @param {?} reportId
     * @param {?} name
     * @return {?}
     */
    function (reportId, name) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.updateReport(reportId, name))
            .pipe(map((/**
         * @return {?}
         */
        function () { return _this.logService.info('upload'); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    AnalyticsService.prototype.exportReportToCsv = /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    function (reportId, paramsQuery) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.exportToCsv(reportId, paramsQuery))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.logService.info('export');
            return res;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    AnalyticsService.prototype.saveReport = /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    function (reportId, paramsQuery) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.saveReport(reportId, paramsQuery))
            .pipe(map((/**
         * @return {?}
         */
        function () {
            _this.logService.info('save');
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    AnalyticsService.prototype.deleteReport = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.reportApi.deleteReport(reportId))
            .pipe(map((/**
         * @return {?}
         */
        function () {
            _this.logService.info('delete');
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    AnalyticsService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    /**
     * @param {?} res
     * @return {?}
     */
    AnalyticsService.prototype.toJson = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        return res || {};
    };
    AnalyticsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AnalyticsService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    return AnalyticsService;
}());
export { AnalyticsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnalyticsService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    AnalyticsService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,