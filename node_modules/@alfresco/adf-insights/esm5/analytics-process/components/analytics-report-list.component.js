/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Observable } from 'rxjs';
import { AnalyticsService } from '../services/analytics.service';
import { share } from 'rxjs/operators';
var AnalyticsReportListComponent = /** @class */ (function () {
    function AnalyticsReportListComponent(analyticsService) {
        var _this = this;
        this.analyticsService = analyticsService;
        this.layoutType = AnalyticsReportListComponent.LAYOUT_LIST;
        this.selectFirst = false;
        this.reportClick = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.reports = [];
        this.report$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return _this.reportObserver = observer; }))
            .pipe(share());
    }
    /**
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initObserver();
        this.getReportList(this.appId);
    };
    /**
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.initObserver = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.report$.subscribe((/**
         * @param {?} report
         * @return {?}
         */
        function (report) {
            _this.reports.push(report);
        }));
    };
    /**
     * Reload the component
     */
    /**
     * Reload the component
     * @param {?=} reportId
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.reload = /**
     * Reload the component
     * @param {?=} reportId
     * @return {?}
     */
    function (reportId) {
        this.reset();
        this.getReportList(this.appId, reportId);
    };
    /**
     * Get the report list
     */
    /**
     * Get the report list
     * @param {?} appId
     * @param {?=} reportId
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.getReportList = /**
     * Get the report list
     * @param {?} appId
     * @param {?=} reportId
     * @return {?}
     */
    function (appId, reportId) {
        var _this = this;
        this.analyticsService.getReportList(appId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res && res.length === 0) {
                _this.createDefaultReports();
            }
            else {
                res.forEach((/**
                 * @param {?} report
                 * @return {?}
                 */
                function (report) {
                    _this.reportObserver.next(report);
                }));
                if (reportId) {
                    _this.selectReportByReportId(reportId);
                }
                if (_this.selectFirst) {
                    _this.selectFirstReport();
                }
                _this.success.emit(res);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * Create the default reports and return the report list
     */
    /**
     * Create the default reports and return the report list
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.createDefaultReports = /**
     * Create the default reports and return the report list
     * @return {?}
     */
    function () {
        var _this = this;
        this.analyticsService.createDefaultReports().subscribe((/**
         * @return {?}
         */
        function () {
            _this.analyticsService.getReportList(_this.appId).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                response.forEach((/**
                 * @param {?} report
                 * @return {?}
                 */
                function (report) {
                    _this.reportObserver.next(report);
                }));
                _this.success.emit(response);
            }));
        }));
    };
    /**
     * Check if the report list is empty
     */
    /**
     * Check if the report list is empty
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.isReportsEmpty = /**
     * Check if the report list is empty
     * @return {?}
     */
    function () {
        return this.reports === undefined || (this.reports && this.reports.length === 0);
    };
    /**
     * Reset the list
     */
    /**
     * Reset the list
     * @private
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.reset = /**
     * Reset the list
     * @private
     * @return {?}
     */
    function () {
        if (!this.isReportsEmpty()) {
            this.reports = [];
        }
    };
    /**
     * Select the current report
     * @param report
     */
    /**
     * Select the current report
     * @param {?} report
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.selectReport = /**
     * Select the current report
     * @param {?} report
     * @return {?}
     */
    function (report) {
        this.currentReport = report;
        this.reportClick.emit(report);
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.selectReportByReportId = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        /** @type {?} */
        var reportFound = this.reports.find((/**
         * @param {?} report
         * @return {?}
         */
        function (report) { return report.id === reportId; }));
        if (reportFound) {
            this.currentReport = reportFound;
            this.reportClick.emit(reportFound);
        }
    };
    /**
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.selectFirstReport = /**
     * @return {?}
     */
    function () {
        this.selectReport(this.reports[0]);
        this.selectFirst = false;
    };
    /**
     * @param {?} report
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.isSelected = /**
     * @param {?} report
     * @return {?}
     */
    function (report) {
        return this.currentReport === report ? true : false;
    };
    /**
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.isList = /**
     * @return {?}
     */
    function () {
        return this.layoutType === AnalyticsReportListComponent.LAYOUT_LIST;
    };
    /**
     * @return {?}
     */
    AnalyticsReportListComponent.prototype.isGrid = /**
     * @return {?}
     */
    function () {
        return this.layoutType === AnalyticsReportListComponent.LAYOUT_GRID;
    };
    AnalyticsReportListComponent.LAYOUT_LIST = 'LIST';
    AnalyticsReportListComponent.LAYOUT_GRID = 'GRID';
    AnalyticsReportListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-analytics-report-list',
                    template: "<div class=\"adf-analytics-report-list menu-container\">\n    <mat-nav-list *ngIf=\"isList()\">\n        <mat-list-item\n            class=\"adf-activiti-filters__entry\"\n            (click)=\"selectReport(report)\"\n            *ngFor=\"let report of reports; let idx = index\"\n            [class.adf-active]=\"currentReport === report\">\n            <span [attr.id]=\"'report-list-' + idx\" class=\"adf-activiti-filters__label\">\n                <mat-icon mat-list-icon\n                    [attr.data-automation-id]=\"report.name + '_filter'\"\n                    class=\"adf-activiti-filters__entry-icon\">assignment</mat-icon>\n                <span class=\"adf-text\">{{report.name}}</span>\n            </span>\n        </mat-list-item>\n    </mat-nav-list>\n    <div class=\"adf-report-card-grids\" *ngIf=\"isGrid()\">\n        <mat-card (click)=\"selectReport(report)\" class=\"adf-report-card\" *ngFor=\"let report of reports;\">\n            <div class=\"adf-report-card-logo logo\">\n                <mat-icon class=\"adf-report-card-logo-icon\">equalizer</mat-icon>\n            </div>\n            <div mat-card-title class=\"adf-report-card-title\">\n                <h1 class=\"adf-application-title\">{{report.name}}</h1>\n            </div>\n            <div mat-card-content class=\"adf-report-card-content\">\n                <p>{{report.description}}</p>\n            </div>\n            <div mat-card-actions class=\"adf-report-card-actions\">\n                <mat-icon class=\"adf-report-card-actions-icon\" *ngIf=\"isSelected(report)\">done</mat-icon>\n            </div>\n        </mat-card>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AnalyticsReportListComponent.ctorParameters = function () { return [
        { type: AnalyticsService }
    ]; };
    AnalyticsReportListComponent.propDecorators = {
        layoutType: [{ type: Input }],
        appId: [{ type: Input }],
        selectFirst: [{ type: Input }],
        reportClick: [{ type: Output }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return AnalyticsReportListComponent;
}());
export { AnalyticsReportListComponent };
if (false) {
    /** @type {?} */
    AnalyticsReportListComponent.LAYOUT_LIST;
    /** @type {?} */
    AnalyticsReportListComponent.LAYOUT_GRID;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.layoutType;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.appId;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.selectFirst;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.reportClick;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.success;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.error;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportListComponent.prototype.reportObserver;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.report$;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.currentReport;
    /** @type {?} */
    AnalyticsReportListComponent.prototype.reports;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportListComponent.prototype.analyticsService;
}
//# sourceMappingURL=data:application/json;base64,