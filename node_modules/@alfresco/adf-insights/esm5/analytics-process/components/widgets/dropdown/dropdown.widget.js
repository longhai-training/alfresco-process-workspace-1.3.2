/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector no-access-missing-member no-input-rename  */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { WidgetComponent } from './../widget.component';
var DropdownWidgetAnalyticsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownWidgetAnalyticsComponent, _super);
    function DropdownWidgetAnalyticsComponent() {
        var _this = _super.call(this) || this;
        _this.fieldChanged = new EventEmitter();
        _this.showDefaultOption = true;
        _this.required = false;
        _this.defaultOptionText = 'Choose One';
        return _this;
    }
    /**
     * @return {?}
     */
    DropdownWidgetAnalyticsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.required) {
            this.formGroup.get(this.controllerName).setValidators(Validators.compose(this.buildValidatorList()));
        }
    };
    /**
     * @param {?} controller
     * @return {?}
     */
    DropdownWidgetAnalyticsComponent.prototype.validateDropDown = /**
     * @param {?} controller
     * @return {?}
     */
    function (controller) {
        return controller.value !== 'null' ? null : { controllerName: false };
    };
    /**
     * @return {?}
     */
    DropdownWidgetAnalyticsComponent.prototype.buildValidatorList = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var validatorList = [];
        validatorList.push(Validators.required);
        if (this.showDefaultOption) {
            validatorList.push(this.validateDropDown);
        }
        return validatorList;
    };
    DropdownWidgetAnalyticsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'analytics-dropdown-widget',
                    template: "<div class=\"adf-dropdown-widget\" [formGroup]=\"formGroup\">\n    <label class=\"adf-dropdown-widget__label\" [attr.for]=\"field.id\">{{field.nameKey | translate}}</label>\n    <select [formControlName]=\"controllerName\"\n            [attr.id]=\"'select-' + field.id\"\n            class=\"adf-dropdown-widget__select\"\n            [(ngModel)]=\"field.value\"\n            (ngModelChange)=\"changeValue($event)\">\n        <option *ngIf=\"showDefaultOption\" value=\"null\">{{defaultOptionText}}</option>\n        <option *ngFor=\"let opt of field.options\" [value]=\"opt.id\">{{opt.label}}</option>\n    </select>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-dropdown-widget,.adf-dropdown-widget__select{width:100%}.adf-dropdown-widget__invalid .adf-dropdown-widget__select{border-color:#d50000}.adf-dropdown-widget__invalid .adf-dropdown-widget__label{color:#d50000}.adf-dropdown-widget__invalid .adf-dropdown-widget__label::after{background-color:#d50000}"]
                }] }
    ];
    /** @nocollapse */
    DropdownWidgetAnalyticsComponent.ctorParameters = function () { return []; };
    DropdownWidgetAnalyticsComponent.propDecorators = {
        field: [{ type: Input }],
        formGroup: [{ type: Input, args: ['group',] }],
        controllerName: [{ type: Input, args: ['controllerName',] }],
        fieldChanged: [{ type: Output }],
        showDefaultOption: [{ type: Input }],
        required: [{ type: Input }],
        defaultOptionText: [{ type: Input }]
    };
    return DropdownWidgetAnalyticsComponent;
}(WidgetComponent));
export { DropdownWidgetAnalyticsComponent };
if (false) {
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.field;
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.formGroup;
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.controllerName;
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.fieldChanged;
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.showDefaultOption;
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.required;
    /** @type {?} */
    DropdownWidgetAnalyticsComponent.prototype.defaultOptionText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24ud2lkZ2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImFuYWx5dGljcy1wcm9jZXNzL2NvbXBvbmVudHMvd2lkZ2V0cy9kcm9wZG93bi9kcm9wZG93bi53aWRnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBZSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhEO0lBTXNELDREQUFlO0lBdUJqRTtRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQWJELGtCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFHMUQsdUJBQWlCLEdBQVksSUFBSSxDQUFDO1FBR2xDLGNBQVEsR0FBWSxLQUFLLENBQUM7UUFHMUIsdUJBQWlCLEdBQVcsWUFBWSxDQUFDOztJQUl6QyxDQUFDOzs7O0lBRUQsbURBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUN4RztJQUNMLENBQUM7Ozs7O0lBRUQsMkRBQWdCOzs7O0lBQWhCLFVBQWlCLFVBQXVCO1FBQ3BDLE9BQU8sVUFBVSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDMUUsQ0FBQzs7OztJQUVELDZEQUFrQjs7O0lBQWxCOztZQUNVLGFBQWEsR0FBRyxFQUFFO1FBQ3hCLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDN0M7UUFDRCxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDOztnQkFsREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLCtuQkFBcUM7b0JBRXJDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7O3dCQUdJLEtBQUs7NEJBR0wsS0FBSyxTQUFDLE9BQU87aUNBR2IsS0FBSyxTQUFDLGdCQUFnQjsrQkFHdEIsTUFBTTtvQ0FHTixLQUFLOzJCQUdMLEtBQUs7b0NBR0wsS0FBSzs7SUF5QlYsdUNBQUM7Q0FBQSxBQW5ERCxDQU1zRCxlQUFlLEdBNkNwRTtTQTdDWSxnQ0FBZ0M7OztJQUV6QyxpREFDVzs7SUFFWCxxREFDNEI7O0lBRTVCLDBEQUM4Qjs7SUFFOUIsd0RBQzBEOztJQUUxRCw2REFDa0M7O0lBRWxDLG9EQUMwQjs7SUFFMUIsNkRBQ3lDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciBuby1hY2Nlc3MtbWlzc2luZy1tZW1iZXIgbm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vLi4vd2lkZ2V0LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYW5hbHl0aWNzLWRyb3Bkb3duLXdpZGdldCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Ryb3Bkb3duLndpZGdldC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9kcm9wZG93bi53aWRnZXQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25XaWRnZXRBbmFseXRpY3NDb21wb25lbnQgZXh0ZW5kcyBXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQElucHV0KClcbiAgICBmaWVsZDogYW55O1xuXG4gICAgQElucHV0KCdncm91cCcpXG4gICAgcHVibGljIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG4gICAgQElucHV0KCdjb250cm9sbGVyTmFtZScpXG4gICAgcHVibGljIGNvbnRyb2xsZXJOYW1lOiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBmaWVsZENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHNob3dEZWZhdWx0T3B0aW9uOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgcmVxdWlyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgZGVmYXVsdE9wdGlvblRleHQ6IHN0cmluZyA9ICdDaG9vc2UgT25lJztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtR3JvdXAuZ2V0KHRoaXMuY29udHJvbGxlck5hbWUpLnNldFZhbGlkYXRvcnMoVmFsaWRhdG9ycy5jb21wb3NlKHRoaXMuYnVpbGRWYWxpZGF0b3JMaXN0KCkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlRHJvcERvd24oY29udHJvbGxlcjogRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXIudmFsdWUgIT09ICdudWxsJyA/IG51bGwgOiB7IGNvbnRyb2xsZXJOYW1lOiBmYWxzZSB9O1xuICAgIH1cblxuICAgIGJ1aWxkVmFsaWRhdG9yTGlzdCgpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yTGlzdCA9IFtdO1xuICAgICAgICB2YWxpZGF0b3JMaXN0LnB1c2goVmFsaWRhdG9ycy5yZXF1aXJlZCk7XG4gICAgICAgIGlmICh0aGlzLnNob3dEZWZhdWx0T3B0aW9uKSB7XG4gICAgICAgICAgICB2YWxpZGF0b3JMaXN0LnB1c2godGhpcy52YWxpZGF0ZURyb3BEb3duKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWRhdG9yTGlzdDtcbiAgICB9XG59XG4iXX0=