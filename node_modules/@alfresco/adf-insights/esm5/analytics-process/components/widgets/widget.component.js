/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, Input, Output } from '@angular/core';
var WidgetComponent = /** @class */ (function () {
    function WidgetComponent() {
        this.fieldChanged = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    WidgetComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var field = changes['field'];
        if (field && field.currentValue) {
            this.fieldChanged.emit(field.currentValue.value);
            return;
        }
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.hasField = /**
     * @return {?}
     */
    function () {
        return this.field ? true : false;
    };
    /**
     * @return {?}
     */
    WidgetComponent.prototype.hasValue = /**
     * @return {?}
     */
    function () {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    WidgetComponent.prototype.changeValue = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.fieldChanged.emit(field);
    };
    WidgetComponent.propDecorators = {
        field: [{ type: Input }],
        fieldChanged: [{ type: Output }]
    };
    return WidgetComponent;
}());
export { WidgetComponent };
if (false) {
    /** @type {?} */
    WidgetComponent.prototype.field;
    /** @type {?} */
    WidgetComponent.prototype.fieldChanged;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJhbmFseXRpY3MtcHJvY2Vzcy9jb21wb25lbnRzL3dpZGdldHMvd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXRGO0lBQUE7UUFNSSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBd0I5RCxDQUFDOzs7OztJQXRCRyxxQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7O1lBQ3hCLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzlCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqRCxPQUFPO1NBQ1Y7SUFDTCxDQUFDOzs7O0lBRUQsa0NBQVE7OztJQUFSO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNyQyxDQUFDOzs7O0lBRUQsa0NBQVE7OztJQUFSO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSztZQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLElBQUk7WUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQscUNBQVc7Ozs7SUFBWCxVQUFZLEtBQVU7UUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7d0JBMUJBLEtBQUs7K0JBR0wsTUFBTTs7SUF5Qlgsc0JBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSxlQUFlOzs7SUFFeEIsZ0NBQ1c7O0lBRVgsdUNBQzBEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNsYXNzIFdpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpZWxkOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBmaWVsZENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gY2hhbmdlc1snZmllbGQnXTtcbiAgICAgICAgaWYgKGZpZWxkICYmIGZpZWxkLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5maWVsZENoYW5nZWQuZW1pdChmaWVsZC5jdXJyZW50VmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFzRmllbGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGhhc1ZhbHVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZCAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNoYW5nZVZhbHVlKGZpZWxkOiBhbnkpIHtcbiAgICAgICAgdGhpcy5maWVsZENoYW5nZWQuZW1pdChmaWVsZCk7XG4gICAgfVxuXG59XG4iXX0=