/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { AnalyticsGeneratorComponent } from './analytics-generator.component';
var AnalyticsComponent = /** @class */ (function () {
    function AnalyticsComponent() {
        this.hideParameters = false;
        this.editReport = new EventEmitter();
        this.reportSaved = new EventEmitter();
        this.reportDeleted = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AnalyticsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.analyticsGenerator.reset();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    AnalyticsComponent.prototype.showReport = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.analyticsGenerator.generateReport(this.reportId, $event);
    };
    /**
     * @return {?}
     */
    AnalyticsComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.analyticsGenerator.reset();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AnalyticsComponent.prototype.onEditReport = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.editReport.emit(name);
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    AnalyticsComponent.prototype.onSaveReportSuccess = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        this.reportSaved.emit(reportId);
    };
    /**
     * @return {?}
     */
    AnalyticsComponent.prototype.onDeleteReportSuccess = /**
     * @return {?}
     */
    function () {
        this.reportDeleted.emit();
    };
    AnalyticsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-analytics',
                    template: "<div class=\"adf-analytics-container\">\n    <adf-analytics-report-parameters [appId]=\"appId\" [reportId]=\"reportId\"\n                                 [hideComponent]=\"hideParameters\"\n                                 (formValueChanged)=\"reset()\"\n                                 (success)=\"showReport($event)\"\n                                 (saveReportSuccess)=\"onSaveReportSuccess($event)\"\n                                 (deleteReportSuccess)=\"onDeleteReportSuccess()\"\n                                 (edit)=\"onEditReport($event)\">\n    </adf-analytics-report-parameters>\n\n    <adf-analytics-generator [reportId]=\"reportId\"\n                                  [reportParamQuery]=\"reportParamQuery\"\n                                  #analyticsGenerator>\n    </adf-analytics-generator>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-chart{display:block;width:100%}"]
                }] }
    ];
    AnalyticsComponent.propDecorators = {
        appId: [{ type: Input }],
        reportId: [{ type: Input }],
        hideParameters: [{ type: Input }],
        editReport: [{ type: Output }],
        reportSaved: [{ type: Output }],
        reportDeleted: [{ type: Output }],
        analyticsGenerator: [{ type: ViewChild, args: ['analyticsGenerator',] }]
    };
    return AnalyticsComponent;
}());
export { AnalyticsComponent };
if (false) {
    /** @type {?} */
    AnalyticsComponent.prototype.appId;
    /** @type {?} */
    AnalyticsComponent.prototype.reportId;
    /** @type {?} */
    AnalyticsComponent.prototype.hideParameters;
    /** @type {?} */
    AnalyticsComponent.prototype.editReport;
    /** @type {?} */
    AnalyticsComponent.prototype.reportSaved;
    /** @type {?} */
    AnalyticsComponent.prototype.reportDeleted;
    /** @type {?} */
    AnalyticsComponent.prototype.analyticsGenerator;
    /** @type {?} */
    AnalyticsComponent.prototype.reportParamQuery;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl0aWNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJhbmFseXRpY3MtcHJvY2Vzcy9jb21wb25lbnRzL2FuYWx5dGljcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBaUIsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9ILE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTlFO0lBQUE7UUFlSSxtQkFBYyxHQUFZLEtBQUssQ0FBQztRQUdoQyxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUdoQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHakMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBK0J2QyxDQUFDOzs7OztJQXhCRyx3Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BDLENBQUM7Ozs7O0lBRU0sdUNBQVU7Ozs7SUFBakIsVUFBa0IsTUFBTTtRQUNwQixJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7OztJQUVNLGtDQUFLOzs7SUFBWjtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQyxDQUFDOzs7OztJQUVNLHlDQUFZOzs7O0lBQW5CLFVBQW9CLElBQVk7UUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFTSxnREFBbUI7Ozs7SUFBMUIsVUFBMkIsUUFBUTtRQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7O0lBRU0sa0RBQXFCOzs7SUFBNUI7UUFDSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7O2dCQXJESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLHMwQkFBeUM7b0JBRXpDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozt3QkFHSSxLQUFLOzJCQUdMLEtBQUs7aUNBR0wsS0FBSzs2QkFHTCxNQUFNOzhCQUdOLE1BQU07Z0NBR04sTUFBTTtxQ0FHTixTQUFTLFNBQUMsb0JBQW9COztJQTZCbkMseUJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQWpEWSxrQkFBa0I7OztJQUUzQixtQ0FDYzs7SUFFZCxzQ0FDaUI7O0lBRWpCLDRDQUNnQzs7SUFFaEMsd0NBQ2dDOztJQUVoQyx5Q0FDaUM7O0lBRWpDLDJDQUNtQzs7SUFFbkMsZ0RBQ2dEOztJQUVoRCw4Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBvcnRRdWVyeSB9IGZyb20gJy4uLy4uL2RpYWdyYW0vbW9kZWxzL3JlcG9ydC9yZXBvcnRRdWVyeS5tb2RlbCc7XG5pbXBvcnQgeyBBbmFseXRpY3NHZW5lcmF0b3JDb21wb25lbnQgfSBmcm9tICcuL2FuYWx5dGljcy1nZW5lcmF0b3IuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYW5hbHl0aWNzJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYW5hbHl0aWNzLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9hbmFseXRpY3MuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICBASW5wdXQoKVxuICAgIGFwcElkOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHJlcG9ydElkOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGhpZGVQYXJhbWV0ZXJzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlZGl0UmVwb3J0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVwb3J0U2F2ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZXBvcnREZWxldGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQFZpZXdDaGlsZCgnYW5hbHl0aWNzR2VuZXJhdG9yJylcbiAgICBhbmFseXRpY3NHZW5lcmF0b3I6IEFuYWx5dGljc0dlbmVyYXRvckNvbXBvbmVudDtcblxuICAgIHJlcG9ydFBhcmFtUXVlcnk6IFJlcG9ydFF1ZXJ5O1xuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmFuYWx5dGljc0dlbmVyYXRvci5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93UmVwb3J0KCRldmVudCkge1xuICAgICAgICB0aGlzLmFuYWx5dGljc0dlbmVyYXRvci5nZW5lcmF0ZVJlcG9ydCh0aGlzLnJlcG9ydElkLCAkZXZlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgdGhpcy5hbmFseXRpY3NHZW5lcmF0b3IucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25FZGl0UmVwb3J0KG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmVkaXRSZXBvcnQuZW1pdChuYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25TYXZlUmVwb3J0U3VjY2VzcyhyZXBvcnRJZCkge1xuICAgICAgICB0aGlzLnJlcG9ydFNhdmVkLmVtaXQocmVwb3J0SWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRlbGV0ZVJlcG9ydFN1Y2Nlc3MoKSB7XG4gICAgICAgIHRoaXMucmVwb3J0RGVsZXRlZC5lbWl0KCk7XG4gICAgfVxuXG59XG4iXX0=