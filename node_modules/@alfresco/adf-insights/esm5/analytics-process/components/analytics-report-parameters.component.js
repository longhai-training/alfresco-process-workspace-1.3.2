/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material';
import moment from 'moment-es6';
import { ReportQuery } from '../../diagram/models/report/reportQuery.model';
import { AnalyticsService } from '../services/analytics.service';
var AnalyticsReportParametersComponent = /** @class */ (function () {
    function AnalyticsReportParametersComponent(analyticsService, formBuilder, logService, contentService, dialog) {
        this.analyticsService = analyticsService;
        this.formBuilder = formBuilder;
        this.logService = logService;
        this.contentService = contentService;
        this.dialog = dialog;
        this.hideComponent = false;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.edit = new EventEmitter();
        this.formValueChanged = new EventEmitter();
        this.saveReportSuccess = new EventEmitter();
        this.deleteReportSuccess = new EventEmitter();
        this.onDropdownChanged = new EventEmitter();
        this.successReportParams = new EventEmitter();
        this.successParamOpt = new EventEmitter();
        this.isEditable = false;
        this.hideParameters = true;
        this.formValidState = false;
    }
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dropDownSub = this.onDropdownChanged.subscribe((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var paramDependOn = _this.reportParameters.definition.parameters.find((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.dependsOn === field.id; }));
            if (paramDependOn) {
                _this.retrieveParameterOptions(_this.reportParameters.definition.parameters, _this.appId, _this.reportId, field.value);
            }
        }));
        this.paramOpts = this.successReportParams.subscribe((/**
         * @param {?} report
         * @return {?}
         */
        function (report) {
            if (report.hasParameters()) {
                _this.retrieveParameterOptions(report.definition.parameters, _this.appId);
                _this.generateFormGroupFromParameter(report.definition.parameters);
            }
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.isEditable = false;
        if (this.reportForm) {
            this.reportForm.reset();
        }
        /** @type {?} */
        var reportId = changes['reportId'];
        if (reportId && reportId.currentValue) {
            this.reportId = reportId.currentValue;
            this.getReportParams(reportId.currentValue);
        }
        /** @type {?} */
        var appId = changes['appId'];
        if (appId && (appId.currentValue || appId.currentValue === null)) {
            this.getReportParams(this.reportId);
        }
    };
    /**
     * @private
     * @param {?} parameters
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.generateFormGroupFromParameter = /**
     * @private
     * @param {?} parameters
     * @return {?}
     */
    function (parameters) {
        var _this = this;
        /** @type {?} */
        var formBuilderGroup = {};
        parameters.forEach((/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            switch (param.type) {
                case 'dateRange':
                    formBuilderGroup.dateRange = new FormGroup({}, Validators.required);
                    break;
                case 'processDefinition':
                    formBuilderGroup.processDefGroup = new FormGroup({
                        processDefinitionId: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                case 'duration':
                    formBuilderGroup.durationGroup = new FormGroup({
                        duration: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                case 'dateInterval':
                    formBuilderGroup.dateIntervalGroup = new FormGroup({
                        dateRangeInterval: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                case 'boolean':
                    formBuilderGroup.typeFilteringGroup = new FormGroup({
                        typeFiltering: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                case 'task':
                    formBuilderGroup.taskGroup = new FormGroup({
                        taskName: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                case 'integer':
                    formBuilderGroup.processInstanceGroup = new FormGroup({
                        slowProcessInstanceInteger: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                case 'status':
                    formBuilderGroup.statusGroup = new FormGroup({
                        status: new FormControl(null, Validators.required, null)
                    }, Validators.required);
                    break;
                default:
                    return;
            }
        }));
        this.reportForm = this.formBuilder.group(formBuilderGroup);
        this.reportForm.valueChanges.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.onValueChanged(data); }));
        this.reportForm.statusChanges.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.onStatusChanged(data); }));
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.getReportParams = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        var _this = this;
        this.reportParamsSub = this.analyticsService.getReportParams(reportId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.reportParameters = res;
            if (_this.reportParameters.hasParameters()) {
                _this.successReportParams.emit(res);
            }
            else {
                _this.reportForm = _this.formBuilder.group({});
                _this.success.emit();
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * @private
     * @param {?} parameters
     * @param {?} appId
     * @param {?=} reportId
     * @param {?=} processDefinitionId
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.retrieveParameterOptions = /**
     * @private
     * @param {?} parameters
     * @param {?} appId
     * @param {?=} reportId
     * @param {?=} processDefinitionId
     * @return {?}
     */
    function (parameters, appId, reportId, processDefinitionId) {
        var _this = this;
        parameters.forEach((/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            _this.analyticsService.getParamValuesByType(param.type, appId, reportId, processDefinitionId).subscribe((/**
             * @param {?} opts
             * @return {?}
             */
            function (opts) {
                param.options = opts;
                _this.successParamOpt.emit(opts);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }));
    };
    /**
     * @param {?} field
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.onProcessDefinitionChanges = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.value) {
            this.onDropdownChanged.emit(field);
        }
    };
    /**
     * @param {?} values
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.submit = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this.reportParamQuery = this.convertFormValuesToReportParamQuery(values);
        this.success.emit(this.reportParamQuery);
    };
    /**
     * @param {?} values
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.onValueChanged = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this.formValueChanged.emit(values);
        if (this.reportForm && this.reportForm.valid) {
            this.submit(values);
        }
    };
    /**
     * @param {?} status
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.onStatusChanged = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        if (this.reportForm && !this.reportForm.pending && this.reportForm.dirty) {
            this.formValidState = this.reportForm.valid;
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.convertMomentDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return moment(date, AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI, true)
            .format(AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI) + 'T00:00:00.000Z';
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.getTodayDate = /**
     * @return {?}
     */
    function () {
        return moment().format(AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.convertNumber = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value != null ? parseInt(value, 10) : 0;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.convertFormValuesToReportParamQuery = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        /** @type {?} */
        var reportParamQuery = new ReportQuery();
        if (values.dateRange) {
            reportParamQuery.dateRange.startDate = this.convertMomentDate(values.dateRange.startDate);
            reportParamQuery.dateRange.endDate = this.convertMomentDate(values.dateRange.endDate);
        }
        if (values.statusGroup) {
            reportParamQuery.status = values.statusGroup.status;
        }
        if (values.processDefGroup) {
            reportParamQuery.processDefinitionId = values.processDefGroup.processDefinitionId;
        }
        if (values.taskGroup) {
            reportParamQuery.taskName = values.taskGroup.taskName;
        }
        if (values.durationGroup) {
            reportParamQuery.duration = values.durationGroup.duration;
        }
        if (values.dateIntervalGroup) {
            reportParamQuery.dateRangeInterval = values.dateIntervalGroup.dateRangeInterval;
        }
        if (values.processInstanceGroup) {
            reportParamQuery.slowProcessInstanceInteger = this.convertNumber(values.processInstanceGroup.slowProcessInstanceInteger);
        }
        if (values.typeFilteringGroup) {
            reportParamQuery.typeFiltering = values.typeFilteringGroup.typeFiltering;
        }
        return reportParamQuery;
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dropDownSub.unsubscribe();
        this.paramOpts.unsubscribe();
        if (this.reportParamsSub) {
            this.reportParamsSub.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.editEnable = /**
     * @return {?}
     */
    function () {
        this.isEditable = true;
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.editDisable = /**
     * @return {?}
     */
    function () {
        this.isEditable = false;
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.editTitle = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.reportParamsSub = this.analyticsService.updateReport(this.reportParameters.id, this.reportParameters.name).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.editDisable();
            _this.edit.emit(_this.reportParameters.name);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.showDialog = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dialog.open(this.reportNameDialog, { width: '500px' });
        this.action = event;
        this.reportName = this.reportParameters.name + ' ( ' + this.getTodayDate() + ' )';
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * @param {?} action
     * @param {?} reportParamQuery
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.performAction = /**
     * @param {?} action
     * @param {?} reportParamQuery
     * @return {?}
     */
    function (action, reportParamQuery) {
        reportParamQuery.reportName = this.reportName;
        this.closeDialog();
        if (action === 'Save') {
            this.doSave(reportParamQuery);
        }
        else if (action === 'Export') {
            this.doExport(reportParamQuery);
        }
        this.resetActions();
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.resetActions = /**
     * @return {?}
     */
    function () {
        this.action = '';
        this.reportName = '';
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.isSaveAction = /**
     * @return {?}
     */
    function () {
        return this.action === 'Save';
    };
    /**
     * @param {?} paramQuery
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.doExport = /**
     * @param {?} paramQuery
     * @return {?}
     */
    function (paramQuery) {
        var _this = this;
        this.analyticsService.exportReportToCsv(this.reportId, paramQuery).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var blob = new Blob([data], { type: 'text/csv' });
            _this.contentService.downloadBlob(blob, paramQuery.reportName + '.csv');
        }));
    };
    /**
     * @param {?} paramQuery
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.doSave = /**
     * @param {?} paramQuery
     * @return {?}
     */
    function (paramQuery) {
        var _this = this;
        this.analyticsService.saveReport(this.reportId, paramQuery).subscribe((/**
         * @return {?}
         */
        function () {
            _this.saveReportSuccess.emit(_this.reportId);
        }));
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.deleteReport = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        var _this = this;
        this.analyticsService.deleteReport(reportId).subscribe((/**
         * @return {?}
         */
        function () {
            _this.deleteReportSuccess.emit(reportId);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.logService.error(error); }));
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        if (this.reportForm && this.reportForm.valid) {
            this.reportForm.markAsDirty();
        }
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.toggleParameters = /**
     * @return {?}
     */
    function () {
        this.hideParameters = !this.hideParameters;
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.isParametersHide = /**
     * @return {?}
     */
    function () {
        return this.hideParameters;
    };
    /**
     * @return {?}
     */
    AnalyticsReportParametersComponent.prototype.isFormValid = /**
     * @return {?}
     */
    function () {
        return this.reportForm && this.reportForm.dirty && this.reportForm.valid;
    };
    AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI = 'YYYY-MM-DD';
    AnalyticsReportParametersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-analytics-report-parameters',
                    template: "<div [class.adf-hide]=\"hideComponent\">\n    <div class=\"adf-report-report-container\">\n        <div *ngIf=\"reportParameters\">\n            <form [formGroup]=\"reportForm\" novalidate>\n                <adf-toolbar>\n                    <adf-toolbar-title class=\"adf-report-title-container\">\n                        <div *ngIf=\"isEditable\">\n                            <mat-form-field class=\"adf-full-width-input\">\n                                <input\n                                    matInput\n                                    type=\"text\"\n                                    class=\"adf-edit-report-title\"\n                                    id=\"reportName\"\n                                    autofocus\n                                    data-automation-id=\"reportName\"\n                                    [value]=\"reportParameters.name\"\n                                    (input)=\"reportParameters.name=$event.target.value\"\n                                    (blur)=\"editTitle()\"\n                                    (keyup.enter)=\"editTitle()\"\n                                />\n                            </mat-form-field>\n                        </div>\n                        <div class=\"adf-report-title\" *ngIf=\"!isEditable\" (click)=\"editEnable()\">\n                            <mat-icon class=\"adf-report-icon\" >mode_edit</mat-icon>\n                            <h4>{{reportParameters.name}}</h4>\n                        </div>\n                    </adf-toolbar-title>\n                    <adf-buttons-action-menu *ngIf=\"!isEditable\">\n                        <button mat-menu-item (click)=\"toggleParameters()\" id=\"\">\n                            <mat-icon>settings</mat-icon><span>{{ 'ANALYTICS.MESSAGES.ICON-SETTING' | translate }}</span>\n                        </button>\n                        <button mat-menu-item (click)=\"deleteReport(reportId)\" id=\"delete-button\">\n                            <mat-icon>delete</mat-icon><span>{{ 'ANALYTICS.MESSAGES.ICON-DELETE' | translate }}</span>\n                        </button>\n                        <div *ngIf=\"isFormValid()\">\n                            <button mat-menu-item (click)=\"showDialog('Export')\" id=\"export-button\">\n                                <mat-icon>file_download</mat-icon><span>{{ 'ANALYTICS.MESSAGES.ICON-EXPORT-CSV' | translate }}</span>\n                            </button>\n                            <button mat-menu-item (click)=\"showDialog('Save')\" id=\"save-button\">\n                                <mat-icon>save</mat-icon><span>{{ 'ANALYTICS.MESSAGES.ICON-SAVE' | translate }}</span>\n                            </button>\n                        </div>\n                    </adf-buttons-action-menu>\n                </adf-toolbar>\n                <div *ngFor=\"let field of reportParameters.definition.parameters\"\n                        [class.adf-is-hide]=\"isParametersHide()\">\n                    <div [ngSwitch]=\"field.type\">\n                        <div *ngSwitchCase=\"'integer'\">\n                            <br>\n                            <analytics-number-widget [field]=\"field\" [group]=\"reportForm.controls.processInstanceGroup\"\n                                            [controllerName]=\"'slowProcessInstanceInteger'\"\n                                            [required]=\"true\"></analytics-number-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'duration'\">\n                            <br>\n                            <duration-widget [field]=\"field\" [group]=\"reportForm.controls.durationGroup\"\n                                                [controllerName]=\"'duration'\"></duration-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'boolean'\">\n                            <br>\n                            <analytics-checkbox-widget [field]=\"field\" [group]=\"reportForm.controls.typeFilteringGroup\"\n                                                [controllerName]=\"'typeFiltering'\"></analytics-checkbox-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'status'\">\n                            <br>\n                            <analytics-dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.statusGroup\"\n                                                [controllerName]=\"'status'\"\n                                                [required]=\"true\"></analytics-dropdown-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'processDefinition'\">\n                            <br>\n                            <analytics-dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.processDefGroup\"\n                                                [controllerName]=\"'processDefinitionId'\"\n                                                [required]=\"true\"\n                                                (fieldChanged)=\"onProcessDefinitionChanges(field)\"></analytics-dropdown-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'task'\">\n                            <br>\n                            <analytics-dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.taskGroup\"\n                                                [controllerName]=\"'taskName'\"\n                                                [required]=\"true\"></analytics-dropdown-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'dateRange'\">\n                            <br>\n                            <adf-date-range-widget [field]=\"field\"\n                                                    [group]=\"reportForm.controls.dateRange\"></adf-date-range-widget>\n                        </div>\n                        <div *ngSwitchCase=\"'dateInterval'\">\n                            <br>\n                            <analytics-dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.dateIntervalGroup\"\n                                                [controllerName]=\"'dateRangeInterval'\"\n                                                [required]=\"true\" [showDefaultOption]=\"false\"></analytics-dropdown-widget>\n                        </div>\n                        <div *ngSwitchDefault>\n                            <span>{{'ANALYTICS.MESSAGES.UNKNOWN-WIDGET-TYPE' | translate}}: {{field.type}}</span>\n                        </div>\n                    </div>\n                </div>\n                <ng-template #reportNameDialog>\n                    <div id=\"report-dialog\" class=\"adf-report-dialog\">\n                        <h5 matDialogTitle id=\"report-dialog-title\">{{action}} report</h5>\n                        <div mat-dialog-content>\n                            <div *ngIf=\"isSaveAction()\" id=\"save-title-submessage\" class=\"adf-export-message\">\n                                {{'DIALOG.SAVE_MESSAGE' | translate}}\n                            </div>\n                            <div class=\"adf-save-export-input\">\n                                <mat-form-field class=\"adf-example-full-width\" floatPlaceholder=\"always\">\n                                    <input matInput\n                                        type=\"text\"\n                                        id=\"repName\"\n                                        placeholder=\"Report Name\"\n                                        [value]=\"reportName\"\n                                        [(ngModel)]=\"reportName\"\n                                        [ngModelOptions]=\"{standalone: true}\">\n                                </mat-form-field>\n                            </div>\n                        </div>\n                        <div mat-dialog-actions>\n                            <button mat-button\n                                color=\"accent\"\n                                type=\"button\"\n                                id=\"close-dialog-button\"\n                                (click)=\"closeDialog()\">Close</button>\n                            <button mat-button\n                                color=\"primary\"\n                                type=\"button\"\n                                id=\"action-dialog-button\"\n                                (click)=\"performAction(action, reportParamQuery)\">{{action}}</button>\n                        </div>\n                    </div>\n                </ng-template>\n            </form>\n        </div>\n    </div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AnalyticsReportParametersComponent.ctorParameters = function () { return [
        { type: AnalyticsService },
        { type: FormBuilder },
        { type: LogService },
        { type: ContentService },
        { type: MatDialog }
    ]; };
    AnalyticsReportParametersComponent.propDecorators = {
        appId: [{ type: Input }],
        reportId: [{ type: Input }],
        hideComponent: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }],
        edit: [{ type: Output }],
        formValueChanged: [{ type: Output }],
        saveReportSuccess: [{ type: Output }],
        deleteReportSuccess: [{ type: Output }],
        reportNameDialog: [{ type: ViewChild, args: ['reportNameDialog',] }]
    };
    return AnalyticsReportParametersComponent;
}());
export { AnalyticsReportParametersComponent };
if (false) {
    /** @type {?} */
    AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.appId;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.reportId;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.hideComponent;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.success;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.error;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.edit;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.formValueChanged;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.saveReportSuccess;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.deleteReportSuccess;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.reportNameDialog;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.onDropdownChanged;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.successReportParams;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.successParamOpt;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.reportParameters;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.reportForm;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.action;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.isEditable;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.reportName;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.dropDownSub;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.reportParamsSub;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.paramOpts;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.reportParamQuery;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.hideParameters;
    /** @type {?} */
    AnalyticsReportParametersComponent.prototype.formValidState;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.analyticsService;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportParametersComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,