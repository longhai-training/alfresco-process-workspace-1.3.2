/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';
import { DiagramsModule } from './diagram/diagram.module';
import { AnalyticsProcessModule } from './analytics-process/analytics-process.module';
import { MaterialModule } from './material.module';
import { DiagramsService } from './diagram/services/diagrams.service';
import { DiagramColorService } from './diagram/services/diagram-color.service';
import { RaphaelService } from './diagram/components/raphael/raphael.service';
import { AnalyticsService } from './analytics-process/services/analytics.service';
/**
 * @return {?}
 */
export function providers() {
    return [
        AnalyticsService,
        DiagramsService,
        DiagramColorService,
        RaphaelService
    ];
}
var ɵ0 = {
    name: 'adf-insights',
    source: 'assets/adf-insights'
};
var InsightsModule = /** @class */ (function () {
    function InsightsModule() {
    }
    /**
     * @return {?}
     */
    InsightsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: InsightsModule,
            providers: tslib_1.__spread(providers(), [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-insights',
                        source: 'assets/adf-insights'
                    }
                }
            ])
        };
    };
    /**
     * @return {?}
     */
    InsightsModule.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: InsightsModuleLazy
        };
    };
    InsightsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        DiagramsModule,
                        AnalyticsProcessModule
                    ],
                    providers: tslib_1.__spread(providers(), [
                        {
                            provide: TRANSLATION_PROVIDER,
                            multi: true,
                            useValue: ɵ0
                        }
                    ]),
                    exports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        DiagramsModule,
                        AnalyticsProcessModule
                    ]
                },] }
    ];
    return InsightsModule;
}());
export { InsightsModule };
var InsightsModuleLazy = /** @class */ (function () {
    function InsightsModuleLazy() {
    }
    InsightsModuleLazy.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        DiagramsModule,
                        AnalyticsProcessModule
                    ],
                    exports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        DiagramsModule,
                        AnalyticsProcessModule
                    ]
                },] }
    ];
    return InsightsModuleLazy;
}());
export { InsightsModuleLazy };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zaWdodHMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImluc2lnaHRzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBRXRGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDdEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOzs7O0FBRWxGLE1BQU0sVUFBVSxTQUFTO0lBQ3JCLE9BQU87UUFDSCxnQkFBZ0I7UUFDaEIsZUFBZTtRQUNmLG1CQUFtQjtRQUNuQixjQUFjO0tBQ2pCLENBQUM7QUFDTixDQUFDO1NBaUJxQjtJQUNOLElBQUksRUFBRSxjQUFjO0lBQ3BCLE1BQU0sRUFBRSxxQkFBcUI7Q0FDaEM7QUFsQmI7SUFBQTtJQXFEQSxDQUFDOzs7O0lBdEJVLHNCQUFPOzs7SUFBZDtRQUNJLE9BQU87WUFDSCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLG1CQUNGLFNBQVMsRUFBRTtnQkFDZDtvQkFDSSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixLQUFLLEVBQUUsSUFBSTtvQkFDWCxRQUFRLEVBQUU7d0JBQ04sSUFBSSxFQUFFLGNBQWM7d0JBQ3BCLE1BQU0sRUFBRSxxQkFBcUI7cUJBQ2hDO2lCQUNKO2NBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQzs7OztJQUVNLHVCQUFROzs7SUFBZjtRQUNJLE9BQU87WUFDSCxRQUFRLEVBQUUsa0JBQWtCO1NBQy9CLENBQUM7SUFDTixDQUFDOztnQkFwREosUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxVQUFVLENBQUMsUUFBUSxFQUFFO3dCQUNyQixZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsbUJBQW1CO3dCQUNuQixjQUFjO3dCQUNkLGNBQWM7d0JBQ2Qsc0JBQXNCO3FCQUN6QjtvQkFDRCxTQUFTLG1CQUNGLFNBQVMsRUFBRTt3QkFDZDs0QkFDSSxPQUFPLEVBQUUsb0JBQW9COzRCQUM3QixLQUFLLEVBQUUsSUFBSTs0QkFDWCxRQUFRLElBR1A7eUJBQ0o7c0JBQ0o7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLFlBQVk7d0JBQ1osV0FBVzt3QkFDWCxtQkFBbUI7d0JBQ25CLGNBQWM7d0JBQ2QsY0FBYzt3QkFDZCxzQkFBc0I7cUJBQ3pCO2lCQUNKOztJQXdCRCxxQkFBQztDQUFBLEFBckRELElBcURDO1NBdkJZLGNBQWM7QUF5QjNCO0lBQUE7SUFtQmlDLENBQUM7O2dCQW5CakMsUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxVQUFVLENBQUMsUUFBUSxFQUFFO3dCQUNyQixZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsbUJBQW1CO3dCQUNuQixjQUFjO3dCQUNkLGNBQWM7d0JBQ2Qsc0JBQXNCO3FCQUN6QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ0wsWUFBWTt3QkFDWixXQUFXO3dCQUNYLG1CQUFtQjt3QkFDbkIsY0FBYzt3QkFDZCxjQUFjO3dCQUNkLHNCQUFzQjtxQkFDekI7aUJBQ0o7O0lBQ2dDLHlCQUFDO0NBQUEsQUFuQmxDLElBbUJrQztTQUFyQixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ29yZU1vZHVsZSwgVFJBTlNMQVRJT05fUFJPVklERVIgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5pbXBvcnQgeyBEaWFncmFtc01vZHVsZSB9IGZyb20gJy4vZGlhZ3JhbS9kaWFncmFtLm1vZHVsZSc7XG5pbXBvcnQgeyBBbmFseXRpY3NQcm9jZXNzTW9kdWxlIH0gZnJvbSAnLi9hbmFseXRpY3MtcHJvY2Vzcy9hbmFseXRpY3MtcHJvY2Vzcy5tb2R1bGUnO1xuXG5pbXBvcnQgeyBNYXRlcmlhbE1vZHVsZSB9IGZyb20gJy4vbWF0ZXJpYWwubW9kdWxlJztcbmltcG9ydCB7IERpYWdyYW1zU2VydmljZSB9IGZyb20gJy4vZGlhZ3JhbS9zZXJ2aWNlcy9kaWFncmFtcy5zZXJ2aWNlJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuL2RpYWdyYW0vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9kaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gJy4vYW5hbHl0aWNzLXByb2Nlc3Mvc2VydmljZXMvYW5hbHl0aWNzLnNlcnZpY2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZXJzKCkge1xuICAgIHJldHVybiBbXG4gICAgICAgIEFuYWx5dGljc1NlcnZpY2UsXG4gICAgICAgIERpYWdyYW1zU2VydmljZSxcbiAgICAgICAgRGlhZ3JhbUNvbG9yU2VydmljZSxcbiAgICAgICAgUmFwaGFlbFNlcnZpY2VcbiAgICBdO1xufVxuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29yZU1vZHVsZS5mb3JDaGlsZCgpLFxuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICBNYXRlcmlhbE1vZHVsZSxcbiAgICAgICAgRGlhZ3JhbXNNb2R1bGUsXG4gICAgICAgIEFuYWx5dGljc1Byb2Nlc3NNb2R1bGVcbiAgICBdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICAuLi5wcm92aWRlcnMoKSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFJBTlNMQVRJT05fUFJPVklERVIsXG4gICAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2FkZi1pbnNpZ2h0cycsXG4gICAgICAgICAgICAgICAgc291cmNlOiAnYXNzZXRzL2FkZi1pbnNpZ2h0cydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICBNYXRlcmlhbE1vZHVsZSxcbiAgICAgICAgRGlhZ3JhbXNNb2R1bGUsXG4gICAgICAgIEFuYWx5dGljc1Byb2Nlc3NNb2R1bGVcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIEluc2lnaHRzTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBJbnNpZ2h0c01vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIC4uLnByb3ZpZGVycygpLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogVFJBTlNMQVRJT05fUFJPVklERVIsXG4gICAgICAgICAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FkZi1pbnNpZ2h0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICdhc3NldHMvYWRmLWluc2lnaHRzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JDaGlsZCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBJbnNpZ2h0c01vZHVsZUxhenlcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb3JlTW9kdWxlLmZvckNoaWxkKCksXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIE1hdGVyaWFsTW9kdWxlLFxuICAgICAgICBEaWFncmFtc01vZHVsZSxcbiAgICAgICAgQW5hbHl0aWNzUHJvY2Vzc01vZHVsZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICBNYXRlcmlhbE1vZHVsZSxcbiAgICAgICAgRGlhZ3JhbXNNb2R1bGUsXG4gICAgICAgIEFuYWx5dGljc1Byb2Nlc3NNb2R1bGVcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIEluc2lnaHRzTW9kdWxlTGF6eSB7fVxuIl19