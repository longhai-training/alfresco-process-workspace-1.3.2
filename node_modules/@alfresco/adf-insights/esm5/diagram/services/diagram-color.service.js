/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
var DiagramColorService = /** @class */ (function () {
    function DiagramColorService() {
    }
    /**
     * @param {?} totalColors
     * @return {?}
     */
    DiagramColorService.prototype.setTotalColors = /**
     * @param {?} totalColors
     * @return {?}
     */
    function (totalColors) {
        this.totalColors = totalColors;
    };
    /**
     * @return {?}
     */
    DiagramColorService.prototype.getFillOpacity = /**
     * @return {?}
     */
    function () {
        return '0.6';
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DiagramColorService.prototype.getFillColour = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.totalColors && this.totalColors.hasOwnProperty(key)) {
            /** @type {?} */
            var colorPercentage = this.totalColors[key];
            return this.convertColorToHsb(colorPercentage);
        }
        else {
            return DiagramColorService.ACTIVITY_FILL_COLOR;
        }
    };
    /**
     * @param {?} data
     * @param {?} defaultColor
     * @return {?}
     */
    DiagramColorService.prototype.getBpmnColor = /**
     * @param {?} data
     * @param {?} defaultColor
     * @return {?}
     */
    function (data, defaultColor) {
        if (data.current) {
            return DiagramColorService.CURRENT_COLOR;
        }
        else if (data.completed) {
            return DiagramColorService.COMPLETED_COLOR;
        }
        else {
            return defaultColor;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DiagramColorService.prototype.getBpmnStrokeWidth = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.current || data.completed) {
            return DiagramColorService.TASK_HIGHLIGHT_STROKE;
        }
        else {
            return DiagramColorService.TASK_STROKE;
        }
    };
    /**
     * @param {?} colorPercentage
     * @return {?}
     */
    DiagramColorService.prototype.convertColorToHsb = /**
     * @param {?} colorPercentage
     * @return {?}
     */
    function (colorPercentage) {
        /** @type {?} */
        var hue = (120.0 - (colorPercentage * 1.2)) / 360.0;
        return 'hsb(' + hue + ', 1, 1)';
    };
    DiagramColorService.CURRENT_COLOR = '#017501';
    DiagramColorService.COMPLETED_COLOR = '#2632aa';
    DiagramColorService.ACTIVITY_STROKE_COLOR = '#bbbbbb';
    DiagramColorService.MAIN_STROKE_COLOR = '#585858';
    DiagramColorService.ACTIVITY_FILL_COLOR = '#f9f9f9';
    DiagramColorService.TASK_STROKE = 1;
    DiagramColorService.TASK_HIGHLIGHT_STROKE = 2;
    DiagramColorService.CALL_ACTIVITY_STROKE = 2;
    DiagramColorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DiagramColorService.ctorParameters = function () { return []; };
    return DiagramColorService;
}());
export { DiagramColorService };
if (false) {
    /** @type {?} */
    DiagramColorService.CURRENT_COLOR;
    /** @type {?} */
    DiagramColorService.COMPLETED_COLOR;
    /** @type {?} */
    DiagramColorService.ACTIVITY_STROKE_COLOR;
    /** @type {?} */
    DiagramColorService.MAIN_STROKE_COLOR;
    /** @type {?} */
    DiagramColorService.ACTIVITY_FILL_COLOR;
    /** @type {?} */
    DiagramColorService.TASK_STROKE;
    /** @type {?} */
    DiagramColorService.TASK_HIGHLIGHT_STROKE;
    /** @type {?} */
    DiagramColorService.CALL_ACTIVITY_STROKE;
    /** @type {?} */
    DiagramColorService.prototype.totalColors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1jb2xvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7SUFnQkk7SUFDQSxDQUFDOzs7OztJQUVELDRDQUFjOzs7O0lBQWQsVUFBZSxXQUFXO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCw0Q0FBYzs7O0lBQWQ7UUFDSSxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELDJDQUFhOzs7O0lBQWIsVUFBYyxHQUFXO1FBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTs7Z0JBQ3BELGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztZQUM3QyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNsRDthQUFNO1lBQ0gsT0FBTyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQztTQUNsRDtJQUNMLENBQUM7Ozs7OztJQUVELDBDQUFZOzs7OztJQUFaLFVBQWEsSUFBSSxFQUFFLFlBQVk7UUFDM0IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsT0FBTyxtQkFBbUIsQ0FBQyxhQUFhLENBQUM7U0FDNUM7YUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxtQkFBbUIsQ0FBQyxlQUFlLENBQUM7U0FDOUM7YUFBTTtZQUNILE9BQU8sWUFBWSxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxnREFBa0I7Ozs7SUFBbEIsVUFBbUIsSUFBSTtRQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQyxPQUFPLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDO1NBQ3BEO2FBQU07WUFDSCxPQUFPLG1CQUFtQixDQUFDLFdBQVcsQ0FBQztTQUMxQztJQUNMLENBQUM7Ozs7O0lBRUQsK0NBQWlCOzs7O0lBQWpCLFVBQWtCLGVBQXVCOztZQUMvQixHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLO1FBQ3JELE9BQU8sTUFBTSxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUM7SUFDcEMsQ0FBQztJQXRETSxpQ0FBYSxHQUFHLFNBQVMsQ0FBQztJQUMxQixtQ0FBZSxHQUFHLFNBQVMsQ0FBQztJQUM1Qix5Q0FBcUIsR0FBRyxTQUFTLENBQUM7SUFDbEMscUNBQWlCLEdBQUcsU0FBUyxDQUFDO0lBRTlCLHVDQUFtQixHQUFHLFNBQVMsQ0FBQztJQUVoQywrQkFBVyxHQUFHLENBQUMsQ0FBQztJQUNoQix5Q0FBcUIsR0FBRyxDQUFDLENBQUM7SUFDMUIsd0NBQW9CLEdBQUcsQ0FBQyxDQUFDOztnQkFabkMsVUFBVTs7OztJQTBEWCwwQkFBQztDQUFBLEFBMURELElBMERDO1NBekRZLG1CQUFtQjs7O0lBRTVCLGtDQUFpQzs7SUFDakMsb0NBQW1DOztJQUNuQywwQ0FBeUM7O0lBQ3pDLHNDQUFxQzs7SUFFckMsd0NBQXVDOztJQUV2QyxnQ0FBdUI7O0lBQ3ZCLDBDQUFpQzs7SUFDakMseUNBQWdDOztJQUVoQywwQ0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEaWFncmFtQ29sb3JTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBDVVJSRU5UX0NPTE9SID0gJyMwMTc1MDEnO1xuICAgIHN0YXRpYyBDT01QTEVURURfQ09MT1IgPSAnIzI2MzJhYSc7XG4gICAgc3RhdGljIEFDVElWSVRZX1NUUk9LRV9DT0xPUiA9ICcjYmJiYmJiJztcbiAgICBzdGF0aWMgTUFJTl9TVFJPS0VfQ09MT1IgPSAnIzU4NTg1OCc7XG5cbiAgICBzdGF0aWMgQUNUSVZJVFlfRklMTF9DT0xPUiA9ICcjZjlmOWY5JztcblxuICAgIHN0YXRpYyBUQVNLX1NUUk9LRSA9IDE7XG4gICAgc3RhdGljIFRBU0tfSElHSExJR0hUX1NUUk9LRSA9IDI7XG4gICAgc3RhdGljIENBTExfQUNUSVZJVFlfU1RST0tFID0gMjtcblxuICAgIHRvdGFsQ29sb3JzOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBzZXRUb3RhbENvbG9ycyh0b3RhbENvbG9ycykge1xuICAgICAgICB0aGlzLnRvdGFsQ29sb3JzID0gdG90YWxDb2xvcnM7XG4gICAgfVxuXG4gICAgZ2V0RmlsbE9wYWNpdHkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICcwLjYnO1xuICAgIH1cblxuICAgIGdldEZpbGxDb2xvdXIoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMudG90YWxDb2xvcnMgJiYgdGhpcy50b3RhbENvbG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xvclBlcmNlbnRhZ2UgPSB0aGlzLnRvdGFsQ29sb3JzW2tleV07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0Q29sb3JUb0hzYihjb2xvclBlcmNlbnRhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuQUNUSVZJVFlfRklMTF9DT0xPUjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEJwbW5Db2xvcihkYXRhLCBkZWZhdWx0Q29sb3IpIHtcbiAgICAgICAgaWYgKGRhdGEuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuQ1VSUkVOVF9DT0xPUjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuQ09NUExFVEVEX0NPTE9SO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRDb2xvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEJwbW5TdHJva2VXaWR0aChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmN1cnJlbnQgfHwgZGF0YS5jb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBEaWFncmFtQ29sb3JTZXJ2aWNlLlRBU0tfSElHSExJR0hUX1NUUk9LRTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBEaWFncmFtQ29sb3JTZXJ2aWNlLlRBU0tfU1RST0tFO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udmVydENvbG9yVG9Ic2IoY29sb3JQZXJjZW50YWdlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBodWUgPSAoMTIwLjAgLSAoY29sb3JQZXJjZW50YWdlICogMS4yKSkgLyAzNjAuMDtcbiAgICAgICAgcmV0dXJuICdoc2IoJyArIGh1ZSArICcsIDEsIDEpJztcbiAgICB9XG59XG4iXX0=