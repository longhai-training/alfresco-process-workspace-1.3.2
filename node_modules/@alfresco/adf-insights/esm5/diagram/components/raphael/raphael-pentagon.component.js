/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelPentagonDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelPentagonDirective, _super);
    function RaphaelPentagonDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelPentagonDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = {
            'stroke-width': this.strokeWidth,
            'fill': this.fillColors,
            'stroke': this.stroke,
            'fill-opacity': this.fillOpacity,
            'stroke-linejoin': 'bevel'
        };
        this.draw(this.center, opts);
    };
    /**
     * @param {?} center
     * @param {?=} opts
     * @return {?}
     */
    RaphaelPentagonDirective.prototype.draw = /**
     * @param {?} center
     * @param {?=} opts
     * @return {?}
     */
    function (center, opts) {
        /** @type {?} */
        var shape = this.paper.path('M 20.327514,22.344972 L 11.259248,22.344216 L 8.4577203,13.719549' +
            ' L 15.794545,8.389969 L 23.130481,13.720774 L 20.327514,22.344972 z').attr(opts);
        shape.transform('T' + (center.x + 4) + ',' + (center.y + 4));
    };
    RaphaelPentagonDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-pentagon, raphael-pentagon' },] }
    ];
    /** @nocollapse */
    RaphaelPentagonDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelPentagonDirective.propDecorators = {
        center: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        strokeWidth: [{ type: Input }],
        fillOpacity: [{ type: Input }],
        strokeLinejoin: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelPentagonDirective;
}(RaphaelBase));
export { RaphaelPentagonDirective };
if (false) {
    /** @type {?} */
    RaphaelPentagonDirective.prototype.center;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.stroke;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.strokeLinejoin;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.error;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1wZW50YWdvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1wZW50YWdvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBS25EO0lBQzhDLG9EQUFXO0lBc0JyRCxrQ0FBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBRnpDLFdBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQUszQixDQUFDOzs7O0lBRUQsMkNBQVE7OztJQUFSOztZQUVVLElBQUksR0FBRztZQUNULGNBQWMsRUFBRSxJQUFJLENBQUMsV0FBVztZQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3JCLGNBQWMsRUFBRSxJQUFJLENBQUMsV0FBVztZQUNoQyxpQkFBaUIsRUFBRSxPQUFPO1NBQzdCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7OztJQUVNLHVDQUFJOzs7OztJQUFYLFVBQVksTUFBYSxFQUFFLElBQVU7O1lBQzNCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxtRUFBbUU7WUFDN0YscUVBQXFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3JGLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQzs7Z0JBNUNKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSx3Q0FBd0MsRUFBQzs7OztnQkFSM0MsVUFBVTtnQkFHckIsY0FBYzs7O3lCQU9sQixLQUFLOzZCQUdMLEtBQUs7eUJBR0wsS0FBSzs4QkFHTCxLQUFLOzhCQUdMLEtBQUs7aUNBR0wsS0FBSzt3QkFHTCxNQUFNOztJQXlCWCwrQkFBQztDQUFBLEFBN0NELENBQzhDLFdBQVcsR0E0Q3hEO1NBNUNZLHdCQUF3Qjs7O0lBQ2pDLDBDQUNjOztJQUVkLDhDQUNnQjs7SUFFaEIsMENBQ1k7O0lBRVosK0NBQ2lCOztJQUVqQiwrQ0FDaUI7O0lBRWpCLGtEQUNvQjs7SUFFcEIseUNBQzJCOztJQUVmLDhDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYWRmLXJhcGhhZWwtcGVudGFnb24sIHJhcGhhZWwtcGVudGFnb24nfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsUGVudGFnb25EaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBjZW50ZXI6IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VMaW5lam9pbjogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgICdmaWxsJzogdGhpcy5maWxsQ29sb3JzLFxuICAgICAgICAgICAgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlLFxuICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHRoaXMuZmlsbE9wYWNpdHksXG4gICAgICAgICAgICAnc3Ryb2tlLWxpbmVqb2luJzogJ2JldmVsJ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRyYXcodGhpcy5jZW50ZXIsIG9wdHMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KGNlbnRlcjogUG9pbnQsIG9wdHM/OiBhbnkpIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLnBhcGVyLnBhdGgoJ00gMjAuMzI3NTE0LDIyLjM0NDk3MiBMIDExLjI1OTI0OCwyMi4zNDQyMTYgTCA4LjQ1NzcyMDMsMTMuNzE5NTQ5JyArXG4gICAgICAgICAgICAnIEwgMTUuNzk0NTQ1LDguMzg5OTY5IEwgMjMuMTMwNDgxLDEzLjcyMDc3NCBMIDIwLjMyNzUxNCwyMi4zNDQ5NzIgeicpLmF0dHIob3B0cyk7XG4gICAgICAgIHNoYXBlLnRyYW5zZm9ybSgnVCcgKyAoY2VudGVyLnggKyA0KSArICcsJyArIChjZW50ZXIueSArIDQpKTtcbiAgICB9XG59XG4iXX0=