/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Polyline } from './polyline';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelFlowArrowDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelFlowArrowDirective, _super);
    function RaphaelFlowArrowDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        _this.ARROW_WIDTH = 4;
        _this.SEQUENCE_FLOW_STROKE = 1.5;
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelFlowArrowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.flow);
    };
    /**
     * @param {?} flow
     * @return {?}
     */
    RaphaelFlowArrowDirective.prototype.draw = /**
     * @param {?} flow
     * @return {?}
     */
    function (flow) {
        /** @type {?} */
        var line = this.drawLine(flow);
        this.drawArrow(line);
    };
    /**
     * @param {?} flow
     * @return {?}
     */
    RaphaelFlowArrowDirective.prototype.drawLine = /**
     * @param {?} flow
     * @return {?}
     */
    function (flow) {
        /** @type {?} */
        var polyline = new Polyline(flow.id, flow.waypoints, this.SEQUENCE_FLOW_STROKE, this.paper);
        polyline.element = this.paper.path(polyline.path);
        polyline.element.attr({ 'stroke-width': this.SEQUENCE_FLOW_STROKE });
        polyline.element.attr({ 'stroke': '#585858' });
        polyline.element.node.id = this.flow.id;
        /** @type {?} */
        var lastLineIndex = polyline.getLinesCount() - 1;
        /** @type {?} */
        var line = polyline.getLine(lastLineIndex);
        return line;
    };
    /**
     * @param {?} line
     * @return {?}
     */
    RaphaelFlowArrowDirective.prototype.drawArrow = /**
     * @param {?} line
     * @return {?}
     */
    function (line) {
        /** @type {?} */
        var doubleArrowWidth = 2 * this.ARROW_WIDTH;
        /** @type {?} */
        var width = this.ARROW_WIDTH / 2 + .5;
        /** @type {?} */
        var arrowHead = this.paper.path('M0 0L-' + width + '-' + doubleArrowWidth + 'L' + width + ' -' + doubleArrowWidth + 'z');
        arrowHead.transform('t' + line.x2 + ',' + line.y2);
        /** @type {?} */
        var angle = Raphael.deg(line.angle - Math.PI / 2);
        arrowHead.transform('...r' + angle + ' 0 0');
        arrowHead.attr('fill', '#585858');
        arrowHead.attr('stroke-width', this.SEQUENCE_FLOW_STROKE);
        arrowHead.attr('stroke', '#585858');
    };
    RaphaelFlowArrowDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-flow-arrow, raphael-flow-arrow' },] }
    ];
    /** @nocollapse */
    RaphaelFlowArrowDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelFlowArrowDirective.propDecorators = {
        paper: [{ type: Input }],
        flow: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelFlowArrowDirective;
}(RaphaelBase));
export { RaphaelFlowArrowDirective };
if (false) {
    /** @type {?} */
    RaphaelFlowArrowDirective.prototype.paper;
    /** @type {?} */
    RaphaelFlowArrowDirective.prototype.flow;
    /** @type {?} */
    RaphaelFlowArrowDirective.prototype.error;
    /** @type {?} */
    RaphaelFlowArrowDirective.prototype.ARROW_WIDTH;
    /** @type {?} */
    RaphaelFlowArrowDirective.prototype.SEQUENCE_FLOW_STROKE;
    /** @type {?} */
    RaphaelFlowArrowDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1mbG93LWFycm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLWZsb3ctYXJyb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFPbkQ7SUFDK0MscURBQVc7SUFhdEQsbUNBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBRDFDLFlBRUksa0JBQU0sVUFBVSxFQUFFLGNBQWMsQ0FBQyxTQUNwQztRQUhrQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUx6QyxXQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzQixpQkFBVyxHQUFHLENBQUMsQ0FBQztRQUNoQiwwQkFBb0IsR0FBRyxHQUFHLENBQUM7O0lBSzNCLENBQUM7Ozs7SUFFRCw0Q0FBUTs7O0lBQVI7UUFFSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVNLHdDQUFJOzs7O0lBQVgsVUFBWSxJQUFTOztZQUNYLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBRU0sNENBQVE7Ozs7SUFBZixVQUFnQixJQUFTOztZQUNmLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0YsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFDLENBQUMsQ0FBQztRQUNuRSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO1FBRTdDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQzs7WUFFbEMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDOztZQUM1QyxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFTSw2Q0FBUzs7OztJQUFoQixVQUFpQixJQUFTOztZQUNoQixnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVc7O1lBQ3ZDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxFQUFFOztZQUNqQyxTQUFTLEdBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO1FBRS9ILFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs7WUFDN0MsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFN0MsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbEMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDMUQsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFeEMsQ0FBQzs7Z0JBeERKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSw0Q0FBNEMsRUFBQzs7OztnQkFWL0MsVUFBVTtnQkFHckIsY0FBYzs7O3dCQVNsQixLQUFLO3VCQUdMLEtBQUs7d0JBR0wsTUFBTTs7SUFpRFgsZ0NBQUM7Q0FBQSxBQXpERCxDQUMrQyxXQUFXLEdBd0R6RDtTQXhEWSx5QkFBeUI7OztJQUNsQywwQ0FDVzs7SUFFWCx5Q0FDVTs7SUFFViwwQ0FDMkI7O0lBRTNCLGdEQUFnQjs7SUFDaEIseURBQTJCOztJQUVmLCtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvbHlsaW5lIH0gZnJvbSAnLi9wb2x5bGluZSc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG5kZWNsYXJlIGxldCBSYXBoYWVsOiBhbnk7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLWZsb3ctYXJyb3csIHJhcGhhZWwtZmxvdy1hcnJvdyd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxGbG93QXJyb3dEaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmbG93OiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEFSUk9XX1dJRFRIID0gNDtcbiAgICBTRVFVRU5DRV9GTE9XX1NUUk9LRSA9IDEuNTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMuZmxvdyk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoZmxvdzogYW55KSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmRyYXdMaW5lKGZsb3cpO1xuICAgICAgICB0aGlzLmRyYXdBcnJvdyhsaW5lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd0xpbmUoZmxvdzogYW55KSB7XG4gICAgICAgIGNvbnN0IHBvbHlsaW5lID0gbmV3IFBvbHlsaW5lKGZsb3cuaWQsIGZsb3cud2F5cG9pbnRzLCB0aGlzLlNFUVVFTkNFX0ZMT1dfU1RST0tFLCB0aGlzLnBhcGVyKTtcbiAgICAgICAgcG9seWxpbmUuZWxlbWVudCA9IHRoaXMucGFwZXIucGF0aChwb2x5bGluZS5wYXRoKTtcbiAgICAgICAgcG9seWxpbmUuZWxlbWVudC5hdHRyKHsnc3Ryb2tlLXdpZHRoJzogdGhpcy5TRVFVRU5DRV9GTE9XX1NUUk9LRX0pO1xuICAgICAgICBwb2x5bGluZS5lbGVtZW50LmF0dHIoeydzdHJva2UnOiAnIzU4NTg1OCd9KTtcblxuICAgICAgICBwb2x5bGluZS5lbGVtZW50Lm5vZGUuaWQgPSB0aGlzLmZsb3cuaWQ7XG5cbiAgICAgICAgY29uc3QgbGFzdExpbmVJbmRleCA9IHBvbHlsaW5lLmdldExpbmVzQ291bnQoKSAtIDE7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBwb2x5bGluZS5nZXRMaW5lKGxhc3RMaW5lSW5kZXgpO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd0Fycm93KGxpbmU6IGFueSkge1xuICAgICAgICBjb25zdCBkb3VibGVBcnJvd1dpZHRoID0gMiAqIHRoaXMuQVJST1dfV0lEVEg7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5BUlJPV19XSURUSCAvIDIgKyAuNTtcbiAgICAgICAgY29uc3QgYXJyb3dIZWFkOiBhbnkgPSB0aGlzLnBhcGVyLnBhdGgoJ00wIDBMLScgKyB3aWR0aCArICctJyArIGRvdWJsZUFycm93V2lkdGggKyAnTCcgKyB3aWR0aCArICcgLScgKyBkb3VibGVBcnJvd1dpZHRoICsgJ3onKTtcblxuICAgICAgICBhcnJvd0hlYWQudHJhbnNmb3JtKCd0JyArIGxpbmUueDIgKyAnLCcgKyBsaW5lLnkyKTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBSYXBoYWVsLmRlZyhsaW5lLmFuZ2xlIC0gTWF0aC5QSSAvIDIpO1xuICAgICAgICBhcnJvd0hlYWQudHJhbnNmb3JtKCcuLi5yJyArIGFuZ2xlICsgJyAwIDAnKTtcblxuICAgICAgICBhcnJvd0hlYWQuYXR0cignZmlsbCcsICcjNTg1ODU4Jyk7XG5cbiAgICAgICAgYXJyb3dIZWFkLmF0dHIoJ3N0cm9rZS13aWR0aCcsIHRoaXMuU0VRVUVOQ0VfRkxPV19TVFJPS0UpO1xuICAgICAgICBhcnJvd0hlYWQuYXR0cignc3Ryb2tlJywgJyM1ODU4NTgnKTtcblxuICAgIH1cbn1cbiJdfQ==