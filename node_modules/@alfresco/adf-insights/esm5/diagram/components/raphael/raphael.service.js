/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
var RaphaelService = /** @class */ (function () {
    function RaphaelService() {
        this.width = 300;
        this.height = 400;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    RaphaelService.prototype.getInstance = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (!this.paper) {
            this.ctx = element.nativeElement;
            this.refresh();
        }
        return this.paper;
    };
    /**
     * @private
     * @return {?}
     */
    RaphaelService.prototype.refresh = /**
     * @private
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
        this.paper = this.getPaperBuilder(this.ctx);
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    RaphaelService.prototype.getPaperBuilder = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        if (typeof Raphael === 'undefined') {
            throw new Error('insights configuration issue: Embedding Chart.js lib is mandatory');
        }
        /** @type {?} */
        var paper = new Raphael(ctx, this.width, this.height);
        return paper;
    };
    /**
     * @return {?}
     */
    RaphaelService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.paper) {
            this.paper.clear();
            this.paper = void 0;
        }
    };
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    RaphaelService.prototype.setting = /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (width, height) {
        this.width = width;
        this.height = height;
    };
    /**
     * @return {?}
     */
    RaphaelService.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
    };
    RaphaelService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RaphaelService.ctorParameters = function () { return []; };
    return RaphaelService;
}());
export { RaphaelService };
if (false) {
    /** @type {?} */
    RaphaelService.prototype.paper;
    /** @type {?} */
    RaphaelService.prototype.width;
    /** @type {?} */
    RaphaelService.prototype.height;
    /**
     * @type {?}
     * @private
     */
    RaphaelService.prototype.ctx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL3JhcGhhZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBSXZEO0lBUUk7UUFKQSxVQUFLLEdBQVcsR0FBRyxDQUFDO1FBQ3BCLFdBQU0sR0FBVyxHQUFHLENBQUM7SUFJckIsQ0FBQzs7Ozs7SUFFTSxvQ0FBVzs7OztJQUFsQixVQUFtQixPQUFZO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2IsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNsQjtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDOzs7OztJQUVPLGdDQUFPOzs7O0lBQWY7UUFDSSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUVNLHdDQUFlOzs7O0lBQXRCLFVBQXVCLEdBQVE7UUFDM0IsSUFBSSxPQUFPLE9BQU8sS0FBSyxXQUFXLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ3hGOztZQUNLLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFTSxvQ0FBVzs7O0lBQWxCO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQzs7Ozs7O0lBRU0sZ0NBQU87Ozs7O0lBQWQsVUFBZSxLQUFhLEVBQUUsTUFBYztRQUN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDOzs7O0lBRU0sOEJBQUs7OztJQUFaO1FBQ0ksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7O2dCQTlDSixVQUFVOzs7O0lBK0NYLHFCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0E5Q1ksY0FBYzs7O0lBRXZCLCtCQUFXOztJQUNYLCtCQUFvQjs7SUFDcEIsZ0NBQXFCOzs7OztJQUNyQiw2QkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlICwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmRlY2xhcmUgbGV0IFJhcGhhZWw6IGFueTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICAgIHBhcGVyOiBhbnk7XG4gICAgd2lkdGg6IG51bWJlciA9IDMwMDtcbiAgICBoZWlnaHQ6IG51bWJlciA9IDQwMDtcbiAgICBwcml2YXRlIGN0eDogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEluc3RhbmNlKGVsZW1lbnQ6IGFueSk6IGFueSB7XG4gICAgICAgIGlmICghdGhpcy5wYXBlcikge1xuICAgICAgICAgICAgdGhpcy5jdHggPSBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXBlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZnJlc2goKTogYW55IHtcbiAgICAgICAgdGhpcy5uZ09uRGVzdHJveSgpO1xuICAgICAgICB0aGlzLnBhcGVyID0gdGhpcy5nZXRQYXBlckJ1aWxkZXIodGhpcy5jdHgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQYXBlckJ1aWxkZXIoY3R4OiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAodHlwZW9mIFJhcGhhZWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luc2lnaHRzIGNvbmZpZ3VyYXRpb24gaXNzdWU6IEVtYmVkZGluZyBDaGFydC5qcyBsaWIgaXMgbWFuZGF0b3J5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFwZXIgPSBuZXcgUmFwaGFlbChjdHgsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIHBhcGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiBhbnkge1xuICAgICAgICBpZiAodGhpcy5wYXBlcikge1xuICAgICAgICAgICAgdGhpcy5wYXBlci5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5wYXBlciA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXR0aW5nKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCk6IGFueSB7XG4gICAgICAgIHRoaXMubmdPbkRlc3Ryb3koKTtcbiAgICB9XG59XG4iXX0=