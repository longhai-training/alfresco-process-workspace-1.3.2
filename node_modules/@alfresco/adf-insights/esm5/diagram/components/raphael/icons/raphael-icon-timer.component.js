/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelIconTimerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelIconTimerDirective, _super);
    function RaphaelIconTimerDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelIconTimerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.position);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    RaphaelIconTimerDirective.prototype.draw = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var path1 = this.paper.path("M 10 0 C 4.4771525 0 0 4.4771525 0 10 C 0 15.522847 4.4771525 20 10 20 C 15.522847 20 20 15.522847 20\n        10 C 20 4.4771525 15.522847 1.1842379e-15 10 0 z M 9.09375 1.03125 C 9.2292164 1.0174926 9.362825 1.0389311 9.5 1.03125 L 9.5 3.5\n        L 10.5 3.5 L 10.5 1.03125 C 15.063526 1.2867831 18.713217 4.9364738 18.96875 9.5 L 16.5 9.5 L 16.5 10.5 L 18.96875 10.5 C 18.713217\n        15.063526 15.063526 18.713217 10.5 18.96875 L 10.5 16.5 L 9.5 16.5 L 9.5 18.96875 C 4.9364738 18.713217 1.2867831 15.063526 1.03125\n        10.5 L 3.5 10.5 L 3.5 9.5 L 1.03125 9.5 C 1.279102 5.0736488 4.7225326 1.4751713 9.09375 1.03125 z M 9.5 5 L 9.5 8.0625 C 8.6373007\n        8.2844627 8 9.0680195 8 10 C 8 11.104569 8.8954305 12 10 12 C 10.931981 12 11.715537 11.362699 11.9375 10.5 L 14 10.5 L 14 9.5\n        L 11.9375 9.5 C 11.756642 8.7970599 11.20294 8.2433585 10.5 8.0625 L 10.5 5 L 9.5 5 z").attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    };
    RaphaelIconTimerDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-icon-timer, raphael-icon-timer' },] }
    ];
    /** @nocollapse */
    RaphaelIconTimerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelIconTimerDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }]
    };
    return RaphaelIconTimerDirective;
}(RaphaelBase));
export { RaphaelIconTimerDirective };
if (false) {
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.position;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.text;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.error;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXRpbWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9pY29ucy9yYXBoYWVsLWljb24tdGltZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUt0RDtJQUMrQyxxREFBVztJQXlCdEQsbUNBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBRDFDLFlBRUksa0JBQU0sVUFBVSxFQUFFLGNBQWMsQ0FBQyxTQUNwQztRQUhrQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQWR6QyxXQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFpQjNCLENBQUM7Ozs7SUFFRCw0Q0FBUTs7O0lBQVI7UUFFSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVNLHdDQUFJOzs7O0lBQVgsVUFBWSxRQUFlOztZQUNqQixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZzRCQU13RCxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3pGLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDMUIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7O2dCQWhESixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsNENBQTRDLEVBQUM7Ozs7Z0JBUi9DLFVBQVU7Z0JBR3JCLGNBQWM7Ozt3QkFPbEIsS0FBSzsyQkFHTCxLQUFLO3VCQUdMLEtBQUs7d0JBR0wsTUFBTTs4QkFHTixLQUFLOzZCQUdMLEtBQUs7eUJBR0wsS0FBSzs4QkFHTCxLQUFLOztJQTBCVixnQ0FBQztDQUFBLEFBakRELENBQytDLFdBQVcsR0FnRHpEO1NBaERZLHlCQUF5Qjs7O0lBQ2xDLDBDQUNXOztJQUVYLDZDQUNnQjs7SUFFaEIseUNBQ2E7O0lBRWIsMENBQzJCOztJQUUzQixnREFDb0I7O0lBRXBCLCtDQUNnQjs7SUFFaEIsMkNBQ1k7O0lBRVosZ0RBQ2lCOztJQUVMLCtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi8uLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuLy4uL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vLi4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYWRmLXJhcGhhZWwtaWNvbi10aW1lciwgcmFwaGFlbC1pY29uLXRpbWVyJ30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbEljb25UaW1lckRpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHBvc2l0aW9uOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZVdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcnM6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxPcGFjaXR5OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhwb3NpdGlvbjogUG9pbnQpIHtcbiAgICAgICAgY29uc3QgcGF0aDEgPSB0aGlzLnBhcGVyLnBhdGgoYE0gMTAgMCBDIDQuNDc3MTUyNSAwIDAgNC40NzcxNTI1IDAgMTAgQyAwIDE1LjUyMjg0NyA0LjQ3NzE1MjUgMjAgMTAgMjAgQyAxNS41MjI4NDcgMjAgMjAgMTUuNTIyODQ3IDIwXG4gICAgICAgIDEwIEMgMjAgNC40NzcxNTI1IDE1LjUyMjg0NyAxLjE4NDIzNzllLTE1IDEwIDAgeiBNIDkuMDkzNzUgMS4wMzEyNSBDIDkuMjI5MjE2NCAxLjAxNzQ5MjYgOS4zNjI4MjUgMS4wMzg5MzExIDkuNSAxLjAzMTI1IEwgOS41IDMuNVxuICAgICAgICBMIDEwLjUgMy41IEwgMTAuNSAxLjAzMTI1IEMgMTUuMDYzNTI2IDEuMjg2NzgzMSAxOC43MTMyMTcgNC45MzY0NzM4IDE4Ljk2ODc1IDkuNSBMIDE2LjUgOS41IEwgMTYuNSAxMC41IEwgMTguOTY4NzUgMTAuNSBDIDE4LjcxMzIxN1xuICAgICAgICAxNS4wNjM1MjYgMTUuMDYzNTI2IDE4LjcxMzIxNyAxMC41IDE4Ljk2ODc1IEwgMTAuNSAxNi41IEwgOS41IDE2LjUgTCA5LjUgMTguOTY4NzUgQyA0LjkzNjQ3MzggMTguNzEzMjE3IDEuMjg2NzgzMSAxNS4wNjM1MjYgMS4wMzEyNVxuICAgICAgICAxMC41IEwgMy41IDEwLjUgTCAzLjUgOS41IEwgMS4wMzEyNSA5LjUgQyAxLjI3OTEwMiA1LjA3MzY0ODggNC43MjI1MzI2IDEuNDc1MTcxMyA5LjA5Mzc1IDEuMDMxMjUgeiBNIDkuNSA1IEwgOS41IDguMDYyNSBDIDguNjM3MzAwN1xuICAgICAgICA4LjI4NDQ2MjcgOCA5LjA2ODAxOTUgOCAxMCBDIDggMTEuMTA0NTY5IDguODk1NDMwNSAxMiAxMCAxMiBDIDEwLjkzMTk4MSAxMiAxMS43MTU1MzcgMTEuMzYyNjk5IDExLjkzNzUgMTAuNSBMIDE0IDEwLjUgTCAxNCA5LjVcbiAgICAgICAgTCAxMS45Mzc1IDkuNSBDIDExLjc1NjY0MiA4Ljc5NzA1OTkgMTEuMjAyOTQgOC4yNDMzNTg1IDEwLjUgOC4wNjI1IEwgMTAuNSA1IEwgOS41IDUgemApLmF0dHIoe1xuICAgICAgICAgICAgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlLFxuICAgICAgICAgICAgJ2ZpbGwnOiB0aGlzLmZpbGxDb2xvcnNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXRoMS50cmFuc2Zvcm0oJ1QnICsgcG9zaXRpb24ueCArICcsJyArIHBvc2l0aW9uLnkpO1xuICAgIH1cbn1cbiJdfQ==