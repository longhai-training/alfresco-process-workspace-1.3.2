/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelIconSignalDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelIconSignalDirective, _super);
    function RaphaelIconSignalDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelIconSignalDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.position);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    RaphaelIconSignalDirective.prototype.draw = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var path1 = this.paper.path("M 8.7124971,21.247342 L 23.333334,21.247342 L 16.022915,8.5759512 L 8.7124971,21.247342 z").attr({
            'opacity': this.fillOpacity,
            'stroke': this.stroke,
            'strokeWidth': this.strokeWidth,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    };
    RaphaelIconSignalDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-icon-signal, raphael-icon-signal' },] }
    ];
    /** @nocollapse */
    RaphaelIconSignalDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelIconSignalDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }]
    };
    return RaphaelIconSignalDirective;
}(RaphaelBase));
export { RaphaelIconSignalDirective };
if (false) {
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.position;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.text;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.error;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconSignalDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXNpZ25hbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvaWNvbnMvcmFwaGFlbC1pY29uLXNpZ25hbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBS3REO0lBQ2dELHNEQUFXO0lBeUJ2RCxvQ0FBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBZHpDLFdBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQWlCM0IsQ0FBQzs7OztJQUVELDZDQUFROzs7SUFBUjtRQUVJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRU0seUNBQUk7Ozs7SUFBWCxVQUFZLFFBQWU7O1lBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQywyRkFBMkYsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM1SCxTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDM0IsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVztZQUMvQixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDMUIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7O2dCQTVDSixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsOENBQThDLEVBQUM7Ozs7Z0JBUmpELFVBQVU7Z0JBR3JCLGNBQWM7Ozt3QkFPbEIsS0FBSzsyQkFHTCxLQUFLO3VCQUdMLEtBQUs7d0JBR0wsTUFBTTs4QkFHTixLQUFLOzZCQUdMLEtBQUs7eUJBR0wsS0FBSzs4QkFHTCxLQUFLOztJQXNCVixpQ0FBQztDQUFBLEFBN0NELENBQ2dELFdBQVcsR0E0QzFEO1NBNUNZLDBCQUEwQjs7O0lBQ25DLDJDQUNXOztJQUVYLDhDQUNnQjs7SUFFaEIsMENBQ2E7O0lBRWIsMkNBQzJCOztJQUUzQixpREFDb0I7O0lBRXBCLGdEQUNnQjs7SUFFaEIsNENBQ1k7O0lBRVosaURBQ2lCOztJQUVMLGdEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi8uLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuLy4uL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vLi4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYWRmLXJhcGhhZWwtaWNvbi1zaWduYWwsIHJhcGhhZWwtaWNvbi1zaWduYWwnfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsSWNvblNpZ25hbERpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHBvc2l0aW9uOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZVdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcnM6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxPcGFjaXR5OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhwb3NpdGlvbjogUG9pbnQpIHtcbiAgICAgICAgY29uc3QgcGF0aDEgPSB0aGlzLnBhcGVyLnBhdGgoYE0gOC43MTI0OTcxLDIxLjI0NzM0MiBMIDIzLjMzMzMzNCwyMS4yNDczNDIgTCAxNi4wMjI5MTUsOC41NzU5NTEyIEwgOC43MTI0OTcxLDIxLjI0NzM0MiB6YCkuYXR0cih7XG4gICAgICAgICAgICAnb3BhY2l0eSc6IHRoaXMuZmlsbE9wYWNpdHksXG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnc3Ryb2tlV2lkdGgnOiB0aGlzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgJ2ZpbGwnOiB0aGlzLmZpbGxDb2xvcnNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXRoMS50cmFuc2Zvcm0oJ1QnICsgcG9zaXRpb24ueCArICcsJyArIHBvc2l0aW9uLnkpO1xuICAgIH1cbn1cbiJdfQ==