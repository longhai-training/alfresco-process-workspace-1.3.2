/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelIconBusinessRuleDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelIconBusinessRuleDirective, _super);
    function RaphaelIconBusinessRuleDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelIconBusinessRuleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.position);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    RaphaelIconBusinessRuleDirective.prototype.draw = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var path1 = this.paper.path("m 1,2 0,14 16,0 0,-14 z m 1.45458,5.6000386 2.90906,0 0,2.7999224 -2.90906,0 z m 4.36364,0 8.72718,0\n         0,2.7999224 -8.72718,0 z m -4.36364,4.1998844 2.90906,0 0,2.800116 -2.90906,0 z m\n         4.36364,0 8.72718,0 0,2.800116 -8.72718,0 z").attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    };
    RaphaelIconBusinessRuleDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-icon-business-rule, raphael-icon-business-rule' },] }
    ];
    /** @nocollapse */
    RaphaelIconBusinessRuleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelIconBusinessRuleDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }]
    };
    return RaphaelIconBusinessRuleDirective;
}(RaphaelBase));
export { RaphaelIconBusinessRuleDirective };
if (false) {
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.position;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.text;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.error;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLWJ1c2luZXNzLXJ1bGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL2ljb25zL3JhcGhhZWwtaWNvbi1idXNpbmVzcy1ydWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFLdEQ7SUFDc0QsNERBQVc7SUF5QjdELDBDQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUQxQyxZQUVJLGtCQUFNLFVBQVUsRUFBRSxjQUFjLENBQUMsU0FDcEM7UUFIa0IsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFkekMsV0FBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7O0lBaUIzQixDQUFDOzs7O0lBRUQsbURBQVE7OztJQUFSO1FBRUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFTSwrQ0FBSTs7OztJQUFYLFVBQVksUUFBZTs7WUFDakIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHdQQUVlLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDaEQsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtTQUMxQixDQUFDO1FBQ0YsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Z0JBNUNKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSw0REFBNEQsRUFBQzs7OztnQkFSL0QsVUFBVTtnQkFHckIsY0FBYzs7O3dCQU9sQixLQUFLOzJCQUdMLEtBQUs7dUJBR0wsS0FBSzt3QkFHTCxNQUFNOzhCQUdOLEtBQUs7NkJBR0wsS0FBSzt5QkFHTCxLQUFLOzhCQUdMLEtBQUs7O0lBc0JWLHVDQUFDO0NBQUEsQUE3Q0QsQ0FDc0QsV0FBVyxHQTRDaEU7U0E1Q1ksZ0NBQWdDOzs7SUFDekMsaURBQ1c7O0lBRVgsb0RBQ2dCOztJQUVoQixnREFDYTs7SUFFYixpREFDMkI7O0lBRTNCLHVEQUNvQjs7SUFFcEIsc0RBQ2dCOztJQUVoQixrREFDWTs7SUFFWix1REFDaUI7O0lBRUwsc0RBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLy4uL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vLi4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1pY29uLWJ1c2luZXNzLXJ1bGUsIHJhcGhhZWwtaWNvbi1idXNpbmVzcy1ydWxlJ30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbEljb25CdXNpbmVzc1J1bGVEaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcocG9zaXRpb246IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhdGgxID0gdGhpcy5wYXBlci5wYXRoKGBtIDEsMiAwLDE0IDE2LDAgMCwtMTQgeiBtIDEuNDU0NTgsNS42MDAwMzg2IDIuOTA5MDYsMCAwLDIuNzk5OTIyNCAtMi45MDkwNiwwIHogbSA0LjM2MzY0LDAgOC43MjcxOCwwXG4gICAgICAgICAwLDIuNzk5OTIyNCAtOC43MjcxOCwwIHogbSAtNC4zNjM2NCw0LjE5OTg4NDQgMi45MDkwNiwwIDAsMi44MDAxMTYgLTIuOTA5MDYsMCB6IG1cbiAgICAgICAgIDQuMzYzNjQsMCA4LjcyNzE4LDAgMCwyLjgwMDExNiAtOC43MjcxOCwwIHpgKS5hdHRyKHtcbiAgICAgICAgICAgICdzdHJva2UnOiB0aGlzLnN0cm9rZSxcbiAgICAgICAgICAgICdmaWxsJzogdGhpcy5maWxsQ29sb3JzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGF0aDEudHJhbnNmb3JtKCdUJyArIHBvc2l0aW9uLnggKyAnLCcgKyBwb3NpdGlvbi55KTtcbiAgICB9XG59XG4iXX0=