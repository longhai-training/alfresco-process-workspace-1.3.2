/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelIconRestCallDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelIconRestCallDirective, _super);
    function RaphaelIconRestCallDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelIconRestCallDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.position);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    RaphaelIconRestCallDirective.prototype.draw = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var path1 = this.paper.path("m 16.704699,5.9229055 q 0.358098,0 0.608767,0.2506681 0.250669,0.250668 0.250669,0.6087677 0,0.3580997\n         -0.250669,0.6087677 -0.250669,0.2506679 -0.608767,0.2506679 -0.358098,0 -0.608767,-0.2506679 -0.250669,-0.250668\n         -0.250669,-0.6087677 0,-0.3580997 0.250669,-0.6087677 0.250669,-0.2506681 0.608767,-0.2506681 z m 2.578308,-2.0053502 q\n         -2.229162,0 -3.854034,0.6759125 -1.624871,0.6759067 -3.227361,2.2694472 -0.716197,0.725146 -1.575633,1.7457293 L\n         7.2329969,8.7876913 Q 7.0897576,8.8055849 7.000233,8.9309334 L 4.9948821,12.368677 q -0.035811,0.06267 -0.035811,0.143242\n         0,0.107426 0.080572,0.205905 l 0.5729577,0.572957 q 0.125334,0.116384 0.2864786,0.07162 l 2.4708789,-0.760963 2.5156417,2.515645\n         -0.76096,2.470876 q -0.009,0.02687 -0.009,0.08057 0,0.125338 0.08058,0.205905 l 0.572957,0.572958 q 0.170096,0.152194\n         0.349146,0.04476 l 3.437744,-2.005351 q 0.125335,-0.08953 0.143239,-0.232763 l 0.17905,-3.392986 q 1.02058,-0.859435\n         1.745729,-1.575629 1.67411,-1.6830612 2.309735,-3.2049805 0.635625,-1.5219191 0.635625,-3.8585111 0,-0.1253369 -0.08505,-0.2148575\n         -0.08505,-0.089526 -0.201431,-0.089526 z").attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    };
    RaphaelIconRestCallDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-icon-rest-call, raphael-icon-rest-call' },] }
    ];
    /** @nocollapse */
    RaphaelIconRestCallDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelIconRestCallDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }]
    };
    return RaphaelIconRestCallDirective;
}(RaphaelBase));
export { RaphaelIconRestCallDirective };
if (false) {
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.position;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.text;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.error;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXJlc3QtY2FsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvaWNvbnMvcmFwaGFlbC1pY29uLXJlc3QtY2FsbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBS3REO0lBQ2tELHdEQUFXO0lBeUJ6RCxzQ0FBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBZHpDLFdBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQWlCM0IsQ0FBQzs7OztJQUVELCtDQUFROzs7SUFBUjtRQUVJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRU0sMkNBQUk7Ozs7SUFBWCxVQUFZLFFBQWU7O1lBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyw4cUNBU1ksQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM3QyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOztnQkFuREosU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLG9EQUFvRCxFQUFDOzs7O2dCQVJ2RCxVQUFVO2dCQUdyQixjQUFjOzs7d0JBT2xCLEtBQUs7MkJBR0wsS0FBSzt1QkFHTCxLQUFLO3dCQUdMLE1BQU07OEJBR04sS0FBSzs2QkFHTCxLQUFLO3lCQUdMLEtBQUs7OEJBR0wsS0FBSzs7SUE2QlYsbUNBQUM7Q0FBQSxBQXBERCxDQUNrRCxXQUFXLEdBbUQ1RDtTQW5EWSw0QkFBNEI7OztJQUNyQyw2Q0FDVzs7SUFFWCxnREFDZ0I7O0lBRWhCLDRDQUNhOztJQUViLDZDQUMyQjs7SUFFM0IsbURBQ29COztJQUVwQixrREFDZ0I7O0lBRWhCLDhDQUNZOztJQUVaLG1EQUNpQjs7SUFFTCxrREFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vLi4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuLy4uL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLWljb24tcmVzdC1jYWxsLCByYXBoYWVsLWljb24tcmVzdC1jYWxsJ30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbEljb25SZXN0Q2FsbERpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHBvc2l0aW9uOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZVdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcnM6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxPcGFjaXR5OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhwb3NpdGlvbjogUG9pbnQpIHtcbiAgICAgICAgY29uc3QgcGF0aDEgPSB0aGlzLnBhcGVyLnBhdGgoYG0gMTYuNzA0Njk5LDUuOTIyOTA1NSBxIDAuMzU4MDk4LDAgMC42MDg3NjcsMC4yNTA2NjgxIDAuMjUwNjY5LDAuMjUwNjY4IDAuMjUwNjY5LDAuNjA4NzY3NyAwLDAuMzU4MDk5N1xuICAgICAgICAgLTAuMjUwNjY5LDAuNjA4NzY3NyAtMC4yNTA2NjksMC4yNTA2Njc5IC0wLjYwODc2NywwLjI1MDY2NzkgLTAuMzU4MDk4LDAgLTAuNjA4NzY3LC0wLjI1MDY2NzkgLTAuMjUwNjY5LC0wLjI1MDY2OFxuICAgICAgICAgLTAuMjUwNjY5LC0wLjYwODc2NzcgMCwtMC4zNTgwOTk3IDAuMjUwNjY5LC0wLjYwODc2NzcgMC4yNTA2NjksLTAuMjUwNjY4MSAwLjYwODc2NywtMC4yNTA2NjgxIHogbSAyLjU3ODMwOCwtMi4wMDUzNTAyIHFcbiAgICAgICAgIC0yLjIyOTE2MiwwIC0zLjg1NDAzNCwwLjY3NTkxMjUgLTEuNjI0ODcxLDAuNjc1OTA2NyAtMy4yMjczNjEsMi4yNjk0NDcyIC0wLjcxNjE5NywwLjcyNTE0NiAtMS41NzU2MzMsMS43NDU3MjkzIExcbiAgICAgICAgIDcuMjMyOTk2OSw4Ljc4NzY5MTMgUSA3LjA4OTc1NzYsOC44MDU1ODQ5IDcuMDAwMjMzLDguOTMwOTMzNCBMIDQuOTk0ODgyMSwxMi4zNjg2NzcgcSAtMC4wMzU4MTEsMC4wNjI2NyAtMC4wMzU4MTEsMC4xNDMyNDJcbiAgICAgICAgIDAsMC4xMDc0MjYgMC4wODA1NzIsMC4yMDU5MDUgbCAwLjU3Mjk1NzcsMC41NzI5NTcgcSAwLjEyNTMzNCwwLjExNjM4NCAwLjI4NjQ3ODYsMC4wNzE2MiBsIDIuNDcwODc4OSwtMC43NjA5NjMgMi41MTU2NDE3LDIuNTE1NjQ1XG4gICAgICAgICAtMC43NjA5NiwyLjQ3MDg3NiBxIC0wLjAwOSwwLjAyNjg3IC0wLjAwOSwwLjA4MDU3IDAsMC4xMjUzMzggMC4wODA1OCwwLjIwNTkwNSBsIDAuNTcyOTU3LDAuNTcyOTU4IHEgMC4xNzAwOTYsMC4xNTIxOTRcbiAgICAgICAgIDAuMzQ5MTQ2LDAuMDQ0NzYgbCAzLjQzNzc0NCwtMi4wMDUzNTEgcSAwLjEyNTMzNSwtMC4wODk1MyAwLjE0MzIzOSwtMC4yMzI3NjMgbCAwLjE3OTA1LC0zLjM5Mjk4NiBxIDEuMDIwNTgsLTAuODU5NDM1XG4gICAgICAgICAxLjc0NTcyOSwtMS41NzU2MjkgMS42NzQxMSwtMS42ODMwNjEyIDIuMzA5NzM1LC0zLjIwNDk4MDUgMC42MzU2MjUsLTEuNTIxOTE5MSAwLjYzNTYyNSwtMy44NTg1MTExIDAsLTAuMTI1MzM2OSAtMC4wODUwNSwtMC4yMTQ4NTc1XG4gICAgICAgICAtMC4wODUwNSwtMC4wODk1MjYgLTAuMjAxNDMxLC0wLjA4OTUyNiB6YCkuYXR0cih7XG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGgxLnRyYW5zZm9ybSgnVCcgKyBwb3NpdGlvbi54ICsgJywnICsgcG9zaXRpb24ueSk7XG4gICAgfVxufVxuIl19