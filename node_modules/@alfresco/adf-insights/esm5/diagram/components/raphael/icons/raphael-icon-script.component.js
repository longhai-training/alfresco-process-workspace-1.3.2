/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelIconScriptDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelIconScriptDirective, _super);
    function RaphaelIconScriptDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelIconScriptDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.position);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    RaphaelIconScriptDirective.prototype.draw = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var path1 = this.paper.path("m 5,2 0,0.094 c 0.23706,0.064 0.53189,0.1645 0.8125,0.375 0.5582,0.4186 1.05109,1.228 1.15625,2.5312\n        l 8.03125,0 1,0 1,0 c 0,-3 -2,-3 -2,-3 l -10,0 z M 4,3 4,13 2,13 c 0,3 2,3 2,3 l 9,0 c 0,0 2,0 2,-3 L 15,6 6,6 6,5.5 C 6,4.1111\n        5.5595,3.529 5.1875,3.25 4.8155,2.971 4.5,3 4.5,3 L 4,3 z").attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    };
    RaphaelIconScriptDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-icon-script, raphael-icon-script' },] }
    ];
    /** @nocollapse */
    RaphaelIconScriptDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelIconScriptDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }]
    };
    return RaphaelIconScriptDirective;
}(RaphaelBase));
export { RaphaelIconScriptDirective };
if (false) {
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.position;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.text;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.error;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconScriptDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXNjcmlwdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvaWNvbnMvcmFwaGFlbC1pY29uLXNjcmlwdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBS3REO0lBQ2dELHNEQUFXO0lBeUJ2RCxvQ0FBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBZHpDLFdBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztJQWlCM0IsQ0FBQzs7OztJQUVELDZDQUFROzs7SUFBUjtRQUVJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRU0seUNBQUk7Ozs7SUFBWCxVQUFZLFFBQWU7O1lBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrVEFFNEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM3RCxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOztnQkE1Q0osU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLDhDQUE4QyxFQUFDOzs7O2dCQVJqRCxVQUFVO2dCQUdyQixjQUFjOzs7d0JBT2xCLEtBQUs7MkJBR0wsS0FBSzt1QkFHTCxLQUFLO3dCQUdMLE1BQU07OEJBR04sS0FBSzs2QkFHTCxLQUFLO3lCQUdMLEtBQUs7OEJBR0wsS0FBSzs7SUFzQlYsaUNBQUM7Q0FBQSxBQTdDRCxDQUNnRCxXQUFXLEdBNEMxRDtTQTVDWSwwQkFBMEI7OztJQUNuQywyQ0FDVzs7SUFFWCw4Q0FDZ0I7O0lBRWhCLDBDQUNhOztJQUViLDJDQUMyQjs7SUFFM0IsaURBQ29COztJQUVwQixnREFDZ0I7O0lBRWhCLDRDQUNZOztJQUVaLGlEQUNpQjs7SUFFTCxnREFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vLi4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuLy4uL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLWljb24tc2NyaXB0LCByYXBoYWVsLWljb24tc2NyaXB0J30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbEljb25TY3JpcHREaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcocG9zaXRpb246IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhdGgxID0gdGhpcy5wYXBlci5wYXRoKGBtIDUsMiAwLDAuMDk0IGMgMC4yMzcwNiwwLjA2NCAwLjUzMTg5LDAuMTY0NSAwLjgxMjUsMC4zNzUgMC41NTgyLDAuNDE4NiAxLjA1MTA5LDEuMjI4IDEuMTU2MjUsMi41MzEyXG4gICAgICAgIGwgOC4wMzEyNSwwIDEsMCAxLDAgYyAwLC0zIC0yLC0zIC0yLC0zIGwgLTEwLDAgeiBNIDQsMyA0LDEzIDIsMTMgYyAwLDMgMiwzIDIsMyBsIDksMCBjIDAsMCAyLDAgMiwtMyBMIDE1LDYgNiw2IDYsNS41IEMgNiw0LjExMTFcbiAgICAgICAgNS41NTk1LDMuNTI5IDUuMTg3NSwzLjI1IDQuODE1NSwyLjk3MSA0LjUsMyA0LjUsMyBMIDQsMyB6YCkuYXR0cih7XG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGgxLnRyYW5zZm9ybSgnVCcgKyBwb3NpdGlvbi54ICsgJywnICsgcG9zaXRpb24ueSk7XG4gICAgfVxufVxuIl19