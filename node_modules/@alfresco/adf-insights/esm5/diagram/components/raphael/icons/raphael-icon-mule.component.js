/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelIconMuleDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelIconMuleDirective, _super);
    function RaphaelIconMuleDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelIconMuleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.draw(this.position);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    RaphaelIconMuleDirective.prototype.draw = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var path1 = this.paper.path("M 8,0 C 3.581722,0 0,3.5817 0,8 c 0,4.4183 3.581722,8 8,8 4.418278,0 8,-3.5817 8,-8 L 16,7.6562\n         C 15.813571,3.3775 12.282847,0 8,0 z M 5.1875,2.7812 8,7.3437 10.8125,2.7812 c 1.323522,0.4299 2.329453,1.5645 2.8125,2.8438\n         1.136151,2.8609 -0.380702,6.4569 -3.25,7.5937 -0.217837,-0.6102 -0.438416,-1.2022 -0.65625,-1.8125 0.701032,-0.2274\n         1.313373,-0.6949 1.71875,-1.3125 0.73624,-1.2317 0.939877,-2.6305 -0.03125,-4.3125 l -2.75,4.0625 -0.65625,0 -0.65625,0 -2.75,-4\n         C 3.5268433,7.6916 3.82626,8.862 4.5625,10.0937 4.967877,10.7113 5.580218,11.1788 6.28125,11.4062 6.063416,12.0165 5.842837,12.6085\n         5.625,13.2187 2.755702,12.0819 1.238849,8.4858 2.375,5.625 2.858047,4.3457 3.863978,3.2112 5.1875,2.7812 z").attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    };
    RaphaelIconMuleDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-icon-mule, raphael-icon-mule' },] }
    ];
    /** @nocollapse */
    RaphaelIconMuleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelIconMuleDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }]
    };
    return RaphaelIconMuleDirective;
}(RaphaelBase));
export { RaphaelIconMuleDirective };
if (false) {
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.position;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.text;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.error;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconMuleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLW11bGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL2ljb25zL3JhcGhhZWwtaWNvbi1tdWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFLdEQ7SUFDOEMsb0RBQVc7SUF5QnJELGtDQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUQxQyxZQUVJLGtCQUFNLFVBQVUsRUFBRSxjQUFjLENBQUMsU0FDcEM7UUFIa0IsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFkekMsV0FBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7O0lBaUIzQixDQUFDOzs7O0lBRUQsMkNBQVE7OztJQUFSO1FBRUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFTSx1Q0FBSTs7OztJQUFYLFVBQVksUUFBZTs7WUFDakIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG92QkFLOEUsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMvRyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOztnQkEvQ0osU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLDBDQUEwQyxFQUFDOzs7O2dCQVI3QyxVQUFVO2dCQUdyQixjQUFjOzs7d0JBT2xCLEtBQUs7MkJBR0wsS0FBSzt1QkFHTCxLQUFLO3dCQUdMLE1BQU07OEJBR04sS0FBSzs2QkFHTCxLQUFLO3lCQUdMLEtBQUs7OEJBR0wsS0FBSzs7SUF5QlYsK0JBQUM7Q0FBQSxBQWhERCxDQUM4QyxXQUFXLEdBK0N4RDtTQS9DWSx3QkFBd0I7OztJQUNqQyx5Q0FDVzs7SUFFWCw0Q0FDZ0I7O0lBRWhCLHdDQUNhOztJQUViLHlDQUMyQjs7SUFFM0IsK0NBQ29COztJQUVwQiw4Q0FDZ0I7O0lBRWhCLDBDQUNZOztJQUVaLCtDQUNpQjs7SUFFTCw4Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vLi4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuLy4uL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLWljb24tbXVsZSwgcmFwaGFlbC1pY29uLW11bGUnfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsSWNvbk11bGVEaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcocG9zaXRpb246IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhdGgxID0gdGhpcy5wYXBlci5wYXRoKGBNIDgsMCBDIDMuNTgxNzIyLDAgMCwzLjU4MTcgMCw4IGMgMCw0LjQxODMgMy41ODE3MjIsOCA4LDggNC40MTgyNzgsMCA4LC0zLjU4MTcgOCwtOCBMIDE2LDcuNjU2MlxuICAgICAgICAgQyAxNS44MTM1NzEsMy4zNzc1IDEyLjI4Mjg0NywwIDgsMCB6IE0gNS4xODc1LDIuNzgxMiA4LDcuMzQzNyAxMC44MTI1LDIuNzgxMiBjIDEuMzIzNTIyLDAuNDI5OSAyLjMyOTQ1MywxLjU2NDUgMi44MTI1LDIuODQzOFxuICAgICAgICAgMS4xMzYxNTEsMi44NjA5IC0wLjM4MDcwMiw2LjQ1NjkgLTMuMjUsNy41OTM3IC0wLjIxNzgzNywtMC42MTAyIC0wLjQzODQxNiwtMS4yMDIyIC0wLjY1NjI1LC0xLjgxMjUgMC43MDEwMzIsLTAuMjI3NFxuICAgICAgICAgMS4zMTMzNzMsLTAuNjk0OSAxLjcxODc1LC0xLjMxMjUgMC43MzYyNCwtMS4yMzE3IDAuOTM5ODc3LC0yLjYzMDUgLTAuMDMxMjUsLTQuMzEyNSBsIC0yLjc1LDQuMDYyNSAtMC42NTYyNSwwIC0wLjY1NjI1LDAgLTIuNzUsLTRcbiAgICAgICAgIEMgMy41MjY4NDMzLDcuNjkxNiAzLjgyNjI2LDguODYyIDQuNTYyNSwxMC4wOTM3IDQuOTY3ODc3LDEwLjcxMTMgNS41ODAyMTgsMTEuMTc4OCA2LjI4MTI1LDExLjQwNjIgNi4wNjM0MTYsMTIuMDE2NSA1Ljg0MjgzNywxMi42MDg1XG4gICAgICAgICA1LjYyNSwxMy4yMTg3IDIuNzU1NzAyLDEyLjA4MTkgMS4yMzg4NDksOC40ODU4IDIuMzc1LDUuNjI1IDIuODU4MDQ3LDQuMzQ1NyAzLjg2Mzk3OCwzLjIxMTIgNS4xODc1LDIuNzgxMiB6YCkuYXR0cih7XG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGgxLnRyYW5zZm9ybSgnVCcgKyBwb3NpdGlvbi54ICsgJywnICsgcG9zaXRpb24ueSk7XG4gICAgfVxufVxuIl19