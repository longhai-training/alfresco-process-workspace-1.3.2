/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelRectDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelRectDirective, _super);
    function RaphaelRectDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.radius = 0;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelRectDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = {
            'stroke-width': this.strokeWidth,
            'fill': this.fillColors,
            'stroke': this.stroke,
            'fill-opacity': this.fillOpacity
        };
        /** @type {?} */
        var elementDraw = this.draw(this.leftCorner, this.width, this.height, this.radius, opts);
        elementDraw.node.id = this.elementId;
    };
    /**
     * @param {?} leftCorner
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} opts
     * @return {?}
     */
    RaphaelRectDirective.prototype.draw = /**
     * @param {?} leftCorner
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} opts
     * @return {?}
     */
    function (leftCorner, width, height, radius, opts) {
        return this.paper.rect(leftCorner.x, leftCorner.y, width, height, radius).attr(opts);
    };
    RaphaelRectDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-rect, raphael-rect' },] }
    ];
    /** @nocollapse */
    RaphaelRectDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelRectDirective.propDecorators = {
        paper: [{ type: Input }],
        leftCorner: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        radius: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        strokeWidth: [{ type: Input }],
        fillOpacity: [{ type: Input }],
        elementId: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelRectDirective;
}(RaphaelBase));
export { RaphaelRectDirective };
if (false) {
    /** @type {?} */
    RaphaelRectDirective.prototype.paper;
    /** @type {?} */
    RaphaelRectDirective.prototype.leftCorner;
    /** @type {?} */
    RaphaelRectDirective.prototype.width;
    /** @type {?} */
    RaphaelRectDirective.prototype.height;
    /** @type {?} */
    RaphaelRectDirective.prototype.radius;
    /** @type {?} */
    RaphaelRectDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelRectDirective.prototype.stroke;
    /** @type {?} */
    RaphaelRectDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelRectDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelRectDirective.prototype.elementId;
    /** @type {?} */
    RaphaelRectDirective.prototype.error;
    /** @type {?} */
    RaphaelRectDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1yZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXJlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUtuRDtJQUMwQyxnREFBVztJQWtDakQsOEJBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBRDFDLFlBRUksa0JBQU0sVUFBVSxFQUFFLGNBQWMsQ0FBQyxTQUNwQztRQUhrQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQXBCekMsWUFBTSxHQUFXLENBQUMsQ0FBQztRQWtCbkIsV0FBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7O0lBSzNCLENBQUM7Ozs7SUFFRCx1Q0FBUTs7O0lBQVI7O1lBRVUsSUFBSSxHQUFHO1lBQ1QsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ2hDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQ25DOztZQUNLLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1FBQzFGLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDekMsQ0FBQzs7Ozs7Ozs7O0lBRU0sbUNBQUk7Ozs7Ozs7O0lBQVgsVUFBWSxVQUFpQixFQUFFLEtBQWEsRUFBRSxNQUFjLEVBQUUsTUFBYyxFQUFFLElBQVM7UUFDbkYsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekYsQ0FBQzs7Z0JBdERKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxnQ0FBZ0MsRUFBRTs7OztnQkFSckMsVUFBVTtnQkFHckIsY0FBYzs7O3dCQU9sQixLQUFLOzZCQUdMLEtBQUs7d0JBR0wsS0FBSzt5QkFHTCxLQUFLO3lCQUdMLEtBQUs7NkJBR0wsS0FBSzt5QkFHTCxLQUFLOzhCQUdMLEtBQUs7OEJBR0wsS0FBSzs0QkFHTCxLQUFLO3dCQUdMLE1BQU07O0lBdUJYLDJCQUFDO0NBQUEsQUF2REQsQ0FDMEMsV0FBVyxHQXNEcEQ7U0F0RFksb0JBQW9COzs7SUFDN0IscUNBQ1c7O0lBRVgsMENBQ2tCOztJQUVsQixxQ0FDYzs7SUFFZCxzQ0FDZTs7SUFFZixzQ0FDbUI7O0lBRW5CLDBDQUNnQjs7SUFFaEIsc0NBQ1k7O0lBRVosMkNBQ2lCOztJQUVqQiwyQ0FDaUI7O0lBRWpCLHlDQUNrQjs7SUFFbEIscUNBQzJCOztJQUVmLDBDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLXJlY3QsIHJhcGhhZWwtcmVjdCcgfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsUmVjdERpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGxlZnRDb3JuZXI6IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB3aWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBoZWlnaHQ6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcmFkaXVzOiBudW1iZXIgPSAwO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBlbGVtZW50SWQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6IHRoaXMuc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9ycyxcbiAgICAgICAgICAgICdzdHJva2UnOiB0aGlzLnN0cm9rZSxcbiAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiB0aGlzLmZpbGxPcGFjaXR5XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVsZW1lbnREcmF3ID0gdGhpcy5kcmF3KHRoaXMubGVmdENvcm5lciwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMucmFkaXVzLCBvcHRzKTtcbiAgICAgICAgZWxlbWVudERyYXcubm9kZS5pZCA9IHRoaXMuZWxlbWVudElkO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KGxlZnRDb3JuZXI6IFBvaW50LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIG9wdHM6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXBlci5yZWN0KGxlZnRDb3JuZXIueCwgbGVmdENvcm5lci55LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpLmF0dHIob3B0cyk7XG4gICAgfVxufVxuIl19