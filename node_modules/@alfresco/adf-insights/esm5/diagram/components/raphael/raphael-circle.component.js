/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelCircleDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelCircleDirective, _super);
    function RaphaelCircleDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelCircleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = { 'stroke-width': this.strokeWidth, 'fill': this.fillColors, 'stroke': this.stroke, 'fill-opacity': this.fillOpacity };
        /** @type {?} */
        var drawElement = this.draw(this.center, this.radius, opts);
        drawElement.node.id = this.elementId;
    };
    /**
     * @param {?} center
     * @param {?} radius
     * @param {?} opts
     * @return {?}
     */
    RaphaelCircleDirective.prototype.draw = /**
     * @param {?} center
     * @param {?} radius
     * @param {?} opts
     * @return {?}
     */
    function (center, radius, opts) {
        /** @type {?} */
        var circle = this.paper.circle(center.x, center.y, radius).attr(opts);
        return circle;
    };
    RaphaelCircleDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-circle, raphael-circle' },] }
    ];
    /** @nocollapse */
    RaphaelCircleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelCircleDirective.propDecorators = {
        paper: [{ type: Input }],
        center: [{ type: Input }],
        radius: [{ type: Input }],
        strokeWidth: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        fillOpacity: [{ type: Input }],
        elementId: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelCircleDirective;
}(RaphaelBase));
export { RaphaelCircleDirective };
if (false) {
    /** @type {?} */
    RaphaelCircleDirective.prototype.paper;
    /** @type {?} */
    RaphaelCircleDirective.prototype.center;
    /** @type {?} */
    RaphaelCircleDirective.prototype.radius;
    /** @type {?} */
    RaphaelCircleDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelCircleDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelCircleDirective.prototype.stroke;
    /** @type {?} */
    RaphaelCircleDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelCircleDirective.prototype.elementId;
    /** @type {?} */
    RaphaelCircleDirective.prototype.error;
    /** @type {?} */
    RaphaelCircleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1jaXJjbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL3JhcGhhZWwtY2lyY2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFLbkQ7SUFDNEMsa0RBQVc7SUE0Qm5ELGdDQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUQxQyxZQUVJLGtCQUFNLFVBQVUsRUFBRSxjQUFjLENBQUMsU0FDcEM7UUFIa0IsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFGekMsV0FBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7O0lBSzNCLENBQUM7Ozs7SUFFRCx5Q0FBUTs7O0lBQVI7O1lBRVUsSUFBSSxHQUFHLEVBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUM7O1lBQzNILFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7UUFDN0QsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN6QyxDQUFDOzs7Ozs7O0lBRU0scUNBQUk7Ozs7OztJQUFYLFVBQVksTUFBYSxFQUFFLE1BQWMsRUFBRSxJQUFTOztZQUMxQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkUsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Z0JBNUNKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSxvQ0FBb0MsRUFBQzs7OztnQkFSdkMsVUFBVTtnQkFHckIsY0FBYzs7O3dCQU9sQixLQUFLO3lCQUdMLEtBQUs7eUJBR0wsS0FBSzs4QkFHTCxLQUFLOzZCQUdMLEtBQUs7eUJBR0wsS0FBSzs4QkFHTCxLQUFLOzRCQUdMLEtBQUs7d0JBR0wsTUFBTTs7SUFtQlgsNkJBQUM7Q0FBQSxBQTdDRCxDQUM0QyxXQUFXLEdBNEN0RDtTQTVDWSxzQkFBc0I7OztJQUMvQix1Q0FDVzs7SUFFWCx3Q0FDYzs7SUFFZCx3Q0FDZTs7SUFFZiw2Q0FDb0I7O0lBRXBCLDRDQUNnQjs7SUFFaEIsd0NBQ1k7O0lBRVosNkNBQ2lCOztJQUVqQiwyQ0FDa0I7O0lBRWxCLHVDQUMyQjs7SUFFZiw0Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLWNpcmNsZSwgcmFwaGFlbC1jaXJjbGUnfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsQ2lyY2xlRGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgY2VudGVyOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgcmFkaXVzOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZVdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcnM6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxPcGFjaXR5OiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGVsZW1lbnRJZDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7J3N0cm9rZS13aWR0aCc6IHRoaXMuc3Ryb2tlV2lkdGgsICdmaWxsJzogdGhpcy5maWxsQ29sb3JzLCAnc3Ryb2tlJzogdGhpcy5zdHJva2UsICdmaWxsLW9wYWNpdHknOiB0aGlzLmZpbGxPcGFjaXR5fTtcbiAgICAgICAgY29uc3QgZHJhd0VsZW1lbnQgPSB0aGlzLmRyYXcodGhpcy5jZW50ZXIsIHRoaXMucmFkaXVzLCBvcHRzKTtcbiAgICAgICAgZHJhd0VsZW1lbnQubm9kZS5pZCA9IHRoaXMuZWxlbWVudElkO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KGNlbnRlcjogUG9pbnQsIHJhZGl1czogbnVtYmVyLCBvcHRzOiBhbnkpIHtcbiAgICAgICAgY29uc3QgY2lyY2xlID0gdGhpcy5wYXBlci5jaXJjbGUoY2VudGVyLngsIGNlbnRlci55LCByYWRpdXMpLmF0dHIob3B0cyk7XG4gICAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgfVxufVxuIl19