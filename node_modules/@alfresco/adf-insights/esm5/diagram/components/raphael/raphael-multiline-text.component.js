/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelMultilineTextDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelMultilineTextDirective, _super);
    function RaphaelMultilineTextDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        _this.TEXT_PADDING = 3;
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelMultilineTextDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    };
    /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    RaphaelMultilineTextDirective.prototype.draw = /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    function (position, text) {
        /** @type {?} */
        var textPaper = this.paper.text(position.x + this.TEXT_PADDING, position.y + this.TEXT_PADDING, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        /** @type {?} */
        var formattedText = this.formatText(textPaper, text, this.elementWidth);
        textPaper.attr({
            'text': formattedText
        });
        textPaper.transform(this.transform);
        return textPaper;
    };
    /**
     * @private
     * @param {?} textPaper
     * @param {?} text
     * @param {?} elementWidth
     * @return {?}
     */
    RaphaelMultilineTextDirective.prototype.formatText = /**
     * @private
     * @param {?} textPaper
     * @param {?} text
     * @param {?} elementWidth
     * @return {?}
     */
    function (textPaper, text, elementWidth) {
        /** @type {?} */
        var pText = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        textPaper.attr({
            'text': pText
        });
        /** @type {?} */
        var letterWidth = textPaper.getBBox().width / text.length;
        /** @type {?} */
        var removedLineBreaks = text.split('\n');
        /** @type {?} */
        var actualRowLength = 0;
        /** @type {?} */
        var formattedText = [];
        removedLineBreaks.forEach((/**
         * @param {?} sentence
         * @return {?}
         */
        function (sentence) {
            /** @type {?} */
            var words = sentence.split(' ');
            words.forEach((/**
             * @param {?} word
             * @return {?}
             */
            function (word) {
                /** @type {?} */
                var length = word.length;
                if (actualRowLength + (length * letterWidth) > elementWidth) {
                    formattedText.push('\n');
                    actualRowLength = 0;
                }
                actualRowLength += length * letterWidth;
                formattedText.push(word + ' ');
            }));
            formattedText.push('\n');
            actualRowLength = 0;
        }));
        return formattedText.join('');
    };
    RaphaelMultilineTextDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-multiline-text, raphael-multiline-text' },] }
    ];
    /** @nocollapse */
    RaphaelMultilineTextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelMultilineTextDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        transform: [{ type: Input }],
        text: [{ type: Input }],
        elementWidth: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelMultilineTextDirective;
}(RaphaelBase));
export { RaphaelMultilineTextDirective };
if (false) {
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.paper;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.position;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.transform;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.text;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementWidth;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.error;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.TEXT_PADDING;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBS25EO0lBQ21ELHlEQUFXO0lBcUIxRCx1Q0FBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBSnpDLFdBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTNCLGtCQUFZLEdBQUcsQ0FBQyxDQUFDOztJQUtqQixDQUFDOzs7O0lBRUQsZ0RBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUMvQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7O0lBRUQsNENBQUk7Ozs7O0lBQUosVUFBSyxRQUFlLEVBQUUsSUFBWTs7WUFDeEIsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3pHLGFBQWEsRUFBRSxRQUFRO1lBQ3ZCLGFBQWEsRUFBRSxPQUFPO1lBQ3RCLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE1BQU0sRUFBRSxTQUFTO1NBQ3BCLENBQUM7O1lBRUksYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3pFLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDWCxNQUFNLEVBQUUsYUFBYTtTQUN4QixDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOzs7Ozs7OztJQUVPLGtEQUFVOzs7Ozs7O0lBQWxCLFVBQW1CLFNBQVMsRUFBRSxJQUFJLEVBQUUsWUFBWTs7WUFDdEMsS0FBSyxHQUFHLHNEQUFzRDtRQUNwRSxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ1gsTUFBTSxFQUFFLEtBQUs7U0FDaEIsQ0FBQyxDQUFDOztZQUNHLFdBQVcsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNOztZQUNyRCxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzs7WUFDdEMsZUFBZSxHQUFHLENBQUM7O1lBQ2pCLGFBQWEsR0FBRyxFQUFFO1FBQ3hCLGlCQUFpQixDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLFFBQVE7O2dCQUN6QixLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDakMsS0FBSyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFDLElBQUk7O29CQUNULE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTTtnQkFDMUIsSUFBSSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsWUFBWSxFQUFFO29CQUN6RCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN6QixlQUFlLEdBQUcsQ0FBQyxDQUFDO2lCQUN2QjtnQkFDRCxlQUFlLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQztnQkFDeEMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxFQUFDLENBQUM7WUFDSCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Z0JBMUVKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxvREFBb0QsRUFBRTs7OztnQkFSekQsVUFBVTtnQkFHckIsY0FBYzs7O3dCQU9sQixLQUFLOzJCQUdMLEtBQUs7NEJBR0wsS0FBSzt1QkFHTCxLQUFLOytCQUdMLEtBQUs7d0JBR0wsTUFBTTs7SUEwRFgsb0NBQUM7Q0FBQSxBQTNFRCxDQUNtRCxXQUFXLEdBMEU3RDtTQTFFWSw2QkFBNkI7OztJQUN0Qyw4Q0FDVzs7SUFFWCxpREFDZ0I7O0lBRWhCLGtEQUNrQjs7SUFFbEIsNkNBQ2E7O0lBRWIscURBQ3FCOztJQUVyQiw4Q0FDMkI7O0lBRTNCLHFEQUFpQjs7SUFFTCxtREFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1tdWx0aWxpbmUtdGV4dCwgcmFwaGFlbC1tdWx0aWxpbmUtdGV4dCcgfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsTXVsdGlsaW5lVGV4dERpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHBvc2l0aW9uOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgZWxlbWVudFdpZHRoOiBudW1iZXI7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIFRFWFRfUEFERElORyA9IDM7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy50ZXh0ID09PSBudWxsIHx8IHRoaXMudGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbiwgdGhpcy50ZXh0KTtcbiAgICB9XG5cbiAgICBkcmF3KHBvc2l0aW9uOiBQb2ludCwgdGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHRleHRQYXBlciA9IHRoaXMucGFwZXIudGV4dChwb3NpdGlvbi54ICsgdGhpcy5URVhUX1BBRERJTkcsIHBvc2l0aW9uLnkgKyB0aGlzLlRFWFRfUEFERElORywgdGV4dCkuYXR0cih7XG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiAnbWlkZGxlJyxcbiAgICAgICAgICAgICdmb250LWZhbWlseSc6ICdBcmlhbCcsXG4gICAgICAgICAgICAnZm9udC1zaXplJzogJzExJyxcbiAgICAgICAgICAgICdmaWxsJzogJyMzNzNlNDgnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFRleHQgPSB0aGlzLmZvcm1hdFRleHQodGV4dFBhcGVyLCB0ZXh0LCB0aGlzLmVsZW1lbnRXaWR0aCk7XG4gICAgICAgIHRleHRQYXBlci5hdHRyKHtcbiAgICAgICAgICAgICd0ZXh0JzogZm9ybWF0dGVkVGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgdGV4dFBhcGVyLnRyYW5zZm9ybSh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgIHJldHVybiB0ZXh0UGFwZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRUZXh0KHRleHRQYXBlciwgdGV4dCwgZWxlbWVudFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHBUZXh0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICAgICAgICB0ZXh0UGFwZXIuYXR0cih7XG4gICAgICAgICAgICAndGV4dCc6IHBUZXh0XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsZXR0ZXJXaWR0aCA9IHRleHRQYXBlci5nZXRCQm94KCkud2lkdGggLyB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgY29uc3QgcmVtb3ZlZExpbmVCcmVha3MgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgbGV0IGFjdHVhbFJvd0xlbmd0aCA9IDA7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZFRleHQgPSBbXTtcbiAgICAgICAgcmVtb3ZlZExpbmVCcmVha3MuZm9yRWFjaCgoc2VudGVuY2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gc2VudGVuY2Uuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIHdvcmRzLmZvckVhY2goKHdvcmQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB3b3JkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoYWN0dWFsUm93TGVuZ3RoICsgKGxlbmd0aCAqIGxldHRlcldpZHRoKSA+IGVsZW1lbnRXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRUZXh0LnB1c2goJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICBhY3R1YWxSb3dMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY3R1YWxSb3dMZW5ndGggKz0gbGVuZ3RoICogbGV0dGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkVGV4dC5wdXNoKHdvcmQgKyAnICcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3JtYXR0ZWRUZXh0LnB1c2goJ1xcbicpO1xuICAgICAgICAgICAgYWN0dWFsUm93TGVuZ3RoID0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRUZXh0LmpvaW4oJycpO1xuICAgIH1cbn1cbiJdfQ==