/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelTextDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelTextDirective, _super);
    function RaphaelTextDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelTextDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    };
    /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    RaphaelTextDirective.prototype.draw = /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    function (position, text) {
        /** @type {?} */
        var textPaper = this.paper.text(position.x, position.y, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        textPaper.transform(this.transform);
        return textPaper;
    };
    RaphaelTextDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-text, raphael-text' },] }
    ];
    /** @nocollapse */
    RaphaelTextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelTextDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        transform: [{ type: Input }],
        text: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelTextDirective;
}(RaphaelBase));
export { RaphaelTextDirective };
if (false) {
    /** @type {?} */
    RaphaelTextDirective.prototype.paper;
    /** @type {?} */
    RaphaelTextDirective.prototype.position;
    /** @type {?} */
    RaphaelTextDirective.prototype.transform;
    /** @type {?} */
    RaphaelTextDirective.prototype.text;
    /** @type {?} */
    RaphaelTextDirective.prototype.error;
    /** @type {?} */
    RaphaelTextDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXRleHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUtuRDtJQUMwQyxnREFBVztJQWdCakQsOEJBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBRDFDLFlBRUksa0JBQU0sVUFBVSxFQUFFLGNBQWMsQ0FBQyxTQUNwQztRQUhrQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUZ6QyxXQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFLM0IsQ0FBQzs7OztJQUVELHVDQUFROzs7SUFBUjtRQUVJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDL0MsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7OztJQUVNLG1DQUFJOzs7OztJQUFYLFVBQVksUUFBZSxFQUFFLElBQVk7O1lBQy9CLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2pFLGFBQWEsRUFBRyxRQUFRO1lBQ3hCLGFBQWEsRUFBRyxPQUFPO1lBQ3ZCLFdBQVcsRUFBRyxJQUFJO1lBQ2xCLE1BQU0sRUFBRyxTQUFTO1NBQ3JCLENBQUM7UUFFRixTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOztnQkF4Q0osU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLGdDQUFnQyxFQUFDOzs7O2dCQVJuQyxVQUFVO2dCQUdyQixjQUFjOzs7d0JBT2xCLEtBQUs7MkJBR0wsS0FBSzs0QkFHTCxLQUFLO3VCQUdMLEtBQUs7d0JBR0wsTUFBTTs7SUEyQlgsMkJBQUM7Q0FBQSxBQXpDRCxDQUMwQyxXQUFXLEdBd0NwRDtTQXhDWSxvQkFBb0I7OztJQUM3QixxQ0FDVzs7SUFFWCx3Q0FDZ0I7O0lBRWhCLHlDQUNrQjs7SUFFbEIsb0NBQ2E7O0lBRWIscUNBQzJCOztJQUVmLDBDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYWRmLXJhcGhhZWwtdGV4dCwgcmFwaGFlbC10ZXh0J30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbFRleHREaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMudGV4dCA9PT0gbnVsbCB8fCB0aGlzLnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMucG9zaXRpb24sIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcocG9zaXRpb246IFBvaW50LCB0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgdGV4dFBhcGVyID0gdGhpcy5wYXBlci50ZXh0KHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHRleHQpLmF0dHIoe1xuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJyA6ICdtaWRkbGUnLFxuICAgICAgICAgICAgJ2ZvbnQtZmFtaWx5JyA6ICdBcmlhbCcsXG4gICAgICAgICAgICAnZm9udC1zaXplJyA6ICcxMScsXG4gICAgICAgICAgICAnZmlsbCcgOiAnIzM3M2U0OCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGV4dFBhcGVyLnRyYW5zZm9ybSh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgIHJldHVybiB0ZXh0UGFwZXI7XG4gICAgfVxufVxuIl19