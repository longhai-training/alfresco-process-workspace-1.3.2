/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
var DiagramSubprocessComponent = /** @class */ (function () {
    function DiagramSubprocessComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: 4 };
    }
    /**
     * @return {?}
     */
    DiagramSubprocessComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.rectLeftCorner = { x: this.data.x, y: this.data.y };
        this.width = this.data.width;
        this.height = this.data.height;
        this.options.fillColors = 'none';
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.strokeWidth = 1;
    };
    DiagramSubprocessComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-subprocess',
                    template: "<raphael-rect [leftCorner]=\"rectLeftCorner\" [width]=\"width\" [height]=\"height\" [radius]=\"options.radius\"\n              [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n              [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-rect>\n<diagram-tooltip [data]=\"data\"></diagram-tooltip>\n"
                }] }
    ];
    /** @nocollapse */
    DiagramSubprocessComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DiagramColorService }
    ]; };
    DiagramSubprocessComponent.propDecorators = {
        data: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramSubprocessComponent;
}());
export { DiagramSubprocessComponent };
if (false) {
    /** @type {?} */
    DiagramSubprocessComponent.prototype.data;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.error;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.rectLeftCorner;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.width;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.height;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.options;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramSubprocessComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1zdWJwcm9jZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvc3RydWN0dXJhbC9kaWFncmFtLXN1YnByb2Nlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUzRTtJQWlCSSxvQ0FBbUIsVUFBc0IsRUFDckIsbUJBQXdDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDckIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVQ1RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQU0zQixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUcxQixDQUFDOzs7O0lBRWhFLDZDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRS9CLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Z0JBNUJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5Qiw0V0FBa0Q7aUJBQ3JEOzs7O2dCQU5tQixVQUFVO2dCQUNyQixtQkFBbUI7Ozt1QkFPdkIsS0FBSzt3QkFHTCxNQUFNOztJQXFCWCxpQ0FBQztDQUFBLEFBN0JELElBNkJDO1NBekJZLDBCQUEwQjs7O0lBQ25DLDBDQUNVOztJQUVWLDJDQUMyQjs7SUFFM0Isb0RBQW9COztJQUNwQiwyQ0FBVzs7SUFDWCw0Q0FBWTs7SUFFWiw2Q0FBeUY7O0lBRTdFLGdEQUE2Qjs7Ozs7SUFDN0IseURBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhZ3JhbUNvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RpYWdyYW0tY29sb3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1zdWJwcm9jZXNzJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS1zdWJwcm9jZXNzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtU3VicHJvY2Vzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHJlY3RMZWZ0Q29ybmVyOiBhbnk7XG4gICAgd2lkdGg6IGFueTtcbiAgICBoZWlnaHQ6IGFueTtcblxuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJycsIHJhZGl1czogNH07XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWN0TGVmdENvcm5lciA9IHt4OiB0aGlzLmRhdGEueCwgeTogdGhpcy5kYXRhLnl9O1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5kYXRhLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuZGF0YS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2UgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0QnBtbkNvbG9yKHRoaXMuZGF0YSwgRGlhZ3JhbUNvbG9yU2VydmljZS5NQUlOX1NUUk9LRV9DT0xPUik7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2VXaWR0aCA9IDE7XG4gICAgfVxufVxuIl19