/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
var DiagramEndEventComponent = /** @class */ (function () {
    function DiagramEndEventComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: '' };
    }
    /**
     * @return {?}
     */
    DiagramEndEventComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options.radius = 14;
        this.options.strokeWidth = 4;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
        this.iconFillColor = 'black';
    };
    DiagramEndEventComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-end-event',
                    template: "<diagram-event [data]=\"data\" [options]=\"options\" [iconFillColor]=\"iconFillColor\"></diagram-event>"
                }] }
    ];
    /** @nocollapse */
    DiagramEndEventComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DiagramColorService }
    ]; };
    DiagramEndEventComponent.propDecorators = {
        data: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramEndEventComponent;
}());
export { DiagramEndEventComponent };
if (false) {
    /** @type {?} */
    DiagramEndEventComponent.prototype.data;
    /** @type {?} */
    DiagramEndEventComponent.prototype.error;
    /** @type {?} */
    DiagramEndEventComponent.prototype.options;
    /** @type {?} */
    DiagramEndEventComponent.prototype.iconFillColor;
    /** @type {?} */
    DiagramEndEventComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramEndEventComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1lbmQtZXZlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9ldmVudHMvZGlhZ3JhbS1lbmQtZXZlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUzRTtJQWNJLGtDQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBTjVELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTNCLFlBQU8sR0FBUSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBSTNCLENBQUM7Ozs7SUFFaEUsMkNBQVE7OztJQUFSO1FBRUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXJFLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQ2pDLENBQUM7O2dCQTFCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsbUhBQWlEO2lCQUNwRDs7OztnQkFObUIsVUFBVTtnQkFDckIsbUJBQW1COzs7dUJBT3ZCLEtBQUs7d0JBR0wsTUFBTTs7SUFtQlgsK0JBQUM7Q0FBQSxBQTNCRCxJQTJCQztTQXZCWSx3QkFBd0I7OztJQUNqQyx3Q0FDVTs7SUFFVix5Q0FDMkI7O0lBRTNCLDJDQUEwRjs7SUFDMUYsaURBQW1COztJQUVQLDhDQUE2Qjs7Ozs7SUFDN0IsdURBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhZ3JhbUNvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RpYWdyYW0tY29sb3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1lbmQtZXZlbnQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kaWFncmFtLWVuZC1ldmVudC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUVuZEV2ZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAnJywgcmFkaXVzOiAnJ307XG4gICAgaWNvbkZpbGxDb2xvcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkaWFncmFtQ29sb3JTZXJ2aWNlOiBEaWFncmFtQ29sb3JTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnJhZGl1cyA9IDE0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlV2lkdGggPSA0O1xuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEJwbW5Db2xvcih0aGlzLmRhdGEsIERpYWdyYW1Db2xvclNlcnZpY2UuTUFJTl9TVFJPS0VfQ09MT1IpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbENvbG9ycyA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRGaWxsQ29sb3VyKHRoaXMuZGF0YS5pZCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsT3BhY2l0eSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRGaWxsT3BhY2l0eSgpO1xuXG4gICAgICAgIHRoaXMuaWNvbkZpbGxDb2xvciA9ICdibGFjayc7XG4gICAgfVxufVxuIl19