/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
var DiagramStartEventComponent = /** @class */ (function () {
    function DiagramStartEventComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: '' };
    }
    /**
     * @return {?}
     */
    DiagramStartEventComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options.radius = 15;
        this.options.strokeWidth = 1;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
        this.iconFillColor = 'none';
    };
    DiagramStartEventComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-start-event',
                    template: "<diagram-event [data]=\"data\" [options]=\"options\" [iconFillColor]=\"iconFillColor\"></diagram-event>"
                }] }
    ];
    /** @nocollapse */
    DiagramStartEventComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DiagramColorService }
    ]; };
    DiagramStartEventComponent.propDecorators = {
        data: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramStartEventComponent;
}());
export { DiagramStartEventComponent };
if (false) {
    /** @type {?} */
    DiagramStartEventComponent.prototype.data;
    /** @type {?} */
    DiagramStartEventComponent.prototype.error;
    /** @type {?} */
    DiagramStartEventComponent.prototype.options;
    /** @type {?} */
    DiagramStartEventComponent.prototype.iconFillColor;
    /** @type {?} */
    DiagramStartEventComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramStartEventComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1zdGFydC1ldmVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL2V2ZW50cy9kaWFncmFtLXN0YXJ0LWV2ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFM0U7SUFjSSxvQ0FBbUIsVUFBc0IsRUFDckIsbUJBQXdDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDckIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQU41RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzQixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUMsQ0FBQztJQUkzQixDQUFDOzs7O0lBRWhFLDZDQUFROzs7SUFBUjtRQUVJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVyRSxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztJQUNoQyxDQUFDOztnQkExQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLG1IQUFtRDtpQkFDdEQ7Ozs7Z0JBTm1CLFVBQVU7Z0JBQ3JCLG1CQUFtQjs7O3VCQU92QixLQUFLO3dCQUdMLE1BQU07O0lBbUJYLGlDQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0F2QlksMEJBQTBCOzs7SUFDbkMsMENBQ1U7O0lBRVYsMkNBQzJCOztJQUUzQiw2Q0FBMEY7O0lBQzFGLG1EQUFtQjs7SUFFUCxnREFBNkI7Ozs7O0lBQzdCLHlEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0tc3RhcnQtZXZlbnQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kaWFncmFtLXN0YXJ0LWV2ZW50LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtU3RhcnRFdmVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJycsIHJhZGl1czogJyd9O1xuICAgIGljb25GaWxsQ29sb3I6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhZ3JhbUNvbG9yU2VydmljZTogRGlhZ3JhbUNvbG9yU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5yYWRpdXMgPSAxNTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLk1BSU5fU1RST0tFX0NPTE9SKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbENvbG91cih0aGlzLmRhdGEuaWQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbE9wYWNpdHkgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbE9wYWNpdHkoKTtcblxuICAgICAgICB0aGlzLmljb25GaWxsQ29sb3IgPSAnbm9uZSc7XG4gICAgfVxufVxuIl19