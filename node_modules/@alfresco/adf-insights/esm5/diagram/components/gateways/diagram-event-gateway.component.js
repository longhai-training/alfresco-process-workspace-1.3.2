/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
var DiagramEventGatewayComponent = /** @class */ (function () {
    function DiagramEventGatewayComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.center = {};
        this.centerPentagon = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 0.5 };
        this.circleRadiusInner = 10.4;
        this.circleRadiusOuter = 11.7;
        this.pentaStrokeWidth = 1.39999998;
    }
    /**
     * @return {?}
     */
    DiagramEventGatewayComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
        this.centerPentagon.x = this.data.x;
        this.centerPentagon.y = this.data.y;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    };
    DiagramEventGatewayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-event-gateway',
                    template: "<diagram-gateway [data]=\"data\"></diagram-gateway>\n<raphael-circle [center]=\"center\" [radius]=\"circleRadiusInner\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"\n                [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle>\n<raphael-circle [center]=\"center\" [radius]=\"circleRadiusOuter\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"\n                [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle>\n<raphael-pentagon [center]=\"centerPentagon\" [strokeWidth]=\"pentaStrokeWidth\" [stroke]=\"options.stroke\"\n                  [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-pentagon>"
                }] }
    ];
    /** @nocollapse */
    DiagramEventGatewayComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DiagramColorService }
    ]; };
    DiagramEventGatewayComponent.propDecorators = {
        data: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramEventGatewayComponent;
}());
export { DiagramEventGatewayComponent };
if (false) {
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.data;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.error;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.center;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.centerPentagon;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.options;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.circleRadiusInner;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.circleRadiusOuter;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.pentaStrokeWidth;
    /** @type {?} */
    DiagramEventGatewayComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramEventGatewayComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1ldmVudC1nYXRld2F5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvZ2F0ZXdheXMvZGlhZ3JhbS1ldmVudC1nYXRld2F5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFM0U7SUFvQkksc0NBQW1CLFVBQXNCLEVBQ3JCLG1CQUF3QztRQUR6QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFaNUQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFM0IsV0FBTSxHQUFRLEVBQUUsQ0FBQztRQUNqQixtQkFBYyxHQUFRLEVBQUUsQ0FBQztRQUN6QixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFDLENBQUM7UUFFL0Usc0JBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLHNCQUFpQixHQUFHLElBQUksQ0FBQztRQUV6QixxQkFBZ0IsR0FBRyxVQUFVLENBQUM7SUFHaUMsQ0FBQzs7OztJQUVoRSwrQ0FBUTs7O0lBQVI7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6RSxDQUFDOztnQkFoQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLG93QkFBcUQ7aUJBQ3hEOzs7O2dCQU5tQixVQUFVO2dCQUNyQixtQkFBbUI7Ozt1QkFPdkIsS0FBSzt3QkFHTCxNQUFNOztJQXlCWCxtQ0FBQztDQUFBLEFBakNELElBaUNDO1NBN0JZLDRCQUE0Qjs7O0lBQ3JDLDRDQUNVOztJQUVWLDZDQUMyQjs7SUFFM0IsOENBQWlCOztJQUNqQixzREFBeUI7O0lBQ3pCLCtDQUErRTs7SUFFL0UseURBQXlCOztJQUN6Qix5REFBeUI7O0lBRXpCLHdEQUE4Qjs7SUFFbEIsa0RBQTZCOzs7OztJQUM3QiwyREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4gLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLWV2ZW50LWdhdGV3YXknLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kaWFncmFtLWV2ZW50LWdhdGV3YXkuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1FdmVudEdhdGV3YXlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjZW50ZXI6IGFueSA9IHt9O1xuICAgIGNlbnRlclBlbnRhZ29uOiBhbnkgPSB7fTtcbiAgICBvcHRpb25zOiBhbnkgPSB7c3Ryb2tlOiAnJywgZmlsbENvbG9yczogJycsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6IDAuNX07XG5cbiAgICBjaXJjbGVSYWRpdXNJbm5lciA9IDEwLjQ7XG4gICAgY2lyY2xlUmFkaXVzT3V0ZXIgPSAxMS43O1xuXG4gICAgcGVudGFTdHJva2VXaWR0aCA9IDEuMzk5OTk5OTg7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIueCA9IHRoaXMuZGF0YS54ICsgKHRoaXMuZGF0YS53aWR0aCAvIDIpO1xuICAgICAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5kYXRhLnkgKyAodGhpcy5kYXRhLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLmNlbnRlclBlbnRhZ29uLnggPSB0aGlzLmRhdGEueDtcbiAgICAgICAgdGhpcy5jZW50ZXJQZW50YWdvbi55ID0gdGhpcy5kYXRhLnk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLk1BSU5fU1RST0tFX0NPTE9SKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbENvbG91cih0aGlzLmRhdGEuaWQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbE9wYWNpdHkgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbE9wYWNpdHkoKTtcbiAgICB9XG59XG4iXX0=