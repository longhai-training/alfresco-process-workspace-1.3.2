/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
var DiagramParallelGatewayComponent = /** @class */ (function () {
    function DiagramParallelGatewayComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.center = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 3 };
    }
    /**
     * @return {?}
     */
    DiagramParallelGatewayComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.center.x = this.data.x;
        this.center.y = this.data.y;
        this.width = this.data.width;
        this.height = this.data.height;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    };
    DiagramParallelGatewayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-parallel-gateway',
                    template: "<diagram-gateway [data]=\"data\"></diagram-gateway>\n<raphael-plus [center]=\"center\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-plus>"
                }] }
    ];
    /** @nocollapse */
    DiagramParallelGatewayComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DiagramColorService }
    ]; };
    DiagramParallelGatewayComponent.propDecorators = {
        data: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramParallelGatewayComponent;
}());
export { DiagramParallelGatewayComponent };
if (false) {
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.data;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.error;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.center;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.width;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.height;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.options;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramParallelGatewayComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1wYXJhbGxlbC1nYXRld2F5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvZ2F0ZXdheXMvZGlhZ3JhbS1wYXJhbGxlbC1nYXRld2F5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFM0U7SUFnQkkseUNBQW1CLFVBQXNCLEVBQ3JCLG1CQUF3QztRQUR6QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFSNUQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFM0IsV0FBTSxHQUFRLEVBQUUsQ0FBQztRQUdqQixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFHZCxDQUFDOzs7O0lBRWhFLGtEQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUvQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pFLENBQUM7O2dCQTVCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsZ1JBQXdEO2lCQUMzRDs7OztnQkFObUIsVUFBVTtnQkFDckIsbUJBQW1COzs7dUJBT3ZCLEtBQUs7d0JBR0wsTUFBTTs7SUFxQlgsc0NBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQXpCWSwrQkFBK0I7OztJQUN4QywrQ0FDVTs7SUFFVixnREFDMkI7O0lBRTNCLGlEQUFpQjs7SUFDakIsZ0RBQVc7O0lBQ1gsaURBQVk7O0lBQ1osa0RBQTZFOztJQUVqRSxxREFBNkI7Ozs7O0lBQzdCLDhEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0tcGFyYWxsZWwtZ2F0ZXdheScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RpYWdyYW0tcGFyYWxsZWwtZ2F0ZXdheS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbVBhcmFsbGVsR2F0ZXdheUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNlbnRlcjogYW55ID0ge307XG4gICAgd2lkdGg6IGFueTtcbiAgICBoZWlnaHQ6IGFueTtcbiAgICBvcHRpb25zOiBhbnkgPSB7c3Ryb2tlOiAnJywgZmlsbENvbG9yczogJycsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6IDN9O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkaWFncmFtQ29sb3JTZXJ2aWNlOiBEaWFncmFtQ29sb3JTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuY2VudGVyLnggPSB0aGlzLmRhdGEueDtcbiAgICAgICAgdGhpcy5jZW50ZXIueSA9IHRoaXMuZGF0YS55O1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5kYXRhLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuZGF0YS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLk1BSU5fU1RST0tFX0NPTE9SKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbENvbG91cih0aGlzLmRhdGEuaWQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbE9wYWNpdHkgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbE9wYWNpdHkoKTtcbiAgICB9XG59XG4iXX0=