/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
/** @type {?} */
var POSITION = { BOTTOM: 'bottom', LEFT: 'left', RIGHT: 'right', TOP: 'top' };
/** @type {?} */
var STRATEGY = { CURSOR: 'cursor', ELEMENT: 'element' };
/** @type {?} */
var IS_ACTIVE_CLASS = 'adf-is-active';
var DiagramTooltipComponent = /** @class */ (function () {
    function DiagramTooltipComponent() {
        this.position = 'bottom';
        this.strategy = 'cursor';
    }
    /**
     * Set up event listeners for the target element (defined in the data.id)
     */
    /**
     * Set up event listeners for the target element (defined in the data.id)
     * @return {?}
     */
    DiagramTooltipComponent.prototype.ngAfterViewInit = /**
     * Set up event listeners for the target element (defined in the data.id)
     * @return {?}
     */
    function () {
        this.tooltipElement = this.tooltipContent.nativeElement;
        if (this.data.id) {
            this.targetElement = document.getElementById(this.data.id);
        }
        if (this.targetElement) {
            if (!this.targetElement.hasAttribute('tabindex')) {
                this.targetElement.setAttribute('tabindex', '0');
            }
            this.boundMouseEnterHandler = this.handleMouseEnter.bind(this);
            this.boundMouseLeaveAndScrollHandler = this.hideTooltip.bind(this);
            this.targetElement.addEventListener('mouseenter', this.boundMouseEnterHandler, false);
            this.targetElement.addEventListener('touchend', this.boundMouseEnterHandler, false);
            this.targetElement.addEventListener('mouseleave', this.boundMouseLeaveAndScrollHandler, false);
            window.addEventListener('scroll', this.boundMouseLeaveAndScrollHandler, true);
            window.addEventListener('touchstart', this.boundMouseLeaveAndScrollHandler);
        }
    };
    /**
     * Clear all bound event listeners
     */
    /**
     * Clear all bound event listeners
     * @return {?}
     */
    DiagramTooltipComponent.prototype.ngOnDestroy = /**
     * Clear all bound event listeners
     * @return {?}
     */
    function () {
        window.removeEventListener('scroll', this.boundMouseLeaveAndScrollHandler, true);
        window.removeEventListener('touchstart', this.boundMouseLeaveAndScrollHandler);
    };
    /**
     * Hides the tooltip
     */
    /**
     * Hides the tooltip
     * @private
     * @return {?}
     */
    DiagramTooltipComponent.prototype.hideTooltip = /**
     * Hides the tooltip
     * @private
     * @return {?}
     */
    function () {
        this.tooltipElement.classList.remove(IS_ACTIVE_CLASS);
    };
    /**
     * Shows the tooltip
     */
    /**
     * Shows the tooltip
     * @private
     * @return {?}
     */
    DiagramTooltipComponent.prototype.showTooltip = /**
     * Shows the tooltip
     * @private
     * @return {?}
     */
    function () {
        this.tooltipElement.classList.add(IS_ACTIVE_CLASS);
    };
    /**
     * Calculates the tooltip position and displays it
     *
     * @param event mouseenter/touchend event
     */
    /**
     * Calculates the tooltip position and displays it
     *
     * @private
     * @param {?} event mouseenter/touchend event
     * @return {?}
     */
    DiagramTooltipComponent.prototype.handleMouseEnter = /**
     * Calculates the tooltip position and displays it
     *
     * @private
     * @param {?} event mouseenter/touchend event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var props;
        if (this.strategy === STRATEGY.ELEMENT) {
            props = event.target.getBoundingClientRect();
        }
        else {
            props = { top: (event.pageY - 150), left: event.pageX, width: event.layerX, height: 50 };
        }
        /** @type {?} */
        var top = props.top + (props.height / 2);
        /** @type {?} */
        var marginLeft = -1 * (this.tooltipElement.offsetWidth / 2);
        /** @type {?} */
        var marginTop = -1 * (this.tooltipElement.offsetHeight / 2);
        /** @type {?} */
        var left = props.left + (props.width / 2);
        if (this.position === POSITION.LEFT || this.position === POSITION.RIGHT) {
            left = (props.width / 2);
            if (top + marginTop < 0) {
                this.tooltipElement.style.top = '0';
                this.tooltipElement.style.marginTop = '0';
            }
            else {
                this.tooltipElement.style.top = top + 'px';
                this.tooltipElement.style.marginTop = marginTop + 'px';
            }
        }
        else {
            if (left + marginLeft < 0) {
                this.tooltipElement.style.left = '0';
                this.tooltipElement.style.marginLeft = '0';
            }
            else {
                this.tooltipElement.style.left = left + 'px';
                this.tooltipElement.style.marginLeft = marginLeft + 'px';
            }
        }
        if (this.position === POSITION.TOP) {
            this.tooltipElement.style.top = props.top - this.tooltipElement.offsetHeight - 10 + 'px';
        }
        else if (this.position === POSITION.RIGHT) {
            this.tooltipElement.style.left = props.left + props.width + 10 + 'px';
        }
        else if (this.position === POSITION.LEFT) {
            this.tooltipElement.style.left = props.left - this.tooltipElement.offsetWidth - 10 + 'px';
        }
        else {
            this.tooltipElement.style.top = props.top + props.height + 10 + 'px';
        }
        this.showTooltip();
    };
    DiagramTooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-tooltip',
                    template: "<div #tooltipContent class=\"adf-diagram-tooltip\">\n    <div class=\"adf-diagram-tooltip-header\">{{ data.type }} {{ data.name || data.id }}</div>\n    <div class=\"adf-diagram-tooltip-body\">\n        <div *ngIf=\"data.value\" class=\"adf-diagram-heat-value\">\n            <span class=\"adf-diagram-value\">{{ data.value }}</span>\n            <span class=\"adf-diagram-valuetype\"> {{ data.dataType }}</span>\n        </div>\n        <div *ngIf=\"data.name\" class=\"adf-diagram-name-property\">\n            <span class=\"adf-diagram-propertyName\">Name:</span>\n            <span class=\"adf-diagram-propertyValue\">{{ data.name }}</span>\n        </div>\n        <div *ngFor=\"let property of data.properties\" class=\"adf-diagram-general-property\">\n            <span class=\"adf-diagram-propertyName\">{{ property.name }}:</span>\n            <span class=\"adf-diagram-propertyValue\">{{ property.value }}</span>\n        </div>\n    </div>\n</div>\n",
                    styles: [""]
                }] }
    ];
    DiagramTooltipComponent.propDecorators = {
        tooltipContent: [{ type: ViewChild, args: ['tooltipContent',] }],
        data: [{ type: Input }],
        position: [{ type: Input }],
        strategy: [{ type: Input }]
    };
    return DiagramTooltipComponent;
}());
export { DiagramTooltipComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.tooltipElement;
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.targetElement;
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.boundMouseEnterHandler;
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.boundMouseLeaveAndScrollHandler;
    /** @type {?} */
    DiagramTooltipComponent.prototype.tooltipContent;
    /** @type {?} */
    DiagramTooltipComponent.prototype.data;
    /** @type {?} */
    DiagramTooltipComponent.prototype.position;
    /** @type {?} */
    DiagramTooltipComponent.prototype.strategy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS10b29sdGlwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvdG9vbHRpcC9kaWFncmFtLXRvb2x0aXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFDNUYsUUFBUSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTs7SUFDekUsUUFBUSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFOztJQUNuRCxlQUFlLEdBQUcsZUFBZTtBQUV2QztJQUFBO1FBa0JJLGFBQVEsR0FBVyxRQUFRLENBQUM7UUFHNUIsYUFBUSxHQUFXLFFBQVEsQ0FBQztJQW1HaEMsQ0FBQztJQWpHRzs7T0FFRzs7Ozs7SUFDSSxpREFBZTs7OztJQUF0QjtRQUNJLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7UUFFeEQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLEdB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RSxHQUFHLElBQUksQ0FBQztTQUN6RTthQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDN0Y7YUFBTTtZQUNILElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztTQUN4RTtRQUVELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDOztnQkF2SEosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLDQ4QkFBK0M7O2lCQUVsRDs7O2lDQVFJLFNBQVMsU0FBQyxnQkFBZ0I7dUJBRTFCLEtBQUs7MkJBR0wsS0FBSzsyQkFHTCxLQUFLOztJQW9HViw4QkFBQztDQUFBLEFBeEhELElBd0hDO1NBbkhZLHVCQUF1Qjs7Ozs7O0lBRWhDLGlEQUE0Qjs7Ozs7SUFDNUIsZ0RBQTJCOzs7OztJQUMzQix5REFBb0Q7Ozs7O0lBQ3BELGtFQUE2RDs7SUFFN0QsaURBQXdEOztJQUV4RCx1Q0FDVTs7SUFFViwyQ0FDNEI7O0lBRTVCLDJDQUM0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmNvbnN0IFBPU0lUSU9OID0geyBCT1RUT006ICdib3R0b20nLCBMRUZUOiAnbGVmdCcsIFJJR0hUOiAncmlnaHQnLCBUT1A6ICd0b3AnIH07XG5jb25zdCBTVFJBVEVHWSA9IHsgQ1VSU09SOiAnY3Vyc29yJywgRUxFTUVOVDogJ2VsZW1lbnQnIH07XG5jb25zdCBJU19BQ1RJVkVfQ0xBU1MgPSAnYWRmLWlzLWFjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS10b29sdGlwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS10b29sdGlwLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9kaWFncmFtLXRvb2x0aXAuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtVG9vbHRpcENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgICBwcml2YXRlIHRvb2x0aXBFbGVtZW50OiBhbnk7XG4gICAgcHJpdmF0ZSB0YXJnZXRFbGVtZW50OiBhbnk7XG4gICAgcHJpdmF0ZSBib3VuZE1vdXNlRW50ZXJIYW5kbGVyOiBFdmVudExpc3RlbmVyT2JqZWN0O1xuICAgIHByaXZhdGUgYm91bmRNb3VzZUxlYXZlQW5kU2Nyb2xsSGFuZGxlcjogRXZlbnRMaXN0ZW5lck9iamVjdDtcblxuICAgIEBWaWV3Q2hpbGQoJ3Rvb2x0aXBDb250ZW50JykgdG9vbHRpcENvbnRlbnQ6IEVsZW1lbnRSZWY7XG5cbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IHN0cmluZyA9ICdib3R0b20nO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJhdGVneTogc3RyaW5nID0gJ2N1cnNvcic7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdXAgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgdGFyZ2V0IGVsZW1lbnQgKGRlZmluZWQgaW4gdGhlIGRhdGEuaWQpXG4gICAgICovXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudCA9IHRoaXMudG9vbHRpcENvbnRlbnQubmF0aXZlRWxlbWVudDtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLmlkKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRhdGEuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnRhcmdldEVsZW1lbnQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmJvdW5kTW91c2VFbnRlckhhbmRsZXIgPSB0aGlzLmhhbmRsZU1vdXNlRW50ZXIuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuYm91bmRNb3VzZUxlYXZlQW5kU2Nyb2xsSGFuZGxlciA9IHRoaXMuaGlkZVRvb2x0aXAuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5ib3VuZE1vdXNlRW50ZXJIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLmJvdW5kTW91c2VFbnRlckhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5ib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5ib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5ib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFsbCBib3VuZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuYm91bmRNb3VzZUxlYXZlQW5kU2Nyb2xsSGFuZGxlciwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5ib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgdG9vbHRpcFxuICAgICAqL1xuICAgIHByaXZhdGUgaGlkZVRvb2x0aXAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShJU19BQ1RJVkVfQ0xBU1MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSB0b29sdGlwXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG93VG9vbHRpcCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKElTX0FDVElWRV9DTEFTUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgdG9vbHRpcCBwb3NpdGlvbiBhbmQgZGlzcGxheXMgaXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBtb3VzZWVudGVyL3RvdWNoZW5kIGV2ZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBoYW5kbGVNb3VzZUVudGVyKGV2ZW50KTogdm9pZCB7XG4gICAgICAgIGxldCBwcm9wcztcblxuICAgICAgICBpZiAodGhpcy5zdHJhdGVneSA9PT0gU1RSQVRFR1kuRUxFTUVOVCkge1xuICAgICAgICAgICAgcHJvcHMgPSBldmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wcyA9IHsgdG9wOiAoZXZlbnQucGFnZVkgLSAxNTApLCBsZWZ0OiBldmVudC5wYWdlWCwgd2lkdGg6IGV2ZW50LmxheWVyWCwgaGVpZ2h0OiA1MCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9wID0gcHJvcHMudG9wICsgKHByb3BzLmhlaWdodCAvIDIpO1xuICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gLTEgKiAodGhpcy50b29sdGlwRWxlbWVudC5vZmZzZXRXaWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBtYXJnaW5Ub3AgPSAtMSAqICh0aGlzLnRvb2x0aXBFbGVtZW50Lm9mZnNldEhlaWdodCAvIDIpO1xuICAgICAgICBsZXQgbGVmdCA9IHByb3BzLmxlZnQgKyAocHJvcHMud2lkdGggLyAyKTtcblxuICAgICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PT0gUE9TSVRJT04uTEVGVCB8fCB0aGlzLnBvc2l0aW9uID09PSBQT1NJVElPTi5SSUdIVCkge1xuICAgICAgICAgICAgbGVmdCA9IChwcm9wcy53aWR0aCAvIDIpO1xuICAgICAgICAgICAgaWYgKHRvcCArIG1hcmdpblRvcCA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9ICcwJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZS50b3AgPSB0b3AgKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gbWFyZ2luVG9wICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChsZWZ0ICsgbWFyZ2luTGVmdCA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gJzAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSBQT1NJVElPTi5UT1ApIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUudG9wID0gcHJvcHMudG9wIC0gdGhpcy50b29sdGlwRWxlbWVudC5vZmZzZXRIZWlnaHQgLSAxMCArICdweCc7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wb3NpdGlvbiA9PT0gUE9TSVRJT04uUklHSFQpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubGVmdCA9IHByb3BzLmxlZnQgKyBwcm9wcy53aWR0aCArIDEwICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBvc2l0aW9uID09PSBQT1NJVElPTi5MRUZUKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLmxlZnQgPSBwcm9wcy5sZWZ0IC0gdGhpcy50b29sdGlwRWxlbWVudC5vZmZzZXRXaWR0aCAtIDEwICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUudG9wID0gcHJvcHMudG9wICsgcHJvcHMuaGVpZ2h0ICsgMTAgKyAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaG93VG9vbHRpcCgpO1xuICAgIH1cbn1cbiJdfQ==