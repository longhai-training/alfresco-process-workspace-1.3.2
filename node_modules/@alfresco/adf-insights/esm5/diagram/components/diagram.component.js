/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DiagramModel } from '../models/diagram/diagram.model';
import { DiagramColorService } from '../services/diagram-color.service';
import { DiagramsService } from '../services/diagrams.service';
import { RaphaelService } from './raphael/raphael.service';
var DiagramComponent = /** @class */ (function () {
    function DiagramComponent(diagramColorService, raphaelService, diagramsService) {
        this.diagramColorService = diagramColorService;
        this.raphaelService = raphaelService;
        this.diagramsService = diagramsService;
        this.metricType = '';
        this.width = 1000;
        this.height = 500;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.PADDING_WIDTH = 60;
        this.PADDING_HEIGHT = 60;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DiagramComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.reset();
        this.diagramColorService.setTotalColors(this.metricColor);
        if (this.processDefinitionId) {
            this.getProcessDefinitionModel(this.processDefinitionId);
        }
        else {
            this.getRunningProcessDefinitionModel(this.processInstanceId);
        }
    };
    /**
     * @param {?} processInstanceId
     * @return {?}
     */
    DiagramComponent.prototype.getRunningProcessDefinitionModel = /**
     * @param {?} processInstanceId
     * @return {?}
     */
    function (processInstanceId) {
        var _this = this;
        this.diagramsService.getRunningProcessDefinitionModel(processInstanceId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.diagram = new DiagramModel(res);
            _this.raphaelService.setting(_this.diagram.diagramWidth + _this.PADDING_WIDTH, _this.diagram.diagramHeight + _this.PADDING_HEIGHT);
            _this.setMetricValueToDiagramElement(_this.diagram, _this.metricPercentages, _this.metricType);
            _this.success.emit(res);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * @param {?} processDefinitionId
     * @return {?}
     */
    DiagramComponent.prototype.getProcessDefinitionModel = /**
     * @param {?} processDefinitionId
     * @return {?}
     */
    function (processDefinitionId) {
        var _this = this;
        this.diagramsService.getProcessDefinitionModel(processDefinitionId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.diagram = new DiagramModel(res);
            _this.raphaelService.setting(_this.diagram.diagramWidth + _this.PADDING_WIDTH, _this.diagram.diagramHeight + _this.PADDING_HEIGHT);
            _this.setMetricValueToDiagramElement(_this.diagram, _this.metricPercentages, _this.metricType);
            _this.success.emit(res);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * @param {?} diagram
     * @param {?} metrics
     * @param {?} metricType
     * @return {?}
     */
    DiagramComponent.prototype.setMetricValueToDiagramElement = /**
     * @param {?} diagram
     * @param {?} metrics
     * @param {?} metricType
     * @return {?}
     */
    function (diagram, metrics, metricType) {
        var _loop_1 = function (key) {
            if (metrics.hasOwnProperty(key)) {
                /** @type {?} */
                var foundElement = diagram.elements.find((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.id === key; }));
                if (foundElement) {
                    foundElement.value = metrics[key];
                    foundElement.dataType = metricType;
                }
            }
        };
        for (var key in metrics) {
            _loop_1(key);
        }
    };
    /**
     * @return {?}
     */
    DiagramComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.raphaelService.reset();
    };
    DiagramComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-diagram',
                    template: "<div *ngIf=\"diagram\" class=\"diagram\">\n    <div *ngFor=\"let element of diagram.elements\">\n        <div [ngSwitch]=\"element.type\">\n            <div *ngSwitchCase=\"'StartEvent'\">\n                <diagram-start-event [data]=\"element\"></diagram-start-event>\n            </div>\n            <div *ngSwitchCase=\"'ExclusiveGateway'\">\n                <diagram-exclusive-gateway [data]=\"element\"></diagram-exclusive-gateway>\n            </div>\n            <div *ngSwitchCase=\"'InclusiveGateway'\">\n                <diagram-inclusive-gateway [data]=\"element\"></diagram-inclusive-gateway>\n            </div>\n            <div *ngSwitchCase=\"'EventGateway'\">\n                <diagram-event-gateway [data]=\"element\"></diagram-event-gateway>\n            </div>\n            <div *ngSwitchCase=\"'ParallelGateway'\">\n                <diagram-parallel-gateway [data]=\"element\"></diagram-parallel-gateway>\n            </div>\n            <div *ngSwitchCase=\"'EndEvent'\">\n                <diagram-end-event [data]=\"element\"></diagram-end-event>\n            </div>\n            <div *ngSwitchCase=\"'UserTask'\">\n                <diagram-user-task [data]=\"element\"></diagram-user-task>\n            </div>\n            <div *ngSwitchCase=\"'ManualTask'\">\n                <diagram-manual-task [data]=\"element\"></diagram-manual-task>\n            </div>\n            <div *ngSwitchCase=\"'ServiceTask'\">\n                <diagram-container-service-task [data]=\"element\"></diagram-container-service-task>\n            </div>\n            <div *ngSwitchCase=\"'ReceiveTask'\">\n                <diagram-receive-task [data]=\"element\"></diagram-receive-task>\n            </div>\n            <div *ngSwitchCase=\"'ScriptTask'\">\n                <diagram-script-task [data]=\"element\"></diagram-script-task>\n            </div>\n            <div *ngSwitchCase=\"'BusinessRuleTask'\">\n                <diagram-business-rule-task [data]=\"element\"></diagram-business-rule-task>\n            </div>\n            <div *ngSwitchCase=\"'BoundaryEvent'\">\n                <diagram-boundary-event [data]=\"element\"></diagram-boundary-event>\n            </div>\n            <div *ngSwitchCase=\"'ThrowEvent'\">\n                <diagram-throw-event [data]=\"element\"></diagram-throw-event>\n            </div>\n            <div *ngSwitchCase=\"'IntermediateCatchEvent'\">\n                <diagram-intermediate-catching-event [data]=\"element\"></diagram-intermediate-catching-event>\n            </div>\n            <div *ngSwitchCase=\"'SubProcess'\">\n                <diagram-subprocess [data]=\"element\"></diagram-subprocess>\n            </div>\n            <div *ngSwitchCase=\"'EventSubProcess'\">\n                <diagram-event-subprocess [data]=\"element\"></diagram-event-subprocess>\n            </div>\n        </div>\n    </div>\n    <div *ngFor=\"let flow of diagram.flows\">\n        <div [ngSwitch]=\"flow.type\">\n            <div *ngSwitchCase=\"'sequenceFlow'\">\n                <adf-diagram-sequence-flow [flow]=\"flow\"></adf-diagram-sequence-flow>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"diagram.pools\">\n        <diagram-pools [pools]=\"diagram.pools\"></diagram-pools>\n    </div>\n</div>\n",
                    styles: [".diagram{border:1px solid #d3d3d3;overflow:auto}"]
                }] }
    ];
    /** @nocollapse */
    DiagramComponent.ctorParameters = function () { return [
        { type: DiagramColorService },
        { type: RaphaelService },
        { type: DiagramsService }
    ]; };
    DiagramComponent.propDecorators = {
        processDefinitionId: [{ type: Input }],
        processInstanceId: [{ type: Input }],
        metricPercentages: [{ type: Input }],
        metricColor: [{ type: Input }],
        metricType: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return DiagramComponent;
}());
export { DiagramComponent };
if (false) {
    /** @type {?} */
    DiagramComponent.prototype.processDefinitionId;
    /** @type {?} */
    DiagramComponent.prototype.processInstanceId;
    /** @type {?} */
    DiagramComponent.prototype.metricPercentages;
    /** @type {?} */
    DiagramComponent.prototype.metricColor;
    /** @type {?} */
    DiagramComponent.prototype.metricType;
    /** @type {?} */
    DiagramComponent.prototype.width;
    /** @type {?} */
    DiagramComponent.prototype.height;
    /** @type {?} */
    DiagramComponent.prototype.success;
    /** @type {?} */
    DiagramComponent.prototype.error;
    /** @type {?} */
    DiagramComponent.prototype.PADDING_WIDTH;
    /** @type {?} */
    DiagramComponent.prototype.PADDING_HEIGHT;
    /** @type {?} */
    DiagramComponent.prototype.diagram;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.diagramColorService;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.raphaelService;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.diagramsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL2RpYWdyYW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRWpHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTNEO0lBc0NJLDBCQUFvQixtQkFBd0MsRUFDeEMsY0FBOEIsRUFDOUIsZUFBZ0M7UUFGaEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBckJwRCxlQUFVLEdBQVcsRUFBRSxDQUFDO1FBR3hCLFVBQUssR0FBVyxJQUFJLENBQUM7UUFHckIsV0FBTSxHQUFXLEdBQUcsQ0FBQztRQUdyQixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUc3QixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzQixrQkFBYSxHQUFXLEVBQUUsQ0FBQztRQUMzQixtQkFBYyxHQUFXLEVBQUUsQ0FBQztJQU81QixDQUFDOzs7OztJQUVELHNDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUM5QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFX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QyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Z0JBbEdKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtvQkFFdkIsc3RHQUF1Qzs7aUJBQzFDOzs7O2dCQVJRLG1CQUFtQjtnQkFFbkIsY0FBYztnQkFEZCxlQUFlOzs7c0NBU25CLEtBQUs7b0NBR0wsS0FBSztvQ0FHTCxLQUFLOzhCQUdMLEtBQUs7NkJBR0wsS0FBSzt3QkFHTCxLQUFLO3lCQUdMLEtBQUs7MEJBR0wsTUFBTTt3QkFHTixNQUFNOztJQXFFWCx1QkFBQztDQUFBLEFBbkdELElBbUdDO1NBOUZZLGdCQUFnQjs7O0lBQ3pCLCtDQUN5Qjs7SUFFekIsNkNBQ3VCOztJQUV2Qiw2Q0FDdUI7O0lBRXZCLHVDQUNpQjs7SUFFakIsc0NBQ3dCOztJQUV4QixpQ0FDcUI7O0lBRXJCLGtDQUNxQjs7SUFFckIsbUNBQzZCOztJQUU3QixpQ0FDMkI7O0lBRTNCLHlDQUEyQjs7SUFDM0IsMENBQTRCOztJQUU1QixtQ0FBc0I7Ozs7O0lBRVYsK0NBQWdEOzs7OztJQUNoRCwwQ0FBc0M7Ozs7O0lBQ3RDLDJDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpYWdyYW1FbGVtZW50TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZGlhZ3JhbS9kaWFncmFtRWxlbWVudC5tb2RlbCc7XG5pbXBvcnQgeyBEaWFncmFtTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZGlhZ3JhbS9kaWFncmFtLm1vZGVsJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGlhZ3JhbXNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZGlhZ3JhbXMuc2VydmljZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC9yYXBoYWVsLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1kaWFncmFtJyxcbiAgICBzdHlsZVVybHM6IFsnLi9kaWFncmFtLmNvbXBvbmVudC5jc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgQElucHV0KClcbiAgICBwcm9jZXNzRGVmaW5pdGlvbklkOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHByb2Nlc3NJbnN0YW5jZUlkOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIG1ldHJpY1BlcmNlbnRhZ2VzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIG1ldHJpY0NvbG9yOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIG1ldHJpY1R5cGU6IHN0cmluZyA9ICcnO1xuXG4gICAgQElucHV0KClcbiAgICB3aWR0aDogbnVtYmVyID0gMTAwMDtcblxuICAgIEBJbnB1dCgpXG4gICAgaGVpZ2h0OiBudW1iZXIgPSA1MDA7XG5cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBQQURESU5HX1dJRFRIOiBudW1iZXIgPSA2MDtcbiAgICBQQURESU5HX0hFSUdIVDogbnVtYmVyID0gNjA7XG5cbiAgICBkaWFncmFtOiBEaWFncmFtTW9kZWw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkaWFncmFtc1NlcnZpY2U6IERpYWdyYW1zU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2Uuc2V0VG90YWxDb2xvcnModGhpcy5tZXRyaWNDb2xvcik7XG4gICAgICAgIGlmICh0aGlzLnByb2Nlc3NEZWZpbml0aW9uSWQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UHJvY2Vzc0RlZmluaXRpb25Nb2RlbCh0aGlzLnByb2Nlc3NEZWZpbml0aW9uSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRSdW5uaW5nUHJvY2Vzc0RlZmluaXRpb25Nb2RlbCh0aGlzLnByb2Nlc3NJbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFJ1bm5pbmdQcm9jZXNzRGVmaW5pdGlvbk1vZGVsKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaWFncmFtc1NlcnZpY2UuZ2V0UnVubmluZ1Byb2Nlc3NEZWZpbml0aW9uTW9kZWwocHJvY2Vzc0luc3RhbmNlSWQpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlhZ3JhbSA9IG5ldyBEaWFncmFtTW9kZWwocmVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJhcGhhZWxTZXJ2aWNlLnNldHRpbmcodGhpcy5kaWFncmFtLmRpYWdyYW1XaWR0aCArIHRoaXMuUEFERElOR19XSURUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFncmFtLmRpYWdyYW1IZWlnaHQgKyB0aGlzLlBBRERJTkdfSEVJR0hUKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1ldHJpY1ZhbHVlVG9EaWFncmFtRWxlbWVudCh0aGlzLmRpYWdyYW0sIHRoaXMubWV0cmljUGVyY2VudGFnZXMsIHRoaXMubWV0cmljVHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQocmVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRQcm9jZXNzRGVmaW5pdGlvbk1vZGVsKHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRpYWdyYW1zU2VydmljZS5nZXRQcm9jZXNzRGVmaW5pdGlvbk1vZGVsKHByb2Nlc3NEZWZpbml0aW9uSWQpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlhZ3JhbSA9IG5ldyBEaWFncmFtTW9kZWwocmVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJhcGhhZWxTZXJ2aWNlLnNldHRpbmcodGhpcy5kaWFncmFtLmRpYWdyYW1XaWR0aCArIHRoaXMuUEFERElOR19XSURUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFncmFtLmRpYWdyYW1IZWlnaHQgKyB0aGlzLlBBRERJTkdfSEVJR0hUKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1ldHJpY1ZhbHVlVG9EaWFncmFtRWxlbWVudCh0aGlzLmRpYWdyYW0sIHRoaXMubWV0cmljUGVyY2VudGFnZXMsIHRoaXMubWV0cmljVHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQocmVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzZXRNZXRyaWNWYWx1ZVRvRGlhZ3JhbUVsZW1lbnQoZGlhZ3JhbTogRGlhZ3JhbU1vZGVsLCBtZXRyaWNzOiBhbnksIG1ldHJpY1R5cGU6IHN0cmluZykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRyaWNzKSB7XG4gICAgICAgICAgICBpZiAobWV0cmljcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRFbGVtZW50OiBEaWFncmFtRWxlbWVudE1vZGVsID0gZGlhZ3JhbS5lbGVtZW50cy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudDogRGlhZ3JhbUVsZW1lbnRNb2RlbCkgPT4gZWxlbWVudC5pZCA9PT0ga2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kRWxlbWVudC52YWx1ZSA9IG1ldHJpY3Nba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRFbGVtZW50LmRhdGFUeXBlID0gbWV0cmljVHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5yYXBoYWVsU2VydmljZS5yZXNldCgpO1xuICAgIH1cbn1cbiJdfQ==