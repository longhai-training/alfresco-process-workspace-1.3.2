/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
var DiagramIconMessageComponent = /** @class */ (function () {
    function DiagramIconMessageComponent(elementRef) {
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
    }
    /**
     * @return {?}
     */
    DiagramIconMessageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.position = { x: this.data.x + 6, y: this.data.y + 6 };
        this.options.stroke = 'none';
        this.options.fillColors = '#585858';
        this.options.strokeWidth = 1;
    };
    DiagramIconMessageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-icon-message',
                    template: "<raphael-icon-message [position]=\"position\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n                   [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-icon-message>"
                }] }
    ];
    /** @nocollapse */
    DiagramIconMessageComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DiagramIconMessageComponent.propDecorators = {
        data: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramIconMessageComponent;
}());
export { DiagramIconMessageComponent };
if (false) {
    /** @type {?} */
    DiagramIconMessageComponent.prototype.data;
    /** @type {?} */
    DiagramIconMessageComponent.prototype.error;
    /** @type {?} */
    DiagramIconMessageComponent.prototype.position;
    /** @type {?} */
    DiagramIconMessageComponent.prototype.options;
    /** @type {?} */
    DiagramIconMessageComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1pY29uLW1lc3NhZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9pY29ucy9kaWFncmFtLWljb24tbWVzc2FnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNGO0lBZUkscUNBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFOekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJM0IsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBRWxDLENBQUM7Ozs7SUFFN0MsOENBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O2dCQXZCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsaVBBQW9EO2lCQUN2RDs7OztnQkFMbUIsVUFBVTs7O3VCQU96QixLQUFLO3dCQUdMLE1BQU07O0lBZ0JYLGtDQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0FwQlksMkJBQTJCOzs7SUFDcEMsMkNBQ1U7O0lBRVYsNENBQzJCOztJQUUzQiwrQ0FBYzs7SUFFZCw4Q0FBOEU7O0lBRWxFLGlEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLWljb24tbWVzc2FnZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RpYWdyYW0taWNvbi1tZXNzYWdlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtSWNvbk1lc3NhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBwb3NpdGlvbjogYW55O1xuXG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAnJ307XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0ge3g6IHRoaXMuZGF0YS54ICsgNiwgeTogdGhpcy5kYXRhLnkgKyA2fTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlID0gJ25vbmUnO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbENvbG9ycyA9ICcjNTg1ODU4JztcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZVdpZHRoID0gMTtcbiAgICB9XG59XG4iXX0=