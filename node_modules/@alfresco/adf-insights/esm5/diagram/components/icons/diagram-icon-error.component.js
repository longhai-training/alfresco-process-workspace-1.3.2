/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
var DiagramIconErrorComponent = /** @class */ (function () {
    function DiagramIconErrorComponent(elementRef) {
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
    }
    /**
     * @return {?}
     */
    DiagramIconErrorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.position = { x: this.data.x - 1, y: this.data.y - 1 };
        this.options.stroke = 'black';
        this.options.fillColors = this.fillColor;
        this.options.strokeWidth = 1;
    };
    DiagramIconErrorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'diagram-icon-error',
                    template: "<raphael-icon-error [position]=\"position\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n                   [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-icon-error>"
                }] }
    ];
    /** @nocollapse */
    DiagramIconErrorComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DiagramIconErrorComponent.propDecorators = {
        data: [{ type: Input }],
        fillColor: [{ type: Input }],
        error: [{ type: Output }]
    };
    return DiagramIconErrorComponent;
}());
export { DiagramIconErrorComponent };
if (false) {
    /** @type {?} */
    DiagramIconErrorComponent.prototype.data;
    /** @type {?} */
    DiagramIconErrorComponent.prototype.fillColor;
    /** @type {?} */
    DiagramIconErrorComponent.prototype.error;
    /** @type {?} */
    DiagramIconErrorComponent.prototype.position;
    /** @type {?} */
    DiagramIconErrorComponent.prototype.options;
    /** @type {?} */
    DiagramIconErrorComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1pY29uLWVycm9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvaWNvbnMvZGlhZ3JhbS1pY29uLWVycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0Y7SUFrQkksbUNBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFOekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJM0IsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBRWxDLENBQUM7Ozs7SUFFN0MsNENBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDOztnQkExQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLDZPQUFrRDtpQkFDckQ7Ozs7Z0JBTG1CLFVBQVU7Ozt1QkFPekIsS0FBSzs0QkFHTCxLQUFLO3dCQUdMLE1BQU07O0lBZ0JYLGdDQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0F2QlkseUJBQXlCOzs7SUFDbEMseUNBQ1U7O0lBRVYsOENBQ2tCOztJQUVsQiwwQ0FDMkI7O0lBRTNCLDZDQUFjOztJQUVkLDRDQUE4RTs7SUFFbEUsK0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0taWNvbi1lcnJvcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RpYWdyYW0taWNvbi1lcnJvci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUljb25FcnJvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcjogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBwb3NpdGlvbjogYW55O1xuXG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAnJ307XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0ge3g6IHRoaXMuZGF0YS54IC0gMSwgeTogdGhpcy5kYXRhLnkgLSAxfTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlID0gJ2JsYWNrJztcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSB0aGlzLmZpbGxDb2xvcjtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZVdpZHRoID0gMTtcbiAgICB9XG59XG4iXX0=