/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DiagramElementModel } from './diagramElement.model';
import { DiagramFlowElementModel } from './diagramFlowElement.model';
import { DiagramPoolElementModel } from './diagramPoolElement.model';
var DiagramModel = /** @class */ (function () {
    function DiagramModel(obj) {
        var _this = this;
        this.elements = [];
        this.flows = [];
        this.pools = [];
        if (obj) {
            this.diagramBeginX = obj.diagramBeginX;
            this.diagramBeginY = obj.diagramBeginY;
            this.diagramHeight = obj.diagramHeight;
            this.diagramWidth = obj.diagramWidth;
            if (obj.elements) {
                obj.elements.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.elements.push(new DiagramElementModel(element));
                }));
            }
            if (obj.flows) {
                obj.flows.forEach((/**
                 * @param {?} flow
                 * @return {?}
                 */
                function (flow) {
                    _this.flows.push(new DiagramFlowElementModel(flow));
                }));
            }
            if (obj.pools) {
                obj.pools.forEach((/**
                 * @param {?} pool
                 * @return {?}
                 */
                function (pool) {
                    _this.pools.push(new DiagramPoolElementModel(pool));
                }));
            }
        }
    }
    return DiagramModel;
}());
export { DiagramModel };
if (false) {
    /** @type {?} */
    DiagramModel.prototype.diagramBeginX;
    /** @type {?} */
    DiagramModel.prototype.diagramBeginY;
    /** @type {?} */
    DiagramModel.prototype.diagramHeight;
    /** @type {?} */
    DiagramModel.prototype.diagramWidth;
    /** @type {?} */
    DiagramModel.prototype.elements;
    /** @type {?} */
    DiagramModel.prototype.flows;
    /** @type {?} */
    DiagramModel.prototype.pools;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL21vZGVscy9kaWFncmFtL2RpYWdyYW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDckUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFckU7SUFTSSxzQkFBWSxHQUFTO1FBQXJCLGlCQXNCQztRQTFCRCxhQUFRLEdBQTBCLEVBQUUsQ0FBQztRQUNyQyxVQUFLLEdBQThCLEVBQUUsQ0FBQztRQUN0QyxVQUFLLEdBQThCLEVBQUUsQ0FBQztRQUdsQyxJQUFJLEdBQUcsRUFBRTtZQUNMLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztZQUN2QyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7WUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztZQUNyQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2QsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O2dCQUFDLFVBQUMsT0FBNEI7b0JBQzlDLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDekQsQ0FBQyxFQUFDLENBQUM7YUFDTjtZQUNELElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtnQkFDWCxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7Z0JBQUMsVUFBQyxJQUE2QjtvQkFDNUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxDQUFDLEVBQUMsQ0FBQzthQUNOO1lBQ0QsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO2dCQUNYLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTzs7OztnQkFBQyxVQUFDLElBQTZCO29CQUM1QyxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELENBQUMsRUFBQyxDQUFDO2FBQ047U0FDSjtJQUNMLENBQUM7SUFDTCxtQkFBQztBQUFELENBQUMsQUFoQ0QsSUFnQ0M7Ozs7SUEvQkcscUNBQXNCOztJQUN0QixxQ0FBc0I7O0lBQ3RCLHFDQUFzQjs7SUFDdEIsb0NBQXFCOztJQUNyQixnQ0FBcUM7O0lBQ3JDLDZCQUFzQzs7SUFDdEMsNkJBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlhZ3JhbUVsZW1lbnRNb2RlbCB9IGZyb20gJy4vZGlhZ3JhbUVsZW1lbnQubW9kZWwnO1xuaW1wb3J0IHsgRGlhZ3JhbUZsb3dFbGVtZW50TW9kZWwgfSBmcm9tICcuL2RpYWdyYW1GbG93RWxlbWVudC5tb2RlbCc7XG5pbXBvcnQgeyBEaWFncmFtUG9vbEVsZW1lbnRNb2RlbCB9IGZyb20gJy4vZGlhZ3JhbVBvb2xFbGVtZW50Lm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIERpYWdyYW1Nb2RlbCB7XG4gICAgZGlhZ3JhbUJlZ2luWDogbnVtYmVyO1xuICAgIGRpYWdyYW1CZWdpblk6IG51bWJlcjtcbiAgICBkaWFncmFtSGVpZ2h0OiBudW1iZXI7XG4gICAgZGlhZ3JhbVdpZHRoOiBudW1iZXI7XG4gICAgZWxlbWVudHM6IERpYWdyYW1FbGVtZW50TW9kZWxbXSA9IFtdO1xuICAgIGZsb3dzOiBEaWFncmFtRmxvd0VsZW1lbnRNb2RlbFtdID0gW107XG4gICAgcG9vbHM6IERpYWdyYW1Qb29sRWxlbWVudE1vZGVsW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmRpYWdyYW1CZWdpblggPSBvYmouZGlhZ3JhbUJlZ2luWDtcbiAgICAgICAgICAgIHRoaXMuZGlhZ3JhbUJlZ2luWSA9IG9iai5kaWFncmFtQmVnaW5ZO1xuICAgICAgICAgICAgdGhpcy5kaWFncmFtSGVpZ2h0ID0gb2JqLmRpYWdyYW1IZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmRpYWdyYW1XaWR0aCA9IG9iai5kaWFncmFtV2lkdGg7XG4gICAgICAgICAgICBpZiAob2JqLmVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgb2JqLmVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQ6IERpYWdyYW1FbGVtZW50TW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5wdXNoKG5ldyBEaWFncmFtRWxlbWVudE1vZGVsKGVsZW1lbnQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvYmouZmxvd3MpIHtcbiAgICAgICAgICAgICAgICBvYmouZmxvd3MuZm9yRWFjaCgoZmxvdzogRGlhZ3JhbUZsb3dFbGVtZW50TW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbG93cy5wdXNoKG5ldyBEaWFncmFtRmxvd0VsZW1lbnRNb2RlbChmbG93KSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2JqLnBvb2xzKSB7XG4gICAgICAgICAgICAgICAgb2JqLnBvb2xzLmZvckVhY2goKHBvb2w6IERpYWdyYW1Qb29sRWxlbWVudE1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9vbHMucHVzaChuZXcgRGlhZ3JhbVBvb2xFbGVtZW50TW9kZWwocG9vbCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19