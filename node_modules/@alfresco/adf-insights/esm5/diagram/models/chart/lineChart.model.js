/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Chart } from './chart.model';
var LineChart = /** @class */ (function (_super) {
    tslib_1.__extends(LineChart, _super);
    function LineChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.labels = obj && obj.columnNames.slice(1, obj.columnNames.length);
        obj.rows.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.datasets.push({ data: value.slice(1, value.length), label: value[0] });
        }));
        return _this;
    }
    return LineChart;
}(Chart));
export { LineChart };
if (false) {
    /** @type {?} */
    LineChart.prototype.title;
    /** @type {?} */
    LineChart.prototype.titleKey;
    /** @type {?} */
    LineChart.prototype.labels;
    /** @type {?} */
    LineChart.prototype.datasets;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZUNoYXJ0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vbW9kZWxzL2NoYXJ0L2xpbmVDaGFydC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0QztJQUErQixxQ0FBSztJQU1oQyxtQkFBWSxHQUFTO1FBQXJCLFlBQ0ksa0JBQU0sR0FBRyxDQUFDLFNBUWI7UUFaRCxZQUFNLEdBQWEsRUFBRSxDQUFDO1FBQ3RCLGNBQVEsR0FBVSxFQUFFLENBQUM7UUFJakIsS0FBSSxDQUFDLEtBQUssR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7UUFDdEMsS0FBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUM7UUFDNUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEUsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQyxLQUFVO1lBQ3hCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUM5RSxDQUFDLEVBQUMsQ0FBQzs7SUFDUCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDLEFBaEJELENBQStCLEtBQUssR0FnQm5DOzs7O0lBZkcsMEJBQWM7O0lBQ2QsNkJBQWlCOztJQUNqQiwyQkFBc0I7O0lBQ3RCLDZCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENoYXJ0IH0gZnJvbSAnLi9jaGFydC5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBMaW5lQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICB0aXRsZUtleTogc3RyaW5nO1xuICAgIGxhYmVsczogc3RyaW5nW10gPSBbXTtcbiAgICBkYXRhc2V0czogYW55W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBzdXBlcihvYmopO1xuICAgICAgICB0aGlzLnRpdGxlID0gb2JqICYmIG9iai50aXRsZSB8fCBudWxsO1xuICAgICAgICB0aGlzLnRpdGxlS2V5ID0gb2JqICYmIG9iai50aXRsZUtleSB8fCBudWxsO1xuICAgICAgICB0aGlzLmxhYmVscyA9IG9iaiAmJiBvYmouY29sdW1uTmFtZXMuc2xpY2UoMSwgb2JqLmNvbHVtbk5hbWVzLmxlbmd0aCk7XG5cbiAgICAgICAgb2JqLnJvd3MuZm9yRWFjaCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhc2V0cy5wdXNoKHtkYXRhOiB2YWx1ZS5zbGljZSgxLCB2YWx1ZS5sZW5ndGgpLCBsYWJlbDogdmFsdWVbMF19KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19