/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';
import { DiagramsModule } from './diagram/diagram.module';
import { AnalyticsProcessModule } from './analytics-process/analytics-process.module';
import { MaterialModule } from './material.module';
import { DiagramsService } from './diagram/services/diagrams.service';
import { DiagramColorService } from './diagram/services/diagram-color.service';
import { RaphaelService } from './diagram/components/raphael/raphael.service';
import { AnalyticsService } from './analytics-process/services/analytics.service';
/**
 * @return {?}
 */
export function providers() {
    return [
        AnalyticsService,
        DiagramsService,
        DiagramColorService,
        RaphaelService
    ];
}
const ɵ0 = {
    name: 'adf-insights',
    source: 'assets/adf-insights'
};
export class InsightsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: InsightsModule,
            providers: [
                ...providers(),
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-insights',
                        source: 'assets/adf-insights'
                    }
                }
            ]
        };
    }
    /**
     * @return {?}
     */
    static forChild() {
        return {
            ngModule: InsightsModuleLazy
        };
    }
}
InsightsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule.forChild(),
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    DiagramsModule,
                    AnalyticsProcessModule
                ],
                providers: [
                    ...providers(),
                    {
                        provide: TRANSLATION_PROVIDER,
                        multi: true,
                        useValue: ɵ0
                    }
                ],
                exports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    DiagramsModule,
                    AnalyticsProcessModule
                ]
            },] }
];
export class InsightsModuleLazy {
}
InsightsModuleLazy.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CoreModule.forChild(),
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    DiagramsModule,
                    AnalyticsProcessModule
                ],
                exports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MaterialModule,
                    DiagramsModule,
                    AnalyticsProcessModule
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zaWdodHMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImluc2lnaHRzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFdEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7Ozs7QUFFbEYsTUFBTSxVQUFVLFNBQVM7SUFDckIsT0FBTztRQUNILGdCQUFnQjtRQUNoQixlQUFlO1FBQ2YsbUJBQW1CO1FBQ25CLGNBQWM7S0FDakIsQ0FBQztBQUNOLENBQUM7V0FpQnFCO0lBQ04sSUFBSSxFQUFFLGNBQWM7SUFDcEIsTUFBTSxFQUFFLHFCQUFxQjtDQUNoQztBQVliLE1BQU0sT0FBTyxjQUFjOzs7O0lBQ3ZCLE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTztZQUNILFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDUCxHQUFHLFNBQVMsRUFBRTtnQkFDZDtvQkFDSSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixLQUFLLEVBQUUsSUFBSTtvQkFDWCxRQUFRLEVBQUU7d0JBQ04sSUFBSSxFQUFFLGNBQWM7d0JBQ3BCLE1BQU0sRUFBRSxxQkFBcUI7cUJBQ2hDO2lCQUNKO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQzs7OztJQUVELE1BQU0sQ0FBQyxRQUFRO1FBQ1gsT0FBTztZQUNILFFBQVEsRUFBRSxrQkFBa0I7U0FDL0IsQ0FBQztJQUNOLENBQUM7OztZQXBESixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLFVBQVUsQ0FBQyxRQUFRLEVBQUU7b0JBQ3JCLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLGNBQWM7b0JBQ2QsY0FBYztvQkFDZCxzQkFBc0I7aUJBQ3pCO2dCQUNELFNBQVMsRUFBRTtvQkFDUCxHQUFHLFNBQVMsRUFBRTtvQkFDZDt3QkFDSSxPQUFPLEVBQUUsb0JBQW9CO3dCQUM3QixLQUFLLEVBQUUsSUFBSTt3QkFDWCxRQUFRLElBR1A7cUJBQ0o7aUJBQ0o7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLGNBQWM7b0JBQ2QsY0FBYztvQkFDZCxzQkFBc0I7aUJBQ3pCO2FBQ0o7O0FBNkNELE1BQU0sT0FBTyxrQkFBa0I7OztZQW5COUIsUUFBUSxTQUFDO2dCQUNOLE9BQU8sRUFBRTtvQkFDTCxVQUFVLENBQUMsUUFBUSxFQUFFO29CQUNyQixZQUFZO29CQUNaLFdBQVc7b0JBQ1gsbUJBQW1CO29CQUNuQixjQUFjO29CQUNkLGNBQWM7b0JBQ2Qsc0JBQXNCO2lCQUN6QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsWUFBWTtvQkFDWixXQUFXO29CQUNYLG1CQUFtQjtvQkFDbkIsY0FBYztvQkFDZCxjQUFjO29CQUNkLHNCQUFzQjtpQkFDekI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBUUkFOU0xBVElPTl9QUk9WSURFUiB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbmltcG9ydCB7IERpYWdyYW1zTW9kdWxlIH0gZnJvbSAnLi9kaWFncmFtL2RpYWdyYW0ubW9kdWxlJztcbmltcG9ydCB7IEFuYWx5dGljc1Byb2Nlc3NNb2R1bGUgfSBmcm9tICcuL2FuYWx5dGljcy1wcm9jZXNzL2FuYWx5dGljcy1wcm9jZXNzLm1vZHVsZSc7XG5cbmltcG9ydCB7IE1hdGVyaWFsTW9kdWxlIH0gZnJvbSAnLi9tYXRlcmlhbC5tb2R1bGUnO1xuaW1wb3J0IHsgRGlhZ3JhbXNTZXJ2aWNlIH0gZnJvbSAnLi9kaWFncmFtL3NlcnZpY2VzL2RpYWdyYW1zLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGlhZ3JhbUNvbG9yU2VydmljZSB9IGZyb20gJy4vZGlhZ3JhbS9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuL2RpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL3JhcGhhZWwuc2VydmljZSc7XG5pbXBvcnQgeyBBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSAnLi9hbmFseXRpY3MtcHJvY2Vzcy9zZXJ2aWNlcy9hbmFseXRpY3Muc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlcnMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgQW5hbHl0aWNzU2VydmljZSxcbiAgICAgICAgRGlhZ3JhbXNTZXJ2aWNlLFxuICAgICAgICBEaWFncmFtQ29sb3JTZXJ2aWNlLFxuICAgICAgICBSYXBoYWVsU2VydmljZVxuICAgIF07XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb3JlTW9kdWxlLmZvckNoaWxkKCksXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIE1hdGVyaWFsTW9kdWxlLFxuICAgICAgICBEaWFncmFtc01vZHVsZSxcbiAgICAgICAgQW5hbHl0aWNzUHJvY2Vzc01vZHVsZVxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC4uLnByb3ZpZGVycygpLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUUkFOU0xBVElPTl9QUk9WSURFUixcbiAgICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYWRmLWluc2lnaHRzJyxcbiAgICAgICAgICAgICAgICBzb3VyY2U6ICdhc3NldHMvYWRmLWluc2lnaHRzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIE1hdGVyaWFsTW9kdWxlLFxuICAgICAgICBEaWFncmFtc01vZHVsZSxcbiAgICAgICAgQW5hbHl0aWNzUHJvY2Vzc01vZHVsZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSW5zaWdodHNNb2R1bGUge1xuICAgIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEluc2lnaHRzTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ucHJvdmlkZXJzKCksXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBUUkFOU0xBVElPTl9QUk9WSURFUixcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWRmLWluc2lnaHRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJ2Fzc2V0cy9hZGYtaW5zaWdodHMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGZvckNoaWxkKCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEluc2lnaHRzTW9kdWxlTGF6eVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvcmVNb2R1bGUuZm9yQ2hpbGQoKSxcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZSxcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgTWF0ZXJpYWxNb2R1bGUsXG4gICAgICAgIERpYWdyYW1zTW9kdWxlLFxuICAgICAgICBBbmFseXRpY3NQcm9jZXNzTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgRm9ybXNNb2R1bGUsXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgICAgIE1hdGVyaWFsTW9kdWxlLFxuICAgICAgICBEaWFncmFtc01vZHVsZSxcbiAgICAgICAgQW5hbHl0aWNzUHJvY2Vzc01vZHVsZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgSW5zaWdodHNNb2R1bGVMYXp5IHt9XG4iXX0=