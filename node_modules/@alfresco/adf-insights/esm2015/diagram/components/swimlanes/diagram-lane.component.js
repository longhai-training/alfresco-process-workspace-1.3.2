/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
export class DiagramLaneComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.options = { stroke: '#000000', fillColors: 'none', fillOpacity: '', strokeWidth: '1', radius: 0 };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.rectLeftCorner = { x: this.lane.x, y: this.lane.y };
        this.width = this.lane.width;
        this.height = this.lane.height;
        this.textPosition = { x: this.lane.x + 10, y: this.lane.y + (this.lane.height / 2) };
        this.text = this.lane.name;
        this.textTransform = 'r270';
    }
}
DiagramLaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-lane',
                template: "<raphael-rect [leftCorner]=\"rectLeftCorner\" [width]=\"width\" [height]=\"height\" [radius]=\"options.radius\"\n              [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n              [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-rect>\n<raphael-text [text]=\"text\" [position]=\"textPosition\" [transform]=\"textTransform\"></raphael-text>"
            }] }
];
/** @nocollapse */
DiagramLaneComponent.ctorParameters = () => [
    { type: ElementRef }
];
DiagramLaneComponent.propDecorators = {
    lane: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramLaneComponent.prototype.lane;
    /** @type {?} */
    DiagramLaneComponent.prototype.error;
    /** @type {?} */
    DiagramLaneComponent.prototype.rectLeftCorner;
    /** @type {?} */
    DiagramLaneComponent.prototype.width;
    /** @type {?} */
    DiagramLaneComponent.prototype.height;
    /** @type {?} */
    DiagramLaneComponent.prototype.textPosition;
    /** @type {?} */
    DiagramLaneComponent.prototype.text;
    /** @type {?} */
    DiagramLaneComponent.prototype.textTransform;
    /** @type {?} */
    DiagramLaneComponent.prototype.options;
    /** @type {?} */
    DiagramLaneComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1sYW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvc3dpbWxhbmVzL2RpYWdyYW0tbGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTNGLE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFnQjdCLFlBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFYekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFTM0IsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFFekQsQ0FBQzs7OztJQUU3QyxRQUFRO1FBQ0osSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFL0IsSUFBSSxDQUFDLFlBQVksR0FBSSxFQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLEVBQUMsQ0FBQztRQUN0RixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7OztZQTlCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLDhaQUE0QzthQUMvQzs7OztZQUxtQixVQUFVOzs7bUJBT3pCLEtBQUs7b0JBR0wsTUFBTTs7OztJQUhQLG9DQUNVOztJQUVWLHFDQUMyQjs7SUFFM0IsOENBQW9COztJQUNwQixxQ0FBVzs7SUFDWCxzQ0FBWTs7SUFFWiw0Q0FBa0I7O0lBQ2xCLG9DQUFhOztJQUNiLDZDQUFzQjs7SUFDdEIsdUNBQXFHOztJQUV6RiwwQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4gLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1sYW5lJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS1sYW5lLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtTGFuZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBsYW5lOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHJlY3RMZWZ0Q29ybmVyOiBhbnk7XG4gICAgd2lkdGg6IGFueTtcbiAgICBoZWlnaHQ6IGFueTtcblxuICAgIHRleHRQb3NpdGlvbjogYW55O1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB0ZXh0VHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJyMwMDAwMDAnLCBmaWxsQ29sb3JzOiAnbm9uZScsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6ICcxJywgcmFkaXVzOiAwfTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucmVjdExlZnRDb3JuZXIgPSB7eDogdGhpcy5sYW5lLngsIHk6IHRoaXMubGFuZS55fTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubGFuZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmxhbmUuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMudGV4dFBvc2l0aW9uID0gIHt4OiB0aGlzLmxhbmUueCArIDEwLCB5OiB0aGlzLmxhbmUueSArICggdGhpcy5sYW5lLmhlaWdodCAvIDIgKX07XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMubGFuZS5uYW1lO1xuICAgICAgICB0aGlzLnRleHRUcmFuc2Zvcm0gPSAncjI3MCc7XG4gICAgfVxufVxuIl19