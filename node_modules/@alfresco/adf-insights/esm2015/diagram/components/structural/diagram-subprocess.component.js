/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
export class DiagramSubprocessComponent {
    /**
     * @param {?} elementRef
     * @param {?} diagramColorService
     */
    constructor(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: 4 };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.rectLeftCorner = { x: this.data.x, y: this.data.y };
        this.width = this.data.width;
        this.height = this.data.height;
        this.options.fillColors = 'none';
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.strokeWidth = 1;
    }
}
DiagramSubprocessComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-subprocess',
                template: "<raphael-rect [leftCorner]=\"rectLeftCorner\" [width]=\"width\" [height]=\"height\" [radius]=\"options.radius\"\n              [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n              [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-rect>\n<diagram-tooltip [data]=\"data\"></diagram-tooltip>\n"
            }] }
];
/** @nocollapse */
DiagramSubprocessComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DiagramColorService }
];
DiagramSubprocessComponent.propDecorators = {
    data: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramSubprocessComponent.prototype.data;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.error;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.rectLeftCorner;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.width;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.height;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.options;
    /** @type {?} */
    DiagramSubprocessComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramSubprocessComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1zdWJwcm9jZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvc3RydWN0dXJhbC9kaWFncmFtLXN1YnByb2Nlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQU0zRSxNQUFNLE9BQU8sMEJBQTBCOzs7OztJQWFuQyxZQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBVDVELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBTTNCLFlBQU8sR0FBUSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBQyxDQUFDO0lBRzFCLENBQUM7Ozs7SUFFaEUsUUFBUTtRQUNKLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRS9CLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7O1lBNUJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5Qiw0V0FBa0Q7YUFDckQ7Ozs7WUFObUIsVUFBVTtZQUNyQixtQkFBbUI7OzttQkFPdkIsS0FBSztvQkFHTCxNQUFNOzs7O0lBSFAsMENBQ1U7O0lBRVYsMkNBQzJCOztJQUUzQixvREFBb0I7O0lBQ3BCLDJDQUFXOztJQUNYLDRDQUFZOztJQUVaLDZDQUF5Rjs7SUFFN0UsZ0RBQTZCOzs7OztJQUM3Qix5REFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4gLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLXN1YnByb2Nlc3MnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kaWFncmFtLXN1YnByb2Nlc3MuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1TdWJwcm9jZXNzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgcmVjdExlZnRDb3JuZXI6IGFueTtcbiAgICB3aWR0aDogYW55O1xuICAgIGhlaWdodDogYW55O1xuXG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAnJywgcmFkaXVzOiA0fTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhZ3JhbUNvbG9yU2VydmljZTogRGlhZ3JhbUNvbG9yU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnJlY3RMZWZ0Q29ybmVyID0ge3g6IHRoaXMuZGF0YS54LCB5OiB0aGlzLmRhdGEueX07XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmRhdGEud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5kYXRhLmhlaWdodDtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbENvbG9ycyA9ICdub25lJztcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLk1BSU5fU1RST0tFX0NPTE9SKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZVdpZHRoID0gMTtcbiAgICB9XG59XG4iXX0=