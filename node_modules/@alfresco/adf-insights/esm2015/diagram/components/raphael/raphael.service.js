/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
export class RaphaelService {
    constructor() {
        this.width = 300;
        this.height = 400;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getInstance(element) {
        if (!this.paper) {
            this.ctx = element.nativeElement;
            this.refresh();
        }
        return this.paper;
    }
    /**
     * @private
     * @return {?}
     */
    refresh() {
        this.ngOnDestroy();
        this.paper = this.getPaperBuilder(this.ctx);
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    getPaperBuilder(ctx) {
        if (typeof Raphael === 'undefined') {
            throw new Error('insights configuration issue: Embedding Chart.js lib is mandatory');
        }
        /** @type {?} */
        const paper = new Raphael(ctx, this.width, this.height);
        return paper;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.paper) {
            this.paper.clear();
            this.paper = void 0;
        }
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    setting(width, height) {
        this.width = width;
        this.height = height;
    }
    /**
     * @return {?}
     */
    reset() {
        this.ngOnDestroy();
    }
}
RaphaelService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RaphaelService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    RaphaelService.prototype.paper;
    /** @type {?} */
    RaphaelService.prototype.width;
    /** @type {?} */
    RaphaelService.prototype.height;
    /**
     * @type {?}
     * @private
     */
    RaphaelService.prototype.ctx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL3JhcGhhZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sZUFBZSxDQUFDO0FBS3ZELE1BQU0sT0FBTyxjQUFjO0lBT3ZCO1FBSkEsVUFBSyxHQUFXLEdBQUcsQ0FBQztRQUNwQixXQUFNLEdBQVcsR0FBRyxDQUFDO0lBSXJCLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLE9BQVk7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDYixJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRU8sT0FBTztRQUNYLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBRU0sZUFBZSxDQUFDLEdBQVE7UUFDM0IsSUFBSSxPQUFPLE9BQU8sS0FBSyxXQUFXLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ3hGOztjQUNLLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0wsQ0FBQzs7Ozs7O0lBRU0sT0FBTyxDQUFDLEtBQWEsRUFBRSxNQUFjO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7OztZQTlDSixVQUFVOzs7Ozs7SUFHUCwrQkFBVzs7SUFDWCwrQkFBb0I7O0lBQ3BCLGdDQUFxQjs7Ozs7SUFDckIsNkJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSAsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5kZWNsYXJlIGxldCBSYXBoYWVsOiBhbnk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSYXBoYWVsU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgICBwYXBlcjogYW55O1xuICAgIHdpZHRoOiBudW1iZXIgPSAzMDA7XG4gICAgaGVpZ2h0OiBudW1iZXIgPSA0MDA7XG4gICAgcHJpdmF0ZSBjdHg6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbnN0YW5jZShlbGVtZW50OiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAoIXRoaXMucGFwZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFwZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZWZyZXNoKCk6IGFueSB7XG4gICAgICAgIHRoaXMubmdPbkRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5wYXBlciA9IHRoaXMuZ2V0UGFwZXJCdWlsZGVyKHRoaXMuY3R4KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UGFwZXJCdWlsZGVyKGN0eDogYW55KTogYW55IHtcbiAgICAgICAgaWYgKHR5cGVvZiBSYXBoYWVsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnNpZ2h0cyBjb25maWd1cmF0aW9uIGlzc3VlOiBFbWJlZGRpbmcgQ2hhcnQuanMgbGliIGlzIG1hbmRhdG9yeScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcGVyID0gbmV3IFJhcGhhZWwoY3R4LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHJldHVybiBwYXBlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMucGFwZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFwZXIuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMucGFwZXIgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0dGluZyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldCgpOiBhbnkge1xuICAgICAgICB0aGlzLm5nT25EZXN0cm95KCk7XG4gICAgfVxufVxuIl19