/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelPentagonDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const opts = {
            'stroke-width': this.strokeWidth,
            'fill': this.fillColors,
            'stroke': this.stroke,
            'fill-opacity': this.fillOpacity,
            'stroke-linejoin': 'bevel'
        };
        this.draw(this.center, opts);
    }
    /**
     * @param {?} center
     * @param {?=} opts
     * @return {?}
     */
    draw(center, opts) {
        /** @type {?} */
        const shape = this.paper.path('M 20.327514,22.344972 L 11.259248,22.344216 L 8.4577203,13.719549' +
            ' L 15.794545,8.389969 L 23.130481,13.720774 L 20.327514,22.344972 z').attr(opts);
        shape.transform('T' + (center.x + 4) + ',' + (center.y + 4));
    }
}
RaphaelPentagonDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-pentagon, raphael-pentagon' },] }
];
/** @nocollapse */
RaphaelPentagonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelPentagonDirective.propDecorators = {
    center: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    strokeWidth: [{ type: Input }],
    fillOpacity: [{ type: Input }],
    strokeLinejoin: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelPentagonDirective.prototype.center;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.stroke;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.strokeLinejoin;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.error;
    /** @type {?} */
    RaphaelPentagonDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1wZW50YWdvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1wZW50YWdvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFNbkQsTUFBTSxPQUFPLHdCQUF5QixTQUFRLFdBQVc7Ozs7O0lBc0JyRCxZQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUN0QyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRm5CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFGekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFLM0IsQ0FBQzs7OztJQUVELFFBQVE7O2NBRUUsSUFBSSxHQUFHO1lBQ1QsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ2hDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ2hDLGlCQUFpQixFQUFFLE9BQU87U0FDN0I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7O0lBRU0sSUFBSSxDQUFDLE1BQWEsRUFBRSxJQUFVOztjQUMzQixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUVBQW1FO1lBQzdGLHFFQUFxRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNyRixLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7OztZQTVDSixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsd0NBQXdDLEVBQUM7Ozs7WUFSM0MsVUFBVTtZQUdyQixjQUFjOzs7cUJBT2xCLEtBQUs7eUJBR0wsS0FBSztxQkFHTCxLQUFLOzBCQUdMLEtBQUs7MEJBR0wsS0FBSzs2QkFHTCxLQUFLO29CQUdMLE1BQU07Ozs7SUFsQlAsMENBQ2M7O0lBRWQsOENBQ2dCOztJQUVoQiwwQ0FDWTs7SUFFWiwrQ0FDaUI7O0lBRWpCLCtDQUNpQjs7SUFFakIsa0RBQ29COztJQUVwQix5Q0FDMkI7O0lBRWYsOENBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1wZW50YWdvbiwgcmFwaGFlbC1wZW50YWdvbid9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxQZW50YWdvbkRpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGNlbnRlcjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcnM6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZVdpZHRoOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxPcGFjaXR5OiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZUxpbmVqb2luOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgICdzdHJva2Utd2lkdGgnOiB0aGlzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgJ2ZpbGwnOiB0aGlzLmZpbGxDb2xvcnMsXG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbC1vcGFjaXR5JzogdGhpcy5maWxsT3BhY2l0eSxcbiAgICAgICAgICAgICdzdHJva2UtbGluZWpvaW4nOiAnYmV2ZWwnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLmNlbnRlciwgb3B0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoY2VudGVyOiBQb2ludCwgb3B0cz86IGFueSkge1xuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMucGFwZXIucGF0aCgnTSAyMC4zMjc1MTQsMjIuMzQ0OTcyIEwgMTEuMjU5MjQ4LDIyLjM0NDIxNiBMIDguNDU3NzIwMywxMy43MTk1NDknICtcbiAgICAgICAgICAgICcgTCAxNS43OTQ1NDUsOC4zODk5NjkgTCAyMy4xMzA0ODEsMTMuNzIwNzc0IEwgMjAuMzI3NTE0LDIyLjM0NDk3MiB6JykuYXR0cihvcHRzKTtcbiAgICAgICAgc2hhcGUudHJhbnNmb3JtKCdUJyArIChjZW50ZXIueCArIDQpICsgJywnICsgKGNlbnRlci55ICsgNCkpO1xuICAgIH1cbn1cbiJdfQ==