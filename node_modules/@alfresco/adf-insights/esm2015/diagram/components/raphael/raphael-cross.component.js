/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelCrossDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const opts = { 'stroke-width': this.strokeWidth, 'fill': this.fillColors, 'stroke': this.stroke, 'fill-opacity': this.fillOpacity };
        this.draw(this.center, this.width, this.height, opts);
    }
    /**
     * @param {?} center
     * @param {?} width
     * @param {?} height
     * @param {?=} opts
     * @return {?}
     */
    draw(center, width, height, opts) {
        /** @type {?} */
        const quarterWidth = width / 4;
        /** @type {?} */
        const quarterHeight = height / 4;
        return this.paper.path('M' + (center.x + quarterWidth + 3) + ' ' + (center.y + quarterHeight + 3) +
            'L' + (center.x + 3 * quarterWidth - 3) + ' ' + (center.y + 3 * quarterHeight - 3) +
            'M' + (center.x + quarterWidth + 3) + ' ' + (center.y + 3 * quarterHeight - 3) +
            'L' + (center.x + 3 * quarterWidth - 3) + ' ' + (center.y + quarterHeight + 3)).attr(opts);
    }
}
RaphaelCrossDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-cross, raphael-cross' },] }
];
/** @nocollapse */
RaphaelCrossDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelCrossDirective.propDecorators = {
    center: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    strokeWidth: [{ type: Input }],
    fillOpacity: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelCrossDirective.prototype.center;
    /** @type {?} */
    RaphaelCrossDirective.prototype.width;
    /** @type {?} */
    RaphaelCrossDirective.prototype.height;
    /** @type {?} */
    RaphaelCrossDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelCrossDirective.prototype.stroke;
    /** @type {?} */
    RaphaelCrossDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelCrossDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelCrossDirective.prototype.error;
    /** @type {?} */
    RaphaelCrossDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1jcm9zcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1jcm9zcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFNbkQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFdBQVc7Ozs7O0lBeUJsRCxZQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUN0QyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRm5CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFGekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFLM0IsQ0FBQzs7OztJQUVELFFBQVE7O2NBRUUsSUFBSSxHQUFHLEVBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUM7UUFDakksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7Ozs7OztJQUVNLElBQUksQ0FBQyxNQUFhLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxJQUFVOztjQUMxRCxZQUFZLEdBQUcsS0FBSyxHQUFHLENBQUM7O2NBQ3hCLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQztRQUVoQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNsQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUM7WUFDMUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUM7WUFDbEYsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQztZQUM5RSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQ2pGLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7OztZQS9DSixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsa0NBQWtDLEVBQUM7Ozs7WUFSckMsVUFBVTtZQUdyQixjQUFjOzs7cUJBT2xCLEtBQUs7b0JBR0wsS0FBSztxQkFHTCxLQUFLO3lCQUdMLEtBQUs7cUJBR0wsS0FBSzswQkFHTCxLQUFLOzBCQUdMLEtBQUs7b0JBR0wsTUFBTTs7OztJQXJCUCx1Q0FDYzs7SUFFZCxzQ0FDYzs7SUFFZCx1Q0FDZTs7SUFFZiwyQ0FDZ0I7O0lBRWhCLHVDQUNZOztJQUVaLDRDQUNpQjs7SUFFakIsNENBQ2lCOztJQUVqQixzQ0FDMkI7O0lBRWYsMkNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1jcm9zcywgcmFwaGFlbC1jcm9zcyd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxDcm9zc0RpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGNlbnRlcjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGhlaWdodDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7J3N0cm9rZS13aWR0aCc6IHRoaXMuc3Ryb2tlV2lkdGgsICdmaWxsJzogdGhpcy5maWxsQ29sb3JzLCAnc3Ryb2tlJzogdGhpcy5zdHJva2UsICdmaWxsLW9wYWNpdHknOiB0aGlzLmZpbGxPcGFjaXR5fTtcbiAgICAgICAgdGhpcy5kcmF3KHRoaXMuY2VudGVyLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgb3B0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoY2VudGVyOiBQb2ludCwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG9wdHM/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcXVhcnRlcldpZHRoID0gd2lkdGggLyA0O1xuICAgICAgICBjb25zdCBxdWFydGVySGVpZ2h0ID0gaGVpZ2h0IC8gNDtcblxuICAgICAgICByZXR1cm4gdGhpcy5wYXBlci5wYXRoKFxuICAgICAgICAgICAgJ00nICsgKGNlbnRlci54ICsgcXVhcnRlcldpZHRoICsgMykgKyAnICcgKyAoY2VudGVyLnkgKyBxdWFydGVySGVpZ2h0ICsgMykgK1xuICAgICAgICAgICAgJ0wnICsgKGNlbnRlci54ICsgMyAqIHF1YXJ0ZXJXaWR0aCAtIDMpICsgJyAnICsgKGNlbnRlci55ICsgMyAqIHF1YXJ0ZXJIZWlnaHQgLSAzKSArXG4gICAgICAgICAgICAnTScgKyAoY2VudGVyLnggKyBxdWFydGVyV2lkdGggKyAzKSArICcgJyArIChjZW50ZXIueSArIDMgKiBxdWFydGVySGVpZ2h0IC0gMykgK1xuICAgICAgICAgICAgJ0wnICsgKGNlbnRlci54ICsgMyAqIHF1YXJ0ZXJXaWR0aCAtIDMpICsgJyAnICsgKGNlbnRlci55ICsgcXVhcnRlckhlaWdodCArIDMpXG4gICAgICAgICkuYXR0cihvcHRzKTtcbiAgICB9XG59XG4iXX0=