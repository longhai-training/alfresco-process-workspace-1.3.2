/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelRectDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.radius = 0;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const opts = {
            'stroke-width': this.strokeWidth,
            'fill': this.fillColors,
            'stroke': this.stroke,
            'fill-opacity': this.fillOpacity
        };
        /** @type {?} */
        const elementDraw = this.draw(this.leftCorner, this.width, this.height, this.radius, opts);
        elementDraw.node.id = this.elementId;
    }
    /**
     * @param {?} leftCorner
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} opts
     * @return {?}
     */
    draw(leftCorner, width, height, radius, opts) {
        return this.paper.rect(leftCorner.x, leftCorner.y, width, height, radius).attr(opts);
    }
}
RaphaelRectDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-rect, raphael-rect' },] }
];
/** @nocollapse */
RaphaelRectDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelRectDirective.propDecorators = {
    paper: [{ type: Input }],
    leftCorner: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    radius: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    strokeWidth: [{ type: Input }],
    fillOpacity: [{ type: Input }],
    elementId: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelRectDirective.prototype.paper;
    /** @type {?} */
    RaphaelRectDirective.prototype.leftCorner;
    /** @type {?} */
    RaphaelRectDirective.prototype.width;
    /** @type {?} */
    RaphaelRectDirective.prototype.height;
    /** @type {?} */
    RaphaelRectDirective.prototype.radius;
    /** @type {?} */
    RaphaelRectDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelRectDirective.prototype.stroke;
    /** @type {?} */
    RaphaelRectDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelRectDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelRectDirective.prototype.elementId;
    /** @type {?} */
    RaphaelRectDirective.prototype.error;
    /** @type {?} */
    RaphaelRectDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1yZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXJlY3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBTW5ELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxXQUFXOzs7OztJQWtDakQsWUFBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFDdEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUZuQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBcEJ6QyxXQUFNLEdBQVcsQ0FBQyxDQUFDO1FBa0JuQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUszQixDQUFDOzs7O0lBRUQsUUFBUTs7Y0FFRSxJQUFJLEdBQUc7WUFDVCxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDaEMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNyQixjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDbkM7O2NBQ0ssV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7UUFDMUYsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN6QyxDQUFDOzs7Ozs7Ozs7SUFFTSxJQUFJLENBQUMsVUFBaUIsRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUFFLE1BQWMsRUFBRSxJQUFTO1FBQ25GLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pGLENBQUM7OztZQXRESixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUU7Ozs7WUFSckMsVUFBVTtZQUdyQixjQUFjOzs7b0JBT2xCLEtBQUs7eUJBR0wsS0FBSztvQkFHTCxLQUFLO3FCQUdMLEtBQUs7cUJBR0wsS0FBSzt5QkFHTCxLQUFLO3FCQUdMLEtBQUs7MEJBR0wsS0FBSzswQkFHTCxLQUFLO3dCQUdMLEtBQUs7b0JBR0wsTUFBTTs7OztJQTlCUCxxQ0FDVzs7SUFFWCwwQ0FDa0I7O0lBRWxCLHFDQUNjOztJQUVkLHNDQUNlOztJQUVmLHNDQUNtQjs7SUFFbkIsMENBQ2dCOztJQUVoQixzQ0FDWTs7SUFFWiwyQ0FDaUI7O0lBRWpCLDJDQUNpQjs7SUFFakIseUNBQ2tCOztJQUVsQixxQ0FDMkI7O0lBRWYsMENBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnYWRmLXJhcGhhZWwtcmVjdCwgcmFwaGFlbC1yZWN0JyB9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxSZWN0RGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgbGVmdENvcm5lcjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHdpZHRoOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGhlaWdodDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICByYWRpdXM6IG51bWJlciA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxDb2xvcnM6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZVdpZHRoOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpbGxPcGFjaXR5OiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGVsZW1lbnRJZDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJzogdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgICdmaWxsJzogdGhpcy5maWxsQ29sb3JzLFxuICAgICAgICAgICAgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlLFxuICAgICAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IHRoaXMuZmlsbE9wYWNpdHlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZWxlbWVudERyYXcgPSB0aGlzLmRyYXcodGhpcy5sZWZ0Q29ybmVyLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5yYWRpdXMsIG9wdHMpO1xuICAgICAgICBlbGVtZW50RHJhdy5ub2RlLmlkID0gdGhpcy5lbGVtZW50SWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcobGVmdENvcm5lcjogUG9pbnQsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgb3B0czogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcGVyLnJlY3QobGVmdENvcm5lci54LCBsZWZ0Q29ybmVyLnksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykuYXR0cihvcHRzKTtcbiAgICB9XG59XG4iXX0=