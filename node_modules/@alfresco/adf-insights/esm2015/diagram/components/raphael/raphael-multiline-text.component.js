/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelMultilineTextDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.TEXT_PADDING = 3;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    }
    /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    draw(position, text) {
        /** @type {?} */
        const textPaper = this.paper.text(position.x + this.TEXT_PADDING, position.y + this.TEXT_PADDING, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        /** @type {?} */
        const formattedText = this.formatText(textPaper, text, this.elementWidth);
        textPaper.attr({
            'text': formattedText
        });
        textPaper.transform(this.transform);
        return textPaper;
    }
    /**
     * @private
     * @param {?} textPaper
     * @param {?} text
     * @param {?} elementWidth
     * @return {?}
     */
    formatText(textPaper, text, elementWidth) {
        /** @type {?} */
        const pText = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        textPaper.attr({
            'text': pText
        });
        /** @type {?} */
        const letterWidth = textPaper.getBBox().width / text.length;
        /** @type {?} */
        const removedLineBreaks = text.split('\n');
        /** @type {?} */
        let actualRowLength = 0;
        /** @type {?} */
        const formattedText = [];
        removedLineBreaks.forEach((/**
         * @param {?} sentence
         * @return {?}
         */
        (sentence) => {
            /** @type {?} */
            const words = sentence.split(' ');
            words.forEach((/**
             * @param {?} word
             * @return {?}
             */
            (word) => {
                /** @type {?} */
                const length = word.length;
                if (actualRowLength + (length * letterWidth) > elementWidth) {
                    formattedText.push('\n');
                    actualRowLength = 0;
                }
                actualRowLength += length * letterWidth;
                formattedText.push(word + ' ');
            }));
            formattedText.push('\n');
            actualRowLength = 0;
        }));
        return formattedText.join('');
    }
}
RaphaelMultilineTextDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-multiline-text, raphael-multiline-text' },] }
];
/** @nocollapse */
RaphaelMultilineTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelMultilineTextDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    transform: [{ type: Input }],
    text: [{ type: Input }],
    elementWidth: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.paper;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.position;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.transform;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.text;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementWidth;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.error;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.TEXT_PADDING;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFNbkQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLFdBQVc7Ozs7O0lBcUIxRCxZQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUN0QyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRm5CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFKekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFM0IsaUJBQVksR0FBRyxDQUFDLENBQUM7SUFLakIsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFFRCxJQUFJLENBQUMsUUFBZSxFQUFFLElBQVk7O2NBQ3hCLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN6RyxhQUFhLEVBQUUsUUFBUTtZQUN2QixhQUFhLEVBQUUsT0FBTztZQUN0QixXQUFXLEVBQUUsSUFBSTtZQUNqQixNQUFNLEVBQUUsU0FBUztTQUNwQixDQUFDOztjQUVJLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN6RSxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ1gsTUFBTSxFQUFFLGFBQWE7U0FDeEIsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7Ozs7Ozs7SUFFTyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxZQUFZOztjQUN0QyxLQUFLLEdBQUcsc0RBQXNEO1FBQ3BFLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDWCxNQUFNLEVBQUUsS0FBSztTQUNoQixDQUFDLENBQUM7O2NBQ0csV0FBVyxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU07O2NBQ3JELGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOztZQUN0QyxlQUFlLEdBQUcsQ0FBQzs7Y0FDakIsYUFBYSxHQUFHLEVBQUU7UUFDeEIsaUJBQWlCLENBQUMsT0FBTzs7OztRQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7O2tCQUM3QixLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDakMsS0FBSyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQUksRUFBRSxFQUFFOztzQkFDYixNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU07Z0JBQzFCLElBQUksZUFBZSxHQUFHLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLFlBQVksRUFBRTtvQkFDekQsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDekIsZUFBZSxHQUFHLENBQUMsQ0FBQztpQkFDdkI7Z0JBQ0QsZUFBZSxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUM7Z0JBQ3hDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsRUFBQyxDQUFDO1lBQ0gsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OztZQTFFSixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsb0RBQW9ELEVBQUU7Ozs7WUFSekQsVUFBVTtZQUdyQixjQUFjOzs7b0JBT2xCLEtBQUs7dUJBR0wsS0FBSzt3QkFHTCxLQUFLO21CQUdMLEtBQUs7MkJBR0wsS0FBSztvQkFHTCxNQUFNOzs7O0lBZlAsOENBQ1c7O0lBRVgsaURBQ2dCOztJQUVoQixrREFDa0I7O0lBRWxCLDZDQUNhOztJQUViLHFEQUNxQjs7SUFFckIsOENBQzJCOztJQUUzQixxREFBaUI7O0lBRUwsbURBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnYWRmLXJhcGhhZWwtbXVsdGlsaW5lLXRleHQsIHJhcGhhZWwtbXVsdGlsaW5lLXRleHQnIH0pXG5leHBvcnQgY2xhc3MgUmFwaGFlbE11bHRpbGluZVRleHREaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIGVsZW1lbnRXaWR0aDogbnVtYmVyO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBURVhUX1BBRERJTkcgPSAzO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dCA9PT0gbnVsbCB8fCB0aGlzLnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMucG9zaXRpb24sIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgZHJhdyhwb3NpdGlvbjogUG9pbnQsIHRleHQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCB0ZXh0UGFwZXIgPSB0aGlzLnBhcGVyLnRleHQocG9zaXRpb24ueCArIHRoaXMuVEVYVF9QQURESU5HLCBwb3NpdGlvbi55ICsgdGhpcy5URVhUX1BBRERJTkcsIHRleHQpLmF0dHIoe1xuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogJ21pZGRsZScsXG4gICAgICAgICAgICAnZm9udC1mYW1pbHknOiAnQXJpYWwnLFxuICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxMScsXG4gICAgICAgICAgICAnZmlsbCc6ICcjMzczZTQ4J1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRUZXh0ID0gdGhpcy5mb3JtYXRUZXh0KHRleHRQYXBlciwgdGV4dCwgdGhpcy5lbGVtZW50V2lkdGgpO1xuICAgICAgICB0ZXh0UGFwZXIuYXR0cih7XG4gICAgICAgICAgICAndGV4dCc6IGZvcm1hdHRlZFRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIHRleHRQYXBlci50cmFuc2Zvcm0odGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICByZXR1cm4gdGV4dFBhcGVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0VGV4dCh0ZXh0UGFwZXIsIHRleHQsIGVsZW1lbnRXaWR0aCkge1xuICAgICAgICBjb25zdCBwVGV4dCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcbiAgICAgICAgdGV4dFBhcGVyLmF0dHIoe1xuICAgICAgICAgICAgJ3RleHQnOiBwVGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbGV0dGVyV2lkdGggPSB0ZXh0UGFwZXIuZ2V0QkJveCgpLndpZHRoIC8gdGV4dC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlbW92ZWRMaW5lQnJlYWtzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGxldCBhY3R1YWxSb3dMZW5ndGggPSAwO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRUZXh0ID0gW107XG4gICAgICAgIHJlbW92ZWRMaW5lQnJlYWtzLmZvckVhY2goKHNlbnRlbmNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB3b3JkcyA9IHNlbnRlbmNlLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICB3b3Jkcy5mb3JFYWNoKCh3b3JkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gd29yZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGFjdHVhbFJvd0xlbmd0aCArIChsZW5ndGggKiBsZXR0ZXJXaWR0aCkgPiBlbGVtZW50V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVGV4dC5wdXNoKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0dWFsUm93TGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWN0dWFsUm93TGVuZ3RoICs9IGxlbmd0aCAqIGxldHRlcldpZHRoO1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFRleHQucHVzaCh3b3JkICsgJyAnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9ybWF0dGVkVGV4dC5wdXNoKCdcXG4nKTtcbiAgICAgICAgICAgIGFjdHVhbFJvd0xlbmd0aCA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZm9ybWF0dGVkVGV4dC5qb2luKCcnKTtcbiAgICB9XG59XG4iXX0=