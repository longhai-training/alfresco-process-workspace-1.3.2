/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelTextDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    }
    /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    draw(position, text) {
        /** @type {?} */
        const textPaper = this.paper.text(position.x, position.y, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        textPaper.transform(this.transform);
        return textPaper;
    }
}
RaphaelTextDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-text, raphael-text' },] }
];
/** @nocollapse */
RaphaelTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelTextDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    transform: [{ type: Input }],
    text: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelTextDirective.prototype.paper;
    /** @type {?} */
    RaphaelTextDirective.prototype.position;
    /** @type {?} */
    RaphaelTextDirective.prototype.transform;
    /** @type {?} */
    RaphaelTextDirective.prototype.text;
    /** @type {?} */
    RaphaelTextDirective.prototype.error;
    /** @type {?} */
    RaphaelTextDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXRleHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBTW5ELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxXQUFXOzs7OztJQWdCakQsWUFBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFDdEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUZuQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRnpDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBSzNCLENBQUM7Ozs7SUFFRCxRQUFRO1FBRUosSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUMvQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7O0lBRU0sSUFBSSxDQUFDLFFBQWUsRUFBRSxJQUFZOztjQUMvQixTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNqRSxhQUFhLEVBQUcsUUFBUTtZQUN4QixhQUFhLEVBQUcsT0FBTztZQUN2QixXQUFXLEVBQUcsSUFBSTtZQUNsQixNQUFNLEVBQUcsU0FBUztTQUNyQixDQUFDO1FBRUYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7O1lBeENKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSxnQ0FBZ0MsRUFBQzs7OztZQVJuQyxVQUFVO1lBR3JCLGNBQWM7OztvQkFPbEIsS0FBSzt1QkFHTCxLQUFLO3dCQUdMLEtBQUs7bUJBR0wsS0FBSztvQkFHTCxNQUFNOzs7O0lBWlAscUNBQ1c7O0lBRVgsd0NBQ2dCOztJQUVoQix5Q0FDa0I7O0lBRWxCLG9DQUNhOztJQUViLHFDQUMyQjs7SUFFZiwwQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLXRleHQsIHJhcGhhZWwtdGV4dCd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxUZXh0RGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIGlmICh0aGlzLnRleHQgPT09IG51bGwgfHwgdGhpcy50ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLnBvc2l0aW9uLCB0aGlzLnRleHQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KHBvc2l0aW9uOiBQb2ludCwgdGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHRleHRQYXBlciA9IHRoaXMucGFwZXIudGV4dChwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB0ZXh0KS5hdHRyKHtcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcicgOiAnbWlkZGxlJyxcbiAgICAgICAgICAgICdmb250LWZhbWlseScgOiAnQXJpYWwnLFxuICAgICAgICAgICAgJ2ZvbnQtc2l6ZScgOiAnMTEnLFxuICAgICAgICAgICAgJ2ZpbGwnIDogJyMzNzNlNDgnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRleHRQYXBlci50cmFuc2Zvcm0odGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICByZXR1cm4gdGV4dFBhcGVyO1xuICAgIH1cbn1cbiJdfQ==