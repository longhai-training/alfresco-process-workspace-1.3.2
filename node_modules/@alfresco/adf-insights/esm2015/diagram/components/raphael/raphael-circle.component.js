/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelCircleDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const opts = { 'stroke-width': this.strokeWidth, 'fill': this.fillColors, 'stroke': this.stroke, 'fill-opacity': this.fillOpacity };
        /** @type {?} */
        const drawElement = this.draw(this.center, this.radius, opts);
        drawElement.node.id = this.elementId;
    }
    /**
     * @param {?} center
     * @param {?} radius
     * @param {?} opts
     * @return {?}
     */
    draw(center, radius, opts) {
        /** @type {?} */
        const circle = this.paper.circle(center.x, center.y, radius).attr(opts);
        return circle;
    }
}
RaphaelCircleDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-circle, raphael-circle' },] }
];
/** @nocollapse */
RaphaelCircleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelCircleDirective.propDecorators = {
    paper: [{ type: Input }],
    center: [{ type: Input }],
    radius: [{ type: Input }],
    strokeWidth: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    fillOpacity: [{ type: Input }],
    elementId: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelCircleDirective.prototype.paper;
    /** @type {?} */
    RaphaelCircleDirective.prototype.center;
    /** @type {?} */
    RaphaelCircleDirective.prototype.radius;
    /** @type {?} */
    RaphaelCircleDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelCircleDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelCircleDirective.prototype.stroke;
    /** @type {?} */
    RaphaelCircleDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelCircleDirective.prototype.elementId;
    /** @type {?} */
    RaphaelCircleDirective.prototype.error;
    /** @type {?} */
    RaphaelCircleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1jaXJjbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL3JhcGhhZWwtY2lyY2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQU1uRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsV0FBVzs7Ozs7SUE0Qm5ELFlBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBQ3RDLEtBQUssQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFGbkIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUZ6QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUszQixDQUFDOzs7O0lBRUQsUUFBUTs7Y0FFRSxJQUFJLEdBQUcsRUFBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQzs7Y0FDM0gsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztRQUM3RCxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3pDLENBQUM7Ozs7Ozs7SUFFTSxJQUFJLENBQUMsTUFBYSxFQUFFLE1BQWMsRUFBRSxJQUFTOztjQUMxQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkUsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7O1lBNUNKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSxvQ0FBb0MsRUFBQzs7OztZQVJ2QyxVQUFVO1lBR3JCLGNBQWM7OztvQkFPbEIsS0FBSztxQkFHTCxLQUFLO3FCQUdMLEtBQUs7MEJBR0wsS0FBSzt5QkFHTCxLQUFLO3FCQUdMLEtBQUs7MEJBR0wsS0FBSzt3QkFHTCxLQUFLO29CQUdMLE1BQU07Ozs7SUF4QlAsdUNBQ1c7O0lBRVgsd0NBQ2M7O0lBRWQsd0NBQ2U7O0lBRWYsNkNBQ29COztJQUVwQiw0Q0FDZ0I7O0lBRWhCLHdDQUNZOztJQUVaLDZDQUNpQjs7SUFFakIsMkNBQ2tCOztJQUVsQix1Q0FDMkI7O0lBRWYsNENBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1jaXJjbGUsIHJhcGhhZWwtY2lyY2xlJ30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbENpcmNsZURpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIGNlbnRlcjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHJhZGl1czogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBlbGVtZW50SWQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICBjb25zdCBvcHRzID0geydzdHJva2Utd2lkdGgnOiB0aGlzLnN0cm9rZVdpZHRoLCAnZmlsbCc6IHRoaXMuZmlsbENvbG9ycywgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlLCAnZmlsbC1vcGFjaXR5JzogdGhpcy5maWxsT3BhY2l0eX07XG4gICAgICAgIGNvbnN0IGRyYXdFbGVtZW50ID0gdGhpcy5kcmF3KHRoaXMuY2VudGVyLCB0aGlzLnJhZGl1cywgb3B0cyk7XG4gICAgICAgIGRyYXdFbGVtZW50Lm5vZGUuaWQgPSB0aGlzLmVsZW1lbnRJZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhjZW50ZXI6IFBvaW50LCByYWRpdXM6IG51bWJlciwgb3B0czogYW55KSB7XG4gICAgICAgIGNvbnN0IGNpcmNsZSA9IHRoaXMucGFwZXIuY2lyY2xlKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzKS5hdHRyKG9wdHMpO1xuICAgICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH1cbn1cbiJdfQ==