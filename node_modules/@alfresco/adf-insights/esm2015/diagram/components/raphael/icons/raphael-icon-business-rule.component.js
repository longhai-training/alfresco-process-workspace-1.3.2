/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelIconBusinessRuleDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.draw(this.position);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    draw(position) {
        /** @type {?} */
        const path1 = this.paper.path(`m 1,2 0,14 16,0 0,-14 z m 1.45458,5.6000386 2.90906,0 0,2.7999224 -2.90906,0 z m 4.36364,0 8.72718,0
         0,2.7999224 -8.72718,0 z m -4.36364,4.1998844 2.90906,0 0,2.800116 -2.90906,0 z m
         4.36364,0 8.72718,0 0,2.800116 -8.72718,0 z`).attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    }
}
RaphaelIconBusinessRuleDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-icon-business-rule, raphael-icon-business-rule' },] }
];
/** @nocollapse */
RaphaelIconBusinessRuleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelIconBusinessRuleDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    text: [{ type: Input }],
    error: [{ type: Output }],
    strokeWidth: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    fillOpacity: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.position;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.text;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.error;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconBusinessRuleDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLWJ1c2luZXNzLXJ1bGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL2ljb25zL3JhcGhhZWwtaWNvbi1idXNpbmVzcy1ydWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQU10RCxNQUFNLE9BQU8sZ0NBQWlDLFNBQVEsV0FBVzs7Ozs7SUF5QjdELFlBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBQ3RDLEtBQUssQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFGbkIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWR6QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQWlCM0IsQ0FBQzs7OztJQUVELFFBQVE7UUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVNLElBQUksQ0FBQyxRQUFlOztjQUNqQixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7O3FEQUVlLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDaEQsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVTtTQUMxQixDQUFDO1FBQ0YsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7O1lBNUNKLFNBQVMsU0FBQyxFQUFDLFFBQVEsRUFBRSw0REFBNEQsRUFBQzs7OztZQVIvRCxVQUFVO1lBR3JCLGNBQWM7OztvQkFPbEIsS0FBSzt1QkFHTCxLQUFLO21CQUdMLEtBQUs7b0JBR0wsTUFBTTswQkFHTixLQUFLO3lCQUdMLEtBQUs7cUJBR0wsS0FBSzswQkFHTCxLQUFLOzs7O0lBckJOLGlEQUNXOztJQUVYLG9EQUNnQjs7SUFFaEIsZ0RBQ2E7O0lBRWIsaURBQzJCOztJQUUzQix1REFDb0I7O0lBRXBCLHNEQUNnQjs7SUFFaEIsa0RBQ1k7O0lBRVosdURBQ2lCOztJQUVMLHNEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi8uLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuLy4uL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vLi4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYWRmLXJhcGhhZWwtaWNvbi1idXNpbmVzcy1ydWxlLCByYXBoYWVsLWljb24tYnVzaW5lc3MtcnVsZSd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxJY29uQnVzaW5lc3NSdWxlRGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlV2lkdGg6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbENvbG9yczogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2U6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbE9wYWNpdHk6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KHBvc2l0aW9uOiBQb2ludCkge1xuICAgICAgICBjb25zdCBwYXRoMSA9IHRoaXMucGFwZXIucGF0aChgbSAxLDIgMCwxNCAxNiwwIDAsLTE0IHogbSAxLjQ1NDU4LDUuNjAwMDM4NiAyLjkwOTA2LDAgMCwyLjc5OTkyMjQgLTIuOTA5MDYsMCB6IG0gNC4zNjM2NCwwIDguNzI3MTgsMFxuICAgICAgICAgMCwyLjc5OTkyMjQgLTguNzI3MTgsMCB6IG0gLTQuMzYzNjQsNC4xOTk4ODQ0IDIuOTA5MDYsMCAwLDIuODAwMTE2IC0yLjkwOTA2LDAgeiBtXG4gICAgICAgICA0LjM2MzY0LDAgOC43MjcxOCwwIDAsMi44MDAxMTYgLTguNzI3MTgsMCB6YCkuYXR0cih7XG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGgxLnRyYW5zZm9ybSgnVCcgKyBwb3NpdGlvbi54ICsgJywnICsgcG9zaXRpb24ueSk7XG4gICAgfVxufVxuIl19