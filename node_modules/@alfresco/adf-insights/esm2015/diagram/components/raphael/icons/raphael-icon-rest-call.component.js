/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelIconRestCallDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.draw(this.position);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    draw(position) {
        /** @type {?} */
        const path1 = this.paper.path(`m 16.704699,5.9229055 q 0.358098,0 0.608767,0.2506681 0.250669,0.250668 0.250669,0.6087677 0,0.3580997
         -0.250669,0.6087677 -0.250669,0.2506679 -0.608767,0.2506679 -0.358098,0 -0.608767,-0.2506679 -0.250669,-0.250668
         -0.250669,-0.6087677 0,-0.3580997 0.250669,-0.6087677 0.250669,-0.2506681 0.608767,-0.2506681 z m 2.578308,-2.0053502 q
         -2.229162,0 -3.854034,0.6759125 -1.624871,0.6759067 -3.227361,2.2694472 -0.716197,0.725146 -1.575633,1.7457293 L
         7.2329969,8.7876913 Q 7.0897576,8.8055849 7.000233,8.9309334 L 4.9948821,12.368677 q -0.035811,0.06267 -0.035811,0.143242
         0,0.107426 0.080572,0.205905 l 0.5729577,0.572957 q 0.125334,0.116384 0.2864786,0.07162 l 2.4708789,-0.760963 2.5156417,2.515645
         -0.76096,2.470876 q -0.009,0.02687 -0.009,0.08057 0,0.125338 0.08058,0.205905 l 0.572957,0.572958 q 0.170096,0.152194
         0.349146,0.04476 l 3.437744,-2.005351 q 0.125335,-0.08953 0.143239,-0.232763 l 0.17905,-3.392986 q 1.02058,-0.859435
         1.745729,-1.575629 1.67411,-1.6830612 2.309735,-3.2049805 0.635625,-1.5219191 0.635625,-3.8585111 0,-0.1253369 -0.08505,-0.2148575
         -0.08505,-0.089526 -0.201431,-0.089526 z`).attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    }
}
RaphaelIconRestCallDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-icon-rest-call, raphael-icon-rest-call' },] }
];
/** @nocollapse */
RaphaelIconRestCallDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelIconRestCallDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    text: [{ type: Input }],
    error: [{ type: Output }],
    strokeWidth: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    fillOpacity: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.position;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.text;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.error;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconRestCallDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXJlc3QtY2FsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvaWNvbnMvcmFwaGFlbC1pY29uLXJlc3QtY2FsbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFNdEQsTUFBTSxPQUFPLDRCQUE2QixTQUFRLFdBQVc7Ozs7O0lBeUJ6RCxZQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUN0QyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRm5CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFkekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFpQjNCLENBQUM7Ozs7SUFFRCxRQUFRO1FBRUosSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFTSxJQUFJLENBQUMsUUFBZTs7Y0FDakIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOzs7Ozs7Ozs7a0RBU1ksQ0FBQyxDQUFDLElBQUksQ0FBQztZQUM3QyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7WUFuREosU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLG9EQUFvRCxFQUFDOzs7O1lBUnZELFVBQVU7WUFHckIsY0FBYzs7O29CQU9sQixLQUFLO3VCQUdMLEtBQUs7bUJBR0wsS0FBSztvQkFHTCxNQUFNOzBCQUdOLEtBQUs7eUJBR0wsS0FBSztxQkFHTCxLQUFLOzBCQUdMLEtBQUs7Ozs7SUFyQk4sNkNBQ1c7O0lBRVgsZ0RBQ2dCOztJQUVoQiw0Q0FDYTs7SUFFYiw2Q0FDMkI7O0lBRTNCLG1EQUNvQjs7SUFFcEIsa0RBQ2dCOztJQUVoQiw4Q0FDWTs7SUFFWixtREFDaUI7O0lBRUwsa0RBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLy4uL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vLi4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1pY29uLXJlc3QtY2FsbCwgcmFwaGFlbC1pY29uLXJlc3QtY2FsbCd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxJY29uUmVzdENhbGxEaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcocG9zaXRpb246IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhdGgxID0gdGhpcy5wYXBlci5wYXRoKGBtIDE2LjcwNDY5OSw1LjkyMjkwNTUgcSAwLjM1ODA5OCwwIDAuNjA4NzY3LDAuMjUwNjY4MSAwLjI1MDY2OSwwLjI1MDY2OCAwLjI1MDY2OSwwLjYwODc2NzcgMCwwLjM1ODA5OTdcbiAgICAgICAgIC0wLjI1MDY2OSwwLjYwODc2NzcgLTAuMjUwNjY5LDAuMjUwNjY3OSAtMC42MDg3NjcsMC4yNTA2Njc5IC0wLjM1ODA5OCwwIC0wLjYwODc2NywtMC4yNTA2Njc5IC0wLjI1MDY2OSwtMC4yNTA2NjhcbiAgICAgICAgIC0wLjI1MDY2OSwtMC42MDg3Njc3IDAsLTAuMzU4MDk5NyAwLjI1MDY2OSwtMC42MDg3Njc3IDAuMjUwNjY5LC0wLjI1MDY2ODEgMC42MDg3NjcsLTAuMjUwNjY4MSB6IG0gMi41NzgzMDgsLTIuMDA1MzUwMiBxXG4gICAgICAgICAtMi4yMjkxNjIsMCAtMy44NTQwMzQsMC42NzU5MTI1IC0xLjYyNDg3MSwwLjY3NTkwNjcgLTMuMjI3MzYxLDIuMjY5NDQ3MiAtMC43MTYxOTcsMC43MjUxNDYgLTEuNTc1NjMzLDEuNzQ1NzI5MyBMXG4gICAgICAgICA3LjIzMjk5NjksOC43ODc2OTEzIFEgNy4wODk3NTc2LDguODA1NTg0OSA3LjAwMDIzMyw4LjkzMDkzMzQgTCA0Ljk5NDg4MjEsMTIuMzY4Njc3IHEgLTAuMDM1ODExLDAuMDYyNjcgLTAuMDM1ODExLDAuMTQzMjQyXG4gICAgICAgICAwLDAuMTA3NDI2IDAuMDgwNTcyLDAuMjA1OTA1IGwgMC41NzI5NTc3LDAuNTcyOTU3IHEgMC4xMjUzMzQsMC4xMTYzODQgMC4yODY0Nzg2LDAuMDcxNjIgbCAyLjQ3MDg3ODksLTAuNzYwOTYzIDIuNTE1NjQxNywyLjUxNTY0NVxuICAgICAgICAgLTAuNzYwOTYsMi40NzA4NzYgcSAtMC4wMDksMC4wMjY4NyAtMC4wMDksMC4wODA1NyAwLDAuMTI1MzM4IDAuMDgwNTgsMC4yMDU5MDUgbCAwLjU3Mjk1NywwLjU3Mjk1OCBxIDAuMTcwMDk2LDAuMTUyMTk0XG4gICAgICAgICAwLjM0OTE0NiwwLjA0NDc2IGwgMy40Mzc3NDQsLTIuMDA1MzUxIHEgMC4xMjUzMzUsLTAuMDg5NTMgMC4xNDMyMzksLTAuMjMyNzYzIGwgMC4xNzkwNSwtMy4zOTI5ODYgcSAxLjAyMDU4LC0wLjg1OTQzNVxuICAgICAgICAgMS43NDU3MjksLTEuNTc1NjI5IDEuNjc0MTEsLTEuNjgzMDYxMiAyLjMwOTczNSwtMy4yMDQ5ODA1IDAuNjM1NjI1LC0xLjUyMTkxOTEgMC42MzU2MjUsLTMuODU4NTExMSAwLC0wLjEyNTMzNjkgLTAuMDg1MDUsLTAuMjE0ODU3NVxuICAgICAgICAgLTAuMDg1MDUsLTAuMDg5NTI2IC0wLjIwMTQzMSwtMC4wODk1MjYgemApLmF0dHIoe1xuICAgICAgICAgICAgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlLFxuICAgICAgICAgICAgJ2ZpbGwnOiB0aGlzLmZpbGxDb2xvcnNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXRoMS50cmFuc2Zvcm0oJ1QnICsgcG9zaXRpb24ueCArICcsJyArIHBvc2l0aW9uLnkpO1xuICAgIH1cbn1cbiJdfQ==