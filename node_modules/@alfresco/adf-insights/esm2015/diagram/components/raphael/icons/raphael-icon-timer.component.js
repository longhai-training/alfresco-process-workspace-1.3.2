/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelIconTimerDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.draw(this.position);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    draw(position) {
        /** @type {?} */
        const path1 = this.paper.path(`M 10 0 C 4.4771525 0 0 4.4771525 0 10 C 0 15.522847 4.4771525 20 10 20 C 15.522847 20 20 15.522847 20
        10 C 20 4.4771525 15.522847 1.1842379e-15 10 0 z M 9.09375 1.03125 C 9.2292164 1.0174926 9.362825 1.0389311 9.5 1.03125 L 9.5 3.5
        L 10.5 3.5 L 10.5 1.03125 C 15.063526 1.2867831 18.713217 4.9364738 18.96875 9.5 L 16.5 9.5 L 16.5 10.5 L 18.96875 10.5 C 18.713217
        15.063526 15.063526 18.713217 10.5 18.96875 L 10.5 16.5 L 9.5 16.5 L 9.5 18.96875 C 4.9364738 18.713217 1.2867831 15.063526 1.03125
        10.5 L 3.5 10.5 L 3.5 9.5 L 1.03125 9.5 C 1.279102 5.0736488 4.7225326 1.4751713 9.09375 1.03125 z M 9.5 5 L 9.5 8.0625 C 8.6373007
        8.2844627 8 9.0680195 8 10 C 8 11.104569 8.8954305 12 10 12 C 10.931981 12 11.715537 11.362699 11.9375 10.5 L 14 10.5 L 14 9.5
        L 11.9375 9.5 C 11.756642 8.7970599 11.20294 8.2433585 10.5 8.0625 L 10.5 5 L 9.5 5 z`).attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    }
}
RaphaelIconTimerDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-icon-timer, raphael-icon-timer' },] }
];
/** @nocollapse */
RaphaelIconTimerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelIconTimerDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    text: [{ type: Input }],
    error: [{ type: Output }],
    strokeWidth: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    fillOpacity: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.position;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.text;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.error;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconTimerDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXRpbWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9pY29ucy9yYXBoYWVsLWljb24tdGltZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBTXRELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxXQUFXOzs7OztJQXlCdEQsWUFBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFDdEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUZuQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBZHpDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBaUIzQixDQUFDOzs7O0lBRUQsUUFBUTtRQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRU0sSUFBSSxDQUFDLFFBQWU7O2NBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzs7Ozs7OzhGQU13RCxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3pGLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDMUIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7OztZQWhESixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsNENBQTRDLEVBQUM7Ozs7WUFSL0MsVUFBVTtZQUdyQixjQUFjOzs7b0JBT2xCLEtBQUs7dUJBR0wsS0FBSzttQkFHTCxLQUFLO29CQUdMLE1BQU07MEJBR04sS0FBSzt5QkFHTCxLQUFLO3FCQUdMLEtBQUs7MEJBR0wsS0FBSzs7OztJQXJCTiwwQ0FDVzs7SUFFWCw2Q0FDZ0I7O0lBRWhCLHlDQUNhOztJQUViLDBDQUMyQjs7SUFFM0IsZ0RBQ29COztJQUVwQiwrQ0FDZ0I7O0lBRWhCLDJDQUNZOztJQUVaLGdEQUNpQjs7SUFFTCwrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vLi4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuLy4uL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLWljb24tdGltZXIsIHJhcGhhZWwtaWNvbi10aW1lcid9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxJY29uVGltZXJEaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBwYXBlcjogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogUG9pbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsQ29sb3JzOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cm9rZTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBmaWxsT3BhY2l0eTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcocG9zaXRpb246IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhdGgxID0gdGhpcy5wYXBlci5wYXRoKGBNIDEwIDAgQyA0LjQ3NzE1MjUgMCAwIDQuNDc3MTUyNSAwIDEwIEMgMCAxNS41MjI4NDcgNC40NzcxNTI1IDIwIDEwIDIwIEMgMTUuNTIyODQ3IDIwIDIwIDE1LjUyMjg0NyAyMFxuICAgICAgICAxMCBDIDIwIDQuNDc3MTUyNSAxNS41MjI4NDcgMS4xODQyMzc5ZS0xNSAxMCAwIHogTSA5LjA5Mzc1IDEuMDMxMjUgQyA5LjIyOTIxNjQgMS4wMTc0OTI2IDkuMzYyODI1IDEuMDM4OTMxMSA5LjUgMS4wMzEyNSBMIDkuNSAzLjVcbiAgICAgICAgTCAxMC41IDMuNSBMIDEwLjUgMS4wMzEyNSBDIDE1LjA2MzUyNiAxLjI4Njc4MzEgMTguNzEzMjE3IDQuOTM2NDczOCAxOC45Njg3NSA5LjUgTCAxNi41IDkuNSBMIDE2LjUgMTAuNSBMIDE4Ljk2ODc1IDEwLjUgQyAxOC43MTMyMTdcbiAgICAgICAgMTUuMDYzNTI2IDE1LjA2MzUyNiAxOC43MTMyMTcgMTAuNSAxOC45Njg3NSBMIDEwLjUgMTYuNSBMIDkuNSAxNi41IEwgOS41IDE4Ljk2ODc1IEMgNC45MzY0NzM4IDE4LjcxMzIxNyAxLjI4Njc4MzEgMTUuMDYzNTI2IDEuMDMxMjVcbiAgICAgICAgMTAuNSBMIDMuNSAxMC41IEwgMy41IDkuNSBMIDEuMDMxMjUgOS41IEMgMS4yNzkxMDIgNS4wNzM2NDg4IDQuNzIyNTMyNiAxLjQ3NTE3MTMgOS4wOTM3NSAxLjAzMTI1IHogTSA5LjUgNSBMIDkuNSA4LjA2MjUgQyA4LjYzNzMwMDdcbiAgICAgICAgOC4yODQ0NjI3IDggOS4wNjgwMTk1IDggMTAgQyA4IDExLjEwNDU2OSA4Ljg5NTQzMDUgMTIgMTAgMTIgQyAxMC45MzE5ODEgMTIgMTEuNzE1NTM3IDExLjM2MjY5OSAxMS45Mzc1IDEwLjUgTCAxNCAxMC41IEwgMTQgOS41XG4gICAgICAgIEwgMTEuOTM3NSA5LjUgQyAxMS43NTY2NDIgOC43OTcwNTk5IDExLjIwMjk0IDguMjQzMzU4NSAxMC41IDguMDYyNSBMIDEwLjUgNSBMIDkuNSA1IHpgKS5hdHRyKHtcbiAgICAgICAgICAgICdzdHJva2UnOiB0aGlzLnN0cm9rZSxcbiAgICAgICAgICAgICdmaWxsJzogdGhpcy5maWxsQ29sb3JzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGF0aDEudHJhbnNmb3JtKCdUJyArIHBvc2l0aW9uLnggKyAnLCcgKyBwb3NpdGlvbi55KTtcbiAgICB9XG59XG4iXX0=