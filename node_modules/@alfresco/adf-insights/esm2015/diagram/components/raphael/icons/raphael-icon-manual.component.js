/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelIconManualDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.draw(this.position);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    draw(position) {
        /** @type {?} */
        const path1 = this.paper.path(`m 17,9.3290326 c -0.0069,0.5512461 -0.455166,1.0455894 -0.940778,1.0376604 l -5.792746,0 c
        0.0053,0.119381 0.0026,0.237107 0.0061,0.355965 l 5.154918,0 c 0.482032,-0.0096 0.925529,0.49051 0.919525,1.037574 -0.0078,0.537128
        -0.446283,1.017531 -0.919521,1.007683 l -5.245273,0 c -0.01507,0.104484 -0.03389,0.204081 -0.05316,0.301591 l 2.630175,0
        c 0.454137,-0.0096 0.872112,0.461754 0.866386,0.977186 C 13.619526,14.554106 13.206293,15.009498 12.75924,15 L 3.7753054,15
        C 3.6045812,15 3.433552,14.94423 3.2916363,14.837136 c -0.00174,0 -0.00436,0 -0.00609,0 C 1.7212035,14.367801
        0.99998255,11.458641 1,11.458641 L 1,7.4588393 c 0,0 0.6623144,-1.316333 1.8390583,-2.0872584 1.1767614,-0.7711868
        6.8053358,-2.40497 7.2587847,-2.8052901 0.453484,-0.40032 1.660213,1.4859942 0.04775,2.4010487 C 8.5332315,5.882394
        8.507351,5.7996113 8.4370292,5.7936859 l 6.3569748,-0.00871 c 0.497046,-0.00958 0.952273,0.5097676 0.94612,1.0738232
        -0.0053,0.556126 -0.456176,1.0566566 -0.94612,1.0496854 l -4.72435,0 c 0.01307,0.1149374 0.0244,0.2281319 0.03721,0.3498661
        l 5.952195,0 c 0.494517,-0.00871 0.947906,0.5066305 0.940795,1.0679848 z`).attr({
            'opacity': 1,
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    }
}
RaphaelIconManualDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-icon-manual, raphael-icon-manual' },] }
];
/** @nocollapse */
RaphaelIconManualDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelIconManualDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    text: [{ type: Input }],
    error: [{ type: Output }],
    strokeWidth: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    fillOpacity: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RaphaelIconManualDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.position;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.text;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.error;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconManualDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLW1hbnVhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvaWNvbnMvcmFwaGFlbC1pY29uLW1hbnVhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFNdEQsTUFBTSxPQUFPLDBCQUEyQixTQUFRLFdBQVc7Ozs7O0lBeUJ2RCxZQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUN0QyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRm5CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFkekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFpQjNCLENBQUM7Ozs7SUFFRCxRQUFRO1FBRUosSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFTSxJQUFJLENBQUMsUUFBZTs7Y0FDakIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOzs7Ozs7Ozs7aUZBUzJDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDNUUsU0FBUyxFQUFFLENBQUM7WUFDWixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7WUFwREosU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLDhDQUE4QyxFQUFDOzs7O1lBUmpELFVBQVU7WUFHckIsY0FBYzs7O29CQU9sQixLQUFLO3VCQUdMLEtBQUs7bUJBR0wsS0FBSztvQkFHTCxNQUFNOzBCQUdOLEtBQUs7eUJBR0wsS0FBSztxQkFHTCxLQUFLOzBCQUdMLEtBQUs7Ozs7SUFyQk4sMkNBQ1c7O0lBRVgsOENBQ2dCOztJQUVoQiwwQ0FDYTs7SUFFYiwyQ0FDMkI7O0lBRTNCLGlEQUNvQjs7SUFFcEIsZ0RBQ2dCOztJQUVoQiw0Q0FDWTs7SUFFWixpREFDaUI7O0lBRUwsZ0RBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLy4uL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vLi4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1pY29uLW1hbnVhbCwgcmFwaGFlbC1pY29uLW1hbnVhbCd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxJY29uTWFudWFsRGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlV2lkdGg6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbENvbG9yczogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2U6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbE9wYWNpdHk6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KHBvc2l0aW9uOiBQb2ludCkge1xuICAgICAgICBjb25zdCBwYXRoMSA9IHRoaXMucGFwZXIucGF0aChgbSAxNyw5LjMyOTAzMjYgYyAtMC4wMDY5LDAuNTUxMjQ2MSAtMC40NTUxNjYsMS4wNDU1ODk0IC0wLjk0MDc3OCwxLjAzNzY2MDQgbCAtNS43OTI3NDYsMCBjXG4gICAgICAgIDAuMDA1MywwLjExOTM4MSAwLjAwMjYsMC4yMzcxMDcgMC4wMDYxLDAuMzU1OTY1IGwgNS4xNTQ5MTgsMCBjIDAuNDgyMDMyLC0wLjAwOTYgMC45MjU1MjksMC40OTA1MSAwLjkxOTUyNSwxLjAzNzU3NCAtMC4wMDc4LDAuNTM3MTI4XG4gICAgICAgIC0wLjQ0NjI4MywxLjAxNzUzMSAtMC45MTk1MjEsMS4wMDc2ODMgbCAtNS4yNDUyNzMsMCBjIC0wLjAxNTA3LDAuMTA0NDg0IC0wLjAzMzg5LDAuMjA0MDgxIC0wLjA1MzE2LDAuMzAxNTkxIGwgMi42MzAxNzUsMFxuICAgICAgICBjIDAuNDU0MTM3LC0wLjAwOTYgMC44NzIxMTIsMC40NjE3NTQgMC44NjYzODYsMC45NzcxODYgQyAxMy42MTk1MjYsMTQuNTU0MTA2IDEzLjIwNjI5MywxNS4wMDk0OTggMTIuNzU5MjQsMTUgTCAzLjc3NTMwNTQsMTVcbiAgICAgICAgQyAzLjYwNDU4MTIsMTUgMy40MzM1NTIsMTQuOTQ0MjMgMy4yOTE2MzYzLDE0LjgzNzEzNiBjIC0wLjAwMTc0LDAgLTAuMDA0MzYsMCAtMC4wMDYwOSwwIEMgMS43MjEyMDM1LDE0LjM2NzgwMVxuICAgICAgICAwLjk5OTk4MjU1LDExLjQ1ODY0MSAxLDExLjQ1ODY0MSBMIDEsNy40NTg4MzkzIGMgMCwwIDAuNjYyMzE0NCwtMS4zMTYzMzMgMS44MzkwNTgzLC0yLjA4NzI1ODQgMS4xNzY3NjE0LC0wLjc3MTE4NjhcbiAgICAgICAgNi44MDUzMzU4LC0yLjQwNDk3IDcuMjU4Nzg0NywtMi44MDUyOTAxIDAuNDUzNDg0LC0wLjQwMDMyIDEuNjYwMjEzLDEuNDg1OTk0MiAwLjA0Nzc1LDIuNDAxMDQ4NyBDIDguNTMzMjMxNSw1Ljg4MjM5NFxuICAgICAgICA4LjUwNzM1MSw1Ljc5OTYxMTMgOC40MzcwMjkyLDUuNzkzNjg1OSBsIDYuMzU2OTc0OCwtMC4wMDg3MSBjIDAuNDk3MDQ2LC0wLjAwOTU4IDAuOTUyMjczLDAuNTA5NzY3NiAwLjk0NjEyLDEuMDczODIzMlxuICAgICAgICAtMC4wMDUzLDAuNTU2MTI2IC0wLjQ1NjE3NiwxLjA1NjY1NjYgLTAuOTQ2MTIsMS4wNDk2ODU0IGwgLTQuNzI0MzUsMCBjIDAuMDEzMDcsMC4xMTQ5Mzc0IDAuMDI0NCwwLjIyODEzMTkgMC4wMzcyMSwwLjM0OTg2NjFcbiAgICAgICAgbCA1Ljk1MjE5NSwwIGMgMC40OTQ1MTcsLTAuMDA4NzEgMC45NDc5MDYsMC41MDY2MzA1IDAuOTQwNzk1LDEuMDY3OTg0OCB6YCkuYXR0cih7XG4gICAgICAgICAgICAnb3BhY2l0eSc6IDEsXG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGgxLnRyYW5zZm9ybSgnVCcgKyBwb3NpdGlvbi54ICsgJywnICsgcG9zaXRpb24ueSk7XG4gICAgfVxufVxuIl19