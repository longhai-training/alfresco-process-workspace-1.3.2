/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './../models/point';
import { RaphaelBase } from './../raphael-base';
import { RaphaelService } from './../raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelIconReceiveDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.draw(this.position);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    draw(position) {
        /** @type {?} */
        const path1 = this.paper.path(`m 0.5,2.5 0,13 17,0 0,-13 z M 2,4 6.5,8.5 2,13 z M 4,4 14,4 9,9 z m 12,0 0,9 -4.5,-4.5 z
         M 7.5,9.5 9,11 10.5,9.5 15,14 3,14 z`).attr({
            'stroke': this.stroke,
            'fill': this.fillColors
        });
        return path1.transform('T' + position.x + ',' + position.y);
    }
}
RaphaelIconReceiveDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-icon-receive, raphael-icon-receive' },] }
];
/** @nocollapse */
RaphaelIconReceiveDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelIconReceiveDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    text: [{ type: Input }],
    error: [{ type: Output }],
    strokeWidth: [{ type: Input }],
    fillColors: [{ type: Input }],
    stroke: [{ type: Input }],
    fillOpacity: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.paper;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.position;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.text;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.error;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.stroke;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelIconReceiveDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1pY29uLXJlY2VpdmUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vY29tcG9uZW50cy9yYXBoYWVsL2ljb25zL3JhcGhhZWwtaWNvbi1yZWNlaXZlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQU10RCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsV0FBVzs7Ozs7SUF5QnhELFlBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBQ3RDLEtBQUssQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFGbkIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWR6QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQWlCM0IsQ0FBQzs7OztJQUVELFFBQVE7UUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVNLElBQUksQ0FBQyxRQUFlOztjQUNqQixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7OENBQ1EsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN6QyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzFCLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7WUEzQ0osU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLGdEQUFnRCxFQUFDOzs7O1lBUm5ELFVBQVU7WUFHckIsY0FBYzs7O29CQU9sQixLQUFLO3VCQUdMLEtBQUs7bUJBR0wsS0FBSztvQkFHTCxNQUFNOzBCQUdOLEtBQUs7eUJBR0wsS0FBSztxQkFHTCxLQUFLOzBCQUdMLEtBQUs7Ozs7SUFyQk4sNENBQ1c7O0lBRVgsK0NBQ2dCOztJQUVoQiwyQ0FDYTs7SUFFYiw0Q0FDMkI7O0lBRTNCLGtEQUNvQjs7SUFFcEIsaURBQ2dCOztJQUVoQiw2Q0FDWTs7SUFFWixrREFDaUI7O0lBRUwsaURBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLy4uL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vLi4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi8uLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpcmVjdGl2ZSBzZWxlY3RvcnMgd2l0aG91dCBhZGYtIHByZWZpeCB3aWxsIGJlIGRlcHJlY2F0ZWQgb24gMy4wLjBcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1pY29uLXJlY2VpdmUsIHJhcGhhZWwtaWNvbi1yZWNlaXZlJ30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbEljb25SZWNlaXZlRGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlV2lkdGg6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbENvbG9yczogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2U6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbE9wYWNpdHk6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMucG9zaXRpb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KHBvc2l0aW9uOiBQb2ludCkge1xuICAgICAgICBjb25zdCBwYXRoMSA9IHRoaXMucGFwZXIucGF0aChgbSAwLjUsMi41IDAsMTMgMTcsMCAwLC0xMyB6IE0gMiw0IDYuNSw4LjUgMiwxMyB6IE0gNCw0IDE0LDQgOSw5IHogbSAxMiwwIDAsOSAtNC41LC00LjUgelxuICAgICAgICAgTSA3LjUsOS41IDksMTEgMTAuNSw5LjUgMTUsMTQgMywxNCB6YCkuYXR0cih7XG4gICAgICAgICAgICAnc3Ryb2tlJzogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICAnZmlsbCc6IHRoaXMuZmlsbENvbG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhdGgxLnRyYW5zZm9ybSgnVCcgKyBwb3NpdGlvbi54ICsgJywnICsgcG9zaXRpb24ueSk7XG4gICAgfVxufVxuIl19