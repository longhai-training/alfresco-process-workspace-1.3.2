/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
export class DiagramInclusiveGatewayComponent {
    /**
     * @param {?} elementRef
     * @param {?} diagramColorService
     */
    constructor(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.center = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 2.5, radius: 9.75 };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    }
}
DiagramInclusiveGatewayComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-inclusive-gateway',
                template: "<diagram-gateway [data]=\"data\"></diagram-gateway>\n<raphael-circle [center]=\"center\" [radius]=\"options.radius\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"\n                [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle>"
            }] }
];
/** @nocollapse */
DiagramInclusiveGatewayComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DiagramColorService }
];
DiagramInclusiveGatewayComponent.propDecorators = {
    data: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.data;
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.error;
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.center;
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.width;
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.height;
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.options;
    /** @type {?} */
    DiagramInclusiveGatewayComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramInclusiveGatewayComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1pbmNsdXNpdmUtZ2F0ZXdheS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL2dhdGV3YXlzL2RpYWdyYW0taW5jbHVzaXZlLWdhdGV3YXkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQU0zRSxNQUFNLE9BQU8sZ0NBQWdDOzs7OztJQVl6QyxZQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBUjVELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTNCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFHakIsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7SUFHOUIsQ0FBQzs7OztJQUVoRSxRQUFRO1FBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzlHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekUsQ0FBQzs7O1lBMUJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQywrU0FBeUQ7YUFDNUQ7Ozs7WUFObUIsVUFBVTtZQUNyQixtQkFBbUI7OzttQkFPdkIsS0FBSztvQkFHTCxNQUFNOzs7O0lBSFAsZ0RBQ1U7O0lBRVYsaURBQzJCOztJQUUzQixrREFBaUI7O0lBQ2pCLGlEQUFXOztJQUNYLGtEQUFZOztJQUNaLG1EQUE2Rjs7SUFFakYsc0RBQTZCOzs7OztJQUM3QiwrREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4gLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLWluY2x1c2l2ZS1nYXRld2F5JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS1pbmNsdXNpdmUtZ2F0ZXdheS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUluY2x1c2l2ZUdhdGV3YXlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjZW50ZXI6IGFueSA9IHt9O1xuICAgIHdpZHRoOiBhbnk7XG4gICAgaGVpZ2h0OiBhbnk7XG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAyLjUsIHJhZGl1czogOS43NX07XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIueCA9IHRoaXMuZGF0YS54ICsgKHRoaXMuZGF0YS53aWR0aCAvIDIpO1xuICAgICAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5kYXRhLnkgKyAodGhpcy5kYXRhLmhlaWdodCAvIDIpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2UgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0QnBtbkNvbG9yKHRoaXMuZGF0YSwgRGlhZ3JhbUNvbG9yU2VydmljZS5NQUlOX1NUUk9LRV9DT0xPUik7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsQ29sb3JzID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEZpbGxDb2xvdXIodGhpcy5kYXRhLmlkKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxPcGFjaXR5ID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEZpbGxPcGFjaXR5KCk7XG4gICAgfVxufVxuIl19