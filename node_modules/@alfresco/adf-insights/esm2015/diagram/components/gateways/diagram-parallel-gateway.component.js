/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { DiagramColorService } from '../../services/diagram-color.service';
export class DiagramParallelGatewayComponent {
    /**
     * @param {?} elementRef
     * @param {?} diagramColorService
     */
    constructor(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.error = new EventEmitter();
        this.center = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 3 };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.center.x = this.data.x;
        this.center.y = this.data.y;
        this.width = this.data.width;
        this.height = this.data.height;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    }
}
DiagramParallelGatewayComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-parallel-gateway',
                template: "<diagram-gateway [data]=\"data\"></diagram-gateway>\n<raphael-plus [center]=\"center\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-plus>"
            }] }
];
/** @nocollapse */
DiagramParallelGatewayComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DiagramColorService }
];
DiagramParallelGatewayComponent.propDecorators = {
    data: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.data;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.error;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.center;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.width;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.height;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.options;
    /** @type {?} */
    DiagramParallelGatewayComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DiagramParallelGatewayComponent.prototype.diagramColorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1wYXJhbGxlbC1nYXRld2F5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvZ2F0ZXdheXMvZGlhZ3JhbS1wYXJhbGxlbC1nYXRld2F5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFNM0UsTUFBTSxPQUFPLCtCQUErQjs7Ozs7SUFZeEMsWUFBbUIsVUFBc0IsRUFDckIsbUJBQXdDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDckIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVI1RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzQixXQUFNLEdBQVEsRUFBRSxDQUFDO1FBR2pCLFlBQU8sR0FBUSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUdkLENBQUM7Ozs7SUFFaEUsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUvQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pFLENBQUM7OztZQTVCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsZ1JBQXdEO2FBQzNEOzs7O1lBTm1CLFVBQVU7WUFDckIsbUJBQW1COzs7bUJBT3ZCLEtBQUs7b0JBR0wsTUFBTTs7OztJQUhQLCtDQUNVOztJQUVWLGdEQUMyQjs7SUFFM0IsaURBQWlCOztJQUNqQixnREFBVzs7SUFDWCxpREFBWTs7SUFDWixrREFBNkU7O0lBRWpFLHFEQUE2Qjs7Ozs7SUFDN0IsOERBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuIC8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAgKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhZ3JhbUNvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RpYWdyYW0tY29sb3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1wYXJhbGxlbC1nYXRld2F5JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS1wYXJhbGxlbC1nYXRld2F5LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtUGFyYWxsZWxHYXRld2F5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY2VudGVyOiBhbnkgPSB7fTtcbiAgICB3aWR0aDogYW55O1xuICAgIGhlaWdodDogYW55O1xuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogM307XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIueCA9IHRoaXMuZGF0YS54O1xuICAgICAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5kYXRhLnk7XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmRhdGEud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5kYXRhLmhlaWdodDtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEJwbW5Db2xvcih0aGlzLmRhdGEsIERpYWdyYW1Db2xvclNlcnZpY2UuTUFJTl9TVFJPS0VfQ09MT1IpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbENvbG9ycyA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRGaWxsQ29sb3VyKHRoaXMuZGF0YS5pZCk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsT3BhY2l0eSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRGaWxsT3BhY2l0eSgpO1xuICAgIH1cbn1cbiJdfQ==