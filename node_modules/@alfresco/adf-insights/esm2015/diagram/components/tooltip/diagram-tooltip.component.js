/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
/** @type {?} */
const POSITION = { BOTTOM: 'bottom', LEFT: 'left', RIGHT: 'right', TOP: 'top' };
/** @type {?} */
const STRATEGY = { CURSOR: 'cursor', ELEMENT: 'element' };
/** @type {?} */
const IS_ACTIVE_CLASS = 'adf-is-active';
export class DiagramTooltipComponent {
    constructor() {
        this.position = 'bottom';
        this.strategy = 'cursor';
    }
    /**
     * Set up event listeners for the target element (defined in the data.id)
     * @return {?}
     */
    ngAfterViewInit() {
        this.tooltipElement = this.tooltipContent.nativeElement;
        if (this.data.id) {
            this.targetElement = document.getElementById(this.data.id);
        }
        if (this.targetElement) {
            if (!this.targetElement.hasAttribute('tabindex')) {
                this.targetElement.setAttribute('tabindex', '0');
            }
            this.boundMouseEnterHandler = this.handleMouseEnter.bind(this);
            this.boundMouseLeaveAndScrollHandler = this.hideTooltip.bind(this);
            this.targetElement.addEventListener('mouseenter', this.boundMouseEnterHandler, false);
            this.targetElement.addEventListener('touchend', this.boundMouseEnterHandler, false);
            this.targetElement.addEventListener('mouseleave', this.boundMouseLeaveAndScrollHandler, false);
            window.addEventListener('scroll', this.boundMouseLeaveAndScrollHandler, true);
            window.addEventListener('touchstart', this.boundMouseLeaveAndScrollHandler);
        }
    }
    /**
     * Clear all bound event listeners
     * @return {?}
     */
    ngOnDestroy() {
        window.removeEventListener('scroll', this.boundMouseLeaveAndScrollHandler, true);
        window.removeEventListener('touchstart', this.boundMouseLeaveAndScrollHandler);
    }
    /**
     * Hides the tooltip
     * @private
     * @return {?}
     */
    hideTooltip() {
        this.tooltipElement.classList.remove(IS_ACTIVE_CLASS);
    }
    /**
     * Shows the tooltip
     * @private
     * @return {?}
     */
    showTooltip() {
        this.tooltipElement.classList.add(IS_ACTIVE_CLASS);
    }
    /**
     * Calculates the tooltip position and displays it
     *
     * @private
     * @param {?} event mouseenter/touchend event
     * @return {?}
     */
    handleMouseEnter(event) {
        /** @type {?} */
        let props;
        if (this.strategy === STRATEGY.ELEMENT) {
            props = event.target.getBoundingClientRect();
        }
        else {
            props = { top: (event.pageY - 150), left: event.pageX, width: event.layerX, height: 50 };
        }
        /** @type {?} */
        const top = props.top + (props.height / 2);
        /** @type {?} */
        const marginLeft = -1 * (this.tooltipElement.offsetWidth / 2);
        /** @type {?} */
        const marginTop = -1 * (this.tooltipElement.offsetHeight / 2);
        /** @type {?} */
        let left = props.left + (props.width / 2);
        if (this.position === POSITION.LEFT || this.position === POSITION.RIGHT) {
            left = (props.width / 2);
            if (top + marginTop < 0) {
                this.tooltipElement.style.top = '0';
                this.tooltipElement.style.marginTop = '0';
            }
            else {
                this.tooltipElement.style.top = top + 'px';
                this.tooltipElement.style.marginTop = marginTop + 'px';
            }
        }
        else {
            if (left + marginLeft < 0) {
                this.tooltipElement.style.left = '0';
                this.tooltipElement.style.marginLeft = '0';
            }
            else {
                this.tooltipElement.style.left = left + 'px';
                this.tooltipElement.style.marginLeft = marginLeft + 'px';
            }
        }
        if (this.position === POSITION.TOP) {
            this.tooltipElement.style.top = props.top - this.tooltipElement.offsetHeight - 10 + 'px';
        }
        else if (this.position === POSITION.RIGHT) {
            this.tooltipElement.style.left = props.left + props.width + 10 + 'px';
        }
        else if (this.position === POSITION.LEFT) {
            this.tooltipElement.style.left = props.left - this.tooltipElement.offsetWidth - 10 + 'px';
        }
        else {
            this.tooltipElement.style.top = props.top + props.height + 10 + 'px';
        }
        this.showTooltip();
    }
}
DiagramTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-tooltip',
                template: "<div #tooltipContent class=\"adf-diagram-tooltip\">\n    <div class=\"adf-diagram-tooltip-header\">{{ data.type }} {{ data.name || data.id }}</div>\n    <div class=\"adf-diagram-tooltip-body\">\n        <div *ngIf=\"data.value\" class=\"adf-diagram-heat-value\">\n            <span class=\"adf-diagram-value\">{{ data.value }}</span>\n            <span class=\"adf-diagram-valuetype\"> {{ data.dataType }}</span>\n        </div>\n        <div *ngIf=\"data.name\" class=\"adf-diagram-name-property\">\n            <span class=\"adf-diagram-propertyName\">Name:</span>\n            <span class=\"adf-diagram-propertyValue\">{{ data.name }}</span>\n        </div>\n        <div *ngFor=\"let property of data.properties\" class=\"adf-diagram-general-property\">\n            <span class=\"adf-diagram-propertyName\">{{ property.name }}:</span>\n            <span class=\"adf-diagram-propertyValue\">{{ property.value }}</span>\n        </div>\n    </div>\n</div>\n",
                styles: [""]
            }] }
];
DiagramTooltipComponent.propDecorators = {
    tooltipContent: [{ type: ViewChild, args: ['tooltipContent',] }],
    data: [{ type: Input }],
    position: [{ type: Input }],
    strategy: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.tooltipElement;
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.targetElement;
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.boundMouseEnterHandler;
    /**
     * @type {?}
     * @private
     */
    DiagramTooltipComponent.prototype.boundMouseLeaveAndScrollHandler;
    /** @type {?} */
    DiagramTooltipComponent.prototype.tooltipContent;
    /** @type {?} */
    DiagramTooltipComponent.prototype.data;
    /** @type {?} */
    DiagramTooltipComponent.prototype.position;
    /** @type {?} */
    DiagramTooltipComponent.prototype.strategy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS10b29sdGlwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvdG9vbHRpcC9kaWFncmFtLXRvb2x0aXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7TUFDNUYsUUFBUSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTs7TUFDekUsUUFBUSxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFOztNQUNuRCxlQUFlLEdBQUcsZUFBZTtBQU92QyxNQUFNLE9BQU8sdUJBQXVCO0lBTHBDO1FBa0JJLGFBQVEsR0FBVyxRQUFRLENBQUM7UUFHNUIsYUFBUSxHQUFXLFFBQVEsQ0FBQztJQW1HaEMsQ0FBQzs7Ozs7SUE5RlUsZUFBZTtRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1FBRXhELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM5RDtRQUVELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxHQUFH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YyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQzdGO2FBQU07WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7U0FDeEU7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7O1lBdkhKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQiw0OEJBQStDOzthQUVsRDs7OzZCQVFJLFNBQVMsU0FBQyxnQkFBZ0I7bUJBRTFCLEtBQUs7dUJBR0wsS0FBSzt1QkFHTCxLQUFLOzs7Ozs7O0lBYk4saURBQTRCOzs7OztJQUM1QixnREFBMkI7Ozs7O0lBQzNCLHlEQUFvRDs7Ozs7SUFDcEQsa0VBQTZEOztJQUU3RCxpREFBd0Q7O0lBRXhELHVDQUNVOztJQUVWLDJDQUM0Qjs7SUFFNUIsMkNBQzRCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuY29uc3QgUE9TSVRJT04gPSB7IEJPVFRPTTogJ2JvdHRvbScsIExFRlQ6ICdsZWZ0JywgUklHSFQ6ICdyaWdodCcsIFRPUDogJ3RvcCcgfTtcbmNvbnN0IFNUUkFURUdZID0geyBDVVJTT1I6ICdjdXJzb3InLCBFTEVNRU5UOiAnZWxlbWVudCcgfTtcbmNvbnN0IElTX0FDVElWRV9DTEFTUyA9ICdhZGYtaXMtYWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLXRvb2x0aXAnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kaWFncmFtLXRvb2x0aXAuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2RpYWdyYW0tdG9vbHRpcC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1Ub29sdGlwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblxuICAgIHByaXZhdGUgdG9vbHRpcEVsZW1lbnQ6IGFueTtcbiAgICBwcml2YXRlIHRhcmdldEVsZW1lbnQ6IGFueTtcbiAgICBwcml2YXRlIGJvdW5kTW91c2VFbnRlckhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPYmplY3Q7XG4gICAgcHJpdmF0ZSBib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyOiBFdmVudExpc3RlbmVyT2JqZWN0O1xuXG4gICAgQFZpZXdDaGlsZCgndG9vbHRpcENvbnRlbnQnKSB0b29sdGlwQ29udGVudDogRWxlbWVudFJlZjtcblxuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwb3NpdGlvbjogc3RyaW5nID0gJ2JvdHRvbSc7XG5cbiAgICBASW5wdXQoKVxuICAgIHN0cmF0ZWd5OiBzdHJpbmcgPSAnY3Vyc29yJztcblxuICAgIC8qKlxuICAgICAqIFNldCB1cCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSB0YXJnZXQgZWxlbWVudCAoZGVmaW5lZCBpbiB0aGUgZGF0YS5pZClcbiAgICAgKi9cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50ID0gdGhpcy50b29sdGlwQ29udGVudC5uYXRpdmVFbGVtZW50O1xuXG4gICAgICAgIGlmICh0aGlzLmRhdGEuaWQpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZGF0YS5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50YXJnZXRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudGFyZ2V0RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYm91bmRNb3VzZUVudGVySGFuZGxlciA9IHRoaXMuaGFuZGxlTW91c2VFbnRlci5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5ib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyID0gdGhpcy5oaWRlVG9vbHRpcC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLmJvdW5kTW91c2VFbnRlckhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuYm91bmRNb3VzZUVudGVySGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLmJvdW5kTW91c2VMZWF2ZUFuZFNjcm9sbEhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmJvdW5kTW91c2VMZWF2ZUFuZFNjcm9sbEhhbmRsZXIsIHRydWUpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmJvdW5kTW91c2VMZWF2ZUFuZFNjcm9sbEhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgYWxsIGJvdW5kIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5ib3VuZE1vdXNlTGVhdmVBbmRTY3JvbGxIYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmJvdW5kTW91c2VMZWF2ZUFuZFNjcm9sbEhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSB0b29sdGlwXG4gICAgICovXG4gICAgcHJpdmF0ZSBoaWRlVG9vbHRpcCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKElTX0FDVElWRV9DTEFTUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIHRvb2x0aXBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNob3dUb29sdGlwKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoSVNfQUNUSVZFX0NMQVNTKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSB0b29sdGlwIHBvc2l0aW9uIGFuZCBkaXNwbGF5cyBpdFxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IG1vdXNlZW50ZXIvdG91Y2hlbmQgZXZlbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZU1vdXNlRW50ZXIoZXZlbnQpOiB2b2lkIHtcbiAgICAgICAgbGV0IHByb3BzO1xuXG4gICAgICAgIGlmICh0aGlzLnN0cmF0ZWd5ID09PSBTVFJBVEVHWS5FTEVNRU5UKSB7XG4gICAgICAgICAgICBwcm9wcyA9IGV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzID0geyB0b3A6IChldmVudC5wYWdlWSAtIDE1MCksIGxlZnQ6IGV2ZW50LnBhZ2VYLCB3aWR0aDogZXZlbnQubGF5ZXJYLCBoZWlnaHQ6IDUwIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b3AgPSBwcm9wcy50b3AgKyAocHJvcHMuaGVpZ2h0IC8gMik7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSAtMSAqICh0aGlzLnRvb2x0aXBFbGVtZW50Lm9mZnNldFdpZHRoIC8gMik7XG4gICAgICAgIGNvbnN0IG1hcmdpblRvcCA9IC0xICogKHRoaXMudG9vbHRpcEVsZW1lbnQub2Zmc2V0SGVpZ2h0IC8gMik7XG4gICAgICAgIGxldCBsZWZ0ID0gcHJvcHMubGVmdCArIChwcm9wcy53aWR0aCAvIDIpO1xuXG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9uID09PSBQT1NJVElPTi5MRUZUIHx8IHRoaXMucG9zaXRpb24gPT09IFBPU0lUSU9OLlJJR0hUKSB7XG4gICAgICAgICAgICBsZWZ0ID0gKHByb3BzLndpZHRoIC8gMik7XG4gICAgICAgICAgICBpZiAodG9wICsgbWFyZ2luVG9wIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubWFyZ2luVG9wID0gJzAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLnRvcCA9IHRvcCArICdweCc7XG4gICAgICAgICAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3AgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGxlZnQgKyBtYXJnaW5MZWZ0IDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2x0aXBFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSAnMCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb24gPT09IFBPU0lUSU9OLlRPUCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZS50b3AgPSBwcm9wcy50b3AgLSB0aGlzLnRvb2x0aXBFbGVtZW50Lm9mZnNldEhlaWdodCAtIDEwICsgJ3B4JztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBvc2l0aW9uID09PSBQT1NJVElPTi5SSUdIVCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZS5sZWZ0ID0gcHJvcHMubGVmdCArIHByb3BzLndpZHRoICsgMTAgKyAncHgnO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucG9zaXRpb24gPT09IFBPU0lUSU9OLkxFRlQpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsZW1lbnQuc3R5bGUubGVmdCA9IHByb3BzLmxlZnQgLSB0aGlzLnRvb2x0aXBFbGVtZW50Lm9mZnNldFdpZHRoIC0gMTAgKyAncHgnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRWxlbWVudC5zdHlsZS50b3AgPSBwcm9wcy50b3AgKyBwcm9wcy5oZWlnaHQgKyAxMCArICdweCc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dUb29sdGlwKCk7XG4gICAgfVxufVxuIl19