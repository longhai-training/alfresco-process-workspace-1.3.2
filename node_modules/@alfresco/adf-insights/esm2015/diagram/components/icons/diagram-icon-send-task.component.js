/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
export class DiagramIconSendTaskComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.position = { x: this.data.x + 4, y: this.data.y + 4 };
        this.options.stroke = 'none';
        this.options.fillColors = '#16964d';
    }
}
DiagramIconSendTaskComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-icon-send-task',
                template: "<raphael-icon-send [position]=\"position\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"\n                   [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-icon-send>\n<diagram-tooltip [data]=\"data\"></diagram-tooltip>\n"
            }] }
];
/** @nocollapse */
DiagramIconSendTaskComponent.ctorParameters = () => [
    { type: ElementRef }
];
DiagramIconSendTaskComponent.propDecorators = {
    data: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramIconSendTaskComponent.prototype.data;
    /** @type {?} */
    DiagramIconSendTaskComponent.prototype.error;
    /** @type {?} */
    DiagramIconSendTaskComponent.prototype.position;
    /** @type {?} */
    DiagramIconSendTaskComponent.prototype.options;
    /** @type {?} */
    DiagramIconSendTaskComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1pY29uLXNlbmQtdGFzay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL2ljb25zL2RpYWdyYW0taWNvbi1zZW5kLXRhc2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0zRixNQUFNLE9BQU8sNEJBQTRCOzs7O0lBV3JDLFlBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFOekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJM0IsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBRWxDLENBQUM7Ozs7SUFFN0MsUUFBUTtRQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUU7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFFO0lBQ3pDLENBQUM7OztZQXJCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsa1NBQXNEO2FBQ3pEOzs7O1lBTG1CLFVBQVU7OzttQkFPekIsS0FBSztvQkFHTCxNQUFNOzs7O0lBSFAsNENBQ1U7O0lBRVYsNkNBQzJCOztJQUUzQixnREFBYzs7SUFFZCwrQ0FBOEU7O0lBRWxFLGtEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3IgICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLWljb24tc2VuZC10YXNrJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS1pY29uLXNlbmQtdGFzay5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUljb25TZW5kVGFza0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHBvc2l0aW9uOiBhbnk7XG5cbiAgICBvcHRpb25zOiBhbnkgPSB7c3Ryb2tlOiAnJywgZmlsbENvbG9yczogJycsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6ICcnfTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7eDogdGhpcy5kYXRhLnggKyA0LCB5OiB0aGlzLmRhdGEueSArIDR9O1xuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlID0gJ25vbmUnIDtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSAnIzE2OTY0ZCcgO1xuICAgIH1cbn1cbiJdfQ==