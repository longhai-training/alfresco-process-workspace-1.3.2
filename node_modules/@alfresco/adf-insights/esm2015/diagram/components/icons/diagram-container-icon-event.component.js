/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
export class DiagramContainerIconEventTaskComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.error = new EventEmitter();
    }
}
DiagramContainerIconEventTaskComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-container-icon-event',
                template: "<div [ngSwitch]=\"type\">\n    <div *ngSwitchCase=\"'timer'\">\n        <diagram-icon-timer [data]=\"data\"></diagram-icon-timer>\n    </div>\n    <div *ngSwitchCase=\"'error'\">\n        <diagram-icon-error [data]=\"data\" [fillColor]=\"fillColor\"></diagram-icon-error>\n    </div>\n    <div *ngSwitchCase=\"'signal'\">\n        <diagram-icon-signal [data]=\"data\" [fillColor]=\"fillColor\"></diagram-icon-signal>\n    </div>\n    <div *ngSwitchCase=\"'message'\">\n        <diagram-icon-message [data]=\"data\"></diagram-icon-message>\n    </div>\n</div>"
            }] }
];
/** @nocollapse */
DiagramContainerIconEventTaskComponent.ctorParameters = () => [
    { type: ElementRef }
];
DiagramContainerIconEventTaskComponent.propDecorators = {
    data: [{ type: Input }],
    type: [{ type: Input }],
    fillColor: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramContainerIconEventTaskComponent.prototype.data;
    /** @type {?} */
    DiagramContainerIconEventTaskComponent.prototype.type;
    /** @type {?} */
    DiagramContainerIconEventTaskComponent.prototype.fillColor;
    /** @type {?} */
    DiagramContainerIconEventTaskComponent.prototype.error;
    /** @type {?} */
    DiagramContainerIconEventTaskComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1jb250YWluZXItaWNvbi1ldmVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL2ljb25zL2RpYWdyYW0tY29udGFpbmVyLWljb24tZXZlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU1uRixNQUFNLE9BQU8sc0NBQXNDOzs7O0lBYS9DLFlBQW1CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFGekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFaUIsQ0FBQzs7O1lBakJoRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDhCQUE4QjtnQkFDeEMsMGpCQUE0RDthQUMvRDs7OztZQUxtQixVQUFVOzs7bUJBT3pCLEtBQUs7bUJBR0wsS0FBSzt3QkFHTCxLQUFLO29CQUdMLE1BQU07Ozs7SUFUUCxzREFDVTs7SUFFVixzREFDYTs7SUFFYiwyREFDa0I7O0lBRWxCLHVEQUMyQjs7SUFFZiw0REFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4gLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0tY29udGFpbmVyLWljb24tZXZlbnQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kaWFncmFtLWNvbnRhaW5lci1pY29uLWV2ZW50LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtQ29udGFpbmVySWNvbkV2ZW50VGFza0NvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHR5cGU6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbENvbG9yOiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxufVxuIl19