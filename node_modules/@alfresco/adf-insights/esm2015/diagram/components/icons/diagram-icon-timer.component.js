/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
export class DiagramIconTimerComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.center = {};
        this.circleOptions = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
        this.timerOptions = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
        this.circleRadius = 10;
        this.position = { x: this.data.x + 5, y: this.data.y + 5 };
        this.circleOptions.stroke = 'black';
        this.circleOptions.fillColors = 'none';
        this.timerOptions.stroke = 'none';
        this.timerOptions.fillColors = '#585858';
    }
}
DiagramIconTimerComponent.decorators = [
    { type: Component, args: [{
                selector: 'diagram-icon-timer',
                template: "<raphael-circle [center]=\"center\" [radius]=\"circleRadius\" [strokeWidth]=\"circleOptions.strokeWidth\" [stroke]=\"circleOptions.stroke\"\n                [fillColors]=\"circleOptions.fillColors\" [fillOpacity]=\"circleOptions.fillOpacity\"></raphael-circle>\n<raphael-icon-timer [position]=\"position\" [stroke]=\"timerOptions.stroke\" [strokeWidth]=\"timerOptions.strokeWidth\"\n                      [fillColors]=\"timerOptions.fillColors\" [fillOpacity]=\"timerOptions.fillOpacity\"></raphael-icon-timer>\n<diagram-tooltip [data]=\"data\"></diagram-tooltip>\n"
            }] }
];
/** @nocollapse */
DiagramIconTimerComponent.ctorParameters = () => [
    { type: ElementRef }
];
DiagramIconTimerComponent.propDecorators = {
    data: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DiagramIconTimerComponent.prototype.data;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.error;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.center;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.position;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.circleRadius;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.circleOptions;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.timerOptions;
    /** @type {?} */
    DiagramIconTimerComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1pY29uLXRpbWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvaWNvbnMvZGlhZ3JhbS1pY29uLXRpbWVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNM0YsTUFBTSxPQUFPLHlCQUF5Qjs7OztJQWVsQyxZQUFtQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBVnpDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTNCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFLakIsa0JBQWEsR0FBUSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUMsQ0FBQztRQUNwRixpQkFBWSxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBRXZDLENBQUM7Ozs7SUFFN0MsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFFO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBRTtRQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUU7UUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFFO0lBQzlDLENBQUM7OztZQS9CSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsaWtCQUFrRDthQUNyRDs7OztZQUxtQixVQUFVOzs7bUJBT3pCLEtBQUs7b0JBR0wsTUFBTTs7OztJQUhQLHlDQUNVOztJQUVWLDBDQUMyQjs7SUFFM0IsMkNBQWlCOztJQUNqQiw2Q0FBYzs7SUFFZCxpREFBcUI7O0lBRXJCLGtEQUFvRjs7SUFDcEYsaURBQW1GOztJQUV2RSwrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4gLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yICAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1pY29uLXRpbWVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGlhZ3JhbS1pY29uLXRpbWVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtSWNvblRpbWVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY2VudGVyOiBhbnkgPSB7fTtcbiAgICBwb3NpdGlvbjogYW55O1xuXG4gICAgY2lyY2xlUmFkaXVzOiBudW1iZXI7XG5cbiAgICBjaXJjbGVPcHRpb25zOiBhbnkgPSB7c3Ryb2tlOiAnJywgZmlsbENvbG9yczogJycsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6ICcnfTtcbiAgICB0aW1lck9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJyd9O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIueCA9IHRoaXMuZGF0YS54ICsgKHRoaXMuZGF0YS53aWR0aCAvIDIpO1xuICAgICAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5kYXRhLnkgKyAodGhpcy5kYXRhLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLmNpcmNsZVJhZGl1cyA9IDEwO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0ge3g6IHRoaXMuZGF0YS54ICsgNSwgeTogdGhpcy5kYXRhLnkgKyA1fTtcblxuICAgICAgICB0aGlzLmNpcmNsZU9wdGlvbnMuc3Ryb2tlID0gJ2JsYWNrJyA7XG4gICAgICAgIHRoaXMuY2lyY2xlT3B0aW9ucy5maWxsQ29sb3JzID0gJ25vbmUnIDtcbiAgICAgICAgdGhpcy50aW1lck9wdGlvbnMuc3Ryb2tlID0gJ25vbmUnIDtcbiAgICAgICAgdGhpcy50aW1lck9wdGlvbnMuZmlsbENvbG9ycyA9ICcjNTg1ODU4JyA7XG4gICAgfVxufVxuIl19