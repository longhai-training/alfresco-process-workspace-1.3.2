/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
export class DiagramColorService {
    constructor() {
    }
    /**
     * @param {?} totalColors
     * @return {?}
     */
    setTotalColors(totalColors) {
        this.totalColors = totalColors;
    }
    /**
     * @return {?}
     */
    getFillOpacity() {
        return '0.6';
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getFillColour(key) {
        if (this.totalColors && this.totalColors.hasOwnProperty(key)) {
            /** @type {?} */
            const colorPercentage = this.totalColors[key];
            return this.convertColorToHsb(colorPercentage);
        }
        else {
            return DiagramColorService.ACTIVITY_FILL_COLOR;
        }
    }
    /**
     * @param {?} data
     * @param {?} defaultColor
     * @return {?}
     */
    getBpmnColor(data, defaultColor) {
        if (data.current) {
            return DiagramColorService.CURRENT_COLOR;
        }
        else if (data.completed) {
            return DiagramColorService.COMPLETED_COLOR;
        }
        else {
            return defaultColor;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getBpmnStrokeWidth(data) {
        if (data.current || data.completed) {
            return DiagramColorService.TASK_HIGHLIGHT_STROKE;
        }
        else {
            return DiagramColorService.TASK_STROKE;
        }
    }
    /**
     * @param {?} colorPercentage
     * @return {?}
     */
    convertColorToHsb(colorPercentage) {
        /** @type {?} */
        const hue = (120.0 - (colorPercentage * 1.2)) / 360.0;
        return 'hsb(' + hue + ', 1, 1)';
    }
}
DiagramColorService.CURRENT_COLOR = '#017501';
DiagramColorService.COMPLETED_COLOR = '#2632aa';
DiagramColorService.ACTIVITY_STROKE_COLOR = '#bbbbbb';
DiagramColorService.MAIN_STROKE_COLOR = '#585858';
DiagramColorService.ACTIVITY_FILL_COLOR = '#f9f9f9';
DiagramColorService.TASK_STROKE = 1;
DiagramColorService.TASK_HIGHLIGHT_STROKE = 2;
DiagramColorService.CALL_ACTIVITY_STROKE = 2;
DiagramColorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DiagramColorService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    DiagramColorService.CURRENT_COLOR;
    /** @type {?} */
    DiagramColorService.COMPLETED_COLOR;
    /** @type {?} */
    DiagramColorService.ACTIVITY_STROKE_COLOR;
    /** @type {?} */
    DiagramColorService.MAIN_STROKE_COLOR;
    /** @type {?} */
    DiagramColorService.ACTIVITY_FILL_COLOR;
    /** @type {?} */
    DiagramColorService.TASK_STROKE;
    /** @type {?} */
    DiagramColorService.TASK_HIGHLIGHT_STROKE;
    /** @type {?} */
    DiagramColorService.CALL_ACTIVITY_STROKE;
    /** @type {?} */
    DiagramColorService.prototype.totalColors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbS1jb2xvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsTUFBTSxPQUFPLG1CQUFtQjtJQWU1QjtJQUNBLENBQUM7Ozs7O0lBRUQsY0FBYyxDQUFDLFdBQVc7UUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELGNBQWM7UUFDVixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxHQUFXO1FBQ3JCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTs7a0JBQ3BELGVBQWUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztZQUM3QyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNsRDthQUFNO1lBQ0gsT0FBTyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQztTQUNsRDtJQUNMLENBQUM7Ozs7OztJQUVELFlBQVksQ0FBQyxJQUFJLEVBQUUsWUFBWTtRQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxPQUFPLG1CQUFtQixDQUFDLGFBQWEsQ0FBQztTQUM1QzthQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUN2QixPQUFPLG1CQUFtQixDQUFDLGVBQWUsQ0FBQztTQUM5QzthQUFNO1lBQ0gsT0FBTyxZQUFZLENBQUM7U0FDdkI7SUFDTCxDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLElBQUk7UUFDbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEMsT0FBTyxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQztTQUNwRDthQUFNO1lBQ0gsT0FBTyxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7U0FDMUM7SUFDTCxDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLGVBQXVCOztjQUMvQixHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLO1FBQ3JELE9BQU8sTUFBTSxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUM7SUFDcEMsQ0FBQzs7QUF0RE0saUNBQWEsR0FBRyxTQUFTLENBQUM7QUFDMUIsbUNBQWUsR0FBRyxTQUFTLENBQUM7QUFDNUIseUNBQXFCLEdBQUcsU0FBUyxDQUFDO0FBQ2xDLHFDQUFpQixHQUFHLFNBQVMsQ0FBQztBQUU5Qix1Q0FBbUIsR0FBRyxTQUFTLENBQUM7QUFFaEMsK0JBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEIseUNBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLHdDQUFvQixHQUFHLENBQUMsQ0FBQzs7WUFabkMsVUFBVTs7Ozs7O0lBR1Asa0NBQWlDOztJQUNqQyxvQ0FBbUM7O0lBQ25DLDBDQUF5Qzs7SUFDekMsc0NBQXFDOztJQUVyQyx3Q0FBdUM7O0lBRXZDLGdDQUF1Qjs7SUFDdkIsMENBQWlDOztJQUNqQyx5Q0FBZ0M7O0lBRWhDLDBDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERpYWdyYW1Db2xvclNlcnZpY2Uge1xuXG4gICAgc3RhdGljIENVUlJFTlRfQ09MT1IgPSAnIzAxNzUwMSc7XG4gICAgc3RhdGljIENPTVBMRVRFRF9DT0xPUiA9ICcjMjYzMmFhJztcbiAgICBzdGF0aWMgQUNUSVZJVFlfU1RST0tFX0NPTE9SID0gJyNiYmJiYmInO1xuICAgIHN0YXRpYyBNQUlOX1NUUk9LRV9DT0xPUiA9ICcjNTg1ODU4JztcblxuICAgIHN0YXRpYyBBQ1RJVklUWV9GSUxMX0NPTE9SID0gJyNmOWY5ZjknO1xuXG4gICAgc3RhdGljIFRBU0tfU1RST0tFID0gMTtcbiAgICBzdGF0aWMgVEFTS19ISUdITElHSFRfU1RST0tFID0gMjtcbiAgICBzdGF0aWMgQ0FMTF9BQ1RJVklUWV9TVFJPS0UgPSAyO1xuXG4gICAgdG90YWxDb2xvcnM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIHNldFRvdGFsQ29sb3JzKHRvdGFsQ29sb3JzKSB7XG4gICAgICAgIHRoaXMudG90YWxDb2xvcnMgPSB0b3RhbENvbG9ycztcbiAgICB9XG5cbiAgICBnZXRGaWxsT3BhY2l0eSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJzAuNic7XG4gICAgfVxuXG4gICAgZ2V0RmlsbENvbG91cihrZXk6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy50b3RhbENvbG9ycyAmJiB0aGlzLnRvdGFsQ29sb3JzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yUGVyY2VudGFnZSA9IHRoaXMudG90YWxDb2xvcnNba2V5XTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRDb2xvclRvSHNiKGNvbG9yUGVyY2VudGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGlhZ3JhbUNvbG9yU2VydmljZS5BQ1RJVklUWV9GSUxMX0NPTE9SO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QnBtbkNvbG9yKGRhdGEsIGRlZmF1bHRDb2xvcikge1xuICAgICAgICBpZiAoZGF0YS5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gRGlhZ3JhbUNvbG9yU2VydmljZS5DVVJSRU5UX0NPTE9SO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY29tcGxldGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gRGlhZ3JhbUNvbG9yU2VydmljZS5DT01QTEVURURfQ09MT1I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdENvbG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QnBtblN0cm9rZVdpZHRoKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuY3VycmVudCB8fCBkYXRhLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuVEFTS19ISUdITElHSFRfU1RST0tFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuVEFTS19TVFJPS0U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb252ZXJ0Q29sb3JUb0hzYihjb2xvclBlcmNlbnRhZ2U6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGh1ZSA9ICgxMjAuMCAtIChjb2xvclBlcmNlbnRhZ2UgKiAxLjIpKSAvIDM2MC4wO1xuICAgICAgICByZXR1cm4gJ2hzYignICsgaHVlICsgJywgMSwgMSknO1xuICAgIH1cbn1cbiJdfQ==