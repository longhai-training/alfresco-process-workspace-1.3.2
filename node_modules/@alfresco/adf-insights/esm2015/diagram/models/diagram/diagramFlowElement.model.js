/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DiagramWayPointModel } from './diagramWayPoint.model';
export class DiagramFlowElementModel {
    /**
     * @param {?=} obj
     */
    constructor(obj) {
        this.properties = [];
        this.waypoints = [];
        if (obj) {
            this.completed = !!obj.completed;
            this.current = !!obj.current;
            this.id = obj.id;
            this.properties = obj.properties;
            this.sourceRef = obj.sourceRef;
            this.targetRef = obj.targetRef;
            this.type = obj.type;
            if (obj.waypoints) {
                obj.waypoints.forEach((/**
                 * @param {?} waypoint
                 * @return {?}
                 */
                (waypoint) => {
                    this.waypoints.push(new DiagramWayPointModel(waypoint));
                }));
            }
        }
    }
}
if (false) {
    /** @type {?} */
    DiagramFlowElementModel.prototype.completed;
    /** @type {?} */
    DiagramFlowElementModel.prototype.current;
    /** @type {?} */
    DiagramFlowElementModel.prototype.id;
    /** @type {?} */
    DiagramFlowElementModel.prototype.properties;
    /** @type {?} */
    DiagramFlowElementModel.prototype.sourceRef;
    /** @type {?} */
    DiagramFlowElementModel.prototype.targetRef;
    /** @type {?} */
    DiagramFlowElementModel.prototype.type;
    /** @type {?} */
    DiagramFlowElementModel.prototype.waypoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbUZsb3dFbGVtZW50Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vbW9kZWxzL2RpYWdyYW0vZGlhZ3JhbUZsb3dFbGVtZW50Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRS9ELE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFVaEMsWUFBWSxHQUFTO1FBTnJCLGVBQVUsR0FBVSxFQUFFLENBQUM7UUFJdkIsY0FBUyxHQUEyQixFQUFFLENBQUM7UUFHbkMsSUFBSSxHQUFHLEVBQUU7WUFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7WUFDN0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztZQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO1lBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNyQixJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7Z0JBQ2YsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O2dCQUFDLENBQUMsUUFBOEIsRUFBRSxFQUFFO29CQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELENBQUMsRUFBQyxDQUFDO2FBQ047U0FDSjtJQUNMLENBQUM7Q0FDSjs7O0lBekJHLDRDQUFtQjs7SUFDbkIsMENBQWlCOztJQUNqQixxQ0FBVzs7SUFDWCw2Q0FBdUI7O0lBQ3ZCLDRDQUFrQjs7SUFDbEIsNENBQWtCOztJQUNsQix1Q0FBYTs7SUFDYiw0Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaWFncmFtV2F5UG9pbnRNb2RlbCB9IGZyb20gJy4vZGlhZ3JhbVdheVBvaW50Lm1vZGVsJztcblxuZXhwb3J0IGNsYXNzIERpYWdyYW1GbG93RWxlbWVudE1vZGVsIHtcbiAgICBjb21wbGV0ZWQ6IGJvb2xlYW47XG4gICAgY3VycmVudDogYm9vbGVhbjtcbiAgICBpZDogc3RyaW5nO1xuICAgIHByb3BlcnRpZXM6IGFueVtdID0gW107XG4gICAgc291cmNlUmVmOiBzdHJpbmc7XG4gICAgdGFyZ2V0UmVmOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHdheXBvaW50czogRGlhZ3JhbVdheVBvaW50TW9kZWxbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkID0gISFvYmouY29tcGxldGVkO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gISFvYmouY3VycmVudDtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBvYmouaWQ7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBvYmoucHJvcGVydGllcztcbiAgICAgICAgICAgIHRoaXMuc291cmNlUmVmID0gb2JqLnNvdXJjZVJlZjtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0UmVmID0gb2JqLnRhcmdldFJlZjtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IG9iai50eXBlO1xuICAgICAgICAgICAgaWYgKG9iai53YXlwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBvYmoud2F5cG9pbnRzLmZvckVhY2goKHdheXBvaW50OiBEaWFncmFtV2F5UG9pbnRNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndheXBvaW50cy5wdXNoKG5ldyBEaWFncmFtV2F5UG9pbnRNb2RlbCh3YXlwb2ludCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19