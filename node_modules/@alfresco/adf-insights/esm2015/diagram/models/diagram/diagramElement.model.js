/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DiagramElementPropertyModel } from './diagramElementProperty.model';
import { DiagramEventDefinitionModel } from './diagramEventDefinition.model';
export class DiagramElementModel {
    /**
     * @param {?=} obj
     */
    constructor(obj) {
        this.properties = [];
        this.dataType = '';
        this.taskType = '';
        if (obj) {
            this.completed = !!obj.completed;
            this.current = !!obj.current;
            this.height = obj.height || '';
            this.id = obj.id || '';
            this.name = obj.name || '';
            this.type = obj.type || '';
            this.width = obj.width || '';
            this.value = obj.value || '';
            this.x = obj.x || '';
            this.y = obj.y || '';
            this.taskType = obj.taskType || '';
            if (obj.properties) {
                obj.properties.forEach((/**
                 * @param {?} property
                 * @return {?}
                 */
                (property) => {
                    this.properties.push(new DiagramElementPropertyModel(property));
                }));
            }
            this.dataType = obj.dataType || '';
            if (obj.eventDefinition) {
                this.eventDefinition = new DiagramEventDefinitionModel(obj.eventDefinition);
            }
        }
    }
}
if (false) {
    /** @type {?} */
    DiagramElementModel.prototype.completed;
    /** @type {?} */
    DiagramElementModel.prototype.current;
    /** @type {?} */
    DiagramElementModel.prototype.height;
    /** @type {?} */
    DiagramElementModel.prototype.id;
    /** @type {?} */
    DiagramElementModel.prototype.name;
    /** @type {?} */
    DiagramElementModel.prototype.type;
    /** @type {?} */
    DiagramElementModel.prototype.width;
    /** @type {?} */
    DiagramElementModel.prototype.value;
    /** @type {?} */
    DiagramElementModel.prototype.x;
    /** @type {?} */
    DiagramElementModel.prototype.y;
    /** @type {?} */
    DiagramElementModel.prototype.properties;
    /** @type {?} */
    DiagramElementModel.prototype.dataType;
    /** @type {?} */
    DiagramElementModel.prototype.eventDefinition;
    /** @type {?} */
    DiagramElementModel.prototype.taskType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbUVsZW1lbnQubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9tb2RlbHMvZGlhZ3JhbS9kaWFncmFtRWxlbWVudC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RSxNQUFNLE9BQU8sbUJBQW1COzs7O0lBZ0I1QixZQUFZLEdBQVM7UUFMckIsZUFBVSxHQUFrQyxFQUFFLENBQUM7UUFDL0MsYUFBUSxHQUFXLEVBQUUsQ0FBQztRQUV0QixhQUFRLEdBQVcsRUFBRSxDQUFDO1FBR2xCLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1lBQ25DLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRTtnQkFDaEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O2dCQUFDLENBQUMsUUFBcUMsRUFBRSxFQUFFO29CQUM3RCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLDJCQUEyQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BFLENBQUMsRUFBQyxDQUFDO2FBQ047WUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1lBQ25DLElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRTtnQkFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLDJCQUEyQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUMvRTtTQUNKO0lBQ0wsQ0FBQztDQUNKOzs7SUF2Q0csd0NBQW1COztJQUNuQixzQ0FBaUI7O0lBQ2pCLHFDQUFlOztJQUNmLGlDQUFXOztJQUNYLG1DQUFhOztJQUNiLG1DQUFhOztJQUNiLG9DQUFjOztJQUNkLG9DQUFjOztJQUNkLGdDQUFVOztJQUNWLGdDQUFVOztJQUNWLHlDQUErQzs7SUFDL0MsdUNBQXNCOztJQUN0Qiw4Q0FBNkM7O0lBQzdDLHVDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpYWdyYW1FbGVtZW50UHJvcGVydHlNb2RlbCB9IGZyb20gJy4vZGlhZ3JhbUVsZW1lbnRQcm9wZXJ0eS5tb2RlbCc7XG5pbXBvcnQgeyBEaWFncmFtRXZlbnREZWZpbml0aW9uTW9kZWwgfSBmcm9tICcuL2RpYWdyYW1FdmVudERlZmluaXRpb24ubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUVsZW1lbnRNb2RlbCB7XG4gICAgY29tcGxldGVkOiBib29sZWFuO1xuICAgIGN1cnJlbnQ6IGJvb2xlYW47XG4gICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHdpZHRoOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICB4OiBzdHJpbmc7XG4gICAgeTogc3RyaW5nO1xuICAgIHByb3BlcnRpZXM6IERpYWdyYW1FbGVtZW50UHJvcGVydHlNb2RlbFtdID0gW107XG4gICAgZGF0YVR5cGU6IHN0cmluZyA9ICcnO1xuICAgIGV2ZW50RGVmaW5pdGlvbjogRGlhZ3JhbUV2ZW50RGVmaW5pdGlvbk1vZGVsO1xuICAgIHRhc2tUeXBlOiBzdHJpbmcgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlZCA9ICEhb2JqLmNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9ICEhb2JqLmN1cnJlbnQ7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IG9iai5oZWlnaHQgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLmlkID0gb2JqLmlkIHx8ICcnO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gb2JqLm5hbWUgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZSB8fCAnJztcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBvYmoud2lkdGggfHwgJyc7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gb2JqLnZhbHVlIHx8ICcnO1xuICAgICAgICAgICAgdGhpcy54ID0gb2JqLnggfHwgJyc7XG4gICAgICAgICAgICB0aGlzLnkgPSBvYmoueSB8fCAnJztcbiAgICAgICAgICAgIHRoaXMudGFza1R5cGUgPSBvYmoudGFza1R5cGUgfHwgJyc7XG4gICAgICAgICAgICBpZiAob2JqLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBvYmoucHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eTogRGlhZ3JhbUVsZW1lbnRQcm9wZXJ0eU1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5wdXNoKG5ldyBEaWFncmFtRWxlbWVudFByb3BlcnR5TW9kZWwocHJvcGVydHkpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0YVR5cGUgPSBvYmouZGF0YVR5cGUgfHwgJyc7XG4gICAgICAgICAgICBpZiAob2JqLmV2ZW50RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnREZWZpbml0aW9uID0gbmV3IERpYWdyYW1FdmVudERlZmluaXRpb25Nb2RlbChvYmouZXZlbnREZWZpbml0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==