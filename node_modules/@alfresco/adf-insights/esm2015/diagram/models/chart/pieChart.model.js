/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Chart } from './chart.model';
export class PieChart extends Chart {
    /**
     * @param {?=} obj
     */
    constructor(obj) {
        super(obj);
        this.labels = [];
        this.data = [];
        this.title = obj && obj.title || null;
        this.titleKey = obj && obj.titleKey || null;
        if (obj.values) {
            obj.values.forEach((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.add(value.key, value.y);
            }));
        }
    }
    /**
     * @param {?} label
     * @param {?} data
     * @return {?}
     */
    add(label, data) {
        this.labels.push(label);
        this.data.push(data);
    }
    /**
     * @return {?}
     */
    hasData() {
        return this.data && this.data.length > 0 ? true : false;
    }
    /**
     * @return {?}
     */
    hasZeroValues() {
        /** @type {?} */
        let isZeroValues = false;
        if (this.hasData()) {
            isZeroValues = true;
            this.data.forEach((/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                if (value.toString() !== '0') {
                    isZeroValues = false;
                }
            }));
        }
        return isZeroValues;
    }
}
if (false) {
    /** @type {?} */
    PieChart.prototype.title;
    /** @type {?} */
    PieChart.prototype.titleKey;
    /** @type {?} */
    PieChart.prototype.labels;
    /** @type {?} */
    PieChart.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllQ2hhcnQubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9tb2RlbHMvY2hhcnQvcGllQ2hhcnQubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0QyxNQUFNLE9BQU8sUUFBUyxTQUFRLEtBQUs7Ozs7SUFNL0IsWUFBWSxHQUFTO1FBQ2pCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUpmLFdBQU0sR0FBYSxFQUFFLENBQUM7UUFDdEIsU0FBSSxHQUFhLEVBQUUsQ0FBQztRQUloQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztRQUM1QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDWixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7Ozs7SUFFRCxHQUFHLENBQUMsS0FBYSxFQUFFLElBQVk7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM1RCxDQUFDOzs7O0lBRUQsYUFBYTs7WUFDTCxZQUFZLEdBQVksS0FBSztRQUNqQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNoQixZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTzs7OztZQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3hCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEdBQUcsRUFBRTtvQkFDMUIsWUFBWSxHQUFHLEtBQUssQ0FBQztpQkFDeEI7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKOzs7SUFyQ0cseUJBQWM7O0lBQ2QsNEJBQWlCOztJQUNqQiwwQkFBc0I7O0lBQ3RCLHdCQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENoYXJ0IH0gZnJvbSAnLi9jaGFydC5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBQaWVDaGFydCBleHRlbmRzIENoYXJ0IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHRpdGxlS2V5OiBzdHJpbmc7XG4gICAgbGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGRhdGE6IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgc3VwZXIob2JqKTtcbiAgICAgICAgdGhpcy50aXRsZSA9IG9iaiAmJiBvYmoudGl0bGUgfHwgbnVsbDtcbiAgICAgICAgdGhpcy50aXRsZUtleSA9IG9iaiAmJiBvYmoudGl0bGVLZXkgfHwgbnVsbDtcbiAgICAgICAgaWYgKG9iai52YWx1ZXMpIHtcbiAgICAgICAgICAgIG9iai52YWx1ZXMuZm9yRWFjaCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKHZhbHVlLmtleSwgdmFsdWUueSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZChsYWJlbDogc3RyaW5nLCBkYXRhOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sYWJlbHMucHVzaChsYWJlbCk7XG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKGRhdGEpO1xuICAgIH1cblxuICAgIGhhc0RhdGEoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaGFzWmVyb1ZhbHVlcygpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IGlzWmVyb1ZhbHVlczogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5oYXNEYXRhKCkpIHtcbiAgICAgICAgICAgIGlzWmVyb1ZhbHVlcyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRhdGEuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUudG9TdHJpbmcoKSAhPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzWmVyb1ZhbHVlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1plcm9WYWx1ZXM7XG4gICAgfVxufVxuIl19