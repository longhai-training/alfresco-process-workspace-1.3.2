/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { ReportQuery } from '../../diagram/models/report/reportQuery.model';
import { AnalyticsService } from '../services/analytics.service';
export class AnalyticsGeneratorComponent {
    /**
     * @param {?} analyticsService
     */
    constructor(analyticsService) {
        this.analyticsService = analyticsService;
        this.reportParamQuery = undefined;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.showDetails = false;
        this.barChartOptions = {
            responsive: true,
            scales: {
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1
                        }
                    }],
                xAxes: [{
                        ticks: {},
                        stacked: true
                    }]
            }
        };
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.reportId && this.reportParamQuery) {
            this.generateReport(this.reportId, this.reportParamQuery);
        }
        else {
            this.reset();
        }
    }
    /**
     * @param {?} reportId
     * @param {?} reportParamQuery
     * @return {?}
     */
    generateReport(reportId, reportParamQuery) {
        if (reportParamQuery === undefined || reportParamQuery === null) {
            reportParamQuery = {};
        }
        this.analyticsService.getReportsByParams(reportId, reportParamQuery).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.reports = res;
            if (this.reports) {
                this.selectFirstReport();
            }
            this.success.emit(res);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }));
    }
    /**
     * @return {?}
     */
    reset() {
        if (this.reports) {
            this.reports = undefined;
        }
    }
    /**
     * @param {?} report
     * @return {?}
     */
    refresh(report) {
        /**
         * (My guess), for Angular to recognize the change in the dataset
         * it has to change the dataset variable directly,
         * so one way around it, is to clone the data, change it and then
         * assign it;
         * @type {?}
         */
        const clone = JSON.parse(JSON.stringify(report));
        report.datasets = clone.datasets;
    }
    /**
     * @return {?}
     */
    toggleDetailsTable() {
        this.showDetails = !this.showDetails;
    }
    /**
     * @return {?}
     */
    isShowDetails() {
        return this.showDetails;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    isCurrent(position) {
        return position === this.currentChartPosition ? true : false;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    selectCurrent(position) {
        this.currentChartPosition = position;
    }
    /**
     * @return {?}
     */
    selectFirstReport() {
        this.selectCurrent(0);
    }
}
AnalyticsGeneratorComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-analytics-generator',
                template: "<div *ngIf=\"reports\">\n    <div class=\"adf-report-icons\">\n        <button mat-icon-button\n                *ngFor=\"let report of reports; let idx = index\"\n                [matTooltip]=\"report.title\"\n                [color]=\"isCurrent(idx) ? 'primary' : null\"\n                (click)=\"selectCurrent(idx)\">\n            <mat-icon>{{report.icon}}</mat-icon>\n        </button>\n    </div>\n    <div class=\"adf-clear-both\"> </div>\n    <div *ngFor=\"let report of reports; let idx = index\">\n        <div [ngSwitch]=\"report.type\">\n            <div *ngSwitchCase=\"'pie'\">\n                <div *ngIf=\"isCurrent(idx)\">\n                    <h4>{{report.title}}</h4>\n                    <div *ngIf=\"!report.hasData()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\n                    <div *ngIf=\"report.hasData()\">\n                        <div *ngIf=\"report.hasZeroValues()\">{{'ANALYTICS.MESSAGES.ZERO-DATA-FOUND' | translate}}</div>\n                        <canvas baseChart *ngIf=\"!report.hasZeroValues()\" class=\"adf-chart\"\n                                [data]=\"report.data\"\n                                [labels]=\"report.labels\"\n                                [chartType]=\"report.type\">\n                        </canvas>\n                    </div>\n                </div>\n            </div>\n            <div *ngSwitchCase=\"'table'\" >\n                <div *ngIf=\"isCurrent(idx)\">\n                    <h4>{{report.title}}</h4>\n                    <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\n                    <div [attr.id]=\"'chart-table-' + report.id\" *ngIf=\"report.hasDatasets()\">\n                        <table class=\"adf-table adf-table-responsive adf-table-condensed\" class=\"adf-partial-width\">\n                            <tr>\n                                <th *ngFor=\"let label of report.labels\">{{label | translate}}</th>\n                            </tr>\n                            <tr *ngFor=\"let rows of report.datasets\">\n                                <td *ngFor=\"let row of rows\">{{row | translate }}</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <div *ngSwitchCase=\"'masterDetailTable'\" >\n                <div *ngIf=\"isCurrent(idx)\">\n                    <h4>{{report.title}}</h4>\n                    <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\n                    <div [attr.id]=\"'chart-master-detail-table-' + report.id\" *ngIf=\"report.hasDatasets()\">\n                        <table class=\"adf-table adf-table-responsive adf-table-condensed adf-full-width\">\n                            <tr>\n                                <th *ngFor=\"let label of report.labels\">{{label | translate}}</th>\n                            </tr>\n                            <tr *ngFor=\"let rows of report.datasets\" class=\"adf-analytics-row__entry\">\n                                <td *ngFor=\"let row of rows\" (click)=\"toggleDetailsTable()\">{{row | translate }}</td>\n                            </tr>\n                        </table>\n                    </div>\n                    <div [attr.id]=\"'chart-master-detail-' + report.id\" *ngIf=\"isShowDetails()\">\n                        <table class=\"adf-table adf-table-responsive adf-table-condensed adf-full-width\">\n                            <tr>\n                                <th *ngFor=\"let label of report.detailsTable.labels\">{{label | translate}}</th>\n                            </tr>\n                            <tr *ngFor=\"let rows of report.detailsTable.datasets\">\n                                <td *ngFor=\"let row of rows\">{{row | translate }}</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n            <div *ngSwitchCase=\"'bar'\">\n                <div *ngIf=\"isCurrent(idx)\">\n                    <h4>{{report.title}}</h4>\n                    <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\n                    <canvas baseChart *ngIf=\"report.hasDatasets()\" class=\"adf-chart\"\n                            [datasets]=\"report.datasets\"\n                            [labels]=\"report.labels\"\n                            [options]=\"report.options\"\n                            [chartType]=\"report.type\">\n                    </canvas>\n                </div>\n            </div>\n            <div *ngSwitchCase=\"'multiBar'\">\n                <div *ngIf=\"isCurrent(idx)\">\n                    <h4>{{report.title}}</h4>\n                    <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>\n                    <div *ngIf=\"report.hasDatasets()\">\n                        <mat-checkbox\n                            color=\"primary\"\n                            [id]=\"'stacked-id'\"\n                            [checked]=\"report.options.scales.xAxes[0].stacked\"\n                            [(ngModel)]=\"report.options.scales.xAxes[0].stacked\"\n                            (change)=\"refresh(report)\">Stacked</mat-checkbox>\n\n                        <canvas baseChart class=\"adf-chart\"\n                                [datasets]=\"report.datasets\"\n                                [labels]=\"report.labels\"\n                                [options]=\"report.options\"\n                                [chartType]=\"'bar'\">\n                        </canvas>\n                    </div>\n                </div>\n            </div>\n            <div *ngSwitchCase=\"'HeatMap'\">\n                <div *ngIf=\"isCurrent(idx)\">\n                    <h4>{{report.title}}</h4>\n                    <analytics-report-heat-map [report]=\"report\"></analytics-report-heat-map>\n                </div>\n            </div>\n            <div *ngSwitchDefault>\n                <span>{{'ANALYTICS.MESSAGES.UNKNOWN-WIDGET-TYPE' | translate}}: {{report.type}}</span>\n            </div>\n        </div>\n    </div>\n</div>\n<br><br><br>\n<div *ngIf=\"!reports\">{{'ANALYTICS.MESSAGES.FILL-PARAMETER' | translate}}</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-chart{display:block;width:100%}.adf-analytics-row__entry{cursor:pointer}.adf-report-icons{margin:20px 0;float:left}.adf-full-width{width:100%}.adf-partial-width{width:80%;margin-left:20px}.adf-clear-both{clear:both}"]
            }] }
];
/** @nocollapse */
AnalyticsGeneratorComponent.ctorParameters = () => [
    { type: AnalyticsService }
];
AnalyticsGeneratorComponent.propDecorators = {
    reportId: [{ type: Input }],
    reportParamQuery: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.reportId;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.reportParamQuery;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.success;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.error;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.reports;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.showDetails;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.currentChartPosition;
    /** @type {?} */
    AnalyticsGeneratorComponent.prototype.barChartOptions;
    /**
     * @type {?}
     * @private
     */
    AnalyticsGeneratorComponent.prototype.analyticsService;
}
//# sourceMappingURL=data:application/json;base64,