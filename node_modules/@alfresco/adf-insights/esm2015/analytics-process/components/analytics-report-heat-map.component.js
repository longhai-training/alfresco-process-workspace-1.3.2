/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { AnalyticsService } from '../services/analytics.service';
export class AnalyticsReportHeatMapComponent {
    /**
     * @param {?} analyticsService
     * @param {?} formBuilder
     */
    constructor(analyticsService, formBuilder) {
        this.analyticsService = analyticsService;
        this.formBuilder = formBuilder;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.field = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initForm();
        this.field.id = 'metrics';
        this.field.value = 'totalCount';
        this.analyticsService.getMetricValues().subscribe((/**
         * @param {?} opts
         * @return {?}
         */
        (opts) => {
            this.field.options = opts;
            this.success.emit(opts);
        }));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onMetricChanges(field) {
        if (field.value === 'totalCount') {
            this.currentMetric = this.report.totalCountValues;
            this.currentMetricColors = this.report.totalCountsPercentages;
            this.metricType = 'times';
        }
        else if (field.value === 'totalTime') {
            this.currentMetric = this.report.totalTimeValues;
            this.currentMetricColors = this.report.totalTimePercentages;
            this.metricType = 'hours';
        }
        else if (field.value === 'avgTime') {
            this.currentMetric = this.report.avgTimeValues;
            this.currentMetricColors = this.report.avgTimePercentages;
            this.metricType = 'hours';
        }
    }
    /**
     * @return {?}
     */
    initForm() {
        this.metricForm = this.formBuilder.group({
            metricGroup: new FormGroup({
                metric: new FormControl()
            })
        });
    }
    /**
     * @return {?}
     */
    hasMetric() {
        return (this.report.totalCountsPercentages ||
            this.report.totalTimePercentages ||
            this.report.avgTimePercentages) ? true : false;
    }
}
AnalyticsReportHeatMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-analytics-report-heat-map, analytics-report-heat-map',
                template: "<h4>Process Heat map</h4>\n<div *ngIf=\"hasMetric()\">\n    <form [formGroup]=\"metricForm\" novalidate>\n        <analytics-dropdown-widget [field]=\"field\" [group]=\"metricForm.controls.metricGroup\" [controllerName]=\"'metric'\"\n                         (fieldChanged)=\"onMetricChanges(field)\" [showDefaultOption]=\"false\"></analytics-dropdown-widget>\n    </form>\n    <adf-diagram *ngIf=\"currentMetric\" [processDefinitionId]=\"report.processDefinitionId\" [metricPercentages]=\"currentMetric\" [metricColor]=\"currentMetricColors\" [metricType]=\"metricType\"></adf-diagram>\n</div>\n<div *ngIf=\"!hasMetric()\">No metric found</div>\n"
            }] }
];
/** @nocollapse */
AnalyticsReportHeatMapComponent.ctorParameters = () => [
    { type: AnalyticsService },
    { type: FormBuilder }
];
AnalyticsReportHeatMapComponent.propDecorators = {
    report: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.report;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.success;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.error;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.field;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.metricForm;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.currentMetric;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.currentMetricColors;
    /** @type {?} */
    AnalyticsReportHeatMapComponent.prototype.metricType;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportHeatMapComponent.prototype.analyticsService;
    /**
     * @type {?}
     * @private
     */
    AnalyticsReportHeatMapComponent.prototype.formBuilder;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl0aWNzLXJlcG9ydC1oZWF0LW1hcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiYW5hbHl0aWNzLXByb2Nlc3MvY29tcG9uZW50cy9hbmFseXRpY3MtcmVwb3J0LWhlYXQtbWFwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBTWpFLE1BQU0sT0FBTywrQkFBK0I7Ozs7O0lBa0J4QyxZQUFvQixnQkFBa0MsRUFDbEMsV0FBd0I7UUFEeEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQWI1QyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUc3QixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzQixVQUFLLEdBQVEsRUFBRSxDQUFDO0lBU2hCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUM7UUFFaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsRUFBRSxDQUFDLFNBQVM7Ozs7UUFDN0MsQ0FBQyxJQUFXLEVBQUUsRUFBRTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLEVBQ0osQ0FBQztJQUNOLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLEtBQVU7UUFDdEIsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLFlBQVksRUFBRTtZQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDbEQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUM7WUFDOUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7U0FDN0I7YUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssV0FBVyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDakQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUM7WUFDNUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7U0FDN0I7YUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7WUFDL0MsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7WUFDMUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7U0FDN0I7SUFDTCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDckMsV0FBVyxFQUFFLElBQUksU0FBUyxDQUFDO2dCQUN2QixNQUFNLEVBQUUsSUFBSSxXQUFXLEVBQUU7YUFDNUIsQ0FBQztTQUNMLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxTQUFTO1FBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCO1lBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDbkQsQ0FBQzs7O1lBbkVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMERBQTBEO2dCQUNwRSxtcEJBQXlEO2FBQzVEOzs7O1lBTFEsZ0JBQWdCO1lBRGhCLFdBQVc7OztxQkFTZixLQUFLO3NCQUdMLE1BQU07b0JBR04sTUFBTTs7OztJQU5QLGlEQUNZOztJQUVaLGtEQUM2Qjs7SUFFN0IsZ0RBQzJCOztJQUUzQixnREFBZ0I7O0lBRWhCLHFEQUFzQjs7SUFDdEIsd0RBQXNCOztJQUN0Qiw4REFBeUI7O0lBQ3pCLHFEQUFtQjs7Ozs7SUFFUCwyREFBMEM7Ozs7O0lBQzFDLHNEQUFnQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtQ29udHJvbCwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FuYWx5dGljcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYW5hbHl0aWNzLXJlcG9ydC1oZWF0LW1hcCwgYW5hbHl0aWNzLXJlcG9ydC1oZWF0LW1hcCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2FuYWx5dGljcy1yZXBvcnQtaGVhdC1tYXAuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc1JlcG9ydEhlYXRNYXBDb21wb25lbnQgaW1wbGVtZW50cyAgT25Jbml0IHtcblxuICAgIEBJbnB1dCgpXG4gICAgcmVwb3J0OiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBmaWVsZDogYW55ID0ge307XG5cbiAgICBtZXRyaWNGb3JtOiBGb3JtR3JvdXA7XG4gICAgY3VycmVudE1ldHJpYzogc3RyaW5nO1xuICAgIGN1cnJlbnRNZXRyaWNDb2xvcnM6IGFueTtcbiAgICBtZXRyaWNUeXBlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFuYWx5dGljc1NlcnZpY2U6IEFuYWx5dGljc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5pbml0Rm9ybSgpO1xuICAgICAgICB0aGlzLmZpZWxkLmlkID0gJ21ldHJpY3MnO1xuICAgICAgICB0aGlzLmZpZWxkLnZhbHVlID0gJ3RvdGFsQ291bnQnO1xuXG4gICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5nZXRNZXRyaWNWYWx1ZXMoKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAob3B0czogYW55W10pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMgPSBvcHRzO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KG9wdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIG9uTWV0cmljQ2hhbmdlcyhmaWVsZDogYW55KSB7XG4gICAgICAgIGlmIChmaWVsZC52YWx1ZSA9PT0gJ3RvdGFsQ291bnQnKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNZXRyaWMgPSB0aGlzLnJlcG9ydC50b3RhbENvdW50VmFsdWVzO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWV0cmljQ29sb3JzID0gdGhpcy5yZXBvcnQudG90YWxDb3VudHNQZXJjZW50YWdlcztcbiAgICAgICAgICAgIHRoaXMubWV0cmljVHlwZSA9ICd0aW1lcyc7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQudmFsdWUgPT09ICd0b3RhbFRpbWUnKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNZXRyaWMgPSB0aGlzLnJlcG9ydC50b3RhbFRpbWVWYWx1ZXM7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRNZXRyaWNDb2xvcnMgPSB0aGlzLnJlcG9ydC50b3RhbFRpbWVQZXJjZW50YWdlcztcbiAgICAgICAgICAgIHRoaXMubWV0cmljVHlwZSA9ICdob3Vycyc7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQudmFsdWUgPT09ICdhdmdUaW1lJykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWV0cmljID0gdGhpcy5yZXBvcnQuYXZnVGltZVZhbHVlcztcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE1ldHJpY0NvbG9ycyA9IHRoaXMucmVwb3J0LmF2Z1RpbWVQZXJjZW50YWdlcztcbiAgICAgICAgICAgIHRoaXMubWV0cmljVHlwZSA9ICdob3Vycyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0Rm9ybSgpIHtcbiAgICAgICAgdGhpcy5tZXRyaWNGb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICBtZXRyaWNHcm91cDogbmV3IEZvcm1Hcm91cCh7XG4gICAgICAgICAgICAgICAgbWV0cmljOiBuZXcgRm9ybUNvbnRyb2woKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFzTWV0cmljKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucmVwb3J0LnRvdGFsQ291bnRzUGVyY2VudGFnZXMgfHxcbiAgICAgICAgdGhpcy5yZXBvcnQudG90YWxUaW1lUGVyY2VudGFnZXMgfHxcbiAgICAgICAgdGhpcy5yZXBvcnQuYXZnVGltZVBlcmNlbnRhZ2VzKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbn1cbiJdfQ==