/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector no-access-missing-member no-input-rename  */
import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { WidgetComponent } from './../widget.component';
export class CheckboxWidgetAnalyticsComponent extends WidgetComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        super();
        this.elementRef = elementRef;
    }
}
CheckboxWidgetAnalyticsComponent.decorators = [
    { type: Component, args: [{
                selector: 'analytics-checkbox-widget',
                template: "<div [formGroup]=\"formGroup\">\n        <mat-checkbox\n        color=\"primary\"\n        formControlName=\"{{controllerName}}\"\n        [id]=\"field.id\"\n        [checked]=\"field.value\"\n        [(ngModel)]=\"field.value\"\n        (ngModelChange)=\"changeValue(field)\">{{field.nameKey | translate}}</mat-checkbox>\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CheckboxWidgetAnalyticsComponent.ctorParameters = () => [
    { type: ElementRef }
];
CheckboxWidgetAnalyticsComponent.propDecorators = {
    field: [{ type: Input }],
    formGroup: [{ type: Input, args: ['group',] }],
    controllerName: [{ type: Input, args: ['controllerName',] }]
};
if (false) {
    /** @type {?} */
    CheckboxWidgetAnalyticsComponent.prototype.field;
    /** @type {?} */
    CheckboxWidgetAnalyticsComponent.prototype.formGroup;
    /** @type {?} */
    CheckboxWidgetAnalyticsComponent.prototype.controllerName;
    /** @type {?} */
    CheckboxWidgetAnalyticsComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gud2lkZ2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImFuYWx5dGljcy1wcm9jZXNzL2NvbXBvbmVudHMvd2lkZ2V0cy9jaGVja2JveC9jaGVja2JveC53aWRnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJDLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBT3pELE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSxlQUFlOzs7O0lBV2pFLFlBQW1CLFVBQXNCO1FBQ3JDLEtBQUssRUFBRSxDQUFDO1FBRE8sZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUV6QyxDQUFDOzs7WUFsQkgsU0FBUyxTQUFDO2dCQUNSLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLHFWQUFxQztnQkFDckMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7YUFDeEM7Ozs7WUFSb0IsVUFBVTs7O29CQVcxQixLQUFLO3dCQUdMLEtBQUssU0FBQyxPQUFPOzZCQUdiLEtBQUssU0FBQyxnQkFBZ0I7Ozs7SUFOdkIsaURBQ1c7O0lBRVgscURBQzRCOztJQUU1QiwwREFDOEI7O0lBRWxCLHNEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbiAvKiB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtc2VsZWN0b3Igbm8tYWNjZXNzLW1pc3NpbmctbWVtYmVyIG5vLWlucHV0LXJlbmFtZSAgKi9cblxuIGltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuIGltcG9ydCB7IFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vLi4vd2lkZ2V0LmNvbXBvbmVudCc7XG5cbiBAQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FuYWx5dGljcy1jaGVja2JveC13aWRnZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jaGVja2JveC53aWRnZXQuaHRtbCcsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveFdpZGdldEFuYWx5dGljc0NvbXBvbmVudCBleHRlbmRzIFdpZGdldENvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKVxuICAgIGZpZWxkOiBhbnk7XG5cbiAgICBASW5wdXQoJ2dyb3VwJylcbiAgICBwdWJsaWMgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgICBASW5wdXQoJ2NvbnRyb2xsZXJOYW1lJylcbiAgICBwdWJsaWMgY29udHJvbGxlck5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuIl19