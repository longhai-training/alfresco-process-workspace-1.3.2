/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, throwError } from 'rxjs';
import { ParameterValueModel } from '../../diagram/models/report/parameterValue.model';
import { ReportParametersModel } from '../../diagram/models/report/reportParameters.model';
import { BarChart } from '../../diagram/models/chart/barChart.model';
import { DetailsTableChart } from '../../diagram/models/chart/detailsTableChart.model';
import { HeatMapChart } from '../../diagram/models/chart/heatMapChart.model';
import { MultiBarChart } from '../../diagram/models/chart/multiBarChart.model';
import { PieChart } from '../../diagram/models/chart/pieChart.model';
import { TableChart } from '../../diagram/models/chart/tableChart.model';
import { map, catchError } from 'rxjs/operators';
export class AnalyticsService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Retrieve all the Deployed app
     * @param {?} appId
     * @return {?}
     */
    getReportList(appId) {
        return from(this.apiService.getInstance().activiti.reportApi.getReportList())
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const reports = [];
            res.forEach((/**
             * @param {?} report
             * @return {?}
             */
            (report) => {
                /** @type {?} */
                const reportModel = new ReportParametersModel(report);
                if (this.isReportValid(appId, report)) {
                    reports.push(reportModel);
                }
            }));
            return reports;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Retrieve Report by name
     * @param {?} reportName - string - The name of report
     * @return {?}
     */
    getReportByName(reportName) {
        return from(this.apiService.getInstance().activiti.reportApi.getReportList())
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return response.find((/**
             * @param {?} report
             * @return {?}
             */
            (report) => report.name === reportName));
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @private
     * @param {?} appId
     * @param {?} report
     * @return {?}
     */
    isReportValid(appId, report) {
        /** @type {?} */
        let isValid = true;
        if (appId && appId !== 0 && report.name.includes('Process definition overview')) {
            isValid = false;
        }
        return isValid;
    }
    /**
     * @param {?} reportId
     * @return {?}
     */
    getReportParams(reportId) {
        return from(this.apiService.getInstance().activiti.reportApi.getReportParams(reportId))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return new ReportParametersModel(res);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} type
     * @param {?} appId
     * @param {?=} reportId
     * @param {?=} processDefinitionId
     * @return {?}
     */
    getParamValuesByType(type, appId, reportId, processDefinitionId) {
        if (type === 'status') {
            return this.getProcessStatusValues();
        }
        else if (type === 'processDefinition') {
            if (appId === null || appId === undefined) {
                return this.getProcessDefinitionsValuesNoApp();
            }
            else {
                return this.getProcessDefinitionsValues(appId);
            }
        }
        else if (type === 'dateInterval') {
            return this.getDateIntervalValues();
        }
        else if (type === 'task' && reportId && processDefinitionId) {
            return this.getTasksByProcessDefinitionId(reportId, processDefinitionId);
        }
        else {
            return new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            (observer) => {
                observer.next(null);
                observer.complete();
            }));
        }
    }
    /**
     * @return {?}
     */
    getProcessStatusValues() {
        /** @type {?} */
        const paramOptions = [];
        paramOptions.push(new ParameterValueModel({ id: 'All', name: 'All' }));
        paramOptions.push(new ParameterValueModel({ id: 'Active', name: 'Active' }));
        paramOptions.push(new ParameterValueModel({ id: 'Complete', name: 'Complete' }));
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            observer.next(paramOptions);
            observer.complete();
        }));
    }
    /**
     * @return {?}
     */
    getDateIntervalValues() {
        /** @type {?} */
        const paramOptions = [];
        paramOptions.push(new ParameterValueModel({ id: 'byHour', name: 'By hour' }));
        paramOptions.push(new ParameterValueModel({ id: 'byDay', name: 'By day' }));
        paramOptions.push(new ParameterValueModel({ id: 'byWeek', name: 'By week' }));
        paramOptions.push(new ParameterValueModel({ id: 'byMonth', name: 'By month' }));
        paramOptions.push(new ParameterValueModel({ id: 'byYear', name: 'By year' }));
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            observer.next(paramOptions);
            observer.complete();
        }));
    }
    /**
     * @return {?}
     */
    getMetricValues() {
        /** @type {?} */
        const paramOptions = [];
        paramOptions.push(new ParameterValueModel({ id: 'totalCount', name: 'Number of times a step is executed' }));
        paramOptions.push(new ParameterValueModel({ id: 'totalTime', name: 'Total time spent in a process step' }));
        paramOptions.push(new ParameterValueModel({ id: 'avgTime', name: 'Average time spent in a process step' }));
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            observer.next(paramOptions);
            observer.complete();
        }));
    }
    /**
     * @return {?}
     */
    getProcessDefinitionsValuesNoApp() {
        return from(this.apiService.getInstance().activiti.reportApi.getProcessDefinitions())
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const paramOptions = [];
            res.forEach((/**
             * @param {?} opt
             * @return {?}
             */
            (opt) => {
                paramOptions.push(new ParameterValueModel(opt));
            }));
            return paramOptions;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} appId
     * @return {?}
     */
    getProcessDefinitionsValues(appId) {
        /** @type {?} */
        const options = { 'appDefinitionId': appId };
        return from(this.apiService.getInstance().activiti.processDefinitionsApi.getProcessDefinitions(options))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const paramOptions = [];
            res.data.forEach((/**
             * @param {?} opt
             * @return {?}
             */
            (opt) => {
                paramOptions.push(new ParameterValueModel(opt));
            }));
            return paramOptions;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} reportId
     * @param {?} processDefinitionId
     * @return {?}
     */
    getTasksByProcessDefinitionId(reportId, processDefinitionId) {
        return from(this.apiService.getInstance().activiti.reportApi.getTasksByProcessDefinitionId(reportId, processDefinitionId))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const paramOptions = [];
            res.forEach((/**
             * @param {?} opt
             * @return {?}
             */
            (opt) => {
                paramOptions.push(new ParameterValueModel({ id: opt, name: opt }));
            }));
            return paramOptions;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    getReportsByParams(reportId, paramsQuery) {
        return from(this.apiService.getInstance().activiti.reportApi.getReportsByParams(reportId, paramsQuery))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const elements = [];
            res.elements.forEach((/**
             * @param {?} chartData
             * @return {?}
             */
            (chartData) => {
                if (chartData.type === 'pieChart') {
                    elements.push(new PieChart(chartData));
                }
                else if (chartData.type === 'table') {
                    elements.push(new TableChart(chartData));
                }
                else if (chartData.type === 'processDefinitionHeatMap') {
                    elements.push(new HeatMapChart(chartData));
                }
                else if (chartData.type === 'masterDetailTable') {
                    elements.push(new DetailsTableChart(chartData));
                }
                else if (chartData.type === 'barChart') {
                    elements.push(new BarChart(chartData));
                }
                else if (chartData.type === 'multiBarChart') {
                    elements.push(new MultiBarChart(chartData));
                }
            }));
            return elements;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @return {?}
     */
    createDefaultReports() {
        return from(this.apiService.getInstance().activiti.reportApi.createDefaultReports())
            .pipe(map(this.toJson), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} reportId
     * @param {?} name
     * @return {?}
     */
    updateReport(reportId, name) {
        return from(this.apiService.getInstance().activiti.reportApi.updateReport(reportId, name))
            .pipe(map((/**
         * @return {?}
         */
        () => this.logService.info('upload'))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    exportReportToCsv(reportId, paramsQuery) {
        return from(this.apiService.getInstance().activiti.reportApi.exportToCsv(reportId, paramsQuery))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.logService.info('export');
            return res;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} reportId
     * @param {?} paramsQuery
     * @return {?}
     */
    saveReport(reportId, paramsQuery) {
        return from(this.apiService.getInstance().activiti.reportApi.saveReport(reportId, paramsQuery))
            .pipe(map((/**
         * @return {?}
         */
        () => {
            this.logService.info('save');
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @param {?} reportId
     * @return {?}
     */
    deleteReport(reportId) {
        return from(this.apiService.getInstance().activiti.reportApi.deleteReport(reportId))
            .pipe(map((/**
         * @return {?}
         */
        () => {
            this.logService.info('delete');
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
    /**
     * @param {?} res
     * @return {?}
     */
    toJson(res) {
        return res || {};
    }
}
AnalyticsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnalyticsService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnalyticsService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    AnalyticsService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,