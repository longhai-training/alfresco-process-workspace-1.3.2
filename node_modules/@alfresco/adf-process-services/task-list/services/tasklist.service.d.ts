/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Observable } from 'rxjs';
import { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListModel } from '../models/task-list.model';
export declare class TaskListService {
    private apiService;
    private logService;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    /**
     * Gets all the filters in the list that belong to a task.
     * @param taskId ID of the target task
     * @param filterList List of filters to search through
     * @returns Filters belonging to the task
     */
    getFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel>;
    /**
     * Gets the search query for a task based on the supplied filter.
     * @param filter The filter to use
     * @returns The search query
     */
    private generateTaskRequestNodeFromFilter;
    /**
     * Checks if a taskId is filtered with the given filter.
     * @param taskId ID of the target task
     * @param filterModel The filter you want to check
     * @returns The filter if it is related or null otherwise
     */
    isTaskRelatedToFilter(taskId: string, filterModel: FilterRepresentationModel): Observable<FilterRepresentationModel>;
    /**
     * Gets all the tasks matching the supplied query.
     * @param requestNode Query to search for tasks
     * @returns List of tasks
     */
    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel>;
    /**
     * Gets tasks matching a query and state value.
     * @param requestNode Query to search for tasks
     * @param state Task state. Can be "open" or "completed".
     * @returns List of tasks
     */
    findTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel>;
    /**
     * Gets all tasks matching a query and state value.
     * @param requestNode Query to search for tasks.
     * @param state Task state. Can be "open" or "completed".
     * @returns List of tasks
     */
    findAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel>;
    /**
     * Gets all tasks matching the supplied query but ignoring the task state.
     * @param requestNode Query to search for tasks
     * @returns List of tasks
     */
    findAllTasksWithoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel>;
    /**
     * Gets details for a task.
     * @param taskId ID of the target task.
     * @returns Task details
     */
    getTaskDetails(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Gets the checklist for a task.
     * @param id ID of the target task
     * @returns Array of checklist task details
     */
    getTaskChecklist(id: string): Observable<TaskDetailsModel[]>;
    /**
     * Gets all available reusable forms.
     * @returns Array of form details
     */
    getFormList(): Observable<Form[]>;
    /**
     * Attaches a form to a task.
     * @param taskId ID of the target task
     * @param formId ID of the form to add
     * @returns Null response notifying when the operation is complete
     */
    attachFormToATask(taskId: string, formId: number): Observable<any>;
    /**
     * Adds a subtask (ie, a checklist task) to a parent task.
     * @param task The task to add
     * @returns The subtask that was added
     */
    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    /**
     * Deletes a subtask (ie, a checklist task) from a parent task.
     * @param taskId The task to delete
     * @returns Null response notifying when the operation is complete
     */
    deleteTask(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Deletes a form from a task.
     * @param taskId Task id related to form
     * @returns Null response notifying when the operation is complete
     */
    deleteForm(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Gives completed status to a task.
     * @param taskId ID of the target task
     * @returns Null response notifying when the operation is complete
     */
    completeTask(taskId: string): Observable<any>;
    /**
     * Gets the total number of the tasks found by a query.
     * @param requestNode Query to search for tasks
     * @returns Number of tasks
     */
    getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any>;
    /**
     * Creates a new standalone task.
     * @param task Details of the new task
     * @returns Details of the newly created task
     */
    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    /**
     * Assigns a task to a user or group.
     * @param taskId The task to assign
     * @param requestNode User or group to assign the task to
     * @returns Details of the assigned task
     */
    assignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel>;
    /**
     * Assigns a task to a user.
     * @param taskId ID of the task to assign
     * @param userId ID of the user to assign the task to
     * @returns Details of the assigned task
     */
    assignTaskByUserId(taskId: string, userId: string): Observable<TaskDetailsModel>;
    /**
     * Claims a task for the current user.
     * @param taskId ID of the task to claim
     * @returns Details of the claimed task
     */
    claimTask(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Un-claims a task for the current user.
     * @param taskId ID of the task to unclaim
     * @returns Null response notifying when the operation is complete
     */
    unclaimTask(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Updates the details (name, description, due date) for a task.
     * @param taskId ID of the task to update
     * @param updated Data to update the task (as a `TaskUpdateRepresentation` instance).
     * @returns Updated task details
     */
    updateTask(taskId: any, updated: any): Observable<TaskDetailsModel>;
    /**
     * Fetches the Task Audit information in PDF format.
     * @param taskId ID of the target task
     * @returns Binary PDF data
     */
    fetchTaskAuditPdfById(taskId: string): Observable<Blob>;
    /**
     * Fetch the Task Audit information in JSON format
     * @param taskId ID of the target task
     * @returns JSON data
     */
    fetchTaskAuditJsonById(taskId: string): Observable<any>;
    private callApiTasksFiltered;
    private callApiTaskDetails;
    private callApiAddTask;
    private callApiDeleteTask;
    private callApiDeleteForm;
    private callApiTaskChecklist;
    private callApiCreateTask;
    private callApiAssignTask;
    private handleError;
}
