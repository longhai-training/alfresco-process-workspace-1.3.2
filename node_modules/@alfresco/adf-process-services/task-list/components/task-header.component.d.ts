/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { BpmUserService, CardViewItem, LogService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
export declare class TaskHeaderComponent implements OnChanges, OnInit {
    private activitiTaskService;
    private bpmUserService;
    private translationService;
    private logService;
    private appConfig;
    /** The name of the form. */
    formName: string;
    /** (required) Details related to the task. */
    taskDetails: TaskDetailsModel;
    /** Emitted when the task is claimed. */
    claim: EventEmitter<any>;
    /** Emitted when the task is unclaimed (ie, requeued). */
    unclaim: EventEmitter<any>;
    private currentUserId;
    properties: CardViewItem[];
    inEdit: boolean;
    constructor(activitiTaskService: TaskListService, bpmUserService: BpmUserService, translationService: TranslationService, logService: LogService, appConfig: AppConfigService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private initDefaultProperties;
    /**
     * Refresh the card data
     */
    refreshData(): void;
    private isValidSelection;
    /**
     * Loads current bpm userId
     */
    private loadCurrentBpmUserId;
    /**
     * Return the process parent information
     */
    getParentInfo(): Map<string, string>;
    /**
     * Does the task have an assignee
     */
    hasAssignee(): boolean;
    /**
     * Returns true if the task is assigned to logged in user
     */
    isAssignedTo(userId: any): boolean;
    /**
     * Return true if the task assigned
     */
    isAssignedToCurrentUser(): boolean;
    /**
     * Return true if the user is a candidate member
     */
    isCandidateMember(): boolean;
    /**
     * Return true if the task claimable
     */
    isTaskClaimable(): boolean;
    /**
     * Return true if the task claimed by candidate member.
     */
    isTaskClaimedByCandidateMember(): boolean;
    /**
     * Returns task's status
     */
    getTaskStatus(): string;
    /**
     * Claim task
     *
     * @param taskId
     */
    claimTask(taskId: string): void;
    /**
     * Unclaim task
     *
     * @param taskId
     */
    unclaimTask(taskId: string): void;
    /**
     * Returns true if the task is completed
     */
    isCompleted(): boolean;
    getTaskDuration(): string;
}
