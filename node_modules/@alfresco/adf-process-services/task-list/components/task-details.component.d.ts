/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';
import { AuthenticationService, CardViewUpdateService, LogService, CommentsComponent } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material';
import { Observable } from 'rxjs';
import { ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { UserRepresentation } from '@alfresco/js-api';
export declare class TaskDetailsComponent implements OnInit, OnChanges {
    private taskListService;
    private authService;
    private peopleProcessService;
    private logService;
    private cardViewUpdateService;
    private dialog;
    activitiComments: CommentsComponent;
    activitiChecklist: any;
    errorDialog: TemplateRef<any>;
    /** Toggles debug mode. */
    debugMode: boolean;
    /** (**required**) The id of the task whose details we are asking for. */
    taskId: string;
    /** Automatically renders the next task when the current one is completed. */
    showNextTask: boolean;
    /** Toggles task details Header component. */
    showHeader: boolean;
    /** Toggles collapsed/expanded state of the Header component. */
    showHeaderContent: boolean;
    /** Toggles `Involve People` feature for the Header component. */
    showInvolvePeople: boolean;
    /** Toggles `Comments` feature for the Header component. */
    showComments: boolean;
    /** Toggles `Checklist` feature for the Header component. */
    showChecklist: boolean;
    /** Toggles rendering of the form title. */
    showFormTitle: boolean;
    /** Toggles rendering of the `Complete` outcome button. */
    showFormCompleteButton: boolean;
    /** Toggles rendering of the `Save` outcome button. */
    showFormSaveButton: boolean;
    /** Toggles read-only state of the form. All form widgets render as read-only
     * if enabled.
     */
    readOnlyForm: boolean;
    /** Toggles rendering of the `Refresh` button. */
    showFormRefreshButton: boolean;
    /** Field validators for use with the form. */
    fieldValidators: FormFieldValidator[];
    /** Emitted when the form is submitted with the `Save` or custom outcomes. */
    formSaved: EventEmitter<FormModel>;
    /** Emitted when the form is submitted with the `Complete` outcome. */
    formCompleted: EventEmitter<FormModel>;
    /** Emitted when the form field content is clicked. */
    formContentClicked: EventEmitter<ContentLinkModel>;
    /** Emitted when the form is loaded or reloaded. */
    formLoaded: EventEmitter<FormModel>;
    /** Emitted when a checklist task is created. */
    taskCreated: EventEmitter<TaskDetailsModel>;
    /** Emitted when a checklist task is deleted. */
    taskDeleted: EventEmitter<string>;
    /** Emitted when an error occurs. */
    error: EventEmitter<any>;
    /** Emitted when any outcome is executed. Default behaviour can be prevented
     * via `event.preventDefault()`.
     */
    executeOutcome: EventEmitter<FormOutcomeEvent>;
    /** Emitted when a task is assigned. */
    assignTask: EventEmitter<void>;
    /** Emitted when a task is claimed. */
    claimedTask: EventEmitter<string>;
    /** Emitted when a task is unclaimed. */
    unClaimedTask: EventEmitter<string>;
    taskDetails: TaskDetailsModel;
    taskFormName: string;
    taskPeople: UserProcessModel[];
    noTaskDetailsTemplateComponent: TemplateRef<any>;
    showAssignee: boolean;
    showAttachForm: boolean;
    internalReadOnlyForm: boolean;
    private peopleSearchObserver;
    errorDialogRef: MatDialogRef<TemplateRef<any>>;
    peopleSearch: Observable<UserProcessModel[]>;
    currentLoggedUser: UserRepresentation;
    data: any;
    constructor(taskListService: TaskListService, authService: AuthenticationService, peopleProcessService: PeopleProcessService, logService: LogService, cardViewUpdateService: CardViewUpdateService, dialog: MatDialog);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isStandaloneTask(): boolean;
    isStandaloneTaskWithForm(): boolean;
    isStandaloneTaskWithoutForm(): boolean;
    isFormComponentVisible(): boolean;
    isTaskStandaloneComponentVisible(): boolean;
    isShowAttachForm(): boolean;
    /**
     * Reset the task details
     */
    private reset;
    /**
     * Check if the task has a form
     */
    hasFormKey(): boolean;
    isTaskActive(): boolean;
    /**
     * Save a task detail and update it after a successful response
     *
     * @param updateNotification
     */
    private updateTaskDetails;
    private clickTaskDetails;
    /**
     * Load the activiti task details
     * @param taskId
     */
    private loadDetails;
    isAssigned(): boolean;
    private hasEmailAddress;
    isAssignedToMe(): boolean;
    private isEmailEqual;
    private isExternalIdEqual;
    isCompleteButtonEnabled(): boolean;
    isCompleteButtonVisible(): boolean;
    canInitiatorComplete(): boolean;
    isSaveButtonVisible(): boolean;
    hasSaveButton(): boolean;
    /**
     * Retrieve the next open task
     * @param processInstanceId
     * @param processDefinitionId
     */
    private loadNextTask;
    /**
     * Complete button clicked
     */
    onComplete(): void;
    onShowAttachForm(): void;
    onCancelAttachForm(): void;
    onCompleteAttachForm(): void;
    onFormContentClick(content: ContentLinkModel): void;
    onFormSaved(form: FormModel): void;
    onFormCompleted(form: FormModel): void;
    onFormLoaded(form: FormModel): void;
    onChecklistTaskCreated(task: TaskDetailsModel): void;
    onChecklistTaskDeleted(taskId: string): void;
    onFormError(error: any): void;
    onFormExecuteOutcome(event: FormOutcomeEvent): void;
    closeErrorDialog(): void;
    onClaimAction(taskId: string): void;
    onUnclaimAction(taskId: string): void;
    isCompletedTask(): boolean;
    searchUser(searchedWord: string): void;
    onCloseSearch(): void;
    assignTaskToUser(selectedUser: UserProcessModel): void;
    getTaskHeaderViewClass(): string;
    isReadOnlyComment(): boolean;
}
