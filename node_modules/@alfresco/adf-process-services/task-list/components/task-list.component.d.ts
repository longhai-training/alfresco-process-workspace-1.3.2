/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataRowEvent, DataTableAdapter, DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';
import { AppConfigService, PaginatedComponent, UserPreferencesService, PaginationModel } from '@alfresco/adf-core';
import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { TaskListService } from './../services/tasklist.service';
export declare class TaskListComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {
    private taskListService;
    private userPreferences;
    static PRESET_KEY: string;
    customEmptyContent: CustomEmptyContentTemplateDirective;
    customLoadingContent: CustomLoadingContentTemplateDirective;
    requestNode: TaskQueryRequestRepresentationModel;
    /** The id of the app. */
    appId: number;
    /** The Instance Id of the process. */
    processInstanceId: string;
    /** The Definition Id of the process. */
    processDefinitionId: string;
    /** Current state of the process. Possible values are: `completed`, `active`. */
    state: string;
    /** The assignment of the process. Possible values are: "assignee" (the current user
     * is the assignee), "candidate" (the current user is a task candidate, "group_x" (the task
     * is assigned to a group where the current user is a member,
     * no value (the current user is involved).
     */
    assignment: string;
    /** Define the sort order of the tasks. Possible values are : `created-desc`,
     * `created-asc`, `due-desc`, `due-asc`
     */
    sort: string;
    /** Name of the tasklist. */
    name: string;
    /** Define which task id should be selected after reloading. If the task id doesn't
     * exist or nothing is passed then the first task will be selected.
     */
    landingTaskId: string;
    /**
     * Data source object that represents the number and the type of the columns that
     * you want to show.
     */
    data: DataTableAdapter;
    /** Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
     * multiple rows.
     */
    selectionMode: string;
    /** Toggles multiple row selection, renders checkboxes at the beginning of each row */
    multiselect: boolean;
    /** Toggles default selection of the first row */
    selectFirstRow: boolean;
    /** The id of a task */
    taskId: string;
    /** Toggles inclusion of Process Instances */
    includeProcessInstance: boolean;
    /** Starting point of the list within the full set of tasks. */
    start: number;
    /** Emitted when a task in the list is clicked */
    rowClick: EventEmitter<string>;
    /** Emitted when rows are selected/unselected */
    rowsSelected: EventEmitter<any[]>;
    /** Emitted when the task list is loaded */
    success: EventEmitter<any>;
    /** Emitted when an error occurs. */
    error: EventEmitter<any>;
    currentInstanceId: string;
    selectedInstances: any[];
    pagination: BehaviorSubject<PaginationModel>;
    /** The page number of the tasks to fetch. */
    page: number;
    /** The number of tasks to fetch. Default value: 25. */
    size: number;
    /** Filter the tasks. Display only tasks with `created_date` after `dueAfter`. */
    dueAfter: string;
    /** Filter the tasks. Display only tasks with `created_date` before `dueBefore`. */
    dueBefore: string;
    rows: any[];
    isLoading: boolean;
    sorting: any[];
    /**
     * Toggles custom data source mode.
     * When enabled the component reloads data from it's current source instead of the server side.
     * This allows generating and displaying custom data sets (i.e. filtered out content).
     *
     * @memberOf TaskListComponent
     */
    hasCustomDataSource: boolean;
    constructor(taskListService: TaskListService, appConfigService: AppConfigService, userPreferences: UserPreferencesService);
    ngAfterContentInit(): void;
    setCustomDataSource(rows: any[]): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isSortChanged;
    private isPropertyChanged;
    reload(): void;
    private load;
    private loadTasksByState;
    /**
     * Select the task given in input if present
     */
    selectTask(taskIdSelected: string): void;
    /**
     * Return the current id
     */
    getCurrentId(): string;
    /**
     * Check if the taskId is the same of the selected task
     * @param taskId
     */
    isEqualToCurrentId(taskId: string): boolean;
    /**
     * Check if the list is empty
     */
    isListEmpty(): boolean;
    onRowClick(item: DataRowEvent): void;
    onRowSelect(event: CustomEvent): void;
    onRowUnselect(event: CustomEvent): void;
    onRowKeyUp(event: CustomEvent): void;
    /**
     * Optimize name field
     * @param instances
     */
    private optimizeTaskDetails;
    private createRequestNode;
    updatePagination(params: PaginationModel): void;
    currentPage(skipCount: number, maxItems: number): number;
}
