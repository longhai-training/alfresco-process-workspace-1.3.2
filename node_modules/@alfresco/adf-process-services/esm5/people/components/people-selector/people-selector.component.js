/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewChild, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';
import { PeopleProcessService, UserProcessModel, LogService, TranslationService } from '@alfresco/adf-core';
import { PeopleSearchFieldComponent } from '../people-search-field/people-search-field.component';
import { getDisplayUser } from '../../helpers/getDisplayUser';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
/** @type {?} */
var DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';
var PeopleSelectorComponent = /** @class */ (function () {
    function PeopleSelectorComponent(peopleProcessService, logService, translationService) {
        this.peopleProcessService = peopleProcessService;
        this.logService = logService;
        this.translationService = translationService;
        this.peopleIdChange = new EventEmitter();
        this.performSearch = this.searchUser.bind(this);
        this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);
    }
    /**
     * @param {?} searchWord
     * @return {?}
     */
    PeopleSelectorComponent.prototype.searchUser = /**
     * @param {?} searchWord
     * @return {?}
     */
    function (searchWord) {
        return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)
            .pipe(catchError(this.onSearchUserError.bind(this)));
    };
    /**
     * @private
     * @return {?}
     */
    PeopleSelectorComponent.prototype.onSearchUserError = /**
     * @private
     * @return {?}
     */
    function () {
        this.logService.error('getWorkflowUsers threw error');
        return of([]);
    };
    /**
     * @param {?} user
     * @return {?}
     */
    PeopleSelectorComponent.prototype.userSelected = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        this.updateUserSelection(user);
    };
    /**
     * @return {?}
     */
    PeopleSelectorComponent.prototype.userDeselected = /**
     * @return {?}
     */
    function () {
        this.updateUserSelection(undefined);
    };
    /**
     * @private
     * @param {?} user
     * @return {?}
     */
    PeopleSelectorComponent.prototype.updateUserSelection = /**
     * @private
     * @param {?} user
     * @return {?}
     */
    function (user) {
        this.selectedUser = user;
        this.peopleIdChange.emit(user && user.id || undefined);
        this.searchFieldComponent.reset();
    };
    Object.defineProperty(PeopleSelectorComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.selectedUser) {
                return this.defaultPlaceholder;
            }
            return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');
        },
        enumerable: true,
        configurable: true
    });
    PeopleSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-people-selector',
                    template: "<adf-people-search-field\n    #peopleSearchField\n    class=\"adf-people-selector-field\"\n    [performSearch]=\"performSearch\"\n    [placeholder]=\"placeholder\"\n    (rowClick)=\"userSelected($event)\">\n</adf-people-search-field>\n<button\n    *ngIf=\"selectedUser\"\n    mat-icon-button\n    class=\"adf-people-selector-deselect\"\n    data-automation-id=\"adf-people-selector-deselect\"\n    (click)=\"userDeselected()\">\n        <mat-icon>cancel</mat-icon>\n</button>\n",
                    host: { 'class': 'adf-people-selector' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PeopleSelectorComponent.ctorParameters = function () { return [
        { type: PeopleProcessService },
        { type: LogService },
        { type: TranslationService }
    ]; };
    PeopleSelectorComponent.propDecorators = {
        peopleId: [{ type: Input }],
        peopleIdChange: [{ type: Output }],
        searchFieldComponent: [{ type: ViewChild, args: ['peopleSearchField',] }]
    };
    return PeopleSelectorComponent;
}());
export { PeopleSelectorComponent };
if (false) {
    /** @type {?} */
    PeopleSelectorComponent.prototype.peopleId;
    /** @type {?} */
    PeopleSelectorComponent.prototype.peopleIdChange;
    /** @type {?} */
    PeopleSelectorComponent.prototype.searchFieldComponent;
    /** @type {?} */
    PeopleSelectorComponent.prototype.performSearch;
    /** @type {?} */
    PeopleSelectorComponent.prototype.selectedUser;
    /** @type {?} */
    PeopleSelectorComponent.prototype.defaultPlaceholder;
    /**
     * @type {?}
     * @private
     */
    PeopleSelectorComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    PeopleSelectorComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    PeopleSelectorComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInBlb3BsZS9jb21wb25lbnRzL3Blb3BsZS1zZWxlY3Rvci9wZW9wbGUtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNsRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBRXRDLDRCQUE0QixHQUFHLCtCQUErQjtBQUVwRTtJQXdCSSxpQ0FDWSxvQkFBMEMsRUFDMUMsVUFBc0IsRUFDdEIsa0JBQXNDO1FBRnRDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBRTlDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDNUYsQ0FBQzs7Ozs7SUFFRCw0Q0FBVTs7OztJQUFWLFVBQVcsVUFBa0I7UUFDekIsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQzthQUNuRSxJQUFJLENBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDaEQsQ0FBQztJQUNWLENBQUM7Ozs7O0lBRU8sbURBQWlCOzs7O0lBQXpCO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUN0RCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQixDQUFDOzs7OztJQUVELDhDQUFZOzs7O0lBQVosVUFBYSxJQUFzQjtRQUMvQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELGdEQUFjOzs7SUFBZDtRQUNJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFFTyxxREFBbUI7Ozs7O0lBQTNCLFVBQTRCLElBQXNCO1FBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsc0JBQUksZ0RBQVc7Ozs7UUFBZjtZQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNwQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQzthQUNsQztZQUVELE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hGLENBQUM7OztPQUFBOztnQkFsRUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLHllQUErQztvQkFFL0MsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFO29CQUN4QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQWRRLG9CQUFvQjtnQkFBb0IsVUFBVTtnQkFBRSxrQkFBa0I7OzsyQkFrQjFFLEtBQUs7aUNBSUwsTUFBTTt1Q0FHTixTQUFTLFNBQUMsbUJBQW1COztJQWtEbEMsOEJBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQTNEWSx1QkFBdUI7OztJQUVoQywyQ0FDMkI7O0lBRzNCLGlEQUNxQzs7SUFFckMsdURBQ2lEOztJQUVqRCxnREFBcUM7O0lBQ3JDLCtDQUErQjs7SUFDL0IscURBQTJCOzs7OztJQUd2Qix1REFBa0Q7Ozs7O0lBQ2xELDZDQUE4Qjs7Ozs7SUFDOUIscURBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIFZpZXdFbmNhcHN1bGF0aW9uLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBlcmZvcm1TZWFyY2hDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGVyZm9ybS1zZWFyY2gtY2FsbGJhY2suaW50ZXJmYWNlJztcbmltcG9ydCB7IFBlb3BsZVByb2Nlc3NTZXJ2aWNlLCBVc2VyUHJvY2Vzc01vZGVsLCBMb2dTZXJ2aWNlLCBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgUGVvcGxlU2VhcmNoRmllbGRDb21wb25lbnQgfSBmcm9tICcuLi9wZW9wbGUtc2VhcmNoLWZpZWxkL3Blb3BsZS1zZWFyY2gtZmllbGQuY29tcG9uZW50JztcbmltcG9ydCB7IGdldERpc3BsYXlVc2VyIH0gZnJvbSAnLi4vLi4vaGVscGVycy9nZXREaXNwbGF5VXNlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgREVGQVVMVF9BU1NJR05FRV9QTEFDRUhPTERFUiA9ICdBREZfVEFTS19MSVNULlBFT1BMRS5BU1NJR05FRSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXBlb3BsZS1zZWxlY3RvcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Blb3BsZS1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcGVvcGxlLXNlbGVjdG9yLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLXBlb3BsZS1zZWxlY3RvcicgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuXG5leHBvcnQgY2xhc3MgUGVvcGxlU2VsZWN0b3JDb21wb25lbnQge1xuXG4gICAgQElucHV0KClcbiAgICBwZW9wbGVJZDogVXNlclByb2Nlc3NNb2RlbDtcblxuICAgIC8vIFBvb3JseSBkb2N1bWVudGVkIEFuZ3VsYXIgbWFnaWMgZm9yIFsocGVvcGxlSWQpXVxuICAgIEBPdXRwdXQoKVxuICAgIHBlb3BsZUlkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcblxuICAgIEBWaWV3Q2hpbGQoJ3Blb3BsZVNlYXJjaEZpZWxkJylcbiAgICBzZWFyY2hGaWVsZENvbXBvbmVudDogUGVvcGxlU2VhcmNoRmllbGRDb21wb25lbnQ7XG5cbiAgICBwZXJmb3JtU2VhcmNoOiBQZXJmb3JtU2VhcmNoQ2FsbGJhY2s7XG4gICAgc2VsZWN0ZWRVc2VyOiBVc2VyUHJvY2Vzc01vZGVsO1xuICAgIGRlZmF1bHRQbGFjZWhvbGRlcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGVvcGxlUHJvY2Vzc1NlcnZpY2U6IFBlb3BsZVByb2Nlc3NTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcblxuICAgICAgICB0aGlzLnBlb3BsZUlkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLnBlcmZvcm1TZWFyY2ggPSB0aGlzLnNlYXJjaFVzZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KERFRkFVTFRfQVNTSUdORUVfUExBQ0VIT0xERVIpO1xuICAgIH1cblxuICAgIHNlYXJjaFVzZXIoc2VhcmNoV29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTx7fSB8IFVzZXJQcm9jZXNzTW9kZWxbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wZW9wbGVQcm9jZXNzU2VydmljZS5nZXRXb3JrZmxvd1VzZXJzKHVuZGVmaW5lZCwgc2VhcmNoV29yZClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IodGhpcy5vblNlYXJjaFVzZXJFcnJvci5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2VhcmNoVXNlckVycm9yKCk6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPiB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcignZ2V0V29ya2Zsb3dVc2VycyB0aHJldyBlcnJvcicpO1xuICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgIH1cblxuICAgIHVzZXJTZWxlY3RlZCh1c2VyOiBVc2VyUHJvY2Vzc01vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlVXNlclNlbGVjdGlvbih1c2VyKTtcbiAgICB9XG5cbiAgICB1c2VyRGVzZWxlY3RlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVVc2VyU2VsZWN0aW9uKHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVVc2VyU2VsZWN0aW9uKHVzZXI6IFVzZXJQcm9jZXNzTW9kZWwpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFVzZXIgPSB1c2VyO1xuICAgICAgICB0aGlzLnBlb3BsZUlkQ2hhbmdlLmVtaXQodXNlciAmJiB1c2VyLmlkIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuc2VhcmNoRmllbGRDb21wb25lbnQucmVzZXQoKTtcbiAgICB9XG5cbiAgICBnZXQgcGxhY2Vob2xkZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRQbGFjZWhvbGRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXREaXNwbGF5VXNlcih0aGlzLnNlbGVjdGVkVXNlci5maXJzdE5hbWUsIHRoaXMuc2VsZWN0ZWRVc2VyLmxhc3ROYW1lLCAnICcpO1xuICAgIH1cbn1cbiJdfQ==