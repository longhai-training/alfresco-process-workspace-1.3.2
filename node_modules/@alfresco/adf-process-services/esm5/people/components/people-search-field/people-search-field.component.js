/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslationService, PeopleProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
import { getDisplayUser } from '../../helpers/getDisplayUser';
var PeopleSearchFieldComponent = /** @class */ (function () {
    function PeopleSearchFieldComponent(peopleProcessService, translationService) {
        var _this = this;
        this.peopleProcessService = peopleProcessService;
        this.translationService = translationService;
        this.rowClick = new EventEmitter();
        this.searchUser = new FormControl();
        this.defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';
        this.users$ = this.searchUser.valueChanges
            .pipe(debounceTime(200), switchMap((/**
         * @param {?} searchWord
         * @return {?}
         */
        function (searchWord) {
            if (searchWord && searchWord.trim()) {
                return _this.performSearch(searchWord);
            }
            else {
                return of([]);
            }
        })));
        this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);
    }
    /**
     * @return {?}
     */
    PeopleSearchFieldComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.searchUser.reset();
    };
    Object.defineProperty(PeopleSearchFieldComponent.prototype, "searchPlaceholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.placeholder || this.defaultPlaceholder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PeopleSearchFieldComponent.prototype.onRowClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.rowClick.emit(event);
    };
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @param {?=} delimiter
     * @return {?}
     */
    PeopleSearchFieldComponent.prototype.getDisplayUser = /**
     * @param {?} firstName
     * @param {?} lastName
     * @param {?=} delimiter
     * @return {?}
     */
    function (firstName, lastName, delimiter) {
        if (delimiter === void 0) { delimiter = '-'; }
        return getDisplayUser(firstName, lastName, delimiter);
    };
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @return {?}
     */
    PeopleSearchFieldComponent.prototype.getInitialUserName = /**
     * @param {?} firstName
     * @param {?} lastName
     * @return {?}
     */
    function (firstName, lastName) {
        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
        return this.getDisplayUser(firstName, lastName, '');
    };
    PeopleSearchFieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-people-search-field',
                    template: "<mat-form-field class=\"adf-search-text-container\">\n    <input\n        matInput\n        placeholder=\"{{ searchPlaceholder }}\"\n        type=\"text\"\n        id=\"userSearchText\"\n        [value]=\"\"\n        [formControl]=\"searchUser\"\n        data-automation-id=\"adf-people-search-input\">\n</mat-form-field>\n<ng-container *ngIf=\"users$ | async; let users\">\n    <div class=\"adf-search-list-container\" id=\"search-people-list\" *ngIf=\"users.length > 0\">\n        <adf-people-list [users]=\"users\" (clickRow)=\"onRowClick($event)\">\n            <data-columns>\n                <data-column key=\"firstName\">\n                    <ng-template let-entry=\"$implicit\">\n                            <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-pic\">\n                                {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                            <div>\n                                <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                    [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                            </div>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"email\" class=\"adf-full-width\">\n                    <ng-template let-entry=\"$implicit\">\n                        <div class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n        </adf-people-list>\n    </div>\n</ng-container>\n",
                    host: { 'class': 'adf-people-search-field' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PeopleSearchFieldComponent.ctorParameters = function () { return [
        { type: PeopleProcessService },
        { type: TranslationService }
    ]; };
    PeopleSearchFieldComponent.propDecorators = {
        performSearch: [{ type: Input }],
        placeholder: [{ type: Input }],
        rowClick: [{ type: Output }]
    };
    return PeopleSearchFieldComponent;
}());
export { PeopleSearchFieldComponent };
if (false) {
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.performSearch;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.placeholder;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.rowClick;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.users$;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.searchUser;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.defaultPlaceholder;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    PeopleSearchFieldComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwZW9wbGUvY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoLWZpZWxkL3Blb3BsZS1zZWFyY2gtZmllbGQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTlEO0lBd0JJLG9DQUFtQixvQkFBMEMsRUFDekMsa0JBQXNDO1FBRDFELGlCQWVDO1FBZmtCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDekMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVIxRCxhQUFRLEdBQW1DLElBQUksWUFBWSxFQUFvQixDQUFDO1FBR2hGLGVBQVUsR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUU1Qyx1QkFBa0IsR0FBRyxrQ0FBa0MsQ0FBQztRQUlwRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWTthQUNyQyxJQUFJLENBQ0QsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixTQUFTOzs7O1FBQUMsVUFBQyxVQUFrQjtZQUN6QixJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ2pDLE9BQU8sS0FBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUN6QztpQkFBTTtnQkFDSCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNqQjtRQUNMLENBQUMsRUFBQyxDQUNMLENBQUM7UUFFTixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN2RixDQUFDOzs7O0lBRU0sMENBQUs7OztJQUFaO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsc0JBQUkseURBQWlCOzs7O1FBQXJCO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTs7Ozs7SUFFRCwrQ0FBVTs7OztJQUFWLFVBQVcsS0FBSztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7Ozs7SUFFRCxtREFBYzs7Ozs7O0lBQWQsVUFBZSxTQUFpQixFQUFFLFFBQWdCLEVBQUUsU0FBdUI7UUFBdkIsMEJBQUEsRUFBQSxlQUF1QjtRQUN2RSxPQUFPLGNBQWMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzFELENBQUM7Ozs7OztJQUVELHVEQUFrQjs7Ozs7SUFBbEIsVUFBbUIsU0FBaUIsRUFBRSxRQUFnQjtRQUNsRCxTQUFTLEdBQUcsQ0FBQyxTQUFTLEtBQUssSUFBSSxJQUFJLFNBQVMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekUsUUFBUSxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7O2dCQTdESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsa3REQUFtRDtvQkFFbkQsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFO29CQUM1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQWQ4QyxvQkFBb0I7Z0JBQXhDLGtCQUFrQjs7O2dDQWtCeEMsS0FBSzs4QkFHTCxLQUFLOzJCQUdMLE1BQU07O0lBOENYLGlDQUFDO0NBQUEsQUE5REQsSUE4REM7U0F0RFksMEJBQTBCOzs7SUFFbkMsbURBQ3FDOztJQUVyQyxpREFDb0I7O0lBRXBCLDhDQUNnRjs7SUFFaEYsNENBQXVDOztJQUN2QyxnREFBNEM7O0lBRTVDLHdEQUF3RDs7SUFFNUMsMERBQWlEOzs7OztJQUNqRCx3REFBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VyUHJvY2Vzc01vZGVsLCBUcmFuc2xhdGlvblNlcnZpY2UsIFBlb3BsZVByb2Nlc3NTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQZXJmb3JtU2VhcmNoQ2FsbGJhY2sgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3BlcmZvcm0tc2VhcmNoLWNhbGxiYWNrLmludGVyZmFjZSc7XG5pbXBvcnQgeyBnZXREaXNwbGF5VXNlciB9IGZyb20gJy4uLy4uL2hlbHBlcnMvZ2V0RGlzcGxheVVzZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1wZW9wbGUtc2VhcmNoLWZpZWxkJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQuc2NzcyddLFxuICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ2FkZi1wZW9wbGUtc2VhcmNoLWZpZWxkJyB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBQZW9wbGVTZWFyY2hGaWVsZENvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHBlcmZvcm1TZWFyY2g6IFBlcmZvcm1TZWFyY2hDYWxsYmFjaztcblxuICAgIEBJbnB1dCgpXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcblxuICAgIEBPdXRwdXQoKVxuICAgIHJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8VXNlclByb2Nlc3NNb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFVzZXJQcm9jZXNzTW9kZWw+KCk7XG5cbiAgICB1c2VycyQ6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPjtcbiAgICBzZWFyY2hVc2VyOiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuXG4gICAgZGVmYXVsdFBsYWNlaG9sZGVyID0gJ0FERl9UQVNLX0xJU1QuUEVPUExFLlNFQVJDSF9VU0VSJztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwZW9wbGVQcm9jZXNzU2VydmljZTogUGVvcGxlUHJvY2Vzc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xuICAgICAgICB0aGlzLnVzZXJzJCA9IHRoaXMuc2VhcmNoVXNlci52YWx1ZUNoYW5nZXNcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZSgyMDApLFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoc2VhcmNoV29yZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2hXb3JkICYmIHNlYXJjaFdvcmQudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wZXJmb3JtU2VhcmNoKHNlYXJjaFdvcmQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKFtdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyID0gdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudCh0aGlzLmRlZmF1bHRQbGFjZWhvbGRlcik7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnNlYXJjaFVzZXIucmVzZXQoKTtcbiAgICB9XG5cbiAgICBnZXQgc2VhcmNoUGxhY2Vob2xkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYWNlaG9sZGVyIHx8IHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIG9uUm93Q2xpY2soZXZlbnQpIHtcbiAgICAgICAgdGhpcy5yb3dDbGljay5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBnZXREaXNwbGF5VXNlcihmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZywgZGVsaW1pdGVyOiBzdHJpbmcgPSAnLScpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZ2V0RGlzcGxheVVzZXIoZmlyc3ROYW1lLCBsYXN0TmFtZSwgZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBnZXRJbml0aWFsVXNlck5hbWUoZmlyc3ROYW1lOiBzdHJpbmcsIGxhc3ROYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgZmlyc3ROYW1lID0gKGZpcnN0TmFtZSAhPT0gbnVsbCAmJiBmaXJzdE5hbWUgIT09ICcnID8gZmlyc3ROYW1lWzBdIDogJycpO1xuICAgICAgICBsYXN0TmFtZSA9IChsYXN0TmFtZSAhPT0gbnVsbCAmJiBsYXN0TmFtZSAhPT0gJycgPyBsYXN0TmFtZVswXSA6ICcnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGlzcGxheVVzZXIoZmlyc3ROYW1lLCBsYXN0TmFtZSwgJycpO1xuICAgIH1cbn1cbiJdfQ==