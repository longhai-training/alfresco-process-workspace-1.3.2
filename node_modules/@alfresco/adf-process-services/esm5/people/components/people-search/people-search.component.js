/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
var PeopleSearchComponent = /** @class */ (function () {
    function PeopleSearchComponent() {
        /**
         * Emitted when a search is performed with a new keyword.
         */
        this.searchPeople = new EventEmitter();
        /**
         * Emitted when a user is selected and the action button is clicked.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when the "close" button is clicked.
         */
        this.closeSearch = new EventEmitter();
        this.selectedUser = {};
    }
    /**
     * @return {?}
     */
    PeopleSearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.filteredResults$ = this.results
            .pipe(map((/**
         * @param {?} users
         * @return {?}
         */
        function (users) {
            return users.filter((/**
             * @param {?} user
             * @return {?}
             */
            function (user) { return user.id !== _this.selectedUser.id; }));
        })));
        this.performSearch = this.performSearchCallback.bind(this);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PeopleSearchComponent.prototype.performSearchCallback = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.searchPeople.emit(event);
        return this.filteredResults$;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    PeopleSearchComponent.prototype.onRowClick = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        this.selectedUser = user;
    };
    /**
     * @return {?}
     */
    PeopleSearchComponent.prototype.closeSearchList = /**
     * @return {?}
     */
    function () {
        this.closeSearch.emit();
    };
    /**
     * @return {?}
     */
    PeopleSearchComponent.prototype.involveUserAndClose = /**
     * @return {?}
     */
    function () {
        this.involveUser();
        this.closeSearchList();
    };
    /**
     * @return {?}
     */
    PeopleSearchComponent.prototype.involveUser = /**
     * @return {?}
     */
    function () {
        if (this.selectedUser === undefined) {
            return;
        }
        this.success.emit(this.selectedUser);
    };
    PeopleSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-people-search',
                    template: "<div class=\"adf-search-text-header\">\n    <ng-content select=\"[adf-people-search-title], [people-search-title]\"></ng-content>\n</div>\n\n<adf-people-search-field [performSearch]=\"performSearch\" (rowClick)=\"onRowClick($event)\"></adf-people-search-field>\n\n<div class=\"search-list-action-container\">\n    <button mat-button type=\"button\" id=\"close-people-search\" (click)=\"closeSearchList()\">\n        {{'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE' | translate }}\n    </button>\n    <button mat-button type=\"button\" id=\"add-people\" (click)=\"involveUserAndClose()\">\n        <ng-content select=\"[adf-people-search-action-label], [people-search-action-label]\"></ng-content>\n    </button>\n</div>\n",
                    host: {
                        'class': 'adf-people-search'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PeopleSearchComponent.ctorParameters = function () { return []; };
    PeopleSearchComponent.propDecorators = {
        results: [{ type: Input }],
        searchPeople: [{ type: Output }],
        success: [{ type: Output }],
        closeSearch: [{ type: Output }]
    };
    return PeopleSearchComponent;
}());
export { PeopleSearchComponent };
if (false) {
    /**
     * Parameters for displaying the list.
     * @type {?}
     */
    PeopleSearchComponent.prototype.results;
    /**
     * Emitted when a search is performed with a new keyword.
     * @type {?}
     */
    PeopleSearchComponent.prototype.searchPeople;
    /**
     * Emitted when a user is selected and the action button is clicked.
     * @type {?}
     */
    PeopleSearchComponent.prototype.success;
    /**
     * Emitted when the "close" button is clicked.
     * @type {?}
     */
    PeopleSearchComponent.prototype.closeSearch;
    /** @type {?} */
    PeopleSearchComponent.prototype.filteredResults$;
    /** @type {?} */
    PeopleSearchComponent.prototype.selectedUser;
    /** @type {?} */
    PeopleSearchComponent.prototype.performSearch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwZW9wbGUvY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoL3Blb3BsZS1zZWFyY2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckM7SUFnQ0k7Ozs7UUFkQSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBSXJELFlBQU8sR0FBbUMsSUFBSSxZQUFZLEVBQW9CLENBQUM7Ozs7UUFJL0UsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR2pDLGlCQUFZLEdBQXFCLEVBQUUsQ0FBQztJQUdyQixDQUFDOzs7O0lBRWhCLHdDQUFROzs7SUFBUjtRQUFBLGlCQVFDO1FBUEcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPO2FBQy9CLElBQUksQ0FDRCxHQUFHOzs7O1FBQUMsVUFBQyxLQUFLO1lBQ04sT0FBTyxLQUFLLENBQUMsTUFBTTs7OztZQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxDQUFDLEVBQUUsS0FBSyxLQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBaEMsQ0FBZ0MsRUFBQyxDQUFDO1FBQ3BFLENBQUMsRUFBQyxDQUNMLENBQUM7UUFDTixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7O0lBRU8scURBQXFCOzs7OztJQUE3QixVQUE4QixLQUFLO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsMENBQVU7Ozs7SUFBVixVQUFXLElBQXNCO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCwrQ0FBZTs7O0lBQWY7UUFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxtREFBbUI7OztJQUFuQjtRQUNJLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVELDJDQUFXOzs7SUFBWDtRQUNJLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDakMsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7O2dCQW5FSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0Isa3RCQUE2QztvQkFFN0MsSUFBSSxFQUFFO3dCQUNGLE9BQU8sRUFBRSxtQkFBbUI7cUJBQy9CO29CQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7OzBCQUtJLEtBQUs7K0JBSUwsTUFBTTswQkFJTixNQUFNOzhCQUlOLE1BQU07O0lBMkNYLDRCQUFDO0NBQUEsQUFwRUQsSUFvRUM7U0ExRFkscUJBQXFCOzs7Ozs7SUFHOUIsd0NBQ3dDOzs7OztJQUd4Qyw2Q0FDcUQ7Ozs7O0lBR3JELHdDQUMrRTs7Ozs7SUFHL0UsNENBQ2lDOztJQUVqQyxpREFBaUQ7O0lBQ2pELDZDQUFvQzs7SUFDcEMsOENBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlclByb2Nlc3NNb2RlbCB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGVyZm9ybVNlYXJjaENhbGxiYWNrIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9wZXJmb3JtLXNlYXJjaC1jYWxsYmFjay5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1wZW9wbGUtc2VhcmNoJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGVvcGxlLXNlYXJjaC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcGVvcGxlLXNlYXJjaC5jb21wb25lbnQuc2NzcyddLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ2NsYXNzJzogJ2FkZi1wZW9wbGUtc2VhcmNoJ1xuICAgIH0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcblxuZXhwb3J0IGNsYXNzIFBlb3BsZVNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICAvKiogUGFyYW1ldGVycyBmb3IgZGlzcGxheWluZyB0aGUgbGlzdC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHJlc3VsdHM6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPjtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSBzZWFyY2ggaXMgcGVyZm9ybWVkIHdpdGggYSBuZXcga2V5d29yZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzZWFyY2hQZW9wbGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIHVzZXIgaXMgc2VsZWN0ZWQgYW5kIHRoZSBhY3Rpb24gYnV0dG9uIGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPFVzZXJQcm9jZXNzTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxVc2VyUHJvY2Vzc01vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJjbG9zZVwiIGJ1dHRvbiBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNsb3NlU2VhcmNoID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgZmlsdGVyZWRSZXN1bHRzJDogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+O1xuICAgIHNlbGVjdGVkVXNlcjogVXNlclByb2Nlc3NNb2RlbCA9IHt9O1xuICAgIHBlcmZvcm1TZWFyY2g6IFBlcmZvcm1TZWFyY2hDYWxsYmFjaztcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmZpbHRlcmVkUmVzdWx0cyQgPSB0aGlzLnJlc3VsdHNcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgodXNlcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJzLmZpbHRlcigodXNlcikgPT4gdXNlci5pZCAhPT0gdGhpcy5zZWxlY3RlZFVzZXIuaWQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB0aGlzLnBlcmZvcm1TZWFyY2ggPSB0aGlzLnBlcmZvcm1TZWFyY2hDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGVyZm9ybVNlYXJjaENhbGxiYWNrKGV2ZW50KTogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+IHtcbiAgICAgICAgdGhpcy5zZWFyY2hQZW9wbGUuZW1pdChldmVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcmVkUmVzdWx0cyQ7XG4gICAgfVxuXG4gICAgb25Sb3dDbGljayh1c2VyOiBVc2VyUHJvY2Vzc01vZGVsKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRVc2VyID0gdXNlcjtcbiAgICB9XG5cbiAgICBjbG9zZVNlYXJjaExpc3QoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VTZWFyY2guZW1pdCgpO1xuICAgIH1cblxuICAgIGludm9sdmVVc2VyQW5kQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuaW52b2x2ZVVzZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZVNlYXJjaExpc3QoKTtcbiAgICB9XG5cbiAgICBpbnZvbHZlVXNlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRVc2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdCh0aGlzLnNlbGVjdGVkVXNlcik7XG4gICAgfVxufVxuIl19