/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';
import { MaterialModule } from './material.module';
import { ProcessListModule } from './process-list/process-list.module';
import { TaskListModule } from './task-list/task-list.module';
import { AppsListModule } from './app-list/apps-list.module';
import { ProcessCommentsModule } from './process-comments/process-comments.module';
import { AttachmentModule } from './attachment/attachment.module';
import { PeopleModule } from './people/people.module';
import { FormModule } from './form/form.module';
var ɵ0 = {
    name: 'adf-process-services',
    source: 'assets/adf-process-services'
};
var ProcessModule = /** @class */ (function () {
    function ProcessModule() {
    }
    /**
     * @return {?}
     */
    ProcessModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ProcessModule,
            providers: [
                {
                    provide: TRANSLATION_PROVIDER,
                    multi: true,
                    useValue: {
                        name: 'adf-process-services',
                        source: 'assets/adf-process-services'
                    }
                }
            ]
        };
    };
    /**
     * @return {?}
     */
    ProcessModule.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: ProcessModuleLazy
        };
    };
    ProcessModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        ProcessCommentsModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        ProcessListModule,
                        TaskListModule,
                        AppsListModule,
                        AttachmentModule,
                        PeopleModule,
                        FormModule
                    ],
                    providers: [
                        {
                            provide: TRANSLATION_PROVIDER,
                            multi: true,
                            useValue: ɵ0
                        }
                    ],
                    exports: [
                        CommonModule,
                        ProcessCommentsModule,
                        FormsModule,
                        ReactiveFormsModule,
                        ProcessListModule,
                        TaskListModule,
                        AppsListModule,
                        AttachmentModule,
                        PeopleModule,
                        FormModule
                    ]
                },] }
    ];
    return ProcessModule;
}());
export { ProcessModule };
var ProcessModuleLazy = /** @class */ (function () {
    function ProcessModuleLazy() {
    }
    ProcessModuleLazy.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CoreModule.forChild(),
                        CommonModule,
                        ProcessCommentsModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MaterialModule,
                        ProcessListModule,
                        TaskListModule,
                        AppsListModule,
                        AttachmentModule,
                        PeopleModule
                    ],
                    exports: [
                        CommonModule,
                        ProcessCommentsModule,
                        FormsModule,
                        ReactiveFormsModule,
                        ProcessListModule,
                        TaskListModule,
                        AppsListModule,
                        AttachmentModule,
                        PeopleModule
                    ]
                },] }
    ];
    return ProcessModuleLazy;
}());
export { ProcessModuleLazy };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwcm9jZXNzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO1NBcUIxQjtJQUNOLElBQUksRUFBRSxzQkFBc0I7SUFDNUIsTUFBTSxFQUFFLDZCQUE2QjtDQUN4QztBQXRCYjtJQUFBO0lBNERBLENBQUM7Ozs7SUFyQlUscUJBQU87OztJQUFkO1FBQ0ksT0FBTztZQUNILFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDUDtvQkFDSSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixLQUFLLEVBQUUsSUFBSTtvQkFDWCxRQUFRLEVBQUU7d0JBQ04sSUFBSSxFQUFFLHNCQUFzQjt3QkFDNUIsTUFBTSxFQUFFLDZCQUE2QjtxQkFDeEM7aUJBQ0o7YUFDSjtTQUNKLENBQUM7SUFDTixDQUFDOzs7O0lBRU0sc0JBQVE7OztJQUFmO1FBQ0ksT0FBTztZQUNILFFBQVEsRUFBRSxpQkFBaUI7U0FDOUIsQ0FBQztJQUNOLENBQUM7O2dCQTNESixRQUFRLFNBQUM7b0JBQ04sT0FBTyxFQUFFO3dCQUNMLFVBQVUsQ0FBQyxRQUFRLEVBQUU7d0JBQ3JCLFlBQVk7d0JBQ1oscUJBQXFCO3dCQUNyQixXQUFXO3dCQUNYLG1CQUFtQjt3QkFDbkIsY0FBYzt3QkFDZCxpQkFBaUI7d0JBQ2pCLGNBQWM7d0JBQ2QsY0FBYzt3QkFDZCxnQkFBZ0I7d0JBQ2hCLFlBQVk7d0JBQ1osVUFBVTtxQkFDYjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1A7NEJBQ0ksT0FBTyxFQUFFLG9CQUFvQjs0QkFDN0IsS0FBSyxFQUFFLElBQUk7NEJBQ1gsUUFBUSxJQUdQO3lCQUNKO3FCQUNKO29CQUNELE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLHFCQUFxQjt3QkFDckIsV0FBVzt3QkFDWCxtQkFBbUI7d0JBQ25CLGlCQUFpQjt3QkFDakIsY0FBYzt3QkFDZCxjQUFjO3dCQUNkLGdCQUFnQjt3QkFDaEIsWUFBWTt3QkFDWixVQUFVO3FCQUNiO2lCQUNKOztJQXVCRCxvQkFBQztDQUFBLEFBNURELElBNERDO1NBdEJZLGFBQWE7QUF3QjFCO0lBQUE7SUEwQmdDLENBQUM7O2dCQTFCaEMsUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxVQUFVLENBQUMsUUFBUSxFQUFFO3dCQUNyQixZQUFZO3dCQUNaLHFCQUFxQjt3QkFDckIsV0FBVzt3QkFDWCxtQkFBbUI7d0JBQ25CLGNBQWM7d0JBQ2QsaUJBQWlCO3dCQUNqQixjQUFjO3dCQUNkLGNBQWM7d0JBQ2QsZ0JBQWdCO3dCQUNoQixZQUFZO3FCQUNmO29CQUNELE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLHFCQUFxQjt3QkFDckIsV0FBVzt3QkFDWCxtQkFBbUI7d0JBQ25CLGlCQUFpQjt3QkFDakIsY0FBYzt3QkFDZCxjQUFjO3dCQUNkLGdCQUFnQjt3QkFDaEIsWUFBWTtxQkFDZjtpQkFDSjs7SUFDK0Isd0JBQUM7Q0FBQSxBQTFCakMsSUEwQmlDO1NBQXBCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBUUkFOU0xBVElPTl9QUk9WSURFUiB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbmltcG9ydCB7IE1hdGVyaWFsTW9kdWxlIH0gZnJvbSAnLi9tYXRlcmlhbC5tb2R1bGUnO1xuXG5pbXBvcnQgeyBQcm9jZXNzTGlzdE1vZHVsZSB9IGZyb20gJy4vcHJvY2Vzcy1saXN0L3Byb2Nlc3MtbGlzdC5tb2R1bGUnO1xuaW1wb3J0IHsgVGFza0xpc3RNb2R1bGUgfSBmcm9tICcuL3Rhc2stbGlzdC90YXNrLWxpc3QubW9kdWxlJztcbmltcG9ydCB7IEFwcHNMaXN0TW9kdWxlIH0gZnJvbSAnLi9hcHAtbGlzdC9hcHBzLWxpc3QubW9kdWxlJztcbmltcG9ydCB7IFByb2Nlc3NDb21tZW50c01vZHVsZSB9IGZyb20gJy4vcHJvY2Vzcy1jb21tZW50cy9wcm9jZXNzLWNvbW1lbnRzLm1vZHVsZSc7XG5pbXBvcnQgeyBBdHRhY2htZW50TW9kdWxlIH0gZnJvbSAnLi9hdHRhY2htZW50L2F0dGFjaG1lbnQubW9kdWxlJztcbmltcG9ydCB7IFBlb3BsZU1vZHVsZSB9IGZyb20gJy4vcGVvcGxlL3Blb3BsZS5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybU1vZHVsZSB9IGZyb20gJy4vZm9ybS9mb3JtLm1vZHVsZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb3JlTW9kdWxlLmZvckNoaWxkKCksXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0NvbW1lbnRzTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZSxcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgTWF0ZXJpYWxNb2R1bGUsXG4gICAgICAgIFByb2Nlc3NMaXN0TW9kdWxlLFxuICAgICAgICBUYXNrTGlzdE1vZHVsZSxcbiAgICAgICAgQXBwc0xpc3RNb2R1bGUsXG4gICAgICAgIEF0dGFjaG1lbnRNb2R1bGUsXG4gICAgICAgIFBlb3BsZU1vZHVsZSxcbiAgICAgICAgRm9ybU1vZHVsZVxuICAgIF0sXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRSQU5TTEFUSU9OX1BST1ZJREVSLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdhZGYtcHJvY2Vzcy1zZXJ2aWNlcycsXG4gICAgICAgICAgICAgICAgc291cmNlOiAnYXNzZXRzL2FkZi1wcm9jZXNzLXNlcnZpY2VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0NvbW1lbnRzTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZSxcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0xpc3RNb2R1bGUsXG4gICAgICAgIFRhc2tMaXN0TW9kdWxlLFxuICAgICAgICBBcHBzTGlzdE1vZHVsZSxcbiAgICAgICAgQXR0YWNobWVudE1vZHVsZSxcbiAgICAgICAgUGVvcGxlTW9kdWxlLFxuICAgICAgICBGb3JtTW9kdWxlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBQcm9jZXNzTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBUUkFOU0xBVElPTl9QUk9WSURFUixcbiAgICAgICAgICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYWRmLXByb2Nlc3Mtc2VydmljZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiAnYXNzZXRzL2FkZi1wcm9jZXNzLXNlcnZpY2VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JDaGlsZCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBQcm9jZXNzTW9kdWxlTGF6eVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvcmVNb2R1bGUuZm9yQ2hpbGQoKSxcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBQcm9jZXNzQ29tbWVudHNNb2R1bGUsXG4gICAgICAgIEZvcm1zTW9kdWxlLFxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgICAgICBNYXRlcmlhbE1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0xpc3RNb2R1bGUsXG4gICAgICAgIFRhc2tMaXN0TW9kdWxlLFxuICAgICAgICBBcHBzTGlzdE1vZHVsZSxcbiAgICAgICAgQXR0YWNobWVudE1vZHVsZSxcbiAgICAgICAgUGVvcGxlTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0NvbW1lbnRzTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZSxcbiAgICAgICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICAgICAgUHJvY2Vzc0xpc3RNb2R1bGUsXG4gICAgICAgIFRhc2tMaXN0TW9kdWxlLFxuICAgICAgICBBcHBzTGlzdE1vZHVsZSxcbiAgICAgICAgQXR0YWNobWVudE1vZHVsZSxcbiAgICAgICAgUGVvcGxlTW9kdWxlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzTW9kdWxlTGF6eSB7fVxuIl19