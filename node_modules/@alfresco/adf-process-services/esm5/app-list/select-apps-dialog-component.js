/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
var SelectAppsDialogComponent = /** @class */ (function () {
    function SelectAppsDialogComponent(appsProcessService, dialogRef, data) {
        var _this = this;
        this.appsProcessService = appsProcessService;
        this.dialogRef = dialogRef;
        this.data = data;
        this.appsProcessService.getDeployedApplications().subscribe((/**
         * @param {?} apps
         * @return {?}
         */
        function (apps) {
            _this.processApps = apps.filter((/**
             * @param {?} currentApp
             * @return {?}
             */
            function (currentApp) {
                return currentApp.id;
            }));
        }));
    }
    /**
     * @return {?}
     */
    SelectAppsDialogComponent.prototype.onStart = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close(this.selectedProcess);
    };
    SelectAppsDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-select-apps-dialog',
                    template: "<header mat-dialog-title id=\"adf-selet-app-dialog-title\">{{'APP.DIALOG.TITLE' | translate}}</header>\n<section mat-dialog-content>\n\n    <mat-select id=\"adf-selet-app-dialog-dropdown\" placeholder=\"{{'APP.DIALOG.LIST' | translate}}\" [(value)]=\"selectedProcess\" >\n        <mat-option *ngFor=\"let currentProcessApp of processApps\" [value]=\"currentProcessApp\">\n            {{ currentProcessApp.name }}\n        </mat-option>\n    </mat-select>\n\n</section>\n<footer mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button (click)=\"onStart()\">{{'APP.DIALOG.START' | translate}}</button>\n</footer>\n"
                }] }
    ];
    /** @nocollapse */
    SelectAppsDialogComponent.ctorParameters = function () { return [
        { type: AppsProcessService },
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return SelectAppsDialogComponent;
}());
export { SelectAppsDialogComponent };
if (false) {
    /** @type {?} */
    SelectAppsDialogComponent.prototype.processApps;
    /** @type {?} */
    SelectAppsDialogComponent.prototype.selectedProcess;
    /**
     * @type {?}
     * @private
     */
    SelectAppsDialogComponent.prototype.appsProcessService;
    /** @type {?} */
    SelectAppsDialogComponent.prototype.dialogRef;
    /** @type {?} */
    SelectAppsDialogComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWFwcHMtZGlhbG9nLWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImFwcC1saXN0L3NlbGVjdC1hcHBzLWRpYWxvZy1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVsRTtJQVVJLG1DQUFvQixrQkFBc0MsRUFDdkMsU0FBa0QsRUFDekIsSUFBUztRQUZyRCxpQkFXQztRQVhtQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3ZDLGNBQVMsR0FBVCxTQUFTLENBQXlDO1FBQ3pCLFNBQUksR0FBSixJQUFJLENBQUs7UUFFakQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHVCQUF1QixFQUFFLENBQUMsU0FBUzs7OztRQUN2RCxVQUFDLElBQVc7WUFDUixLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNOzs7O1lBQUMsVUFBQyxVQUFVO2dCQUN0QyxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDekIsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQ0osQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCwyQ0FBTzs7O0lBQVA7UUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Z0JBekJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxrcEJBQWdEO2lCQUNuRDs7OztnQkFQUSxrQkFBa0I7Z0JBRUQsWUFBWTtnREFjckIsTUFBTSxTQUFDLGVBQWU7O0lBY3ZDLGdDQUFDO0NBQUEsQUExQkQsSUEwQkM7U0F0QlkseUJBQXlCOzs7SUFFbEMsZ0RBQWlCOztJQUVqQixvREFBcUI7Ozs7O0lBRVQsdURBQThDOztJQUM5Qyw4Q0FBeUQ7O0lBQ3pELHlDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFwcHNQcm9jZXNzU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlbGVjdC1hcHBzLWRpYWxvZycsXG4gICAgdGVtcGxhdGVVcmw6ICdzZWxlY3QtYXBwcy1kaWFsb2ctY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNlbGVjdEFwcHNEaWFsb2dDb21wb25lbnQge1xuXG4gICAgcHJvY2Vzc0FwcHM6IGFueTtcblxuICAgIHNlbGVjdGVkUHJvY2VzczogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBzUHJvY2Vzc1NlcnZpY2U6IEFwcHNQcm9jZXNzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8U2VsZWN0QXBwc0RpYWxvZ0NvbXBvbmVudD4sXG4gICAgICAgICAgICAgICAgQEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyBkYXRhOiBhbnkpIHtcblxuICAgICAgICB0aGlzLmFwcHNQcm9jZXNzU2VydmljZS5nZXREZXBsb3llZEFwcGxpY2F0aW9ucygpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChhcHBzOiBhbnlbXSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0FwcHMgPSBhcHBzLmZpbHRlcigoY3VycmVudEFwcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEFwcC5pZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvblN0YXJ0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpYWxvZ1JlZi5jbG9zZSh0aGlzLnNlbGVjdGVkUHJvY2Vzcyk7XG4gICAgfVxufVxuIl19