/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService, TranslationService, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ContentChild } from '@angular/core';
import { Observable, of } from 'rxjs';
import { IconModel } from './icon.model';
import { share } from 'rxjs/operators';
var AppsListComponent = /** @class */ (function () {
    function AppsListComponent(appsProcessService, translationService) {
        var _this = this;
        this.appsProcessService = appsProcessService;
        this.translationService = translationService;
        /**
         * (**required**) Defines the layout of the apps. There are two possible
         * values, "GRID" and "LIST".
         */
        this.layoutType = AppsListComponent.LAYOUT_GRID;
        /**
         * Emitted when an app entry is clicked.
         */
        this.appClick = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.appList = [];
        this.loading = false;
        this.hasEmptyCustomContentTemplate = false;
        this.apps$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return _this.appsObserver = observer; }))
            .pipe(share());
    }
    /**
     * @return {?}
     */
    AppsListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isValidType()) {
            this.setDefaultLayoutType();
        }
        this.apps$.subscribe((/**
         * @param {?} app
         * @return {?}
         */
        function (app) {
            _this.appList.push(app);
        }));
        this.iconsMDL = new IconModel();
        this.load();
    };
    /**
     * @return {?}
     */
    AppsListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.emptyCustomContent) {
            this.hasEmptyCustomContentTemplate = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    AppsListComponent.prototype.load = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading = true;
        this.appsProcessService.getDeployedApplications()
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.filterApps(res).forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                if (_this.isDefaultApp(app)) {
                    app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;
                    app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;
                    _this.appsObserver.next(app);
                }
                else if (app.deploymentId) {
                    _this.appsObserver.next(app);
                }
                _this.loading = false;
            }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
            _this.loading = false;
        }));
    };
    /**
     * @param {?} app
     * @return {?}
     */
    AppsListComponent.prototype.isDefaultApp = /**
     * @param {?} app
     * @return {?}
     */
    function (app) {
        return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;
    };
    /**
     * @param {?} app
     * @return {?}
     */
    AppsListComponent.prototype.getAppName = /**
     * @param {?} app
     * @return {?}
     */
    function (app) {
        return this.isDefaultApp(app)
            ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)
            : of(app.name);
    };
    /**
     * Pass the selected app as next
     * @param app
     */
    /**
     * Pass the selected app as next
     * @param {?} app
     * @return {?}
     */
    AppsListComponent.prototype.selectApp = /**
     * Pass the selected app as next
     * @param {?} app
     * @return {?}
     */
    function (app) {
        this.currentApp = app;
        this.appClick.emit(app);
    };
    /**
     * Return true if the appId is the current app
     * @param appId
     */
    /**
     * Return true if the appId is the current app
     * @param {?} appId
     * @return {?}
     */
    AppsListComponent.prototype.isSelected = /**
     * Return true if the appId is the current app
     * @param {?} appId
     * @return {?}
     */
    function (appId) {
        return (this.currentApp !== undefined && appId === this.currentApp.id);
    };
    /**
     * @private
     * @param {?} apps
     * @return {?}
     */
    AppsListComponent.prototype.filterApps = /**
     * @private
     * @param {?} apps
     * @return {?}
     */
    function (apps) {
        var _this = this;
        /** @type {?} */
        var filteredApps = [];
        if (this.filtersAppId) {
            apps.filter((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                _this.filtersAppId.forEach((/**
                 * @param {?} filter
                 * @return {?}
                 */
                function (filter) {
                    if (app.defaultAppId === filter.defaultAppId ||
                        app.deploymentId === filter.deploymentId ||
                        app.name === filter.name ||
                        app.id === filter.id ||
                        app.modelId === filter.modelId ||
                        app.tenantId === filter.tenantId) {
                        filteredApps.push(app);
                    }
                }));
            }));
        }
        else {
            return apps;
        }
        return filteredApps;
    };
    /**
     * Check if the value of the layoutType property is an allowed value
     */
    /**
     * Check if the value of the layoutType property is an allowed value
     * @return {?}
     */
    AppsListComponent.prototype.isValidType = /**
     * Check if the value of the layoutType property is an allowed value
     * @return {?}
     */
    function () {
        if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {
            return true;
        }
        return false;
    };
    /**
     * Assign the default value to LayoutType
     */
    /**
     * Assign the default value to LayoutType
     * @return {?}
     */
    AppsListComponent.prototype.setDefaultLayoutType = /**
     * Assign the default value to LayoutType
     * @return {?}
     */
    function () {
        this.layoutType = AppsListComponent.LAYOUT_GRID;
    };
    /**
     * Return true if the layout type is LIST
     */
    /**
     * Return true if the layout type is LIST
     * @return {?}
     */
    AppsListComponent.prototype.isList = /**
     * Return true if the layout type is LIST
     * @return {?}
     */
    function () {
        return this.layoutType === AppsListComponent.LAYOUT_LIST;
    };
    /**
     * Return true if the layout type is GRID
     */
    /**
     * Return true if the layout type is GRID
     * @return {?}
     */
    AppsListComponent.prototype.isGrid = /**
     * Return true if the layout type is GRID
     * @return {?}
     */
    function () {
        return this.layoutType === AppsListComponent.LAYOUT_GRID;
    };
    /**
     * @return {?}
     */
    AppsListComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.appList.length === 0;
    };
    /**
     * @return {?}
     */
    AppsListComponent.prototype.isLoading = /**
     * @return {?}
     */
    function () {
        return this.loading;
    };
    /**
     * @param {?} app
     * @return {?}
     */
    AppsListComponent.prototype.getTheme = /**
     * @param {?} app
     * @return {?}
     */
    function (app) {
        return app.theme ? app.theme : '';
    };
    /**
     * @param {?} app
     * @return {?}
     */
    AppsListComponent.prototype.getBackgroundIcon = /**
     * @param {?} app
     * @return {?}
     */
    function (app) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);
    };
    AppsListComponent.LAYOUT_LIST = 'LIST';
    AppsListComponent.LAYOUT_GRID = 'GRID';
    AppsListComponent.DEFAULT_TASKS_APP = 'tasks';
    AppsListComponent.DEFAULT_TASKS_APP_NAME = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';
    AppsListComponent.DEFAULT_TASKS_APP_THEME = 'theme-2';
    AppsListComponent.DEFAULT_TASKS_APP_ICON = 'glyphicon-asterisk';
    AppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
    AppsListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-apps',
                    template: "<div class=\"menu-container\" *ngIf=\"!isEmpty()\">\n    <mat-list *ngIf=\"isList()\" class=\"adf-app-list\">\n        <mat-list-item class=\"adf-app-list-item\" (click)=\"selectApp(app)\" (keyup.enter)=\"selectApp(app)\" *ngFor=\"let app of appList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n            <mat-icon matListIcon>touch_app</mat-icon>\n            <span matLine>{{getAppName(app) | async}}</span>\n        </mat-list-item>\n    </mat-list>\n    <div fxLayout=\"row wrap\" *ngIf=\"isGrid()\" class=\"adf-app-listgrid\">\n        <div *ngFor=\"let app of appList\"\n            class=\"adf-app-listgrid-item\"\n            fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\">\n                <mat-card tabindex=\"0\"\n                    fxLayout=\"column\"\n                    role=\"button\"\n                    class=\"adf-app-listgrid-item-card\"\n                    title=\"{{getAppName(app) | async}}\"\n                    [ngClass]=\"[getTheme(app)]\"\n                    (click)=\"selectApp(app)\"\n                    (keyup.enter)=\"selectApp(app)\">\n                        <div class=\"adf-app-listgrid-item-card-logo\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{getBackgroundIcon(app)}}</mat-icon>\n                        </div>\n                        <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                            <h1>{{getAppName(app) | async}}</h1>\n                        </div>\n                        <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                            <div class=\"adf-line-clamp\">{{app.description}}</div>\n                        </mat-card-subtitle>\n\n                        <mat-card-actions class=\"adf-app-listgrid-item-card-actions\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-actions-icon\" *ngIf=\"isSelected(app.id)\">done</mat-icon>\n                        </mat-card-actions>\n                </mat-card>\n        </div>\n    </div>\n</div>\n\n<ng-container *ngIf=\"isLoading(); else empty\">\n    <div class=\"adf-app-list-spinner\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-container>\n\n<ng-template #empty>\n    <div class=\"adf-app-list-empty\" *ngIf=\"isEmpty()\">\n        <ng-content select=\"adf-custom-empty-content\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\" class=\"adf-custom-empty-template\"></ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content\n                icon=\"apps\"\n                [title]=\"'ADF_TASK_LIST.APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_TASK_LIST.APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AppsListComponent.ctorParameters = function () { return [
        { type: AppsProcessService },
        { type: TranslationService }
    ]; };
    AppsListComponent.propDecorators = {
        emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
        layoutType: [{ type: Input }],
        filtersAppId: [{ type: Input }],
        appClick: [{ type: Output }],
        error: [{ type: Output }]
    };
    return AppsListComponent;
}());
export { AppsListComponent };
if (false) {
    /** @type {?} */
    AppsListComponent.LAYOUT_LIST;
    /** @type {?} */
    AppsListComponent.LAYOUT_GRID;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_NAME;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_THEME;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_ICON;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON;
    /** @type {?} */
    AppsListComponent.prototype.emptyCustomContent;
    /**
     * (**required**) Defines the layout of the apps. There are two possible
     * values, "GRID" and "LIST".
     * @type {?}
     */
    AppsListComponent.prototype.layoutType;
    /**
     * Provides a way to filter the apps to show.
     * @type {?}
     */
    AppsListComponent.prototype.filtersAppId;
    /**
     * Emitted when an app entry is clicked.
     * @type {?}
     */
    AppsListComponent.prototype.appClick;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    AppsListComponent.prototype.error;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.appsObserver;
    /** @type {?} */
    AppsListComponent.prototype.apps$;
    /** @type {?} */
    AppsListComponent.prototype.currentApp;
    /** @type {?} */
    AppsListComponent.prototype.appList;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.iconsMDL;
    /** @type {?} */
    AppsListComponent.prototype.loading;
    /** @type {?} */
    AppsListComponent.prototype.hasEmptyCustomContentTemplate;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.appsProcessService;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwcy1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImFwcC1saXN0L2FwcHMtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLG1DQUFtQyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakgsT0FBTyxFQUFvQixTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBRSxVQUFVLEVBQVksRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWhELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDO0lBaURJLDJCQUNZLGtCQUFzQyxFQUN0QyxrQkFBc0M7UUFGbEQsaUJBS0M7UUFKVyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7Ozs7O1FBN0JsRCxlQUFVLEdBQVcsaUJBQWlCLENBQUMsV0FBVyxDQUFDOzs7O1FBUW5ELGFBQVEsR0FBbUQsSUFBSSxZQUFZLEVBQW9DLENBQUM7Ozs7UUFJaEgsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBT25ELFlBQU8sR0FBd0MsRUFBRSxDQUFDO1FBSWxELFlBQU8sR0FBWSxLQUFLLENBQUM7UUFFekIsa0NBQTZCLEdBQVksS0FBSyxDQUFDO1FBS3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxVQUFVOzs7O1FBQW1DLFVBQUMsUUFBUSxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksR0FBRyxRQUFRLEVBQTVCLENBQTRCLEVBQUM7YUFD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NkJBTWhELEtBQUs7K0JBSUwsS0FBSzsyQkFJTCxNQUFNO3dCQUlOLE1BQU07O0lBK0pYLHdCQUFDO0NBQUEsQUFoTUQsSUFnTUM7U0EzTFksaUJBQWlCOzs7SUFFMUIsOEJBQTJDOztJQUMzQyw4QkFBMkM7O0lBQzNDLG9DQUFrRDs7SUFDbEQseUNBQWtGOztJQUNsRiwwQ0FBMEQ7O0lBQzFELHlDQUFvRTs7SUFDcEUsa0RBQTBFOztJQUUxRSwrQ0FDd0Q7Ozs7OztJQUt4RCx1Q0FDbUQ7Ozs7O0lBR25ELHlDQUNvQjs7Ozs7SUFHcEIscUNBQ2dIOzs7OztJQUdoSCxrQ0FDbUQ7Ozs7O0lBRW5ELHlDQUFpRTs7SUFDakUsa0NBQW9EOztJQUVwRCx1Q0FBNkM7O0lBRTdDLG9DQUFrRDs7Ozs7SUFFbEQscUNBQTRCOztJQUU1QixvQ0FBeUI7O0lBRXpCLDBEQUErQzs7Ozs7SUFHM0MsK0NBQThDOzs7OztJQUM5QywrQ0FBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBcHBzUHJvY2Vzc1NlcnZpY2UsIFRyYW5zbGF0aW9uU2VydmljZSwgQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsIH0gZnJvbSAnLi4vdGFzay1saXN0JztcbmltcG9ydCB7IEljb25Nb2RlbCB9IGZyb20gJy4vaWNvbi5tb2RlbCc7XG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYXBwcycsXG4gICAgdGVtcGxhdGVVcmw6ICdhcHBzLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2FwcHMtbGlzdC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEFwcHNMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcblxuICAgIHB1YmxpYyBzdGF0aWMgTEFZT1VUX0xJU1Q6IHN0cmluZyA9ICdMSVNUJztcbiAgICBwdWJsaWMgc3RhdGljIExBWU9VVF9HUklEOiBzdHJpbmcgPSAnR1JJRCc7XG4gICAgcHVibGljIHN0YXRpYyBERUZBVUxUX1RBU0tTX0FQUDogc3RyaW5nID0gJ3Rhc2tzJztcbiAgICBwdWJsaWMgc3RhdGljIERFRkFVTFRfVEFTS1NfQVBQX05BTUU6IHN0cmluZyA9ICdBREZfVEFTS19MSVNULkFQUFMuVEFTS19BUFBfTkFNRSc7XG4gICAgcHVibGljIHN0YXRpYyBERUZBVUxUX1RBU0tTX0FQUF9USEVNRTogc3RyaW5nID0gJ3RoZW1lLTInO1xuICAgIHB1YmxpYyBzdGF0aWMgREVGQVVMVF9UQVNLU19BUFBfSUNPTjogc3RyaW5nID0gJ2dseXBoaWNvbi1hc3Rlcmlzayc7XG4gICAgcHVibGljIHN0YXRpYyBERUZBVUxUX1RBU0tTX0FQUF9NQVRFUklBTF9JQ09OOiBzdHJpbmcgPSAnZmF2b3JpdGVfYm9yZGVyJztcblxuICAgIEBDb250ZW50Q2hpbGQoQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUpXG4gICAgZW1wdHlDdXN0b21Db250ZW50OiBDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIC8qKiAoKipyZXF1aXJlZCoqKSBEZWZpbmVzIHRoZSBsYXlvdXQgb2YgdGhlIGFwcHMuIFRoZXJlIGFyZSB0d28gcG9zc2libGVcbiAgICAgKiB2YWx1ZXMsIFwiR1JJRFwiIGFuZCBcIkxJU1RcIi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGxheW91dFR5cGU6IHN0cmluZyA9IEFwcHNMaXN0Q29tcG9uZW50LkxBWU9VVF9HUklEO1xuXG4gICAgLyoqIFByb3ZpZGVzIGEgd2F5IHRvIGZpbHRlciB0aGUgYXBwcyB0byBzaG93LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZmlsdGVyc0FwcElkOiBhbnlbXTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gYXBwIGVudHJ5IGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgYXBwQ2xpY2s6IEV2ZW50RW1pdHRlcjxBcHBEZWZpbml0aW9uUmVwcmVzZW50YXRpb25Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBwcml2YXRlIGFwcHNPYnNlcnZlcjogT2JzZXJ2ZXI8QXBwRGVmaW5pdGlvblJlcHJlc2VudGF0aW9uTW9kZWw+O1xuICAgIGFwcHMkOiBPYnNlcnZhYmxlPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsPjtcblxuICAgIGN1cnJlbnRBcHA6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsO1xuXG4gICAgYXBwTGlzdDogQXBwRGVmaW5pdGlvblJlcHJlc2VudGF0aW9uTW9kZWwgW10gPSBbXTtcblxuICAgIHByaXZhdGUgaWNvbnNNREw6IEljb25Nb2RlbDtcblxuICAgIGxvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGhhc0VtcHR5Q3VzdG9tQ29udGVudFRlbXBsYXRlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcHBzUHJvY2Vzc1NlcnZpY2U6IEFwcHNQcm9jZXNzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBzJCA9IG5ldyBPYnNlcnZhYmxlPEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsPigob2JzZXJ2ZXIpID0+IHRoaXMuYXBwc09ic2VydmVyID0gb2JzZXJ2ZXIpXG4gICAgICAgICAgICAgICAgLnBpcGUoc2hhcmUoKSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkVHlwZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnNldERlZmF1bHRMYXlvdXRUeXBlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcHMkLnN1YnNjcmliZSgoYXBwOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwTGlzdC5wdXNoKGFwcCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmljb25zTURMID0gbmV3IEljb25Nb2RlbCgpO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmVtcHR5Q3VzdG9tQ29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5oYXNFbXB0eUN1c3RvbUNvbnRlbnRUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWQoKSB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuYXBwc1Byb2Nlc3NTZXJ2aWNlLmdldERlcGxveWVkQXBwbGljYXRpb25zKClcbiAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgIChyZXM6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsW10pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckFwcHMocmVzKS5mb3JFYWNoKChhcHA6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRGVmYXVsdEFwcChhcHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAudGhlbWUgPSBBcHBzTGlzdENvbXBvbmVudC5ERUZBVUxUX1RBU0tTX0FQUF9USEVNRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5pY29uID0gQXBwc0xpc3RDb21wb25lbnQuREVGQVVMVF9UQVNLU19BUFBfSUNPTjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwc09ic2VydmVyLm5leHQoYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcHAuZGVwbG95bWVudElkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcHNPYnNlcnZlci5uZXh0KGFwcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlzRGVmYXVsdEFwcChhcHApIHtcbiAgICAgICAgcmV0dXJuIGFwcC5kZWZhdWx0QXBwSWQgPT09IEFwcHNMaXN0Q29tcG9uZW50LkRFRkFVTFRfVEFTS1NfQVBQO1xuICAgIH1cblxuICAgIGdldEFwcE5hbWUoYXBwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRGVmYXVsdEFwcChhcHApXG4gICAgICAgICAgICA/IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmdldChBcHBzTGlzdENvbXBvbmVudC5ERUZBVUxUX1RBU0tTX0FQUF9OQU1FKVxuICAgICAgICAgICAgOiBvZihhcHAubmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFzcyB0aGUgc2VsZWN0ZWQgYXBwIGFzIG5leHRcbiAgICAgKiBAcGFyYW0gYXBwXG4gICAgICovXG4gICAgcHVibGljIHNlbGVjdEFwcChhcHA6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEFwcCA9IGFwcDtcbiAgICAgICAgdGhpcy5hcHBDbGljay5lbWl0KGFwcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIGFwcElkIGlzIHRoZSBjdXJyZW50IGFwcFxuICAgICAqIEBwYXJhbSBhcHBJZFxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQoYXBwSWQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuY3VycmVudEFwcCAhPT0gdW5kZWZpbmVkICYmIGFwcElkID09PSB0aGlzLmN1cnJlbnRBcHAuaWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyQXBwcyhhcHBzOiBBcHBEZWZpbml0aW9uUmVwcmVzZW50YXRpb25Nb2RlbCBbXSk6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsW10ge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZEFwcHM6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsW10gPSBbXTtcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyc0FwcElkKSB7XG4gICAgICAgICAgICBhcHBzLmZpbHRlcigoYXBwOiBBcHBEZWZpbml0aW9uUmVwcmVzZW50YXRpb25Nb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyc0FwcElkLmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwLmRlZmF1bHRBcHBJZCA9PT0gZmlsdGVyLmRlZmF1bHRBcHBJZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmRlcGxveW1lbnRJZCA9PT0gZmlsdGVyLmRlcGxveW1lbnRJZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm5hbWUgPT09IGZpbHRlci5uYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuaWQgPT09IGZpbHRlci5pZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLm1vZGVsSWQgPT09IGZpbHRlci5tb2RlbElkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAudGVuYW50SWQgPT09IGZpbHRlci50ZW5hbnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRBcHBzLnB1c2goYXBwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWRBcHBzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSB2YWx1ZSBvZiB0aGUgbGF5b3V0VHlwZSBwcm9wZXJ0eSBpcyBhbiBhbGxvd2VkIHZhbHVlXG4gICAgICovXG4gICAgaXNWYWxpZFR5cGUoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmxheW91dFR5cGUgJiYgKHRoaXMubGF5b3V0VHlwZSA9PT0gQXBwc0xpc3RDb21wb25lbnQuTEFZT1VUX0xJU1QgfHwgdGhpcy5sYXlvdXRUeXBlID09PSBBcHBzTGlzdENvbXBvbmVudC5MQVlPVVRfR1JJRCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ24gdGhlIGRlZmF1bHQgdmFsdWUgdG8gTGF5b3V0VHlwZVxuICAgICAqL1xuICAgIHNldERlZmF1bHRMYXlvdXRUeXBlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxheW91dFR5cGUgPSBBcHBzTGlzdENvbXBvbmVudC5MQVlPVVRfR1JJRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgbGF5b3V0IHR5cGUgaXMgTElTVFxuICAgICAqL1xuICAgIGlzTGlzdCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0VHlwZSA9PT0gQXBwc0xpc3RDb21wb25lbnQuTEFZT1VUX0xJU1Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIGxheW91dCB0eXBlIGlzIEdSSURcbiAgICAgKi9cbiAgICBpc0dyaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dFR5cGUgPT09IEFwcHNMaXN0Q29tcG9uZW50LkxBWU9VVF9HUklEO1xuICAgIH1cblxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcExpc3QubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIGlzTG9hZGluZygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGluZztcbiAgICB9XG5cbiAgICBnZXRUaGVtZShhcHA6IEFwcERlZmluaXRpb25SZXByZXNlbnRhdGlvbk1vZGVsKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGFwcC50aGVtZSA/IGFwcC50aGVtZSA6ICcnO1xuICAgIH1cblxuICAgIGdldEJhY2tncm91bmRJY29uKGFwcDogQXBwRGVmaW5pdGlvblJlcHJlc2VudGF0aW9uTW9kZWwpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5pY29uc01ETC5tYXBHbHlwaGljb25Ub01hdGVyaWFsRGVzaWduSWNvbnMoYXBwLmljb24pO1xuICAgIH1cblxufVxuIl19