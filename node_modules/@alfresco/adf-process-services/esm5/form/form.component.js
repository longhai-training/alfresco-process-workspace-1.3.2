/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../content-widget';
import { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormRenderingService, FormBaseComponent, FormOutcomeModel, FormEvent, FormErrorEvent, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
var FormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FormComponent, _super);
    function FormComponent(formService, visibilityService, ecmModelService, nodeService, formRenderingService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.visibilityService = visibilityService;
        _this.ecmModelService = ecmModelService;
        _this.nodeService = nodeService;
        _this.formRenderingService = formRenderingService;
        /**
         * Toggle saving of form metadata.
         */
        _this.saveMetadata = false;
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        _this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        _this.formCompleted = new EventEmitter();
        /**
         * Emitted when form content is clicked.
         */
        _this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        _this.formLoaded = new EventEmitter();
        /**
         * Emitted when form values are refreshed due to a data property change.
         */
        _this.formDataRefreshed = new EventEmitter();
        _this.debugMode = false;
        _this.subscriptions = [];
        _this.formRenderingService.setComponentTypeResolver('upload', (/**
         * @return {?}
         */
        function () { return AttachFileWidgetComponent; }), true);
        _this.formRenderingService.setComponentTypeResolver('select-folder', (/**
         * @return {?}
         */
        function () { return AttachFolderWidgetComponent; }), true);
        return _this;
    }
    /**
     * @return {?}
     */
    FormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscriptions.push(this.formService.formContentClicked.subscribe((/**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            _this.formContentClicked.emit(content);
        })), this.formService.validateForm.subscribe((/**
         * @param {?} validateFormEvent
         * @return {?}
         */
        function (validateFormEvent) {
            if (validateFormEvent.errorsField.length > 0) {
                _this.formError.next(validateFormEvent.errorsField);
            }
        })));
    };
    /**
     * @return {?}
     */
    FormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions = [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        /** @type {?} */
        var formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        /** @type {?} */
        var formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
        /** @type {?} */
        var nodeId = changes['nodeId'];
        if (nodeId && nodeId.currentValue) {
            this.loadFormForEcmNode(nodeId.currentValue);
            return;
        }
        /** @type {?} */
        var data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    };
    /**
     * Invoked when user clicks form refresh button.
     */
    /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    FormComponent.prototype.onRefreshClicked = /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    function () {
        this.loadForm();
    };
    /**
     * @return {?}
     */
    FormComponent.prototype.loadForm = /**
     * @return {?}
     */
    function () {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    FormComponent.prototype.findProcessVariablesByTaskId = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        return this.formService.getTask(taskId).pipe(switchMap((/**
         * @param {?} task
         * @return {?}
         */
        function (task) {
            if (_this.isAProcessTask(task)) {
                return _this.visibilityService.getTaskProcessVariable(taskId);
            }
            else {
                return of({});
            }
        })));
    };
    /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    FormComponent.prototype.isAProcessTask = /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    function (taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    FormComponent.prototype.getFormByTaskId = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.findProcessVariablesByTaskId(taskId).subscribe((/**
             * @param {?} processVariables
             * @return {?}
             */
            function (processVariables) {
                _this.formService
                    .getTaskForm(taskId)
                    .subscribe((/**
                 * @param {?} form
                 * @return {?}
                 */
                function (form) {
                    /** @type {?} */
                    var parsedForm = _this.parseForm(form);
                    _this.visibilityService.refreshVisibility(parsedForm);
                    parsedForm.validateForm();
                    _this.form = parsedForm;
                    _this.onFormLoaded(_this.form);
                    resolve(_this.form);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.handleError(error);
                    // reject(error);
                    resolve(null);
                }));
            }));
        }));
    };
    /**
     * @param {?} formId
     * @return {?}
     */
    FormComponent.prototype.getFormDefinitionByFormId = /**
     * @param {?} formId
     * @return {?}
     */
    function (formId) {
        var _this = this;
        this.formService
            .getFormDefinitionById(formId)
            .subscribe((/**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            _this.formName = form.name;
            _this.form = _this.parseForm(form);
            _this.visibilityService.refreshVisibility(_this.form);
            _this.form.validateForm();
            _this.onFormLoaded(_this.form);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.handleError(error);
        }));
    };
    /**
     * @param {?} formName
     * @return {?}
     */
    FormComponent.prototype.getFormDefinitionByFormName = /**
     * @param {?} formName
     * @return {?}
     */
    function (formName) {
        var _this = this;
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            _this.formService.getFormDefinitionById(id).subscribe((/**
             * @param {?} form
             * @return {?}
             */
            function (form) {
                _this.form = _this.parseForm(form);
                _this.visibilityService.refreshVisibility(_this.form);
                _this.form.validateForm();
                _this.onFormLoaded(_this.form);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.handleError(error);
            }));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.handleError(error);
        }));
    };
    /**
     * @return {?}
     */
    FormComponent.prototype.saveTaskForm = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.onTaskSaved(_this.form);
                _this.storeFormAsMetadata();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.onTaskSavedError(_this.form, error); }));
        }
    };
    /**
     * @param {?=} outcome
     * @return {?}
     */
    FormComponent.prototype.completeTaskForm = /**
     * @param {?=} outcome
     * @return {?}
     */
    function (outcome) {
        var _this = this;
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe((/**
             * @return {?}
             */
            function () {
                _this.onTaskCompleted(_this.form);
                _this.storeFormAsMetadata();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.onTaskCompletedError(_this.form, error); }));
        }
    };
    /**
     * @param {?} err
     * @return {?}
     */
    FormComponent.prototype.handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        this.error.emit(err);
    };
    /**
     * @param {?} json
     * @return {?}
     */
    FormComponent.prototype.parseForm = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        if (json) {
            /** @type {?} */
            var form = new FormModel(json, this.data, this.readOnly, this.formService);
            if (!json.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    };
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param form Form definition model.
     */
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    FormComponent.prototype.getFormDefinitionOutcomes = /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    function (form) {
        return [
            new FormOutcomeModel(form, { id: '$save', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FormComponent.prototype.checkVisibility = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormComponent.prototype.refreshFormData = /**
     * @private
     * @return {?}
     */
    function () {
        this.form = this.parseForm(this.form.json);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    };
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    FormComponent.prototype.loadFormForEcmNode = /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        this.nodeService.getNodeMetadata(nodeId).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.data = data.metadata;
            _this.loadFormFromActiviti(data.nodeType);
        }), this.handleError);
    };
    /**
     * @param {?} nodeType
     * @return {?}
     */
    FormComponent.prototype.loadFormFromActiviti = /**
     * @param {?} nodeType
     * @return {?}
     */
    function (nodeType) {
        var _this = this;
        this.formService.searchFrom(nodeType).subscribe((/**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            if (!form) {
                _this.formService.createFormFromANode(nodeType).subscribe((/**
                 * @param {?} formMetadata
                 * @return {?}
                 */
                function (formMetadata) {
                    _this.loadFormFromFormId(formMetadata.id);
                }));
            }
            else {
                _this.loadFormFromFormId(form.id);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.handleError(error);
        }));
    };
    /**
     * @private
     * @param {?} formId
     * @return {?}
     */
    FormComponent.prototype.loadFormFromFormId = /**
     * @private
     * @param {?} formId
     * @return {?}
     */
    function (formId) {
        this.formId = formId;
        this.loadForm();
    };
    /**
     * @protected
     * @return {?}
     */
    FormComponent.prototype.storeFormAsMetadata = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe((/**
             * @param {?} type
             * @return {?}
             */
            function (type) {
                _this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, _this.form.values, _this.path, _this.nameNode);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.handleError(error);
            }));
        }
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onFormLoaded = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onFormDataRefreshed = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formDataRefreshed.emit(form);
        this.formService.formDataRefreshed.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onTaskSaved = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    FormComponent.prototype.onTaskSavedError = /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    function (form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new FormErrorEvent(form, error));
    };
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    FormComponent.prototype.onTaskCompleted = /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new FormEvent(form));
    };
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    FormComponent.prototype.onTaskCompletedError = /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    function (form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));
    };
    /**
     * @protected
     * @param {?} outcome
     * @return {?}
     */
    FormComponent.prototype.onExecuteOutcome = /**
     * @protected
     * @param {?} outcome
     * @return {?}
     */
    function (outcome) {
        /** @type {?} */
        var args = new FormOutcomeEvent(outcome);
        this.formService.executeOutcome.next(args);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        if (args.defaultPrevented) {
            return false;
        }
        return true;
    };
    FormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-form',
                    template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                [color]=\"getColorForOutcome(outcome.name)\" mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    FormComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: WidgetVisibilityService },
        { type: EcmModelService },
        { type: NodeService },
        { type: FormRenderingService }
    ]; };
    FormComponent.propDecorators = {
        form: [{ type: Input }],
        taskId: [{ type: Input }],
        nodeId: [{ type: Input }],
        formId: [{ type: Input }],
        formName: [{ type: Input }],
        saveMetadata: [{ type: Input }],
        data: [{ type: Input }],
        formSaved: [{ type: Output }],
        formCompleted: [{ type: Output }],
        formContentClicked: [{ type: Output }],
        formLoaded: [{ type: Output }],
        formDataRefreshed: [{ type: Output }]
    };
    return FormComponent;
}(FormBaseComponent));
export { FormComponent };
if (false) {
    /**
     * Underlying form model instance.
     * @type {?}
     */
    FormComponent.prototype.form;
    /**
     * Task id to fetch corresponding form and values.
     * @type {?}
     */
    FormComponent.prototype.taskId;
    /**
     * Content Services node ID for the form metadata.
     * @type {?}
     */
    FormComponent.prototype.nodeId;
    /**
     * The id of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formId;
    /**
     * Name of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formName;
    /**
     * Toggle saving of form metadata.
     * @type {?}
     */
    FormComponent.prototype.saveMetadata;
    /**
     * Custom form values map to be used with the rendered form.
     * @type {?}
     */
    FormComponent.prototype.data;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    FormComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    FormComponent.prototype.formCompleted;
    /**
     * Emitted when form content is clicked.
     * @type {?}
     */
    FormComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    FormComponent.prototype.formLoaded;
    /**
     * Emitted when form values are refreshed due to a data property change.
     * @type {?}
     */
    FormComponent.prototype.formDataRefreshed;
    /** @type {?} */
    FormComponent.prototype.debugMode;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.ecmModelService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.nodeService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formRenderingService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJmb3JtL2Zvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUM1RCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMzRixPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSx1QkFBdUIsRUFDMUQsV0FBVyxFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUNuRCxTQUFTLEVBQUUsY0FBYyxFQUM1QyxTQUFTLEVBQUUsZ0JBQWdCLEVBQWdDLE1BQU0sb0JBQW9CLENBQUM7QUFFMUYsT0FBTyxFQUFjLEVBQUUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0lBS21DLHlDQUFpQjtJQXNEaEQsdUJBQXNCLFdBQXdCLEVBQ3hCLGlCQUEwQyxFQUMxQyxlQUFnQyxFQUNoQyxXQUF3QixFQUN4QixvQkFBMEM7UUFKaEUsWUFLSSxpQkFBTyxTQUdWO1FBUnFCLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLHVCQUFpQixHQUFqQixpQkFBaUIsQ0FBeUI7UUFDMUMscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLDBCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7Ozs7UUFsQ2hFLGtCQUFZLEdBQVksS0FBSyxDQUFDOzs7O1FBUTlCLGVBQVMsR0FBNEIsSUFBSSxZQUFZLEVBQWEsQ0FBQzs7OztRQUluRSxtQkFBYSxH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S0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOztnQkF6WEosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxVQUFVO29CQUNwQiw2ckVBQW9DO29CQUNwQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDeEM7Ozs7Z0JBWEcsV0FBVztnQkFEd0IsdUJBQXVCO2dCQUFyRCxlQUFlO2dCQUFFLFdBQVc7Z0JBQ3BCLG9CQUFvQjs7O3VCQWVoQyxLQUFLO3lCQUlMLEtBQUs7eUJBSUwsS0FBSzt5QkFJTCxLQUFLOzJCQUlMLEtBQUs7K0JBSUwsS0FBSzt1QkFJTCxLQUFLOzRCQUlMLE1BQU07Z0NBSU4sTUFBTTtxQ0FJTixNQUFNOzZCQUlOLE1BQU07b0NBSU4sTUFBTTs7SUF1VVgsb0JBQUM7Q0FBQSxBQTNYRCxDQUttQyxpQkFBaUIsR0FzWG5EO1NBdFhZLGFBQWE7Ozs7OztJQUd0Qiw2QkFDZ0I7Ozs7O0lBR2hCLCtCQUNlOzs7OztJQUdmLCtCQUNlOzs7OztJQUdmLCtCQUNlOzs7OztJQUdmLGlDQUNpQjs7Ozs7SUFHakIscUNBQzhCOzs7OztJQUc5Qiw2QkFDaUI7Ozs7O0lBR2pCLGtDQUNtRTs7Ozs7SUFHbkUsc0NBQ3VFOzs7OztJQUd2RSwyQ0FDMEY7Ozs7O0lBRzFGLG1DQUNvRTs7Ozs7SUFHcEUsMENBQzJFOztJQUUzRSxrQ0FBMkI7Ozs7O0lBRTNCLHNDQUE2Qzs7Ozs7SUFFakMsb0NBQWtDOzs7OztJQUNsQywwQ0FBb0Q7Ozs7O0lBQ3BELHdDQUEwQzs7Ozs7SUFDMUMsb0NBQWtDOzs7OztJQUNsQyw2Q0FBb0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgU2ltcGxlQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF0dGFjaEZpbGVXaWRnZXRDb21wb25lbnQsIEF0dGFjaEZvbGRlcldpZGdldENvbXBvbmVudCB9IGZyb20gJy4uL2NvbnRlbnQtd2lkZ2V0JztcbmltcG9ydCB7IEVjbU1vZGVsU2VydmljZSwgTm9kZVNlcnZpY2UsIFdpZGdldFZpc2liaWxpdHlTZXJ2aWNlLFxuICAgIEZvcm1TZXJ2aWNlLCBGb3JtUmVuZGVyaW5nU2VydmljZSwgRm9ybUJhc2VDb21wb25lbnQsIEZvcm1PdXRjb21lTW9kZWwsXG4gICAgVmFsaWRhdGVGb3JtRXZlbnQsIEZvcm1FdmVudCwgRm9ybUVycm9yRXZlbnQsIEZvcm1GaWVsZE1vZGVsLFxuICAgIEZvcm1Nb2RlbCwgRm9ybU91dGNvbWVFdmVudCwgRm9ybVZhbHVlcywgQ29udGVudExpbmtNb2RlbCB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtZm9ybScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0uY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUNvbXBvbmVudCBleHRlbmRzIEZvcm1CYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogVW5kZXJseWluZyBmb3JtIG1vZGVsIGluc3RhbmNlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZm9ybTogRm9ybU1vZGVsO1xuXG4gICAgLyoqIFRhc2sgaWQgdG8gZmV0Y2ggY29ycmVzcG9uZGluZyBmb3JtIGFuZCB2YWx1ZXMuICovXG4gICAgQElucHV0KClcbiAgICB0YXNrSWQ6IHN0cmluZztcblxuICAgIC8qKiBDb250ZW50IFNlcnZpY2VzIG5vZGUgSUQgZm9yIHRoZSBmb3JtIG1ldGFkYXRhLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogVGhlIGlkIG9mIHRoZSBmb3JtIGRlZmluaXRpb24gdG8gbG9hZCBhbmQgZGlzcGxheSB3aXRoIGN1c3RvbSB2YWx1ZXMuICovXG4gICAgQElucHV0KClcbiAgICBmb3JtSWQ6IG51bWJlcjtcblxuICAgIC8qKiBOYW1lIG9mIHRoZSBmb3JtIGRlZmluaXRpb24gdG8gbG9hZCBhbmQgZGlzcGxheSB3aXRoIGN1c3RvbSB2YWx1ZXMuICovXG4gICAgQElucHV0KClcbiAgICBmb3JtTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqIFRvZ2dsZSBzYXZpbmcgb2YgZm9ybSBtZXRhZGF0YS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNhdmVNZXRhZGF0YTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEN1c3RvbSBmb3JtIHZhbHVlcyBtYXAgdG8gYmUgdXNlZCB3aXRoIHRoZSByZW5kZXJlZCBmb3JtLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogRm9ybVZhbHVlcztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkIHdpdGggdGhlIGBTYXZlYCBvciBjdXN0b20gb3V0Y29tZXMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZm9ybVNhdmVkOiBFdmVudEVtaXR0ZXI8Rm9ybU1vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybU1vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQgd2l0aCB0aGUgYENvbXBsZXRlYCBvdXRjb21lLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1Db21wbGV0ZWQ6IEV2ZW50RW1pdHRlcjxGb3JtTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxGb3JtTW9kZWw+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGZvcm0gY29udGVudCBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1Db250ZW50Q2xpY2tlZDogRXZlbnRFbWl0dGVyPENvbnRlbnRMaW5rTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb250ZW50TGlua01vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBpcyBsb2FkZWQgb3IgcmVsb2FkZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgZm9ybUxvYWRlZDogRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gZm9ybSB2YWx1ZXMgYXJlIHJlZnJlc2hlZCBkdWUgdG8gYSBkYXRhIHByb3BlcnR5IGNoYW5nZS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBmb3JtRGF0YVJlZnJlc2hlZDogRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4oKTtcblxuICAgIGRlYnVnTW9kZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZm9ybVNlcnZpY2U6IEZvcm1TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2aXNpYmlsaXR5U2VydmljZTogV2lkZ2V0VmlzaWJpbGl0eVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIGVjbU1vZGVsU2VydmljZTogRWNtTW9kZWxTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBub2RlU2VydmljZTogTm9kZVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIGZvcm1SZW5kZXJpbmdTZXJ2aWNlOiBGb3JtUmVuZGVyaW5nU2VydmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZvcm1SZW5kZXJpbmdTZXJ2aWNlLnNldENvbXBvbmVudFR5cGVSZXNvbHZlcigndXBsb2FkJywgKCkgPT4gQXR0YWNoRmlsZVdpZGdldENvbXBvbmVudCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZm9ybVJlbmRlcmluZ1NlcnZpY2Uuc2V0Q29tcG9uZW50VHlwZVJlc29sdmVyKCdzZWxlY3QtZm9sZGVyJywgKCkgPT4gQXR0YWNoRm9sZGVyV2lkZ2V0Q29tcG9uZW50LCB0cnVlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmZvcm1Db250ZW50Q2xpY2tlZC5zdWJzY3JpYmUoKGNvbnRlbnQ6IENvbnRlbnRMaW5rTW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1Db250ZW50Q2xpY2tlZC5lbWl0KGNvbnRlbnQpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLnZhbGlkYXRlRm9ybS5zdWJzY3JpYmUoKHZhbGlkYXRlRm9ybUV2ZW50OiBWYWxpZGF0ZUZvcm1FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0ZUZvcm1FdmVudC5lcnJvcnNGaWVsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybUVycm9yLm5leHQodmFsaWRhdGVGb3JtRXZlbnQuZXJyb3JzRmllbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzdWJzY3JpcHRpb24pID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBjb25zdCB0YXNrSWQgPSBjaGFuZ2VzWyd0YXNrSWQnXTtcbiAgICAgICAgaWYgKHRhc2tJZCAmJiB0YXNrSWQuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmdldEZvcm1CeVRhc2tJZCh0YXNrSWQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcm1JZCA9IGNoYW5nZXNbJ2Zvcm1JZCddO1xuICAgICAgICBpZiAoZm9ybUlkICYmIGZvcm1JZC5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Rm9ybURlZmluaXRpb25CeUZvcm1JZChmb3JtSWQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcm1OYW1lID0gY2hhbmdlc1snZm9ybU5hbWUnXTtcbiAgICAgICAgaWYgKGZvcm1OYW1lICYmIGZvcm1OYW1lLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5nZXRGb3JtRGVmaW5pdGlvbkJ5Rm9ybU5hbWUoZm9ybU5hbWUuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vZGVJZCA9IGNoYW5nZXNbJ25vZGVJZCddO1xuICAgICAgICBpZiAobm9kZUlkICYmIG5vZGVJZC5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZEZvcm1Gb3JFY21Ob2RlKG5vZGVJZC5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGNoYW5nZXNbJ2RhdGEnXTtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEZvcm1EYXRhKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdXNlciBjbGlja3MgZm9ybSByZWZyZXNoIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBvblJlZnJlc2hDbGlja2VkKCkge1xuICAgICAgICB0aGlzLmxvYWRGb3JtKCk7XG4gICAgfVxuXG4gICAgbG9hZEZvcm0oKSB7XG4gICAgICAgIGlmICh0aGlzLnRhc2tJZCkge1xuICAgICAgICAgICAgdGhpcy5nZXRGb3JtQnlUYXNrSWQodGhpcy50YXNrSWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZm9ybUlkKSB7XG4gICAgICAgICAgICB0aGlzLmdldEZvcm1EZWZpbml0aW9uQnlGb3JtSWQodGhpcy5mb3JtSWQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZm9ybU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Rm9ybURlZmluaXRpb25CeUZvcm1OYW1lKHRoaXMuZm9ybU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluZFByb2Nlc3NWYXJpYWJsZXNCeVRhc2tJZCh0YXNrSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1TZXJ2aWNlLmdldFRhc2sodGFza0lkKS5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKCh0YXNrOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0FQcm9jZXNzVGFzayh0YXNrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpYmlsaXR5U2VydmljZS5nZXRUYXNrUHJvY2Vzc1ZhcmlhYmxlKHRhc2tJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlzQVByb2Nlc3NUYXNrKHRhc2tSZXByZXNlbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gdGFza1JlcHJlc2VudGF0aW9uLnByb2Nlc3NEZWZpbml0aW9uSWQgJiYgdGFza1JlcHJlc2VudGF0aW9uLnByb2Nlc3NEZWZpbml0aW9uRGVwbG95bWVudElkICE9PSAnbnVsbCc7XG4gICAgfVxuXG4gICAgZ2V0Rm9ybUJ5VGFza0lkKHRhc2tJZDogc3RyaW5nKTogUHJvbWlzZTxGb3JtTW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEZvcm1Nb2RlbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5maW5kUHJvY2Vzc1ZhcmlhYmxlc0J5VGFza0lkKHRhc2tJZCkuc3Vic2NyaWJlKChwcm9jZXNzVmFyaWFibGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAuZ2V0VGFza0Zvcm0odGFza0lkKVxuICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGZvcm0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRGb3JtID0gdGhpcy5wYXJzZUZvcm0oZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aXNpYmlsaXR5U2VydmljZS5yZWZyZXNoVmlzaWJpbGl0eShwYXJzZWRGb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRGb3JtLnZhbGlkYXRlRm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybSA9IHBhcnNlZEZvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEZvcm1EZWZpbml0aW9uQnlGb3JtSWQoZm9ybUlkOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5mb3JtU2VydmljZVxuICAgICAgICAgICAgLmdldEZvcm1EZWZpbml0aW9uQnlJZChmb3JtSWQpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChmb3JtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybU5hbWUgPSBmb3JtLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybSA9IHRoaXMucGFyc2VGb3JtKGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2liaWxpdHlTZXJ2aWNlLnJlZnJlc2hWaXNpYmlsaXR5KHRoaXMuZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS52YWxpZGF0ZUZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEZvcm1EZWZpbml0aW9uQnlGb3JtTmFtZShmb3JtTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2VcbiAgICAgICAgICAgIC5nZXRGb3JtRGVmaW5pdGlvbkJ5TmFtZShmb3JtTmFtZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZ2V0Rm9ybURlZmluaXRpb25CeUlkKGlkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZm9ybSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybSA9IHRoaXMucGFyc2VGb3JtKGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eVNlcnZpY2UucmVmcmVzaFZpc2liaWxpdHkodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0udmFsaWRhdGVGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZvcm1Mb2FkZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHNhdmVUYXNrRm9ybSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybSAmJiB0aGlzLmZvcm0udGFza0lkKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLnNhdmVUYXNrRm9ybSh0aGlzLmZvcm0udGFza0lkLCB0aGlzLmZvcm0udmFsdWVzKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25UYXNrU2F2ZWQodGhpcy5mb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVGb3JtQXNNZXRhZGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHRoaXMub25UYXNrU2F2ZWRFcnJvcih0aGlzLmZvcm0sIGVycm9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wbGV0ZVRhc2tGb3JtKG91dGNvbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybSAmJiB0aGlzLmZvcm0udGFza0lkKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmNvbXBsZXRlVGFza0Zvcm0odGhpcy5mb3JtLnRhc2tJZCwgdGhpcy5mb3JtLnZhbHVlcywgb3V0Y29tZSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uVGFza0NvbXBsZXRlZCh0aGlzLmZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZUZvcm1Bc01ldGFkYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4gdGhpcy5vblRhc2tDb21wbGV0ZWRFcnJvcih0aGlzLmZvcm0sIGVycm9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVFcnJvcihlcnI6IGFueSk6IGFueSB7XG4gICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgIH1cblxuICAgIHBhcnNlRm9ybShqc29uOiBhbnkpOiBGb3JtTW9kZWwge1xuICAgICAgICBpZiAoanNvbikge1xuICAgICAgICAgICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtTW9kZWwoanNvbiwgdGhpcy5kYXRhLCB0aGlzLnJlYWRPbmx5LCB0aGlzLmZvcm1TZXJ2aWNlKTtcbiAgICAgICAgICAgIGlmICghanNvbi5maWVsZHMpIHtcbiAgICAgICAgICAgICAgICBmb3JtLm91dGNvbWVzID0gdGhpcy5nZXRGb3JtRGVmaW5pdGlvbk91dGNvbWVzKGZvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRWYWxpZGF0b3JzICYmIHRoaXMuZmllbGRWYWxpZGF0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3JtLmZpZWxkVmFsaWRhdG9ycyA9IHRoaXMuZmllbGRWYWxpZGF0b3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZvcm07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGN1c3RvbSBzZXQgb2Ygb3V0Y29tZXMgZm9yIGEgRm9ybSBEZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSBmb3JtIEZvcm0gZGVmaW5pdGlvbiBtb2RlbC5cbiAgICAgKi9cbiAgICBnZXRGb3JtRGVmaW5pdGlvbk91dGNvbWVzKGZvcm06IEZvcm1Nb2RlbCk6IEZvcm1PdXRjb21lTW9kZWxbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgRm9ybU91dGNvbWVNb2RlbChmb3JtLCB7IGlkOiAnJHNhdmUnLCBuYW1lOiBGb3JtT3V0Y29tZU1vZGVsLlNBVkVfQUNUSU9OLCBpc1N5c3RlbTogdHJ1ZSB9KVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGNoZWNrVmlzaWJpbGl0eShmaWVsZDogRm9ybUZpZWxkTW9kZWwpIHtcbiAgICAgICAgaWYgKGZpZWxkICYmIGZpZWxkLmZvcm0pIHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eVNlcnZpY2UucmVmcmVzaFZpc2liaWxpdHkoZmllbGQuZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlZnJlc2hGb3JtRGF0YSgpIHtcbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5wYXJzZUZvcm0odGhpcy5mb3JtLmpzb24pO1xuICAgICAgICB0aGlzLm9uRm9ybUxvYWRlZCh0aGlzLmZvcm0pO1xuICAgICAgICB0aGlzLm9uRm9ybURhdGFSZWZyZXNoZWQodGhpcy5mb3JtKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRGb3JtRm9yRWNtTm9kZShub2RlSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLm5vZGVTZXJ2aWNlLmdldE5vZGVNZXRhZGF0YShub2RlSWQpLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGEubWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkRm9ybUZyb21BY3Rpdml0aShkYXRhLm5vZGVUeXBlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKTtcbiAgICB9XG5cbiAgICBsb2FkRm9ybUZyb21BY3Rpdml0aShub2RlVHlwZTogc3RyaW5nKTogYW55IHtcbiAgICAgICAgdGhpcy5mb3JtU2VydmljZS5zZWFyY2hGcm9tKG5vZGVUeXBlKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoZm9ybSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmNyZWF0ZUZvcm1Gcm9tQU5vZGUobm9kZVR5cGUpLnN1YnNjcmliZSgoZm9ybU1ldGFkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGb3JtRnJvbUZvcm1JZChmb3JtTWV0YWRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRGb3JtRnJvbUZvcm1JZChmb3JtLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRm9ybUZyb21Gb3JtSWQoZm9ybUlkOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5mb3JtSWQgPSBmb3JtSWQ7XG4gICAgICAgIHRoaXMubG9hZEZvcm0oKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc3RvcmVGb3JtQXNNZXRhZGF0YSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2F2ZU1ldGFkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmVjbU1vZGVsU2VydmljZS5jcmVhdGVFY21UeXBlRm9yQWN0aXZpdGlGb3JtKHRoaXMuZm9ybU5hbWUsIHRoaXMuZm9ybSkuc3Vic2NyaWJlKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZVNlcnZpY2UuY3JlYXRlTm9kZU1ldGFkYXRhKHR5cGUubm9kZVR5cGUgfHwgdHlwZS5lbnRyeS5wcmVmaXhlZE5hbWUsIEVjbU1vZGVsU2VydmljZS5NT0RFTF9OQU1FU1BBQ0UsIHRoaXMuZm9ybS52YWx1ZXMsIHRoaXMucGF0aCwgdGhpcy5uYW1lTm9kZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbkZvcm1Mb2FkZWQoZm9ybTogRm9ybU1vZGVsKSB7XG4gICAgICAgIHRoaXMuZm9ybUxvYWRlZC5lbWl0KGZvcm0pO1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmZvcm1Mb2FkZWQubmV4dChuZXcgRm9ybUV2ZW50KGZvcm0pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25Gb3JtRGF0YVJlZnJlc2hlZChmb3JtOiBGb3JtTW9kZWwpIHtcbiAgICAgICAgdGhpcy5mb3JtRGF0YVJlZnJlc2hlZC5lbWl0KGZvcm0pO1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmZvcm1EYXRhUmVmcmVzaGVkLm5leHQobmV3IEZvcm1FdmVudChmb3JtKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG9uVGFza1NhdmVkKGZvcm06IEZvcm1Nb2RlbCkge1xuICAgICAgICB0aGlzLmZvcm1TYXZlZC5lbWl0KGZvcm0pO1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLnRhc2tTYXZlZC5uZXh0KG5ldyBGb3JtRXZlbnQoZm9ybSkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvblRhc2tTYXZlZEVycm9yKGZvcm06IEZvcm1Nb2RlbCwgZXJyb3I6IGFueSkge1xuICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgdGhpcy5mb3JtU2VydmljZS50YXNrU2F2ZWRFcnJvci5uZXh0KG5ldyBGb3JtRXJyb3JFdmVudChmb3JtLCBlcnJvcikpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvblRhc2tDb21wbGV0ZWQoZm9ybTogRm9ybU1vZGVsKSB7XG4gICAgICAgIHRoaXMuZm9ybUNvbXBsZXRlZC5lbWl0KGZvcm0pO1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLnRhc2tDb21wbGV0ZWQubmV4dChuZXcgRm9ybUV2ZW50KGZvcm0pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb25UYXNrQ29tcGxldGVkRXJyb3IoZm9ybTogRm9ybU1vZGVsLCBlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLnRhc2tDb21wbGV0ZWRFcnJvci5uZXh0KG5ldyBGb3JtRXJyb3JFdmVudChmb3JtLCBlcnJvcikpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbkV4ZWN1dGVPdXRjb21lKG91dGNvbWU6IEZvcm1PdXRjb21lTW9kZWwpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgYXJncyA9IG5ldyBGb3JtT3V0Y29tZUV2ZW50KG91dGNvbWUpO1xuXG4gICAgICAgIHRoaXMuZm9ybVNlcnZpY2UuZXhlY3V0ZU91dGNvbWUubmV4dChhcmdzKTtcbiAgICAgICAgaWYgKGFyZ3MuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5leGVjdXRlT3V0Y29tZS5lbWl0KGFyZ3MpO1xuICAgICAgICBpZiAoYXJncy5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbn1cbiJdfQ==