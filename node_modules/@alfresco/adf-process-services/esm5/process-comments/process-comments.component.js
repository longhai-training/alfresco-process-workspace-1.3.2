/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
var ProcessCommentsComponent = /** @class */ (function () {
    function ProcessCommentsComponent(commentProcessService) {
        var _this = this;
        this.commentProcessService = commentProcessService;
        /**
         * Should the comments be read-only?
         */
        this.readOnly = true;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.comments = [];
        this.beingAdded = false;
        this.comment$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return _this.commentObserver = observer; }))
            .pipe(share());
        this.comment$.subscribe((/**
         * @param {?} comment
         * @return {?}
         */
        function (comment) {
            _this.comments.push(comment);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ProcessCommentsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var processInstanceId = changes['processInstanceId'];
        if (processInstanceId) {
            if (processInstanceId.currentValue) {
                this.getProcessInstanceComments(processInstanceId.currentValue);
            }
            else {
                this.resetComments();
            }
        }
    };
    /**
     * @private
     * @param {?} processInstanceId
     * @return {?}
     */
    ProcessCommentsComponent.prototype.getProcessInstanceComments = /**
     * @private
     * @param {?} processInstanceId
     * @return {?}
     */
    function (processInstanceId) {
        var _this = this;
        this.resetComments();
        if (processInstanceId) {
            this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                res = res.sort((/**
                 * @param {?} comment1
                 * @param {?} comment2
                 * @return {?}
                 */
                function (comment1, comment2) {
                    /** @type {?} */
                    var date1 = new Date(comment1.created);
                    /** @type {?} */
                    var date2 = new Date(comment2.created);
                    return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                }));
                res.forEach((/**
                 * @param {?} comment
                 * @return {?}
                 */
                function (comment) {
                    _this.commentObserver.next(comment);
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    ProcessCommentsComponent.prototype.resetComments = /**
     * @private
     * @return {?}
     */
    function () {
        this.comments = [];
    };
    /**
     * @return {?}
     */
    ProcessCommentsComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.message && this.message.trim() && !this.beingAdded) {
            this.beingAdded = true;
            this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)
                .subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.comments.unshift(res);
                _this.message = '';
                _this.beingAdded = false;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
                _this.beingAdded = false;
            }));
        }
    };
    /**
     * @return {?}
     */
    ProcessCommentsComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.message = '';
    };
    /**
     * @return {?}
     */
    ProcessCommentsComponent.prototype.isReadOnly = /**
     * @return {?}
     */
    function () {
        return this.readOnly;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    ProcessCommentsComponent.prototype.onError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.error.emit(error);
    };
    ProcessCommentsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-process-instance-comments',
                    template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\">\n        {{'ADF_PROCESS_LIST.DETAILS.COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input matInput id=\"comment-input\" placeholder=\"{{'ADF_PROCESS_LIST.DETAILS.COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\" (keyup.enter)=\"add()\" (keyup.esc)=\"clear()\">\n        </mat-form-field>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessCommentsComponent.ctorParameters = function () { return [
        { type: CommentProcessService }
    ]; };
    ProcessCommentsComponent.propDecorators = {
        processInstanceId: [{ type: Input }],
        readOnly: [{ type: Input }],
        error: [{ type: Output }]
    };
    return ProcessCommentsComponent;
}());
export { ProcessCommentsComponent };
if (false) {
    /**
     * (**required**) The numeric ID of the process instance to display comments for.
     * @type {?}
     */
    ProcessCommentsComponent.prototype.processInstanceId;
    /**
     * Should the comments be read-only?
     * @type {?}
     */
    ProcessCommentsComponent.prototype.readOnly;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ProcessCommentsComponent.prototype.error;
    /** @type {?} */
    ProcessCommentsComponent.prototype.comments;
    /**
     * @type {?}
     * @private
     */
    ProcessCommentsComponent.prototype.commentObserver;
    /** @type {?} */
    ProcessCommentsComponent.prototype.comment$;
    /** @type {?} */
    ProcessCommentsComponent.prototype.message;
    /** @type {?} */
    ProcessCommentsComponent.prototype.beingAdded;
    /**
     * @type {?}
     * @private
     */
    ProcessCommentsComponent.prototype.commentProcessService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1jb21tZW50cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwcm9jZXNzLWNvbW1lbnRzL3Byb2Nlc3MtY29tbWVudHMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBZ0IscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QztJQTRCSSxrQ0FBb0IscUJBQTRDO1FBQWhFLGlCQU1DO1FBTm1CLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7Ozs7UUFmaEUsYUFBUSxHQUFZLElBQUksQ0FBQzs7OztRQUl6QixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFbkQsYUFBUSxHQUFvQixFQUFFLENBQUM7UUFPL0IsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUd4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksVUFBVTs7OztRQUFlLFVBQUMsUUFBUSxJQUFNLE9BQUEsS0FBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLEVBQS9CLENBQStCLEVBQUM7YUFDdkYsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxPQUFxQjtZQUMxQyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoQyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsOENBQVc7Ozs7SUFBWCxV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M0IsQ0FBQzs7Z0JBckdKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsK0JBQStCO29CQUN6Qyx1dEJBQWdEOztpQkFFbkQ7Ozs7Z0JBVHNCLHFCQUFxQjs7O29DQWF2QyxLQUFLOzJCQUlMLEtBQUs7d0JBSUwsTUFBTTs7SUF1RlgsK0JBQUM7Q0FBQSxBQXZHRCxJQXVHQztTQWxHWSx3QkFBd0I7Ozs7OztJQUdqQyxxREFDMEI7Ozs7O0lBRzFCLDRDQUN5Qjs7Ozs7SUFHekIseUNBQ21EOztJQUVuRCw0Q0FBK0I7Ozs7O0lBRS9CLG1EQUFnRDs7SUFDaEQsNENBQW1DOztJQUVuQywyQ0FBZ0I7O0lBRWhCLDhDQUE0Qjs7Ozs7SUFFaEIseURBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tbWVudE1vZGVsLCBDb21tZW50UHJvY2Vzc1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1wcm9jZXNzLWluc3RhbmNlLWNvbW1lbnRzJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvY2Vzcy1jb21tZW50cy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvY2Vzcy1jb21tZW50cy5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFByb2Nlc3NDb21tZW50c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogKCoqcmVxdWlyZWQqKikgVGhlIG51bWVyaWMgSUQgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2UgdG8gZGlzcGxheSBjb21tZW50cyBmb3IuICovXG4gICAgQElucHV0KClcbiAgICBwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nO1xuXG4gICAgLyoqIFNob3VsZCB0aGUgY29tbWVudHMgYmUgcmVhZC1vbmx5PyAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHk6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBjb21tZW50czogQ29tbWVudE1vZGVsIFtdID0gW107XG5cbiAgICBwcml2YXRlIGNvbW1lbnRPYnNlcnZlcjogT2JzZXJ2ZXI8Q29tbWVudE1vZGVsPjtcbiAgICBjb21tZW50JDogT2JzZXJ2YWJsZTxDb21tZW50TW9kZWw+O1xuXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuXG4gICAgYmVpbmdBZGRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21tZW50UHJvY2Vzc1NlcnZpY2U6IENvbW1lbnRQcm9jZXNzU2VydmljZSkge1xuICAgICAgICB0aGlzLmNvbW1lbnQkID0gbmV3IE9ic2VydmFibGU8Q29tbWVudE1vZGVsPigob2JzZXJ2ZXIpID0+ICB0aGlzLmNvbW1lbnRPYnNlcnZlciA9IG9ic2VydmVyKVxuICAgICAgICAgICAgLnBpcGUoc2hhcmUoKSk7XG4gICAgICAgIHRoaXMuY29tbWVudCQuc3Vic2NyaWJlKChjb21tZW50OiBDb21tZW50TW9kZWwpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29tbWVudHMucHVzaChjb21tZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBjb25zdCBwcm9jZXNzSW5zdGFuY2VJZCA9IGNoYW5nZXNbJ3Byb2Nlc3NJbnN0YW5jZUlkJ107XG4gICAgICAgIGlmIChwcm9jZXNzSW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3NJbnN0YW5jZUlkLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UHJvY2Vzc0luc3RhbmNlQ29tbWVudHMocHJvY2Vzc0luc3RhbmNlSWQuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldENvbW1lbnRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFByb2Nlc3NJbnN0YW5jZUNvbW1lbnRzKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNldENvbW1lbnRzKCk7XG4gICAgICAgIGlmIChwcm9jZXNzSW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgdGhpcy5jb21tZW50UHJvY2Vzc1NlcnZpY2UuZ2V0UHJvY2Vzc0luc3RhbmNlQ29tbWVudHMocHJvY2Vzc0luc3RhbmNlSWQpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAocmVzOiBDb21tZW50TW9kZWxbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSByZXMuc29ydCgoY29tbWVudDE6IENvbW1lbnRNb2RlbCwgY29tbWVudDI6IENvbW1lbnRNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZTEgPSBuZXcgRGF0ZShjb21tZW50MS5jcmVhdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUyID0gbmV3IERhdGUoY29tbWVudDIuY3JlYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTEgPiBkYXRlMiA/IC0xIDogZGF0ZTEgPCBkYXRlMiA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmZvckVhY2goKGNvbW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbWVudE9ic2VydmVyLm5leHQoY29tbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldENvbW1lbnRzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNvbW1lbnRzID0gW107XG4gICAgfVxuXG4gICAgYWRkKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tZXNzYWdlICYmIHRoaXMubWVzc2FnZS50cmltKCkgJiYgIXRoaXMuYmVpbmdBZGRlZCkge1xuICAgICAgICAgICAgdGhpcy5iZWluZ0FkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY29tbWVudFByb2Nlc3NTZXJ2aWNlLmFkZFByb2Nlc3NJbnN0YW5jZUNvbW1lbnQodGhpcy5wcm9jZXNzSW5zdGFuY2VJZCwgdGhpcy5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgIChyZXM6IENvbW1lbnRNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tZW50cy51bnNoaWZ0KHJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVpbmdBZGRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWluZ0FkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICcnO1xuICAgIH1cblxuICAgIGlzUmVhZE9ubHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5O1xuICAgIH1cblxuICAgIG9uRXJyb3IoZXJyb3I6IGFueSkge1xuICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyb3IpO1xuICAgIH1cblxufVxuIl19