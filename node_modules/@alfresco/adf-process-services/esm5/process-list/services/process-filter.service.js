/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, forkJoin, throwError } from 'rxjs';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var ProcessFilterService = /** @class */ (function () {
    function ProcessFilterService(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * Gets all filters defined for a Process App.
     * @param appId ID of the target app
     * @returns Array of filter details
     */
    /**
     * Gets all filters defined for a Process App.
     * @param {?} appId ID of the target app
     * @return {?} Array of filter details
     */
    ProcessFilterService.prototype.getProcessFilters = /**
     * Gets all filters defined for a Process App.
     * @param {?} appId ID of the target app
     * @return {?} Array of filter details
     */
    function (appId) {
        var _this = this;
        return from(this.callApiProcessFilters(appId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var filters = [];
            response.data.forEach((/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) {
                /** @type {?} */
                var filterModel = new FilterProcessRepresentationModel(filter);
                filters.push(filterModel);
            }));
            return filters;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Retrieves the process filter by ID.
     * @param filterId ID of the filter
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    /**
     * Retrieves the process filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the target app
     * @return {?} Details of the filter
     */
    ProcessFilterService.prototype.getProcessFilterById = /**
     * Retrieves the process filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the target app
     * @return {?} Details of the filter
     */
    function (filterId, appId) {
        var _this = this;
        return from(this.callApiProcessFilters(appId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response.data.find((/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return filter.id === filterId; }));
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Retrieves the process filter by name.
     * @param filterName Name of the filter
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    /**
     * Retrieves the process filter by name.
     * @param {?} filterName Name of the filter
     * @param {?=} appId ID of the target app
     * @return {?} Details of the filter
     */
    ProcessFilterService.prototype.getProcessFilterByName = /**
     * Retrieves the process filter by name.
     * @param {?} filterName Name of the filter
     * @param {?=} appId ID of the target app
     * @return {?} Details of the filter
     */
    function (filterName, appId) {
        var _this = this;
        return from(this.callApiProcessFilters(appId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response.data.find((/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) { return filter.name === filterName; }));
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Creates and returns the default filters for an app.
     * @param appId ID of the target app
     * @returns Default filters just created
     */
    /**
     * Creates and returns the default filters for an app.
     * @param {?} appId ID of the target app
     * @return {?} Default filters just created
     */
    ProcessFilterService.prototype.createDefaultFilters = /**
     * Creates and returns the default filters for an app.
     * @param {?} appId ID of the target app
     * @return {?} Default filters just created
     */
    function (appId) {
        var _this = this;
        /** @type {?} */
        var runningFilter = this.getRunningFilterInstance(appId);
        /** @type {?} */
        var runningObservable = this.addProcessFilter(runningFilter);
        /** @type {?} */
        var completedFilter = this.getCompletedFilterInstance(appId);
        /** @type {?} */
        var completedObservable = this.addProcessFilter(completedFilter);
        /** @type {?} */
        var allFilter = this.getAllFilterInstance(appId);
        /** @type {?} */
        var allObservable = this.addProcessFilter(allFilter);
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            forkJoin(runningObservable, completedObservable, allObservable).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var filters = [];
                res.forEach((/**
                 * @param {?} filter
                 * @return {?}
                 */
                function (filter) {
                    if (filter.name === runningFilter.name) {
                        runningFilter.id = filter.id;
                        filters.push(runningFilter);
                    }
                    else if (filter.name === completedFilter.name) {
                        completedFilter.id = filter.id;
                        filters.push(completedFilter);
                    }
                    else if (filter.name === allFilter.name) {
                        allFilter.id = filter.id;
                        filters.push(allFilter);
                    }
                }));
                observer.next(filters);
                observer.complete();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.handleProcessError(err);
            }));
        }));
    };
    /**
     * Creates and returns a filter that matches "running" process instances.
     * @param appId ID of the target app
     * @returns Filter just created
     */
    /**
     * Creates and returns a filter that matches "running" process instances.
     * @param {?} appId ID of the target app
     * @return {?} Filter just created
     */
    ProcessFilterService.prototype.getRunningFilterInstance = /**
     * Creates and returns a filter that matches "running" process instances.
     * @param {?} appId ID of the target app
     * @return {?} Filter just created
     */
    function (appId) {
        return new FilterProcessRepresentationModel({
            'name': 'Running',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-random',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }
        });
    };
    /**
     * Returns a static Completed filter instance.
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    /**
     * Returns a static Completed filter instance.
     * @private
     * @param {?} appId ID of the target app
     * @return {?} Details of the filter
     */
    ProcessFilterService.prototype.getCompletedFilterInstance = /**
     * Returns a static Completed filter instance.
     * @private
     * @param {?} appId ID of the target app
     * @return {?} Details of the filter
     */
    function (appId) {
        return new FilterProcessRepresentationModel({
            'name': 'Completed',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }
        });
    };
    /**
     * Returns a static All filter instance.
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    /**
     * Returns a static All filter instance.
     * @private
     * @param {?} appId ID of the target app
     * @return {?} Details of the filter
     */
    ProcessFilterService.prototype.getAllFilterInstance = /**
     * Returns a static All filter instance.
     * @private
     * @param {?} appId ID of the target app
     * @return {?} Details of the filter
     */
    function (appId) {
        return new FilterProcessRepresentationModel({
            'name': 'All',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-th',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }
        });
    };
    /**
     * Adds a filter.
     * @param filter The filter to add
     * @returns The filter just added
     */
    /**
     * Adds a filter.
     * @param {?} filter The filter to add
     * @return {?} The filter just added
     */
    ProcessFilterService.prototype.addProcessFilter = /**
     * Adds a filter.
     * @param {?} filter The filter to add
     * @return {?} The filter just added
     */
    function (filter) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
     * @param appId ID of the target app
     * @returns List of filter details
     */
    /**
     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of filter details
     */
    ProcessFilterService.prototype.callApiProcessFilters = /**
     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of filter details
     */
    function (appId) {
        if (appId) {
            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });
        }
        else {
            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();
        }
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    ProcessFilterService.prototype.handleProcessError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return throwError(error || 'Server error');
    };
    ProcessFilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ProcessFilterService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ ProcessFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessFilterService_Factory() { return new ProcessFilterService(i0.inject(i1.AlfrescoApiService)); }, token: ProcessFilterService, providedIn: "root" });
    return ProcessFilterService;
}());
export { ProcessFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessFilterService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,