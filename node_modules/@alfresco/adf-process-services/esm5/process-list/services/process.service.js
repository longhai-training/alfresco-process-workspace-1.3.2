/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, throwError, of } from 'rxjs';
import { ProcessDefinitionRepresentation } from '../models/process-definition.model';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessListModel } from '../models/process-list.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var ProcessService = /** @class */ (function () {
    function ProcessService(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * Gets process instances for a filter and optionally a process definition.
     * @param requestNode Filter for instances
     * @param processDefinitionKey Limits returned instances to a process definition
     * @returns List of process instances
     */
    /**
     * Gets process instances for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of process instances
     */
    ProcessService.prototype.getProcessInstances = /**
     * Gets process instances for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of process instances
     */
    function (requestNode, processDefinitionKey) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (processDefinitionKey) {
                /** @type {?} */
                var filtered = res.data.filter((/**
                 * @param {?} process
                 * @return {?}
                 */
                function (process) { return process.processDefinitionKey === processDefinitionKey; }));
                res.data = filtered;
                return res;
            }
            else {
                return res;
            }
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Gets processes for a filter and optionally a process definition.
     * @param requestNode Filter for instances
     * @param processDefinitionKey Limits returned instances to a process definition
     * @returns List of processes
     */
    /**
     * Gets processes for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of processes
     */
    ProcessService.prototype.getProcesses = /**
     * Gets processes for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of processes
     */
    function (requestNode, processDefinitionKey) {
        return this.getProcessInstances(requestNode, processDefinitionKey)
            .pipe(catchError((/**
         * @return {?}
         */
        function () {
            return of(new ProcessListModel({}));
        })));
    };
    /**
     * Fetches the Process Audit information as a PDF.
     * @param processId ID of the target process
     * @returns Binary PDF data
     */
    /**
     * Fetches the Process Audit information as a PDF.
     * @param {?} processId ID of the target process
     * @return {?} Binary PDF data
     */
    ProcessService.prototype.fetchProcessAuditPdfById = /**
     * Fetches the Process Audit information as a PDF.
     * @param {?} processId ID of the target process
     * @return {?} Binary PDF data
     */
    function (processId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Fetches the Process Audit information in a JSON format.
     * @param processId ID of the target process
     * @returns JSON data
     */
    /**
     * Fetches the Process Audit information in a JSON format.
     * @param {?} processId ID of the target process
     * @return {?} JSON data
     */
    ProcessService.prototype.fetchProcessAuditJsonById = /**
     * Fetches the Process Audit information in a JSON format.
     * @param {?} processId ID of the target process
     * @return {?} JSON data
     */
    function (processId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Gets Process Instance metadata.
     * @param processInstanceId ID of the target process
     * @returns Metadata for the instance
     */
    /**
     * Gets Process Instance metadata.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Metadata for the instance
     */
    ProcessService.prototype.getProcess = /**
     * Gets Process Instance metadata.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Metadata for the instance
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Gets task instances for a process instance.
     * @param processInstanceId ID of the process instance
     * @param state Task state filter (can be "active" or "completed")
     * @returns Array of task instance details
     */
    /**
     * Gets task instances for a process instance.
     * @param {?} processInstanceId ID of the process instance
     * @param {?=} state Task state filter (can be "active" or "completed")
     * @return {?} Array of task instance details
     */
    ProcessService.prototype.getProcessTasks = /**
     * Gets task instances for a process instance.
     * @param {?} processInstanceId ID of the process instance
     * @param {?=} state Task state filter (can be "active" or "completed")
     * @return {?} Array of task instance details
     */
    function (processInstanceId, state) {
        var _this = this;
        /** @type {?} */
        var taskOpts = state ? {
            processInstanceId: processInstanceId,
            state: state
        } : {
            processInstanceId: processInstanceId
        };
        return from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))
            .pipe(map(this.extractData), map((/**
         * @param {?} tasks
         * @return {?}
         */
        function (tasks) { return tasks.map((/**
         * @param {?} task
         * @return {?}
         */
        function (task) {
            task.created = moment(task.created, 'YYYY-MM-DD').format();
            return task;
        })); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Gets process definitions associated with an app.
     * @param appId ID of a target app
     * @returns Array of process definitions
     */
    /**
     * Gets process definitions associated with an app.
     * @param {?=} appId ID of a target app
     * @return {?} Array of process definitions
     */
    ProcessService.prototype.getProcessDefinitions = /**
     * Gets process definitions associated with an app.
     * @param {?=} appId ID of a target app
     * @return {?} Array of process definitions
     */
    function (appId) {
        var _this = this;
        /** @type {?} */
        var opts = appId ? {
            latest: true,
            appDefinitionId: appId
        } : {
            latest: true
        };
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts))
            .pipe(map(this.extractData), map((/**
         * @param {?} processDefs
         * @return {?}
         */
        function (processDefs) { return processDefs.map((/**
         * @param {?} pd
         * @return {?}
         */
        function (pd) { return new ProcessDefinitionRepresentation(pd); })); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param processDefinitionId Process definition ID
     * @param name Process name
     * @param outcome Process outcome
     * @param startFormValues Values for the start form
     * @param variables Array of process instance variables
     * @returns Details of the process instance just started
     */
    /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param {?} processDefinitionId Process definition ID
     * @param {?} name Process name
     * @param {?=} outcome Process outcome
     * @param {?=} startFormValues Values for the start form
     * @param {?=} variables Array of process instance variables
     * @return {?} Details of the process instance just started
     */
    ProcessService.prototype.startProcess = /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param {?} processDefinitionId Process definition ID
     * @param {?} name Process name
     * @param {?=} outcome Process outcome
     * @param {?=} startFormValues Values for the start form
     * @param {?=} variables Array of process instance variables
     * @return {?} Details of the process instance just started
     */
    function (processDefinitionId, name, outcome, startFormValues, variables) {
        var _this = this;
        /** @type {?} */
        var startRequest = {
            name: name,
            processDefinitionId: processDefinitionId
        };
        if (outcome) {
            startRequest.outcome = outcome;
        }
        if (startFormValues) {
            startRequest.values = startFormValues;
        }
        if (variables) {
            startRequest.variables = variables;
        }
        return from(this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest))
            .pipe(map((/**
         * @param {?} pd
         * @return {?}
         */
        function (pd) { return new ProcessInstance(pd); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Cancels a process instance.
     * @param processInstanceId ID of process to cancel
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Cancels a process instance.
     * @param {?} processInstanceId ID of process to cancel
     * @return {?} Null response notifying when the operation is complete
     */
    ProcessService.prototype.cancelProcess = /**
     * Cancels a process instance.
     * @param {?} processInstanceId ID of process to cancel
     * @return {?} Null response notifying when the operation is complete
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Gets the variables for a process instance.
     * @param processInstanceId ID of the target process
     * @returns Array of instance variable info
     */
    /**
     * Gets the variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Array of instance variable info
     */
    ProcessService.prototype.getProcessInstanceVariables = /**
     * Gets the variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Array of instance variable info
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map((/**
         * @param {?} processVars
         * @return {?}
         */
        function (processVars) { return processVars.map((/**
         * @param {?} currentProcessVar
         * @return {?}
         */
        function (currentProcessVar) { return new ProcessInstanceVariable(currentProcessVar); })); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Creates or updates variables for a process instance.
     * @param processInstanceId ID of the target process
     * @param variables Variables to update
     * @returns Array of instance variable info
     */
    /**
     * Creates or updates variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variables Variables to update
     * @return {?} Array of instance variable info
     */
    ProcessService.prototype.createOrUpdateProcessInstanceVariables = /**
     * Creates or updates variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variables Variables to update
     * @return {?} Array of instance variable info
     */
    function (processInstanceId, variables) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * Deletes a variable for a process instance.
     * @param processInstanceId ID of the target process
     * @param variableName Name of the variable to delete
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Deletes a variable for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variableName Name of the variable to delete
     * @return {?} Null response notifying when the operation is complete
     */
    ProcessService.prototype.deleteProcessInstanceVariable = /**
     * Deletes a variable for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variableName Name of the variable to delete
     * @return {?} Null response notifying when the operation is complete
     */
    function (processInstanceId, variableName) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleProcessError(err); })));
    };
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    ProcessService.prototype.extractData = /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        return res.data || {};
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    ProcessService.prototype.handleProcessError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return throwError(error || 'Server error');
    };
    ProcessService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ProcessService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ ProcessService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessService_Factory() { return new ProcessService(i0.inject(i1.AlfrescoApiService)); }, token: ProcessService, providedIn: "root" });
    return ProcessService;
}());
export { ProcessService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicHJvY2Vzcy1saXN0L3NlcnZpY2VzL3Byb2Nlc3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsa0JBQWtCLEVBQWMsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd4RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNwRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSWpEO0lBS0ksd0JBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQzFELENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILDRDQUFtQjs7Ozs7O0lBQW5CLFVBQW9CLFdBQWtELEVBQUUsb0JBQTZCO1FBQXJHLGlCQWNDO1FBYkcsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEcsSUFBSSxDQUNELEdBQUc7Ozs7UUFBQyxVQUFDLEdBQVE7WUFDVCxJQUFJLG9CQUFvQixFQUFFOztvQkFDaEIsUUFBUSxHQUFH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SUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyw2QkFBNkIsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLENBQUMsQ0FDNUk7YUFDSSxJQUFJLENBQ0QsVUFBVTs7OztRQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsS0FBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxFQUE1QixDQUE0QixFQUFDLENBQ3BELENBQUM7SUFDVixDQUFDOzs7Ozs7SUFFTyxvQ0FBVzs7Ozs7SUFBbkIsVUFBb0IsR0FBUTtRQUN4QixPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUVPLDJDQUFrQjs7Ozs7SUFBMUIsVUFBMkIsS0FBVTtRQUNqQyxPQUFPLFVBQVUsQ0FBQyxLQUFLLElBQUksY0FBYyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7Z0JBN05KLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBaEJRLGtCQUFrQjs7O3lCQWpCM0I7Q0E2UEMsQUE5TkQsSUE4TkM7U0EzTlksY0FBYzs7Ozs7O0lBRVgsNENBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBGb3JtVmFsdWVzIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc3RWYXJpYWJsZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSwgdGhyb3dFcnJvciwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRhc2tEZXRhaWxzTW9kZWwgfSBmcm9tICcuLi8uLi90YXNrLWxpc3QnO1xuaW1wb3J0IHsgUHJvY2Vzc0ZpbHRlclBhcmFtUmVwcmVzZW50YXRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9maWx0ZXItcHJvY2Vzcy5tb2RlbCc7XG5pbXBvcnQgeyBQcm9jZXNzRGVmaW5pdGlvblJlcHJlc2VudGF0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtZGVmaW5pdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZSB9IGZyb20gJy4uL21vZGVscy9wcm9jZXNzLWluc3RhbmNlLXZhcmlhYmxlLm1vZGVsJztcbmltcG9ydCB7IFByb2Nlc3NJbnN0YW5jZSB9IGZyb20gJy4uL21vZGVscy9wcm9jZXNzLWluc3RhbmNlLm1vZGVsJztcbmltcG9ydCB7IFByb2Nlc3NMaXN0TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcHJvY2Vzcy1saXN0Lm1vZGVsJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZGVjbGFyZSBsZXQgbW9tZW50OiBhbnk7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUHJvY2Vzc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvY2VzcyBpbnN0YW5jZXMgZm9yIGEgZmlsdGVyIGFuZCBvcHRpb25hbGx5IGEgcHJvY2VzcyBkZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSByZXF1ZXN0Tm9kZSBGaWx0ZXIgZm9yIGluc3RhbmNlc1xuICAgICAqIEBwYXJhbSBwcm9jZXNzRGVmaW5pdGlvbktleSBMaW1pdHMgcmV0dXJuZWQgaW5zdGFuY2VzIHRvIGEgcHJvY2VzcyBkZWZpbml0aW9uXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBwcm9jZXNzIGluc3RhbmNlc1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NJbnN0YW5jZXMocmVxdWVzdE5vZGU6IFByb2Nlc3NGaWx0ZXJQYXJhbVJlcHJlc2VudGF0aW9uTW9kZWwsIHByb2Nlc3NEZWZpbml0aW9uS2V5Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9jZXNzTGlzdE1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucHJvY2Vzc0FwaS5nZXRQcm9jZXNzSW5zdGFuY2VzKHJlcXVlc3ROb2RlKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NEZWZpbml0aW9uS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IHJlcy5kYXRhLmZpbHRlcigocHJvY2VzcykgPT4gcHJvY2Vzcy5wcm9jZXNzRGVmaW5pdGlvbktleSA9PT0gcHJvY2Vzc0RlZmluaXRpb25LZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmRhdGEgPSBmaWx0ZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHByb2Nlc3NlcyBmb3IgYSBmaWx0ZXIgYW5kIG9wdGlvbmFsbHkgYSBwcm9jZXNzIGRlZmluaXRpb24uXG4gICAgICogQHBhcmFtIHJlcXVlc3ROb2RlIEZpbHRlciBmb3IgaW5zdGFuY2VzXG4gICAgICogQHBhcmFtIHByb2Nlc3NEZWZpbml0aW9uS2V5IExpbWl0cyByZXR1cm5lZCBpbnN0YW5jZXMgdG8gYSBwcm9jZXNzIGRlZmluaXRpb25cbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIHByb2Nlc3Nlc1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NlcyhyZXF1ZXN0Tm9kZTogUHJvY2Vzc0ZpbHRlclBhcmFtUmVwcmVzZW50YXRpb25Nb2RlbCwgcHJvY2Vzc0RlZmluaXRpb25LZXk/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb2Nlc3NMaXN0TW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvY2Vzc0luc3RhbmNlcyhyZXF1ZXN0Tm9kZSwgcHJvY2Vzc0RlZmluaXRpb25LZXkpXG4gICAgICAgICAgICAucGlwZShjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YobmV3IFByb2Nlc3NMaXN0TW9kZWwoe30pKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBQcm9jZXNzIEF1ZGl0IGluZm9ybWF0aW9uIGFzIGEgUERGLlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSWQgSUQgb2YgdGhlIHRhcmdldCBwcm9jZXNzXG4gICAgICogQHJldHVybnMgQmluYXJ5IFBERiBkYXRhXG4gICAgICovXG4gICAgZmV0Y2hQcm9jZXNzQXVkaXRQZGZCeUlkKHByb2Nlc3NJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCbG9iPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucHJvY2Vzc0FwaS5nZXRQcm9jZXNzQXVkaXRQZGYocHJvY2Vzc0lkKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyB0aGUgUHJvY2VzcyBBdWRpdCBpbmZvcm1hdGlvbiBpbiBhIEpTT04gZm9ybWF0LlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSWQgSUQgb2YgdGhlIHRhcmdldCBwcm9jZXNzXG4gICAgICogQHJldHVybnMgSlNPTiBkYXRhXG4gICAgICovXG4gICAgZmV0Y2hQcm9jZXNzQXVkaXRKc29uQnlJZChwcm9jZXNzSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucHJvY2Vzc0FwaS5nZXRQcm9jZXNzQXVkaXRKc29uKHByb2Nlc3NJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgUHJvY2VzcyBJbnN0YW5jZSBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0luc3RhbmNlSWQgSUQgb2YgdGhlIHRhcmdldCBwcm9jZXNzXG4gICAgICogQHJldHVybnMgTWV0YWRhdGEgZm9yIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGdldFByb2Nlc3MocHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvY2Vzc0luc3RhbmNlPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucHJvY2Vzc0FwaS5nZXRQcm9jZXNzSW5zdGFuY2UocHJvY2Vzc0luc3RhbmNlSWQpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRhc2sgaW5zdGFuY2VzIGZvciBhIHByb2Nlc3MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJbnN0YW5jZUlkIElEIG9mIHRoZSBwcm9jZXNzIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHN0YXRlIFRhc2sgc3RhdGUgZmlsdGVyIChjYW4gYmUgXCJhY3RpdmVcIiBvciBcImNvbXBsZXRlZFwiKVxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIHRhc2sgaW5zdGFuY2UgZGV0YWlsc1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NUYXNrcyhwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nLCBzdGF0ZT86IHN0cmluZyk6IE9ic2VydmFibGU8VGFza0RldGFpbHNNb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IHRhc2tPcHRzID0gc3RhdGUgPyB7XG4gICAgICAgICAgICBwcm9jZXNzSW5zdGFuY2VJZDogcHJvY2Vzc0luc3RhbmNlSWQsXG4gICAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzSW5zdGFuY2VJZDogcHJvY2Vzc0luc3RhbmNlSWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkudGFza0FwaS5saXN0VGFza3ModGFza09wdHMpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKHRoaXMuZXh0cmFjdERhdGEpLFxuICAgICAgICAgICAgICAgIG1hcCgodGFza3MpID0+IHRhc2tzLm1hcCgodGFzazogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2suY3JlYXRlZCA9IG1vbWVudCh0YXNrLmNyZWF0ZWQsICdZWVlZLU1NLUREJykuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrO1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvY2VzcyBkZWZpbml0aW9ucyBhc3NvY2lhdGVkIHdpdGggYW4gYXBwLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiBhIHRhcmdldCBhcHBcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBwcm9jZXNzIGRlZmluaXRpb25zXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0RlZmluaXRpb25zKGFwcElkPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxQcm9jZXNzRGVmaW5pdGlvblJlcHJlc2VudGF0aW9uW10+IHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGFwcElkID8ge1xuICAgICAgICAgICAgbGF0ZXN0OiB0cnVlLFxuICAgICAgICAgICAgYXBwRGVmaW5pdGlvbklkOiBhcHBJZFxuICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgIGxhdGVzdDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGZyb20oXG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnByb2Nlc3NBcGkuZ2V0UHJvY2Vzc0RlZmluaXRpb25zKG9wdHMpXG4gICAgICAgIClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCh0aGlzLmV4dHJhY3REYXRhKSxcbiAgICAgICAgICAgICAgICBtYXAoKHByb2Nlc3NEZWZzKSA9PiBwcm9jZXNzRGVmcy5tYXAoKHBkKSA9PiBuZXcgUHJvY2Vzc0RlZmluaXRpb25SZXByZXNlbnRhdGlvbihwZCkpKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhIHByb2Nlc3MgYmFzZWQgb24gYSBwcm9jZXNzIGRlZmluaXRpb24sIG5hbWUsIGZvcm0gdmFsdWVzIG9yIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0RlZmluaXRpb25JZCBQcm9jZXNzIGRlZmluaXRpb24gSURcbiAgICAgKiBAcGFyYW0gbmFtZSBQcm9jZXNzIG5hbWVcbiAgICAgKiBAcGFyYW0gb3V0Y29tZSBQcm9jZXNzIG91dGNvbWVcbiAgICAgKiBAcGFyYW0gc3RhcnRGb3JtVmFsdWVzIFZhbHVlcyBmb3IgdGhlIHN0YXJ0IGZvcm1cbiAgICAgKiBAcGFyYW0gdmFyaWFibGVzIEFycmF5IG9mIHByb2Nlc3MgaW5zdGFuY2UgdmFyaWFibGVzXG4gICAgICogQHJldHVybnMgRGV0YWlscyBvZiB0aGUgcHJvY2VzcyBpbnN0YW5jZSBqdXN0IHN0YXJ0ZWRcbiAgICAgKi9cbiAgICBzdGFydFByb2Nlc3MocHJvY2Vzc0RlZmluaXRpb25JZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIG91dGNvbWU/OiBzdHJpbmcsIHN0YXJ0Rm9ybVZhbHVlcz86IEZvcm1WYWx1ZXMsIHZhcmlhYmxlcz86IFByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlW10pOiBPYnNlcnZhYmxlPFByb2Nlc3NJbnN0YW5jZT4ge1xuICAgICAgICBjb25zdCBzdGFydFJlcXVlc3Q6IGFueSA9IHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwcm9jZXNzRGVmaW5pdGlvbklkOiBwcm9jZXNzRGVmaW5pdGlvbklkXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvdXRjb21lKSB7XG4gICAgICAgICAgICBzdGFydFJlcXVlc3Qub3V0Y29tZSA9IG91dGNvbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0Rm9ybVZhbHVlcykge1xuICAgICAgICAgICAgc3RhcnRSZXF1ZXN0LnZhbHVlcyA9IHN0YXJ0Rm9ybVZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFyaWFibGVzKSB7XG4gICAgICAgICAgICBzdGFydFJlcXVlc3QudmFyaWFibGVzID0gdmFyaWFibGVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLnN0YXJ0TmV3UHJvY2Vzc0luc3RhbmNlKHN0YXJ0UmVxdWVzdClcbiAgICAgICAgKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChwZCkgPT4gbmV3IFByb2Nlc3NJbnN0YW5jZShwZCkpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhIHByb2Nlc3MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJbnN0YW5jZUlkIElEIG9mIHByb2Nlc3MgdG8gY2FuY2VsXG4gICAgICogQHJldHVybnMgTnVsbCByZXNwb25zZSBub3RpZnlpbmcgd2hlbiB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG4gICAgY2FuY2VsUHJvY2Vzcyhwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLmRlbGV0ZVByb2Nlc3NJbnN0YW5jZShwcm9jZXNzSW5zdGFuY2VJZClcbiAgICAgICAgKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YXJpYWJsZXMgZm9yIGEgcHJvY2VzcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0luc3RhbmNlSWQgSUQgb2YgdGhlIHRhcmdldCBwcm9jZXNzXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgaW5zdGFuY2UgdmFyaWFibGUgaW5mb1xuICAgICAqL1xuICAgIGdldFByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlcyhwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZVtdPiB7XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzSW5zdGFuY2VWYXJpYWJsZXNBcGkuZ2V0UHJvY2Vzc0luc3RhbmNlVmFyaWFibGVzKHByb2Nlc3NJbnN0YW5jZUlkKVxuICAgICAgICApXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHByb2Nlc3NWYXJzOiBhbnlbXSkgPT4gcHJvY2Vzc1ZhcnMubWFwKChjdXJyZW50UHJvY2Vzc1ZhcikgPT4gbmV3IFByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlKGN1cnJlbnRQcm9jZXNzVmFyKSkpLFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBvciB1cGRhdGVzIHZhcmlhYmxlcyBmb3IgYSBwcm9jZXNzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSW5zdGFuY2VJZCBJRCBvZiB0aGUgdGFyZ2V0IHByb2Nlc3NcbiAgICAgKiBAcGFyYW0gdmFyaWFibGVzIFZhcmlhYmxlcyB0byB1cGRhdGVcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBpbnN0YW5jZSB2YXJpYWJsZSBpbmZvXG4gICAgICovXG4gICAgY3JlYXRlT3JVcGRhdGVQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZXMocHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZywgdmFyaWFibGVzOiBSZXN0VmFyaWFibGVbXSk6IE9ic2VydmFibGU8UHJvY2Vzc0luc3RhbmNlVmFyaWFibGVbXT4ge1xuICAgICAgICByZXR1cm4gZnJvbShcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucHJvY2Vzc0luc3RhbmNlVmFyaWFibGVzQXBpLmNyZWF0ZU9yVXBkYXRlUHJvY2Vzc0luc3RhbmNlVmFyaWFibGVzKHByb2Nlc3NJbnN0YW5jZUlkLCB2YXJpYWJsZXMpXG4gICAgICAgICkucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSB2YXJpYWJsZSBmb3IgYSBwcm9jZXNzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSW5zdGFuY2VJZCBJRCBvZiB0aGUgdGFyZ2V0IHByb2Nlc3NcbiAgICAgKiBAcGFyYW0gdmFyaWFibGVOYW1lIE5hbWUgb2YgdGhlIHZhcmlhYmxlIHRvIGRlbGV0ZVxuICAgICAqIEByZXR1cm5zIE51bGwgcmVzcG9uc2Ugbm90aWZ5aW5nIHdoZW4gdGhlIG9wZXJhdGlvbiBpcyBjb21wbGV0ZVxuICAgICAqL1xuICAgIGRlbGV0ZVByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcsIHZhcmlhYmxlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzSW5zdGFuY2VWYXJpYWJsZXNBcGkuZGVsZXRlUHJvY2Vzc0luc3RhbmNlVmFyaWFibGUocHJvY2Vzc0luc3RhbmNlSWQsIHZhcmlhYmxlTmFtZSlcbiAgICAgICAgKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGV4dHJhY3REYXRhKHJlczogYW55KSB7XG4gICAgICAgIHJldHVybiByZXMuZGF0YSB8fCB7fTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVByb2Nlc3NFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG59XG4iXX0=