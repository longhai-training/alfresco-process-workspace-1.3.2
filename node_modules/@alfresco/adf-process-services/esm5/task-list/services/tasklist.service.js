/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, forkJoin, throwError, of } from 'rxjs';
import { map, catchError, switchMap, flatMap, filter } from 'rxjs/operators';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListModel } from '../models/task-list.model';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var TaskListService = /** @class */ (function () {
    function TaskListService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Gets all the filters in the list that belong to a task.
     * @param taskId ID of the target task
     * @param filterList List of filters to search through
     * @returns Filters belonging to the task
     */
    /**
     * Gets all the filters in the list that belong to a task.
     * @param {?} taskId ID of the target task
     * @param {?} filterList List of filters to search through
     * @return {?} Filters belonging to the task
     */
    TaskListService.prototype.getFilterForTaskById = /**
     * Gets all the filters in the list that belong to a task.
     * @param {?} taskId ID of the target task
     * @param {?} filterList List of filters to search through
     * @return {?} Filters belonging to the task
     */
    function (taskId, filterList) {
        var _this = this;
        return from(filterList)
            .pipe(flatMap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.isTaskRelatedToFilter(taskId, data); })), filter((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data != null; })));
    };
    /**
     * Gets the search query for a task based on the supplied filter.
     * @param filter The filter to use
     * @returns The search query
     */
    /**
     * Gets the search query for a task based on the supplied filter.
     * @private
     * @param {?} filterModel
     * @return {?} The search query
     */
    TaskListService.prototype.generateTaskRequestNodeFromFilter = /**
     * Gets the search query for a task based on the supplied filter.
     * @private
     * @param {?} filterModel
     * @return {?} The search query
     */
    function (filterModel) {
        /** @type {?} */
        var requestNode = {
            appDefinitionId: filterModel.appId,
            assignment: filterModel.filter.assignment,
            state: filterModel.filter.state,
            sort: filterModel.filter.sort
        };
        return new TaskQueryRequestRepresentationModel(requestNode);
    };
    /**
     * Checks if a taskId is filtered with the given filter.
     * @param taskId ID of the target task
     * @param filterModel The filter you want to check
     * @returns The filter if it is related or null otherwise
     */
    /**
     * Checks if a taskId is filtered with the given filter.
     * @param {?} taskId ID of the target task
     * @param {?} filterModel The filter you want to check
     * @return {?} The filter if it is related or null otherwise
     */
    TaskListService.prototype.isTaskRelatedToFilter = /**
     * Checks if a taskId is filtered with the given filter.
     * @param {?} taskId ID of the target task
     * @param {?} filterModel The filter you want to check
     * @return {?} The filter if it is related or null otherwise
     */
    function (taskId, filterModel) {
        var _this = this;
        /** @type {?} */
        var requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);
        return from(this.callApiTasksFiltered(requestNodeForFilter))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.data.find((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.id === taskId; })) ? filterModel : null;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets all the tasks matching the supplied query.
     * @param requestNode Query to search for tasks
     * @returns List of tasks
     */
    /**
     * Gets all the tasks matching the supplied query.
     * @param {?} requestNode Query to search for tasks
     * @return {?} List of tasks
     */
    TaskListService.prototype.getTasks = /**
     * Gets all the tasks matching the supplied query.
     * @param {?} requestNode Query to search for tasks
     * @return {?} List of tasks
     */
    function (requestNode) {
        var _this = this;
        return from(this.callApiTasksFiltered(requestNode))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets tasks matching a query and state value.
     * @param requestNode Query to search for tasks
     * @param state Task state. Can be "open" or "completed".
     * @returns List of tasks
     */
    /**
     * Gets tasks matching a query and state value.
     * @param {?} requestNode Query to search for tasks
     * @param {?=} state Task state. Can be "open" or "completed".
     * @return {?} List of tasks
     */
    TaskListService.prototype.findTasksByState = /**
     * Gets tasks matching a query and state value.
     * @param {?} requestNode Query to search for tasks
     * @param {?=} state Task state. Can be "open" or "completed".
     * @return {?} List of tasks
     */
    function (requestNode, state) {
        if (state) {
            requestNode.state = state;
        }
        return this.getTasks(requestNode)
            .pipe(catchError((/**
         * @return {?}
         */
        function () { return of(new TaskListModel()); })));
    };
    /**
     * Gets all tasks matching a query and state value.
     * @param requestNode Query to search for tasks.
     * @param state Task state. Can be "open" or "completed".
     * @returns List of tasks
     */
    /**
     * Gets all tasks matching a query and state value.
     * @param {?} requestNode Query to search for tasks.
     * @param {?=} state Task state. Can be "open" or "completed".
     * @return {?} List of tasks
     */
    TaskListService.prototype.findAllTaskByState = /**
     * Gets all tasks matching a query and state value.
     * @param {?} requestNode Query to search for tasks.
     * @param {?=} state Task state. Can be "open" or "completed".
     * @return {?} List of tasks
     */
    function (requestNode, state) {
        var _this = this;
        if (state) {
            requestNode.state = state;
        }
        return this.getTotalTasks(requestNode)
            .pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            requestNode.size = res.total;
            return _this.getTasks(requestNode);
        })));
    };
    /**
     * Gets all tasks matching the supplied query but ignoring the task state.
     * @param requestNode Query to search for tasks
     * @returns List of tasks
     */
    /**
     * Gets all tasks matching the supplied query but ignoring the task state.
     * @param {?} requestNode Query to search for tasks
     * @return {?} List of tasks
     */
    TaskListService.prototype.findAllTasksWithoutState = /**
     * Gets all tasks matching the supplied query but ignoring the task state.
     * @param {?} requestNode Query to search for tasks
     * @return {?} List of tasks
     */
    function (requestNode) {
        return forkJoin(this.findTasksByState(requestNode, 'open'), this.findAllTaskByState(requestNode, 'completed'), (/**
         * @param {?} activeTasks
         * @param {?} completedTasks
         * @return {?}
         */
        function (activeTasks, completedTasks) {
            /** @type {?} */
            var tasks = Object.assign({}, activeTasks);
            tasks.total += completedTasks.total;
            tasks.data = tasks.data.concat(completedTasks.data);
            return tasks;
        }));
    };
    /**
     * Gets details for a task.
     * @param taskId ID of the target task.
     * @returns Task details
     */
    /**
     * Gets details for a task.
     * @param {?} taskId ID of the target task.
     * @return {?} Task details
     */
    TaskListService.prototype.getTaskDetails = /**
     * Gets details for a task.
     * @param {?} taskId ID of the target task.
     * @return {?} Task details
     */
    function (taskId) {
        var _this = this;
        return from(this.callApiTaskDetails(taskId))
            .pipe(map((/**
         * @param {?} details
         * @return {?}
         */
        function (details) {
            return new TaskDetailsModel(details);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets the checklist for a task.
     * @param id ID of the target task
     * @returns Array of checklist task details
     */
    /**
     * Gets the checklist for a task.
     * @param {?} id ID of the target task
     * @return {?} Array of checklist task details
     */
    TaskListService.prototype.getTaskChecklist = /**
     * Gets the checklist for a task.
     * @param {?} id ID of the target task
     * @return {?} Array of checklist task details
     */
    function (id) {
        var _this = this;
        return from(this.callApiTaskChecklist(id))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var checklists = [];
            response.data.forEach((/**
             * @param {?} checklist
             * @return {?}
             */
            function (checklist) {
                checklists.push(new TaskDetailsModel(checklist));
            }));
            return checklists;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets all available reusable forms.
     * @returns Array of form details
     */
    /**
     * Gets all available reusable forms.
     * @return {?} Array of form details
     */
    TaskListService.prototype.getFormList = /**
     * Gets all available reusable forms.
     * @return {?} Array of form details
     */
    function () {
        var _this = this;
        /** @type {?} */
        var opts = {
            'filter': 'myReusableForms',
            // String | filter
            'sort': 'modifiedDesc',
            // String | sort
            'modelType': 2 // Integer | modelType
        };
        return from(this.apiService.getInstance().activiti.modelsApi.getModels(opts))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var forms = [];
            response.data.forEach((/**
             * @param {?} form
             * @return {?}
             */
            function (form) {
                forms.push(new Form(form.id, form.name));
            }));
            return forms;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Attaches a form to a task.
     * @param taskId ID of the target task
     * @param formId ID of the form to add
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Attaches a form to a task.
     * @param {?} taskId ID of the target task
     * @param {?} formId ID of the form to add
     * @return {?} Null response notifying when the operation is complete
     */
    TaskListService.prototype.attachFormToATask = /**
     * Attaches a form to a task.
     * @param {?} taskId ID of the target task
     * @param {?} formId ID of the form to add
     * @return {?} Null response notifying when the operation is complete
     */
    function (taskId, formId) {
        var _this = this;
        return from(this.apiService.taskApi.attachForm(taskId, { 'formId': formId }))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Adds a subtask (ie, a checklist task) to a parent task.
     * @param task The task to add
     * @returns The subtask that was added
     */
    /**
     * Adds a subtask (ie, a checklist task) to a parent task.
     * @param {?} task The task to add
     * @return {?} The subtask that was added
     */
    TaskListService.prototype.addTask = /**
     * Adds a subtask (ie, a checklist task) to a parent task.
     * @param {?} task The task to add
     * @return {?} The subtask that was added
     */
    function (task) {
        var _this = this;
        return from(this.callApiAddTask(task))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return new TaskDetailsModel(response);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Deletes a subtask (ie, a checklist task) from a parent task.
     * @param taskId The task to delete
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Deletes a subtask (ie, a checklist task) from a parent task.
     * @param {?} taskId The task to delete
     * @return {?} Null response notifying when the operation is complete
     */
    TaskListService.prototype.deleteTask = /**
     * Deletes a subtask (ie, a checklist task) from a parent task.
     * @param {?} taskId The task to delete
     * @return {?} Null response notifying when the operation is complete
     */
    function (taskId) {
        var _this = this;
        return from(this.callApiDeleteTask(taskId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Deletes a form from a task.
     * @param taskId Task id related to form
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Deletes a form from a task.
     * @param {?} taskId Task id related to form
     * @return {?} Null response notifying when the operation is complete
     */
    TaskListService.prototype.deleteForm = /**
     * Deletes a form from a task.
     * @param {?} taskId Task id related to form
     * @return {?} Null response notifying when the operation is complete
     */
    function (taskId) {
        var _this = this;
        return from(this.callApiDeleteForm(taskId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gives completed status to a task.
     * @param taskId ID of the target task
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Gives completed status to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Null response notifying when the operation is complete
     */
    TaskListService.prototype.completeTask = /**
     * Gives completed status to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Null response notifying when the operation is complete
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.taskApi.completeTask(taskId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets the total number of the tasks found by a query.
     * @param requestNode Query to search for tasks
     * @returns Number of tasks
     */
    /**
     * Gets the total number of the tasks found by a query.
     * @param {?} requestNode Query to search for tasks
     * @return {?} Number of tasks
     */
    TaskListService.prototype.getTotalTasks = /**
     * Gets the total number of the tasks found by a query.
     * @param {?} requestNode Query to search for tasks
     * @return {?} Number of tasks
     */
    function (requestNode) {
        var _this = this;
        requestNode.size = 0;
        return from(this.callApiTasksFiltered(requestNode))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Creates a new standalone task.
     * @param task Details of the new task
     * @returns Details of the newly created task
     */
    /**
     * Creates a new standalone task.
     * @param {?} task Details of the new task
     * @return {?} Details of the newly created task
     */
    TaskListService.prototype.createNewTask = /**
     * Creates a new standalone task.
     * @param {?} task Details of the new task
     * @return {?} Details of the newly created task
     */
    function (task) {
        var _this = this;
        return from(this.callApiCreateTask(task))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return new TaskDetailsModel(response);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Assigns a task to a user or group.
     * @param taskId The task to assign
     * @param requestNode User or group to assign the task to
     * @returns Details of the assigned task
     */
    /**
     * Assigns a task to a user or group.
     * @param {?} taskId The task to assign
     * @param {?} requestNode User or group to assign the task to
     * @return {?} Details of the assigned task
     */
    TaskListService.prototype.assignTask = /**
     * Assigns a task to a user or group.
     * @param {?} taskId The task to assign
     * @param {?} requestNode User or group to assign the task to
     * @return {?} Details of the assigned task
     */
    function (taskId, requestNode) {
        var _this = this;
        /** @type {?} */
        var assignee = { assignee: requestNode.id };
        return from(this.callApiAssignTask(taskId, assignee))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return new TaskDetailsModel(response);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Assigns a task to a user.
     * @param taskId ID of the task to assign
     * @param userId ID of the user to assign the task to
     * @returns Details of the assigned task
     */
    /**
     * Assigns a task to a user.
     * @param {?} taskId ID of the task to assign
     * @param {?} userId ID of the user to assign the task to
     * @return {?} Details of the assigned task
     */
    TaskListService.prototype.assignTaskByUserId = /**
     * Assigns a task to a user.
     * @param {?} taskId ID of the task to assign
     * @param {?} userId ID of the user to assign the task to
     * @return {?} Details of the assigned task
     */
    function (taskId, userId) {
        var _this = this;
        /** @type {?} */
        var assignee = (/** @type {?} */ ({ assignee: userId }));
        return from(this.callApiAssignTask(taskId, assignee))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return new TaskDetailsModel(response);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Claims a task for the current user.
     * @param taskId ID of the task to claim
     * @returns Details of the claimed task
     */
    /**
     * Claims a task for the current user.
     * @param {?} taskId ID of the task to claim
     * @return {?} Details of the claimed task
     */
    TaskListService.prototype.claimTask = /**
     * Claims a task for the current user.
     * @param {?} taskId ID of the task to claim
     * @return {?} Details of the claimed task
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.taskApi.claimTask(taskId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Un-claims a task for the current user.
     * @param taskId ID of the task to unclaim
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Un-claims a task for the current user.
     * @param {?} taskId ID of the task to unclaim
     * @return {?} Null response notifying when the operation is complete
     */
    TaskListService.prototype.unclaimTask = /**
     * Un-claims a task for the current user.
     * @param {?} taskId ID of the task to unclaim
     * @return {?} Null response notifying when the operation is complete
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.taskApi.unclaimTask(taskId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Updates the details (name, description, due date) for a task.
     * @param taskId ID of the task to update
     * @param updated Data to update the task (as a `TaskUpdateRepresentation` instance).
     * @returns Updated task details
     */
    /**
     * Updates the details (name, description, due date) for a task.
     * @param {?} taskId ID of the task to update
     * @param {?} updated Data to update the task (as a `TaskUpdateRepresentation` instance).
     * @return {?} Updated task details
     */
    TaskListService.prototype.updateTask = /**
     * Updates the details (name, description, due date) for a task.
     * @param {?} taskId ID of the task to update
     * @param {?} updated Data to update the task (as a `TaskUpdateRepresentation` instance).
     * @return {?} Updated task details
     */
    function (taskId, updated) {
        var _this = this;
        return from(this.apiService.taskApi.updateTask(taskId, updated))
            .pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return (/** @type {?} */ (result)); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Fetches the Task Audit information in PDF format.
     * @param taskId ID of the target task
     * @returns Binary PDF data
     */
    /**
     * Fetches the Task Audit information in PDF format.
     * @param {?} taskId ID of the target task
     * @return {?} Binary PDF data
     */
    TaskListService.prototype.fetchTaskAuditPdfById = /**
     * Fetches the Task Audit information in PDF format.
     * @param {?} taskId ID of the target task
     * @return {?} Binary PDF data
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.taskApi.getTaskAuditPdf(taskId))
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return (/** @type {?} */ (data)); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Fetch the Task Audit information in JSON format
     * @param taskId ID of the target task
     * @returns JSON data
     */
    /**
     * Fetch the Task Audit information in JSON format
     * @param {?} taskId ID of the target task
     * @return {?} JSON data
     */
    TaskListService.prototype.fetchTaskAuditJsonById = /**
     * Fetch the Task Audit information in JSON format
     * @param {?} taskId ID of the target task
     * @return {?} JSON data
     */
    function (taskId) {
        var _this = this;
        return from(this.apiService.taskApi.getTaskAuditJson(taskId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    TaskListService.prototype.callApiTasksFiltered = /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    function (requestNode) {
        return this.apiService.taskApi.listTasks(requestNode);
    };
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskListService.prototype.callApiTaskDetails = /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.apiService.taskApi.getTask(taskId);
    };
    /**
     * @private
     * @param {?} task
     * @return {?}
     */
    TaskListService.prototype.callApiAddTask = /**
     * @private
     * @param {?} task
     * @return {?}
     */
    function (task) {
        return this.apiService.taskApi.addSubtask(task.parentTaskId, task);
    };
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskListService.prototype.callApiDeleteTask = /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.apiService.taskApi.deleteTask(taskId);
    };
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskListService.prototype.callApiDeleteForm = /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.apiService.taskApi.removeForm(taskId);
    };
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskListService.prototype.callApiTaskChecklist = /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.apiService.taskApi.getChecklist(taskId);
    };
    /**
     * @private
     * @param {?} task
     * @return {?}
     */
    TaskListService.prototype.callApiCreateTask = /**
     * @private
     * @param {?} task
     * @return {?}
     */
    function (task) {
        return this.apiService.taskApi.createNewTask(task);
    };
    /**
     * @private
     * @param {?} taskId
     * @param {?} requestNode
     * @return {?}
     */
    TaskListService.prototype.callApiAssignTask = /**
     * @private
     * @param {?} taskId
     * @param {?} requestNode
     * @return {?}
     */
    function (taskId, requestNode) {
        return this.apiService.taskApi.assignTask(taskId, requestNode);
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    TaskListService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    TaskListService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskListService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ TaskListService.ngInjectableDef = i0.defineInjectable({ factory: function TaskListService_Factory() { return new TaskListService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService)); }, token: TaskListService, providedIn: "root" });
    return TaskListService;
}());
export { TaskListService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskListService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    TaskListService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,