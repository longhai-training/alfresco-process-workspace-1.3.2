/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, from, throwError } from 'rxjs';
import { FilterRepresentationModel } from '../models/filter.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var TaskFilterService = /** @class */ (function () {
    function TaskFilterService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Creates and returns the default filters for a process app.
     * @param appId ID of the target app
     * @returns Array of default filters just created
     */
    /**
     * Creates and returns the default filters for a process app.
     * @param {?} appId ID of the target app
     * @return {?} Array of default filters just created
     */
    TaskFilterService.prototype.createDefaultFilters = /**
     * Creates and returns the default filters for a process app.
     * @param {?} appId ID of the target app
     * @return {?} Array of default filters just created
     */
    function (appId) {
        var _this = this;
        /** @type {?} */
        var involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);
        /** @type {?} */
        var involvedObservable = this.addFilter(involvedTasksFilter);
        /** @type {?} */
        var myTasksFilter = this.getMyTasksFilterInstance(appId);
        /** @type {?} */
        var myTaskObservable = this.addFilter(myTasksFilter);
        /** @type {?} */
        var queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);
        /** @type {?} */
        var queuedObservable = this.addFilter(queuedTasksFilter);
        /** @type {?} */
        var completedTasksFilter = this.getCompletedTasksFilterInstance(appId);
        /** @type {?} */
        var completeObservable = this.addFilter(completedTasksFilter);
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            forkJoin(involvedObservable, myTaskObservable, queuedObservable, completeObservable).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var filters = [];
                res.forEach((/**
                 * @param {?} filter
                 * @return {?}
                 */
                function (filter) {
                    if (filter.name === involvedTasksFilter.name) {
                        involvedTasksFilter.id = filter.id;
                        filters.push(involvedTasksFilter);
                    }
                    else if (filter.name === myTasksFilter.name) {
                        myTasksFilter.id = filter.id;
                        filters.push(myTasksFilter);
                    }
                    else if (filter.name === queuedTasksFilter.name) {
                        queuedTasksFilter.id = filter.id;
                        filters.push(queuedTasksFilter);
                    }
                    else if (filter.name === completedTasksFilter.name) {
                        completedTasksFilter.id = filter.id;
                        filters.push(completedTasksFilter);
                    }
                }));
                observer.next(filters);
                observer.complete();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.logService.error(err);
            }));
        }));
    };
    /**
     * Gets all task filters for a process app.
     * @param appId Optional ID for a specific app
     * @returns Array of task filter details
     */
    /**
     * Gets all task filters for a process app.
     * @param {?=} appId Optional ID for a specific app
     * @return {?} Array of task filter details
     */
    TaskFilterService.prototype.getTaskListFilters = /**
     * Gets all task filters for a process app.
     * @param {?=} appId Optional ID for a specific app
     * @return {?} Array of task filter details
     */
    function (appId) {
        var _this = this;
        return from(this.callApiTaskFilters(appId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var filters = [];
            response.data.forEach((/**
             * @param {?} filter
             * @return {?}
             */
            function (filter) {
                /** @type {?} */
                var filterModel = new FilterRepresentationModel(filter);
                filters.push(filterModel);
            }));
            return filters;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets a task filter by ID.
     * @param filterId ID of the filter
     * @param appId ID of the app for the filter
     * @returns Details of task filter
     */
    /**
     * Gets a task filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    TaskFilterService.prototype.getTaskFilterById = /**
     * Gets a task filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    function (filterId, appId) {
        var _this = this;
        return from(this.callApiTaskFilters(appId)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response.data.find((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) { return filter.id === filterId; })); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Gets a task filter by name.
     * @param taskName Name of the filter
     * @param appId ID of the app for the filter
     * @returns Details of task filter
     */
    /**
     * Gets a task filter by name.
     * @param {?} taskName Name of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    TaskFilterService.prototype.getTaskFilterByName = /**
     * Gets a task filter by name.
     * @param {?} taskName Name of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    function (taskName, appId) {
        var _this = this;
        return from(this.callApiTaskFilters(appId)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response.data.find((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) { return filter.name === taskName; })); })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Adds a new task filter
     * @param filter The new filter to add
     * @returns Details of task filter just added
     */
    /**
     * Adds a new task filter
     * @param {?} filter The new filter to add
     * @return {?} Details of task filter just added
     */
    TaskFilterService.prototype.addFilter = /**
     * Adds a new task filter
     * @param {?} filter The new filter to add
     * @return {?} Details of task filter just added
     */
    function (filter) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.handleError(err); })));
    };
    /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param appId ID of the target app
     * @returns List of task filters
     */
    /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of task filters
     */
    TaskFilterService.prototype.callApiTaskFilters = /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of task filters
     */
    function (appId) {
        if (appId) {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });
        }
        else {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();
        }
    };
    /**
     * Creates and returns a filter for "Involved" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "Involved" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getInvolvedTasksFilterInstance = /**
     * Creates and returns a filter for "Involved" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'Involved Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-align-left',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }
        });
    };
    /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getMyTasksFilterInstance = /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'My Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-inbox',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }
        });
    };
    /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getQueuedTasksFilterInstance = /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'Queued Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-record',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }
        });
    };
    /**
     * Creates and returns a filter for "Completed" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "Completed" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getCompletedTasksFilterInstance = /**
     * Creates and returns a filter for "Completed" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'Completed Tasks',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }
        });
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    TaskFilterService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    TaskFilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskFilterService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ TaskFilterService.ngInjectableDef = i0.defineInjectable({ factory: function TaskFilterService_Factory() { return new TaskFilterService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService)); }, token: TaskFilterService, providedIn: "root" });
    return TaskFilterService;
}());
export { TaskFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskFilterService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    TaskFilterService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1maWx0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRhc2stbGlzdC9zZXJ2aWNlcy90YXNrLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRWpEO0lBS0ksMkJBQW9CLFVBQThCLEVBQzlCLFVBQXNCO1FBRHRCLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDMUMsQ0FBQztJQUVEOzs7O09BSUc7Ozs7OztJQUNJLGdEQUFvQjs7Ozs7SUFBM0IsVUFBNEIsS0FBYTtRQUF6QyxpQkE0Q0M7O1lBM0NTLG1CQUFtQixHQUFHLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLENBQUM7O1lBQ2hFLGtCQUFrQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7O1lBRXhELGFBQWEsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDOztZQUNwRCxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQzs7WUFFaEQsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FBQzs7WUFDNUQsZ0JBQWdCLEdBQUcsSUFB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WSxpQkFBaUI7Ozs7OztJQUVkLHVDQUFzQzs7Ozs7SUFDdEMsdUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luLCBmcm9tLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2ZpbHRlci5tb2RlbCc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGFza0ZpbHRlclNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyB0aGUgZGVmYXVsdCBmaWx0ZXJzIGZvciBhIHByb2Nlc3MgYXBwLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGRlZmF1bHQgZmlsdGVycyBqdXN0IGNyZWF0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlRGVmYXVsdEZpbHRlcnMoYXBwSWQ6IG51bWJlcik6IE9ic2VydmFibGU8RmlsdGVyUmVwcmVzZW50YXRpb25Nb2RlbFtdPiB7XG4gICAgICAgIGNvbnN0IGludm9sdmVkVGFza3NGaWx0ZXIgPSB0aGlzLmdldEludm9sdmVkVGFza3NGaWx0ZXJJbnN0YW5jZShhcHBJZCk7XG4gICAgICAgIGNvbnN0IGludm9sdmVkT2JzZXJ2YWJsZSA9IHRoaXMuYWRkRmlsdGVyKGludm9sdmVkVGFza3NGaWx0ZXIpO1xuXG4gICAgICAgIGNvbnN0IG15VGFza3NGaWx0ZXIgPSB0aGlzLmdldE15VGFza3NGaWx0ZXJJbnN0YW5jZShhcHBJZCk7XG4gICAgICAgIGNvbnN0IG15VGFza09ic2VydmFibGUgPSB0aGlzLmFkZEZpbHRlcihteVRhc2tzRmlsdGVyKTtcblxuICAgICAgICBjb25zdCBxdWV1ZWRUYXNrc0ZpbHRlciA9IHRoaXMuZ2V0UXVldWVkVGFza3NGaWx0ZXJJbnN0YW5jZShhcHBJZCk7XG4gICAgICAgIGNvbnN0IHF1ZXVlZE9ic2VydmFibGUgPSB0aGlzLmFkZEZpbHRlcihxdWV1ZWRUYXNrc0ZpbHRlcik7XG5cbiAgICAgICAgY29uc3QgY29tcGxldGVkVGFza3NGaWx0ZXIgPSB0aGlzLmdldENvbXBsZXRlZFRhc2tzRmlsdGVySW5zdGFuY2UoYXBwSWQpO1xuICAgICAgICBjb25zdCBjb21wbGV0ZU9ic2VydmFibGUgPSB0aGlzLmFkZEZpbHRlcihjb21wbGV0ZWRUYXNrc0ZpbHRlcik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgZm9ya0pvaW4oXG4gICAgICAgICAgICAgICAgaW52b2x2ZWRPYnNlcnZhYmxlLFxuICAgICAgICAgICAgICAgIG15VGFza09ic2VydmFibGUsXG4gICAgICAgICAgICAgICAgcXVldWVkT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZU9ic2VydmFibGVcbiAgICAgICAgICAgICkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyczogRmlsdGVyUmVwcmVzZW50YXRpb25Nb2RlbFtdID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJlcy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIubmFtZSA9PT0gaW52b2x2ZWRUYXNrc0ZpbHRlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2x2ZWRUYXNrc0ZpbHRlci5pZCA9IGZpbHRlci5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goaW52b2x2ZWRUYXNrc0ZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbHRlci5uYW1lID09PSBteVRhc2tzRmlsdGVyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBteVRhc2tzRmlsdGVyLmlkID0gZmlsdGVyLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaChteVRhc2tzRmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLm5hbWUgPT09IHF1ZXVlZFRhc2tzRmlsdGVyLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZWRUYXNrc0ZpbHRlci5pZCA9IGZpbHRlci5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2gocXVldWVkVGFza3NGaWx0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIubmFtZSA9PT0gY29tcGxldGVkVGFza3NGaWx0ZXIubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZFRhc2tzRmlsdGVyLmlkID0gZmlsdGVyLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaChjb21wbGV0ZWRUYXNrc0ZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGZpbHRlcnMpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCB0YXNrIGZpbHRlcnMgZm9yIGEgcHJvY2VzcyBhcHAuXG4gICAgICogQHBhcmFtIGFwcElkIE9wdGlvbmFsIElEIGZvciBhIHNwZWNpZmljIGFwcFxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIHRhc2sgZmlsdGVyIGRldGFpbHNcbiAgICAgKi9cbiAgICBnZXRUYXNrTGlzdEZpbHRlcnMoYXBwSWQ/OiBudW1iZXIpOiBPYnNlcnZhYmxlPEZpbHRlclJlcHJlc2VudGF0aW9uTW9kZWxbXT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmNhbGxBcGlUYXNrRmlsdGVycyhhcHBJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyczogRmlsdGVyUmVwcmVzZW50YXRpb25Nb2RlbFtdID0gW107XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaCgoZmlsdGVyOiBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJNb2RlbCA9IG5ldyBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsKGZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goZmlsdGVyTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSB0YXNrIGZpbHRlciBieSBJRC5cbiAgICAgKiBAcGFyYW0gZmlsdGVySWQgSUQgb2YgdGhlIGZpbHRlclxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgYXBwIGZvciB0aGUgZmlsdGVyXG4gICAgICogQHJldHVybnMgRGV0YWlscyBvZiB0YXNrIGZpbHRlclxuICAgICAqL1xuICAgIGdldFRhc2tGaWx0ZXJCeUlkKGZpbHRlcklkOiBudW1iZXIsIGFwcElkPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuY2FsbEFwaVRhc2tGaWx0ZXJzKGFwcElkKSkucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVzcG9uc2UpID0+IHJlc3BvbnNlLmRhdGEuZmluZCgoZmlsdGVyKSA9PiBmaWx0ZXIuaWQgPT09IGZpbHRlcklkKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgdGFzayBmaWx0ZXIgYnkgbmFtZS5cbiAgICAgKiBAcGFyYW0gdGFza05hbWUgTmFtZSBvZiB0aGUgZmlsdGVyXG4gICAgICogQHBhcmFtIGFwcElkIElEIG9mIHRoZSBhcHAgZm9yIHRoZSBmaWx0ZXJcbiAgICAgKiBAcmV0dXJucyBEZXRhaWxzIG9mIHRhc2sgZmlsdGVyXG4gICAgICovXG4gICAgZ2V0VGFza0ZpbHRlckJ5TmFtZSh0YXNrTmFtZTogc3RyaW5nLCBhcHBJZD86IG51bWJlcik6IE9ic2VydmFibGU8RmlsdGVyUmVwcmVzZW50YXRpb25Nb2RlbD4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmNhbGxBcGlUYXNrRmlsdGVycyhhcHBJZCkpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKHJlc3BvbnNlKSA9PiByZXNwb25zZS5kYXRhLmZpbmQoKGZpbHRlcikgPT4gZmlsdGVyLm5hbWUgPT09IHRhc2tOYW1lKSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IHRhc2sgZmlsdGVyXG4gICAgICogQHBhcmFtIGZpbHRlciBUaGUgbmV3IGZpbHRlciB0byBhZGRcbiAgICAgKiBAcmV0dXJucyBEZXRhaWxzIG9mIHRhc2sgZmlsdGVyIGp1c3QgYWRkZWRcbiAgICAgKi9cbiAgICBhZGRGaWx0ZXIoZmlsdGVyOiBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsKTogT2JzZXJ2YWJsZTxGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsPiB7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnVzZXJGaWx0ZXJzQXBpLmNyZWF0ZVVzZXJUYXNrRmlsdGVyKGZpbHRlcikpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHJlc3BvbnNlOiBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgYGdldFVzZXJUYXNrRmlsdGVyc2AgZnJvbSB0aGUgQWxmcmVzY28gSlMgQVBJLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgdGFzayBmaWx0ZXJzXG4gICAgICovXG4gICAgY2FsbEFwaVRhc2tGaWx0ZXJzKGFwcElkPzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKGFwcElkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkudXNlckZpbHRlcnNBcGkuZ2V0VXNlclRhc2tGaWx0ZXJzKHthcHBJZDogYXBwSWR9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS51c2VyRmlsdGVyc0FwaS5nZXRVc2VyVGFza0ZpbHRlcnMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBmaWx0ZXIgZm9yIFwiSW52b2x2ZWRcIiB0YXNrIGluc3RhbmNlcy5cbiAgICAgKiBAcGFyYW0gYXBwSWQgSUQgb2YgdGhlIHRhcmdldCBhcHBcbiAgICAgKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCBmaWx0ZXJcbiAgICAgKi9cbiAgICBnZXRJbnZvbHZlZFRhc2tzRmlsdGVySW5zdGFuY2UoYXBwSWQ6IG51bWJlcik6IEZpbHRlclJlcHJlc2VudGF0aW9uTW9kZWwge1xuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclJlcHJlc2VudGF0aW9uTW9kZWwoe1xuICAgICAgICAgICAgJ25hbWUnOiAnSW52b2x2ZWQgVGFza3MnLFxuICAgICAgICAgICAgJ2FwcElkJzogYXBwSWQsXG4gICAgICAgICAgICAncmVjZW50JzogZmFsc2UsXG4gICAgICAgICAgICAnaWNvbic6ICdnbHlwaGljb24tYWxpZ24tbGVmdCcsXG4gICAgICAgICAgICAnZmlsdGVyJzogeydzb3J0JzogJ2NyZWF0ZWQtZGVzYycsICduYW1lJzogJycsICdzdGF0ZSc6ICdvcGVuJywgJ2Fzc2lnbm1lbnQnOiAnaW52b2x2ZWQnfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZmlsdGVyIGZvciBcIk15IFRhc2tzXCIgdGFzayBpbnN0YW5jZXMuXG4gICAgICogQHBhcmFtIGFwcElkIElEIG9mIHRoZSB0YXJnZXQgYXBwXG4gICAgICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgZmlsdGVyXG4gICAgICovXG4gICAgZ2V0TXlUYXNrc0ZpbHRlckluc3RhbmNlKGFwcElkOiBudW1iZXIpOiBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJSZXByZXNlbnRhdGlvbk1vZGVsKHtcbiAgICAgICAgICAgICduYW1lJzogJ015IFRhc2tzJyxcbiAgICAgICAgICAgICdhcHBJZCc6IGFwcElkLFxuICAgICAgICAgICAgJ3JlY2VudCc6IGZhbHNlLFxuICAgICAgICAgICAgJ2ljb24nOiAnZ2x5cGhpY29uLWluYm94JyxcbiAgICAgICAgICAgICdmaWx0ZXInOiB7J3NvcnQnOiAnY3JlYXRlZC1kZXNjJywgJ25hbWUnOiAnJywgJ3N0YXRlJzogJ29wZW4nLCAnYXNzaWdubWVudCc6ICdhc3NpZ25lZSd9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSBmaWx0ZXIgZm9yIFwiUXVldWVkIFRhc2tzXCIgdGFzayBpbnN0YW5jZXMuXG4gICAgICogQHBhcmFtIGFwcElkIElEIG9mIHRoZSB0YXJnZXQgYXBwXG4gICAgICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgZmlsdGVyXG4gICAgICovXG4gICAgZ2V0UXVldWVkVGFza3NGaWx0ZXJJbnN0YW5jZShhcHBJZDogbnVtYmVyKTogRmlsdGVyUmVwcmVzZW50YXRpb25Nb2RlbCB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsdGVyUmVwcmVzZW50YXRpb25Nb2RlbCh7XG4gICAgICAgICAgICAnbmFtZSc6ICdRdWV1ZWQgVGFza3MnLFxuICAgICAgICAgICAgJ2FwcElkJzogYXBwSWQsXG4gICAgICAgICAgICAncmVjZW50JzogZmFsc2UsXG4gICAgICAgICAgICAnaWNvbic6ICdnbHlwaGljb24tcmVjb3JkJyxcbiAgICAgICAgICAgICdmaWx0ZXInOiB7J3NvcnQnOiAnY3JlYXRlZC1kZXNjJywgJ25hbWUnOiAnJywgJ3N0YXRlJzogJ29wZW4nLCAnYXNzaWdubWVudCc6ICdjYW5kaWRhdGUnfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZmlsdGVyIGZvciBcIkNvbXBsZXRlZFwiIHRhc2sgaW5zdGFuY2VzLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiB0aGUgdGFyZ2V0IGFwcFxuICAgICAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGZpbHRlclxuICAgICAqL1xuICAgIGdldENvbXBsZXRlZFRhc2tzRmlsdGVySW5zdGFuY2UoYXBwSWQ6IG51bWJlcik6IEZpbHRlclJlcHJlc2VudGF0aW9uTW9kZWwge1xuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclJlcHJlc2VudGF0aW9uTW9kZWwoe1xuICAgICAgICAgICAgJ25hbWUnOiAnQ29tcGxldGVkIFRhc2tzJyxcbiAgICAgICAgICAgICdhcHBJZCc6IGFwcElkLFxuICAgICAgICAgICAgJ3JlY2VudCc6IHRydWUsXG4gICAgICAgICAgICAnaWNvbic6ICdnbHlwaGljb24tb2stc2lnbicsXG4gICAgICAgICAgICAnZmlsdGVyJzogeydzb3J0JzogJ2NyZWF0ZWQtZGVzYycsICduYW1lJzogJycsICdzdGF0ZSc6ICdjb21wbGV0ZWQnLCAnYXNzaWdubWVudCc6ICdpbnZvbHZlZCd9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSkge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvciB8fCAnU2VydmVyIGVycm9yJyk7XG4gICAgfVxuXG59XG4iXX0=