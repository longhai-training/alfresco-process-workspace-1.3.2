/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';
import { AuthenticationService, CardViewUpdateService, LogService, CommentsComponent } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Observable } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { share } from 'rxjs/operators';
var TaskDetailsComponent = /** @class */ (function () {
    function TaskDetailsComponent(taskListService, authService, peopleProcessService, logService, cardViewUpdateService, dialog) {
        var _this = this;
        this.taskListService = taskListService;
        this.authService = authService;
        this.peopleProcessService = peopleProcessService;
        this.logService = logService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.dialog = dialog;
        /**
         * Toggles debug mode.
         */
        this.debugMode = false;
        /**
         * Automatically renders the next task when the current one is completed.
         */
        this.showNextTask = true;
        /**
         * Toggles task details Header component.
         */
        this.showHeader = true;
        /**
         * Toggles collapsed/expanded state of the Header component.
         */
        this.showHeaderContent = true;
        /**
         * Toggles `Involve People` feature for the Header component.
         */
        this.showInvolvePeople = true;
        /**
         * Toggles `Comments` feature for the Header component.
         */
        this.showComments = true;
        /**
         * Toggles `Checklist` feature for the Header component.
         */
        this.showChecklist = true;
        /**
         * Toggles rendering of the form title.
         */
        this.showFormTitle = false;
        /**
         * Toggles rendering of the `Complete` outcome button.
         */
        this.showFormCompleteButton = true;
        /**
         * Toggles rendering of the `Save` outcome button.
         */
        this.showFormSaveButton = true;
        /**
         * Toggles read-only state of the form. All form widgets render as read-only
         * if enabled.
         */
        this.readOnlyForm = false;
        /**
         * Toggles rendering of the `Refresh` button.
         */
        this.showFormRefreshButton = true;
        /**
         * Field validators for use with the form.
         */
        this.fieldValidators = [];
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        this.formCompleted = new EventEmitter();
        /**
         * Emitted when the form field content is clicked.
         */
        this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        this.formLoaded = new EventEmitter();
        /**
         * Emitted when a checklist task is created.
         */
        this.taskCreated = new EventEmitter();
        /**
         * Emitted when a checklist task is deleted.
         */
        this.taskDeleted = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when any outcome is executed. Default behaviour can be prevented
         * via `event.preventDefault()`.
         */
        this.executeOutcome = new EventEmitter();
        /**
         * Emitted when a task is assigned.
         */
        this.assignTask = new EventEmitter();
        /**
         * Emitted when a task is claimed.
         */
        this.claimedTask = new EventEmitter();
        /**
         * Emitted when a task is unclaimed.
         */
        this.unClaimedTask = new EventEmitter();
        this.taskFormName = null;
        this.taskPeople = [];
        this.showAssignee = false;
        this.showAttachForm = false;
        this.internalReadOnlyForm = false;
        this.peopleSearch = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) { return _this.peopleSearchObserver = observer; }))
            .pipe(share());
        this.authService.getBpmLoggedUser().subscribe((/**
         * @param {?} user
         * @return {?}
         */
        function (user) {
            _this.currentLoggedUser = user;
        }));
    }
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.taskId) {
            this.loadDetails(this.taskId);
        }
        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));
        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskDetailsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var taskId = changes.taskId;
        this.showAssignee = false;
        if (taskId && !taskId.currentValue) {
            this.reset();
        }
        else if (taskId && taskId.currentValue) {
            this.loadDetails(taskId.currentValue);
        }
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isStandaloneTask = /**
     * @return {?}
     */
    function () {
        return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isStandaloneTaskWithForm = /**
     * @return {?}
     */
    function () {
        return this.isStandaloneTask() && this.hasFormKey();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isStandaloneTaskWithoutForm = /**
     * @return {?}
     */
    function () {
        return this.isStandaloneTask() && !this.hasFormKey();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isFormComponentVisible = /**
     * @return {?}
     */
    function () {
        return this.hasFormKey() && !this.isShowAttachForm();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isTaskStandaloneComponentVisible = /**
     * @return {?}
     */
    function () {
        return this.isStandaloneTaskWithoutForm() && !this.isShowAttachForm();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isShowAttachForm = /**
     * @return {?}
     */
    function () {
        return this.showAttachForm;
    };
    /**
     * Reset the task details
     */
    /**
     * Reset the task details
     * @private
     * @return {?}
     */
    TaskDetailsComponent.prototype.reset = /**
     * Reset the task details
     * @private
     * @return {?}
     */
    function () {
        this.taskDetails = null;
    };
    /**
     * Check if the task has a form
     */
    /**
     * Check if the task has a form
     * @return {?}
     */
    TaskDetailsComponent.prototype.hasFormKey = /**
     * Check if the task has a form
     * @return {?}
     */
    function () {
        return (this.taskDetails && (!!this.taskDetails.formKey));
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isTaskActive = /**
     * @return {?}
     */
    function () {
        return this.taskDetails && this.taskDetails.duration === null;
    };
    /**
     * Save a task detail and update it after a successful response
     *
     * @param updateNotification
     */
    /**
     * Save a task detail and update it after a successful response
     *
     * @private
     * @param {?} updateNotification
     * @return {?}
     */
    TaskDetailsComponent.prototype.updateTaskDetails = /**
     * Save a task detail and update it after a successful response
     *
     * @private
     * @param {?} updateNotification
     * @return {?}
     */
    function (updateNotification) {
        var _this = this;
        this.taskListService.updateTask(this.taskId, updateNotification.changed)
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.loadDetails(_this.taskId);
        }));
    };
    /**
     * @private
     * @param {?} clickNotification
     * @return {?}
     */
    TaskDetailsComponent.prototype.clickTaskDetails = /**
     * @private
     * @param {?} clickNotification
     * @return {?}
     */
    function (clickNotification) {
        if (clickNotification.target.key === 'assignee') {
            this.showAssignee = true;
        }
        if (clickNotification.target.key === 'formName') {
            this.showAttachForm = true;
        }
    };
    /**
     * Load the activiti task details
     * @param taskId
     */
    /**
     * Load the activiti task details
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.loadDetails = /**
     * Load the activiti task details
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        this.taskPeople = [];
        this.taskFormName = null;
        if (taskId) {
            this.taskListService.getTaskDetails(taskId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.showAttachForm = false;
                _this.taskDetails = res;
                if (_this.taskDetails.name === 'null') {
                    _this.taskDetails.name = 'No name';
                }
                /** @type {?} */
                var endDate = res.endDate;
                if (endDate && !isNaN(endDate.getTime())) {
                    _this.internalReadOnlyForm = true;
                }
                else {
                    _this.internalReadOnlyForm = _this.readOnlyForm;
                }
                if (_this.taskDetails && _this.taskDetails.involvedPeople) {
                    _this.taskDetails.involvedPeople.forEach((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) {
                        _this.taskPeople.push(new UserProcessModel(user));
                    }));
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isAssigned = /**
     * @return {?}
     */
    function () {
        return !!this.taskDetails.assignee;
    };
    /**
     * @private
     * @return {?}
     */
    TaskDetailsComponent.prototype.hasEmailAddress = /**
     * @private
     * @return {?}
     */
    function () {
        return this.taskDetails.assignee.email ? true : false;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isAssignedToMe = /**
     * @return {?}
     */
    function () {
        return this.isAssigned() && this.hasEmailAddress() ?
            this.isEmailEqual(this.taskDetails.assignee.email, this.currentLoggedUser.email) :
            this.isExternalIdEqual(this.taskDetails.assignee.externalId, this.currentLoggedUser.externalId);
    };
    /**
     * @private
     * @param {?} assigneeMail
     * @param {?} currentLoggedEmail
     * @return {?}
     */
    TaskDetailsComponent.prototype.isEmailEqual = /**
     * @private
     * @param {?} assigneeMail
     * @param {?} currentLoggedEmail
     * @return {?}
     */
    function (assigneeMail, currentLoggedEmail) {
        return assigneeMail.toLocaleLowerCase() === currentLoggedEmail.toLocaleLowerCase();
    };
    /**
     * @private
     * @param {?} assigneeExternalId
     * @param {?} currentUserExternalId
     * @return {?}
     */
    TaskDetailsComponent.prototype.isExternalIdEqual = /**
     * @private
     * @param {?} assigneeExternalId
     * @param {?} currentUserExternalId
     * @return {?}
     */
    function (assigneeExternalId, currentUserExternalId) {
        return assigneeExternalId.toLocaleLowerCase() === currentUserExternalId.toLocaleLowerCase();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isCompleteButtonEnabled = /**
     * @return {?}
     */
    function () {
        return this.isAssignedToMe() || this.canInitiatorComplete();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isCompleteButtonVisible = /**
     * @return {?}
     */
    function () {
        return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.canInitiatorComplete = /**
     * @return {?}
     */
    function () {
        return this.taskDetails.initiatorCanCompleteTask;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isSaveButtonVisible = /**
     * @return {?}
     */
    function () {
        return this.hasSaveButton() && (!this.canInitiatorComplete() || this.isAssignedToMe());
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.hasSaveButton = /**
     * @return {?}
     */
    function () {
        return this.showFormSaveButton;
    };
    /**
     * Retrieve the next open task
     * @param processInstanceId
     * @param processDefinitionId
     */
    /**
     * Retrieve the next open task
     * @private
     * @param {?} processInstanceId
     * @param {?} processDefinitionId
     * @return {?}
     */
    TaskDetailsComponent.prototype.loadNextTask = /**
     * Retrieve the next open task
     * @private
     * @param {?} processInstanceId
     * @param {?} processDefinitionId
     * @return {?}
     */
    function (processInstanceId, processDefinitionId) {
        var _this = this;
        /** @type {?} */
        var requestNode = new TaskQueryRequestRepresentationModel({
            processInstanceId: processInstanceId,
            processDefinitionId: processDefinitionId
        });
        this.taskListService.getTasks(requestNode).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response && response.length > 0) {
                _this.taskDetails = new TaskDetailsModel(response[0]);
            }
            else {
                _this.reset();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.error.emit(error);
        }));
    };
    /**
     * Complete button clicked
     */
    /**
     * Complete button clicked
     * @return {?}
     */
    TaskDetailsComponent.prototype.onComplete = /**
     * Complete button clicked
     * @return {?}
     */
    function () {
        var _this = this;
        this.taskListService.completeTask(this.taskId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.onFormCompleted(null); }));
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onShowAttachForm = /**
     * @return {?}
     */
    function () {
        this.showAttachForm = true;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onCancelAttachForm = /**
     * @return {?}
     */
    function () {
        this.showAttachForm = false;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onCompleteAttachForm = /**
     * @return {?}
     */
    function () {
        this.showAttachForm = false;
        this.loadDetails(this.taskId);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormContentClick = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        this.formContentClicked.emit(content);
    };
    /**
     * @param {?} form
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormSaved = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formSaved.emit(form);
    };
    /**
     * @param {?} form
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormCompleted = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formCompleted.emit(form);
        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {
            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
        }
    };
    /**
     * @param {?} form
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormLoaded = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.taskFormName = (form && form.name ? form.name : null);
        this.formLoaded.emit(form);
    };
    /**
     * @param {?} task
     * @return {?}
     */
    TaskDetailsComponent.prototype.onChecklistTaskCreated = /**
     * @param {?} task
     * @return {?}
     */
    function (task) {
        this.taskCreated.emit(task);
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.onChecklistTaskDeleted = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        this.taskDeleted.emit(taskId);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });
        this.error.emit(error);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormExecuteOutcome = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.executeOutcome.emit(event);
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.closeErrorDialog = /**
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.onClaimAction = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        this.claimedTask.emit(taskId);
        this.loadDetails(taskId);
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.onUnclaimAction = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        this.unClaimedTask.emit(taskId);
        this.loadDetails(taskId);
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isCompletedTask = /**
     * @return {?}
     */
    function () {
        return this.taskDetails && this.taskDetails.endDate ? true : undefined;
    };
    /**
     * @param {?} searchedWord
     * @return {?}
     */
    TaskDetailsComponent.prototype.searchUser = /**
     * @param {?} searchedWord
     * @return {?}
     */
    function (searchedWord) {
        var _this = this;
        this.peopleProcessService.getWorkflowUsers(null, searchedWord)
            .subscribe((/**
         * @param {?} users
         * @return {?}
         */
        function (users) {
            users = users.filter((/**
             * @param {?} user
             * @return {?}
             */
            function (user) { return user.id !== _this.taskDetails.assignee.id; }));
            _this.peopleSearchObserver.next(users);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.logService.error('Could not load users'); }));
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onCloseSearch = /**
     * @return {?}
     */
    function () {
        this.showAssignee = false;
    };
    /**
     * @param {?} selectedUser
     * @return {?}
     */
    TaskDetailsComponent.prototype.assignTaskToUser = /**
     * @param {?} selectedUser
     * @return {?}
     */
    function (selectedUser) {
        var _this = this;
        this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.logService.info('Task Assigned to ' + selectedUser.email);
            _this.assignTask.emit();
        }));
        this.showAssignee = false;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.getTaskHeaderViewClass = /**
     * @return {?}
     */
    function () {
        if (this.showAssignee) {
            return 'assign-edit-view';
        }
        else {
            return 'default-view';
        }
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isReadOnlyComment = /**
     * @return {?}
     */
    function () {
        return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);
    };
    TaskDetailsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-task-details',
                    template: "<div *ngIf=\"!taskDetails\" data-automation-id=\"adf-tasks-details--empty\">\n    <ng-template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"\n                 [ngForTemplate]=\"noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </ng-template>\n    <div *ngIf=\"!noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </div>\n</div>\n<div *ngIf=\"taskDetails\" class=\"adf-task-details\">\n\n    <div *ngIf=\"showHeader\" class=\"adf-task-details-header\">\n        <h2 class=\"adf-activiti-task-details__header\">\n            <span>{{taskDetails.name || 'No name'}}</span>\n        </h2>\n    </div>\n\n    <div class=\"adf-task-details-core\"\n        fxLayout=\"column\"\n        fxLayoutGap=\"8px\"\n        fxLayout.lt-lg=\"column\">\n\n        <div class=\"adf-task-details-core-form\">\n            <div *ngIf=\"isAssigned()\">\n                <adf-form *ngIf=\"isFormComponentVisible()\" #activitiForm\n                          [taskId]=\"taskDetails.id\"\n                          [showTitle]=\"showFormTitle\"\n                          [showRefreshButton]=\"showFormRefreshButton\"\n                          [showCompleteButton]=\"showFormCompleteButton\"\n                          [disableCompleteButton]=\"!isCompleteButtonEnabled()\"\n                          [showSaveButton]=\"isSaveButtonVisible()\"\n                          [readOnly]=\"internalReadOnlyForm\"\n                          [fieldValidators]=\"fieldValidators\"\n                          (formSaved)='onFormSaved($event)'\n                          (formCompleted)='onFormCompleted($event)'\n                          (formContentClicked)='onFormContentClick($event)'\n                          (formLoaded)='onFormLoaded($event)'\n                          (error)='onFormError($event)'\n                          (executeOutcome)='onFormExecuteOutcome($event)'>\n                </adf-form>\n                <adf-task-standalone *ngIf=\"isTaskStandaloneComponentVisible()\"\n                                     [taskName]=\"taskDetails.name\"\n                                     [taskId]=\"taskDetails.id\"\n                                     [isCompleted]=\"isCompletedTask()\"\n                                     [hasCompletePermission]=\"isCompleteButtonEnabled()\"\n                                     [hideCancelButton]=\"true\"\n                                     (complete)=\"onComplete()\"\n                                     (showAttachForm)=\"onShowAttachForm()\">\n                </adf-task-standalone>\n\n                <mat-card class=\"adf-message-card\" *ngIf=\"!isTaskStandaloneComponentVisible() && !isCompletedTask() && !isFormComponentVisible()\" >\n                    <mat-card-content>\n                        <div class=\"adf-no-form-message-container\">\n                            <div class=\"adf-no-form-message-list\">\n                                <div *ngIf=\"!isCompletedTask()\" class=\"adf-no-form-message\">\n                                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-content>\n\n                    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n                        <div>\n                            <button mat-button id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onComplete()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n                        </div>\n                    </mat-card-actions>\n\n                </mat-card>\n\n                <adf-attach-form *ngIf=\"isShowAttachForm()\"\n                                 [taskId]=\"taskDetails.id\"\n                                 [formKey]=\"taskDetails.formKey\"\n                                 (cancelAttachForm)=\"onCancelAttachForm()\"\n                                 (success)=\"onCompleteAttachForm()\">\n                </adf-attach-form>\n            </div>\n            <div *ngIf=\"!isAssigned()\" id=\"claim-message-id\">\n                {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM' | translate }}\n            </div>\n        </div>\n        <div class=\"adf-task-details-core-sidebar\">\n            <adf-info-drawer *ngIf=\"showHeaderContent\" title=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE' | translate }}\" id=\"adf-task-details-core-sidebar-drawer\" class=\"adf-task-details-core-sidebar-drawer\">\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE' | translate }}\">\n                    <div class=\"adf-assignment-container\" *ngIf=\"showAssignee\">\n                        <adf-people-search\n                            (searchPeople)=\"searchUser($event)\"\n                            (success)=\"assignTaskToUser($event)\"\n                            (closeSearch)=\"onCloseSearch()\"\n                            [results]=\"peopleSearch\">\n                            <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                            <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                        </adf-people-search>\n                    </div>\n                    <adf-task-header\n                        [class]=\"getTaskHeaderViewClass()\"\n                        [taskDetails]=\"taskDetails\"\n                        [formName]=\"taskFormName\"\n                        (claim)=\"onClaimAction($event)\"\n                        (unclaim)=\"onUnclaimAction($event)\">\n                    </adf-task-header>\n                    <adf-people *ngIf=\"showInvolvePeople\" #people\n                                [people]=\"taskPeople\"\n                                [readOnly]=\"internalReadOnlyForm\"\n                                [taskId]=\"taskDetails.id\">\n                    </adf-people>\n                </adf-info-drawer-tab>\n\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE' | translate }}\">\n                    <mat-card *ngIf=\"showComments\">\n                        <mat-card-content>\n                            <adf-comments #activitiComments\n                                          [readOnly]=\"isReadOnlyComment()\"\n                                          [taskId]=\"taskDetails.id\">\n                            </adf-comments>\n                        </mat-card-content>\n                    </mat-card>\n                </adf-info-drawer-tab>\n\n            </adf-info-drawer>\n\n            <div *ngIf=\"showHeaderContent\" class=\"adf-task-details-core-sidebar-checklist\">\n                <div *ngIf=\"showChecklist\">\n                    <adf-checklist #activitiChecklist\n                                   [readOnly]=\"internalReadOnlyForm\"\n                                   [taskId]=\"taskDetails.id\"\n                                   [assignee]=\"taskDetails?.assignee?.id\"\n                                   (checklistTaskCreated)=\"onChecklistTaskCreated($event)\"\n                                   (checklistTaskDeleted)=\"onChecklistTaskDeleted($event)\">\n                    </adf-checklist>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #errorDialog>\n        <h3 matDialogTitle>{{'ADF_TASK_LIST.DETAILS.ERROR.TITLE'|translate}}</h3>\n        <mat-dialog-content>\n            <p>{{'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION'|translate}}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <button mat-button type=\"button\" (click)=\"closeErrorDialog()\">{{'ADF_TASK_LIST.DETAILS.ERROR.CLOSE'|translate}}\n            </button>\n        </mat-dialog-actions>\n    </ng-template>\n\n</div>\n",
                    styles: [":host{width:100%}.adf-error-dialog h3{margin:16px 0}.adf-activiti-task-details__header{align-self:flex-end;display:flex;font-size:24px;font-weight:300;line-height:normal;overflow:hidden;margin:8px 0 16px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-activiti-task-details__action-button{text-transform:uppercase}.adf-assignment-container{padding:10px 20px;width:auto}adf-task-header.adf-assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=header-assignee]{display:none}.adf-task-details-header{display:flex;justify-content:space-between}.adf-task-details-header-toggle{position:relative;top:10px;margin-right:2px;height:23px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-task-details-toggle{position:relative}.adf-task-details-core{display:flex;justify-content:space-between}@media screen and (max-width:1279px){.adf-task-details-core-sidebar-drawer{margin-left:0}}.adf-task-details-core-sidebar-checklist{margin-top:30px;padding-left:20px;padding-right:20px}.adf-task-details-core-form{flex-grow:1}.adf-task-details-core-form ::ng-deep .adf-form-debug-container{display:flex;flex-direction:column;padding:20px 0}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle{margin-left:auto}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle+div{background-color:#000;padding:20px;clear:both;margin-top:30px;color:#fff}.adf-task-details-core-form ::ng-deep .mat-tab-label{flex-grow:1}"]
                }] }
    ];
    /** @nocollapse */
    TaskDetailsComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: AuthenticationService },
        { type: PeopleProcessService },
        { type: LogService },
        { type: CardViewUpdateService },
        { type: MatDialog }
    ]; };
    TaskDetailsComponent.propDecorators = {
        activitiComments: [{ type: ViewChild, args: ['activitiComments',] }],
        activitiChecklist: [{ type: ViewChild, args: ['activitiChecklist',] }],
        errorDialog: [{ type: ViewChild, args: ['errorDialog',] }],
        debugMode: [{ type: Input }],
        taskId: [{ type: Input }],
        showNextTask: [{ type: Input }],
        showHeader: [{ type: Input }],
        showHeaderContent: [{ type: Input }],
        showInvolvePeople: [{ type: Input }],
        showComments: [{ type: Input }],
        showChecklist: [{ type: Input }],
        showFormTitle: [{ type: Input }],
        showFormCompleteButton: [{ type: Input }],
        showFormSaveButton: [{ type: Input }],
        readOnlyForm: [{ type: Input }],
        showFormRefreshButton: [{ type: Input }],
        fieldValidators: [{ type: Input }],
        formSaved: [{ type: Output }],
        formCompleted: [{ type: Output }],
        formContentClicked: [{ type: Output }],
        formLoaded: [{ type: Output }],
        taskCreated: [{ type: Output }],
        taskDeleted: [{ type: Output }],
        error: [{ type: Output }],
        executeOutcome: [{ type: Output }],
        assignTask: [{ type: Output }],
        claimedTask: [{ type: Output }],
        unClaimedTask: [{ type: Output }]
    };
    return TaskDetailsComponent;
}());
export { TaskDetailsComponent };
if (false) {
    /** @type {?} */
    TaskDetailsComponent.prototype.activitiComments;
    /** @type {?} */
    TaskDetailsComponent.prototype.activitiChecklist;
    /** @type {?} */
    TaskDetailsComponent.prototype.errorDialog;
    /**
     * Toggles debug mode.
     * @type {?}
     */
    TaskDetailsComponent.prototype.debugMode;
    /**
     * (**required**) The id of the task whose details we are asking for.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskId;
    /**
     * Automatically renders the next task when the current one is completed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showNextTask;
    /**
     * Toggles task details Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showHeader;
    /**
     * Toggles collapsed/expanded state of the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showHeaderContent;
    /**
     * Toggles `Involve People` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showInvolvePeople;
    /**
     * Toggles `Comments` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showComments;
    /**
     * Toggles `Checklist` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showChecklist;
    /**
     * Toggles rendering of the form title.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormTitle;
    /**
     * Toggles rendering of the `Complete` outcome button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormCompleteButton;
    /**
     * Toggles rendering of the `Save` outcome button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormSaveButton;
    /**
     * Toggles read-only state of the form. All form widgets render as read-only
     * if enabled.
     * @type {?}
     */
    TaskDetailsComponent.prototype.readOnlyForm;
    /**
     * Toggles rendering of the `Refresh` button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormRefreshButton;
    /**
     * Field validators for use with the form.
     * @type {?}
     */
    TaskDetailsComponent.prototype.fieldValidators;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formCompleted;
    /**
     * Emitted when the form field content is clicked.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formLoaded;
    /**
     * Emitted when a checklist task is created.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskCreated;
    /**
     * Emitted when a checklist task is deleted.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskDeleted;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskDetailsComponent.prototype.error;
    /**
     * Emitted when any outcome is executed. Default behaviour can be prevented
     * via `event.preventDefault()`.
     * @type {?}
     */
    TaskDetailsComponent.prototype.executeOutcome;
    /**
     * Emitted when a task is assigned.
     * @type {?}
     */
    TaskDetailsComponent.prototype.assignTask;
    /**
     * Emitted when a task is claimed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.claimedTask;
    /**
     * Emitted when a task is unclaimed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.unClaimedTask;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskDetails;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskFormName;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskPeople;
    /** @type {?} */
    TaskDetailsComponent.prototype.noTaskDetailsTemplateComponent;
    /** @type {?} */
    TaskDetailsComponent.prototype.showAssignee;
    /** @type {?} */
    TaskDetailsComponent.prototype.showAttachForm;
    /** @type {?} */
    TaskDetailsComponent.prototype.internalReadOnlyForm;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.peopleSearchObserver;
    /** @type {?} */
    TaskDetailsComponent.prototype.errorDialogRef;
    /** @type {?} */
    TaskDetailsComponent.prototype.peopleSearch;
    /** @type {?} */
    TaskDetailsComponent.prototype.currentLoggedUser;
    /** @type {?} */
    TaskDetailsComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1kZXRhaWxzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRhc2stbGlzdC9jb21wb25lbnRzL3Rhc2stZGV0YWlscy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUUsT0FBTyxFQUNILHFCQUFxQixFQUNyQixxQkFBcUIsRUFFckIsVUFBVSxFQUVWLGlCQUFpQixFQUNwQixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFDSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBRU4sV0FBVyxFQUNYLFNBQVMsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLG1CQUFtQixDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxNQUFNLENBQUM7QUFFNUMsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QztJQTJJSSw4QkFBb0IsZUFBZ0MsRUFDaEMsV0FBa0MsRUFDbEMsb0JBQTBDLEVBQzFDLFVBQXNCLEVBQ3RCLHFCQUE0QyxFQUM1QyxNQUFpQjtRQUxyQyxpQkFZQztRQVptQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2xDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsZUFBVSxHQUFWLFVB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OUIseUNBQzJCOzs7OztJQUczQixzQ0FDZTs7Ozs7SUFHZiw0Q0FDNkI7Ozs7O0lBRzdCLDBDQUMyQjs7Ozs7SUFHM0IsaURBQ2tDOzs7OztJQUdsQyxpREFDa0M7Ozs7O0lBR2xDLDRDQUM2Qjs7Ozs7SUFHN0IsNkNBQzhCOzs7OztJQUc5Qiw2Q0FDK0I7Ozs7O0lBRy9CLHNEQUN1Qzs7Ozs7SUFHdkMsa0RBQ21DOzs7Ozs7SUFLbkMsNENBQzhCOzs7OztJQUc5QixxREFDc0M7Ozs7O0lBR3RDLCtDQUMyQzs7Ozs7SUFHM0MseUNBQ21FOzs7OztJQUduRSw2Q0FDdUU7Ozs7O0lBR3ZFLGtEQUMwRjs7Ozs7SUFHMUYsMENBQ29FOzs7OztJQUdwRSwyQ0FDbUY7Ozs7O0lBR25GLDJDQUMrRDs7Ozs7SUFHL0QscUNBQ21EOzs7Ozs7SUFLbkQsOENBQ3NGOzs7OztJQUd0RiwwQ0FDMEQ7Ozs7O0lBRzFELDJDQUMrRDs7Ozs7SUFHL0QsNkNBQ2lFOztJQUVqRSwyQ0FBOEI7O0lBQzlCLDRDQUE0Qjs7SUFFNUIsMENBQW9DOztJQUVwQyw4REFBaUQ7O0lBRWpELDRDQUE4Qjs7SUFDOUIsOENBQWdDOztJQUNoQyxvREFBc0M7Ozs7O0lBRXRDLG9EQUEyRDs7SUFDM0QsOENBQXNEOztJQUV0RCw0Q0FBNkM7O0lBRTdDLGlEQUFzQzs7SUFDdEMsb0NBQVU7Ozs7O0lBRUUsK0NBQXdDOzs7OztJQUN4QywyQ0FBMEM7Ozs7O0lBQzFDLG9EQUFrRDs7Ozs7SUFDbEQsMENBQThCOzs7OztJQUM5QixxREFBb0Q7Ozs7O0lBQ3BELHNDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBlb3BsZVByb2Nlc3NTZXJ2aWNlLCBVc2VyUHJvY2Vzc01vZGVsIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7XG4gICAgQXV0aGVudGljYXRpb25TZXJ2aWNlLFxuICAgIENhcmRWaWV3VXBkYXRlU2VydmljZSxcbiAgICBDbGlja05vdGlmaWNhdGlvbixcbiAgICBMb2dTZXJ2aWNlLFxuICAgIFVwZGF0ZU5vdGlmaWNhdGlvbixcbiAgICBDb21tZW50c0NvbXBvbmVudFxufSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkluaXQsXG4gICAgT3V0cHV0LFxuICAgIFNpbXBsZUNoYW5nZXMsXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0RGlhbG9nLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29udGVudExpbmtNb2RlbCwgRm9ybUZpZWxkVmFsaWRhdG9yLCBGb3JtTW9kZWwsIEZvcm1PdXRjb21lRXZlbnQgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgVGFza1F1ZXJ5UmVxdWVzdFJlcHJlc2VudGF0aW9uTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZmlsdGVyLm1vZGVsJztcbmltcG9ydCB7IFRhc2tEZXRhaWxzTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvdGFzay1kZXRhaWxzLm1vZGVsJztcbmltcG9ydCB7IFRhc2tMaXN0U2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvdGFza2xpc3Quc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyUmVwcmVzZW50YXRpb24gfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IHNoYXJlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi10YXNrLWRldGFpbHMnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90YXNrLWRldGFpbHMuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Rhc2stZGV0YWlscy5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRhc2tEZXRhaWxzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gICAgQFZpZXdDaGlsZCgnYWN0aXZpdGlDb21tZW50cycpXG4gICAgYWN0aXZpdGlDb21tZW50czogQ29tbWVudHNDb21wb25lbnQ7XG5cbiAgICBAVmlld0NoaWxkKCdhY3Rpdml0aUNoZWNrbGlzdCcpXG4gICAgYWN0aXZpdGlDaGVja2xpc3Q6IGFueTtcblxuICAgIEBWaWV3Q2hpbGQoJ2Vycm9yRGlhbG9nJylcbiAgICBlcnJvckRpYWxvZzogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKiBUb2dnbGVzIGRlYnVnIG1vZGUuICovXG4gICAgQElucHV0KClcbiAgICBkZWJ1Z01vZGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiAoKipyZXF1aXJlZCoqKSBUaGUgaWQgb2YgdGhlIHRhc2sgd2hvc2UgZGV0YWlscyB3ZSBhcmUgYXNraW5nIGZvci4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhc2tJZDogc3RyaW5nO1xuXG4gICAgLyoqIEF1dG9tYXRpY2FsbHkgcmVuZGVycyB0aGUgbmV4dCB0YXNrIHdoZW4gdGhlIGN1cnJlbnQgb25lIGlzIGNvbXBsZXRlZC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dOZXh0VGFzazogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogVG9nZ2xlcyB0YXNrIGRldGFpbHMgSGVhZGVyIGNvbXBvbmVudC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dIZWFkZXI6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZXMgY29sbGFwc2VkL2V4cGFuZGVkIHN0YXRlIG9mIHRoZSBIZWFkZXIgY29tcG9uZW50LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0hlYWRlckNvbnRlbnQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZXMgYEludm9sdmUgUGVvcGxlYCBmZWF0dXJlIGZvciB0aGUgSGVhZGVyIGNvbXBvbmVudC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dJbnZvbHZlUGVvcGxlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBUb2dnbGVzIGBDb21tZW50c2AgZmVhdHVyZSBmb3IgdGhlIEhlYWRlciBjb21wb25lbnQuICovXG4gICAgQElucHV0KClcbiAgICBzaG93Q29tbWVudHM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZXMgYENoZWNrbGlzdGAgZmVhdHVyZSBmb3IgdGhlIEhlYWRlciBjb21wb25lbnQuICovXG4gICAgQElucHV0KClcbiAgICBzaG93Q2hlY2tsaXN0OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBUb2dnbGVzIHJlbmRlcmluZyBvZiB0aGUgZm9ybSB0aXRsZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dGb3JtVGl0bGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBUb2dnbGVzIHJlbmRlcmluZyBvZiB0aGUgYENvbXBsZXRlYCBvdXRjb21lIGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dGb3JtQ29tcGxldGVCdXR0b246IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZXMgcmVuZGVyaW5nIG9mIHRoZSBgU2F2ZWAgb3V0Y29tZSBidXR0b24uICovXG4gICAgQElucHV0KClcbiAgICBzaG93Rm9ybVNhdmVCdXR0b246IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZXMgcmVhZC1vbmx5IHN0YXRlIG9mIHRoZSBmb3JtLiBBbGwgZm9ybSB3aWRnZXRzIHJlbmRlciBhcyByZWFkLW9ubHlcbiAgICAgKiBpZiBlbmFibGVkLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmVhZE9ubHlGb3JtOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlcyByZW5kZXJpbmcgb2YgdGhlIGBSZWZyZXNoYCBidXR0b24uICovXG4gICAgQElucHV0KClcbiAgICBzaG93Rm9ybVJlZnJlc2hCdXR0b246IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEZpZWxkIHZhbGlkYXRvcnMgZm9yIHVzZSB3aXRoIHRoZSBmb3JtLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZmllbGRWYWxpZGF0b3JzOiBGb3JtRmllbGRWYWxpZGF0b3JbXSA9IFtdO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWQgd2l0aCB0aGUgYFNhdmVgIG9yIGN1c3RvbSBvdXRjb21lcy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBmb3JtU2F2ZWQ6IEV2ZW50RW1pdHRlcjxGb3JtTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxGb3JtTW9kZWw+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZCB3aXRoIHRoZSBgQ29tcGxldGVgIG91dGNvbWUuICovXG4gICAgQE91dHB1dCgpXG4gICAgZm9ybUNvbXBsZXRlZDogRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvcm0gZmllbGQgY29udGVudCBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1Db250ZW50Q2xpY2tlZDogRXZlbnRFbWl0dGVyPENvbnRlbnRMaW5rTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb250ZW50TGlua01vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBpcyBsb2FkZWQgb3IgcmVsb2FkZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgZm9ybUxvYWRlZDogRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPEZvcm1Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSBjaGVja2xpc3QgdGFzayBpcyBjcmVhdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHRhc2tDcmVhdGVkOiBFdmVudEVtaXR0ZXI8VGFza0RldGFpbHNNb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFRhc2tEZXRhaWxzTW9kZWw+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgY2hlY2tsaXN0IHRhc2sgaXMgZGVsZXRlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICB0YXNrRGVsZXRlZDogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbnkgb3V0Y29tZSBpcyBleGVjdXRlZC4gRGVmYXVsdCBiZWhhdmlvdXIgY2FuIGJlIHByZXZlbnRlZFxuICAgICAqIHZpYSBgZXZlbnQucHJldmVudERlZmF1bHQoKWAuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgZXhlY3V0ZU91dGNvbWU6IEV2ZW50RW1pdHRlcjxGb3JtT3V0Y29tZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8Rm9ybU91dGNvbWVFdmVudD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB0YXNrIGlzIGFzc2lnbmVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGFzc2lnblRhc2s6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB0YXNrIGlzIGNsYWltZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2xhaW1lZFRhc2s6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgdGFzayBpcyB1bmNsYWltZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgdW5DbGFpbWVkVGFzazogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAgIHRhc2tEZXRhaWxzOiBUYXNrRGV0YWlsc01vZGVsO1xuICAgIHRhc2tGb3JtTmFtZTogc3RyaW5nID0gbnVsbDtcblxuICAgIHRhc2tQZW9wbGU6IFVzZXJQcm9jZXNzTW9kZWxbXSA9IFtdO1xuXG4gICAgbm9UYXNrRGV0YWlsc1RlbXBsYXRlQ29tcG9uZW50OiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgc2hvd0Fzc2lnbmVlOiBib29sZWFuID0gZmFsc2U7XG4gICAgc2hvd0F0dGFjaEZvcm06IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBpbnRlcm5hbFJlYWRPbmx5Rm9ybTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBwZW9wbGVTZWFyY2hPYnNlcnZlcjogT2JzZXJ2ZXI8VXNlclByb2Nlc3NNb2RlbFtdPjtcbiAgICBwdWJsaWMgZXJyb3JEaWFsb2dSZWY6IE1hdERpYWxvZ1JlZjxUZW1wbGF0ZVJlZjxhbnk+PjtcblxuICAgIHBlb3BsZVNlYXJjaDogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+O1xuXG4gICAgY3VycmVudExvZ2dlZFVzZXI6IFVzZXJSZXByZXNlbnRhdGlvbjtcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhc2tMaXN0U2VydmljZTogVGFza0xpc3RTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHBlb3BsZVByb2Nlc3NTZXJ2aWNlOiBQZW9wbGVQcm9jZXNzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjYXJkVmlld1VwZGF0ZVNlcnZpY2U6IENhcmRWaWV3VXBkYXRlU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nKSB7XG5cbiAgICAgICAgdGhpcy5wZW9wbGVTZWFyY2ggPSBuZXcgT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+KChvYnNlcnZlcikgPT4gdGhpcy5wZW9wbGVTZWFyY2hPYnNlcnZlciA9IG9ic2VydmVyKVxuICAgICAgICAgICAgLnBpcGUoc2hhcmUoKSk7XG4gICAgICAgIHRoaXMuYXV0aFNlcnZpY2UuZ2V0QnBtTG9nZ2VkVXNlcigpLnN1YnNjcmliZSgodXNlcjogVXNlclJlcHJlc2VudGF0aW9uKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2dnZWRVc2VyID0gdXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRhc2tJZCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkRGV0YWlscyh0aGlzLnRhc2tJZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhcmRWaWV3VXBkYXRlU2VydmljZS5pdGVtVXBkYXRlZCQuc3Vic2NyaWJlKHRoaXMudXBkYXRlVGFza0RldGFpbHMuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FyZFZpZXdVcGRhdGVTZXJ2aWNlLml0ZW1DbGlja2VkJC5zdWJzY3JpYmUodGhpcy5jbGlja1Rhc2tEZXRhaWxzLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGFza0lkID0gY2hhbmdlcy50YXNrSWQ7XG4gICAgICAgIHRoaXMuc2hvd0Fzc2lnbmVlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRhc2tJZCAmJiAhdGFza0lkLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhc2tJZCAmJiB0YXNrSWQuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWREZXRhaWxzKHRhc2tJZC5jdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNTdGFuZGFsb25lVGFzaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEodGhpcy50YXNrRGV0YWlscyAmJiAoISF0aGlzLnRhc2tEZXRhaWxzLnByb2Nlc3NEZWZpbml0aW9uSWQpKTtcbiAgICB9XG5cbiAgICBpc1N0YW5kYWxvbmVUYXNrV2l0aEZvcm0oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU3RhbmRhbG9uZVRhc2soKSAmJiB0aGlzLmhhc0Zvcm1LZXkoKTtcbiAgICB9XG5cbiAgICBpc1N0YW5kYWxvbmVUYXNrV2l0aG91dEZvcm0oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU3RhbmRhbG9uZVRhc2soKSAmJiAhdGhpcy5oYXNGb3JtS2V5KCk7XG4gICAgfVxuXG4gICAgaXNGb3JtQ29tcG9uZW50VmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzRm9ybUtleSgpICYmICF0aGlzLmlzU2hvd0F0dGFjaEZvcm0oKTtcbiAgICB9XG5cbiAgICBpc1Rhc2tTdGFuZGFsb25lQ29tcG9uZW50VmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTdGFuZGFsb25lVGFza1dpdGhvdXRGb3JtKCkgJiYgIXRoaXMuaXNTaG93QXR0YWNoRm9ybSgpO1xuICAgIH1cblxuICAgIGlzU2hvd0F0dGFjaEZvcm0oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dBdHRhY2hGb3JtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSB0YXNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnRhc2tEZXRhaWxzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdGFzayBoYXMgYSBmb3JtXG4gICAgICovXG4gICAgaGFzRm9ybUtleSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnRhc2tEZXRhaWxzICYmICghIXRoaXMudGFza0RldGFpbHMuZm9ybUtleSkpO1xuICAgIH1cblxuICAgIGlzVGFza0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0RldGFpbHMgJiYgdGhpcy50YXNrRGV0YWlscy5kdXJhdGlvbiA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYXZlIGEgdGFzayBkZXRhaWwgYW5kIHVwZGF0ZSBpdCBhZnRlciBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cGRhdGVOb3RpZmljYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZVRhc2tEZXRhaWxzKHVwZGF0ZU5vdGlmaWNhdGlvbjogVXBkYXRlTm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMudGFza0xpc3RTZXJ2aWNlLnVwZGF0ZVRhc2sodGhpcy50YXNrSWQsIHVwZGF0ZU5vdGlmaWNhdGlvbi5jaGFuZ2VkKVxuICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZERldGFpbHModGhpcy50YXNrSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGlja1Rhc2tEZXRhaWxzKGNsaWNrTm90aWZpY2F0aW9uOiBDbGlja05vdGlmaWNhdGlvbikge1xuICAgICAgICBpZiAoY2xpY2tOb3RpZmljYXRpb24udGFyZ2V0LmtleSA9PT0gJ2Fzc2lnbmVlJykge1xuICAgICAgICAgICAgdGhpcy5zaG93QXNzaWduZWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGlja05vdGlmaWNhdGlvbi50YXJnZXQua2V5ID09PSAnZm9ybU5hbWUnKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dBdHRhY2hGb3JtID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGFjdGl2aXRpIHRhc2sgZGV0YWlsc1xuICAgICAqIEBwYXJhbSB0YXNrSWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGxvYWREZXRhaWxzKHRhc2tJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGFza1Blb3BsZSA9IFtdO1xuICAgICAgICB0aGlzLnRhc2tGb3JtTmFtZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRhc2tJZCkge1xuICAgICAgICAgICAgdGhpcy50YXNrTGlzdFNlcnZpY2UuZ2V0VGFza0RldGFpbHModGFza0lkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlczogVGFza0RldGFpbHNNb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dBdHRhY2hGb3JtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFza0RldGFpbHMgPSByZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFza0RldGFpbHMubmFtZSA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2tEZXRhaWxzLm5hbWUgPSAnTm8gbmFtZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmREYXRlOiBhbnkgPSByZXMuZW5kRGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZERhdGUgJiYgIWlzTmFOKGVuZERhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbFJlYWRPbmx5Rm9ybSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsUmVhZE9ubHlGb3JtID0gdGhpcy5yZWFkT25seUZvcm07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50YXNrRGV0YWlscyAmJiB0aGlzLnRhc2tEZXRhaWxzLmludm9sdmVkUGVvcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2tEZXRhaWxzLmludm9sdmVkUGVvcGxlLmZvckVhY2goKHVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2tQZW9wbGUucHVzaChuZXcgVXNlclByb2Nlc3NNb2RlbCh1c2VyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNBc3NpZ25lZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy50YXNrRGV0YWlscy5hc3NpZ25lZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc0VtYWlsQWRkcmVzcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0RldGFpbHMuYXNzaWduZWUuZW1haWwgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNBc3NpZ25lZFRvTWUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQXNzaWduZWQoKSAmJiB0aGlzLmhhc0VtYWlsQWRkcmVzcygpID9cbiAgICAgICAgICAgIHRoaXMuaXNFbWFpbEVxdWFsKHRoaXMudGFza0RldGFpbHMuYXNzaWduZWUuZW1haWwsIHRoaXMuY3VycmVudExvZ2dlZFVzZXIuZW1haWwpIDpcbiAgICAgICAgICAgIHRoaXMuaXNFeHRlcm5hbElkRXF1YWwodGhpcy50YXNrRGV0YWlscy5hc3NpZ25lZS5leHRlcm5hbElkLCB0aGlzLmN1cnJlbnRMb2dnZWRVc2VyLmV4dGVybmFsSWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNFbWFpbEVxdWFsKGFzc2lnbmVlTWFpbCwgY3VycmVudExvZ2dlZEVtYWlsKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBhc3NpZ25lZU1haWwudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gY3VycmVudExvZ2dlZEVtYWlsLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0V4dGVybmFsSWRFcXVhbChhc3NpZ25lZUV4dGVybmFsSWQsIGN1cnJlbnRVc2VyRXh0ZXJuYWxJZCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gYXNzaWduZWVFeHRlcm5hbElkLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IGN1cnJlbnRVc2VyRXh0ZXJuYWxJZC50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGlzQ29tcGxldGVCdXR0b25FbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0Fzc2lnbmVkVG9NZSgpIHx8IHRoaXMuY2FuSW5pdGlhdG9yQ29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBpc0NvbXBsZXRlQnV0dG9uVmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhhc0Zvcm1LZXkoKSAmJiB0aGlzLmlzVGFza0FjdGl2ZSgpICYmIHRoaXMuaXNDb21wbGV0ZUJ1dHRvbkVuYWJsZWQoKTtcbiAgICB9XG5cbiAgICBjYW5Jbml0aWF0b3JDb21wbGV0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0RldGFpbHMuaW5pdGlhdG9yQ2FuQ29tcGxldGVUYXNrO1xuICAgIH1cblxuICAgIGlzU2F2ZUJ1dHRvblZpc2libGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1NhdmVCdXR0b24oKSAmJiAoIXRoaXMuY2FuSW5pdGlhdG9yQ29tcGxldGUoKSB8fCB0aGlzLmlzQXNzaWduZWRUb01lKCkpO1xuICAgIH1cblxuICAgIGhhc1NhdmVCdXR0b24oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNob3dGb3JtU2F2ZUJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgbmV4dCBvcGVuIHRhc2tcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0luc3RhbmNlSWRcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0RlZmluaXRpb25JZFxuICAgICAqL1xuICAgIHByaXZhdGUgbG9hZE5leHRUYXNrKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcsIHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCByZXF1ZXN0Tm9kZSA9IG5ldyBUYXNrUXVlcnlSZXF1ZXN0UmVwcmVzZW50YXRpb25Nb2RlbChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzSW5zdGFuY2VJZDogcHJvY2Vzc0luc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0RlZmluaXRpb25JZDogcHJvY2Vzc0RlZmluaXRpb25JZFxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnRhc2tMaXN0U2VydmljZS5nZXRUYXNrcyhyZXF1ZXN0Tm9kZSkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXNrRGV0YWlscyA9IG5ldyBUYXNrRGV0YWlsc01vZGVsKHJlc3BvbnNlWzBdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBsZXRlIGJ1dHRvbiBjbGlja2VkXG4gICAgICovXG4gICAgb25Db21wbGV0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50YXNrTGlzdFNlcnZpY2UuY29tcGxldGVUYXNrKHRoaXMudGFza0lkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAocmVzKSA9PiB0aGlzLm9uRm9ybUNvbXBsZXRlZChudWxsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIG9uU2hvd0F0dGFjaEZvcm0oKSB7XG4gICAgICAgIHRoaXMuc2hvd0F0dGFjaEZvcm0gPSB0cnVlO1xuICAgIH1cblxuICAgIG9uQ2FuY2VsQXR0YWNoRm9ybSgpIHtcbiAgICAgICAgdGhpcy5zaG93QXR0YWNoRm9ybSA9IGZhbHNlO1xuICAgIH1cblxuICAgIG9uQ29tcGxldGVBdHRhY2hGb3JtKCkge1xuICAgICAgICB0aGlzLnNob3dBdHRhY2hGb3JtID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9hZERldGFpbHModGhpcy50YXNrSWQpO1xuICAgIH1cblxuICAgIG9uRm9ybUNvbnRlbnRDbGljayhjb250ZW50OiBDb250ZW50TGlua01vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZm9ybUNvbnRlbnRDbGlja2VkLmVtaXQoY29udGVudCk7XG4gICAgfVxuXG4gICAgb25Gb3JtU2F2ZWQoZm9ybTogRm9ybU1vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZm9ybVNhdmVkLmVtaXQoZm9ybSk7XG4gICAgfVxuXG4gICAgb25Gb3JtQ29tcGxldGVkKGZvcm06IEZvcm1Nb2RlbCk6IHZvaWQge1xuICAgICAgICB0aGlzLmZvcm1Db21wbGV0ZWQuZW1pdChmb3JtKTtcbiAgICAgICAgaWYgKHRoaXMuc2hvd05leHRUYXNrICYmICh0aGlzLnRhc2tEZXRhaWxzLnByb2Nlc3NJbnN0YW5jZUlkIHx8IHRoaXMudGFza0RldGFpbHMucHJvY2Vzc0RlZmluaXRpb25JZCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZE5leHRUYXNrKHRoaXMudGFza0RldGFpbHMucHJvY2Vzc0luc3RhbmNlSWQsIHRoaXMudGFza0RldGFpbHMucHJvY2Vzc0RlZmluaXRpb25JZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZvcm1Mb2FkZWQoZm9ybTogRm9ybU1vZGVsKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGFza0Zvcm1OYW1lID0gKGZvcm0gJiYgZm9ybS5uYW1lID8gZm9ybS5uYW1lIDogbnVsbCk7XG4gICAgICAgIHRoaXMuZm9ybUxvYWRlZC5lbWl0KGZvcm0pO1xuICAgIH1cblxuICAgIG9uQ2hlY2tsaXN0VGFza0NyZWF0ZWQodGFzazogVGFza0RldGFpbHNNb2RlbCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRhc2tDcmVhdGVkLmVtaXQodGFzayk7XG4gICAgfVxuXG4gICAgb25DaGVja2xpc3RUYXNrRGVsZXRlZCh0YXNrSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnRhc2tEZWxldGVkLmVtaXQodGFza0lkKTtcbiAgICB9XG5cbiAgICBvbkZvcm1FcnJvcihlcnJvcjogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZXJyb3JEaWFsb2dSZWYgPSB0aGlzLmRpYWxvZy5vcGVuKHRoaXMuZXJyb3JEaWFsb2csIHsgd2lkdGg6ICc1MDBweCcgfSk7XG4gICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgfVxuXG4gICAgb25Gb3JtRXhlY3V0ZU91dGNvbWUoZXZlbnQ6IEZvcm1PdXRjb21lRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5leGVjdXRlT3V0Y29tZS5lbWl0KGV2ZW50KTtcbiAgICB9XG5cbiAgICBjbG9zZUVycm9yRGlhbG9nKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZUFsbCgpO1xuICAgIH1cblxuICAgIG9uQ2xhaW1BY3Rpb24odGFza0lkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGFpbWVkVGFzay5lbWl0KHRhc2tJZCk7XG4gICAgICAgIHRoaXMubG9hZERldGFpbHModGFza0lkKTtcbiAgICB9XG5cbiAgICBvblVuY2xhaW1BY3Rpb24odGFza0lkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51bkNsYWltZWRUYXNrLmVtaXQodGFza0lkKTtcbiAgICAgICAgdGhpcy5sb2FkRGV0YWlscyh0YXNrSWQpO1xuICAgIH1cblxuICAgIGlzQ29tcGxldGVkVGFzaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0RldGFpbHMgJiYgdGhpcy50YXNrRGV0YWlscy5lbmREYXRlID8gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzZWFyY2hVc2VyKHNlYXJjaGVkV29yZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucGVvcGxlUHJvY2Vzc1NlcnZpY2UuZ2V0V29ya2Zsb3dVc2VycyhudWxsLCBzZWFyY2hlZFdvcmQpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh1c2VycykgPT4ge1xuICAgICAgICAgICAgICAgIHVzZXJzID0gdXNlcnMuZmlsdGVyKCh1c2VyKSA9PiB1c2VyLmlkICE9PSB0aGlzLnRhc2tEZXRhaWxzLmFzc2lnbmVlLmlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBlb3BsZVNlYXJjaE9ic2VydmVyLm5leHQodXNlcnMpO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoJ0NvdWxkIG5vdCBsb2FkIHVzZXJzJykpO1xuICAgIH1cblxuICAgIG9uQ2xvc2VTZWFyY2goKSB7XG4gICAgICAgIHRoaXMuc2hvd0Fzc2lnbmVlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYXNzaWduVGFza1RvVXNlcihzZWxlY3RlZFVzZXI6IFVzZXJQcm9jZXNzTW9kZWwpIHtcbiAgICAgICAgdGhpcy50YXNrTGlzdFNlcnZpY2UuYXNzaWduVGFzayh0aGlzLnRhc2tEZXRhaWxzLmlkLCBzZWxlY3RlZFVzZXIpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5pbmZvKCdUYXNrIEFzc2lnbmVkIHRvICcgKyBzZWxlY3RlZFVzZXIuZW1haWwpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzaWduVGFzay5lbWl0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zaG93QXNzaWduZWUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRUYXNrSGVhZGVyVmlld0NsYXNzKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLnNob3dBc3NpZ25lZSkge1xuICAgICAgICAgICAgcmV0dXJuICdhc3NpZ24tZWRpdC12aWV3JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnZGVmYXVsdC12aWV3JztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzUmVhZE9ubHlDb21tZW50KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMudGFza0RldGFpbHMgJiYgdGhpcy50YXNrRGV0YWlscy5pc0NvbXBsZXRlZCgpKSAmJiAodGhpcy50YXNrUGVvcGxlICYmIHRoaXMudGFza1Blb3BsZS5sZW5ndGggPT09IDApO1xuICAgIH1cbn1cbiJdfQ==