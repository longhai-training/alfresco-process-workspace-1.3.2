/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FilterParamsModel } from '../models/filter.model';
import { TaskFilterService } from './../services/task-filter.service';
import { TaskListService } from './../services/tasklist.service';
import { IconModel } from '../../app-list/icon.model';
var TaskFiltersComponent = /** @class */ (function () {
    function TaskFiltersComponent(taskFilterService, taskListService, appsProcessService) {
        this.taskFilterService = taskFilterService;
        this.taskListService = taskListService;
        this.appsProcessService = appsProcessService;
        /**
         * Emitted when a filter in the list is clicked.
         */
        this.filterClick = new EventEmitter();
        /**
         * Emitted when the list is loaded.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs during loading.
         */
        this.error = new EventEmitter();
        this.filters = [];
    }
    /**
     * @return {?}
     */
    TaskFiltersComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.iconsMDL = new IconModel();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskFiltersComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var appName = changes['appName'];
        /** @type {?} */
        var appId = changes['appId'];
        /** @type {?} */
        var filter = changes['filterParam'];
        if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
        }
        else if (appId && appId.currentValue !== appId.previousValue) {
            this.getFiltersByAppId(appId.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilter(filter.currentValue);
        }
    };
    /**
     * Return the task list filtered by appId or by appName
     * @param appId
     * @param appName
     */
    /**
     * Return the task list filtered by appId or by appName
     * @param {?=} appId
     * @param {?=} appName
     * @return {?}
     */
    TaskFiltersComponent.prototype.getFilters = /**
     * Return the task list filtered by appId or by appName
     * @param {?=} appId
     * @param {?=} appName
     * @return {?}
     */
    function (appId, appName) {
        appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);
    };
    /**
     * Return the filter list filtered by appId
     * @param appId - optional
     */
    /**
     * Return the filter list filtered by appId
     * @param {?=} appId - optional
     * @return {?}
     */
    TaskFiltersComponent.prototype.getFiltersByAppId = /**
     * Return the filter list filtered by appId
     * @param {?=} appId - optional
     * @return {?}
     */
    function (appId) {
        var _this = this;
        this.taskFilterService.getTaskListFilters(appId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res.length === 0 && _this.isFilterListEmpty()) {
                _this.createFiltersByAppId(appId);
            }
            else {
                _this.resetFilter();
                _this.filters = res;
                _this.selectFilter(_this.filterParam);
                _this.success.emit(res);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * Return the filter list filtered by appName
     * @param appName
     */
    /**
     * Return the filter list filtered by appName
     * @param {?} appName
     * @return {?}
     */
    TaskFiltersComponent.prototype.getFiltersByAppName = /**
     * Return the filter list filtered by appName
     * @param {?} appName
     * @return {?}
     */
    function (appName) {
        var _this = this;
        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe((/**
         * @param {?} application
         * @return {?}
         */
        function (application) {
            _this.getFiltersByAppId(application.id);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * Create default filters by appId
     * @param appId
     */
    /**
     * Create default filters by appId
     * @param {?=} appId
     * @return {?}
     */
    TaskFiltersComponent.prototype.createFiltersByAppId = /**
     * Create default filters by appId
     * @param {?=} appId
     * @return {?}
     */
    function (appId) {
        var _this = this;
        this.taskFilterService.createDefaultFilters(appId).subscribe((/**
         * @param {?} resDefault
         * @return {?}
         */
        function (resDefault) {
            _this.resetFilter();
            _this.filters = resDefault;
            _this.selectFilter(_this.filterParam);
            _this.success.emit(resDefault);
        }), (/**
         * @param {?} errDefault
         * @return {?}
         */
        function (errDefault) {
            _this.error.emit(errDefault);
        }));
    };
    /**
     * Pass the selected filter as next
     * @param filter
     */
    /**
     * Pass the selected filter as next
     * @param {?} newFilter
     * @return {?}
     */
    TaskFiltersComponent.prototype.selectFilter = /**
     * Pass the selected filter as next
     * @param {?} newFilter
     * @return {?}
     */
    function (newFilter) {
        if (newFilter) {
            this.currentFilter = this.filters.find((/**
             * @param {?} filter
             * @param {?} index
             * @return {?}
             */
            function (filter, index) {
                return newFilter.index === index ||
                    newFilter.id === filter.id ||
                    (newFilter.name &&
                        (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase()));
            }));
        }
        if (!this.currentFilter) {
            this.selectDefaultTaskFilter();
        }
    };
    /**
     * @param {?} newFilter
     * @return {?}
     */
    TaskFiltersComponent.prototype.selectFilterAndEmit = /**
     * @param {?} newFilter
     * @return {?}
     */
    function (newFilter) {
        this.selectFilter(newFilter);
        this.filterClick.emit(this.currentFilter);
    };
    /**
     * Select filter with task
     * @param taskId
     */
    /**
     * Select filter with task
     * @param {?} taskId
     * @return {?}
     */
    TaskFiltersComponent.prototype.selectFilterWithTask = /**
     * Select filter with task
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        /** @type {?} */
        var filteredFilterList = [];
        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe((/**
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            filteredFilterList.push(filter);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }), (/**
         * @return {?}
         */
        function () {
            if (filteredFilterList.length > 0) {
                _this.selectFilter(filteredFilterList[0]);
                _this.filterClick.emit(_this.currentFilter);
            }
        }));
    };
    /**
     * Select as default task filter the first in the list
     * @param filteredFilterList
     */
    /**
     * Select as default task filter the first in the list
     * @return {?}
     */
    TaskFiltersComponent.prototype.selectDefaultTaskFilter = /**
     * Select as default task filter the first in the list
     * @return {?}
     */
    function () {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    };
    /**
     * Return the current task
     */
    /**
     * Return the current task
     * @return {?}
     */
    TaskFiltersComponent.prototype.getCurrentFilter = /**
     * Return the current task
     * @return {?}
     */
    function () {
        return this.currentFilter;
    };
    /**
     * Check if the filter list is empty
     */
    /**
     * Check if the filter list is empty
     * @return {?}
     */
    TaskFiltersComponent.prototype.isFilterListEmpty = /**
     * Check if the filter list is empty
     * @return {?}
     */
    function () {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    };
    /**
     * Reset the filters properties
     */
    /**
     * Reset the filters properties
     * @private
     * @return {?}
     */
    TaskFiltersComponent.prototype.resetFilter = /**
     * Reset the filters properties
     * @private
     * @return {?}
     */
    function () {
        this.filters = [];
        this.currentFilter = undefined;
    };
    /**
     * Return current filter icon
     */
    /**
     * Return current filter icon
     * @param {?} icon
     * @return {?}
     */
    TaskFiltersComponent.prototype.getFilterIcon = /**
     * Return current filter icon
     * @param {?} icon
     * @return {?}
     */
    function (icon) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
    };
    TaskFiltersComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-task-filters',
                    template: "<div class=\"menu-container\">\n    <mat-list class=\"adf-menu-list\">\n        <mat-list-item (click)=\"selectFilterAndEmit(filter)\" *ngFor=\"let filter of filters\"\n                      class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n            <mat-icon *ngIf=\"showIcon\" matListIcon class=\"adf-filters__entry-icon\">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TaskFiltersComponent.ctorParameters = function () { return [
        { type: TaskFilterService },
        { type: TaskListService },
        { type: AppsProcessService }
    ]; };
    TaskFiltersComponent.propDecorators = {
        filterParam: [{ type: Input }],
        filterClick: [{ type: Output }],
        success: [{ type: Output }],
        error: [{ type: Output }],
        appId: [{ type: Input }],
        appName: [{ type: Input }],
        showIcon: [{ type: Input }]
    };
    return TaskFiltersComponent;
}());
export { TaskFiltersComponent };
if (false) {
    /**
     * Parameters to use for the task filter. If there is no match then
     * the default filter (the first one the list) is selected.
     * @type {?}
     */
    TaskFiltersComponent.prototype.filterParam;
    /**
     * Emitted when a filter in the list is clicked.
     * @type {?}
     */
    TaskFiltersComponent.prototype.filterClick;
    /**
     * Emitted when the list is loaded.
     * @type {?}
     */
    TaskFiltersComponent.prototype.success;
    /**
     * Emitted when an error occurs during loading.
     * @type {?}
     */
    TaskFiltersComponent.prototype.error;
    /**
     * Display filters available to the current user for the application with the specified ID.
     * @type {?}
     */
    TaskFiltersComponent.prototype.appId;
    /**
     * Display filters available to the current user for the application with the specified name.
     * @type {?}
     */
    TaskFiltersComponent.prototype.appName;
    /**
     * Toggles display of the filter's icon.
     * @type {?}
     */
    TaskFiltersComponent.prototype.showIcon;
    /** @type {?} */
    TaskFiltersComponent.prototype.filter$;
    /** @type {?} */
    TaskFiltersComponent.prototype.currentFilter;
    /** @type {?} */
    TaskFiltersComponent.prototype.filters;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.iconsMDL;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.taskFilterService;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.appsProcessService;
}
//# sourceMappingURL=data:application/json;base64,