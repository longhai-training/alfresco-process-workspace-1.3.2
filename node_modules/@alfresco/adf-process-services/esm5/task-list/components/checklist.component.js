/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
var ChecklistComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param auth
     * @param translate
     */
    function ChecklistComponent(activitiTaskList, dialog) {
        this.activitiTaskList = activitiTaskList;
        this.dialog = dialog;
        /**
         * Toggle readonly state of the form. All form widgets
         * will render as readonly if enabled.
         */
        this.readOnly = false;
        /**
         * Emitted when a new checklist task is created.
         */
        this.checklistTaskCreated = new EventEmitter();
        /**
         * Emitted when a checklist task is deleted.
         */
        this.checklistTaskDeleted = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.checklist = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ChecklistComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getTaskChecklist(taskId.currentValue);
            return;
        }
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    ChecklistComponent.prototype.getTaskChecklist = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        this.checklist = [];
        if (this.taskId) {
            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe((/**
             * @param {?} taskDetailsModel
             * @return {?}
             */
            function (taskDetailsModel) {
                taskDetailsModel.forEach((/**
                 * @param {?} task
                 * @return {?}
                 */
                function (task) {
                    _this.checklist.push(task);
                }));
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.error.emit(error);
            }));
        }
        else {
            this.checklist = [];
        }
    };
    /**
     * @return {?}
     */
    ChecklistComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        this.dialog.open(this.addNewDialog, { width: '350px' });
    };
    /**
     * @return {?}
     */
    ChecklistComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var newTask = new TaskDetailsModel({
            name: this.taskName,
            parentTaskId: this.taskId,
            assignee: { id: this.assignee }
        });
        this.activitiTaskList.addTask(newTask).subscribe((/**
         * @param {?} taskDetailsModel
         * @return {?}
         */
        function (taskDetailsModel) {
            _this.checklist.push(taskDetailsModel);
            _this.checklistTaskCreated.emit(taskDetailsModel);
            _this.taskName = '';
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.error.emit(error);
        }));
        this.cancel();
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    ChecklistComponent.prototype.delete = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        this.activitiTaskList.deleteTask(taskId).subscribe((/**
         * @return {?}
         */
        function () {
            _this.checklist = _this.checklist.filter((/**
             * @param {?} check
             * @return {?}
             */
            function (check) { return check.id !== taskId; }));
            _this.checklistTaskDeleted.emit(taskId);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.error.emit(error);
        }));
    };
    /**
     * @return {?}
     */
    ChecklistComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
        this.taskName = '';
    };
    ChecklistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-checklist',
                    template: "<div class=\"adf-checklist-control\">\n    <mat-chip-list data-automation-id=\"checklist-label\">\n        <span class=\"adf-activiti-label\">{{ 'ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST' | translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{checklist?.length}}</mat-chip>\n    </mat-chip-list>\n\n\n    <button mat-icon-button *ngIf=\"!readOnly\" matTooltip=\"Add a checklist\" [matTooltipPosition]=\"'before'\"\n            id=\"add-checklist\" class=\"adf-add-to-checklist-button\" (click)=\"showDialog()\">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n\n<div class=\"adf-checklist-menu-container\" *ngIf=\"checklist?.length > 0\">\n    <mat-chip-list class=\"mat-chip-list-stacked\">\n        <mat-chip id=\"check-{{check.id}}\" class=\"adf-checklist-chip\" *ngFor=\"let check of checklist\"\n                  (removed)=\"delete(check.id)\">\n            <span>{{check.name}}</span>\n            <mat-icon *ngIf=\"!readOnly && !check.endDate\" id=\"remove-{{check.id}}\" matChipRemove>cancel\n            </mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n</div>\n<div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\" class=\"adf-checklist-none-message\">\n    {{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.NONE' | translate }}\n</div>\n\n<ng-template #dialog>\n    <div class=\"adf-checklist-dialog\" id=\"checklist-dialog\">\n        <h4 matDialogTitle id=\"add-checklist-title\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.TITLE' | translate }}</h4>\n        <mat-dialog-content>\n            <mat-form-field>\n                <input matInput placeholder=\"{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.PLACEHOLDER' | translate }}\" [(ngModel)]=\"taskName\" id=\"checklist-name\"\n                       data-automation-id=\"checklist-name\">\n            </mat-form-field>\n        </mat-dialog-content>\n        <mat-dialog-actions class=\"adf-checklist-dialog-actions\">\n            <button mat-button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.CANCEL-BUTTON' | translate | uppercase }}</button>\n            <button mat-button type=\"button\" id=\"add-check\" (click)=\"add()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.ADD-BUTTON' | translate | uppercase  }}</button>\n        </mat-dialog-actions>\n    </div>\n</ng-template>\n",
                    styles: [":host{width:100%}.adf-activiti-label{font-weight:bolder}.mat-form-field{width:100%}.adf-checklist-cancel-button{margin-top:-13px;margin-right:-13px;float:right}.adf-checklist-chip{outline:0}.adf-checklist-menu-container,.adf-checklist-none-message{margin-top:10px}.adf-checklist-control{display:flex;justify-content:space-between}.adf-checklist-control .adfactiviti-label{margin-top:6px;margin-right:10px}.adf-checklist-control .adf-add-to-checklist-button{float:right}.adf-checklist-dialog-actions{display:flex;justify-content:flex-end}"]
                }] }
    ];
    /** @nocollapse */
    ChecklistComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: MatDialog }
    ]; };
    ChecklistComponent.propDecorators = {
        taskId: [{ type: Input }],
        readOnly: [{ type: Input }],
        assignee: [{ type: Input }],
        checklistTaskCreated: [{ type: Output }],
        checklistTaskDeleted: [{ type: Output }],
        error: [{ type: Output }],
        addNewDialog: [{ type: ViewChild, args: ['dialog',] }]
    };
    return ChecklistComponent;
}());
export { ChecklistComponent };
if (false) {
    /**
     * (required) The id of the parent task to which subtasks are
     * attached.
     * @type {?}
     */
    ChecklistComponent.prototype.taskId;
    /**
     * Toggle readonly state of the form. All form widgets
     * will render as readonly if enabled.
     * @type {?}
     */
    ChecklistComponent.prototype.readOnly;
    /**
     * (required) The assignee id that the subtasks are assigned to.
     * @type {?}
     */
    ChecklistComponent.prototype.assignee;
    /**
     * Emitted when a new checklist task is created.
     * @type {?}
     */
    ChecklistComponent.prototype.checklistTaskCreated;
    /**
     * Emitted when a checklist task is deleted.
     * @type {?}
     */
    ChecklistComponent.prototype.checklistTaskDeleted;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ChecklistComponent.prototype.error;
    /** @type {?} */
    ChecklistComponent.prototype.addNewDialog;
    /** @type {?} */
    ChecklistComponent.prototype.taskName;
    /** @type {?} */
    ChecklistComponent.prototype.checklist;
    /**
     * @type {?}
     * @private
     */
    ChecklistComponent.prototype.activitiTaskList;
    /**
     * @type {?}
     * @private
     */
    ChecklistComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,