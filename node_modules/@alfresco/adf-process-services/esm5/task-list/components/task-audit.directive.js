/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { ContentService } from '@alfresco/adf-core';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { TaskListService } from './../services/tasklist.service';
/** @type {?} */
var JSON_FORMAT = 'json';
/** @type {?} */
var PDF_FORMAT = 'pdf';
var TaskAuditDirective = /** @class */ (function () {
    /**
     *
     * @param translateService
     * @param taskListService
     */
    function TaskAuditDirective(contentService, taskListService) {
        this.contentService = contentService;
        this.taskListService = taskListService;
        /**
         * Name of the downloaded file (for PDF downloads).
         */
        this.fileName = 'Audit';
        /**
         * Format of the audit information. Can be "pdf" or "json".
         */
        this.format = 'pdf';
        /**
         * Enables downloading of the audit when the decorated element is clicked.
         */
        this.download = true;
        /**
         * Emitted when the decorated element is clicked.
         */
        this.clicked = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskAuditDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.isValidType()) {
            this.setDefaultFormatType();
        }
    };
    /**
     * @return {?}
     */
    TaskAuditDirective.prototype.isValidType = /**
     * @return {?}
     */
    function () {
        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    TaskAuditDirective.prototype.setDefaultFormatType = /**
     * @return {?}
     */
    function () {
        this.format = PDF_FORMAT;
    };
    /**
     * fetch the audit information in the requested format
     */
    /**
     * fetch the audit information in the requested format
     * @return {?}
     */
    TaskAuditDirective.prototype.fetchAuditInfo = /**
     * fetch the audit information in the requested format
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isPdfFormat()) {
            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe((/**
             * @param {?} blob
             * @return {?}
             */
            function (blob) {
                _this.audit = blob;
                if (_this.download) {
                    _this.contentService.downloadBlob(_this.audit, _this.fileName + '.pdf');
                }
                _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }
        else {
            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.audit = res;
                _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }
    };
    /**
     * @return {?}
     */
    TaskAuditDirective.prototype.onClickAudit = /**
     * @return {?}
     */
    function () {
        this.fetchAuditInfo();
    };
    /**
     * @return {?}
     */
    TaskAuditDirective.prototype.isJsonFormat = /**
     * @return {?}
     */
    function () {
        return this.format === JSON_FORMAT;
    };
    /**
     * @return {?}
     */
    TaskAuditDirective.prototype.isPdfFormat = /**
     * @return {?}
     */
    function () {
        return this.format === PDF_FORMAT;
    };
    TaskAuditDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[adf-task-audit]',
                    host: {
                        'role': 'button',
                        '(click)': 'onClickAudit()'
                    }
                },] }
    ];
    /** @nocollapse */
    TaskAuditDirective.ctorParameters = function () { return [
        { type: ContentService },
        { type: TaskListService }
    ]; };
    TaskAuditDirective.propDecorators = {
        taskId: [{ type: Input, args: ['task-id',] }],
        fileName: [{ type: Input }],
        format: [{ type: Input }],
        download: [{ type: Input }],
        clicked: [{ type: Output }],
        error: [{ type: Output }]
    };
    return TaskAuditDirective;
}());
export { TaskAuditDirective };
if (false) {
    /**
     * (**required**) The id of the task.
     * @type {?}
     */
    TaskAuditDirective.prototype.taskId;
    /**
     * Name of the downloaded file (for PDF downloads).
     * @type {?}
     */
    TaskAuditDirective.prototype.fileName;
    /**
     * Format of the audit information. Can be "pdf" or "json".
     * @type {?}
     */
    TaskAuditDirective.prototype.format;
    /**
     * Enables downloading of the audit when the decorated element is clicked.
     * @type {?}
     */
    TaskAuditDirective.prototype.download;
    /**
     * Emitted when the decorated element is clicked.
     * @type {?}
     */
    TaskAuditDirective.prototype.clicked;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskAuditDirective.prototype.error;
    /** @type {?} */
    TaskAuditDirective.prototype.audit;
    /**
     * @type {?}
     * @private
     */
    TaskAuditDirective.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    TaskAuditDirective.prototype.taskListService;
}
//# sourceMappingURL=data:application/json;base64,