/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector*/
import { Component, ViewEncapsulation } from '@angular/core';
import { WidgetComponent, FormService, NodesApiService } from '@alfresco/adf-core';
import { ContentNodeDialogService } from '@alfresco/adf-content-services';
var AttachFolderWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AttachFolderWidgetComponent, _super);
    function AttachFolderWidgetComponent(contentDialog, formService, nodeService) {
        var _this = _super.call(this) || this;
        _this.contentDialog = contentDialog;
        _this.formService = formService;
        _this.nodeService = nodeService;
        _this.hasFolder = false;
        _this.selectedFolderName = '';
        return _this;
    }
    /**
     * @return {?}
     */
    AttachFolderWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.field &&
            this.field.value) {
            this.hasFolder = true;
            this.nodeService.getNode(this.field.value).subscribe((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                _this.selectedFolderName = node.name;
            }));
        }
    };
    /**
     * @return {?}
     */
    AttachFolderWidgetComponent.prototype.isDefinedSourceFolder = /**
     * @return {?}
     */
    function () {
        return !!this.field.params &&
            !!this.field.params.folderSource &&
            !!this.field.params.folderSource.selectedFolder;
    };
    /**
     * @return {?}
     */
    AttachFolderWidgetComponent.prototype.openSelectDialogFromFileSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = this.field.params;
        if (this.isDefinedSourceFolder()) {
            this.contentDialog.openFolderBrowseDialogByFolderId(params.folderSource.selectedFolder.pathId).subscribe((/**
             * @param {?} selections
             * @return {?}
             */
            function (selections) {
                _this.selectedFolderName = selections[0].name;
                _this.field.value = selections[0].id;
                _this.hasFolder = true;
            }));
        }
        else {
            this.contentDialog.openFolderBrowseDialogBySite().subscribe((/**
             * @param {?} selections
             * @return {?}
             */
            function (selections) {
                _this.selectedFolderName = selections[0].name;
                _this.field.value = selections[0].id;
                _this.hasFolder = true;
            }));
        }
    };
    /**
     * @return {?}
     */
    AttachFolderWidgetComponent.prototype.removeFolder = /**
     * @return {?}
     */
    function () {
        this.field.value = null;
        this.selectedFolderName = '';
        this.hasFolder = false;
    };
    AttachFolderWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'attach-folder-widget',
                    template: "<div class=\"adf-attach-folder-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-attach-folder-widget-container\">\n        <div *ngIf=\"hasFolder\" class=\"adf-attach-folder-result\">\n            <mat-icon>folder</mat-icon>\n            <div class=\"adf-attach-folder-files-row\">\n                <span matLine id=\"{{'folder-'+field?.id}}\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-folder\">{{selectedFolderName}}</span>\n                <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'folder-'+field?.id+'-remove'\"\n                        (click)=\"removeFolder();\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                </button>\n            </div>\n        </div>\n\n        <div class=\"button-row\" *ngIf=\"!hasFolder && !field.readOnly\">\n            <button mat-raised-button\n                color=\"primary\"\n                (click)=\"openSelectDialogFromFileSource()\"\n                [id]=\"'folder-'+field?.id+'-button'\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>cloud_upload</mat-icon>\n            </button>\n        </div>\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-attach-folder-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-folder-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-folder-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-folder-files-row{padding-left:8px}.adf-attach-folder-files-row .mat-line{margin-bottom:0}.adf-attach-folder-result{display:flex;align-items:center}"]
                }] }
    ];
    /** @nocollapse */
    AttachFolderWidgetComponent.ctorParameters = function () { return [
        { type: ContentNodeDialogService },
        { type: FormService },
        { type: NodesApiService }
    ]; };
    return AttachFolderWidgetComponent;
}(WidgetComponent));
export { AttachFolderWidgetComponent };
if (false) {
    /** @type {?} */
    AttachFolderWidgetComponent.prototype.hasFolder;
    /** @type {?} */
    AttachFolderWidgetComponent.prototype.selectedFolderName;
    /**
     * @type {?}
     * @private
     */
    AttachFolderWidgetComponent.prototype.contentDialog;
    /** @type {?} */
    AttachFolderWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    AttachFolderWidgetComponent.prototype.nodeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZvbGRlci13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC13aWRnZXQvYXR0YWNoLWZvbGRlci13aWRnZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQ0gsZUFBZSxFQUNmLFdBQVcsRUFDWCxlQUFlLEVBQ2xCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHMUU7SUFpQmlELHVEQUFlO0lBSzVELHFDQUFvQixhQUF1QyxFQUN4QyxXQUF3QixFQUN2QixXQUE0QjtRQUZoRCxZQUdJLGlCQUFPLFNBQ1Y7UUFKbUIsbUJBQWEsR0FBYixhQUFhLENBQTBCO1FBQ3hDLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3ZCLGlCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUxoRCxlQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLHdCQUFrQixHQUFXLEVBQUUsQ0FBQzs7SUFNaEMsQ0FBQzs7OztJQUVELDhDQUFROzs7SUFBUjtRQUFBLGlCQVFDO1FBUEcsSUFBSSxJQUFJLENBQUMsS0FBSztZQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUzs7OztZQUFDLFVBQUMsSUFBVTtnQkFDNUQsS0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDeEMsQ0FBQyxFQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7SUFFRCwyREFBcUI7OztJQUFyQjtRQUNJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWTtZQUNoQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQztJQUN4RCxDQUFDOzs7O0lBRUQsb0VBQThCOzs7SUFBOUI7UUFBQSxpQkFpQkM7O1lBaEJTLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07UUFDaEMsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBRTtZQUM5QixJQUFJLENBQUMsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVM7Ozs7WUFDcEcsVUFBQyxVQUFrQjtnQkFDZixLQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDN0MsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDcEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDMUIsQ0FBQyxFQUFDLENBQUM7U0FDVjthQUFNO1lBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLFNBQVM7Ozs7WUFDdkQsVUFBQyxVQUFrQjtnQkFDZixLQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDN0MsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDcEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDMUIsQ0FBQyxFQUFDLENBQUM7U0FDVjtJQUNMLENBQUM7Ozs7SUFFRCxrREFBWTs7O0lBQVo7UUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDOztnQkFuRUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLG9rREFBb0Q7b0JBRXBELElBQUksRUFBRTt3QkFDRixTQUFTLEVBQUUsZUFBZTt3QkFDMUIsUUFBUSxFQUFFLGVBQWU7d0JBQ3pCLFVBQVUsRUFBRSxlQUFlO3dCQUMzQixTQUFTLEVBQUUsZUFBZTt3QkFDMUIsV0FBVyxFQUFFLGVBQWU7d0JBQzVCLFlBQVksRUFBRSxlQUFlO3dCQUM3QixTQUFTLEVBQUUsZUFBZTt3QkFDMUIsV0FBVyxFQUFFLGVBQWU7d0JBQzVCLFVBQVUsRUFBRSxlQUFlO3FCQUM5QjtvQkFDRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQW5CUSx3QkFBd0I7Z0JBSDdCLFdBQVc7Z0JBQ1gsZUFBZTs7SUEwRW5CLGtDQUFDO0NBQUEsQUFyRUQsQ0FpQmlELGVBQWUsR0FvRC9EO1NBcERZLDJCQUEyQjs7O0lBRXBDLGdEQUEyQjs7SUFDM0IseURBQWdDOzs7OztJQUVwQixvREFBK0M7O0lBQy9DLGtEQUErQjs7Ozs7SUFDL0Isa0RBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LXNlbGVjdG9yKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFdpZGdldENvbXBvbmVudCxcbiAgICBGb3JtU2VydmljZSxcbiAgICBOb2Rlc0FwaVNlcnZpY2Vcbn0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbnRlbnROb2RlRGlhbG9nU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcyc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXR0YWNoLWZvbGRlci13aWRnZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hdHRhY2gtZm9sZGVyLXdpZGdldC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYXR0YWNoLWZvbGRlci13aWRnZXQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICcoY2xpY2spJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGJsdXIpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGNoYW5nZSknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoZm9jdXMpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGZvY3VzaW4pJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGZvY3Vzb3V0KSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhpbnB1dCknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoaW52YWxpZCknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoc2VsZWN0KSc6ICdldmVudCgkZXZlbnQpJ1xuICAgIH0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBBdHRhY2hGb2xkZXJXaWRnZXRDb21wb25lbnQgZXh0ZW5kcyBXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgaGFzRm9sZGVyOiBib29sZWFuID0gZmFsc2U7XG4gICAgc2VsZWN0ZWRGb2xkZXJOYW1lOiBzdHJpbmcgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGVudERpYWxvZzogQ29udGVudE5vZGVEaWFsb2dTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBmb3JtU2VydmljZTogRm9ybVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBub2RlU2VydmljZTogTm9kZXNBcGlTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0ZvbGRlciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm5vZGVTZXJ2aWNlLmdldE5vZGUodGhpcy5maWVsZC52YWx1ZSkuc3Vic2NyaWJlKChub2RlOiBOb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZvbGRlck5hbWUgPSBub2RlLm5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzRGVmaW5lZFNvdXJjZUZvbGRlcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5maWVsZC5wYXJhbXMgJiZcbiAgICAgICAgICAgICEhdGhpcy5maWVsZC5wYXJhbXMuZm9sZGVyU291cmNlICYmXG4gICAgICAgICAgICAhIXRoaXMuZmllbGQucGFyYW1zLmZvbGRlclNvdXJjZS5zZWxlY3RlZEZvbGRlcjtcbiAgICB9XG5cbiAgICBvcGVuU2VsZWN0RGlhbG9nRnJvbUZpbGVTb3VyY2UoKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuZmllbGQucGFyYW1zO1xuICAgICAgICBpZiAodGhpcy5pc0RlZmluZWRTb3VyY2VGb2xkZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50RGlhbG9nLm9wZW5Gb2xkZXJCcm93c2VEaWFsb2dCeUZvbGRlcklkKHBhcmFtcy5mb2xkZXJTb3VyY2Uuc2VsZWN0ZWRGb2xkZXIucGF0aElkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHNlbGVjdGlvbnM6IE5vZGVbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkRm9sZGVyTmFtZSA9IHNlbGVjdGlvbnNbMF0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSA9IHNlbGVjdGlvbnNbMF0uaWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzRm9sZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudERpYWxvZy5vcGVuRm9sZGVyQnJvd3NlRGlhbG9nQnlTaXRlKCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChzZWxlY3Rpb25zOiBOb2RlW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZvbGRlck5hbWUgPSBzZWxlY3Rpb25zWzBdLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBzZWxlY3Rpb25zWzBdLmlkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc0ZvbGRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVGb2xkZXIoKSB7XG4gICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkRm9sZGVyTmFtZSA9ICcnO1xuICAgICAgICB0aGlzLmhhc0ZvbGRlciA9IGZhbHNlO1xuICAgIH1cblxufVxuIl19