/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector */
import { Component, ViewEncapsulation } from '@angular/core';
import { UploadWidgetComponent, FormService, LogService, ThumbnailService, ProcessContentService, ActivitiContentService, ContentService, AppConfigValues, AppConfigService } from '@alfresco/adf-core';
import { ContentNodeDialogService } from '@alfresco/adf-content-services';
import { from, zip, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { AttachFileWidgetDialogService } from './attach-file-widget-dialog.service';
var AttachFileWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AttachFileWidgetComponent, _super);
    function AttachFileWidgetComponent(formService, logger, thumbnails, processContentService, activitiContentService, contentService, contentDialog, appConfigService, attachDialogService) {
        var _this = _super.call(this, formService, logger, thumbnails, processContentService) || this;
        _this.formService = formService;
        _this.logger = logger;
        _this.thumbnails = thumbnails;
        _this.processContentService = processContentService;
        _this.activitiContentService = activitiContentService;
        _this.contentService = contentService;
        _this.contentDialog = contentDialog;
        _this.appConfigService = appConfigService;
        _this.attachDialogService = attachDialogService;
        _this.repositoryList = [];
        _this.tempFilesList = [];
        return _this;
    }
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
        }
        this.getMultipleFileParam();
        this.activitiContentService.getAlfrescoRepositories(null, true).subscribe((/**
         * @param {?} repoList
         * @return {?}
         */
        function (repoList) {
            _this.repositoryList = repoList;
        }));
        this.formService.taskSaved.subscribe((/**
         * @param {?} formSaved
         * @return {?}
         */
        function (formSaved) {
            if (formSaved.form.id === _this.field.form.id) {
                _this.tempFilesList = [];
            }
        }));
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isFileSourceConfigured = /**
     * @return {?}
     */
    function () {
        return !!this.field.params && !!this.field.params.fileSource;
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isMultipleSourceUpload = /**
     * @return {?}
     */
    function () {
        return !this.field.readOnly && this.isFileSourceConfigured() && !this.isOnlyLocalSourceSelected();
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isAllFileSourceSelected = /**
     * @return {?}
     */
    function () {
        return this.field.params &&
            this.field.params.fileSource &&
            this.field.params.fileSource.serviceId === 'all-file-sources';
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isOnlyLocalSourceSelected = /**
     * @return {?}
     */
    function () {
        return this.field.params &&
            this.field.params.fileSource &&
            this.field.params.fileSource.serviceId === 'local-file';
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isSimpleUploadButton = /**
     * @return {?}
     */
    function () {
        return this.isUploadButtonVisible() &&
            !this.isFileSourceConfigured() ||
            this.isOnlyLocalSourceSelected();
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isUploadButtonVisible = /**
     * @return {?}
     */
    function () {
        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isDefinedSourceFolder = /**
     * @return {?}
     */
    function () {
        return !!this.field.params &&
            !!this.field.params.fileSource &&
            !!this.field.params.fileSource.selectedFolder;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.isTemporaryFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return this.tempFilesList.findIndex((/**
         * @param {?} elem
         * @return {?}
         */
        function (elem) { return elem.name === file.name; })) >= 0;
    };
    /**
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.openSelectDialogFromFileSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var params = this.field.params;
        if (this.isDefinedSourceFolder()) {
            this.contentDialog.openFileBrowseDialogByFolderId(params.fileSource.selectedFolder.pathId).subscribe((/**
             * @param {?} selections
             * @return {?}
             */
            function (selections) {
                var _a;
                (_a = _this.tempFilesList).push.apply(_a, tslib_1.__spread(selections));
                _this.uploadFileFromCS(selections, _this.field.params.fileSource.selectedFolder.accountId, _this.field.params.fileSource.selectedFolder.siteId);
            }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.onAttachFileChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _a;
        (_a = this.tempFilesList).push.apply(_a, tslib_1.__spread(Array.from(event.target.files)));
        this.onFileChanged(event);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.onRemoveAttachFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (this.isTemporaryFile(file)) {
            this.tempFilesList.splice(this.tempFilesList.indexOf(((/** @type {?} */ (file))).contentBlob), 1);
        }
        this.removeFile(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.onAttachFileClicked = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file.isExternal) {
            this.logger.info("The file " + file.name + " comes from an external source and cannot be showed at this moment");
            return;
        }
        if (this.isTemporaryFile(file)) {
            this.formService.formContentClicked.next(file);
        }
        else {
            this.fileClicked(file);
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.downloadContent = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        if (this.isTemporaryFile(file)) {
            this.contentService.downloadBlob(((/** @type {?} */ (file))).contentBlob, file.name);
        }
        else {
            this.processContentService.getFileRawContent(((/** @type {?} */ (file))).id).subscribe((/**
             * @param {?} blob
             * @return {?}
             */
            function (blob) {
                _this.contentService.downloadBlob(blob, ((/** @type {?} */ (file))).name);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.logger.error('Impossible retrieve content for download');
            }));
        }
    };
    /**
     * @param {?} repository
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.openSelectDialog = /**
     * @param {?} repository
     * @return {?}
     */
    function (repository) {
        var _this = this;
        /** @type {?} */
        var accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;
        /** @type {?} */
        var currentECMHost = this.getDomainHost(this.appConfigService.get(AppConfigValues.ECMHOST));
        /** @type {?} */
        var chosenRepositoryHost = this.getDomainHost(repository.repositoryUrl);
        if (chosenRepositoryHost !== currentECMHost) {
            /** @type {?} */
            var formattedRepositoryHost = repository.repositoryUrl.replace('/alfresco', '');
            this.attachDialogService.openLogin(formattedRepositoryHost).subscribe((/**
             * @param {?} selections
             * @return {?}
             */
            function (selections) {
                var _a;
                selections.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) { return node.isExternal = true; }));
                (_a = _this.tempFilesList).push.apply(_a, tslib_1.__spread(selections));
                _this.uploadFileFromCS(selections, accountIdentifier);
            }));
        }
        else {
            this.contentDialog.openFileBrowseDialogBySite().subscribe((/**
             * @param {?} selections
             * @return {?}
             */
            function (selections) {
                var _a;
                (_a = _this.tempFilesList).push.apply(_a, tslib_1.__spread(selections));
                _this.uploadFileFromCS(selections, accountIdentifier);
            }));
        }
    };
    /**
     * @private
     * @param {?} fileNodeList
     * @param {?} accountId
     * @param {?=} siteId
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.uploadFileFromCS = /**
     * @private
     * @param {?} fileNodeList
     * @param {?} accountId
     * @param {?=} siteId
     * @return {?}
     */
    function (fileNodeList, accountId, siteId) {
        var _this = this;
        /** @type {?} */
        var filesSaved = [];
        from(fileNodeList).pipe(mergeMap((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            return zip(of(node.content.mimeType), _this.activitiContentService.applyAlfrescoNode(node, siteId, accountId), of(node.isExternal));
        })))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 3), mimeType = _b[0], res = _b[1], isExternal = _b[2];
            res.mimeType = mimeType;
            res.isExternal = isExternal;
            filesSaved.push(res);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.logger.error(error);
        }), (/**
         * @return {?}
         */
        function () {
            _this.field.value = filesSaved;
            _this.field.json.value = filesSaved;
            _this.hasFile = true;
        }));
    };
    /**
     * @private
     * @param {?} urlToCheck
     * @return {?}
     */
    AttachFileWidgetComponent.prototype.getDomainHost = /**
     * @private
     * @param {?} urlToCheck
     * @return {?}
     */
    function (urlToCheck) {
        /** @type {?} */
        var result = urlToCheck.match('^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)');
        return result[1];
    };
    AttachFileWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'attach-widget',
                    template: "<div class=\"adf-attach-widget {{field.className}}\"\n    [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}\n        <span *ngIf=\"isRequired()\">*</span>\n    </label>\n    <div class=\"adf-attach-widget-container\">\n        <div id=\"adf-attach-widget-simple-upload\" *ngIf=\"isSimpleUploadButton() && isUploadButtonVisible()\">\n            <a mat-raised-button color=\"primary\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                        [multiple]=\"multipleOption\"\n                        type=\"file\"\n                        [id]=\"field.id\"\n                        (change)=\"onAttachFileChanged($event)\" />\n            </a>\n        </div>\n        <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible() && isMultipleSourceUpload()\">\n            <button mat-raised-button color=\"primary\" [matMenuTriggerFor]=\"menu\" [id]=\"field.id\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                    <mat-icon>attach_file</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" class=\"adf-attach-widget__menu-content\">\n                <button mat-menu-item (click)=\"uploadFile.click()\"\n                        id=\"attach-local-file\"\n                        *ngIf=\"isAllFileSourceSelected()\">\n                    {{ 'FORM.FIELD.LOCALSTORAGE' | translate }}\n                    <mat-icon>file_upload</mat-icon>\n                    <input #uploadFile\n                            class=\"adf-attach-widget__input-type\"\n                            [multiple]=\"multipleOption\"\n                            type=\"file\"\n                            [id]=\"field.id\"\n                            (change)=\"onAttachFileChanged($event)\" />\n                </button>\n                <button mat-menu-item\n                        *ngIf=\"isDefinedSourceFolder()\"\n                        id=\"attach-{{field.params?.fileSource?.name}}\"\n                        (click)=\"openSelectDialogFromFileSource()\">\n                        {{field.params?.fileSource?.name}}\n                        <mat-icon>\n                            <img alt=\"alfresco\" class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                        </mat-icon>\n                </button>\n                <div *ngIf=\"!isDefinedSourceFolder()\">\n                    <button mat-menu-item *ngFor=\"let repo of repositoryList\"\n                            id=\"attach-{{repo?.name}}\"\n                           (click)=\"openSelectDialog(repo)\">\n                            {{repo.name}}\n                            <mat-icon>\n                                <img alt=\"alfresco\" class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                            </mat-icon>\n                    </button>\n                </div>\n            </mat-menu>\n        </div>\n    </div>\n</div>\n\n<div id=\"adf-attach-widget-readonly-list\">\n    <mat-list *ngIf=\"hasFile\">\n        <mat-list-item class=\"adf-attach-files-row\" *ngFor=\"let file of field.value\">\n            <img mat-list-icon class=\"adf-attach-widget__icon\"\n                 [id]=\"'file-'+file.id+'-icon'\"\n                 [src]=\"file.content ? getIcon(file.content.mimeType) : getIcon(file.mimeType)\"\n                 [alt]=\"mimeTypeIcon\"\n                 (click)=\"onAttachFileClicked(file)\"\n                 (keyup.enter)=\"onAttachFileClicked(file)\"\n                 role=\"button\"\n                 tabindex=\"0\"/>\n            <span matLine id=\"{{'file-'+file.id}}\" (click)=\"onAttachFileClicked(file)\" (keyup.enter)=\"onAttachFileClicked(file)\"\n                  role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n            <button id=\"{{'file-'+file.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                <button id=\"{{'file-'+file.id+'-show-file'}}\"\n                    [disabled]=\"file.isExternal\"\n                    mat-menu-item (click)=\"onAttachFileClicked(file)\">\n                    <mat-icon>image</mat-icon>\n                    <span>{{ 'FORM.FIELD.SHOW_FILE' | translate }}</span>\n                </button>\n                <button id=\"{{'file-'+file.id+'-download-file'}}\"\n                    mat-menu-item (click)=\"downloadContent(file)\">\n                    <mat-icon>file_download</mat-icon>\n                    <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                </button>\n                <button *ngIf=\"!field.readOnly\" id=\"{{'file-'+file.id+'-remove-file'}}\"\n                        mat-menu-item [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(file);\" (keyup.enter)=\"onRemoveAttachFile(file);\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                </button>\n            </mat-menu>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<error-widget [error]=\"field.validationSummary\"></error-widget>\n<error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n",
                    host: {
                        '(click)': 'event($event)',
                        '(blur)': 'event($event)',
                        '(change)': 'event($event)',
                        '(focus)': 'event($event)',
                        '(focusin)': 'event($event)',
                        '(focusout)': 'event($event)',
                        '(input)': 'event($event)',
                        '(invalid)': 'event($event)',
                        '(select)': 'event($event)'
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-attach-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{display:flex;align-items:center}.adf-attach-widget__input-type{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-widget__icon{padding:6px;float:left;cursor:pointer}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row .mat-line{margin-bottom:0}"]
                }] }
    ];
    /** @nocollapse */
    AttachFileWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService },
        { type: ThumbnailService },
        { type: ProcessContentService },
        { type: ActivitiContentService },
        { type: ContentService },
        { type: ContentNodeDialogService },
        { type: AppConfigService },
        { type: AttachFileWidgetDialogService }
    ]; };
    return AttachFileWidgetComponent;
}(UploadWidgetComponent));
export { AttachFileWidgetComponent };
if (false) {
    /** @type {?} */
    AttachFileWidgetComponent.prototype.repositoryList;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.tempFilesList;
    /** @type {?} */
    AttachFileWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.logger;
    /** @type {?} */
    AttachFileWidgetComponent.prototype.thumbnails;
    /** @type {?} */
    AttachFileWidgetComponent.prototype.processContentService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.activitiContentService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.contentDialog;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.attachDialogService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZpbGUtd2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtd2lkZ2V0L2F0dGFjaC1maWxlLXdpZGdldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsV0FBVyxFQUNYLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIscUJBQXFCLEVBQ3JCLHNCQUFzQixFQUN0QixjQUFjLEVBRWQsZUFBZSxFQUNmLGdCQUFnQixFQUNuQixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFcEY7SUFpQitDLHFEQUFxQjtJQUtoRSxtQ0FBbUIsV0FBd0IsRUFDdkIsTUFBa0IsRUFDbkIsVUFBNEIsRUFDNUIscUJBQTRDLEVBQzNDLHNCQUE4QyxFQUM5QyxjQUE4QixFQUM5QixhQUF1QyxFQUN2QyxnQkFBa0MsRUFDbEMsbUJBQWtEO1FBUnRFLFlBU0ksa0JBQU0sV0FBVyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUscUJBQXFCLENBQUMsU0FDaEU7UUFWa0IsaUJBQVcsR0FBWCxXQUFXLENBQWE7UUFDdkIsWUFBTSxHQUFOLE1BQU0sQ0FBWTtRQUNuQixnQkFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFDNUIsMkJBQXFCLEdBQXJC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Q0FBMEI7O0lBQzFCLCtDQUFtQzs7SUFDbkMsMERBQW1EOzs7OztJQUNuRCwyREFBc0Q7Ozs7O0lBQ3RELG1EQUFzQzs7Ozs7SUFDdEMsa0RBQStDOzs7OztJQUMvQyxxREFBMEM7Ozs7O0lBQzFDLHdEQUEwRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1zZWxlY3RvciAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgVXBsb2FkV2lkZ2V0Q29tcG9uZW50LFxuICAgIEZvcm1TZXJ2aWNlLFxuICAgIExvZ1NlcnZpY2UsXG4gICAgVGh1bWJuYWlsU2VydmljZSxcbiAgICBQcm9jZXNzQ29udGVudFNlcnZpY2UsXG4gICAgQWN0aXZpdGlDb250ZW50U2VydmljZSxcbiAgICBDb250ZW50U2VydmljZSxcbiAgICBGb3JtRXZlbnQsXG4gICAgQXBwQ29uZmlnVmFsdWVzLFxuICAgIEFwcENvbmZpZ1NlcnZpY2Vcbn0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbnRlbnROb2RlRGlhbG9nU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcyc7XG5pbXBvcnQgeyBOb2RlLCBSZWxhdGVkQ29udGVudFJlcHJlc2VudGF0aW9uIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBmcm9tLCB6aXAsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEF0dGFjaEZpbGVXaWRnZXREaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi9hdHRhY2gtZmlsZS13aWRnZXQtZGlhbG9nLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2F0dGFjaC13aWRnZXQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hdHRhY2gtZmlsZS13aWRnZXQuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2F0dGFjaC1maWxlLXdpZGdldC5jb21wb25lbnQuc2NzcyddLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJyhjbGljayknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoYmx1ciknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoY2hhbmdlKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhmb2N1cyknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoZm9jdXNpbiknOiAnZXZlbnQoJGV2ZW50KScsXG4gICAgICAgICcoZm9jdXNvdXQpJzogJ2V2ZW50KCRldmVudCknLFxuICAgICAgICAnKGlucHV0KSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhpbnZhbGlkKSc6ICdldmVudCgkZXZlbnQpJyxcbiAgICAgICAgJyhzZWxlY3QpJzogJ2V2ZW50KCRldmVudCknXG4gICAgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIEF0dGFjaEZpbGVXaWRnZXRDb21wb25lbnQgZXh0ZW5kcyBVcGxvYWRXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgcmVwb3NpdG9yeUxpc3QgPSBbXTtcbiAgICBwcml2YXRlIHRlbXBGaWxlc0xpc3QgPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBmb3JtU2VydmljZTogRm9ybVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dnZXI6IExvZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIHRodW1ibmFpbHM6IFRodW1ibmFpbFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIHByb2Nlc3NDb250ZW50U2VydmljZTogUHJvY2Vzc0NvbnRlbnRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYWN0aXZpdGlDb250ZW50U2VydmljZTogQWN0aXZpdGlDb250ZW50U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnRTZXJ2aWNlOiBDb250ZW50U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnREaWFsb2c6IENvbnRlbnROb2RlRGlhbG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhdHRhY2hEaWFsb2dTZXJ2aWNlOiBBdHRhY2hGaWxlV2lkZ2V0RGlhbG9nU2VydmljZSkge1xuICAgICAgICBzdXBlcihmb3JtU2VydmljZSwgbG9nZ2VyLCB0aHVtYm5haWxzLCBwcm9jZXNzQ29udGVudFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5maWVsZCAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0ZpbGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0TXVsdGlwbGVGaWxlUGFyYW0oKTtcblxuICAgICAgICB0aGlzLmFjdGl2aXRpQ29udGVudFNlcnZpY2UuZ2V0QWxmcmVzY29SZXBvc2l0b3JpZXMobnVsbCwgdHJ1ZSkuc3Vic2NyaWJlKChyZXBvTGlzdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXBvc2l0b3J5TGlzdCA9IHJlcG9MaXN0O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLnRhc2tTYXZlZC5zdWJzY3JpYmUoKGZvcm1TYXZlZDogRm9ybUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZm9ybVNhdmVkLmZvcm0uaWQgPT09IHRoaXMuZmllbGQuZm9ybS5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGVtcEZpbGVzTGlzdCA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0ZpbGVTb3VyY2VDb25maWd1cmVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmZpZWxkLnBhcmFtcyAmJiAhIXRoaXMuZmllbGQucGFyYW1zLmZpbGVTb3VyY2U7XG4gICAgfVxuXG4gICAgaXNNdWx0aXBsZVNvdXJjZVVwbG9hZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmZpZWxkLnJlYWRPbmx5ICYmIHRoaXMuaXNGaWxlU291cmNlQ29uZmlndXJlZCgpICYmICF0aGlzLmlzT25seUxvY2FsU291cmNlU2VsZWN0ZWQoKTtcbiAgICB9XG5cbiAgICBpc0FsbEZpbGVTb3VyY2VTZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQucGFyYW1zICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnBhcmFtcy5maWxlU291cmNlICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnBhcmFtcy5maWxlU291cmNlLnNlcnZpY2VJZCA9PT0gJ2FsbC1maWxlLXNvdXJjZXMnO1xuICAgIH1cblxuICAgIGlzT25seUxvY2FsU291cmNlU2VsZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLnBhcmFtcyAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC5wYXJhbXMuZmlsZVNvdXJjZSAmJlxuICAgICAgICAgICAgdGhpcy5maWVsZC5wYXJhbXMuZmlsZVNvdXJjZS5zZXJ2aWNlSWQgPT09ICdsb2NhbC1maWxlJztcbiAgICB9XG5cbiAgICBpc1NpbXBsZVVwbG9hZEJ1dHRvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNVcGxvYWRCdXR0b25WaXNpYmxlKCkgJiZcbiAgICAgICAgICAgICF0aGlzLmlzRmlsZVNvdXJjZUNvbmZpZ3VyZWQoKSB8fFxuICAgICAgICAgICAgdGhpcy5pc09ubHlMb2NhbFNvdXJjZVNlbGVjdGVkKCk7XG4gICAgfVxuXG4gICAgaXNVcGxvYWRCdXR0b25WaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKCF0aGlzLmhhc0ZpbGUgfHwgdGhpcy5tdWx0aXBsZU9wdGlvbikgJiYgIXRoaXMuZmllbGQucmVhZE9ubHk7XG4gICAgfVxuXG4gICAgaXNEZWZpbmVkU291cmNlRm9sZGVyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmZpZWxkLnBhcmFtcyAmJlxuICAgICAgICAgICAgISF0aGlzLmZpZWxkLnBhcmFtcy5maWxlU291cmNlICYmXG4gICAgICAgICAgICAhIXRoaXMuZmllbGQucGFyYW1zLmZpbGVTb3VyY2Uuc2VsZWN0ZWRGb2xkZXI7XG4gICAgfVxuXG4gICAgaXNUZW1wb3JhcnlGaWxlKGZpbGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcEZpbGVzTGlzdC5maW5kSW5kZXgoKGVsZW0pID0+IGVsZW0ubmFtZSA9PT0gZmlsZS5uYW1lKSA+PSAwO1xuICAgIH1cblxuICAgIG9wZW5TZWxlY3REaWFsb2dGcm9tRmlsZVNvdXJjZSgpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5maWVsZC5wYXJhbXM7XG4gICAgICAgIGlmICh0aGlzLmlzRGVmaW5lZFNvdXJjZUZvbGRlcigpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnREaWFsb2cub3BlbkZpbGVCcm93c2VEaWFsb2dCeUZvbGRlcklkKHBhcmFtcy5maWxlU291cmNlLnNlbGVjdGVkRm9sZGVyLnBhdGhJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChzZWxlY3Rpb25zOiBOb2RlW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wRmlsZXNMaXN0LnB1c2goLi4uc2VsZWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkRmlsZUZyb21DUyhzZWxlY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZC5wYXJhbXMuZmlsZVNvdXJjZS5zZWxlY3RlZEZvbGRlci5hY2NvdW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLnBhcmFtcy5maWxlU291cmNlLnNlbGVjdGVkRm9sZGVyLnNpdGVJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkF0dGFjaEZpbGVDaGFuZ2VkKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgdGhpcy50ZW1wRmlsZXNMaXN0LnB1c2goLi4uQXJyYXkuZnJvbShldmVudC50YXJnZXQuZmlsZXMpKTtcbiAgICAgICAgdGhpcy5vbkZpbGVDaGFuZ2VkKGV2ZW50KTtcbiAgICB9XG5cbiAgICBvblJlbW92ZUF0dGFjaEZpbGUoZmlsZTogRmlsZSB8IFJlbGF0ZWRDb250ZW50UmVwcmVzZW50YXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUZW1wb3JhcnlGaWxlKGZpbGUpKSB7XG4gICAgICAgICAgICB0aGlzLnRlbXBGaWxlc0xpc3Quc3BsaWNlKHRoaXMudGVtcEZpbGVzTGlzdC5pbmRleE9mKCg8UmVsYXRlZENvbnRlbnRSZXByZXNlbnRhdGlvbj4gZmlsZSkuY29udGVudEJsb2IpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgfVxuXG4gICAgb25BdHRhY2hGaWxlQ2xpY2tlZChmaWxlOiBhbnkpIHtcbiAgICAgICAgaWYgKGZpbGUuaXNFeHRlcm5hbCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgVGhlIGZpbGUgJHtmaWxlLm5hbWV9IGNvbWVzIGZyb20gYW4gZXh0ZXJuYWwgc291cmNlIGFuZCBjYW5ub3QgYmUgc2hvd2VkIGF0IHRoaXMgbW9tZW50YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUZW1wb3JhcnlGaWxlKGZpbGUpKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmZvcm1Db250ZW50Q2xpY2tlZC5uZXh0KGZpbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maWxlQ2xpY2tlZChmaWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRvd25sb2FkQ29udGVudChmaWxlOiBhbnkgfCBSZWxhdGVkQ29udGVudFJlcHJlc2VudGF0aW9uKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzVGVtcG9yYXJ5RmlsZShmaWxlKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50U2VydmljZS5kb3dubG9hZEJsb2IoKDxSZWxhdGVkQ29udGVudFJlcHJlc2VudGF0aW9uPiBmaWxlKS5jb250ZW50QmxvYiwgZmlsZS5uYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0NvbnRlbnRTZXJ2aWNlLmdldEZpbGVSYXdDb250ZW50KCg8YW55PiBmaWxlKS5pZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChibG9iOiBCbG9iKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudFNlcnZpY2UuZG93bmxvYWRCbG9iKGJsb2IsICg8YW55PiBmaWxlKS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ltcG9zc2libGUgcmV0cmlldmUgY29udGVudCBmb3IgZG93bmxvYWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3BlblNlbGVjdERpYWxvZyhyZXBvc2l0b3J5KSB7XG4gICAgICAgIGNvbnN0IGFjY291bnRJZGVudGlmaWVyID0gJ2FsZnJlc2NvLScgKyByZXBvc2l0b3J5LmlkICsgJy0nICsgcmVwb3NpdG9yeS5uYW1lO1xuICAgICAgICBjb25zdCBjdXJyZW50RUNNSG9zdCA9IHRoaXMuZ2V0RG9tYWluSG9zdCh0aGlzLmFwcENvbmZpZ1NlcnZpY2UuZ2V0KEFwcENvbmZpZ1ZhbHVlcy5FQ01IT1NUKSk7XG4gICAgICAgIGNvbnN0IGNob3NlblJlcG9zaXRvcnlIb3N0ID0gdGhpcy5nZXREb21haW5Ib3N0KHJlcG9zaXRvcnkucmVwb3NpdG9yeVVybCk7XG4gICAgICAgIGlmIChjaG9zZW5SZXBvc2l0b3J5SG9zdCAhPT0gY3VycmVudEVDTUhvc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFJlcG9zaXRvcnlIb3N0ID0gcmVwb3NpdG9yeS5yZXBvc2l0b3J5VXJsLnJlcGxhY2UoJy9hbGZyZXNjbycsICcnKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoRGlhbG9nU2VydmljZS5vcGVuTG9naW4oZm9ybWF0dGVkUmVwb3NpdG9yeUhvc3QpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAoc2VsZWN0aW9uczogYW55W10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9ucy5mb3JFYWNoKChub2RlKSA9PiBub2RlLmlzRXh0ZXJuYWwgPSB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wRmlsZXNMaXN0LnB1c2goLi4uc2VsZWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkRmlsZUZyb21DUyhzZWxlY3Rpb25zLCBhY2NvdW50SWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnREaWFsb2cub3BlbkZpbGVCcm93c2VEaWFsb2dCeVNpdGUoKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHNlbGVjdGlvbnM6IE5vZGVbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBGaWxlc0xpc3QucHVzaCguLi5zZWxlY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRGaWxlRnJvbUNTKHNlbGVjdGlvbnMsIGFjY291bnRJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBsb2FkRmlsZUZyb21DUyhmaWxlTm9kZUxpc3Q6IGFueVtdLCBhY2NvdW50SWQ6IHN0cmluZywgc2l0ZUlkPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzU2F2ZWQgPSBbXTtcbiAgICAgICAgZnJvbShmaWxlTm9kZUxpc3QpLnBpcGUoXG4gICAgICAgICAgICBtZXJnZU1hcCgobm9kZSkgPT5cbiAgICAgICAgICAgICAgICB6aXAoXG4gICAgICAgICAgICAgICAgICAgIG9mKG5vZGUuY29udGVudC5taW1lVHlwZSksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZpdGlDb250ZW50U2VydmljZS5hcHBseUFsZnJlc2NvTm9kZShub2RlLCBzaXRlSWQsIGFjY291bnRJZCksXG4gICAgICAgICAgICAgICAgICAgIG9mKG5vZGUuaXNFeHRlcm5hbClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKFttaW1lVHlwZSwgcmVzLCBpc0V4dGVybmFsXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXMubWltZVR5cGUgPSBtaW1lVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmlzRXh0ZXJuYWwgPSBpc0V4dGVybmFsO1xuICAgICAgICAgICAgICAgICAgICBmaWxlc1NhdmVkLnB1c2gocmVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBmaWxlc1NhdmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLmpzb24udmFsdWUgPSBmaWxlc1NhdmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc0ZpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RG9tYWluSG9zdCh1cmxUb0NoZWNrKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHVybFRvQ2hlY2subWF0Y2goJ14oPzpodHRwcz86XFwvXFwvKT8oPzpbXkBcXC9cXG5dK0ApPyg/Ond3d1xcLik/KFteOlxcLz9cXG5dKyknKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFsxXTtcbiAgICB9XG5cbn1cbiJdfQ==