/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
var CreateProcessAttachmentComponent = /** @class */ (function () {
    function CreateProcessAttachmentComponent(activitiContentService) {
        this.activitiContentService = activitiContentService;
        /**
         * Emitted when an error occurs while creating or uploading an attachment
         * from the user within the component.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an attachment is successfully created or uploaded
         * from within the component.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CreateProcessAttachmentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
            this.processInstanceId = changes['processInstanceId'].currentValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CreateProcessAttachmentComponent.prototype.onFileUpload = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var filesList = event.detail.files.map((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { return obj.file; }));
        try {
            for (var filesList_1 = tslib_1.__values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                var fileInfoObj = filesList_1_1.value;
                /** @type {?} */
                var file = fileInfoObj;
                /** @type {?} */
                var opts = {
                    isRelatedContent: true
                };
                this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    _this.success.emit(res);
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    _this.error.emit(err);
                }));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return)) _a.call(filesList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    CreateProcessAttachmentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-create-process-attachment',
                    template: "<button\n    id=\"add_new_process_content_button\"\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                    styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                }] }
    ];
    /** @nocollapse */
    CreateProcessAttachmentComponent.ctorParameters = function () { return [
        { type: ProcessContentService }
    ]; };
    CreateProcessAttachmentComponent.propDecorators = {
        processInstanceId: [{ type: Input }],
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return CreateProcessAttachmentComponent;
}());
export { CreateProcessAttachmentComponent };
if (false) {
    /**
     * (required) The ID of the process instance to display.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.processInstanceId;
    /**
     * Emitted when an error occurs while creating or uploading an attachment
     * from the user within the component.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.error;
    /**
     * Emitted when an attachment is successfully created or uploaded
     * from within the component.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.success;
    /**
     * @type {?}
     * @private
     */
    CreateProcessAttachmentComponent.prototype.activitiContentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJhdHRhY2htZW50L2NyZWF0ZS1wcm9jZXNzLWF0dGFjaG1lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzRDtJQXVCSSwwQ0FBb0Isc0JBQTZDO1FBQTdDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7Ozs7O1FBUmpFLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7Ozs7UUFNbkQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBR3JELENBQUM7Ozs7O0lBRUQsc0RBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsWUFBWSxFQUFFO1lBQzNFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxZQUFZLENBQUM7U0FDdEU7SUFDTCxDQUFDOzs7OztJQUVELHVEQUFZOzs7O0lBQVosVUFBYSxLQUFVO1FBQXZCLGlCQWdCQzs7O1lBZlMsU0FBUyxHQUFXLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVIsQ0FBUSxFQUFDOztZQUVuRSxLQUEwQixJQUFBLGNBQUEsaUJBQUEsU0FBUyxDQUFBLG9DQUFBLDJEQUFFO2dCQUFoQyxJQUFNLFdBQVcsc0JBQUE7O29CQUNaLElBQUksR0FBUyxXQUFXOztvQkFDeEIsSUFBSSxHQUFHO29CQUNULGdCQUFnQixFQUFFLElBQUk7aUJBQ3pCO2dCQUNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozs7Z0JBQ2pHLFVBQUMsR0FBRztvQkFDQSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDM0IsQ0FBQzs7OztnQkFDRCxVQUFDLEdBQUc7b0JBQ0EsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLENBQUMsRUFBQyxDQUFDO2FBQ1Y7Ozs7Ozs7OztJQUNMLENBQUM7O2dCQWhESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLCtCQUErQjtvQkFFekMsMlZBQXlEOztpQkFDNUQ7Ozs7Z0JBTlEscUJBQXFCOzs7b0NBVXpCLEtBQUs7d0JBTUwsTUFBTTswQkFNTixNQUFNOztJQTZCWCx1Q0FBQztDQUFBLEFBakRELElBaURDO1NBNUNZLGdDQUFnQzs7Ozs7O0lBR3pDLDZEQUMwQjs7Ozs7O0lBSzFCLGlEQUNtRDs7Ozs7O0lBS25ELG1EQUNxRDs7Ozs7SUFFekMsa0VBQXFEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvY2Vzc0NvbnRlbnRTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NyZWF0ZS1wcm9jZXNzLWF0dGFjaG1lbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENyZWF0ZVByb2Nlc3NBdHRhY2htZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiAocmVxdWlyZWQpIFRoZSBJRCBvZiB0aGUgcHJvY2VzcyBpbnN0YW5jZSB0byBkaXNwbGF5LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoaWxlIGNyZWF0aW5nIG9yIHVwbG9hZGluZyBhbiBhdHRhY2htZW50XG4gICAgICogZnJvbSB0aGUgdXNlciB3aXRoaW4gdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gYXR0YWNobWVudCBpcyBzdWNjZXNzZnVsbHkgY3JlYXRlZCBvciB1cGxvYWRlZFxuICAgICAqIGZyb20gd2l0aGluIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aXZpdGlDb250ZW50U2VydmljZTogUHJvY2Vzc0NvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlc1sncHJvY2Vzc0luc3RhbmNlSWQnXSAmJiBjaGFuZ2VzWydwcm9jZXNzSW5zdGFuY2VJZCddLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzSW5zdGFuY2VJZCA9IGNoYW5nZXNbJ3Byb2Nlc3NJbnN0YW5jZUlkJ10uY3VycmVudFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25GaWxlVXBsb2FkKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgY29uc3QgZmlsZXNMaXN0OiBGaWxlW10gPSBldmVudC5kZXRhaWwuZmlsZXMubWFwKChvYmopID0+IG9iai5maWxlKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGZpbGVJbmZvT2JqIG9mIGZpbGVzTGlzdCkge1xuICAgICAgICAgICAgY29uc3QgZmlsZTogRmlsZSA9IGZpbGVJbmZvT2JqO1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgICAgICBpc1JlbGF0ZWRDb250ZW50OiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hY3Rpdml0aUNvbnRlbnRTZXJ2aWNlLmNyZWF0ZVByb2Nlc3NSZWxhdGVkQ29udGVudCh0aGlzLnByb2Nlc3NJbnN0YW5jZUlkLCBmaWxlLCBvcHRzKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==