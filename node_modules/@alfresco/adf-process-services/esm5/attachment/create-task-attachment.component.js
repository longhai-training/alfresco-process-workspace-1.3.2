/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
var AttachmentComponent = /** @class */ (function () {
    function AttachmentComponent(activitiContentService) {
        this.activitiContentService = activitiContentService;
        /**
         * Emitted when an error occurs while creating or uploading an
         *  attachment from the user within the component.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an attachment is created or uploaded successfully
         * from within the component.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AttachmentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['taskId'] && changes['taskId'].currentValue) {
            this.taskId = changes['taskId'].currentValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AttachmentComponent.prototype.onFileUpload = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var filesList = event.detail.files.map((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { return obj.file; }));
        try {
            for (var filesList_1 = tslib_1.__values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                var fileInfoObj = filesList_1_1.value;
                /** @type {?} */
                var file = fileInfoObj;
                /** @type {?} */
                var opts = {
                    isRelatedContent: true
                };
                this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    _this.success.emit(res);
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    _this.error.emit(err);
                }));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return)) _a.call(filesList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    AttachmentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-create-task-attachment',
                    template: "<button\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                    styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                }] }
    ];
    /** @nocollapse */
    AttachmentComponent.ctorParameters = function () { return [
        { type: ProcessContentService }
    ]; };
    AttachmentComponent.propDecorators = {
        taskId: [{ type: Input }],
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return AttachmentComponent;
}());
export { AttachmentComponent };
if (false) {
    /**
     * (required) The numeric ID of the task to display.
     * @type {?}
     */
    AttachmentComponent.prototype.taskId;
    /**
     * Emitted when an error occurs while creating or uploading an
     *  attachment from the user within the component.
     * @type {?}
     */
    AttachmentComponent.prototype.error;
    /**
     * Emitted when an attachment is created or uploaded successfully
     * from within the component.
     * @type {?}
     */
    AttachmentComponent.prototype.success;
    /**
     * @type {?}
     * @private
     */
    AttachmentComponent.prototype.activitiContentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRhc2stYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJhdHRhY2htZW50L2NyZWF0ZS10YXNrLWF0dGFjaG1lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzRDtJQXVCSSw2QkFBb0Isc0JBQTZDO1FBQTdDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7Ozs7O1FBUmpFLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7Ozs7UUFNbkQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBR3JELENBQUM7Ozs7O0lBRUQseUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7Ozs7SUFFRCwwQ0FBWTs7OztJQUFaLFVBQWEsS0FBVTtRQUF2QixpQkFpQkM7OztZQWhCUyxTQUFTLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBUixDQUFRLEVBQUM7O1lBRW5FLEtBQTBCLElBQUEsY0FBQSxpQkFBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7Z0JBQWhDLElBQU0sV0FBVyxzQkFBQTs7b0JBQ1osSUFBSSxHQUFTLFdBQVc7O29CQUN4QixJQUFJLEdBQUc7b0JBQ1QsZ0JBQWdCLEVBQUUsSUFBSTtpQkFDekI7Z0JBQ0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozs7Z0JBQ25GLFVBQUMsR0FBRztvQkFDQSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDM0IsQ0FBQzs7OztnQkFDRCxVQUFDLEdBQUc7b0JBQ0EsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLENBQUMsRUFDSixDQUFDO2FBQ0w7Ozs7Ozs7OztJQUNMLENBQUM7O2dCQWpESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDRCQUE0QjtvQkFFdEMsZ1RBQXNEOztpQkFDekQ7Ozs7Z0JBTlEscUJBQXFCOzs7eUJBVXpCLEtBQUs7d0JBTUwsTUFBTTswQkFNTixNQUFNOztJQThCWCwwQkFBQztDQUFBLEFBbERELElBa0RDO1NBN0NZLG1CQUFtQjs7Ozs7O0lBRzVCLHFDQUNlOzs7Ozs7SUFLZixvQ0FDbUQ7Ozs7OztJQUtuRCxzQ0FDcUQ7Ozs7O0lBRXpDLHFEQUFxRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNyZWF0ZS10YXNrLWF0dGFjaG1lbnQnLFxuICAgIHN0eWxlVXJsczogWycuL2NyZWF0ZS10YXNrLWF0dGFjaG1lbnQuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY3JlYXRlLXRhc2stYXR0YWNobWVudC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogKHJlcXVpcmVkKSBUaGUgbnVtZXJpYyBJRCBvZiB0aGUgdGFzayB0byBkaXNwbGF5LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGFza0lkOiBzdHJpbmc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyB3aGlsZSBjcmVhdGluZyBvciB1cGxvYWRpbmcgYW5cbiAgICAgKiAgYXR0YWNobWVudCBmcm9tIHRoZSB1c2VyIHdpdGhpbiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBhdHRhY2htZW50IGlzIGNyZWF0ZWQgb3IgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICogZnJvbSB3aXRoaW4gdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpdml0aUNvbnRlbnRTZXJ2aWNlOiBQcm9jZXNzQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzWyd0YXNrSWQnXSAmJiBjaGFuZ2VzWyd0YXNrSWQnXS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMudGFza0lkID0gY2hhbmdlc1sndGFza0lkJ10uY3VycmVudFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25GaWxlVXBsb2FkKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgY29uc3QgZmlsZXNMaXN0OiBGaWxlW10gPSBldmVudC5kZXRhaWwuZmlsZXMubWFwKChvYmopID0+IG9iai5maWxlKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGZpbGVJbmZvT2JqIG9mIGZpbGVzTGlzdCkge1xuICAgICAgICAgICAgY29uc3QgZmlsZTogRmlsZSA9IGZpbGVJbmZvT2JqO1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgICAgICBpc1JlbGF0ZWRDb250ZW50OiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hY3Rpdml0aUNvbnRlbnRTZXJ2aWNlLmNyZWF0ZVRhc2tSZWxhdGVkQ29udGVudCh0aGlzLnRhc2tJZCwgZmlsZSwgb3B0cykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQocmVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==