/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, EmptyListComponent, ThumbnailService } from '@alfresco/adf-core';
import { ContentChild, Component, EventEmitter, Input, NgZone, Output, ViewEncapsulation } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
var ProcessAttachmentListComponent = /** @class */ (function () {
    function ProcessAttachmentListComponent(activitiContentService, contentService, thumbnailService, ngZone) {
        this.activitiContentService = activitiContentService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.ngZone = ngZone;
        /**
         * Disable/Enable read-only mode for attachment list.
         */
        this.disabled = false;
        /**
         * Emitted when the attachment is double-clicked or the
         * view option is selected from the context menu by the user from
         * within the component. Returns a Blob representing the object
         * that was clicked.
         */
        this.attachmentClick = new EventEmitter();
        /**
         * Emitted when the attachment list has fetched all the attachments.
         * Returns a list of attachments.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when the attachment list is not able to fetch the attachments
         * (eg, following a network error).
         */
        this.error = new EventEmitter();
        this.hasCustomTemplate = false;
        this.attachments = [];
        this.isLoading = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
            this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);
        }
    };
    /**
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.emptyTemplate) {
            this.hasCustomTemplate = true;
        }
    };
    /**
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.attachments = [];
    };
    /**
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.run((/**
         * @return {?}
         */
        function () {
            _this.loadAttachmentsByProcessInstanceId(_this.processInstanceId);
        }));
    };
    /**
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.hasCustomEmptyTemplate = /**
     * @return {?}
     */
    function () {
        return !!this.emptyTemplate;
    };
    /**
     * @param {?} content
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.add = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.ngZone.run((/**
         * @return {?}
         */
        function () {
            _this.attachments.push({
                id: content.id,
                name: content.name,
                created: content.created,
                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
            });
        }));
    };
    /**
     * @private
     * @param {?} processInstanceId
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.loadAttachmentsByProcessInstanceId = /**
     * @private
     * @param {?} processInstanceId
     * @return {?}
     */
    function (processInstanceId) {
        var _this = this;
        if (processInstanceId) {
            this.reset();
            this.isLoading = true;
            /** @type {?} */
            var opts = 'true';
            this.activitiContentService.getProcessRelatedContent(processInstanceId, opts).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                res.data.forEach((/**
                 * @param {?} content
                 * @return {?}
                 */
                function (content) {
                    _this.attachments.push({
                        id: content.id,
                        name: content.name,
                        created: content.created,
                        createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                        icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                    });
                }));
                _this.success.emit(_this.attachments);
                _this.isLoading = false;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
                _this.isLoading = false;
            }));
        }
    };
    /**
     * @private
     * @param {?} contentId
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.deleteAttachmentById = /**
     * @private
     * @param {?} contentId
     * @return {?}
     */
    function (contentId) {
        var _this = this;
        if (contentId) {
            this.activitiContentService.deleteRelatedContent(contentId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.attachments = _this.attachments.filter((/**
                 * @param {?} content
                 * @return {?}
                 */
                function (content) {
                    return content.id !== contentId;
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.error.emit(err);
            }));
        }
    };
    /**
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.attachments && this.attachments.length === 0;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.onShowRowActionsMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var viewAction = {
            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT',
            name: 'view'
        };
        /** @type {?} */
        var removeAction = {
            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT',
            name: 'remove'
        };
        /** @type {?} */
        var downloadAction = {
            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
            name: 'download'
        };
        event.value.actions = [
            viewAction,
            downloadAction
        ];
        if (!this.disabled) {
            event.value.actions.splice(1, 0, removeAction);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.onExecuteRowAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var args = event.value;
        /** @type {?} */
        var action = args.action;
        if (action.name === 'view') {
            this.emitDocumentContent(args.row.obj);
        }
        else if (action.name === 'remove') {
            this.deleteAttachmentById(args.row.obj.id);
        }
        else if (action.name === 'download') {
            this.downloadContent(args.row.obj);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.openContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var content = event.value.obj;
        this.emitDocumentContent(content);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.emitDocumentContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.activitiContentService.getFileRawContent(content.id).subscribe((/**
         * @param {?} blob
         * @return {?}
         */
        function (blob) {
            content.contentBlob = blob;
            _this.attachmentClick.emit(content);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.downloadContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.activitiContentService.getFileRawContent(content.id).subscribe((/**
         * @param {?} blob
         * @return {?}
         */
        function (blob) { return _this.contentService.downloadBlob(blob, content.name); }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.error.emit(err);
        }));
    };
    /**
     * @return {?}
     */
    ProcessAttachmentListComponent.prototype.isDisabled = /**
     * @return {?}
     */
    function () {
        return this.disabled;
    };
    ProcessAttachmentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-process-attachment-list',
                    template: "<adf-datatable  [rows]=\"attachments\" \n                [actions]=\"true\" \n                [loading]=\"isLoading\" \n                (rowDblClick)=\"openContent($event)\" \n                (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n                (executeRowAction)=\"onExecuteRowAction($event)\">\n\n                <adf-no-content-template>\n                    <ng-template>\n                        <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                        <ng-template #defaulEmptyList>\n                            <adf-empty-list>\n                                <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                    {{'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.HEADER' | translate}}\n                                </div>\n                            </adf-empty-list>\n                        </ng-template>\n                    </ng-template>\n                </adf-no-content-template>\n\n    <data-columns>\n        <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_PROCESS_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n        <data-column key=\"name\" type=\"text\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.NAME' | translate}}\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n        <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.CREATED' | translate}}\"></data-column>\n    </data-columns>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <!--Add your custom loading template here-->\n            <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n            </mat-progress-spinner>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessAttachmentListComponent.ctorParameters = function () { return [
        { type: ProcessContentService },
        { type: ContentService },
        { type: ThumbnailService },
        { type: NgZone }
    ]; };
    ProcessAttachmentListComponent.propDecorators = {
        emptyTemplate: [{ type: ContentChild, args: [EmptyListComponent,] }],
        processInstanceId: [{ type: Input }],
        disabled: [{ type: Input }],
        attachmentClick: [{ type: Output }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return ProcessAttachmentListComponent;
}());
export { ProcessAttachmentListComponent };
if (false) {
    /** @type {?} */
    ProcessAttachmentListComponent.prototype.emptyTemplate;
    /**
     * (**required**) The ID of the process instance to display.
     * @type {?}
     */
    ProcessAttachmentListComponent.prototype.processInstanceId;
    /**
     * Disable/Enable read-only mode for attachment list.
     * @type {?}
     */
    ProcessAttachmentListComponent.prototype.disabled;
    /**
     * Emitted when the attachment is double-clicked or the
     * view option is selected from the context menu by the user from
     * within the component. Returns a Blob representing the object
     * that was clicked.
     * @type {?}
     */
    ProcessAttachmentListComponent.prototype.attachmentClick;
    /**
     * Emitted when the attachment list has fetched all the attachments.
     * Returns a list of attachments.
     * @type {?}
     */
    ProcessAttachmentListComponent.prototype.success;
    /**
     * Emitted when the attachment list is not able to fetch the attachments
     * (eg, following a network error).
     * @type {?}
     */
    ProcessAttachmentListComponent.prototype.error;
    /** @type {?} */
    ProcessAttachmentListComponent.prototype.hasCustomTemplate;
    /** @type {?} */
    ProcessAttachmentListComponent.prototype.attachments;
    /** @type {?} */
    ProcessAttachmentListComponent.prototype.isLoading;
    /**
     * @type {?}
     * @private
     */
    ProcessAttachmentListComponent.prototype.activitiContentService;
    /**
     * @type {?}
     * @private
     */
    ProcessAttachmentListComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ProcessAttachmentListComponent.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    ProcessAttachmentListComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,