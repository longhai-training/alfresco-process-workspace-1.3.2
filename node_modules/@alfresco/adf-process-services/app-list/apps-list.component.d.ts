/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService, TranslationService, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { AfterContentInit, EventEmitter, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { AppDefinitionRepresentationModel } from '../task-list';
export declare class AppsListComponent implements OnInit, AfterContentInit {
    private appsProcessService;
    private translationService;
    static LAYOUT_LIST: string;
    static LAYOUT_GRID: string;
    static DEFAULT_TASKS_APP: string;
    static DEFAULT_TASKS_APP_NAME: string;
    static DEFAULT_TASKS_APP_THEME: string;
    static DEFAULT_TASKS_APP_ICON: string;
    static DEFAULT_TASKS_APP_MATERIAL_ICON: string;
    emptyCustomContent: CustomEmptyContentTemplateDirective;
    /** (**required**) Defines the layout of the apps. There are two possible
     * values, "GRID" and "LIST".
     */
    layoutType: string;
    /** Provides a way to filter the apps to show. */
    filtersAppId: any[];
    /** Emitted when an app entry is clicked. */
    appClick: EventEmitter<AppDefinitionRepresentationModel>;
    /** Emitted when an error occurs. */
    error: EventEmitter<any>;
    private appsObserver;
    apps$: Observable<AppDefinitionRepresentationModel>;
    currentApp: AppDefinitionRepresentationModel;
    appList: AppDefinitionRepresentationModel[];
    private iconsMDL;
    loading: boolean;
    hasEmptyCustomContentTemplate: boolean;
    constructor(appsProcessService: AppsProcessService, translationService: TranslationService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    private load;
    isDefaultApp(app: any): boolean;
    getAppName(app: any): Observable<any>;
    /**
     * Pass the selected app as next
     * @param app
     */
    selectApp(app: AppDefinitionRepresentationModel): void;
    /**
     * Return true if the appId is the current app
     * @param appId
     */
    isSelected(appId: number): boolean;
    private filterApps;
    /**
     * Check if the value of the layoutType property is an allowed value
     */
    isValidType(): boolean;
    /**
     * Assign the default value to LayoutType
     */
    setDefaultLayoutType(): void;
    /**
     * Return true if the layout type is LIST
     */
    isList(): boolean;
    /**
     * Return true if the layout type is GRID
     */
    isGrid(): boolean;
    isEmpty(): boolean;
    isLoading(): boolean;
    getTheme(app: AppDefinitionRepresentationModel): string;
    getBackgroundIcon(app: AppDefinitionRepresentationModel): string;
}
