/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Observable } from 'rxjs';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
export declare class ProcessFilterService {
    private alfrescoApiService;
    constructor(alfrescoApiService: AlfrescoApiService);
    /**
     * Gets all filters defined for a Process App.
     * @param appId ID of the target app
     * @returns Array of filter details
     */
    getProcessFilters(appId: number): Observable<FilterProcessRepresentationModel[]>;
    /**
     * Retrieves the process filter by ID.
     * @param filterId ID of the filter
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    getProcessFilterById(filterId: number, appId?: number): Observable<FilterProcessRepresentationModel>;
    /**
     * Retrieves the process filter by name.
     * @param filterName Name of the filter
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    getProcessFilterByName(filterName: string, appId?: number): Observable<FilterProcessRepresentationModel>;
    /**
     * Creates and returns the default filters for an app.
     * @param appId ID of the target app
     * @returns Default filters just created
     */
    createDefaultFilters(appId: number): Observable<FilterProcessRepresentationModel[]>;
    /**
     * Creates and returns a filter that matches "running" process instances.
     * @param appId ID of the target app
     * @returns Filter just created
     */
    getRunningFilterInstance(appId: number): FilterProcessRepresentationModel;
    /**
     * Returns a static Completed filter instance.
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    private getCompletedFilterInstance;
    /**
     * Returns a static All filter instance.
     * @param appId ID of the target app
     * @returns Details of the filter
     */
    private getAllFilterInstance;
    /**
     * Adds a filter.
     * @param filter The filter to add
     * @returns The filter just added
     */
    addProcessFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel>;
    /**
     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
     * @param appId ID of the target app
     * @returns List of filter details
     */
    callApiProcessFilters(appId?: number): Promise<import("@alfresco/js-api/src/api/activiti-rest-api/model/resultListDataRepresentationUserProcessInstanceFilterRepresentation").ResultListDataRepresentationUserProcessInstanceFilterRepresentation>;
    private handleProcessError;
}
