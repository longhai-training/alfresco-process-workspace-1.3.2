/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ActivitiContentService, AppConfigService, FormValues } from '@alfresco/adf-core';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessDefinitionRepresentation } from './../models/process-definition.model';
import { ProcessInstance } from './../models/process-instance.model';
import { ProcessService } from './../services/process.service';
import { FormControl, AbstractControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { MatAutocompleteTrigger } from '@angular/material';
import { StartFormComponent } from '../../form';
export declare class StartProcessInstanceComponent implements OnChanges, OnInit {
    private activitiProcess;
    private activitiContentService;
    private appConfig;
    MAX_LENGTH: number;
    /** (optional) Limit the list of processes that can be started to those
     * contained in the specified app.
     */
    appId: number;
    /** (optional) Definition name of the process to start. */
    processDefinitionName: string;
    /** Variables in the input to the process
     * [RestVariable](https://github.com/Alfresco/alfresco-js-api/tree/master/src/alfresco-activiti-rest-api/docs/RestVariable.md).
     */
    variables: ProcessInstanceVariable[];
    /** Parameter to pass form field values in the start form if one is associated. */
    values: FormValues;
    /** (optional) Name to assign to the current process. */
    name: string;
    /** Hide or show the process selection dropdown. */
    showSelectProcessDropdown: boolean;
    /** (optional) Parameter to enable selection of process when filtering. */
    processFilterSelector: boolean;
    /** Emitted when the process starts. */
    start: EventEmitter<ProcessInstance>;
    /** Emitted when the process is canceled. */
    cancel: EventEmitter<ProcessInstance>;
    /** Emitted when an error occurs. */
    error: EventEmitter<ProcessInstance>;
    startForm: StartFormComponent;
    inputAutocomplete: MatAutocompleteTrigger;
    processDefinitions: ProcessDefinitionRepresentation[];
    selectedProcessDef: ProcessDefinitionRepresentation;
    errorMessageId: string;
    processNameInput: FormControl;
    processDefinitionInput: FormControl;
    filteredProcesses: Observable<ProcessDefinitionRepresentation[]>;
    maxProcessNameLength: number;
    constructor(activitiProcess: ProcessService, activitiContentService: ActivitiContentService, appConfig: AppConfigService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _filter;
    getSelectedProcess(selectedProcess: any): ProcessDefinitionRepresentation;
    loadStartProcess(): void;
    isProcessDefinitionsEmpty(): boolean;
    getAlfrescoRepositoryName(): string;
    moveNodeFromCStoPS(): void;
    startProcess(outcome?: string): void;
    cancelStartProcess(): void;
    hasStartForm(): boolean;
    isProcessDefinitionEmpty(): string | true;
    isStartFormMissingOrValid(): boolean;
    validateForm(): boolean;
    private resetSelectedProcessDefinition;
    private resetErrorMessage;
    hasErrorMessage(): boolean;
    onOutcomeClick(outcome: string): void;
    reset(): void;
    hasProcessName(): boolean;
    displayFn(process: any): any;
    displayDropdown(event: any): void;
    readonly nameController: AbstractControl;
}
