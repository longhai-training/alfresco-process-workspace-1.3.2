/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormComponent } from './form.component';
import { FormService, WidgetVisibilityService, FormRenderingService, FormOutcomeModel } from '@alfresco/adf-core';
export class StartFormComponent extends FormComponent {
    /**
     * @param {?} formService
     * @param {?} visibilityService
     * @param {?} formRenderingService
     */
    constructor(formService, visibilityService, formRenderingService) {
        super(formService, visibilityService, null, null, formRenderingService);
        /**
         * Should form outcome buttons be shown?
         */
        this.showOutcomeButtons = true;
        /**
         * Should the refresh button be shown?
         */
        this.showRefreshButton = true;
        /**
         * Is the form read-only (ie, can't be edited)?
         */
        this.readOnlyForm = false;
        /**
         * Emitted when the user clicks one of the outcome buttons that completes the form.
         */
        this.outcomeClick = new EventEmitter();
        /**
         * Emitted when a field of the form is clicked.
         */
        this.formContentClicked = new EventEmitter();
        this.outcomesContainer = null;
        this.showTitle = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.formService.formContentClicked.subscribe((/**
         * @param {?} content
         * @return {?}
         */
        (content) => {
            this.formContentClicked.emit(content);
        })), this.formService.validateForm.subscribe((/**
         * @param {?} validateFormEvent
         * @return {?}
         */
        (validateFormEvent) => {
            if (validateFormEvent.errorsField.length > 0) {
                this.formError.next(validateFormEvent.errorsField);
            }
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const processDefinitionId = changes['processDefinitionId'];
        if (processDefinitionId && processDefinitionId.currentValue) {
            this.visibilityService.cleanProcessVariable();
            this.getStartFormDefinition(processDefinitionId.currentValue);
            return;
        }
        /** @type {?} */
        const processId = changes['processId'];
        if (processId && processId.currentValue) {
            this.visibilityService.cleanProcessVariable();
            this.loadStartForm(processId.currentValue);
            return;
        }
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    loadStartForm(processId) {
        this.formService.getProcessInstance(processId)
            .subscribe((/**
         * @param {?} instance
         * @return {?}
         */
        (instance) => {
            this.formService
                .getStartFormInstance(processId)
                .subscribe((/**
             * @param {?} form
             * @return {?}
             */
            (form) => {
                this.formName = form.name;
                if (instance.variables) {
                    form.processVariables = instance.variables;
                }
                this.form = this.parseForm(form);
                this.visibilityService.refreshVisibility(this.form);
                this.form.validateForm();
                this.form.readOnly = this.readOnlyForm;
                this.onFormLoaded(this.form);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => this.handleError(error)));
        }));
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    getStartFormDefinition(processId) {
        this.formService
            .getStartFormDefinition(processId)
            .subscribe((/**
         * @param {?} form
         * @return {?}
         */
        (form) => {
            this.formName = form.processDefinitionName;
            this.form = this.parseForm(form);
            this.visibilityService.refreshVisibility(this.form);
            this.form.validateForm();
            this.form.readOnly = this.readOnlyForm;
            this.onFormLoaded(this.form);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => this.handleError(error)));
    }
    /**
     * @override
     * @param {?} outcome
     * @param {?} isFormReadOnly
     * @return {?}
     */
    isOutcomeButtonVisible(outcome, isFormReadOnly) {
        if (outcome && outcome.isSystem && (outcome.name === FormOutcomeModel.SAVE_ACTION ||
            outcome.name === FormOutcomeModel.COMPLETE_ACTION)) {
            return false;
        }
        else if (outcome && outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
            return true;
        }
        return super.isOutcomeButtonVisible(outcome, isFormReadOnly);
    }
    /**
     * @override
     * @return {?}
     */
    saveTaskForm() {
        // do nothing
    }
    /**
     * @override
     * @return {?}
     */
    onRefreshClicked() {
        if (this.processDefinitionId) {
            this.visibilityService.cleanProcessVariable();
            this.getStartFormDefinition(this.processDefinitionId);
        }
        else if (this.processId) {
            this.visibilityService.cleanProcessVariable();
            this.loadStartForm(this.processId);
        }
    }
    /**
     * @param {?=} outcome
     * @return {?}
     */
    completeTaskForm(outcome) {
        this.outcomeClick.emit(outcome);
    }
}
StartFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-start-form',
                template: "<div class=\"adf-start-form-container\" *ngIf=\"hasForm()\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h2 *ngIf=\"isTitleEnabled()\" class=\"mdl-card__title-text\">{{form.taskName}}</h2>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf=\"form.hasTabs()\">\n                <tabs-widget [tabs]=\"form.tabs\" (formTabChanged)=\"checkVisibility($event);\"></tabs-widget>\n            </div>\n\n            <div *ngIf=\"!form.hasTabs() && form.hasFields()\">\n                <div *ngFor=\"let field of form.fields\">\n                    <adf-form-field [field]=\"field.field\"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-content class=\"adf-start-form-actions\" *ngIf=\"showOutcomeButtons && form.hasOutcomes()\"\n                          #outcomesContainer>\n            <ng-content select=\"[adf-form-custom-button], [form-custom-button]\"></ng-content>\n\n            <button *ngFor=\"let outcome of form.outcomes\"\n                    mat-button\n                    [attr.data-automation-id]=\"'adf-form-' + outcome.name  | lowercase\"\n                    [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.mdl-button--colored]=\"!outcome.isSystem\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                {{ outcome.name | uppercase | translate | uppercase }}\n            </button>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"showRefreshButton\">\n            <button mat-button\n                    (click)=\"onRefreshClicked()\">\n                <mat-icon>refresh</mat-icon>\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
StartFormComponent.ctorParameters = () => [
    { type: FormService },
    { type: WidgetVisibilityService },
    { type: FormRenderingService }
];
StartFormComponent.propDecorators = {
    processDefinitionId: [{ type: Input }],
    processId: [{ type: Input }],
    showOutcomeButtons: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    readOnlyForm: [{ type: Input }],
    outcomeClick: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    outcomesContainer: [{ type: ViewChild, args: ['outcomesContainer', {},] }]
};
if (false) {
    /**
     * Definition ID of the process to start.
     * @type {?}
     */
    StartFormComponent.prototype.processDefinitionId;
    /**
     * Process ID of the process to start.
     * @type {?}
     */
    StartFormComponent.prototype.processId;
    /**
     * Should form outcome buttons be shown?
     * @type {?}
     */
    StartFormComponent.prototype.showOutcomeButtons;
    /**
     * Should the refresh button be shown?
     * @type {?}
     */
    StartFormComponent.prototype.showRefreshButton;
    /**
     * Is the form read-only (ie, can't be edited)?
     * @type {?}
     */
    StartFormComponent.prototype.readOnlyForm;
    /**
     * Emitted when the user clicks one of the outcome buttons that completes the form.
     * @type {?}
     */
    StartFormComponent.prototype.outcomeClick;
    /**
     * Emitted when a field of the form is clicked.
     * @type {?}
     */
    StartFormComponent.prototype.formContentClicked;
    /** @type {?} */
    StartFormComponent.prototype.outcomesContainer;
}
//# sourceMappingURL=data:application/json;base64,