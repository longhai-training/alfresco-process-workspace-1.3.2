/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
export class AttachFileWidgetDialogService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        this.dialog = dialog;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} ecmHost
     * @param {?=} actionName
     * @param {?=} context
     * @return {?} Information about the chosen file(s)
     */
    openLogin(ecmHost, actionName, context) {
        /** @type {?} */
        const titleString = `Please log in for ${ecmHost}`;
        /** @type {?} */
        const selected = new Subject();
        selected.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        const data = {
            title: titleString,
            actionName,
            selected,
            ecmHost,
            context,
            isSelectionValid: this.isNodeFile.bind(this)
        };
        this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');
        return selected;
    }
    /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    openLoginDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(AttachFileWidgetDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
    }
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    close() {
        this.dialog.closeAll();
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    isNodeFile(entry) {
        return entry.isFile;
    }
}
AttachFileWidgetDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AttachFileWidgetDialogService.ctorParameters = () => [
    { type: MatDialog }
];
AttachFileWidgetDialogService.propDecorators = {
    error: [{ type: Output }]
};
/** @nocollapse */ AttachFileWidgetDialogService.ngInjectableDef = i0.defineInjectable({ factory: function AttachFileWidgetDialogService_Factory() { return new AttachFileWidgetDialogService(i0.inject(i1.MatDialog)); }, token: AttachFileWidgetDialogService, providedIn: "root" });
if (false) {
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    AttachFileWidgetDialogService.prototype.error;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC13aWRnZXQvYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUczQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7O0FBS3hGLE1BQU0sT0FBTyw2QkFBNkI7Ozs7SUFNdEMsWUFBb0IsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVzs7OztRQUZyQyxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFHbkQsQ0FBQzs7Ozs7Ozs7SUFRRCxTQUFTLENBQUMsT0FBZSxFQUFFLFVBQW1CLEVBQUUsT0FBZ0I7O2NBQ3RELFdBQVcsR0FBVyxxQkFBcUIsT0FBTyxFQUFFOztjQUNwRCxRQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVU7UUFDdEMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbEMsQ0FBQyxDQUFDOztjQUVHLElBQUksR0FBd0M7WUFDOUMsS0FBSyxFQUFHLFdBQVc7WUFDbkIsVUFBVTtZQUNWLFFBQVE7WUFDUixPQUFPO1lBQ1AsT0FBTztZQUNQLGdCQUFnQixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLCtCQUErQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7Ozs7Ozs7O0lBRU8sZUFBZSxDQUFDLElBQXlDLEVBQUUsaUJBQXlCLEVBQUUsV0FBbUI7UUFDN0csSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsK0JBQStCLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ25ILENBQUM7Ozs7O0lBR0QsS0FBSztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Ozs7O0lBRU8sVUFBVSxDQUFDLEtBQVc7UUFDMUIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3hCLENBQUM7OztZQWpESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFUUSxTQUFTOzs7b0JBYWIsTUFBTTs7Ozs7Ozs7SUFBUCw4Q0FDbUQ7Ozs7O0lBRXZDLCtDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0YWJsZSwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdHRhY2hGaWxlV2lkZ2V0RGlhbG9nQ29tcG9uZW50RGF0YSB9IGZyb20gJy4vYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy1jb21wb25lbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEF0dGFjaEZpbGVXaWRnZXREaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2F0dGFjaC1maWxlLXdpZGdldC1kaWFsb2cuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBdHRhY2hGaWxlV2lkZ2V0RGlhbG9nU2VydmljZSB7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2cpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIGRpYWxvZyB0byBjaG9vc2UgYSBmaWxlIHRvIHVwbG9hZC5cbiAgICAgKiBAcGFyYW0gYWN0aW9uIE5hbWUgb2YgdGhlIGFjdGlvbiB0byBzaG93IGluIHRoZSB0aXRsZVxuICAgICAqIEBwYXJhbSBjb250ZW50RW50cnkgSXRlbSB0byB1cGxvYWRcbiAgICAgKiBAcmV0dXJucyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hvc2VuIGZpbGUocylcbiAgICAgKi9cbiAgICBvcGVuTG9naW4oZWNtSG9zdDogc3RyaW5nLCBhY3Rpb25OYW1lPzogc3RyaW5nLCBjb250ZXh0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTxOb2RlW10+IHtcbiAgICAgICAgY29uc3QgdGl0bGVTdHJpbmc6IHN0cmluZyA9IGBQbGVhc2UgbG9nIGluIGZvciAke2VjbUhvc3R9YDtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBuZXcgU3ViamVjdDxOb2RlW10+KCk7XG4gICAgICAgIHNlbGVjdGVkLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBjb21wbGV0ZTogdGhpcy5jbG9zZS5iaW5kKHRoaXMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRhdGE6IEF0dGFjaEZpbGVXaWRnZXREaWFsb2dDb21wb25lbnREYXRhID0ge1xuICAgICAgICAgICAgdGl0bGUgOiB0aXRsZVN0cmluZyxcbiAgICAgICAgICAgIGFjdGlvbk5hbWUsXG4gICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgIGVjbUhvc3QsXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgaXNTZWxlY3Rpb25WYWxpZDogdGhpcy5pc05vZGVGaWxlLmJpbmQodGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm9wZW5Mb2dpbkRpYWxvZyhkYXRhLCAnYWRmLWF0dGFjaC1maWxlLXdpZGdldC1kaWFsb2cnLCAnNjMwcHgnKTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgb3BlbkxvZ2luRGlhbG9nKGRhdGE6IEF0dGFjaEZpbGVXaWRnZXREaWFsb2dDb21wb25lbnREYXRhLCBjdXJyZW50UGFuZWxDbGFzczogc3RyaW5nLCBjaG9zZW5XaWR0aDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nLm9wZW4oQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudCwgeyBkYXRhLCBwYW5lbENsYXNzOiBjdXJyZW50UGFuZWxDbGFzcywgd2lkdGg6IGNob3NlbldpZHRoIH0pO1xuICAgIH1cblxuICAgIC8qKiBDbG9zZXMgdGhlIGN1cnJlbnRseSBvcGVuIGRpYWxvZy4gKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2VBbGwoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzTm9kZUZpbGUoZW50cnk6IE5vZGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5LmlzRmlsZTtcbiAgICB9XG5cbn1cbiJdfQ==