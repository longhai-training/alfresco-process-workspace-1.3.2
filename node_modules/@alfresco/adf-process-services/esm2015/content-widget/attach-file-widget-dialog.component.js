/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material';
import { ExternalAlfrescoApiService, AlfrescoApiService, AuthenticationService, LoginDialogPanelComponent, SitesService, SearchService } from '@alfresco/adf-core';
import { DocumentListService, ContentNodeSelectorService } from '@alfresco/adf-content-services';
export class AttachFileWidgetDialogComponent {
    /**
     * @param {?} data
     * @param {?} externalApiService
     */
    constructor(data, externalApiService) {
        this.data = data;
        this.externalApiService = externalApiService;
        ((/** @type {?} */ (externalApiService))).init(data.ecmHost, data.context);
        this.buttonActionName = data.actionName ? `ATTACH-FILE.ACTIONS.${data.actionName.toUpperCase()}` : 'ATTACH-FILE.ACTIONS.CHOOSE';
    }
    /**
     * @return {?}
     */
    isLoggedIn() {
        return this.externalApiService.getInstance().isLoggedIn();
    }
    /**
     * @return {?}
     */
    performLogin() {
        this.loginPanel.submitForm();
    }
    /**
     * @return {?}
     */
    close() {
        this.data.selected.complete();
    }
    /**
     * @param {?} nodeList
     * @return {?}
     */
    onSelect(nodeList) {
        if (nodeList && nodeList[0].isFile) {
            this.chosenNode = nodeList;
        }
        else {
            this.chosenNode = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.data.selected.next(this.chosenNode);
        this.data.selected.complete();
    }
}
AttachFileWidgetDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-attach-file-widget-dialog',
                template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">{{data?.title}}\n</header>\n\n<mat-dialog-content class=\"adf-login-dialog-content\">\n    <adf-login-dialog-panel id=\"attach-file-login-panel\" #adfLoginPanel *ngIf=\"!isLoggedIn()\">\n    </adf-login-dialog-panel>\n    <adf-content-node-selector-panel *ngIf=\"isLoggedIn()\"\n                                     id=\"attach-file-content-node\"\n                                     [isSelectionValid]=\"data?.isSelectionValid\"\n                                     (select)=\"onSelect($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"attach-file-dialog-actions-cancel\">{{ 'ATTACH-FILE.ACTIONS.CANCEL' | translate }}\n    </button>\n\n    <button *ngIf=\"!isLoggedIn()\"\n        mat-button\n        (click)=\"performLogin()\"\n        data-automation-id=\"attach-file-dialog-actions-login\">{{ 'ATTACH-FILE.ACTIONS.LOGIN' | translate }}\n    </button>\n\n    <button *ngIf=\"isLoggedIn()\"\n        mat-button\n        [disabled]=\"!chosenNode\"\n        class=\"adf-choose-action\"\n        (click)=\"onClick($event)\"\n        data-automation-id=\"attach-file-dialog-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [AuthenticationService,
                    DocumentListService,
                    SitesService,
                    ContentNodeSelectorService,
                    SearchService,
                    { provide: AlfrescoApiService, useClass: ExternalAlfrescoApiService }],
                styles: [""]
            }] }
];
/** @nocollapse */
AttachFileWidgetDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: AlfrescoApiService }
];
AttachFileWidgetDialogComponent.propDecorators = {
    loginPanel: [{ type: ViewChild, args: ['adfLoginPanel',] }]
};
if (false) {
    /** @type {?} */
    AttachFileWidgetDialogComponent.prototype.loginPanel;
    /** @type {?} */
    AttachFileWidgetDialogComponent.prototype.chosenNode;
    /** @type {?} */
    AttachFileWidgetDialogComponent.prototype.buttonActionName;
    /** @type {?} */
    AttachFileWidgetDialogComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetDialogComponent.prototype.externalApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LXdpZGdldC9hdHRhY2gtZmlsZS13aWRnZXQtZGlhbG9nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSx5QkFBeUIsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkssT0FBTyxFQUFFLG1CQUFtQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFnQmpHLE1BQU0sT0FBTywrQkFBK0I7Ozs7O0lBUXhDLFlBQTRDLElBQXlDLEVBQ2pFLGtCQUFzQztRQURkLFNBQUksR0FBSixJQUFJLENBQXFDO1FBQ2pFLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEQsQ0FBQyxtQkFBTSxrQkFBa0IsRUFBQSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQztJQUNwSSxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlELENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLFFBQWdCO1FBQ3JCLElBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7U0FDOUI7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsS0FBVTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7O1lBakRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsK0JBQStCO2dCQUN6Qyw2NENBQXlEO2dCQUV6RCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsU0FBUyxFQUFFLENBQUUscUJBQXFCO29CQUNyQixtQkFBbUI7b0JBQ25CLFlBQVk7b0JBQ1osMEJBQTBCO29CQUMxQixhQUFhO29CQUNiLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBQyxDQUFFOzthQUN0Rjs7Ozs0Q0FTZ0IsTUFBTSxTQUFDLGVBQWU7WUF6QkYsa0JBQWtCOzs7eUJBbUJsRCxTQUFTLFNBQUMsZUFBZTs7OztJQUExQixxREFDc0M7O0lBRXRDLHFEQUFtQjs7SUFDbkIsMkRBQWlCOztJQUVMLCtDQUF5RTs7Ozs7SUFDekUsNkRBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIFZpZXdFbmNhcHN1bGF0aW9uLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IEV4dGVybmFsQWxmcmVzY29BcGlTZXJ2aWNlLCBBbGZyZXNjb0FwaVNlcnZpY2UsIEF1dGhlbnRpY2F0aW9uU2VydmljZSwgTG9naW5EaWFsb2dQYW5lbENvbXBvbmVudCwgU2l0ZXNTZXJ2aWNlLCBTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IERvY3VtZW50TGlzdFNlcnZpY2UsIENvbnRlbnROb2RlU2VsZWN0b3JTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzJztcbmltcG9ydCB7IEF0dGFjaEZpbGVXaWRnZXREaWFsb2dDb21wb25lbnREYXRhIH0gZnJvbSAnLi9hdHRhY2gtZmlsZS13aWRnZXQtZGlhbG9nLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1hdHRhY2gtZmlsZS13aWRnZXQtZGlhbG9nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgcHJvdmlkZXJzOiBbIEF1dGhlbnRpY2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICAgRG9jdW1lbnRMaXN0U2VydmljZSxcbiAgICAgICAgICAgICAgICAgU2l0ZXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICBDb250ZW50Tm9kZVNlbGVjdG9yU2VydmljZSxcbiAgICAgICAgICAgICAgICAgU2VhcmNoU2VydmljZSxcbiAgICAgICAgICAgICAgICAgeyBwcm92aWRlOiBBbGZyZXNjb0FwaVNlcnZpY2UsIHVzZUNsYXNzOiBFeHRlcm5hbEFsZnJlc2NvQXBpU2VydmljZX0gXVxufSlcbmV4cG9ydCBjbGFzcyBBdHRhY2hGaWxlV2lkZ2V0RGlhbG9nQ29tcG9uZW50IHtcblxuICAgIEBWaWV3Q2hpbGQoJ2FkZkxvZ2luUGFuZWwnKVxuICAgIGxvZ2luUGFuZWw6IExvZ2luRGlhbG9nUGFuZWxDb21wb25lbnQ7XG5cbiAgICBjaG9zZW5Ob2RlOiBOb2RlW107XG4gICAgYnV0dG9uQWN0aW9uTmFtZTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTUFUX0RJQUxPR19EQVRBKSBwdWJsaWMgZGF0YTogQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudERhdGEsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBleHRlcm5hbEFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSkge1xuICAgICAgICAoPGFueT4gZXh0ZXJuYWxBcGlTZXJ2aWNlKS5pbml0KGRhdGEuZWNtSG9zdCwgZGF0YS5jb250ZXh0KTtcbiAgICAgICAgdGhpcy5idXR0b25BY3Rpb25OYW1lID0gZGF0YS5hY3Rpb25OYW1lID8gYEFUVEFDSC1GSUxFLkFDVElPTlMuJHtkYXRhLmFjdGlvbk5hbWUudG9VcHBlckNhc2UoKX1gIDogJ0FUVEFDSC1GSUxFLkFDVElPTlMuQ0hPT1NFJztcbiAgICB9XG5cbiAgICBpc0xvZ2dlZEluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlcm5hbEFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5pc0xvZ2dlZEluKCk7XG4gICAgfVxuXG4gICAgcGVyZm9ybUxvZ2luKCkge1xuICAgICAgICB0aGlzLmxvZ2luUGFuZWwuc3VibWl0Rm9ybSgpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0ZWQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChub2RlTGlzdDogTm9kZVtdKSB7XG4gICAgICAgIGlmIChub2RlTGlzdCAmJiBub2RlTGlzdFswXS5pc0ZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2hvc2VuTm9kZSA9IG5vZGVMaXN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaG9zZW5Ob2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2xpY2soZXZlbnQ6IGFueSkge1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0ZWQubmV4dCh0aGlzLmNob3Nlbk5vZGUpO1xuICAgICAgICB0aGlzLmRhdGEuc2VsZWN0ZWQuY29tcGxldGUoKTtcbiAgICB9XG5cbn1cbiJdfQ==