/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class FilterProcessRepresentationModel {
    /**
     * @param {?} obj
     */
    constructor(obj) {
        if (obj) {
            this.id = obj.id || null;
            this.appId = obj.appId || null;
            this.name = obj.name || null;
            this.recent = !!obj.recent;
            this.icon = obj.icon || null;
            this.filter = obj.filter || null;
            this.index = obj.index;
        }
    }
    /**
     * @return {?}
     */
    hasFilter() {
        return !!this.filter;
    }
}
if (false) {
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.appId;
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.filter;
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.icon;
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.id;
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.index;
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.name;
    /** @type {?} */
    FilterProcessRepresentationModel.prototype.recent;
}
/**
 * This object represent the parameters of a process filter.
 */
export class ProcessFilterParamRepresentationModel {
    /**
     * @param {?=} obj
     */
    constructor(obj) {
        this.processDefinitionId = obj.processDefinitionId || null;
        this.appDefinitionId = obj.appDefinitionId || null;
        this.processInstanceId = obj.processInstanceId || null;
        this.state = obj.state || null;
        this.sort = obj.sort || null;
        this.page = obj.page || null;
        this.size = obj.size || null;
    }
}
if (false) {
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.processDefinitionId;
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.processInstanceId;
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.appDefinitionId;
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.state;
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.sort;
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.page;
    /** @type {?} */
    ProcessFilterParamRepresentationModel.prototype.size;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXByb2Nlc3MubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwcm9jZXNzLWxpc3QvbW9kZWxzL2ZpbHRlci1wcm9jZXNzLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBLE1BQU0sT0FBTyxnQ0FBZ0M7Ozs7SUFTekMsWUFBWSxHQUFRO1FBQ2hCLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQztZQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO1lBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7WUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7WUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7OztJQUVELFNBQVM7UUFDTCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjs7O0lBdkJHLGlEQUFjOztJQUNkLGtEQUE0Qzs7SUFDNUMsZ0RBQWE7O0lBQ2IsOENBQVc7O0lBQ1gsaURBQWM7O0lBQ2QsZ0RBQWE7O0lBQ2Isa0RBQWdCOzs7OztBQXNCcEIsTUFBTSxPQUFPLHFDQUFxQzs7OztJQVU5QyxZQUFZLEdBQVM7UUFDakIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUM7UUFDM0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQztRQUNuRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQztRQUN2RCxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0lBQ2pDLENBQUM7Q0FDSjs7O0lBakJHLG9FQUE2Qjs7SUFDN0Isa0VBQTJCOztJQUMzQixnRUFBeUI7O0lBQ3pCLHNEQUFZOztJQUNaLHFEQUFXOztJQUNYLHFEQUFjOztJQUNkLHFEQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBQcm9jZXNzRmlsdGVyUmVxdWVzdFJlcHJlc2VudGF0aW9uLFxuICAgIFByb2Nlc3NJbnN0YW5jZUZpbHRlclJlcHJlc2VudGF0aW9uLFxuICAgIFVzZXJQcm9jZXNzSW5zdGFuY2VGaWx0ZXJSZXByZXNlbnRhdGlvblxufSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuZXhwb3J0IGNsYXNzIEZpbHRlclByb2Nlc3NSZXByZXNlbnRhdGlvbk1vZGVsIGltcGxlbWVudHMgVXNlclByb2Nlc3NJbnN0YW5jZUZpbHRlclJlcHJlc2VudGF0aW9uIHtcbiAgICBhcHBJZDogbnVtYmVyO1xuICAgIGZpbHRlcjogUHJvY2Vzc0luc3RhbmNlRmlsdGVyUmVwcmVzZW50YXRpb247XG4gICAgaWNvbjogc3RyaW5nO1xuICAgIGlkOiBudW1iZXI7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmVjZW50OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Iob2JqOiBhbnkpIHtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGhpcy5pZCA9IG9iai5pZCB8fCBudWxsO1xuICAgICAgICAgICAgdGhpcy5hcHBJZCA9IG9iai5hcHBJZCB8fCBudWxsO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gb2JqLm5hbWUgfHwgbnVsbDtcbiAgICAgICAgICAgIHRoaXMucmVjZW50ID0gISFvYmoucmVjZW50O1xuICAgICAgICAgICAgdGhpcy5pY29uID0gb2JqLmljb24gfHwgbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gb2JqLmZpbHRlciB8fCBudWxsO1xuICAgICAgICAgICAgdGhpcy5pbmRleCA9IG9iai5pbmRleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc0ZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5maWx0ZXI7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgb2JqZWN0IHJlcHJlc2VudCB0aGUgcGFyYW1ldGVycyBvZiBhIHByb2Nlc3MgZmlsdGVyLlxuICovXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0ZpbHRlclBhcmFtUmVwcmVzZW50YXRpb25Nb2RlbCBpbXBsZW1lbnRzIFByb2Nlc3NGaWx0ZXJSZXF1ZXN0UmVwcmVzZW50YXRpb24ge1xuXG4gICAgcHJvY2Vzc0RlZmluaXRpb25JZD86IHN0cmluZztcbiAgICBwcm9jZXNzSW5zdGFuY2VJZD86IHN0cmluZztcbiAgICBhcHBEZWZpbml0aW9uSWQ/OiBudW1iZXI7XG4gICAgc3RhdGU/OiBhbnk7XG4gICAgc29ydD86IGFueTtcbiAgICBwYWdlPzogbnVtYmVyO1xuICAgIHNpemU/OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzRGVmaW5pdGlvbklkID0gb2JqLnByb2Nlc3NEZWZpbml0aW9uSWQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5hcHBEZWZpbml0aW9uSWQgPSBvYmouYXBwRGVmaW5pdGlvbklkIHx8IG51bGw7XG4gICAgICAgIHRoaXMucHJvY2Vzc0luc3RhbmNlSWQgPSBvYmoucHJvY2Vzc0luc3RhbmNlSWQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG9iai5zdGF0ZSB8fCBudWxsO1xuICAgICAgICB0aGlzLnNvcnQgPSBvYmouc29ydCB8fCBudWxsO1xuICAgICAgICB0aGlzLnBhZ2UgPSBvYmoucGFnZSB8fCBudWxsO1xuICAgICAgICB0aGlzLnNpemUgPSBvYmouc2l6ZSB8fCBudWxsO1xuICAgIH1cbn1cbiJdfQ==