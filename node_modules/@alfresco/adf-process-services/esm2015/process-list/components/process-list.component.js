/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';
import { AppConfigService, PaginationComponent, UserPreferencesService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';
import { processPresetsDefaultModel } from '../models/process-preset.model';
import { ProcessService } from '../services/process.service';
import { BehaviorSubject } from 'rxjs';
import moment from 'moment-es6';
export class ProcessInstanceListComponent extends DataTableSchema {
    /**
     * @param {?} processService
     * @param {?} userPreferences
     * @param {?} appConfig
     */
    constructor(processService, userPreferences, appConfig) {
        super(appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel);
        this.processService = processService;
        this.userPreferences = userPreferences;
        this.FORMAT_DATE = 'll';
        /**
         * The page number of the processes to fetch.
         */
        this.page = 0;
        /**
         * The number of processes to fetch in each page.
         */
        this.size = PaginationComponent.DEFAULT_PAGINATION.maxItems;
        /**
         * Toggles multiple row selection, which renders checkboxes at the beginning of each row
         */
        this.multiselect = false;
        /**
         * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
         * multiple rows.
         */
        this.selectionMode = 'single'; // none|single|multiple
        // none|single|multiple
        /**
         * Toggles default selection of the first row
         */
        this.selectFirstRow = true;
        /**
         * Emitted when a row in the process list is clicked.
         */
        this.rowClick = new EventEmitter();
        /**
         * Emitted when the list of process instances has been loaded successfully from the server.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs while loading the list of process instances from the server.
         */
        this.error = new EventEmitter();
        this.isLoading = true;
        this.rows = [];
        this.sorting = ['created', 'desc'];
        this.size = this.userPreferences.paginationSize;
        this.pagination = new BehaviorSubject((/** @type {?} */ ({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        })));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.createDatatableSchema();
        if (this.data && this.data.getColumns().length === 0) {
            this.data.setColumns(this.columns);
        }
        if (this.appId != null) {
            this.reload();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes)) {
            if (this.isSortChanged(changes)) {
                this.sorting = this.sort ? this.sort.split('-') : this.sorting;
            }
            this.reload();
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isSortChanged(changes) {
        /** @type {?} */
        const actualSort = changes['sort'];
        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isPropertyChanged(changes) {
        /** @type {?} */
        let changed = false;
        /** @type {?} */
        const appId = changes['appId'];
        /** @type {?} */
        const processDefinitionId = changes['processDefinitionId'];
        /** @type {?} */
        const processInstanceId = changes['processInstanceId'];
        /** @type {?} */
        const state = changes['state'];
        /** @type {?} */
        const sort = changes['sort'];
        /** @type {?} */
        const page = changes['page'];
        /** @type {?} */
        const size = changes['size'];
        if (appId && appId.currentValue) {
            changed = true;
        }
        else if (processDefinitionId) {
            changed = true;
        }
        else if (processInstanceId) {
            changed = true;
        }
        else if (state && state.currentValue) {
            changed = true;
        }
        else if (sort && sort.currentValue) {
            changed = true;
        }
        else if (page && page.currentValue !== page.previousValue) {
            changed = true;
        }
        else if (size && size.currentValue !== size.previousValue) {
            changed = true;
        }
        return changed;
    }
    /**
     * @return {?}
     */
    reload() {
        this.requestNode = this.createRequestNode();
        this.load(this.requestNode);
    }
    /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    load(requestNode) {
        this.isLoading = true;
        this.processService.getProcesses(requestNode)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.rows = this.optimizeProcessDetails(response.data);
            this.selectFirst();
            this.success.emit(response);
            this.isLoading = false;
            this.pagination.next({
                count: response.data.length,
                maxItems: this.size,
                skipCount: this.page * this.size,
                totalItems: response.total
            });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.error.emit(error);
            this.isLoading = false;
        }));
    }
    /**
     * Select the first instance of a list if present
     * @return {?}
     */
    selectFirst() {
        if (this.selectFirstRow) {
            if (!this.isListEmpty()) {
                /** @type {?} */
                const dataRow = this.rows[0];
                dataRow.isSelected = true;
                this.currentInstanceId = dataRow['id'];
            }
            else {
                this.currentInstanceId = null;
            }
        }
    }
    /**
     * Return the current id
     * @return {?}
     */
    getCurrentId() {
        return this.currentInstanceId;
    }
    /**
     * Check if the list is empty
     * @return {?}
     */
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    /**
     * Emit the event rowClick passing the current task id when the row is clicked
     * @param {?} event
     * @return {?}
     */
    onRowClick(event) {
        /** @type {?} */
        const item = event;
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    /**
     * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row
     * @param {?} event
     * @return {?}
     */
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    /**
     * Optimize name field
     * @private
     * @param {?} instances
     * @return {?}
     */
    optimizeProcessDetails(instances) {
        instances = instances.map((/**
         * @param {?} instance
         * @return {?}
         */
        (instance) => {
            instance.name = this.getProcessNameOrDescription(instance, 'medium');
            if (instance.started) {
                instance.started = moment(instance.started).format(this.FORMAT_DATE);
            }
            return instance;
        }));
        return instances;
    }
    /**
     * @param {?} processInstance
     * @param {?} dateFormat
     * @return {?}
     */
    getProcessNameOrDescription(processInstance, dateFormat) {
        /** @type {?} */
        let name = '';
        if (processInstance) {
            name = processInstance.name ||
                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
        }
        return name;
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    getFormatDate(value, format) {
        /** @type {?} */
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            return '';
        }
    }
    /**
     * @private
     * @return {?}
     */
    createRequestNode() {
        /** @type {?} */
        const requestNode = {
            appDefinitionId: this.appId,
            processDefinitionId: this.processDefinitionId,
            processInstanceId: this.processInstanceId,
            state: this.state,
            sort: this.sort,
            page: this.page,
            size: this.size,
            start: 0
        };
        return new ProcessFilterParamRepresentationModel(requestNode);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    updatePagination(params) {
        /** @type {?} */
        const needsReload = params.maxItems || params.skipCount;
        this.size = params.maxItems;
        this.page = this.currentPage(params.skipCount, params.maxItems);
        if (needsReload) {
            this.reload();
        }
    }
    /**
     * @param {?} skipCount
     * @param {?} maxItems
     * @return {?}
     */
    currentPage(skipCount, maxItems) {
        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
    }
}
ProcessInstanceListComponent.PRESET_KEY = 'adf-process-list.presets';
ProcessInstanceListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-list',
                template: "<adf-datatable #dataTable\n    [data]=\"data\"\n    [rows]=\"rows\"\n    [columns]=\"columns\"\n    [sorting]=\"sorting\"\n    [loading]=\"isLoading\"\n    [selectionMode]=\"selectionMode\"\n    [multiselect]=\"multiselect\"\n    (rowClick)=\"onRowClick($event)\"\n    (row-keyup)=\"onRowKeyUp($event)\">\n    <adf-loading-content-template>\n        <ng-template>\n            <!--Add your custom loading template here-->\n            <mat-progress-spinner\n                *ngIf=\"!customLoadingContent\"\n                class=\"adf-process-list-loading-margin\"\n                [color]=\"'primary'\"\n                [mode]=\"'indeterminate'\">\n            </mat-progress-spinner>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n    <adf-no-content-template>\n        <ng-template>\n                <adf-empty-content *ngIf=\"!customEmptyContent\"\n                    icon=\"assessment\"\n                    [title]=\"(requestNode ? 'ADF_PROCESS_LIST.LIST.TITLE' : 'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE') | translate \"\n                    [subtitle]=\"'ADF_PROCESS_LIST.LIST.SUBTITLE'| translate\">\n                </adf-empty-content>\n            <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n</adf-datatable>\n",
                styles: [".adf-process-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}.no-content-message{font-size:16px;font-weight:700;text-align:center;opacity:.54;color:#000}"]
            }] }
];
/** @nocollapse */
ProcessInstanceListComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: UserPreferencesService },
    { type: AppConfigService }
];
ProcessInstanceListComponent.propDecorators = {
    customEmptyContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appId: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    state: [{ type: Input }],
    sort: [{ type: Input }],
    page: [{ type: Input }],
    size: [{ type: Input }],
    data: [{ type: Input }],
    multiselect: [{ type: Input }],
    selectionMode: [{ type: Input }],
    selectFirstRow: [{ type: Input }],
    rowClick: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ProcessInstanceListComponent.PRESET_KEY;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.FORMAT_DATE;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.customEmptyContent;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.customLoadingContent;
    /**
     * The id of the app.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.appId;
    /**
     * The Definition Id of the process.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.processDefinitionId;
    /**
     * The id of the process instance.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.processInstanceId;
    /**
     * Defines the state of the processes. Possible values are `running`, `completed` and `all`
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.state;
    /**
     * Defines the sort ordering of the list. Possible values are `created-desc`, `created-asc`,
     * `ended-desc`, `ended-asc`.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.sort;
    /**
     * The page number of the processes to fetch.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.page;
    /**
     * The number of processes to fetch in each page.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.size;
    /**
     * Data source to define the datatable.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.data;
    /**
     * Toggles multiple row selection, which renders checkboxes at the beginning of each row
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.multiselect;
    /**
     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
     * multiple rows.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.selectionMode;
    /**
     * Toggles default selection of the first row
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.selectFirstRow;
    /**
     * Emitted when a row in the process list is clicked.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.rowClick;
    /**
     * Emitted when the list of process instances has been loaded successfully from the server.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.success;
    /**
     * Emitted when an error occurs while loading the list of process instances from the server.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.error;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.requestNode;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.currentInstanceId;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.isLoading;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.rows;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.sorting;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.pagination;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceListComponent.prototype.processService;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceListComponent.prototype.userPreferences;
}
//# sourceMappingURL=data:application/json;base64,