/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Observable } from 'rxjs';
import { TaskDetailsEvent } from '../../task-list';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessService } from './../services/process.service';
import { share } from 'rxjs/operators';
export class ProcessInstanceTasksComponent {
    /**
     * @param {?} activitiProcess
     * @param {?} logService
     * @param {?} dialog
     */
    constructor(activitiProcess, logService, dialog) {
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        this.dialog = dialog;
        /**
         * Toggles whether to show a refresh button next to the list of tasks to allow
         * it to be updated from the server.
         */
        this.showRefreshButton = true;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.activeTasks = [];
        this.completedTasks = [];
        /**
         * Emitted when a task is clicked.
         */
        this.taskClick = new EventEmitter();
        this.task$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => this.taskObserver = observer))
            .pipe(share());
        this.completedTask$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => this.completedTaskObserver = observer))
            .pipe(share());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.task$.subscribe((/**
         * @param {?} task
         * @return {?}
         */
        (task) => {
            this.activeTasks.push(task);
        }));
        this.completedTask$.subscribe((/**
         * @param {?} task
         * @return {?}
         */
        (task) => {
            this.completedTasks.push(task);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const processInstanceDetails = changes['processInstanceDetails'];
        if (processInstanceDetails && processInstanceDetails.currentValue) {
            this.load(processInstanceDetails.currentValue.id);
        }
    }
    /**
     * @param {?} processInstanceId
     * @return {?}
     */
    load(processInstanceId) {
        this.loadActive(processInstanceId);
        this.loadCompleted(processInstanceId);
    }
    /**
     * @param {?} processInstanceId
     * @return {?}
     */
    loadActive(processInstanceId) {
        this.activeTasks = [];
        if (processInstanceId) {
            this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                res.forEach((/**
                 * @param {?} task
                 * @return {?}
                 */
                (task) => {
                    this.taskObserver.next(task);
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
        else {
            this.activeTasks = [];
        }
    }
    /**
     * @param {?} processInstanceId
     * @return {?}
     */
    loadCompleted(processInstanceId) {
        this.completedTasks = [];
        if (processInstanceId) {
            this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                res.forEach((/**
                 * @param {?} task
                 * @return {?}
                 */
                (task) => {
                    this.completedTaskObserver.next(task);
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
        else {
            this.completedTasks = [];
        }
    }
    /**
     * @return {?}
     */
    hasStartFormDefined() {
        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;
    }
    /**
     * @param {?} user
     * @return {?}
     */
    getUserFullName(user) {
        if (user) {
            return (user.firstName && user.firstName !== 'null'
                ? user.firstName + ' ' : '') +
                user.lastName;
        }
        return 'Nobody';
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    getFormatDate(value, format) {
        /** @type {?} */
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error(`ProcessListInstanceTask: error parsing date ${value} to format ${format}`);
        }
    }
    /**
     * @param {?} $event
     * @param {?} task
     * @return {?}
     */
    clickTask($event, task) {
        /** @type {?} */
        const args = new TaskDetailsEvent(task);
        this.taskClick.emit(args);
    }
    /**
     * @return {?}
     */
    clickStartTask() {
        this.processId = this.processInstanceDetails.id;
        this.showStartDialog();
    }
    /**
     * @return {?}
     */
    showStartDialog() {
        this.dialog.open(this.startDialog, { height: '500px', width: '700px' });
    }
    /**
     * @return {?}
     */
    closeStartDialog() {
        this.dialog.closeAll();
    }
    /**
     * @return {?}
     */
    onRefreshClicked() {
        this.load(this.processInstanceDetails.id);
    }
    /**
     * @return {?}
     */
    onFormContentClick() {
        this.closeStartDialog();
    }
}
ProcessInstanceTasksComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-tasks',
                template: "<div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >\n    <button mat-icon-button (click)=\"onRefreshClicked()\">\n        <mat-icon class=\"md-24\" aria-label=\"Refresh\">refresh</mat-icon>\n    </button>\n</div>\n\n<!-- ACTIVE FORM -->\n\n<mat-chip-list>\n    <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>\n    <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{activeTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of activeTasks\" (click)=\"clickTask($event, task)\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n                </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<!-- START FORM -->\n\n<div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE' | translate }}\n</div>\n\n<div *ngIf=\"hasStartFormDefined()\">\n    <span class=\"adf-activiti-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</span>\n\n    <!--IF START TASK COMPLETED -->\n    <div class=\"menu-container\">\n        <mat-list>\n            <mat-list-item class=\"process-tasks__task-item\" (click)=\"clickStartTask()\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}\n                </span>\n            </mat-list-item>\n        </mat-list>\n    </div>\n\n</div>\n\n<!-- COMPLETED FORM -->\n<mat-chip-list>\n        <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{completedTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of completedTasks\" (click)=\"clickTask($event, task)\">\n            <mat-icon mat-list-icon>assignment</mat-icon>\n            <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n            <span matLine>\n                {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n            </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED' | translate }}\n</div>\n\n<ng-template *ngIf=\"hasStartFormDefined()\" #startDialog>\n    <div id=\"adf-start-process-dialog\" class=\"adf-start-process-dialog\">\n        <h4 matDialogTitle>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h4>\n        <div mat-dialog-content class=\"adf-start-process-dialog-content\">\n            <adf-start-form [processId]=\"processId\"\n                                 [showRefreshButton]=\"false\" [readOnlyForm]=\"true\"\n                                 (formContentClicked)='onFormContentClick()'>\n            </adf-start-form>\n        </div>\n        <div mat-dialog-actions class=\"adf-start-process-dialog-actions\">\n            <button mat-button type=\"button\" (click)=\"closeStartDialog()\">{{ 'ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE' | translate }}</button>\n        </div>\n    </div>\n</ng-template>\n",
                styles: [":host{width:100%}.activiti-label{font-weight:bolder;vertical-align:top}.adf-process-badge{pointer-events:none;outline:0}.adf-chip-label{position:relative;top:5px;margin-right:8px;font-weight:700}.menu-container{margin-bottom:32px}.activiti-label+.icon{position:relative;top:-2px}.task-details-dialog{position:fixed;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);width:40%}.process-tasks-refresh{float:right}.adf-start-process-dialog{width:100%;height:100%;display:flex;flex-direction:column}.adf-start-process-dialog-content{flex-grow:1}.adf-start-process-dialog-actions{display:flex;justify-content:flex-end}.no-results{margin-left:9px;font-size:14px;font-weight:400;letter-spacing:0;line-height:18px;color:rgba(0,0,0,.54);display:block;padding:12px}.process-tasks__task-item{cursor:pointer}"]
            }] }
];
/** @nocollapse */
ProcessInstanceTasksComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: LogService },
    { type: MatDialog }
];
ProcessInstanceTasksComponent.propDecorators = {
    processInstanceDetails: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    error: [{ type: Output }],
    startDialog: [{ type: ViewChild, args: ['startDialog',] }],
    taskDetails: [{ type: ViewChild, args: ['taskDetails',] }],
    taskClick: [{ type: Output }]
};
if (false) {
    /**
     * (**required**) The ID of the process instance to display tasks for.
     * @type {?}
     */
    ProcessInstanceTasksComponent.prototype.processInstanceDetails;
    /**
     * Toggles whether to show a refresh button next to the list of tasks to allow
     * it to be updated from the server.
     * @type {?}
     */
    ProcessInstanceTasksComponent.prototype.showRefreshButton;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ProcessInstanceTasksComponent.prototype.error;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.activeTasks;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.completedTasks;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceTasksComponent.prototype.taskObserver;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceTasksComponent.prototype.completedTaskObserver;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.task$;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.completedTask$;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.message;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.processId;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.startDialog;
    /** @type {?} */
    ProcessInstanceTasksComponent.prototype.taskDetails;
    /**
     * Emitted when a task is clicked.
     * @type {?}
     */
    ProcessInstanceTasksComponent.prototype.taskClick;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceTasksComponent.prototype.activitiProcess;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceTasksComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceTasksComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,