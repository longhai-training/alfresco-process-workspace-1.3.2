/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { ProcessFilterService } from './../services/process-filter.service';
import { IconModel } from '../../app-list/icon.model';
export class ProcessFiltersComponent {
    /**
     * @param {?} processFilterService
     * @param {?} appsProcessService
     */
    constructor(processFilterService, appsProcessService) {
        this.processFilterService = processFilterService;
        this.appsProcessService = appsProcessService;
        /**
         * Emitted when the user selects a filter from the list.
         */
        this.filterClick = new EventEmitter();
        /**
         * Emitted when the list of filters has been successfully loaded from the server.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Toggle to show or hide the filter's icon.
         */
        this.showIcon = true;
        /**
         * Emitted when a process filter is selected.
         */
        this.filterSelected = new EventEmitter();
        this.filters = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.iconsMDL = new IconModel();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const appId = changes['appId'];
        /** @type {?} */
        const appName = changes['appName'];
        /** @type {?} */
        const filter = changes['filterParam'];
        if (appId && (appId.currentValue || appId.currentValue === null)) {
            this.getFiltersByAppId(appId.currentValue);
        }
        else if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectProcessFilter(filter.currentValue);
        }
    }
    /**
     * Return the filter list filtered by appId
     * @param {?=} appId - optional
     * @return {?}
     */
    getFiltersByAppId(appId) {
        this.processFilterService.getProcessFilters(appId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res.length === 0 && this.isFilterListEmpty()) {
                this.processFilterService.createDefaultFilters(appId).subscribe((/**
                 * @param {?} resDefault
                 * @return {?}
                 */
                (resDefault) => {
                    this.resetFilter();
                    this.filters = resDefault;
                    this.selectProcessFilter(this.filterParam);
                    this.success.emit(resDefault);
                }), (/**
                 * @param {?} errDefault
                 * @return {?}
                 */
                (errDefault) => {
                    this.error.emit(errDefault);
                }));
            }
            else {
                this.resetFilter();
                this.filters = res;
                this.selectProcessFilter(this.filterParam);
                this.success.emit(res);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }));
    }
    /**
     * Return the filter list filtered by appName
     * @param {?} appName
     * @return {?}
     */
    getFiltersByAppName(appName) {
        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe((/**
         * @param {?} application
         * @return {?}
         */
        (application) => {
            this.getFiltersByAppId(application.id);
            this.selectProcessFilter(this.filterParam);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }));
    }
    /**
     * Pass the selected filter as next
     * @param {?} filter
     * @return {?}
     */
    selectFilter(filter) {
        this.currentFilter = filter;
        this.filterClick.emit(filter);
    }
    /**
     * Select the first filter of a list if present
     * @param {?} filterParam
     * @return {?}
     */
    selectProcessFilter(filterParam) {
        if (filterParam) {
            this.filters.filter((/**
             * @param {?} processFilter
             * @param {?} index
             * @return {?}
             */
            (processFilter, index) => {
                if (filterParam.name && filterParam.name.toLowerCase() === processFilter.name.toLowerCase() ||
                    filterParam.id === processFilter.id ||
                    filterParam.index === index) {
                    this.currentFilter = processFilter;
                    this.filterSelected.emit(processFilter);
                }
            }));
        }
        if (this.isCurrentFilterEmpty()) {
            this.selectDefaultTaskFilter();
        }
    }
    /**
     * Select the Running filter
     * @return {?}
     */
    selectRunningFilter() {
        this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));
    }
    /**
     * Select as default task filter the first in the list
     * @return {?}
     */
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
            this.filterSelected.emit(this.filters[0]);
        }
    }
    /**
     * Return the current task
     * @return {?}
     */
    getCurrentFilter() {
        return this.currentFilter;
    }
    /**
     * Check if the filter list is empty
     * @return {?}
     */
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    /**
     * Reset the filters properties
     * @private
     * @return {?}
     */
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    /**
     * @private
     * @return {?}
     */
    isCurrentFilterEmpty() {
        return this.currentFilter === undefined || null;
    }
    /**
     * Return current filter icon
     * @param {?} icon
     * @return {?}
     */
    getFilterIcon(icon) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
    }
}
ProcessFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-filters',
                template: "<div class=\"menu-container\">\n    <mat-list class=\"adf-menu-list\">\n        <mat-list-item (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"\n                        class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n            <mat-icon *ngIf=\"showIcon\" matListIcon class=\"adf-filters__entry-icon\">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ProcessFiltersComponent.ctorParameters = () => [
    { type: ProcessFilterService },
    { type: AppsProcessService }
];
ProcessFiltersComponent.propDecorators = {
    filterParam: [{ type: Input }],
    filterClick: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    appId: [{ type: Input }],
    appName: [{ type: Input }],
    showIcon: [{ type: Input }],
    filterSelected: [{ type: Output }]
};
if (false) {
    /**
     * The parameters to filter the task filter. If there is no match then the default one
     * (ie, the first filter in the list) is selected.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.filterParam;
    /**
     * Emitted when the user selects a filter from the list.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.filterClick;
    /**
     * Emitted when the list of filters has been successfully loaded from the server.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.success;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.error;
    /**
     * Display filters available to the current user for the application with the specified ID.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.appId;
    /**
     * Display filters available to the current user for the application with the specified name.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.appName;
    /**
     * Toggle to show or hide the filter's icon.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.showIcon;
    /**
     * Emitted when a process filter is selected.
     * @type {?}
     */
    ProcessFiltersComponent.prototype.filterSelected;
    /** @type {?} */
    ProcessFiltersComponent.prototype.filter$;
    /** @type {?} */
    ProcessFiltersComponent.prototype.currentFilter;
    /** @type {?} */
    ProcessFiltersComponent.prototype.filters;
    /**
     * @type {?}
     * @private
     */
    ProcessFiltersComponent.prototype.iconsMDL;
    /**
     * @type {?}
     * @private
     */
    ProcessFiltersComponent.prototype.processFilterService;
    /**
     * @type {?}
     * @private
     */
    ProcessFiltersComponent.prototype.appsProcessService;
}
//# sourceMappingURL=data:application/json;base64,