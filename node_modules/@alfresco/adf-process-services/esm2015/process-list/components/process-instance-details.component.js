/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ProcessService } from './../services/process.service';
import { ProcessInstanceHeaderComponent } from './process-instance-header.component';
import { ProcessInstanceTasksComponent } from './process-instance-tasks.component';
export class ProcessInstanceDetailsComponent {
    /**
     * Constructor
     * @param {?} activitiProcess   Process service
     * @param {?} logService
     */
    constructor(activitiProcess, logService) {
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        /**
         * Toggles whether to show or hide the title.
         */
        this.showTitle = true;
        /**
         * Toggles whether to show or hide the refresh button.
         */
        this.showRefreshButton = true;
        /**
         * Emitted when the current process is cancelled by the user from within the component.
         */
        this.processCancelled = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when a task is clicked.
         */
        this.taskClick = new EventEmitter();
        /**
         * Emitted when the "show diagram" button is clicked.
         */
        this.showProcessDiagram = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const processInstanceId = changes['processInstanceId'];
        if (processInstanceId && !processInstanceId.currentValue) {
            this.reset();
            return;
        }
        if (processInstanceId && processInstanceId.currentValue) {
            this.load(processInstanceId.currentValue);
            return;
        }
    }
    /**
     * Reset the task detail
     * @return {?}
     */
    reset() {
        this.processInstanceDetails = null;
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    load(processId) {
        if (processId) {
            this.activitiProcess.getProcess(processId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.processInstanceDetails = res;
            }));
        }
    }
    /**
     * @return {?}
     */
    isRunning() {
        return this.processInstanceDetails && !this.processInstanceDetails.ended;
    }
    /**
     * @return {?}
     */
    cancelProcess() {
        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.processCancelled.emit(data);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }));
    }
    // bubbles (taskClick) event
    /**
     * @param {?} event
     * @return {?}
     */
    onTaskClicked(event) {
        this.taskClick.emit(event);
    }
    /**
     * @param {?} dateFormat
     * @return {?}
     */
    getProcessNameOrDescription(dateFormat) {
        /** @type {?} */
        let name = '';
        if (this.processInstanceDetails) {
            name = this.processInstanceDetails.name ||
                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
        }
        return name;
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    getFormatDate(value, format) {
        /** @type {?} */
        const datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);
        }
    }
    /**
     * @param {?} processInstanceId
     * @return {?}
     */
    onShowProcessDiagram(processInstanceId) {
        this.showProcessDiagram.emit({ value: this.processInstanceId });
    }
}
ProcessInstanceDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-details',
                template: "<div *ngIf=\"!processInstanceDetails\">{{ 'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE'|translate }}</div>\n<mat-card *ngIf=\"processInstanceDetails\">\n    <mat-card-header>\n        <mat-card-title>{{ getProcessNameOrDescription('medium') }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <adf-process-instance-header\n            #processInstanceHeader\n            [processInstance]=\"processInstanceDetails\"\n            (showProcessDiagram)=\"onShowProcessDiagram($event)\">\n        </adf-process-instance-header>\n\n        <button class=\"adf-in-medias-res-button\" mat-button id=\"show-diagram-button\" type=\"button\" mat-button mat-raised-button [disabled]=\"!isRunning()\" (click)=\"onShowProcessDiagram(processInstanceId)\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-tasks\n                    #processInstanceTasks\n                    [processInstanceDetails]=\"processInstanceDetails\"\n                    (taskClick)=\"onTaskClicked($event)\">\n                </adf-process-instance-tasks>\n            </mat-card-content>\n        </mat-card>\n\n        <div data-automation-id=\"header-status\" *ngIf=\"isRunning()\" class=\"adf-in-medias-res-button\">\n            <button mat-button type=\"button\" (click)=\"cancelProcess()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL' | translate }}</button>\n        </div>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-comments #activitiComments\n                    [readOnly]=\"false\"\n                    [processInstanceId]=\"processInstanceDetails.id\">\n                </adf-process-instance-comments>\n            </mat-card-content>\n        </mat-card>\n\n    </mat-card-content>\n</mat-card>\n",
                styles: [":host{width:100%}.activiti-process-container{width:100%;min-height:100px;overflow:visible;padding:10px}.adf-comments-dialog{position:fixed;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);width:40%}.adf-in-medias-res-button{margin:16px 0}"]
            }] }
];
/** @nocollapse */
ProcessInstanceDetailsComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: LogService }
];
ProcessInstanceDetailsComponent.propDecorators = {
    processInstanceId: [{ type: Input }],
    processInstanceHeader: [{ type: ViewChild, args: ['processInstanceHeader',] }],
    tasksList: [{ type: ViewChild, args: ['processInstanceTasks',] }],
    showTitle: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    processCancelled: [{ type: Output }],
    error: [{ type: Output }],
    taskClick: [{ type: Output }],
    showProcessDiagram: [{ type: Output }]
};
if (false) {
    /**
     * (required) The numeric ID of the process instance to display.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.processInstanceId;
    /** @type {?} */
    ProcessInstanceDetailsComponent.prototype.processInstanceHeader;
    /** @type {?} */
    ProcessInstanceDetailsComponent.prototype.tasksList;
    /**
     * Toggles whether to show or hide the title.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.showTitle;
    /**
     * Toggles whether to show or hide the refresh button.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.showRefreshButton;
    /**
     * Emitted when the current process is cancelled by the user from within the component.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.processCancelled;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.error;
    /**
     * Emitted when a task is clicked.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.taskClick;
    /** @type {?} */
    ProcessInstanceDetailsComponent.prototype.processInstanceDetails;
    /**
     * Emitted when the "show diagram" button is clicked.
     * @type {?}
     */
    ProcessInstanceDetailsComponent.prototype.showProcessDiagram;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceDetailsComponent.prototype.activitiProcess;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceDetailsComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,