/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { ActivitiContentService, AppConfigService, AppConfigValues } from '@alfresco/adf-core';
import { ProcessDefinitionRepresentation } from './../models/process-definition.model';
import { ProcessService } from './../services/process.service';
import { FormControl, Validators } from '@angular/forms';
import { map } from 'rxjs/operators';
import { MatAutocompleteTrigger } from '@angular/material';
import { StartFormComponent } from '../../form';
export class StartProcessInstanceComponent {
    /**
     * @param {?} activitiProcess
     * @param {?} activitiContentService
     * @param {?} appConfig
     */
    constructor(activitiProcess, activitiContentService, appConfig) {
        this.activitiProcess = activitiProcess;
        this.activitiContentService = activitiContentService;
        this.appConfig = appConfig;
        this.MAX_LENGTH = 255;
        /**
         * (optional) Name to assign to the current process.
         */
        this.name = '';
        /**
         * Hide or show the process selection dropdown.
         */
        this.showSelectProcessDropdown = true;
        /**
         * (optional) Parameter to enable selection of process when filtering.
         */
        this.processFilterSelector = true;
        /**
         * Emitted when the process starts.
         */
        this.start = new EventEmitter();
        /**
         * Emitted when the process is canceled.
         */
        this.cancel = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.processDefinitions = [];
        this.selectedProcessDef = new ProcessDefinitionRepresentation();
        this.errorMessageId = '';
        this.maxProcessNameLength = this.MAX_LENGTH;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.processNameInput = new FormControl(this.name, [Validators.required, Validators.maxLength(this.maxProcessNameLength)]);
        this.processDefinitionInput = new FormControl();
        this.loadStartProcess();
        this.processNameInput.valueChanges.subscribe((/**
         * @param {?} name
         * @return {?}
         */
        (name) => this.name = name));
        this.filteredProcesses = this.processDefinitionInput.valueChanges
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => this._filter(value))));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['values'] && changes['values'].currentValue) {
            this.moveNodeFromCStoPS();
        }
        if (changes['appId'] && changes['appId'].currentValue) {
            this.appId = changes['appId'].currentValue;
        }
        this.loadStartProcess();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _filter(value) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            const filterValue = value.toLowerCase();
            /** @type {?} */
            const filteredProcess = this.processDefinitions.filter((/**
             * @param {?} option
             * @return {?}
             */
            (option) => option.name.toLowerCase().includes(filterValue)));
            if (this.processFilterSelector) {
                this.selectedProcessDef = this.getSelectedProcess(filterValue);
            }
            return filteredProcess;
        }
    }
    /**
     * @param {?} selectedProcess
     * @return {?}
     */
    getSelectedProcess(selectedProcess) {
        /** @type {?} */
        let processSelected = this.processDefinitions.find((/**
         * @param {?} process
         * @return {?}
         */
        (process) => process.name.toLowerCase() === selectedProcess));
        if (!processSelected) {
            processSelected = new ProcessDefinitionRepresentation();
        }
        return processSelected;
    }
    /**
     * @return {?}
     */
    loadStartProcess() {
        this.resetSelectedProcessDefinition();
        this.resetErrorMessage();
        this.activitiProcess.getProcessDefinitions(this.appId).subscribe((/**
         * @param {?} processDefinitionRepresentations
         * @return {?}
         */
        (processDefinitionRepresentations) => {
            this.processDefinitions = processDefinitionRepresentations;
            if (!this.isProcessDefinitionsEmpty()) {
                if (this.processDefinitions.length === 1) {
                    this.selectedProcessDef = this.processDefinitions[0];
                }
                if (this.processDefinitionName) {
                    /** @type {?} */
                    const selectedProcess = this.processDefinitions.find((/**
                     * @param {?} currentProcessDefinition
                     * @return {?}
                     */
                    (currentProcessDefinition) => {
                        return currentProcessDefinition.name === this.processDefinitionName;
                    }));
                    if (selectedProcess) {
                        this.selectedProcessDef = selectedProcess;
                    }
                }
                this.processDefinitionInput.setValue(this.selectedProcessDef.name);
            }
        }), (/**
         * @return {?}
         */
        () => {
            this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
        }));
    }
    /**
     * @return {?}
     */
    isProcessDefinitionsEmpty() {
        return this.processDefinitions.length === 0;
    }
    /**
     * @return {?}
     */
    getAlfrescoRepositoryName() {
        /** @type {?} */
        let alfrescoRepositoryName = this.appConfig.get(AppConfigValues.ALFRESCO_REPOSITORY_NAME);
        if (!alfrescoRepositoryName) {
            alfrescoRepositoryName = 'alfresco-1';
        }
        return alfrescoRepositoryName + 'Alfresco';
    }
    /**
     * @return {?}
     */
    moveNodeFromCStoPS() {
        /** @type {?} */
        const accountIdentifier = this.getAlfrescoRepositoryName();
        for (const key in this.values) {
            if (this.values.hasOwnProperty(key)) {
                /** @type {?} */
                const currentValue = this.values[key];
                if (currentValue.isFile) {
                    this.activitiContentService.applyAlfrescoNode(currentValue, null, accountIdentifier).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        this.values[key] = [res];
                    }));
                }
            }
        }
    }
    /**
     * @param {?=} outcome
     * @return {?}
     */
    startProcess(outcome) {
        if (this.selectedProcessDef && this.selectedProcessDef.id && this.name) {
            this.resetErrorMessage();
            /** @type {?} */
            const formValues = this.startForm ? this.startForm.form.values : undefined;
            this.activitiProcess.startProcess(this.selectedProcessDef.id, this.name, outcome, formValues, this.variables).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.name = '';
                this.start.emit(res);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.START';
                this.error.error(err);
            }));
        }
    }
    /**
     * @return {?}
     */
    cancelStartProcess() {
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    hasStartForm() {
        return this.selectedProcessDef && this.selectedProcessDef.hasStartForm;
    }
    /**
     * @return {?}
     */
    isProcessDefinitionEmpty() {
        return this.processDefinitions ? (this.processDefinitions.length > 0 || this.errorMessageId) : this.errorMessageId;
    }
    /**
     * @return {?}
     */
    isStartFormMissingOrValid() {
        if (this.startForm) {
            return this.startForm.form && this.startForm.form.isValid;
        }
        else {
            return true;
        }
    }
    /**
     * @return {?}
     */
    validateForm() {
        return this.selectedProcessDef && this.selectedProcessDef.id && this.processNameInput.valid && this.isStartFormMissingOrValid();
    }
    /**
     * @private
     * @return {?}
     */
    resetSelectedProcessDefinition() {
        this.selectedProcessDef = new ProcessDefinitionRepresentation();
    }
    /**
     * @private
     * @return {?}
     */
    resetErrorMessage() {
        this.errorMessageId = '';
    }
    /**
     * @return {?}
     */
    hasErrorMessage() {
        return this.processDefinitions.length === 0 && !this.errorMessageId;
    }
    /**
     * @param {?} outcome
     * @return {?}
     */
    onOutcomeClick(outcome) {
        this.startProcess(outcome);
    }
    /**
     * @return {?}
     */
    reset() {
        this.resetSelectedProcessDefinition();
        this.name = '';
        if (this.startForm) {
            this.startForm.data = {};
        }
        this.resetErrorMessage();
    }
    /**
     * @return {?}
     */
    hasProcessName() {
        return this.name ? true : false;
    }
    /**
     * @param {?} process
     * @return {?}
     */
    displayFn(process) {
        if (process) {
            /** @type {?} */
            let processName = process;
            if (typeof process !== 'string') {
                processName = process.name;
            }
            return processName;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    displayDropdown(event) {
        event.stopPropagation();
        if (!this.inputAutocomplete.panelOpen) {
            this.processDefinitionInput.setValue('');
            this.inputAutocomplete.openPanel();
        }
        else {
            this.inputAutocomplete.closePanel();
        }
    }
    /**
     * @return {?}
     */
    get nameController() {
        return this.processNameInput;
    }
}
StartProcessInstanceComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-start-process',
                template: "<mat-card class=\"adf-start-process\">\n    <mat-card-title>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.TITLE' | translate}}\n    </mat-card-title>\n    <mat-card-content *ngIf=\"isProcessDefinitionEmpty()\">\n        <mat-card-subtitle id=\"error-message\" *ngIf=\"errorMessageId\">\n            {{errorMessageId|translate}}\n        </mat-card-subtitle>\n        <mat-form-field class=\"adf-process-input-container\">\n            <input\n                matInput\n                placeholder=\"{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME' | translate}}\"\n                [formControl]=\"processNameInput\"\n                id=\"processName\"\n                required/>\n                <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                    {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxProcessNameLength } }}\n                </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"adf-process-input-container\">\n            <input\n                type=\"text\"\n                placeholder=\"{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE'|translate}}\"\n                matInput\n                [formControl]=\"processDefinitionInput\"\n                [matAutocomplete]=\"auto\"\n                id=\"processDefinitionName\"\n                #inputAutocomplete>\n            <div class=\"adf-process-input-autocomplete\">\n                <mat-autocomplete\n                    #auto=\"matAutocomplete\"\n                    id=\"processDefinitionOptions\"\n                    [displayWith]=\"displayFn\">\n                    <mat-option *ngFor=\"let processDef of filteredProcesses | async\" [value]=\"processDef.name\">\n                        {{ processDef.name }}\n                    </mat-option>\n                </mat-autocomplete>\n                <button\n                    id=\"adf-select-process-dropdown\"\n                    *ngIf=\"showSelectProcessDropdown\"\n                    mat-icon-button\n                    (click)=\"displayDropdown($event)\">\n                    <mat-icon>arrow_drop_down</mat-icon>\n                </button>\n            </div>\n        </mat-form-field>\n\n        <adf-start-form\n            #startForm\n            *ngIf=\"hasStartForm()\"\n            [data]=\"values\"\n            [disableStartProcessButton]=\"!hasProcessName()\"\n            [processDefinitionId]=\"selectedProcessDef.id\"\n            (outcomeClick)=\"onOutcomeClick($event)\"\n            [showRefreshButton]=\"false\">\n            <button\n                adf-form-custom-button\n                mat-button\n                (click)=\"cancelStartProcess()\"\n                id=\"cancel_process\">\n                {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n            </button>\n        </adf-start-form>\n    </mat-card-content>\n    <mat-card-content *ngIf=\"hasErrorMessage()\">\n        <mat-card-subtitle class=\"error-message\" id=\"no-process-message\">\n            {{'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS' | translate | uppercase}}\n        </mat-card-subtitle>\n    </mat-card-content>\n    <mat-card-actions *ngIf=\"!hasStartForm()\">\n        <button\n            mat-button\n            *ngIf=\"!hasStartForm()\"\n            (click)=\"cancelStartProcess()\"\n            id=\"cancel_process\">\n            {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n        </button>\n        <button\n            color=\"primary\"\n            mat-button\n            *ngIf=\"!hasStartForm()\"\n            [disabled]=\"!validateForm()\"\n            (click)=\"startProcess()\"\n            data-automation-id=\"btn-start\"\n            id=\"button-start\"\n            class=\"btn-start\">\n            {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-start-process{width:66%;margin-left:auto;margin-right:auto;margin-top:10px}.adf-start-process .mat-select-trigger{font-size:14px!important}.adf-start-process mat-form-field{width:100%}.adf-start-process mat-select{width:100%;padding:16px 0 0}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}@media (max-width:600px){.adf-start-process{width:90%;margin-left:auto;margin-right:auto}}"]
            }] }
];
/** @nocollapse */
StartProcessInstanceComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: ActivitiContentService },
    { type: AppConfigService }
];
StartProcessInstanceComponent.propDecorators = {
    appId: [{ type: Input }],
    processDefinitionName: [{ type: Input }],
    variables: [{ type: Input }],
    values: [{ type: Input }],
    name: [{ type: Input }],
    showSelectProcessDropdown: [{ type: Input }],
    processFilterSelector: [{ type: Input }],
    start: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }],
    startForm: [{ type: ViewChild, args: ['startForm',] }],
    inputAutocomplete: [{ type: ViewChild, args: [MatAutocompleteTrigger,] }]
};
if (false) {
    /** @type {?} */
    StartProcessInstanceComponent.prototype.MAX_LENGTH;
    /**
     * (optional) Limit the list of processes that can be started to those
     * contained in the specified app.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.appId;
    /**
     * (optional) Definition name of the process to start.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.processDefinitionName;
    /**
     * Variables in the input to the process
     * [RestVariable](https://github.com/Alfresco/alfresco-js-api/tree/master/src/alfresco-activiti-rest-api/docs/RestVariable.md).
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.variables;
    /**
     * Parameter to pass form field values in the start form if one is associated.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.values;
    /**
     * (optional) Name to assign to the current process.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.name;
    /**
     * Hide or show the process selection dropdown.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.showSelectProcessDropdown;
    /**
     * (optional) Parameter to enable selection of process when filtering.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.processFilterSelector;
    /**
     * Emitted when the process starts.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.start;
    /**
     * Emitted when the process is canceled.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.cancel;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    StartProcessInstanceComponent.prototype.error;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.startForm;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.inputAutocomplete;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.processDefinitions;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.selectedProcessDef;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.errorMessageId;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.processNameInput;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.processDefinitionInput;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.filteredProcesses;
    /** @type {?} */
    StartProcessInstanceComponent.prototype.maxProcessNameLength;
    /**
     * @type {?}
     * @private
     */
    StartProcessInstanceComponent.prototype.activitiProcess;
    /**
     * @type {?}
     * @private
     */
    StartProcessInstanceComponent.prototype.activitiContentService;
    /**
     * @type {?}
     * @private
     */
    StartProcessInstanceComponent.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,