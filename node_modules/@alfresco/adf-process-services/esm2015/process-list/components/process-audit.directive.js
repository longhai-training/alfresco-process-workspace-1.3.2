/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { ContentService } from '@alfresco/adf-core';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { ProcessService } from './../services/process.service';
/** @type {?} */
const JSON_FORMAT = 'json';
/** @type {?} */
const PDF_FORMAT = 'pdf';
export class ProcessAuditDirective {
    /**
     *
     * @param {?} contentService
     * @param {?} processListService
     */
    constructor(contentService, processListService) {
        this.contentService = contentService;
        this.processListService = processListService;
        /**
         * Name of the file to download (for PDF downloads).
         */
        this.fileName = 'Audit';
        /**
         * Format for the audit information (can be "pdf" or "json").
         */
        this.format = 'pdf';
        /**
         * Enables downloading of the audit file on clicking.
         */
        this.download = true;
        /**
         * Emitted when the decorated element is clicked.
         */
        this.clicked = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.isValidType()) {
            this.setDefaultFormatType();
        }
    }
    /**
     * @return {?}
     */
    isValidType() {
        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    setDefaultFormatType() {
        this.format = PDF_FORMAT;
    }
    /**
     * fetch the audit information in the requested format
     * @return {?}
     */
    fetchAuditInfo() {
        if (this.isPdfFormat()) {
            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe((/**
             * @param {?} blob
             * @return {?}
             */
            (blob) => {
                this.audit = blob;
                if (this.download) {
                    this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');
                }
                this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
        else {
            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.audit = res;
                this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
    }
    /**
     * @return {?}
     */
    onClickAudit() {
        this.fetchAuditInfo();
    }
    /**
     * @return {?}
     */
    isJsonFormat() {
        return this.format === JSON_FORMAT;
    }
    /**
     * @return {?}
     */
    isPdfFormat() {
        return this.format === PDF_FORMAT;
    }
}
ProcessAuditDirective.decorators = [
    { type: Directive, args: [{
                selector: 'button[adf-process-audit]',
                host: {
                    'role': 'button',
                    '(click)': 'onClickAudit()'
                }
            },] }
];
/** @nocollapse */
ProcessAuditDirective.ctorParameters = () => [
    { type: ContentService },
    { type: ProcessService }
];
ProcessAuditDirective.propDecorators = {
    processId: [{ type: Input, args: ['process-id',] }],
    fileName: [{ type: Input }],
    format: [{ type: Input }],
    download: [{ type: Input }],
    clicked: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * ID of the process.
     * @type {?}
     */
    ProcessAuditDirective.prototype.processId;
    /**
     * Name of the file to download (for PDF downloads).
     * @type {?}
     */
    ProcessAuditDirective.prototype.fileName;
    /**
     * Format for the audit information (can be "pdf" or "json").
     * @type {?}
     */
    ProcessAuditDirective.prototype.format;
    /**
     * Enables downloading of the audit file on clicking.
     * @type {?}
     */
    ProcessAuditDirective.prototype.download;
    /**
     * Emitted when the decorated element is clicked.
     * @type {?}
     */
    ProcessAuditDirective.prototype.clicked;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ProcessAuditDirective.prototype.error;
    /** @type {?} */
    ProcessAuditDirective.prototype.audit;
    /**
     * @type {?}
     * @private
     */
    ProcessAuditDirective.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ProcessAuditDirective.prototype.processListService;
}
//# sourceMappingURL=data:application/json;base64,