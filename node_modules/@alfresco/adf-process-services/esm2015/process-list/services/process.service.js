/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, throwError, of } from 'rxjs';
import { ProcessDefinitionRepresentation } from '../models/process-definition.model';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessListModel } from '../models/process-list.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ProcessService {
    /**
     * @param {?} alfrescoApiService
     */
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * Gets process instances for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of process instances
     */
    getProcessInstances(requestNode, processDefinitionKey) {
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (processDefinitionKey) {
                /** @type {?} */
                const filtered = res.data.filter((/**
                 * @param {?} process
                 * @return {?}
                 */
                (process) => process.processDefinitionKey === processDefinitionKey));
                res.data = filtered;
                return res;
            }
            else {
                return res;
            }
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Gets processes for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of processes
     */
    getProcesses(requestNode, processDefinitionKey) {
        return this.getProcessInstances(requestNode, processDefinitionKey)
            .pipe(catchError((/**
         * @return {?}
         */
        () => {
            return of(new ProcessListModel({}));
        })));
    }
    /**
     * Fetches the Process Audit information as a PDF.
     * @param {?} processId ID of the target process
     * @return {?} Binary PDF data
     */
    fetchProcessAuditPdfById(processId) {
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Fetches the Process Audit information in a JSON format.
     * @param {?} processId ID of the target process
     * @return {?} JSON data
     */
    fetchProcessAuditJsonById(processId) {
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Gets Process Instance metadata.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Metadata for the instance
     */
    getProcess(processInstanceId) {
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Gets task instances for a process instance.
     * @param {?} processInstanceId ID of the process instance
     * @param {?=} state Task state filter (can be "active" or "completed")
     * @return {?} Array of task instance details
     */
    getProcessTasks(processInstanceId, state) {
        /** @type {?} */
        const taskOpts = state ? {
            processInstanceId: processInstanceId,
            state: state
        } : {
            processInstanceId: processInstanceId
        };
        return from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))
            .pipe(map(this.extractData), map((/**
         * @param {?} tasks
         * @return {?}
         */
        (tasks) => tasks.map((/**
         * @param {?} task
         * @return {?}
         */
        (task) => {
            task.created = moment(task.created, 'YYYY-MM-DD').format();
            return task;
        })))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Gets process definitions associated with an app.
     * @param {?=} appId ID of a target app
     * @return {?} Array of process definitions
     */
    getProcessDefinitions(appId) {
        /** @type {?} */
        const opts = appId ? {
            latest: true,
            appDefinitionId: appId
        } : {
            latest: true
        };
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts))
            .pipe(map(this.extractData), map((/**
         * @param {?} processDefs
         * @return {?}
         */
        (processDefs) => processDefs.map((/**
         * @param {?} pd
         * @return {?}
         */
        (pd) => new ProcessDefinitionRepresentation(pd))))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param {?} processDefinitionId Process definition ID
     * @param {?} name Process name
     * @param {?=} outcome Process outcome
     * @param {?=} startFormValues Values for the start form
     * @param {?=} variables Array of process instance variables
     * @return {?} Details of the process instance just started
     */
    startProcess(processDefinitionId, name, outcome, startFormValues, variables) {
        /** @type {?} */
        const startRequest = {
            name: name,
            processDefinitionId: processDefinitionId
        };
        if (outcome) {
            startRequest.outcome = outcome;
        }
        if (startFormValues) {
            startRequest.values = startFormValues;
        }
        if (variables) {
            startRequest.variables = variables;
        }
        return from(this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest))
            .pipe(map((/**
         * @param {?} pd
         * @return {?}
         */
        (pd) => new ProcessInstance(pd))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Cancels a process instance.
     * @param {?} processInstanceId ID of process to cancel
     * @return {?} Null response notifying when the operation is complete
     */
    cancelProcess(processInstanceId) {
        return from(this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Gets the variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Array of instance variable info
     */
    getProcessInstanceVariables(processInstanceId) {
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map((/**
         * @param {?} processVars
         * @return {?}
         */
        (processVars) => processVars.map((/**
         * @param {?} currentProcessVar
         * @return {?}
         */
        (currentProcessVar) => new ProcessInstanceVariable(currentProcessVar))))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Creates or updates variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variables Variables to update
     * @return {?} Array of instance variable info
     */
    createOrUpdateProcessInstanceVariables(processInstanceId, variables) {
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * Deletes a variable for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variableName Name of the variable to delete
     * @return {?} Null response notifying when the operation is complete
     */
    deleteProcessInstanceVariable(processInstanceId, variableName) {
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleProcessError(err))));
    }
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    extractData(res) {
        return res.data || {};
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
}
ProcessService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ProcessService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/** @nocollapse */ ProcessService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessService_Factory() { return new ProcessService(i0.inject(i1.AlfrescoApiService)); }, token: ProcessService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,