/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
export class CreateProcessAttachmentComponent {
    /**
     * @param {?} activitiContentService
     */
    constructor(activitiContentService) {
        this.activitiContentService = activitiContentService;
        /**
         * Emitted when an error occurs while creating or uploading an attachment
         * from the user within the component.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an attachment is successfully created or uploaded
         * from within the component.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
            this.processInstanceId = changes['processInstanceId'].currentValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFileUpload(event) {
        /** @type {?} */
        const filesList = event.detail.files.map((/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => obj.file));
        for (const fileInfoObj of filesList) {
            /** @type {?} */
            const file = fileInfoObj;
            /** @type {?} */
            const opts = {
                isRelatedContent: true
            };
            this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.success.emit(res);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
    }
}
CreateProcessAttachmentComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-create-process-attachment',
                template: "<button\n    id=\"add_new_process_content_button\"\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
            }] }
];
/** @nocollapse */
CreateProcessAttachmentComponent.ctorParameters = () => [
    { type: ProcessContentService }
];
CreateProcessAttachmentComponent.propDecorators = {
    processInstanceId: [{ type: Input }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
if (false) {
    /**
     * (required) The ID of the process instance to display.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.processInstanceId;
    /**
     * Emitted when an error occurs while creating or uploading an attachment
     * from the user within the component.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.error;
    /**
     * Emitted when an attachment is successfully created or uploaded
     * from within the component.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.success;
    /**
     * @type {?}
     * @private
     */
    CreateProcessAttachmentComponent.prototype.activitiContentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJhdHRhY2htZW50L2NyZWF0ZS1wcm9jZXNzLWF0dGFjaG1lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTzNELE1BQU0sT0FBTyxnQ0FBZ0M7Ozs7SUFrQnpDLFlBQW9CLHNCQUE2QztRQUE3QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXVCOzs7OztRQVJqRSxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7O1FBTW5ELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUdyRCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFlBQVksRUFBRTtZQUMzRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsWUFBWSxDQUFDO1NBQ3RFO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsS0FBVTs7Y0FDYixTQUFTLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDO1FBRW5FLEtBQUssTUFBTSxXQUFXLElBQUksU0FBUyxFQUFFOztrQkFDM0IsSUFBSSxHQUFTLFdBQVc7O2tCQUN4QixJQUFJLEdBQUc7Z0JBQ1QsZ0JBQWdCLEVBQUUsSUFBSTthQUN6QjtZQUNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozs7WUFDakcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDSixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixDQUFDOzs7O1lBQ0QsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDSixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QixDQUFDLEVBQUMsQ0FBQztTQUNWO0lBQ0wsQ0FBQzs7O1lBaERKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsK0JBQStCO2dCQUV6QywyVkFBeUQ7O2FBQzVEOzs7O1lBTlEscUJBQXFCOzs7Z0NBVXpCLEtBQUs7b0JBTUwsTUFBTTtzQkFNTixNQUFNOzs7Ozs7O0lBWlAsNkRBQzBCOzs7Ozs7SUFLMUIsaURBQ21EOzs7Ozs7SUFLbkQsbURBQ3FEOzs7OztJQUV6QyxrRUFBcUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9jZXNzQ29udGVudFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jcmVhdGUtcHJvY2Vzcy1hdHRhY2htZW50JyxcbiAgICBzdHlsZVVybHM6IFsnLi9jcmVhdGUtcHJvY2Vzcy1hdHRhY2htZW50LmNvbXBvbmVudC5jc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ3JlYXRlUHJvY2Vzc0F0dGFjaG1lbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgLyoqIChyZXF1aXJlZCkgVGhlIElEIG9mIHRoZSBwcm9jZXNzIGluc3RhbmNlIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICBwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgY3JlYXRpbmcgb3IgdXBsb2FkaW5nIGFuIGF0dGFjaG1lbnRcbiAgICAgKiBmcm9tIHRoZSB1c2VyIHdpdGhpbiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBhdHRhY2htZW50IGlzIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIG9yIHVwbG9hZGVkXG4gICAgICogZnJvbSB3aXRoaW4gdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhY3Rpdml0aUNvbnRlbnRTZXJ2aWNlOiBQcm9jZXNzQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzWydwcm9jZXNzSW5zdGFuY2VJZCddICYmIGNoYW5nZXNbJ3Byb2Nlc3NJbnN0YW5jZUlkJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NJbnN0YW5jZUlkID0gY2hhbmdlc1sncHJvY2Vzc0luc3RhbmNlSWQnXS5jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkZpbGVVcGxvYWQoZXZlbnQ6IGFueSkge1xuICAgICAgICBjb25zdCBmaWxlc0xpc3Q6IEZpbGVbXSA9IGV2ZW50LmRldGFpbC5maWxlcy5tYXAoKG9iaikgPT4gb2JqLmZpbGUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZUluZm9PYmogb2YgZmlsZXNMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlOiBGaWxlID0gZmlsZUluZm9PYmo7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGlzUmVsYXRlZENvbnRlbnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXRpQ29udGVudFNlcnZpY2UuY3JlYXRlUHJvY2Vzc1JlbGF0ZWRDb250ZW50KHRoaXMucHJvY2Vzc0luc3RhbmNlSWQsIGZpbGUsIG9wdHMpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHJlcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19