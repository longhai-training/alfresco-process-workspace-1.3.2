/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslationService, PeopleProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';
import { getDisplayUser } from '../../helpers/getDisplayUser';
export class PeopleSearchFieldComponent {
    /**
     * @param {?} peopleProcessService
     * @param {?} translationService
     */
    constructor(peopleProcessService, translationService) {
        this.peopleProcessService = peopleProcessService;
        this.translationService = translationService;
        this.rowClick = new EventEmitter();
        this.searchUser = new FormControl();
        this.defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';
        this.users$ = this.searchUser.valueChanges
            .pipe(debounceTime(200), switchMap((/**
         * @param {?} searchWord
         * @return {?}
         */
        (searchWord) => {
            if (searchWord && searchWord.trim()) {
                return this.performSearch(searchWord);
            }
            else {
                return of([]);
            }
        })));
        this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);
    }
    /**
     * @return {?}
     */
    reset() {
        this.searchUser.reset();
    }
    /**
     * @return {?}
     */
    get searchPlaceholder() {
        return this.placeholder || this.defaultPlaceholder;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onRowClick(event) {
        this.rowClick.emit(event);
    }
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @param {?=} delimiter
     * @return {?}
     */
    getDisplayUser(firstName, lastName, delimiter = '-') {
        return getDisplayUser(firstName, lastName, delimiter);
    }
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @return {?}
     */
    getInitialUserName(firstName, lastName) {
        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
        return this.getDisplayUser(firstName, lastName, '');
    }
}
PeopleSearchFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-search-field',
                template: "<mat-form-field class=\"adf-search-text-container\">\n    <input\n        matInput\n        placeholder=\"{{ searchPlaceholder }}\"\n        type=\"text\"\n        id=\"userSearchText\"\n        [value]=\"\"\n        [formControl]=\"searchUser\"\n        data-automation-id=\"adf-people-search-input\">\n</mat-form-field>\n<ng-container *ngIf=\"users$ | async; let users\">\n    <div class=\"adf-search-list-container\" id=\"search-people-list\" *ngIf=\"users.length > 0\">\n        <adf-people-list [users]=\"users\" (clickRow)=\"onRowClick($event)\">\n            <data-columns>\n                <data-column key=\"firstName\">\n                    <ng-template let-entry=\"$implicit\">\n                            <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-pic\">\n                                {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                            <div>\n                                <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                    [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                            </div>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"email\" class=\"adf-full-width\">\n                    <ng-template let-entry=\"$implicit\">\n                        <div class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n        </adf-people-list>\n    </div>\n</ng-container>\n",
                host: { 'class': 'adf-people-search-field' },
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
PeopleSearchFieldComponent.ctorParameters = () => [
    { type: PeopleProcessService },
    { type: TranslationService }
];
PeopleSearchFieldComponent.propDecorators = {
    performSearch: [{ type: Input }],
    placeholder: [{ type: Input }],
    rowClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.performSearch;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.placeholder;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.rowClick;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.users$;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.searchUser;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.defaultPlaceholder;
    /** @type {?} */
    PeopleSearchFieldComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    PeopleSearchFieldComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwZW9wbGUvY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoLWZpZWxkL3Blb3BsZS1zZWFyY2gtZmllbGQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBVTlELE1BQU0sT0FBTywwQkFBMEI7Ozs7O0lBZ0JuQyxZQUFtQixvQkFBMEMsRUFDekMsa0JBQXNDO1FBRHZDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDekMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQVIxRCxhQUFRLEdBQW1DLElBQUksWUFBWSxFQUFvQixDQUFDO1FBR2hGLGVBQVUsR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUU1Qyx1QkFBa0IsR0FBRyxrQ0FBa0MsQ0FBQztRQUlwRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWTthQUNyQyxJQUFJLENBQ0QsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixTQUFTOzs7O1FBQUMsQ0FBQyxVQUFrQixFQUFFLEVBQUU7WUFDN0IsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNqQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDekM7aUJBQU07Z0JBQ0gsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDakI7UUFDTCxDQUFDLEVBQUMsQ0FDTCxDQUFDO1FBRU4sSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdkYsQ0FBQzs7OztJQUVNLEtBQUs7UUFDUixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxJQUFJLGlCQUFpQjtRQUNqQixPQUFPLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ3ZELENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7O0lBRUQsY0FBYyxDQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxZQUFvQixHQUFHO1FBQ3ZFLE9BQU8sY0FBYyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7O0lBRUQsa0JBQWtCLENBQUMsU0FBaUIsRUFBRSxRQUFnQjtRQUNsRCxTQUFTLEdBQUcsQ0FBQyxTQUFTLEtBQUssSUFBSSxJQUFJLFNBQVMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekUsUUFBUSxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7OztZQTdESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsa3REQUFtRDtnQkFFbkQsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFO2dCQUM1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDeEM7Ozs7WUFkOEMsb0JBQW9CO1lBQXhDLGtCQUFrQjs7OzRCQWtCeEMsS0FBSzswQkFHTCxLQUFLO3VCQUdMLE1BQU07Ozs7SUFOUCxtREFDcUM7O0lBRXJDLGlEQUNvQjs7SUFFcEIsOENBQ2dGOztJQUVoRiw0Q0FBdUM7O0lBQ3ZDLGdEQUE0Qzs7SUFFNUMsd0RBQXdEOztJQUU1QywwREFBaUQ7Ozs7O0lBQ2pELHdEQUE4QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJQcm9jZXNzTW9kZWwsIFRyYW5zbGF0aW9uU2VydmljZSwgUGVvcGxlUHJvY2Vzc1NlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBlcmZvcm1TZWFyY2hDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGVyZm9ybS1zZWFyY2gtY2FsbGJhY2suaW50ZXJmYWNlJztcbmltcG9ydCB7IGdldERpc3BsYXlVc2VyIH0gZnJvbSAnLi4vLi4vaGVscGVycy9nZXREaXNwbGF5VXNlcic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXBlb3BsZS1zZWFyY2gtZmllbGQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wZW9wbGUtc2VhcmNoLWZpZWxkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wZW9wbGUtc2VhcmNoLWZpZWxkLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLXBlb3BsZS1zZWFyY2gtZmllbGQnIH0sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcblxuZXhwb3J0IGNsYXNzIFBlb3BsZVNlYXJjaEZpZWxkQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpXG4gICAgcGVyZm9ybVNlYXJjaDogUGVyZm9ybVNlYXJjaENhbGxiYWNrO1xuXG4gICAgQElucHV0KClcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxVc2VyUHJvY2Vzc01vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8VXNlclByb2Nlc3NNb2RlbD4oKTtcblxuICAgIHVzZXJzJDogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+O1xuICAgIHNlYXJjaFVzZXI6IEZvcm1Db250cm9sID0gbmV3IEZvcm1Db250cm9sKCk7XG5cbiAgICBkZWZhdWx0UGxhY2Vob2xkZXIgPSAnQURGX1RBU0tfTElTVC5QRU9QTEUuU0VBUkNIX1VTRVInO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHBlb3BsZVByb2Nlc3NTZXJ2aWNlOiBQZW9wbGVQcm9jZXNzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudXNlcnMkID0gdGhpcy5zZWFyY2hVc2VyLnZhbHVlQ2hhbmdlc1xuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDIwMCksXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKChzZWFyY2hXb3JkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaFdvcmQgJiYgc2VhcmNoV29yZC50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm1TZWFyY2goc2VhcmNoV29yZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIgPSB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoVXNlci5yZXNldCgpO1xuICAgIH1cblxuICAgIGdldCBzZWFyY2hQbGFjZWhvbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhY2Vob2xkZXIgfHwgdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgb25Sb3dDbGljayhldmVudCkge1xuICAgICAgICB0aGlzLnJvd0NsaWNrLmVtaXQoZXZlbnQpO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlVc2VyKGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZyA9ICctJyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBnZXREaXNwbGF5VXNlcihmaXJzdE5hbWUsIGxhc3ROYW1lLCBkZWxpbWl0ZXIpO1xuICAgIH1cblxuICAgIGdldEluaXRpYWxVc2VyTmFtZShmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZykge1xuICAgICAgICBmaXJzdE5hbWUgPSAoZmlyc3ROYW1lICE9PSBudWxsICYmIGZpcnN0TmFtZSAhPT0gJycgPyBmaXJzdE5hbWVbMF0gOiAnJyk7XG4gICAgICAgIGxhc3ROYW1lID0gKGxhc3ROYW1lICE9PSBudWxsICYmIGxhc3ROYW1lICE9PSAnJyA/IGxhc3ROYW1lWzBdIDogJycpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREaXNwbGF5VXNlcihmaXJzdE5hbWUsIGxhc3ROYW1lLCAnJyk7XG4gICAgfVxufVxuIl19