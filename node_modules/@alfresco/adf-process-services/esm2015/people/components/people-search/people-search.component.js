/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
export class PeopleSearchComponent {
    constructor() {
        /**
         * Emitted when a search is performed with a new keyword.
         */
        this.searchPeople = new EventEmitter();
        /**
         * Emitted when a user is selected and the action button is clicked.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when the "close" button is clicked.
         */
        this.closeSearch = new EventEmitter();
        this.selectedUser = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.filteredResults$ = this.results
            .pipe(map((/**
         * @param {?} users
         * @return {?}
         */
        (users) => {
            return users.filter((/**
             * @param {?} user
             * @return {?}
             */
            (user) => user.id !== this.selectedUser.id));
        })));
        this.performSearch = this.performSearchCallback.bind(this);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    performSearchCallback(event) {
        this.searchPeople.emit(event);
        return this.filteredResults$;
    }
    /**
     * @param {?} user
     * @return {?}
     */
    onRowClick(user) {
        this.selectedUser = user;
    }
    /**
     * @return {?}
     */
    closeSearchList() {
        this.closeSearch.emit();
    }
    /**
     * @return {?}
     */
    involveUserAndClose() {
        this.involveUser();
        this.closeSearchList();
    }
    /**
     * @return {?}
     */
    involveUser() {
        if (this.selectedUser === undefined) {
            return;
        }
        this.success.emit(this.selectedUser);
    }
}
PeopleSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-search',
                template: "<div class=\"adf-search-text-header\">\n    <ng-content select=\"[adf-people-search-title], [people-search-title]\"></ng-content>\n</div>\n\n<adf-people-search-field [performSearch]=\"performSearch\" (rowClick)=\"onRowClick($event)\"></adf-people-search-field>\n\n<div class=\"search-list-action-container\">\n    <button mat-button type=\"button\" id=\"close-people-search\" (click)=\"closeSearchList()\">\n        {{'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE' | translate }}\n    </button>\n    <button mat-button type=\"button\" id=\"add-people\" (click)=\"involveUserAndClose()\">\n        <ng-content select=\"[adf-people-search-action-label], [people-search-action-label]\"></ng-content>\n    </button>\n</div>\n",
                host: {
                    'class': 'adf-people-search'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
PeopleSearchComponent.ctorParameters = () => [];
PeopleSearchComponent.propDecorators = {
    results: [{ type: Input }],
    searchPeople: [{ type: Output }],
    success: [{ type: Output }],
    closeSearch: [{ type: Output }]
};
if (false) {
    /**
     * Parameters for displaying the list.
     * @type {?}
     */
    PeopleSearchComponent.prototype.results;
    /**
     * Emitted when a search is performed with a new keyword.
     * @type {?}
     */
    PeopleSearchComponent.prototype.searchPeople;
    /**
     * Emitted when a user is selected and the action button is clicked.
     * @type {?}
     */
    PeopleSearchComponent.prototype.success;
    /**
     * Emitted when the "close" button is clicked.
     * @type {?}
     */
    PeopleSearchComponent.prototype.closeSearch;
    /** @type {?} */
    PeopleSearchComponent.prototype.filteredResults$;
    /** @type {?} */
    PeopleSearchComponent.prototype.selectedUser;
    /** @type {?} */
    PeopleSearchComponent.prototype.performSearch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJwZW9wbGUvY29tcG9uZW50cy9wZW9wbGUtc2VhcmNoL3Blb3BsZS1zZWFyY2guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFZckMsTUFBTSxPQUFPLHFCQUFxQjtJQXNCOUI7Ozs7UUFkQSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBSXJELFlBQU8sR0FBbUMsSUFBSSxZQUFZLEVBQW9CLENBQUM7Ozs7UUFJL0UsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR2pDLGlCQUFZLEdBQXFCLEVBQUUsQ0FBQztJQUdyQixDQUFDOzs7O0lBRWhCLFFBQVE7UUFDSixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU87YUFDL0IsSUFBSSxDQUNELEdBQUc7Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ1YsT0FBTyxLQUFLLENBQUMsTUFBTTs7OztZQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFDLENBQUM7UUFDcEUsQ0FBQyxFQUFDLENBQ0wsQ0FBQztRQUNOLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7SUFFTyxxQkFBcUIsQ0FBQyxLQUFLO1FBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLElBQXNCO1FBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25CLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDakMsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OztZQW5FSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0Isa3RCQUE2QztnQkFFN0MsSUFBSSxFQUFFO29CQUNGLE9BQU8sRUFBRSxtQkFBbUI7aUJBQy9CO2dCQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN4Qzs7Ozs7c0JBS0ksS0FBSzsyQkFJTCxNQUFNO3NCQUlOLE1BQU07MEJBSU4sTUFBTTs7Ozs7OztJQVpQLHdDQUN3Qzs7Ozs7SUFHeEMsNkNBQ3FEOzs7OztJQUdyRCx3Q0FDK0U7Ozs7O0lBRy9FLDRDQUNpQzs7SUFFakMsaURBQWlEOztJQUNqRCw2Q0FBb0M7O0lBQ3BDLDhDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJQcm9jZXNzTW9kZWwgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBlcmZvcm1TZWFyY2hDYWxsYmFjayB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGVyZm9ybS1zZWFyY2gtY2FsbGJhY2suaW50ZXJmYWNlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcGVvcGxlLXNlYXJjaCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Blb3BsZS1zZWFyY2guY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Blb3BsZS1zZWFyY2guY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdjbGFzcyc6ICdhZGYtcGVvcGxlLXNlYXJjaCdcbiAgICB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBQZW9wbGVTZWFyY2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgLyoqIFBhcmFtZXRlcnMgZm9yIGRpc3BsYXlpbmcgdGhlIGxpc3QuICovXG4gICAgQElucHV0KClcbiAgICByZXN1bHRzOiBPYnNlcnZhYmxlPFVzZXJQcm9jZXNzTW9kZWxbXT47XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgc2VhcmNoIGlzIHBlcmZvcm1lZCB3aXRoIGEgbmV3IGtleXdvcmQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc2VhcmNoUGVvcGxlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB1c2VyIGlzIHNlbGVjdGVkIGFuZCB0aGUgYWN0aW9uIGJ1dHRvbiBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxVc2VyUHJvY2Vzc01vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8VXNlclByb2Nlc3NNb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIFwiY2xvc2VcIiBidXR0b24gaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjbG9zZVNlYXJjaCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGZpbHRlcmVkUmVzdWx0cyQ6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPjtcbiAgICBzZWxlY3RlZFVzZXI6IFVzZXJQcm9jZXNzTW9kZWwgPSB7fTtcbiAgICBwZXJmb3JtU2VhcmNoOiBQZXJmb3JtU2VhcmNoQ2FsbGJhY2s7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJlZFJlc3VsdHMkID0gdGhpcy5yZXN1bHRzXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHVzZXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2Vycy5maWx0ZXIoKHVzZXIpID0+IHVzZXIuaWQgIT09IHRoaXMuc2VsZWN0ZWRVc2VyLmlkKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wZXJmb3JtU2VhcmNoID0gdGhpcy5wZXJmb3JtU2VhcmNoQ2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcmZvcm1TZWFyY2hDYWxsYmFjayhldmVudCk6IE9ic2VydmFibGU8VXNlclByb2Nlc3NNb2RlbFtdPiB7XG4gICAgICAgIHRoaXMuc2VhcmNoUGVvcGxlLmVtaXQoZXZlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJlZFJlc3VsdHMkO1xuICAgIH1cblxuICAgIG9uUm93Q2xpY2sodXNlcjogVXNlclByb2Nlc3NNb2RlbCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVXNlciA9IHVzZXI7XG4gICAgfVxuXG4gICAgY2xvc2VTZWFyY2hMaXN0KCkge1xuICAgICAgICB0aGlzLmNsb3NlU2VhcmNoLmVtaXQoKTtcbiAgICB9XG5cbiAgICBpbnZvbHZlVXNlckFuZENsb3NlKCkge1xuICAgICAgICB0aGlzLmludm9sdmVVc2VyKCk7XG4gICAgICAgIHRoaXMuY2xvc2VTZWFyY2hMaXN0KCk7XG4gICAgfVxuXG4gICAgaW52b2x2ZVVzZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVXNlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQodGhpcy5zZWxlY3RlZFVzZXIpO1xuICAgIH1cbn1cbiJdfQ==