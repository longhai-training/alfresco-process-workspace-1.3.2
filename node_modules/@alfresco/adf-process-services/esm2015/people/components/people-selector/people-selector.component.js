/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewChild, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';
import { PeopleProcessService, UserProcessModel, LogService, TranslationService } from '@alfresco/adf-core';
import { PeopleSearchFieldComponent } from '../people-search-field/people-search-field.component';
import { getDisplayUser } from '../../helpers/getDisplayUser';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
/** @type {?} */
const DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';
export class PeopleSelectorComponent {
    /**
     * @param {?} peopleProcessService
     * @param {?} logService
     * @param {?} translationService
     */
    constructor(peopleProcessService, logService, translationService) {
        this.peopleProcessService = peopleProcessService;
        this.logService = logService;
        this.translationService = translationService;
        this.peopleIdChange = new EventEmitter();
        this.performSearch = this.searchUser.bind(this);
        this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);
    }
    /**
     * @param {?} searchWord
     * @return {?}
     */
    searchUser(searchWord) {
        return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)
            .pipe(catchError(this.onSearchUserError.bind(this)));
    }
    /**
     * @private
     * @return {?}
     */
    onSearchUserError() {
        this.logService.error('getWorkflowUsers threw error');
        return of([]);
    }
    /**
     * @param {?} user
     * @return {?}
     */
    userSelected(user) {
        this.updateUserSelection(user);
    }
    /**
     * @return {?}
     */
    userDeselected() {
        this.updateUserSelection(undefined);
    }
    /**
     * @private
     * @param {?} user
     * @return {?}
     */
    updateUserSelection(user) {
        this.selectedUser = user;
        this.peopleIdChange.emit(user && user.id || undefined);
        this.searchFieldComponent.reset();
    }
    /**
     * @return {?}
     */
    get placeholder() {
        if (!this.selectedUser) {
            return this.defaultPlaceholder;
        }
        return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');
    }
}
PeopleSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-selector',
                template: "<adf-people-search-field\n    #peopleSearchField\n    class=\"adf-people-selector-field\"\n    [performSearch]=\"performSearch\"\n    [placeholder]=\"placeholder\"\n    (rowClick)=\"userSelected($event)\">\n</adf-people-search-field>\n<button\n    *ngIf=\"selectedUser\"\n    mat-icon-button\n    class=\"adf-people-selector-deselect\"\n    data-automation-id=\"adf-people-selector-deselect\"\n    (click)=\"userDeselected()\">\n        <mat-icon>cancel</mat-icon>\n</button>\n",
                host: { 'class': 'adf-people-selector' },
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
PeopleSelectorComponent.ctorParameters = () => [
    { type: PeopleProcessService },
    { type: LogService },
    { type: TranslationService }
];
PeopleSelectorComponent.propDecorators = {
    peopleId: [{ type: Input }],
    peopleIdChange: [{ type: Output }],
    searchFieldComponent: [{ type: ViewChild, args: ['peopleSearchField',] }]
};
if (false) {
    /** @type {?} */
    PeopleSelectorComponent.prototype.peopleId;
    /** @type {?} */
    PeopleSelectorComponent.prototype.peopleIdChange;
    /** @type {?} */
    PeopleSelectorComponent.prototype.searchFieldComponent;
    /** @type {?} */
    PeopleSelectorComponent.prototype.performSearch;
    /** @type {?} */
    PeopleSelectorComponent.prototype.selectedUser;
    /** @type {?} */
    PeopleSelectorComponent.prototype.defaultPlaceholder;
    /**
     * @type {?}
     * @private
     */
    PeopleSelectorComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    PeopleSelectorComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    PeopleSelectorComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInBlb3BsZS9jb21wb25lbnRzL3Blb3BsZS1zZWxlY3Rvci9wZW9wbGUtc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNsRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O01BRXRDLDRCQUE0QixHQUFHLCtCQUErQjtBQVVwRSxNQUFNLE9BQU8sdUJBQXVCOzs7Ozs7SUFnQmhDLFlBQ1ksb0JBQTBDLEVBQzFDLFVBQXNCLEVBQ3RCLGtCQUFzQztRQUZ0Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUU5QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQzVGLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLFVBQWtCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUM7YUFDbkUsSUFBSSxDQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hELENBQUM7SUFDVixDQUFDOzs7OztJQUVPLGlCQUFpQjtRQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLElBQXNCO1FBQy9CLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsY0FBYztRQUNWLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxJQUFzQjtRQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVELElBQUksV0FBVztRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO1NBQ2xDO1FBRUQsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7O1lBbEVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQix5ZUFBK0M7Z0JBRS9DLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRTtnQkFDeEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7O1lBZFEsb0JBQW9CO1lBQW9CLFVBQVU7WUFBRSxrQkFBa0I7Ozt1QkFrQjFFLEtBQUs7NkJBSUwsTUFBTTttQ0FHTixTQUFTLFNBQUMsbUJBQW1COzs7O0lBUDlCLDJDQUMyQjs7SUFHM0IsaURBQ3FDOztJQUVyQyx1REFDaUQ7O0lBRWpELGdEQUFxQzs7SUFDckMsK0NBQStCOztJQUMvQixxREFBMkI7Ozs7O0lBR3ZCLHVEQUFrRDs7Ozs7SUFDbEQsNkNBQThCOzs7OztJQUM5QixxREFBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24sIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGVyZm9ybVNlYXJjaENhbGxiYWNrIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9wZXJmb3JtLXNlYXJjaC1jYWxsYmFjay5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUGVvcGxlUHJvY2Vzc1NlcnZpY2UsIFVzZXJQcm9jZXNzTW9kZWwsIExvZ1NlcnZpY2UsIFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBQZW9wbGVTZWFyY2hGaWVsZENvbXBvbmVudCB9IGZyb20gJy4uL3Blb3BsZS1zZWFyY2gtZmllbGQvcGVvcGxlLXNlYXJjaC1maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheVVzZXIgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2dldERpc3BsYXlVc2VyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5jb25zdCBERUZBVUxUX0FTU0lHTkVFX1BMQUNFSE9MREVSID0gJ0FERl9UQVNLX0xJU1QuUEVPUExFLkFTU0lHTkVFJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcGVvcGxlLXNlbGVjdG9yJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGVvcGxlLXNlbGVjdG9yLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wZW9wbGUtc2VsZWN0b3IuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdhZGYtcGVvcGxlLXNlbGVjdG9yJyB9LFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBQZW9wbGVTZWxlY3RvckNvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHBlb3BsZUlkOiBVc2VyUHJvY2Vzc01vZGVsO1xuXG4gICAgLy8gUG9vcmx5IGRvY3VtZW50ZWQgQW5ndWxhciBtYWdpYyBmb3IgWyhwZW9wbGVJZCldXG4gICAgQE91dHB1dCgpXG4gICAgcGVvcGxlSWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuXG4gICAgQFZpZXdDaGlsZCgncGVvcGxlU2VhcmNoRmllbGQnKVxuICAgIHNlYXJjaEZpZWxkQ29tcG9uZW50OiBQZW9wbGVTZWFyY2hGaWVsZENvbXBvbmVudDtcblxuICAgIHBlcmZvcm1TZWFyY2g6IFBlcmZvcm1TZWFyY2hDYWxsYmFjaztcbiAgICBzZWxlY3RlZFVzZXI6IFVzZXJQcm9jZXNzTW9kZWw7XG4gICAgZGVmYXVsdFBsYWNlaG9sZGVyOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwZW9wbGVQcm9jZXNzU2VydmljZTogUGVvcGxlUHJvY2Vzc1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xuXG4gICAgICAgIHRoaXMucGVvcGxlSWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMucGVyZm9ybVNlYXJjaCA9IHRoaXMuc2VhcmNoVXNlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHRQbGFjZWhvbGRlciA9IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoREVGQVVMVF9BU1NJR05FRV9QTEFDRUhPTERFUik7XG4gICAgfVxuXG4gICAgc2VhcmNoVXNlcihzZWFyY2hXb3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHt9IHwgVXNlclByb2Nlc3NNb2RlbFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBlb3BsZVByb2Nlc3NTZXJ2aWNlLmdldFdvcmtmbG93VXNlcnModW5kZWZpbmVkLCBzZWFyY2hXb3JkKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcih0aGlzLm9uU2VhcmNoVXNlckVycm9yLmJpbmQodGhpcykpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25TZWFyY2hVc2VyRXJyb3IoKTogT2JzZXJ2YWJsZTxVc2VyUHJvY2Vzc01vZGVsW10+IHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdnZXRXb3JrZmxvd1VzZXJzIHRocmV3IGVycm9yJyk7XG4gICAgICAgIHJldHVybiBvZihbXSk7XG4gICAgfVxuXG4gICAgdXNlclNlbGVjdGVkKHVzZXI6IFVzZXJQcm9jZXNzTW9kZWwpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVVc2VyU2VsZWN0aW9uKHVzZXIpO1xuICAgIH1cblxuICAgIHVzZXJEZXNlbGVjdGVkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZVVzZXJTZWxlY3Rpb24odW5kZWZpbmVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVVzZXJTZWxlY3Rpb24odXNlcjogVXNlclByb2Nlc3NNb2RlbCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVXNlciA9IHVzZXI7XG4gICAgICAgIHRoaXMucGVvcGxlSWRDaGFuZ2UuZW1pdCh1c2VyICYmIHVzZXIuaWQgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5zZWFyY2hGaWVsZENvbXBvbmVudC5yZXNldCgpO1xuICAgIH1cblxuICAgIGdldCBwbGFjZWhvbGRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkVXNlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldERpc3BsYXlVc2VyKHRoaXMuc2VsZWN0ZWRVc2VyLmZpcnN0TmFtZSwgdGhpcy5zZWxlY3RlZFVzZXIubGFzdE5hbWUsICcgJyk7XG4gICAgfVxufVxuIl19