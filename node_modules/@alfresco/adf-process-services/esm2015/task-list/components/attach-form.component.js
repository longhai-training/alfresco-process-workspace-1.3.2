/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { TaskListService } from './../services/tasklist.service';
import { FormControl, Validators } from '@angular/forms';
export class AttachFormComponent {
    /**
     * @param {?} taskService
     * @param {?} logService
     * @param {?} formService
     */
    constructor(taskService, logService, formService) {
        this.taskService = taskService;
        this.logService = logService;
        this.formService = formService;
        /**
         * Emitted when the "Cancel" button is clicked.
         */
        this.cancelAttachForm = new EventEmitter();
        /**
         * Emitted when the form is attached successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.disableSubmit = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.attachFormControl = new FormControl('', Validators.required);
        this.attachFormControl.valueChanges.subscribe((/**
         * @param {?} currentValue
         * @return {?}
         */
        (currentValue) => {
            if (this.attachFormControl.valid) {
                if (this.formId !== currentValue) {
                    this.disableSubmit = false;
                }
                else {
                    this.disableSubmit = true;
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.formId = undefined;
        this.disableSubmit = true;
        this.loadFormsTask();
        if (this.formKey) {
            this.onFormAttached();
        }
    }
    /**
     * @return {?}
     */
    onCancelButtonClick() {
        this.selectedFormId = this.formId;
        this.cancelAttachForm.emit();
    }
    /**
     * @return {?}
     */
    onRemoveButtonClick() {
        this.taskService.deleteForm(this.taskId).subscribe((/**
         * @return {?}
         */
        () => {
            this.formId = this.selectedFormId = null;
            this.success.emit();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
            this.logService.error('An error occurred while trying to delete the form');
        }));
    }
    /**
     * @return {?}
     */
    onAttachFormButtonClick() {
        this.attachForm(this.taskId, this.selectedFormId);
    }
    /**
     * @private
     * @return {?}
     */
    loadFormsTask() {
        this.taskService.getFormList().subscribe((/**
         * @param {?} form
         * @return {?}
         */
        (form) => {
            this.forms = form;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
            this.logService.error('An error occurred while trying to get the forms');
        }));
    }
    /**
     * @private
     * @return {?}
     */
    onFormAttached() {
        this.formService.getTaskForm(this.taskId)
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.formService.getFormDefinitionByName(res.name).subscribe((/**
             * @param {?} formDef
             * @return {?}
             */
            (formDef) => {
                this.formId = this.selectedFormId = formDef;
            }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
            this.logService.error('Could not load forms');
        }));
    }
    /**
     * @private
     * @param {?} taskId
     * @param {?} formId
     * @return {?}
     */
    attachForm(taskId, formId) {
        if (taskId && formId) {
            this.taskService.attachFormToATask(taskId, formId)
                .subscribe((/**
             * @return {?}
             */
            () => {
                this.success.emit();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
                this.logService.error('Could not attach form');
            }));
        }
    }
}
AttachFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-attach-form',
                template: "<div class=\"adf-attach-form\">\n    <mat-card>\n        <mat-card-content>\n            <div class=\"adf-no-form-message-container\">\n                <mat-card-title class=\"mat-card-title\">\n                    <h4 class=\"adf-form-title\">{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_FORM' | translate }}</h4>\n                </mat-card-title>\n                <div class=\"adf-attach-form-row\">\n                    <mat-form-field class=\"adf-grid-full-width\">\n                        <mat-select [formControl]=\"attachFormControl\" placeholder=\"{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_OPTION' | translate }}\" id=\"form_id\" [(ngModel)]=\"selectedFormId\">\n                            <mat-option *ngFor=\"let form of forms\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n\n                <adf-form *ngIf=\"this.attachFormControl.valid\"\n                    [formId]=\"selectedFormId\"\n                    [readOnly]=\"true\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\">\n                </adf-form>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n            <div>\n                <button mat-button id=\"adf-no-form-remove-button\" color=\"warn\" *ngIf=\"formKey\" (click)=\"onRemoveButtonClick()\">{{ 'ADF_TASK_LIST.ATTACH_FORM.REMOVE_FORM' | translate }}</button>\n            </div>\n            <div>\n                <button mat-button id=\"adf-no-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n                <button mat-button id=\"adf-no-form-attach-form-button\" [disabled]=\"disableSubmit\" color=\"primary\" (click)=\"onAttachFormButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n            </div>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                styles: [".adf-attach-form .mat-form-field{width:100%}.adf-attach-form-row{display:flex;justify-content:space-between;margin:20px 0}.adf-attach-form .adf-no-form-mat-card-actions{justify-content:space-between;margin-top:30px;text-align:right}"]
            }] }
];
/** @nocollapse */
AttachFormComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: LogService },
    { type: FormService }
];
AttachFormComponent.propDecorators = {
    taskId: [{ type: Input }],
    formKey: [{ type: Input }],
    cancelAttachForm: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * Id of the task.
     * @type {?}
     */
    AttachFormComponent.prototype.taskId;
    /**
     * Identifier of the form to attach.
     * @type {?}
     */
    AttachFormComponent.prototype.formKey;
    /**
     * Emitted when the "Cancel" button is clicked.
     * @type {?}
     */
    AttachFormComponent.prototype.cancelAttachForm;
    /**
     * Emitted when the form is attached successfully.
     * @type {?}
     */
    AttachFormComponent.prototype.success;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    AttachFormComponent.prototype.error;
    /** @type {?} */
    AttachFormComponent.prototype.forms;
    /** @type {?} */
    AttachFormComponent.prototype.formId;
    /** @type {?} */
    AttachFormComponent.prototype.disableSubmit;
    /** @type {?} */
    AttachFormComponent.prototype.selectedFormId;
    /** @type {?} */
    AttachFormComponent.prototype.attachFormControl;
    /**
     * @type {?}
     * @private
     */
    AttachFormComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    AttachFormComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    AttachFormComponent.prototype.formService;
}
//# sourceMappingURL=data:application/json;base64,