/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FilterParamsModel } from '../models/filter.model';
import { TaskFilterService } from './../services/task-filter.service';
import { TaskListService } from './../services/tasklist.service';
import { IconModel } from '../../app-list/icon.model';
export class TaskFiltersComponent {
    /**
     * @param {?} taskFilterService
     * @param {?} taskListService
     * @param {?} appsProcessService
     */
    constructor(taskFilterService, taskListService, appsProcessService) {
        this.taskFilterService = taskFilterService;
        this.taskListService = taskListService;
        this.appsProcessService = appsProcessService;
        /**
         * Emitted when a filter in the list is clicked.
         */
        this.filterClick = new EventEmitter();
        /**
         * Emitted when the list is loaded.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs during loading.
         */
        this.error = new EventEmitter();
        this.filters = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.iconsMDL = new IconModel();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const appName = changes['appName'];
        /** @type {?} */
        const appId = changes['appId'];
        /** @type {?} */
        const filter = changes['filterParam'];
        if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
        }
        else if (appId && appId.currentValue !== appId.previousValue) {
            this.getFiltersByAppId(appId.currentValue);
        }
        else if (filter && filter.currentValue !== filter.previousValue) {
            this.selectFilter(filter.currentValue);
        }
    }
    /**
     * Return the task list filtered by appId or by appName
     * @param {?=} appId
     * @param {?=} appName
     * @return {?}
     */
    getFilters(appId, appName) {
        appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);
    }
    /**
     * Return the filter list filtered by appId
     * @param {?=} appId - optional
     * @return {?}
     */
    getFiltersByAppId(appId) {
        this.taskFilterService.getTaskListFilters(appId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res.length === 0 && this.isFilterListEmpty()) {
                this.createFiltersByAppId(appId);
            }
            else {
                this.resetFilter();
                this.filters = res;
                this.selectFilter(this.filterParam);
                this.success.emit(res);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }));
    }
    /**
     * Return the filter list filtered by appName
     * @param {?} appName
     * @return {?}
     */
    getFiltersByAppName(appName) {
        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe((/**
         * @param {?} application
         * @return {?}
         */
        (application) => {
            this.getFiltersByAppId(application.id);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }));
    }
    /**
     * Create default filters by appId
     * @param {?=} appId
     * @return {?}
     */
    createFiltersByAppId(appId) {
        this.taskFilterService.createDefaultFilters(appId).subscribe((/**
         * @param {?} resDefault
         * @return {?}
         */
        (resDefault) => {
            this.resetFilter();
            this.filters = resDefault;
            this.selectFilter(this.filterParam);
            this.success.emit(resDefault);
        }), (/**
         * @param {?} errDefault
         * @return {?}
         */
        (errDefault) => {
            this.error.emit(errDefault);
        }));
    }
    /**
     * Pass the selected filter as next
     * @param {?} newFilter
     * @return {?}
     */
    selectFilter(newFilter) {
        if (newFilter) {
            this.currentFilter = this.filters.find((/**
             * @param {?} filter
             * @param {?} index
             * @return {?}
             */
            (filter, index) => newFilter.index === index ||
                newFilter.id === filter.id ||
                (newFilter.name &&
                    (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase()))));
        }
        if (!this.currentFilter) {
            this.selectDefaultTaskFilter();
        }
    }
    /**
     * @param {?} newFilter
     * @return {?}
     */
    selectFilterAndEmit(newFilter) {
        this.selectFilter(newFilter);
        this.filterClick.emit(this.currentFilter);
    }
    /**
     * Select filter with task
     * @param {?} taskId
     * @return {?}
     */
    selectFilterWithTask(taskId) {
        /** @type {?} */
        const filteredFilterList = [];
        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => {
            filteredFilterList.push(filter);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.error.emit(err);
        }), (/**
         * @return {?}
         */
        () => {
            if (filteredFilterList.length > 0) {
                this.selectFilter(filteredFilterList[0]);
                this.filterClick.emit(this.currentFilter);
            }
        }));
    }
    /**
     * Select as default task filter the first in the list
     * @return {?}
     */
    selectDefaultTaskFilter() {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
    }
    /**
     * Return the current task
     * @return {?}
     */
    getCurrentFilter() {
        return this.currentFilter;
    }
    /**
     * Check if the filter list is empty
     * @return {?}
     */
    isFilterListEmpty() {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    }
    /**
     * Reset the filters properties
     * @private
     * @return {?}
     */
    resetFilter() {
        this.filters = [];
        this.currentFilter = undefined;
    }
    /**
     * Return current filter icon
     * @param {?} icon
     * @return {?}
     */
    getFilterIcon(icon) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
    }
}
TaskFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-filters',
                template: "<div class=\"menu-container\">\n    <mat-list class=\"adf-menu-list\">\n        <mat-list-item (click)=\"selectFilterAndEmit(filter)\" *ngFor=\"let filter of filters\"\n                      class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n            <mat-icon *ngIf=\"showIcon\" matListIcon class=\"adf-filters__entry-icon\">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaskFiltersComponent.ctorParameters = () => [
    { type: TaskFilterService },
    { type: TaskListService },
    { type: AppsProcessService }
];
TaskFiltersComponent.propDecorators = {
    filterParam: [{ type: Input }],
    filterClick: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    appId: [{ type: Input }],
    appName: [{ type: Input }],
    showIcon: [{ type: Input }]
};
if (false) {
    /**
     * Parameters to use for the task filter. If there is no match then
     * the default filter (the first one the list) is selected.
     * @type {?}
     */
    TaskFiltersComponent.prototype.filterParam;
    /**
     * Emitted when a filter in the list is clicked.
     * @type {?}
     */
    TaskFiltersComponent.prototype.filterClick;
    /**
     * Emitted when the list is loaded.
     * @type {?}
     */
    TaskFiltersComponent.prototype.success;
    /**
     * Emitted when an error occurs during loading.
     * @type {?}
     */
    TaskFiltersComponent.prototype.error;
    /**
     * Display filters available to the current user for the application with the specified ID.
     * @type {?}
     */
    TaskFiltersComponent.prototype.appId;
    /**
     * Display filters available to the current user for the application with the specified name.
     * @type {?}
     */
    TaskFiltersComponent.prototype.appName;
    /**
     * Toggles display of the filter's icon.
     * @type {?}
     */
    TaskFiltersComponent.prototype.showIcon;
    /** @type {?} */
    TaskFiltersComponent.prototype.filter$;
    /** @type {?} */
    TaskFiltersComponent.prototype.currentFilter;
    /** @type {?} */
    TaskFiltersComponent.prototype.filters;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.iconsMDL;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.taskFilterService;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskFiltersComponent.prototype.appsProcessService;
}
//# sourceMappingURL=data:application/json;base64,