/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
export class TaskStandaloneComponent {
    constructor() {
        /**
         * If true then Task completed message is shown and `Complete` and `Cancel` buttons are hidden.
         */
        this.isCompleted = false;
        /**
         * Toggles rendering of the `Complete` button.
         */
        this.hasCompletePermission = true;
        // TODO: rename all with show prefix
        /**
         * Toggles rendering of the `Cancel` button.
         */
        this.hideCancelButton = true;
        /**
         * Emitted when the "Cancel" button is clicked.
         */
        this.cancel = new EventEmitter();
        /**
         * Emitted when the form associated with the task is completed.
         */
        this.complete = new EventEmitter();
        /**
         * Emitted when the form associated with the form task is attached.
         */
        this.showAttachForm = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onCancelButtonClick() {
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    onCompleteButtonClick() {
        this.complete.emit();
    }
    /**
     * @return {?}
     */
    hasCompleteButton() {
        return this.hasCompletePermission && !this.isCompleted;
    }
    /**
     * @return {?}
     */
    hasCancelButton() {
        return !this.hideCancelButton && !this.isCompleted;
    }
    /**
     * @return {?}
     */
    hasAttachFormButton() {
        return !this.isCompleted;
    }
    /**
     * @return {?}
     */
    onShowAttachForm() {
        this.showAttachForm.emit();
    }
}
TaskStandaloneComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-standalone',
                template: "<mat-card class=\"adf-message-card\">\n    <mat-card-content>\n        <div class=\"adf-no-form-message-container\">\n            <div class=\"adf-no-form-message-list\">\n                <div *ngIf=\"!isCompleted; else completedMessage\" class=\"adf-no-form-message\">\n                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                </div>\n                <ng-template #completedMessage>\n                    <div id=\"adf-completed-form-message\" class=\"adf-no-form-message\">\n                        <p>{{'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_MESSAGE' | translate : {taskName : taskName} }}</p>\n                    </div>\n                    <div class=\"adf-no-form-submessage\">\n                        {{'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_SUB_MESSAGE' | translate}}\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n        <button mat-button *ngIf=\"hasAttachFormButton()\" id=\"adf-no-form-attach-form-button\" (click)=\"onShowAttachForm()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n        <div>\n            <button mat-button *ngIf=\"hasCancelButton()\" id=\"adf-no-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n            <button mat-button *ngIf=\"hasCompleteButton()\" id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onCompleteButtonClick()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
TaskStandaloneComponent.ctorParameters = () => [];
TaskStandaloneComponent.propDecorators = {
    taskName: [{ type: Input }],
    taskId: [{ type: Input }],
    isCompleted: [{ type: Input }],
    hasCompletePermission: [{ type: Input }],
    hideCancelButton: [{ type: Input }],
    cancel: [{ type: Output }],
    complete: [{ type: Output }],
    showAttachForm: [{ type: Output }]
};
if (false) {
    /**
     * Name of the task.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.taskName;
    /**
     * Id of the task.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.taskId;
    /**
     * If true then Task completed message is shown and `Complete` and `Cancel` buttons are hidden.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.isCompleted;
    /**
     * Toggles rendering of the `Complete` button.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.hasCompletePermission;
    /**
     * Toggles rendering of the `Cancel` button.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.hideCancelButton;
    /**
     * Emitted when the "Cancel" button is clicked.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.cancel;
    /**
     * Emitted when the form associated with the task is completed.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.complete;
    /**
     * Emitted when the form associated with the form task is attached.
     * @type {?}
     */
    TaskStandaloneComponent.prototype.showAttachForm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1zdGFuZGFsb25lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRhc2stbGlzdC9jb21wb25lbnRzL3Rhc2stc3RhbmRhbG9uZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVMxRixNQUFNLE9BQU8sdUJBQXVCO0lBbUNoQzs7OztRQXZCQSxnQkFBVyxHQUFZLEtBQUssQ0FBQzs7OztRQUk3QiwwQkFBcUIsR0FBWSxJQUFJLENBQUM7Ozs7O1FBS3RDLHFCQUFnQixHQUFZLElBQUksQ0FBQzs7OztRQUlqQyxXQUFNLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7UUFJdEQsYUFBUSxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDOzs7O1FBSXhELG1CQUFjLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7SUFFOUMsQ0FBQzs7OztJQUVqQixtQkFBbUI7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxxQkFBcUI7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUMscUJBQXFCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzNELENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDdkQsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxnQkFBZ0I7UUFDWixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7OztZQWxFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0Isb3VEQUErQztnQkFFL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7Ozt1QkFLSSxLQUFLO3FCQUlMLEtBQUs7MEJBSUwsS0FBSztvQ0FJTCxLQUFLOytCQUtMLEtBQUs7cUJBSUwsTUFBTTt1QkFJTixNQUFNOzZCQUlOLE1BQU07Ozs7Ozs7SUE3QlAsMkNBQ1M7Ozs7O0lBR1QseUNBQ087Ozs7O0lBR1AsOENBQzZCOzs7OztJQUc3Qix3REFDc0M7Ozs7O0lBSXRDLG1EQUNpQzs7Ozs7SUFHakMseUNBQ3NEOzs7OztJQUd0RCwyQ0FDd0Q7Ozs7O0lBR3hELGlEQUM4RCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi10YXNrLXN0YW5kYWxvbmUnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90YXNrLXN0YW5kYWxvbmUuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Rhc2stc3RhbmRhbG9uZS5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBUYXNrU3RhbmRhbG9uZUNvbXBvbmVudCB7XG5cbiAgICAvKiogTmFtZSBvZiB0aGUgdGFzay4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhc2tOYW1lO1xuXG4gICAgLyoqIElkIG9mIHRoZSB0YXNrLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGFza0lkO1xuXG4gICAgLyoqIElmIHRydWUgdGhlbiBUYXNrIGNvbXBsZXRlZCBtZXNzYWdlIGlzIHNob3duIGFuZCBgQ29tcGxldGVgIGFuZCBgQ2FuY2VsYCBidXR0b25zIGFyZSBoaWRkZW4uICovXG4gICAgQElucHV0KClcbiAgICBpc0NvbXBsZXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIFRvZ2dsZXMgcmVuZGVyaW5nIG9mIHRoZSBgQ29tcGxldGVgIGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGhhc0NvbXBsZXRlUGVybWlzc2lvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvLyBUT0RPOiByZW5hbWUgYWxsIHdpdGggc2hvdyBwcmVmaXhcbiAgICAvKiogVG9nZ2xlcyByZW5kZXJpbmcgb2YgdGhlIGBDYW5jZWxgIGJ1dHRvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGhpZGVDYW5jZWxCdXR0b246IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJDYW5jZWxcIiBidXR0b24gaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjYW5jZWw6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvcm0gYXNzb2NpYXRlZCB3aXRoIHRoZSB0YXNrIGlzIGNvbXBsZXRlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjb21wbGV0ZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZm9ybSBhc3NvY2lhdGVkIHdpdGggdGhlIGZvcm0gdGFzayBpcyBhdHRhY2hlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzaG93QXR0YWNoRm9ybTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIG9uQ2FuY2VsQnV0dG9uQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2FuY2VsLmVtaXQoKTtcbiAgICB9XG5cbiAgICBvbkNvbXBsZXRlQnV0dG9uQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcGxldGUuZW1pdCgpO1xuICAgIH1cblxuICAgIGhhc0NvbXBsZXRlQnV0dG9uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNDb21wbGV0ZVBlcm1pc3Npb24gJiYgIXRoaXMuaXNDb21wbGV0ZWQ7XG4gICAgfVxuXG4gICAgaGFzQ2FuY2VsQnV0dG9uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGlkZUNhbmNlbEJ1dHRvbiAmJiAhdGhpcy5pc0NvbXBsZXRlZDtcbiAgICB9XG5cbiAgICBoYXNBdHRhY2hGb3JtQnV0dG9uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNDb21wbGV0ZWQ7XG4gICAgfVxuXG4gICAgb25TaG93QXR0YWNoRm9ybSgpIHtcbiAgICAgICAgdGhpcy5zaG93QXR0YWNoRm9ybS5lbWl0KCk7XG4gICAgfVxufVxuIl19