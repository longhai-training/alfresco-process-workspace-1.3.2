/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService, UserPreferencesService, UserPreferenceValues, FormFieldModel, FormModel } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import { MOMENT_DATE_FORMATS, MomentDateAdapter } from '@alfresco/adf-core';
import moment from 'moment-es6';
import { of } from 'rxjs';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { switchMap, defaultIfEmpty } from 'rxjs/operators';
import { FormBuilder, Validators, FormControl } from '@angular/forms';
const Éµ0 = MOMENT_DATE_FORMATS;
export class StartTaskComponent {
    /**
     * Constructor
     * @param {?} taskService
     * @param {?} dateAdapter
     * @param {?} userPreferencesService
     * @param {?} formBuilder
     * @param {?} logService
     */
    constructor(taskService, dateAdapter, userPreferencesService, formBuilder, logService) {
        this.taskService = taskService;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.formBuilder = formBuilder;
        this.logService = logService;
        this.FORMAT_DATE = 'DD/MM/YYYY';
        this.MAX_LENGTH = 255;
        /**
         * Default Task Name.
         */
        this.name = '';
        /**
         * Emitted when the task is successfully created.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when the cancel button is clicked by the user.
         */
        this.cancel = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.taskDetailsModel = new TaskDetailsModel();
        this.dateError = false;
        this.maxTaskNameLength = this.MAX_LENGTH;
        this.loading = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.name) {
            this.taskDetailsModel.name = this.name;
        }
        this.validateMaxTaskNameLength();
        this.field = new FormFieldModel(new FormModel(), { id: this.assigneeId, value: this.assigneeId, placeholder: 'Assignee' });
        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        (locale) => {
            this.dateAdapter.setLocale(locale);
        }));
        this.loadFormsTask();
        this.buildForm();
    }
    /**
     * @return {?}
     */
    buildForm() {
        this.taskForm = this.formBuilder.group({
            name: new FormControl(this.taskDetailsModel.name, [Validators.required, Validators.maxLength(this.maxTaskNameLength), this.whitespaceValidator]),
            description: new FormControl('', [this.whitespaceValidator]),
            formKey: new FormControl('')
        });
        this.taskForm.valueChanges.subscribe((/**
         * @param {?} taskFormValues
         * @return {?}
         */
        (taskFormValues) => this.setTaskDetails(taskFormValues)));
    }
    /**
     * @param {?} control
     * @return {?}
     */
    whitespaceValidator(control) {
        if (control.value) {
            /** @type {?} */
            const isWhitespace = (control.value || '').trim().length === 0;
            /** @type {?} */
            const isValid = control.value.length === 0 || !isWhitespace;
            return isValid ? null : { 'whitespace': true };
        }
    }
    /**
     * @param {?} form
     * @return {?}
     */
    setTaskDetails(form) {
        this.taskDetailsModel.name = form.name;
        this.taskDetailsModel.description = form.description;
        this.taskDetailsModel.formKey = form.formKey ? form.formKey.toString() : null;
    }
    /**
     * @return {?}
     */
    isFormValid() {
        return this.taskForm.valid && !this.dateError && !this.loading;
    }
    /**
     * @return {?}
     */
    saveTask() {
        this.loading = true;
        if (this.appId) {
            this.taskDetailsModel.category = this.appId.toString();
        }
        this.taskService.createNewTask(this.taskDetailsModel)
            .pipe(switchMap((/**
         * @param {?} createRes
         * @return {?}
         */
        (createRes) => this.attachForm(createRes.id, this.taskDetailsModel.formKey).pipe(defaultIfEmpty(createRes), switchMap((/**
         * @param {?} attachRes
         * @return {?}
         */
        (attachRes) => this.assignTaskByUserId(createRes.id, this.assigneeId).pipe(defaultIfEmpty(attachRes ? attachRes : createRes))))))))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.loading = false;
            this.success.emit(res);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.loading = false;
            this.error.emit(err);
            this.logService.error('An error occurred while creating new task');
        }));
    }
    /**
     * @param {?} userId
     * @return {?}
     */
    getAssigneeId(userId) {
        this.assigneeId = userId;
    }
    /**
     * @private
     * @param {?} taskId
     * @param {?} formKey
     * @return {?}
     */
    attachForm(taskId, formKey) {
        /** @type {?} */
        let response = of();
        if (taskId && formKey) {
            response = this.taskService.attachFormToATask(taskId, parseInt(formKey, 10));
        }
        return response;
    }
    /**
     * @private
     * @param {?} taskId
     * @param {?} userId
     * @return {?}
     */
    assignTaskByUserId(taskId, userId) {
        /** @type {?} */
        let response = of();
        if (taskId && userId) {
            response = this.taskService.assignTaskByUserId(taskId, userId);
        }
        return response;
    }
    /**
     * @return {?}
     */
    onCancel() {
        this.cancel.emit();
    }
    /**
     * @private
     * @return {?}
     */
    loadFormsTask() {
        this.forms$ = this.taskService.getFormList();
    }
    /**
     * @param {?} user
     * @return {?}
     */
    isUserNameEmpty(user) {
        return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    isEmpty(data) {
        return data === undefined || data === null || data.trim().length === 0;
    }
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @param {?=} delimiter
     * @return {?}
     */
    getDisplayUser(firstName, lastName, delimiter = '-') {
        firstName = (firstName !== null ? firstName : '');
        lastName = (lastName !== null ? lastName : '');
        return firstName + delimiter + lastName;
    }
    /**
     * @param {?} newDateValue
     * @return {?}
     */
    onDateChanged(newDateValue) {
        this.dateError = false;
        if (newDateValue) {
            /** @type {?} */
            let momentDate;
            if (typeof newDateValue === 'string') {
                momentDate = moment(newDateValue, this.FORMAT_DATE, true);
            }
            else {
                momentDate = newDateValue;
            }
            if (momentDate.isValid()) {
                this.taskDetailsModel.dueDate = momentDate.toDate();
            }
            else {
                this.dateError = true;
                this.taskDetailsModel.dueDate = null;
            }
        }
        else {
            this.taskDetailsModel.dueDate = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    validateMaxTaskNameLength() {
        if (this.maxTaskNameLength > this.MAX_LENGTH) {
            this.maxTaskNameLength = this.MAX_LENGTH;
            this.logService.log(`the task name length cannot be greater than ${this.MAX_LENGTH}`);
        }
    }
    /**
     * @return {?}
     */
    get nameController() {
        return this.taskForm.get('name');
    }
    /**
     * @return {?}
     */
    get descriptionController() {
        return this.taskForm.get('description');
    }
    /**
     * @return {?}
     */
    get formKeyController() {
        return this.taskForm.get('formKey');
    }
}
StartTaskComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-start-task',
                template: "<mat-card fxFlex=\"70%\" class=\"adf-new-task-layout-card\">\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\" class=\"adf-new-task-heading\">\n        <mat-card-title>{{'ADF_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <form [formGroup]=\"taskForm\" fxLayout=\"column\" fxLayoutGap=\"10px\">\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate}}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        formControlName=\"name\">\n                        <mat-error *ngIf=\"nameController.hasError('required') || nameController.hasError('whitespace')\">\n                            {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.REQUIRED' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                            {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxTaskNameLength } }}\n                        </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"adf-task-description\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        rows=\"1\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                    <mat-error *ngIf=\"descriptionController.hasError('whitespace')\">\n                        {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.MESSAGE' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\" fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input\n                        matInput\n                        (keyup)=\"onDateChanged($event.srcElement.value)\"\n                        (dateInput)=\"onDateChanged($event.value)\"\n                        [matDatepicker]=\"taskDatePicker\"\n                        placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                        id=\"date_id\">\n                    <mat-datepicker-toggle\n                        matSuffix\n                        [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker\n                        #taskDatePicker\n                        [touchUi]=\"true\">\n                    </mat-datepicker>\n                    <div class=\"adf-error-text-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <div fxFlex>\n                    <people-widget\n                        (peopleSelected)=\"getAssigneeId($event)\"\n                        [field]=\"field\"\n                        class=\"adf-people-widget-content\"></people-widget>\n                </div>\n            </div>\n            <div class=\"adf-task-form\">\n                <mat-form-field fxFlex=\"48%\" fxFlex.xs=\"100%\">\n                    <mat-label id=\"form_label\">{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}</mat-label>\n                    <mat-select\n                        id=\"form_id\"\n                        class=\"form-control\"\n                        formControlName=\"formKey\">\n                    <mat-option>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n                    <mat-option *ngFor=\"let form of forms$ | async\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    </mat-card-content>\n    <mat-card-actions>\n        <div class=\"adf-new-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button\n                mat-button\n                (click)=\"onCancel()\"\n                id=\"button-cancel\">\n                {{'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n            </button>\n            <button\n                color=\"primary\"\n                mat-button\n                [disabled]=\"!isFormValid()\"\n                (click)=\"saveTask()\"\n                id=\"button-start\">\n                {{'ADF_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n            </button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: Éµ0 }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
StartTaskComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: FormBuilder },
    { type: LogService }
];
StartTaskComponent.propDecorators = {
    appId: [{ type: Input }],
    name: [{ type: Input }],
    success: [{ type: Output }],
    cancel: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    StartTaskComponent.prototype.FORMAT_DATE;
    /** @type {?} */
    StartTaskComponent.prototype.MAX_LENGTH;
    /**
     * (required) The id of the app.
     * @type {?}
     */
    StartTaskComponent.prototype.appId;
    /**
     * Default Task Name.
     * @type {?}
     */
    StartTaskComponent.prototype.name;
    /**
     * Emitted when the task is successfully created.
     * @type {?}
     */
    StartTaskComponent.prototype.success;
    /**
     * Emitted when the cancel button is clicked by the user.
     * @type {?}
     */
    StartTaskComponent.prototype.cancel;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    StartTaskComponent.prototype.error;
    /** @type {?} */
    StartTaskComponent.prototype.taskDetailsModel;
    /** @type {?} */
    StartTaskComponent.prototype.forms$;
    /** @type {?} */
    StartTaskComponent.prototype.assigneeId;
    /** @type {?} */
    StartTaskComponent.prototype.field;
    /** @type {?} */
    StartTaskComponent.prototype.taskForm;
    /** @type {?} */
    StartTaskComponent.prototype.dateError;
    /** @type {?} */
    StartTaskComponent.prototype.maxTaskNameLength;
    /** @type {?} */
    StartTaskComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    StartTaskComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    StartTaskComponent.prototype.dateAdapter;
    /**
     * @type {?}
     * @private
     */
    StartTaskComponent.prototype.userPreferencesService;
    /**
     * @type {?}
     * @private
     */
    StartTaskComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    StartTaskComponent.prototype.logService;
}
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,