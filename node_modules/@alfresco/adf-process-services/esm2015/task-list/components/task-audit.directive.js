/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { ContentService } from '@alfresco/adf-core';
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { TaskListService } from './../services/tasklist.service';
/** @type {?} */
const JSON_FORMAT = 'json';
/** @type {?} */
const PDF_FORMAT = 'pdf';
export class TaskAuditDirective {
    /**
     *
     * @param {?} contentService
     * @param {?} taskListService
     */
    constructor(contentService, taskListService) {
        this.contentService = contentService;
        this.taskListService = taskListService;
        /**
         * Name of the downloaded file (for PDF downloads).
         */
        this.fileName = 'Audit';
        /**
         * Format of the audit information. Can be "pdf" or "json".
         */
        this.format = 'pdf';
        /**
         * Enables downloading of the audit when the decorated element is clicked.
         */
        this.download = true;
        /**
         * Emitted when the decorated element is clicked.
         */
        this.clicked = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.isValidType()) {
            this.setDefaultFormatType();
        }
    }
    /**
     * @return {?}
     */
    isValidType() {
        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    setDefaultFormatType() {
        this.format = PDF_FORMAT;
    }
    /**
     * fetch the audit information in the requested format
     * @return {?}
     */
    fetchAuditInfo() {
        if (this.isPdfFormat()) {
            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe((/**
             * @param {?} blob
             * @return {?}
             */
            (blob) => {
                this.audit = blob;
                if (this.download) {
                    this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');
                }
                this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
        else {
            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.audit = res;
                this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
    }
    /**
     * @return {?}
     */
    onClickAudit() {
        this.fetchAuditInfo();
    }
    /**
     * @return {?}
     */
    isJsonFormat() {
        return this.format === JSON_FORMAT;
    }
    /**
     * @return {?}
     */
    isPdfFormat() {
        return this.format === PDF_FORMAT;
    }
}
TaskAuditDirective.decorators = [
    { type: Directive, args: [{
                selector: 'button[adf-task-audit]',
                host: {
                    'role': 'button',
                    '(click)': 'onClickAudit()'
                }
            },] }
];
/** @nocollapse */
TaskAuditDirective.ctorParameters = () => [
    { type: ContentService },
    { type: TaskListService }
];
TaskAuditDirective.propDecorators = {
    taskId: [{ type: Input, args: ['task-id',] }],
    fileName: [{ type: Input }],
    format: [{ type: Input }],
    download: [{ type: Input }],
    clicked: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * (**required**) The id of the task.
     * @type {?}
     */
    TaskAuditDirective.prototype.taskId;
    /**
     * Name of the downloaded file (for PDF downloads).
     * @type {?}
     */
    TaskAuditDirective.prototype.fileName;
    /**
     * Format of the audit information. Can be "pdf" or "json".
     * @type {?}
     */
    TaskAuditDirective.prototype.format;
    /**
     * Enables downloading of the audit when the decorated element is clicked.
     * @type {?}
     */
    TaskAuditDirective.prototype.download;
    /**
     * Emitted when the decorated element is clicked.
     * @type {?}
     */
    TaskAuditDirective.prototype.clicked;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskAuditDirective.prototype.error;
    /** @type {?} */
    TaskAuditDirective.prototype.audit;
    /**
     * @type {?}
     * @private
     */
    TaskAuditDirective.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    TaskAuditDirective.prototype.taskListService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1hdWRpdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJ0YXNrLWxpc3QvY29tcG9uZW50cy90YXNrLWF1ZGl0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7TUFFM0QsV0FBVyxHQUFXLE1BQU07O01BQzVCLFVBQVUsR0FBVyxLQUFLO0FBU2hDLE1BQU0sT0FBTyxrQkFBa0I7Ozs7OztJQWlDM0IsWUFBb0IsY0FBOEIsRUFDOUIsZUFBZ0M7UUFEaEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjs7OztRQTFCcEQsYUFBUSxHQUFXLE9BQU8sQ0FBQzs7OztRQUkzQixXQUFNLEdBQVcsS0FBSyxDQUFDOzs7O1FBSXZCLGFBQVEsR0FBWSxJQUFJLENBQUM7Ozs7UUFJekIsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDOzs7O1FBSXJELFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQVduRCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUU7WUFDNUQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFRCxvQkFBb0I7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFLRCxjQUFjO1FBQ1YsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUzs7OztZQUM3RCxDQUFDLElBQVUsRUFBRSxFQUFFO2dCQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNsQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2lCQUN4RTtnQkFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMzRixDQUFDOzs7O1lBQ0QsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDSixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6QixDQUFDLEVBQUMsQ0FBQztTQUNWO2FBQU07WUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O1lBQzlELENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzNGLENBQUM7Ozs7WUFDRCxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNKLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsRUFBQyxDQUFDO1NBQ1Y7SUFDTCxDQUFDOzs7O0lBRUQsWUFBWTtRQUNSLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssVUFBVSxDQUFDO0lBQ3RDLENBQUM7OztZQW5HSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsSUFBSSxFQUFFO29CQUNGLE1BQU0sRUFBRSxRQUFRO29CQUNoQixTQUFTLEVBQUUsZ0JBQWdCO2lCQUM5QjthQUNKOzs7O1lBYlEsY0FBYztZQUVkLGVBQWU7OztxQkFlbkIsS0FBSyxTQUFDLFNBQVM7dUJBSWYsS0FBSztxQkFJTCxLQUFLO3VCQUlMLEtBQUs7c0JBSUwsTUFBTTtvQkFJTixNQUFNOzs7Ozs7O0lBcEJQLG9DQUNlOzs7OztJQUdmLHNDQUMyQjs7Ozs7SUFHM0Isb0NBQ3VCOzs7OztJQUd2QixzQ0FDeUI7Ozs7O0lBR3pCLHFDQUNxRDs7Ozs7SUFHckQsbUNBQ21EOztJQUVuRCxtQ0FBa0I7Ozs7O0lBT04sNENBQXNDOzs7OztJQUN0Qyw2Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgICovXG5cbmltcG9ydCB7IENvbnRlbnRTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhc2tMaXN0U2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvdGFza2xpc3Quc2VydmljZSc7XG5cbmNvbnN0IEpTT05fRk9STUFUOiBzdHJpbmcgPSAnanNvbic7XG5jb25zdCBQREZfRk9STUFUOiBzdHJpbmcgPSAncGRmJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdidXR0b25bYWRmLXRhc2stYXVkaXRdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdyb2xlJzogJ2J1dHRvbicsXG4gICAgICAgICcoY2xpY2spJzogJ29uQ2xpY2tBdWRpdCgpJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgVGFza0F1ZGl0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiAoKipyZXF1aXJlZCoqKSBUaGUgaWQgb2YgdGhlIHRhc2suICovXG4gICAgQElucHV0KCd0YXNrLWlkJylcbiAgICB0YXNrSWQ6IHN0cmluZztcblxuICAgIC8qKiBOYW1lIG9mIHRoZSBkb3dubG9hZGVkIGZpbGUgKGZvciBQREYgZG93bmxvYWRzKS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZpbGVOYW1lOiBzdHJpbmcgPSAnQXVkaXQnO1xuXG4gICAgLyoqIEZvcm1hdCBvZiB0aGUgYXVkaXQgaW5mb3JtYXRpb24uIENhbiBiZSBcInBkZlwiIG9yIFwianNvblwiLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZm9ybWF0OiBzdHJpbmcgPSAncGRmJztcblxuICAgIC8qKiBFbmFibGVzIGRvd25sb2FkaW5nIG9mIHRoZSBhdWRpdCB3aGVuIHRoZSBkZWNvcmF0ZWQgZWxlbWVudCBpcyBjbGlja2VkLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZG93bmxvYWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgZGVjb3JhdGVkIGVsZW1lbnQgaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBwdWJsaWMgYXVkaXQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYW5zbGF0ZVNlcnZpY2VcbiAgICAgKiBAcGFyYW0gdGFza0xpc3RTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0YXNrTGlzdFNlcnZpY2U6IFRhc2tMaXN0U2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRUeXBlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGVmYXVsdEZvcm1hdFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVmFsaWRUeXBlKCkge1xuICAgICAgICBpZiAodGhpcy5mb3JtYXQgJiYgKHRoaXMuaXNKc29uRm9ybWF0KCkgfHwgdGhpcy5pc1BkZkZvcm1hdCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNldERlZmF1bHRGb3JtYXRUeXBlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmZvcm1hdCA9IFBERl9GT1JNQVQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmV0Y2ggdGhlIGF1ZGl0IGluZm9ybWF0aW9uIGluIHRoZSByZXF1ZXN0ZWQgZm9ybWF0XG4gICAgICovXG4gICAgZmV0Y2hBdWRpdEluZm8oKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzUGRmRm9ybWF0KCkpIHtcbiAgICAgICAgICAgIHRoaXMudGFza0xpc3RTZXJ2aWNlLmZldGNoVGFza0F1ZGl0UGRmQnlJZCh0aGlzLnRhc2tJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChibG9iOiBCbG9iKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaXQgPSBibG9iO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb3dubG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50U2VydmljZS5kb3dubG9hZEJsb2IodGhpcy5hdWRpdCwgdGhpcy5maWxlTmFtZSArICcucGRmJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlja2VkLmVtaXQoeyBmb3JtYXQ6IHRoaXMuZm9ybWF0LCB2YWx1ZTogdGhpcy5hdWRpdCwgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YXNrTGlzdFNlcnZpY2UuZmV0Y2hUYXNrQXVkaXRKc29uQnlJZCh0aGlzLnRhc2tJZCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpdCA9IHJlcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlja2VkLmVtaXQoeyBmb3JtYXQ6IHRoaXMuZm9ybWF0LCB2YWx1ZTogdGhpcy5hdWRpdCwgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DbGlja0F1ZGl0KCkge1xuICAgICAgICB0aGlzLmZldGNoQXVkaXRJbmZvKCk7XG4gICAgfVxuXG4gICAgaXNKc29uRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPT09IEpTT05fRk9STUFUO1xuICAgIH1cblxuICAgIGlzUGRmRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQgPT09IFBERl9GT1JNQVQ7XG4gICAgfVxuXG59XG4iXX0=