/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';
import { AuthenticationService, CardViewUpdateService, LogService, CommentsComponent } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Observable } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { share } from 'rxjs/operators';
export class TaskDetailsComponent {
    /**
     * @param {?} taskListService
     * @param {?} authService
     * @param {?} peopleProcessService
     * @param {?} logService
     * @param {?} cardViewUpdateService
     * @param {?} dialog
     */
    constructor(taskListService, authService, peopleProcessService, logService, cardViewUpdateService, dialog) {
        this.taskListService = taskListService;
        this.authService = authService;
        this.peopleProcessService = peopleProcessService;
        this.logService = logService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.dialog = dialog;
        /**
         * Toggles debug mode.
         */
        this.debugMode = false;
        /**
         * Automatically renders the next task when the current one is completed.
         */
        this.showNextTask = true;
        /**
         * Toggles task details Header component.
         */
        this.showHeader = true;
        /**
         * Toggles collapsed/expanded state of the Header component.
         */
        this.showHeaderContent = true;
        /**
         * Toggles `Involve People` feature for the Header component.
         */
        this.showInvolvePeople = true;
        /**
         * Toggles `Comments` feature for the Header component.
         */
        this.showComments = true;
        /**
         * Toggles `Checklist` feature for the Header component.
         */
        this.showChecklist = true;
        /**
         * Toggles rendering of the form title.
         */
        this.showFormTitle = false;
        /**
         * Toggles rendering of the `Complete` outcome button.
         */
        this.showFormCompleteButton = true;
        /**
         * Toggles rendering of the `Save` outcome button.
         */
        this.showFormSaveButton = true;
        /**
         * Toggles read-only state of the form. All form widgets render as read-only
         * if enabled.
         */
        this.readOnlyForm = false;
        /**
         * Toggles rendering of the `Refresh` button.
         */
        this.showFormRefreshButton = true;
        /**
         * Field validators for use with the form.
         */
        this.fieldValidators = [];
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        this.formCompleted = new EventEmitter();
        /**
         * Emitted when the form field content is clicked.
         */
        this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        this.formLoaded = new EventEmitter();
        /**
         * Emitted when a checklist task is created.
         */
        this.taskCreated = new EventEmitter();
        /**
         * Emitted when a checklist task is deleted.
         */
        this.taskDeleted = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when any outcome is executed. Default behaviour can be prevented
         * via `event.preventDefault()`.
         */
        this.executeOutcome = new EventEmitter();
        /**
         * Emitted when a task is assigned.
         */
        this.assignTask = new EventEmitter();
        /**
         * Emitted when a task is claimed.
         */
        this.claimedTask = new EventEmitter();
        /**
         * Emitted when a task is unclaimed.
         */
        this.unClaimedTask = new EventEmitter();
        this.taskFormName = null;
        this.taskPeople = [];
        this.showAssignee = false;
        this.showAttachForm = false;
        this.internalReadOnlyForm = false;
        this.peopleSearch = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => this.peopleSearchObserver = observer))
            .pipe(share());
        this.authService.getBpmLoggedUser().subscribe((/**
         * @param {?} user
         * @return {?}
         */
        (user) => {
            this.currentLoggedUser = user;
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.taskId) {
            this.loadDetails(this.taskId);
        }
        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));
        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const taskId = changes.taskId;
        this.showAssignee = false;
        if (taskId && !taskId.currentValue) {
            this.reset();
        }
        else if (taskId && taskId.currentValue) {
            this.loadDetails(taskId.currentValue);
        }
    }
    /**
     * @return {?}
     */
    isStandaloneTask() {
        return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));
    }
    /**
     * @return {?}
     */
    isStandaloneTaskWithForm() {
        return this.isStandaloneTask() && this.hasFormKey();
    }
    /**
     * @return {?}
     */
    isStandaloneTaskWithoutForm() {
        return this.isStandaloneTask() && !this.hasFormKey();
    }
    /**
     * @return {?}
     */
    isFormComponentVisible() {
        return this.hasFormKey() && !this.isShowAttachForm();
    }
    /**
     * @return {?}
     */
    isTaskStandaloneComponentVisible() {
        return this.isStandaloneTaskWithoutForm() && !this.isShowAttachForm();
    }
    /**
     * @return {?}
     */
    isShowAttachForm() {
        return this.showAttachForm;
    }
    /**
     * Reset the task details
     * @private
     * @return {?}
     */
    reset() {
        this.taskDetails = null;
    }
    /**
     * Check if the task has a form
     * @return {?}
     */
    hasFormKey() {
        return (this.taskDetails && (!!this.taskDetails.formKey));
    }
    /**
     * @return {?}
     */
    isTaskActive() {
        return this.taskDetails && this.taskDetails.duration === null;
    }
    /**
     * Save a task detail and update it after a successful response
     *
     * @private
     * @param {?} updateNotification
     * @return {?}
     */
    updateTaskDetails(updateNotification) {
        this.taskListService.updateTask(this.taskId, updateNotification.changed)
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.loadDetails(this.taskId);
        }));
    }
    /**
     * @private
     * @param {?} clickNotification
     * @return {?}
     */
    clickTaskDetails(clickNotification) {
        if (clickNotification.target.key === 'assignee') {
            this.showAssignee = true;
        }
        if (clickNotification.target.key === 'formName') {
            this.showAttachForm = true;
        }
    }
    /**
     * Load the activiti task details
     * @private
     * @param {?} taskId
     * @return {?}
     */
    loadDetails(taskId) {
        this.taskPeople = [];
        this.taskFormName = null;
        if (taskId) {
            this.taskListService.getTaskDetails(taskId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.showAttachForm = false;
                this.taskDetails = res;
                if (this.taskDetails.name === 'null') {
                    this.taskDetails.name = 'No name';
                }
                /** @type {?} */
                const endDate = res.endDate;
                if (endDate && !isNaN(endDate.getTime())) {
                    this.internalReadOnlyForm = true;
                }
                else {
                    this.internalReadOnlyForm = this.readOnlyForm;
                }
                if (this.taskDetails && this.taskDetails.involvedPeople) {
                    this.taskDetails.involvedPeople.forEach((/**
                     * @param {?} user
                     * @return {?}
                     */
                    (user) => {
                        this.taskPeople.push(new UserProcessModel(user));
                    }));
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    isAssigned() {
        return !!this.taskDetails.assignee;
    }
    /**
     * @private
     * @return {?}
     */
    hasEmailAddress() {
        return this.taskDetails.assignee.email ? true : false;
    }
    /**
     * @return {?}
     */
    isAssignedToMe() {
        return this.isAssigned() && this.hasEmailAddress() ?
            this.isEmailEqual(this.taskDetails.assignee.email, this.currentLoggedUser.email) :
            this.isExternalIdEqual(this.taskDetails.assignee.externalId, this.currentLoggedUser.externalId);
    }
    /**
     * @private
     * @param {?} assigneeMail
     * @param {?} currentLoggedEmail
     * @return {?}
     */
    isEmailEqual(assigneeMail, currentLoggedEmail) {
        return assigneeMail.toLocaleLowerCase() === currentLoggedEmail.toLocaleLowerCase();
    }
    /**
     * @private
     * @param {?} assigneeExternalId
     * @param {?} currentUserExternalId
     * @return {?}
     */
    isExternalIdEqual(assigneeExternalId, currentUserExternalId) {
        return assigneeExternalId.toLocaleLowerCase() === currentUserExternalId.toLocaleLowerCase();
    }
    /**
     * @return {?}
     */
    isCompleteButtonEnabled() {
        return this.isAssignedToMe() || this.canInitiatorComplete();
    }
    /**
     * @return {?}
     */
    isCompleteButtonVisible() {
        return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();
    }
    /**
     * @return {?}
     */
    canInitiatorComplete() {
        return this.taskDetails.initiatorCanCompleteTask;
    }
    /**
     * @return {?}
     */
    isSaveButtonVisible() {
        return this.hasSaveButton() && (!this.canInitiatorComplete() || this.isAssignedToMe());
    }
    /**
     * @return {?}
     */
    hasSaveButton() {
        return this.showFormSaveButton;
    }
    /**
     * Retrieve the next open task
     * @private
     * @param {?} processInstanceId
     * @param {?} processDefinitionId
     * @return {?}
     */
    loadNextTask(processInstanceId, processDefinitionId) {
        /** @type {?} */
        const requestNode = new TaskQueryRequestRepresentationModel({
            processInstanceId: processInstanceId,
            processDefinitionId: processDefinitionId
        });
        this.taskListService.getTasks(requestNode).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response && response.length > 0) {
                this.taskDetails = new TaskDetailsModel(response[0]);
            }
            else {
                this.reset();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.error.emit(error);
        }));
    }
    /**
     * Complete button clicked
     * @return {?}
     */
    onComplete() {
        this.taskListService.completeTask(this.taskId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => this.onFormCompleted(null)));
    }
    /**
     * @return {?}
     */
    onShowAttachForm() {
        this.showAttachForm = true;
    }
    /**
     * @return {?}
     */
    onCancelAttachForm() {
        this.showAttachForm = false;
    }
    /**
     * @return {?}
     */
    onCompleteAttachForm() {
        this.showAttachForm = false;
        this.loadDetails(this.taskId);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    onFormContentClick(content) {
        this.formContentClicked.emit(content);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onFormSaved(form) {
        this.formSaved.emit(form);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onFormCompleted(form) {
        this.formCompleted.emit(form);
        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {
            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
        }
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onFormLoaded(form) {
        this.taskFormName = (form && form.name ? form.name : null);
        this.formLoaded.emit(form);
    }
    /**
     * @param {?} task
     * @return {?}
     */
    onChecklistTaskCreated(task) {
        this.taskCreated.emit(task);
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    onChecklistTaskDeleted(taskId) {
        this.taskDeleted.emit(taskId);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onFormError(error) {
        this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });
        this.error.emit(error);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFormExecuteOutcome(event) {
        this.executeOutcome.emit(event);
    }
    /**
     * @return {?}
     */
    closeErrorDialog() {
        this.dialog.closeAll();
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    onClaimAction(taskId) {
        this.claimedTask.emit(taskId);
        this.loadDetails(taskId);
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    onUnclaimAction(taskId) {
        this.unClaimedTask.emit(taskId);
        this.loadDetails(taskId);
    }
    /**
     * @return {?}
     */
    isCompletedTask() {
        return this.taskDetails && this.taskDetails.endDate ? true : undefined;
    }
    /**
     * @param {?} searchedWord
     * @return {?}
     */
    searchUser(searchedWord) {
        this.peopleProcessService.getWorkflowUsers(null, searchedWord)
            .subscribe((/**
         * @param {?} users
         * @return {?}
         */
        (users) => {
            users = users.filter((/**
             * @param {?} user
             * @return {?}
             */
            (user) => user.id !== this.taskDetails.assignee.id));
            this.peopleSearchObserver.next(users);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => this.logService.error('Could not load users')));
    }
    /**
     * @return {?}
     */
    onCloseSearch() {
        this.showAssignee = false;
    }
    /**
     * @param {?} selectedUser
     * @return {?}
     */
    assignTaskToUser(selectedUser) {
        this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.logService.info('Task Assigned to ' + selectedUser.email);
            this.assignTask.emit();
        }));
        this.showAssignee = false;
    }
    /**
     * @return {?}
     */
    getTaskHeaderViewClass() {
        if (this.showAssignee) {
            return 'assign-edit-view';
        }
        else {
            return 'default-view';
        }
    }
    /**
     * @return {?}
     */
    isReadOnlyComment() {
        return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);
    }
}
TaskDetailsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-details',
                template: "<div *ngIf=\"!taskDetails\" data-automation-id=\"adf-tasks-details--empty\">\n    <ng-template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"\n                 [ngForTemplate]=\"noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </ng-template>\n    <div *ngIf=\"!noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </div>\n</div>\n<div *ngIf=\"taskDetails\" class=\"adf-task-details\">\n\n    <div *ngIf=\"showHeader\" class=\"adf-task-details-header\">\n        <h2 class=\"adf-activiti-task-details__header\">\n            <span>{{taskDetails.name || 'No name'}}</span>\n        </h2>\n    </div>\n\n    <div class=\"adf-task-details-core\"\n        fxLayout=\"column\"\n        fxLayoutGap=\"8px\"\n        fxLayout.lt-lg=\"column\">\n\n        <div class=\"adf-task-details-core-form\">\n            <div *ngIf=\"isAssigned()\">\n                <adf-form *ngIf=\"isFormComponentVisible()\" #activitiForm\n                          [taskId]=\"taskDetails.id\"\n                          [showTitle]=\"showFormTitle\"\n                          [showRefreshButton]=\"showFormRefreshButton\"\n                          [showCompleteButton]=\"showFormCompleteButton\"\n                          [disableCompleteButton]=\"!isCompleteButtonEnabled()\"\n                          [showSaveButton]=\"isSaveButtonVisible()\"\n                          [readOnly]=\"internalReadOnlyForm\"\n                          [fieldValidators]=\"fieldValidators\"\n                          (formSaved)='onFormSaved($event)'\n                          (formCompleted)='onFormCompleted($event)'\n                          (formContentClicked)='onFormContentClick($event)'\n                          (formLoaded)='onFormLoaded($event)'\n                          (error)='onFormError($event)'\n                          (executeOutcome)='onFormExecuteOutcome($event)'>\n                </adf-form>\n                <adf-task-standalone *ngIf=\"isTaskStandaloneComponentVisible()\"\n                                     [taskName]=\"taskDetails.name\"\n                                     [taskId]=\"taskDetails.id\"\n                                     [isCompleted]=\"isCompletedTask()\"\n                                     [hasCompletePermission]=\"isCompleteButtonEnabled()\"\n                                     [hideCancelButton]=\"true\"\n                                     (complete)=\"onComplete()\"\n                                     (showAttachForm)=\"onShowAttachForm()\">\n                </adf-task-standalone>\n\n                <mat-card class=\"adf-message-card\" *ngIf=\"!isTaskStandaloneComponentVisible() && !isCompletedTask() && !isFormComponentVisible()\" >\n                    <mat-card-content>\n                        <div class=\"adf-no-form-message-container\">\n                            <div class=\"adf-no-form-message-list\">\n                                <div *ngIf=\"!isCompletedTask()\" class=\"adf-no-form-message\">\n                                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-content>\n\n                    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n                        <div>\n                            <button mat-button id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onComplete()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n                        </div>\n                    </mat-card-actions>\n\n                </mat-card>\n\n                <adf-attach-form *ngIf=\"isShowAttachForm()\"\n                                 [taskId]=\"taskDetails.id\"\n                                 [formKey]=\"taskDetails.formKey\"\n                                 (cancelAttachForm)=\"onCancelAttachForm()\"\n                                 (success)=\"onCompleteAttachForm()\">\n                </adf-attach-form>\n            </div>\n            <div *ngIf=\"!isAssigned()\" id=\"claim-message-id\">\n                {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM' | translate }}\n            </div>\n        </div>\n        <div class=\"adf-task-details-core-sidebar\">\n            <adf-info-drawer *ngIf=\"showHeaderContent\" title=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE' | translate }}\" id=\"adf-task-details-core-sidebar-drawer\" class=\"adf-task-details-core-sidebar-drawer\">\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE' | translate }}\">\n                    <div class=\"adf-assignment-container\" *ngIf=\"showAssignee\">\n                        <adf-people-search\n                            (searchPeople)=\"searchUser($event)\"\n                            (success)=\"assignTaskToUser($event)\"\n                            (closeSearch)=\"onCloseSearch()\"\n                            [results]=\"peopleSearch\">\n                            <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                            <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                        </adf-people-search>\n                    </div>\n                    <adf-task-header\n                        [class]=\"getTaskHeaderViewClass()\"\n                        [taskDetails]=\"taskDetails\"\n                        [formName]=\"taskFormName\"\n                        (claim)=\"onClaimAction($event)\"\n                        (unclaim)=\"onUnclaimAction($event)\">\n                    </adf-task-header>\n                    <adf-people *ngIf=\"showInvolvePeople\" #people\n                                [people]=\"taskPeople\"\n                                [readOnly]=\"internalReadOnlyForm\"\n                                [taskId]=\"taskDetails.id\">\n                    </adf-people>\n                </adf-info-drawer-tab>\n\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE' | translate }}\">\n                    <mat-card *ngIf=\"showComments\">\n                        <mat-card-content>\n                            <adf-comments #activitiComments\n                                          [readOnly]=\"isReadOnlyComment()\"\n                                          [taskId]=\"taskDetails.id\">\n                            </adf-comments>\n                        </mat-card-content>\n                    </mat-card>\n                </adf-info-drawer-tab>\n\n            </adf-info-drawer>\n\n            <div *ngIf=\"showHeaderContent\" class=\"adf-task-details-core-sidebar-checklist\">\n                <div *ngIf=\"showChecklist\">\n                    <adf-checklist #activitiChecklist\n                                   [readOnly]=\"internalReadOnlyForm\"\n                                   [taskId]=\"taskDetails.id\"\n                                   [assignee]=\"taskDetails?.assignee?.id\"\n                                   (checklistTaskCreated)=\"onChecklistTaskCreated($event)\"\n                                   (checklistTaskDeleted)=\"onChecklistTaskDeleted($event)\">\n                    </adf-checklist>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #errorDialog>\n        <h3 matDialogTitle>{{'ADF_TASK_LIST.DETAILS.ERROR.TITLE'|translate}}</h3>\n        <mat-dialog-content>\n            <p>{{'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION'|translate}}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <button mat-button type=\"button\" (click)=\"closeErrorDialog()\">{{'ADF_TASK_LIST.DETAILS.ERROR.CLOSE'|translate}}\n            </button>\n        </mat-dialog-actions>\n    </ng-template>\n\n</div>\n",
                styles: [":host{width:100%}.adf-error-dialog h3{margin:16px 0}.adf-activiti-task-details__header{align-self:flex-end;display:flex;font-size:24px;font-weight:300;line-height:normal;overflow:hidden;margin:8px 0 16px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-activiti-task-details__action-button{text-transform:uppercase}.adf-assignment-container{padding:10px 20px;width:auto}adf-task-header.adf-assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=header-assignee]{display:none}.adf-task-details-header{display:flex;justify-content:space-between}.adf-task-details-header-toggle{position:relative;top:10px;margin-right:2px;height:23px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-task-details-toggle{position:relative}.adf-task-details-core{display:flex;justify-content:space-between}@media screen and (max-width:1279px){.adf-task-details-core-sidebar-drawer{margin-left:0}}.adf-task-details-core-sidebar-checklist{margin-top:30px;padding-left:20px;padding-right:20px}.adf-task-details-core-form{flex-grow:1}.adf-task-details-core-form ::ng-deep .adf-form-debug-container{display:flex;flex-direction:column;padding:20px 0}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle{margin-left:auto}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle+div{background-color:#000;padding:20px;clear:both;margin-top:30px;color:#fff}.adf-task-details-core-form ::ng-deep .mat-tab-label{flex-grow:1}"]
            }] }
];
/** @nocollapse */
TaskDetailsComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: AuthenticationService },
    { type: PeopleProcessService },
    { type: LogService },
    { type: CardViewUpdateService },
    { type: MatDialog }
];
TaskDetailsComponent.propDecorators = {
    activitiComments: [{ type: ViewChild, args: ['activitiComments',] }],
    activitiChecklist: [{ type: ViewChild, args: ['activitiChecklist',] }],
    errorDialog: [{ type: ViewChild, args: ['errorDialog',] }],
    debugMode: [{ type: Input }],
    taskId: [{ type: Input }],
    showNextTask: [{ type: Input }],
    showHeader: [{ type: Input }],
    showHeaderContent: [{ type: Input }],
    showInvolvePeople: [{ type: Input }],
    showComments: [{ type: Input }],
    showChecklist: [{ type: Input }],
    showFormTitle: [{ type: Input }],
    showFormCompleteButton: [{ type: Input }],
    showFormSaveButton: [{ type: Input }],
    readOnlyForm: [{ type: Input }],
    showFormRefreshButton: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    formLoaded: [{ type: Output }],
    taskCreated: [{ type: Output }],
    taskDeleted: [{ type: Output }],
    error: [{ type: Output }],
    executeOutcome: [{ type: Output }],
    assignTask: [{ type: Output }],
    claimedTask: [{ type: Output }],
    unClaimedTask: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    TaskDetailsComponent.prototype.activitiComments;
    /** @type {?} */
    TaskDetailsComponent.prototype.activitiChecklist;
    /** @type {?} */
    TaskDetailsComponent.prototype.errorDialog;
    /**
     * Toggles debug mode.
     * @type {?}
     */
    TaskDetailsComponent.prototype.debugMode;
    /**
     * (**required**) The id of the task whose details we are asking for.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskId;
    /**
     * Automatically renders the next task when the current one is completed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showNextTask;
    /**
     * Toggles task details Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showHeader;
    /**
     * Toggles collapsed/expanded state of the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showHeaderContent;
    /**
     * Toggles `Involve People` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showInvolvePeople;
    /**
     * Toggles `Comments` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showComments;
    /**
     * Toggles `Checklist` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showChecklist;
    /**
     * Toggles rendering of the form title.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormTitle;
    /**
     * Toggles rendering of the `Complete` outcome button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormCompleteButton;
    /**
     * Toggles rendering of the `Save` outcome button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormSaveButton;
    /**
     * Toggles read-only state of the form. All form widgets render as read-only
     * if enabled.
     * @type {?}
     */
    TaskDetailsComponent.prototype.readOnlyForm;
    /**
     * Toggles rendering of the `Refresh` button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormRefreshButton;
    /**
     * Field validators for use with the form.
     * @type {?}
     */
    TaskDetailsComponent.prototype.fieldValidators;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formCompleted;
    /**
     * Emitted when the form field content is clicked.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formLoaded;
    /**
     * Emitted when a checklist task is created.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskCreated;
    /**
     * Emitted when a checklist task is deleted.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskDeleted;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskDetailsComponent.prototype.error;
    /**
     * Emitted when any outcome is executed. Default behaviour can be prevented
     * via `event.preventDefault()`.
     * @type {?}
     */
    TaskDetailsComponent.prototype.executeOutcome;
    /**
     * Emitted when a task is assigned.
     * @type {?}
     */
    TaskDetailsComponent.prototype.assignTask;
    /**
     * Emitted when a task is claimed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.claimedTask;
    /**
     * Emitted when a task is unclaimed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.unClaimedTask;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskDetails;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskFormName;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskPeople;
    /** @type {?} */
    TaskDetailsComponent.prototype.noTaskDetailsTemplateComponent;
    /** @type {?} */
    TaskDetailsComponent.prototype.showAssignee;
    /** @type {?} */
    TaskDetailsComponent.prototype.showAttachForm;
    /** @type {?} */
    TaskDetailsComponent.prototype.internalReadOnlyForm;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.peopleSearchObserver;
    /** @type {?} */
    TaskDetailsComponent.prototype.errorDialogRef;
    /** @type {?} */
    TaskDetailsComponent.prototype.peopleSearch;
    /** @type {?} */
    TaskDetailsComponent.prototype.currentLoggedUser;
    /** @type {?} */
    TaskDetailsComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,