/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';
import { AppConfigService, PaginationComponent, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { taskPresetsDefaultModel } from '../models/task-preset.model';
import { TaskListService } from './../services/tasklist.service';
import moment from 'moment-es6';
export class TaskListComponent extends DataTableSchema {
    /**
     * @param {?} taskListService
     * @param {?} appConfigService
     * @param {?} userPreferences
     */
    constructor(taskListService, appConfigService, userPreferences) {
        super(appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel);
        this.taskListService = taskListService;
        this.userPreferences = userPreferences;
        /**
         * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
         * multiple rows.
         */
        this.selectionMode = 'single'; // none|single|multiple
        // none|single|multiple
        /**
         * Toggles multiple row selection, renders checkboxes at the beginning of each row
         */
        this.multiselect = false;
        /**
         * Toggles default selection of the first row
         */
        this.selectFirstRow = true;
        /**
         * Emitted when a task in the list is clicked
         */
        this.rowClick = new EventEmitter();
        /**
         * Emitted when rows are selected/unselected
         */
        this.rowsSelected = new EventEmitter();
        /**
         * Emitted when the task list is loaded
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * The page number of the tasks to fetch.
         */
        this.page = 0;
        /**
         * The number of tasks to fetch. Default value: 25.
         */
        this.size = PaginationComponent.DEFAULT_PAGINATION.maxItems;
        this.rows = [];
        this.isLoading = true;
        this.sorting = ['created', 'desc'];
        /**
         * Toggles custom data source mode.
         * When enabled the component reloads data from it's current source instead of the server side.
         * This allows generating and displaying custom data sets (i.e. filtered out content).
         *
         * \@memberOf TaskListComponent
         */
        this.hasCustomDataSource = false;
        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((/**
         * @param {?} pageSize
         * @return {?}
         */
        (pageSize) => {
            this.size = pageSize;
        }));
        this.pagination = new BehaviorSubject((/** @type {?} */ ({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        })));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.createDatatableSchema();
        if (this.data && this.data.getColumns().length === 0) {
            this.data.setColumns(this.columns);
        }
        if (this.appId) {
            this.reload();
        }
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    setCustomDataSource(rows) {
        if (rows) {
            this.rows = rows;
            this.hasCustomDataSource = true;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes)) {
            if (this.isSortChanged(changes)) {
                this.sorting = this.sort ? this.sort.split('-') : this.sorting;
            }
            this.reload();
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isSortChanged(changes) {
        /** @type {?} */
        const actualSort = changes['sort'];
        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isPropertyChanged(changes) {
        /** @type {?} */
        let changed = true;
        /** @type {?} */
        const landingTaskId = changes['landingTaskId'];
        /** @type {?} */
        const page = changes['page'];
        /** @type {?} */
        const size = changes['size'];
        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {
            changed = false;
        }
        else if (page && page.currentValue !== page.previousValue) {
            changed = true;
        }
        else if (size && size.currentValue !== size.previousValue) {
            changed = true;
        }
        return changed;
    }
    /**
     * @return {?}
     */
    reload() {
        if (!this.hasCustomDataSource) {
            this.requestNode = this.createRequestNode();
            this.load(this.requestNode);
        }
        else {
            this.isLoading = false;
        }
    }
    /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    load(requestNode) {
        this.isLoading = true;
        this.loadTasksByState().subscribe((/**
         * @param {?} tasks
         * @return {?}
         */
        (tasks) => {
            this.rows = this.optimizeTaskDetails(tasks.data);
            this.selectTask(this.landingTaskId);
            this.success.emit(tasks);
            this.isLoading = false;
            this.pagination.next({
                count: tasks.data.length,
                maxItems: this.size,
                skipCount: this.page * this.size,
                totalItems: tasks.total
            });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.error.emit(error);
            this.isLoading = false;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    loadTasksByState() {
        return this.requestNode.state === 'all'
            ? this.taskListService.findAllTasksWithoutState(this.requestNode)
            : this.taskListService.findTasksByState(this.requestNode);
    }
    /**
     * Select the task given in input if present
     * @param {?} taskIdSelected
     * @return {?}
     */
    selectTask(taskIdSelected) {
        if (!this.isListEmpty()) {
            /** @type {?} */
            let dataRow = null;
            if (taskIdSelected) {
                dataRow = this.rows.find((/**
                 * @param {?} currentRow
                 * @return {?}
                 */
                (currentRow) => {
                    return currentRow['id'] === taskIdSelected;
                }));
            }
            if (!dataRow && this.selectFirstRow) {
                dataRow = this.rows[0];
            }
            if (dataRow) {
                dataRow.isSelected = true;
                this.currentInstanceId = dataRow['id'];
            }
        }
        else {
            this.currentInstanceId = null;
        }
    }
    /**
     * Return the current id
     * @return {?}
     */
    getCurrentId() {
        return this.currentInstanceId;
    }
    /**
     * Check if the taskId is the same of the selected task
     * @param {?} taskId
     * @return {?}
     */
    isEqualToCurrentId(taskId) {
        return this.currentInstanceId === taskId;
    }
    /**
     * Check if the list is empty
     * @return {?}
     */
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onRowClick(item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onRowSelect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onRowUnselect(event) {
        this.selectedInstances = [...event.detail.selection];
        this.rowsSelected.emit(this.selectedInstances);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    /**
     * Optimize name field
     * @private
     * @param {?} instances
     * @return {?}
     */
    optimizeTaskDetails(instances) {
        instances = instances.map((/**
         * @param {?} task
         * @return {?}
         */
        (task) => {
            if (!task.name) {
                task.name = 'No name';
            }
            return task;
        }));
        return instances;
    }
    /**
     * @private
     * @return {?}
     */
    createRequestNode() {
        /** @type {?} */
        const requestNode = {
            appDefinitionId: this.appId,
            dueAfter: this.dueAfter ? moment(this.dueAfter).toDate() : null,
            dueBefore: this.dueBefore ? moment(this.dueBefore).toDate() : null,
            processInstanceId: this.processInstanceId,
            processDefinitionId: this.processDefinitionId,
            text: this.name,
            assignment: this.assignment,
            state: this.state,
            sort: this.sort,
            page: this.page,
            size: this.size,
            start: this.start,
            taskId: this.taskId,
            includeProcessInstance: this.includeProcessInstance
        };
        return new TaskQueryRequestRepresentationModel(requestNode);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    updatePagination(params) {
        /** @type {?} */
        const needsReload = params.maxItems || params.skipCount;
        this.size = params.maxItems;
        this.page = this.currentPage(params.skipCount, params.maxItems);
        if (needsReload) {
            this.reload();
        }
    }
    /**
     * @param {?} skipCount
     * @param {?} maxItems
     * @return {?}
     */
    currentPage(skipCount, maxItems) {
        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
    }
}
TaskListComponent.PRESET_KEY = 'adf-task-list.presets';
TaskListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tasklist',
                template: "<div *ngIf=\"!requestNode\">{{ 'ADF_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"requestNode\">\n        <adf-datatable\n            [data]=\"data\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [sorting]=\"sorting\"\n            [loading]=\"isLoading\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            (row-select)=\"onRowSelect($event)\"\n            (row-unselect)=\"onRowUnselect($event)\"\n            (rowClick)=\"onRowClick($event)\"\n            (row-keyup)=\"onRowKeyUp($event)\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!--Add your custom loading template here-->\n                    <mat-progress-spinner\n                        *ngIf=\"!customLoadingContent\"\n                        class=\"adf-task-list-loading-margin\"\n                        [color]=\"'primary'\"\n                        [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                    <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!customEmptyContent\"\n                        icon=\"assignment\"\n                        [title]=\"'ADF_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                        [subtitle]=\"'ADF_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                styles: [".adf-task-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}"]
            }] }
];
/** @nocollapse */
TaskListComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: AppConfigService },
    { type: UserPreferencesService }
];
TaskListComponent.propDecorators = {
    customEmptyContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    state: [{ type: Input }],
    assignment: [{ type: Input }],
    sort: [{ type: Input }],
    name: [{ type: Input }],
    landingTaskId: [{ type: Input }],
    data: [{ type: Input }],
    selectionMode: [{ type: Input }],
    multiselect: [{ type: Input }],
    selectFirstRow: [{ type: Input }],
    taskId: [{ type: Input }],
    includeProcessInstance: [{ type: Input }],
    start: [{ type: Input }],
    rowClick: [{ type: Output }],
    rowsSelected: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    page: [{ type: Input }],
    size: [{ type: Input }],
    dueAfter: [{ type: Input }],
    dueBefore: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TaskListComponent.PRESET_KEY;
    /** @type {?} */
    TaskListComponent.prototype.customEmptyContent;
    /** @type {?} */
    TaskListComponent.prototype.customLoadingContent;
    /** @type {?} */
    TaskListComponent.prototype.requestNode;
    /**
     * The id of the app.
     * @type {?}
     */
    TaskListComponent.prototype.appId;
    /**
     * The Instance Id of the process.
     * @type {?}
     */
    TaskListComponent.prototype.processInstanceId;
    /**
     * The Definition Id of the process.
     * @type {?}
     */
    TaskListComponent.prototype.processDefinitionId;
    /**
     * Current state of the process. Possible values are: `completed`, `active`.
     * @type {?}
     */
    TaskListComponent.prototype.state;
    /**
     * The assignment of the process. Possible values are: "assignee" (the current user
     * is the assignee), "candidate" (the current user is a task candidate, "group_x" (the task
     * is assigned to a group where the current user is a member,
     * no value (the current user is involved).
     * @type {?}
     */
    TaskListComponent.prototype.assignment;
    /**
     * Define the sort order of the tasks. Possible values are : `created-desc`,
     * `created-asc`, `due-desc`, `due-asc`
     * @type {?}
     */
    TaskListComponent.prototype.sort;
    /**
     * Name of the tasklist.
     * @type {?}
     */
    TaskListComponent.prototype.name;
    /**
     * Define which task id should be selected after reloading. If the task id doesn't
     * exist or nothing is passed then the first task will be selected.
     * @type {?}
     */
    TaskListComponent.prototype.landingTaskId;
    /**
     * Data source object that represents the number and the type of the columns that
     * you want to show.
     * @type {?}
     */
    TaskListComponent.prototype.data;
    /**
     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
     * multiple rows.
     * @type {?}
     */
    TaskListComponent.prototype.selectionMode;
    /**
     * Toggles multiple row selection, renders checkboxes at the beginning of each row
     * @type {?}
     */
    TaskListComponent.prototype.multiselect;
    /**
     * Toggles default selection of the first row
     * @type {?}
     */
    TaskListComponent.prototype.selectFirstRow;
    /**
     * The id of a task
     * @type {?}
     */
    TaskListComponent.prototype.taskId;
    /**
     * Toggles inclusion of Process Instances
     * @type {?}
     */
    TaskListComponent.prototype.includeProcessInstance;
    /**
     * Starting point of the list within the full set of tasks.
     * @type {?}
     */
    TaskListComponent.prototype.start;
    /**
     * Emitted when a task in the list is clicked
     * @type {?}
     */
    TaskListComponent.prototype.rowClick;
    /**
     * Emitted when rows are selected/unselected
     * @type {?}
     */
    TaskListComponent.prototype.rowsSelected;
    /**
     * Emitted when the task list is loaded
     * @type {?}
     */
    TaskListComponent.prototype.success;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskListComponent.prototype.error;
    /** @type {?} */
    TaskListComponent.prototype.currentInstanceId;
    /** @type {?} */
    TaskListComponent.prototype.selectedInstances;
    /** @type {?} */
    TaskListComponent.prototype.pagination;
    /**
     * The page number of the tasks to fetch.
     * @type {?}
     */
    TaskListComponent.prototype.page;
    /**
     * The number of tasks to fetch. Default value: 25.
     * @type {?}
     */
    TaskListComponent.prototype.size;
    /**
     * Filter the tasks. Display only tasks with `created_date` after `dueAfter`.
     * @type {?}
     */
    TaskListComponent.prototype.dueAfter;
    /**
     * Filter the tasks. Display only tasks with `created_date` before `dueBefore`.
     * @type {?}
     */
    TaskListComponent.prototype.dueBefore;
    /** @type {?} */
    TaskListComponent.prototype.rows;
    /** @type {?} */
    TaskListComponent.prototype.isLoading;
    /** @type {?} */
    TaskListComponent.prototype.sorting;
    /**
     * Toggles custom data source mode.
     * When enabled the component reloads data from it's current source instead of the server side.
     * This allows generating and displaying custom data sets (i.e. filtered out content).
     *
     * \@memberOf TaskListComponent
     * @type {?}
     */
    TaskListComponent.prototype.hasCustomDataSource;
    /**
     * @type {?}
     * @private
     */
    TaskListComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskListComponent.prototype.userPreferences;
}
//# sourceMappingURL=data:application/json;base64,