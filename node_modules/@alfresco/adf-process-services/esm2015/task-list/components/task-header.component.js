/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BpmUserService, CardViewDateItemModel, CardViewMapItemModel, CardViewTextItemModel, LogService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { TaskDescriptionValidator } from '../validators/task-description.validator';
export class TaskHeaderComponent {
    /**
     * @param {?} activitiTaskService
     * @param {?} bpmUserService
     * @param {?} translationService
     * @param {?} logService
     * @param {?} appConfig
     */
    constructor(activitiTaskService, bpmUserService, translationService, logService, appConfig) {
        this.activitiTaskService = activitiTaskService;
        this.bpmUserService = bpmUserService;
        this.translationService = translationService;
        this.logService = logService;
        this.appConfig = appConfig;
        /**
         * The name of the form.
         */
        this.formName = null;
        /**
         * Emitted when the task is claimed.
         */
        this.claim = new EventEmitter();
        /**
         * Emitted when the task is unclaimed (ie, requeued).
         */
        this.unclaim = new EventEmitter();
        this.inEdit = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loadCurrentBpmUserId();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refreshData();
    }
    /**
     * @private
     * @param {?} parentInfoMap
     * @return {?}
     */
    initDefaultProperties(parentInfoMap) {
        return [
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                value: this.taskDetails.getFullName(),
                key: 'assignee',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),
                clickable: !this.isCompleted(),
                icon: 'create'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.STATUS',
                value: this.getTaskStatus(),
                key: 'status'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',
                value: this.taskDetails.priority,
                key: 'priority',
                editable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',
                value: this.taskDetails.dueDate,
                key: 'dueDate',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',
                value: this.taskDetails.category,
                key: 'category',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewMapItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',
                value: parentInfoMap,
                key: 'parentName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),
                clickable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CREATED',
                value: this.taskDetails.created,
                key: 'created'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DURATION',
                value: this.getTaskDuration(),
                key: 'duration'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',
                value: this.taskDetails.parentTaskId,
                key: 'parentTaskId'
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',
                value: this.taskDetails.endDate,
                key: 'endDate'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ID',
                value: this.taskDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',
                value: this.taskDetails.description,
                key: 'description',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),
                multiline: true,
                editable: true,
                validators: [new TaskDescriptionValidator()]
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                value: this.formName,
                key: 'formName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                clickable: !!this.formName,
                icon: 'create'
            })
        ];
    }
    /**
     * Refresh the card data
     * @return {?}
     */
    refreshData() {
        if (this.taskDetails) {
            /** @type {?} */
            const parentInfoMap = this.getParentInfo();
            /** @type {?} */
            const defaultProperties = this.initDefaultProperties(parentInfoMap);
            /** @type {?} */
            const filteredProperties = this.appConfig.get('adf-task-header.presets.properties');
            this.properties = defaultProperties.filter((/**
             * @param {?} cardItem
             * @return {?}
             */
            (cardItem) => this.isValidSelection(filteredProperties, cardItem)));
        }
    }
    /**
     * @private
     * @param {?} filteredProperties
     * @param {?} cardItem
     * @return {?}
     */
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    /**
     * Loads current bpm userId
     * @private
     * @return {?}
     */
    loadCurrentBpmUserId() {
        this.bpmUserService.getCurrentUserInfo().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.currentUserId = res ? +res.id : null;
        }));
    }
    /**
     * Return the process parent information
     * @return {?}
     */
    getParentInfo() {
        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {
            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);
        }
    }
    /**
     * Does the task have an assignee
     * @return {?}
     */
    hasAssignee() {
        return !!this.taskDetails.assignee ? true : false;
    }
    /**
     * Returns true if the task is assigned to logged in user
     * @param {?} userId
     * @return {?}
     */
    isAssignedTo(userId) {
        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;
    }
    /**
     * Return true if the task assigned
     * @return {?}
     */
    isAssignedToCurrentUser() {
        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);
    }
    /**
     * Return true if the user is a candidate member
     * @return {?}
     */
    isCandidateMember() {
        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
    }
    /**
     * Return true if the task claimable
     * @return {?}
     */
    isTaskClaimable() {
        return !this.hasAssignee() && this.isCandidateMember();
    }
    /**
     * Return true if the task claimed by candidate member.
     * @return {?}
     */
    isTaskClaimedByCandidateMember() {
        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();
    }
    /**
     * Returns task's status
     * @return {?}
     */
    getTaskStatus() {
        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';
    }
    /**
     * Claim task
     *
     * @param {?} taskId
     * @return {?}
     */
    claimTask(taskId) {
        this.activitiTaskService.claimTask(taskId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.logService.info('Task claimed');
            this.claim.emit(taskId);
        }));
    }
    /**
     * Unclaim task
     *
     * @param {?} taskId
     * @return {?}
     */
    unclaimTask(taskId) {
        this.activitiTaskService.unclaimTask(taskId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.logService.info('Task unclaimed');
            this.unclaim.emit(taskId);
        }));
    }
    /**
     * Returns true if the task is completed
     * @return {?}
     */
    isCompleted() {
        return this.taskDetails && !!this.taskDetails.endDate;
    }
    /**
     * @return {?}
     */
    getTaskDuration() {
        return this.taskDetails.duration ? `${this.taskDetails.duration} ms` : '';
    }
}
TaskHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-header',
                template: "<mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-controls\">\n        <button *ngIf=\"isTaskClaimedByCandidateMember()\" mat-button data-automation-id=\"header-unclaim-button\" id=\"unclaim-task\" (click)=\"unclaimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n        </button>\n        <button *ngIf=\"isTaskClaimable()\" mat-button data-automation-id=\"header-claim-button\" id=\"claim-task\" (click)=\"claimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaskHeaderComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: BpmUserService },
    { type: TranslationService },
    { type: LogService },
    { type: AppConfigService }
];
TaskHeaderComponent.propDecorators = {
    formName: [{ type: Input }],
    taskDetails: [{ type: Input }],
    claim: [{ type: Output }],
    unclaim: [{ type: Output }]
};
if (false) {
    /**
     * The name of the form.
     * @type {?}
     */
    TaskHeaderComponent.prototype.formName;
    /**
     * (required) Details related to the task.
     * @type {?}
     */
    TaskHeaderComponent.prototype.taskDetails;
    /**
     * Emitted when the task is claimed.
     * @type {?}
     */
    TaskHeaderComponent.prototype.claim;
    /**
     * Emitted when the task is unclaimed (ie, requeued).
     * @type {?}
     */
    TaskHeaderComponent.prototype.unclaim;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.currentUserId;
    /** @type {?} */
    TaskHeaderComponent.prototype.properties;
    /** @type {?} */
    TaskHeaderComponent.prototype.inEdit;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.activitiTaskService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.bpmUserService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsidGFzay1saXN0L2NvbXBvbmVudHMvdGFzay1oZWFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQ0gsY0FBYyxFQUNkLHFCQUFxQixFQUVyQixvQkFBb0IsRUFDcEIscUJBQXFCLEVBRXJCLFVBQVUsRUFDVixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ25CLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBT3BGLE1BQU0sT0FBTyxtQkFBbUI7Ozs7Ozs7O0lBdUI1QixZQUFvQixtQkFBb0MsRUFDcEMsY0FBOEIsRUFDOUIsa0JBQXNDLEVBQ3RDLFVBQXNCLEVBQ3RCLFNBQTJCO1FBSjNCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUI7UUFDcEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFrQjs7OztRQXZCL0MsYUFBUSxHQUFXLElBQUksQ0FBQzs7OztRQVF4QixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7UUFJbkQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBS3JELFdBQU0sR0FBWSxLQUFL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U0FBUzs7OztRQUNsRCxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUMsQ0FBQztJQUNYLENBQUM7Ozs7O0lBS0QsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM5RSxDQUFDOzs7WUFqUkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLGkxQkFBMkM7O2FBRTlDOzs7O1lBUFEsZUFBZTtZQVhwQixjQUFjO1lBT2Qsa0JBQWtCO1lBRGxCLFVBQVU7WUFFVixnQkFBZ0I7Ozt1QkFjZixLQUFLOzBCQUlMLEtBQUs7b0JBSUwsTUFBTTtzQkFJTixNQUFNOzs7Ozs7O0lBWlAsdUNBQ3dCOzs7OztJQUd4QiwwQ0FDOEI7Ozs7O0lBRzlCLG9DQUNtRDs7Ozs7SUFHbkQsc0NBQ3FEOzs7OztJQUVyRCw0Q0FBOEI7O0lBRTlCLHlDQUE0Qjs7SUFDNUIscUNBQXdCOzs7OztJQUVaLGtEQUE0Qzs7Ozs7SUFDNUMsNkNBQXNDOzs7OztJQUN0QyxpREFBOEM7Ozs7O0lBQzlDLHlDQUE4Qjs7Ozs7SUFDOUIsd0NBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIEJwbVVzZXJTZXJ2aWNlLFxuICAgIENhcmRWaWV3RGF0ZUl0ZW1Nb2RlbCxcbiAgICBDYXJkVmlld0l0ZW0sXG4gICAgQ2FyZFZpZXdNYXBJdGVtTW9kZWwsXG4gICAgQ2FyZFZpZXdUZXh0SXRlbU1vZGVsLFxuICAgIENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCxcbiAgICBMb2dTZXJ2aWNlLFxuICAgIFRyYW5zbGF0aW9uU2VydmljZSxcbiAgICBBcHBDb25maWdTZXJ2aWNlXG59IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBUYXNrRGV0YWlsc01vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Rhc2stZGV0YWlscy5tb2RlbCc7XG5pbXBvcnQgeyBUYXNrTGlzdFNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3Rhc2tsaXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFza0Rlc2NyaXB0aW9uVmFsaWRhdG9yIH0gZnJvbSAnLi4vdmFsaWRhdG9ycy90YXNrLWRlc2NyaXB0aW9uLnZhbGlkYXRvcic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXRhc2staGVhZGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGFzay1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Rhc2staGVhZGVyLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFza0hlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcblxuICAgIC8qKiBUaGUgbmFtZSBvZiB0aGUgZm9ybS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZvcm1OYW1lOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIChyZXF1aXJlZCkgRGV0YWlscyByZWxhdGVkIHRvIHRoZSB0YXNrLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGFza0RldGFpbHM6IFRhc2tEZXRhaWxzTW9kZWw7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB0YXNrIGlzIGNsYWltZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2xhaW06IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB0YXNrIGlzIHVuY2xhaW1lZCAoaWUsIHJlcXVldWVkKS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICB1bmNsYWltOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgcHJpdmF0ZSBjdXJyZW50VXNlcklkOiBudW1iZXI7XG5cbiAgICBwcm9wZXJ0aWVzOiBDYXJkVmlld0l0ZW0gW107XG4gICAgaW5FZGl0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGl2aXRpVGFza1NlcnZpY2U6IFRhc2tMaXN0U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGJwbVVzZXJTZXJ2aWNlOiBCcG1Vc2VyU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRyYW5zbGF0aW9uU2VydmljZTogVHJhbnNsYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFwcENvbmZpZzogQXBwQ29uZmlnU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmxvYWRDdXJyZW50QnBtVXNlcklkKCk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLnJlZnJlc2hEYXRhKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0RGVmYXVsdFByb3BlcnRpZXMocGFyZW50SW5mb01hcCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLkFTU0lHTkVFJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0RldGFpbHMuZ2V0RnVsbE5hbWUoKSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnYXNzaWduZWUnLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KCdBREZfVEFTS19MSVNULlBST1BFUlRJRVMuQVNTSUdORUVfREVGQVVMVCcpLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6ICF0aGlzLmlzQ29tcGxldGVkKCksXG4gICAgICAgICAgICAgICAgICAgIGljb246ICdjcmVhdGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld1RleHRJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5TVEFUVVMnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRUYXNrU3RhdHVzKCksXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3N0YXR1cydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLlBSSU9SSVRZJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0RldGFpbHMucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3ByaW9yaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3RGF0ZUl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLkRVRV9EQVRFJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0RldGFpbHMuZHVlRGF0ZSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZHVlRGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5EVUVfREFURV9ERUZBVUxUJyksXG4gICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld1RleHRJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5DQVRFR09SWScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tEZXRhaWxzLmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5DQVRFR09SWV9ERUZBVUxUJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3TWFwSXRlbU1vZGVsKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBREZfVEFTS19MSVNULlBST1BFUlRJRVMuUEFSRU5UX05BTUUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFyZW50SW5mb01hcCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGFyZW50TmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5QQVJFTlRfTkFNRV9ERUZBVUxUJyksXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBuZXcgQ2FyZFZpZXdEYXRlSXRlbU1vZGVsKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBREZfVEFTS19MSVNULlBST1BFUlRJRVMuQ1JFQVRFRCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tEZXRhaWxzLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2NyZWF0ZWQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld1RleHRJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5EVVJBVElPTicsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdldFRhc2tEdXJhdGlvbigpLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdkdXJhdGlvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLlBBUkVOVF9UQVNLX0lEJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0RldGFpbHMucGFyZW50VGFza0lkLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwYXJlbnRUYXNrSWQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld0RhdGVJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5FTkRfREFURScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tEZXRhaWxzLmVuZERhdGUsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2VuZERhdGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5ldyBDYXJkVmlld1RleHRJdGVtTW9kZWwoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5JRCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRhc2tEZXRhaWxzLmlkLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdpZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLkRFU0NSSVBUSU9OJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudGFza0RldGFpbHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2Rlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudCgnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLkRFU0NSSVBUSU9OX0RFRkFVTFQnKSxcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczogW25ldyBUYXNrRGVzY3JpcHRpb25WYWxpZGF0b3IoKV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbmV3IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQURGX1RBU0tfTElTVC5QUk9QRVJUSUVTLkZPUk1fTkFNRScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZvcm1OYW1lLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdmb3JtTmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRoaXMudHJhbnNsYXRpb25TZXJ2aWNlLmluc3RhbnQoJ0FERl9UQVNLX0xJU1QuUFJPUEVSVElFUy5GT1JNX05BTUVfREVGQVVMVCcpLFxuICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6ICEhdGhpcy5mb3JtTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2NyZWF0ZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCB0aGUgY2FyZCBkYXRhXG4gICAgICovXG4gICAgcmVmcmVzaERhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLnRhc2tEZXRhaWxzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRJbmZvTWFwID0gdGhpcy5nZXRQYXJlbnRJbmZvKCk7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0UHJvcGVydGllcyA9IHRoaXMuaW5pdERlZmF1bHRQcm9wZXJ0aWVzKHBhcmVudEluZm9NYXApO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRQcm9wZXJ0aWVzOiBzdHJpbmdbXSA9IHRoaXMuYXBwQ29uZmlnLmdldCgnYWRmLXRhc2staGVhZGVyLnByZXNldHMucHJvcGVydGllcycpO1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gZGVmYXVsdFByb3BlcnRpZXMuZmlsdGVyKChjYXJkSXRlbSkgPT4gdGhpcy5pc1ZhbGlkU2VsZWN0aW9uKGZpbHRlcmVkUHJvcGVydGllcywgY2FyZEl0ZW0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNWYWxpZFNlbGVjdGlvbihmaWx0ZXJlZFByb3BlcnRpZXM6IHN0cmluZ1tdLCBjYXJkSXRlbTogQ2FyZFZpZXdCYXNlSXRlbU1vZGVsKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFByb3BlcnRpZXMgPyBmaWx0ZXJlZFByb3BlcnRpZXMuaW5kZXhPZihjYXJkSXRlbS5rZXkpID49IDAgOiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWRzIGN1cnJlbnQgYnBtIHVzZXJJZFxuICAgICAqL1xuICAgIHByaXZhdGUgbG9hZEN1cnJlbnRCcG1Vc2VySWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnBtVXNlclNlcnZpY2UuZ2V0Q3VycmVudFVzZXJJbmZvKCkuc3Vic2NyaWJlKChyZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFVzZXJJZCA9IHJlcyA/ICtyZXMuaWQgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIHByb2Nlc3MgcGFyZW50IGluZm9ybWF0aW9uXG4gICAgICovXG4gICAgZ2V0UGFyZW50SW5mbygpIHtcbiAgICAgICAgaWYgKHRoaXMudGFza0RldGFpbHMucHJvY2Vzc0luc3RhbmNlSWQgJiYgdGhpcy50YXNrRGV0YWlscy5wcm9jZXNzRGVmaW5pdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWFwKFtbdGhpcy50YXNrRGV0YWlscy5wcm9jZXNzSW5zdGFuY2VJZCwgdGhpcy50YXNrRGV0YWlscy5wcm9jZXNzRGVmaW5pdGlvbk5hbWVdXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb2VzIHRoZSB0YXNrIGhhdmUgYW4gYXNzaWduZWVcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzQXNzaWduZWUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMudGFza0RldGFpbHMuYXNzaWduZWUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0YXNrIGlzIGFzc2lnbmVkIHRvIGxvZ2dlZCBpbiB1c2VyXG4gICAgICovXG4gICAgcHVibGljIGlzQXNzaWduZWRUbyh1c2VySWQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXNzaWduZWUoKSA/IHRoaXMudGFza0RldGFpbHMuYXNzaWduZWUuaWQgPT09IHVzZXJJZCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB0YXNrIGFzc2lnbmVkXG4gICAgICovXG4gICAgcHVibGljIGlzQXNzaWduZWRUb0N1cnJlbnRVc2VyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNBc3NpZ25lZSgpICYmIHRoaXMuaXNBc3NpZ25lZFRvKHRoaXMuY3VycmVudFVzZXJJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHVzZXIgaXMgYSBjYW5kaWRhdGUgbWVtYmVyXG4gICAgICovXG4gICAgaXNDYW5kaWRhdGVNZW1iZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tEZXRhaWxzLm1hbmFnZXJPZkNhbmRpZGF0ZUdyb3VwIHx8IHRoaXMudGFza0RldGFpbHMubWVtYmVyT2ZDYW5kaWRhdGVHcm91cCB8fCB0aGlzLnRhc2tEZXRhaWxzLm1lbWJlck9mQ2FuZGlkYXRlVXNlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHRhc2sgY2xhaW1hYmxlXG4gICAgICovXG4gICAgcHVibGljIGlzVGFza0NsYWltYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhhc0Fzc2lnbmVlKCkgJiYgdGhpcy5pc0NhbmRpZGF0ZU1lbWJlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB0YXNrIGNsYWltZWQgYnkgY2FuZGlkYXRlIG1lbWJlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgaXNUYXNrQ2xhaW1lZEJ5Q2FuZGlkYXRlTWVtYmVyKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0NhbmRpZGF0ZU1lbWJlcigpICYmIHRoaXMuaXNBc3NpZ25lZFRvQ3VycmVudFVzZXIoKSAmJiAhdGhpcy5pc0NvbXBsZXRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGFzaydzIHN0YXR1c1xuICAgICAqL1xuICAgIGdldFRhc2tTdGF0dXMoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnRhc2tEZXRhaWxzICYmIHRoaXMudGFza0RldGFpbHMuaXNDb21wbGV0ZWQoKSkgPyAnQ29tcGxldGVkJyA6ICdSdW5uaW5nJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGFpbSB0YXNrXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFza0lkXG4gICAgICovXG4gICAgY2xhaW1UYXNrKHRhc2tJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWN0aXZpdGlUYXNrU2VydmljZS5jbGFpbVRhc2sodGFza0lkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuaW5mbygnVGFzayBjbGFpbWVkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFpbS5lbWl0KHRhc2tJZCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbmNsYWltIHRhc2tcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXNrSWRcbiAgICAgKi9cbiAgICB1bmNsYWltVGFzayh0YXNrSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmFjdGl2aXRpVGFza1NlcnZpY2UudW5jbGFpbVRhc2sodGFza0lkKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuaW5mbygnVGFzayB1bmNsYWltZWQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVuY2xhaW0uZW1pdCh0YXNrSWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0YXNrIGlzIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIGlzQ29tcGxldGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrRGV0YWlscyAmJiAhIXRoaXMudGFza0RldGFpbHMuZW5kRGF0ZTtcbiAgICB9XG5cbiAgICBnZXRUYXNrRHVyYXRpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0RldGFpbHMuZHVyYXRpb24gPyBgJHt0aGlzLnRhc2tEZXRhaWxzLmR1cmF0aW9ufSBtc2AgOiAnJztcbiAgICB9XG59XG4iXX0=