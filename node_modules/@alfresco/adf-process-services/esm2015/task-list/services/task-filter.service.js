/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, from, throwError } from 'rxjs';
import { FilterRepresentationModel } from '../models/filter.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class TaskFilterService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Creates and returns the default filters for a process app.
     * @param {?} appId ID of the target app
     * @return {?} Array of default filters just created
     */
    createDefaultFilters(appId) {
        /** @type {?} */
        const involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);
        /** @type {?} */
        const involvedObservable = this.addFilter(involvedTasksFilter);
        /** @type {?} */
        const myTasksFilter = this.getMyTasksFilterInstance(appId);
        /** @type {?} */
        const myTaskObservable = this.addFilter(myTasksFilter);
        /** @type {?} */
        const queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);
        /** @type {?} */
        const queuedObservable = this.addFilter(queuedTasksFilter);
        /** @type {?} */
        const completedTasksFilter = this.getCompletedTasksFilterInstance(appId);
        /** @type {?} */
        const completeObservable = this.addFilter(completedTasksFilter);
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            forkJoin(involvedObservable, myTaskObservable, queuedObservable, completeObservable).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const filters = [];
                res.forEach((/**
                 * @param {?} filter
                 * @return {?}
                 */
                (filter) => {
                    if (filter.name === involvedTasksFilter.name) {
                        involvedTasksFilter.id = filter.id;
                        filters.push(involvedTasksFilter);
                    }
                    else if (filter.name === myTasksFilter.name) {
                        myTasksFilter.id = filter.id;
                        filters.push(myTasksFilter);
                    }
                    else if (filter.name === queuedTasksFilter.name) {
                        queuedTasksFilter.id = filter.id;
                        filters.push(queuedTasksFilter);
                    }
                    else if (filter.name === completedTasksFilter.name) {
                        completedTasksFilter.id = filter.id;
                        filters.push(completedTasksFilter);
                    }
                }));
                observer.next(filters);
                observer.complete();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.logService.error(err);
            }));
        }));
    }
    /**
     * Gets all task filters for a process app.
     * @param {?=} appId Optional ID for a specific app
     * @return {?} Array of task filter details
     */
    getTaskListFilters(appId) {
        return from(this.callApiTaskFilters(appId))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            const filters = [];
            response.data.forEach((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => {
                /** @type {?} */
                const filterModel = new FilterRepresentationModel(filter);
                filters.push(filterModel);
            }));
            return filters;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets a task filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    getTaskFilterById(filterId, appId) {
        return from(this.callApiTaskFilters(appId)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response.data.find((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => filter.id === filterId)))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets a task filter by name.
     * @param {?} taskName Name of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    getTaskFilterByName(taskName, appId) {
        return from(this.callApiTaskFilters(appId)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response.data.find((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => filter.name === taskName)))), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Adds a new task filter
     * @param {?} filter The new filter to add
     * @return {?} Details of task filter just added
     */
    addFilter(filter) {
        return from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return response;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of task filters
     */
    callApiTaskFilters(appId) {
        if (appId) {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });
        }
        else {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();
        }
    }
    /**
     * Creates and returns a filter for "Involved" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    getInvolvedTasksFilterInstance(appId) {
        return new FilterRepresentationModel({
            'name': 'Involved Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-align-left',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }
        });
    }
    /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    getMyTasksFilterInstance(appId) {
        return new FilterRepresentationModel({
            'name': 'My Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-inbox',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }
        });
    }
    /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    getQueuedTasksFilterInstance(appId) {
        return new FilterRepresentationModel({
            'name': 'Queued Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-record',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }
        });
    }
    /**
     * Creates and returns a filter for "Completed" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    getCompletedTasksFilterInstance(appId) {
        return new FilterRepresentationModel({
            'name': 'Completed Tasks',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }
        });
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TaskFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskFilterService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ TaskFilterService.ngInjectableDef = i0.defineInjectable({ factory: function TaskFilterService_Factory() { return new TaskFilterService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService)); }, token: TaskFilterService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskFilterService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    TaskFilterService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,