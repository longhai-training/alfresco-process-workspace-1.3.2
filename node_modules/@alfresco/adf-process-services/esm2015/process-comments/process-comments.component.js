/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommentProcessService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
export class ProcessCommentsComponent {
    /**
     * @param {?} commentProcessService
     */
    constructor(commentProcessService) {
        this.commentProcessService = commentProcessService;
        /**
         * Should the comments be read-only?
         */
        this.readOnly = true;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.comments = [];
        this.beingAdded = false;
        this.comment$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => this.commentObserver = observer))
            .pipe(share());
        this.comment$.subscribe((/**
         * @param {?} comment
         * @return {?}
         */
        (comment) => {
            this.comments.push(comment);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const processInstanceId = changes['processInstanceId'];
        if (processInstanceId) {
            if (processInstanceId.currentValue) {
                this.getProcessInstanceComments(processInstanceId.currentValue);
            }
            else {
                this.resetComments();
            }
        }
    }
    /**
     * @private
     * @param {?} processInstanceId
     * @return {?}
     */
    getProcessInstanceComments(processInstanceId) {
        this.resetComments();
        if (processInstanceId) {
            this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                res = res.sort((/**
                 * @param {?} comment1
                 * @param {?} comment2
                 * @return {?}
                 */
                (comment1, comment2) => {
                    /** @type {?} */
                    const date1 = new Date(comment1.created);
                    /** @type {?} */
                    const date2 = new Date(comment2.created);
                    return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                }));
                res.forEach((/**
                 * @param {?} comment
                 * @return {?}
                 */
                (comment) => {
                    this.commentObserver.next(comment);
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetComments() {
        this.comments = [];
    }
    /**
     * @return {?}
     */
    add() {
        if (this.message && this.message.trim() && !this.beingAdded) {
            this.beingAdded = true;
            this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)
                .subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.comments.unshift(res);
                this.message = '';
                this.beingAdded = false;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.error.emit(err);
                this.beingAdded = false;
            }));
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.message = '';
    }
    /**
     * @return {?}
     */
    isReadOnly() {
        return this.readOnly;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        this.error.emit(error);
    }
}
ProcessCommentsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-comments',
                template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\">\n        {{'ADF_PROCESS_LIST.DETAILS.COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input matInput id=\"comment-input\" placeholder=\"{{'ADF_PROCESS_LIST.DETAILS.COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\" (keyup.enter)=\"add()\" (keyup.esc)=\"clear()\">\n        </mat-form-field>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ProcessCommentsComponent.ctorParameters = () => [
    { type: CommentProcessService }
];
ProcessCommentsComponent.propDecorators = {
    processInstanceId: [{ type: Input }],
    readOnly: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * (**required**) The numeric ID of the process instance to display comments for.
     * @type {?}
     */
    ProcessCommentsComponent.prototype.processInstanceId;
    /**
     * Should the comments be read-only?
     * @type {?}
     */
    ProcessCommentsComponent.prototype.readOnly;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ProcessCommentsComponent.prototype.error;
    /** @type {?} */
    ProcessCommentsComponent.prototype.comments;
    /**
     * @type {?}
     * @private
     */
    ProcessCommentsComponent.prototype.commentObserver;
    /** @type {?} */
    ProcessCommentsComponent.prototype.comment$;
    /** @type {?} */
    ProcessCommentsComponent.prototype.message;
    /** @type {?} */
    ProcessCommentsComponent.prototype.beingAdded;
    /**
     * @type {?}
     * @private
     */
    ProcessCommentsComponent.prototype.commentProcessService;
}
//# sourceMappingURL=data:application/json;base64,