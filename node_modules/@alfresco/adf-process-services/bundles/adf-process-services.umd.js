(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@alfresco/js-api'), require('@angular/material/core'), require('@angular/material/dialog'), require('@alfresco/adf-content-services'), require('moment-es6'), require('rxjs'), require('rxjs/operators'), require('@angular/material'), require('@angular/flex-layout'), require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@alfresco/adf-core')) :
    typeof define === 'function' && define.amd ? define('@alfresco/adf-process-services', ['exports', '@alfresco/js-api', '@angular/material/core', '@angular/material/dialog', '@alfresco/adf-content-services', 'moment-es6', 'rxjs', 'rxjs/operators', '@angular/material', '@angular/flex-layout', '@angular/common', '@angular/core', '@angular/forms', '@alfresco/adf-core'], factory) :
    (factory((global.alfresco = global.alfresco || {}, global.alfresco['adf-process-services'] = {}),global['@alfresco/js-api'],global['@angular/material/core'],global.ng.material.dialog,global['@alfresco/adf-content-services'],global['moment-es6'],global.rxjs,global.rxjs.operators,global['@angular/material'],global['@angular/flex-layout'],global.ng.common,global.ng.core,global.ng.forms,global['@alfresco/adf-core']));
}(this, (function (exports,jsApi,core,i1,adfContentServices,moment$1,rxjs,operators,material,flexLayout,common,i0,forms,i1$1) { 'use strict';

    moment$1 = moment$1 && moment$1.hasOwnProperty('default') ? moment$1['default'] : moment$1;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FilterProcessRepresentationModel = /** @class */ (function () {
        function FilterProcessRepresentationModel(obj) {
            if (obj) {
                this.id = obj.id || null;
                this.appId = obj.appId || null;
                this.name = obj.name || null;
                this.recent = !!obj.recent;
                this.icon = obj.icon || null;
                this.filter = obj.filter || null;
                this.index = obj.index;
            }
        }
        /**
         * @return {?}
         */
        FilterProcessRepresentationModel.prototype.hasFilter = /**
         * @return {?}
         */
            function () {
                return !!this.filter;
            };
        return FilterProcessRepresentationModel;
    }());
    /**
     * This object represent the parameters of a process filter.
     */
    var /**
     * This object represent the parameters of a process filter.
     */ ProcessFilterParamRepresentationModel = /** @class */ (function () {
        function ProcessFilterParamRepresentationModel(obj) {
            this.processDefinitionId = obj.processDefinitionId || null;
            this.appDefinitionId = obj.appDefinitionId || null;
            this.processInstanceId = obj.processInstanceId || null;
            this.state = obj.state || null;
            this.sort = obj.sort || null;
            this.page = obj.page || null;
            this.size = obj.size || null;
        }
        return ProcessFilterParamRepresentationModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessFilterService = /** @class */ (function () {
        function ProcessFilterService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        /**
         * Gets all filters defined for a Process App.
         * @param appId ID of the target app
         * @returns Array of filter details
         */
        /**
         * Gets all filters defined for a Process App.
         * @param {?} appId ID of the target app
         * @return {?} Array of filter details
         */
        ProcessFilterService.prototype.getProcessFilters = /**
         * Gets all filters defined for a Process App.
         * @param {?} appId ID of the target app
         * @return {?} Array of filter details
         */
            function (appId) {
                var _this = this;
                return rxjs.from(this.callApiProcessFilters(appId))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    /** @type {?} */
                    var filters = [];
                    response.data.forEach(( /**
                     * @param {?} filter
                     * @return {?}
                     */function (filter) {
                        /** @type {?} */
                        var filterModel = new FilterProcessRepresentationModel(filter);
                        filters.push(filterModel);
                    }));
                    return filters;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Retrieves the process filter by ID.
         * @param filterId ID of the filter
         * @param appId ID of the target app
         * @returns Details of the filter
         */
        /**
         * Retrieves the process filter by ID.
         * @param {?} filterId ID of the filter
         * @param {?=} appId ID of the target app
         * @return {?} Details of the filter
         */
        ProcessFilterService.prototype.getProcessFilterById = /**
         * Retrieves the process filter by ID.
         * @param {?} filterId ID of the filter
         * @param {?=} appId ID of the target app
         * @return {?} Details of the filter
         */
            function (filterId, appId) {
                var _this = this;
                return rxjs.from(this.callApiProcessFilters(appId))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return response.data.find(( /**
                     * @param {?} filter
                     * @return {?}
                     */function (filter) { return filter.id === filterId; }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Retrieves the process filter by name.
         * @param filterName Name of the filter
         * @param appId ID of the target app
         * @returns Details of the filter
         */
        /**
         * Retrieves the process filter by name.
         * @param {?} filterName Name of the filter
         * @param {?=} appId ID of the target app
         * @return {?} Details of the filter
         */
        ProcessFilterService.prototype.getProcessFilterByName = /**
         * Retrieves the process filter by name.
         * @param {?} filterName Name of the filter
         * @param {?=} appId ID of the target app
         * @return {?} Details of the filter
         */
            function (filterName, appId) {
                var _this = this;
                return rxjs.from(this.callApiProcessFilters(appId))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return response.data.find(( /**
                     * @param {?} filter
                     * @return {?}
                     */function (filter) { return filter.name === filterName; }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Creates and returns the default filters for an app.
         * @param appId ID of the target app
         * @returns Default filters just created
         */
        /**
         * Creates and returns the default filters for an app.
         * @param {?} appId ID of the target app
         * @return {?} Default filters just created
         */
        ProcessFilterService.prototype.createDefaultFilters = /**
         * Creates and returns the default filters for an app.
         * @param {?} appId ID of the target app
         * @return {?} Default filters just created
         */
            function (appId) {
                var _this = this;
                /** @type {?} */
                var runningFilter = this.getRunningFilterInstance(appId);
                /** @type {?} */
                var runningObservable = this.addProcessFilter(runningFilter);
                /** @type {?} */
                var completedFilter = this.getCompletedFilterInstance(appId);
                /** @type {?} */
                var completedObservable = this.addProcessFilter(completedFilter);
                /** @type {?} */
                var allFilter = this.getAllFilterInstance(appId);
                /** @type {?} */
                var allObservable = this.addProcessFilter(allFilter);
                return new rxjs.Observable(( /**
                 * @param {?} observer
                 * @return {?}
                 */function (observer) {
                    rxjs.forkJoin(runningObservable, completedObservable, allObservable).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        /** @type {?} */
                        var filters = [];
                        res.forEach(( /**
                         * @param {?} filter
                         * @return {?}
                         */function (filter) {
                            if (filter.name === runningFilter.name) {
                                runningFilter.id = filter.id;
                                filters.push(runningFilter);
                            }
                            else if (filter.name === completedFilter.name) {
                                completedFilter.id = filter.id;
                                filters.push(completedFilter);
                            }
                            else if (filter.name === allFilter.name) {
                                allFilter.id = filter.id;
                                filters.push(allFilter);
                            }
                        }));
                        observer.next(filters);
                        observer.complete();
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.handleProcessError(err);
                    }));
                }));
            };
        /**
         * Creates and returns a filter that matches "running" process instances.
         * @param appId ID of the target app
         * @returns Filter just created
         */
        /**
         * Creates and returns a filter that matches "running" process instances.
         * @param {?} appId ID of the target app
         * @return {?} Filter just created
         */
        ProcessFilterService.prototype.getRunningFilterInstance = /**
         * Creates and returns a filter that matches "running" process instances.
         * @param {?} appId ID of the target app
         * @return {?} Filter just created
         */
            function (appId) {
                return new FilterProcessRepresentationModel({
                    'name': 'Running',
                    'appId': appId,
                    'recent': true,
                    'icon': 'glyphicon-random',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }
                });
            };
        /**
         * Returns a static Completed filter instance.
         * @param appId ID of the target app
         * @returns Details of the filter
         */
        /**
         * Returns a static Completed filter instance.
         * @private
         * @param {?} appId ID of the target app
         * @return {?} Details of the filter
         */
        ProcessFilterService.prototype.getCompletedFilterInstance = /**
         * Returns a static Completed filter instance.
         * @private
         * @param {?} appId ID of the target app
         * @return {?} Details of the filter
         */
            function (appId) {
                return new FilterProcessRepresentationModel({
                    'name': 'Completed',
                    'appId': appId,
                    'recent': false,
                    'icon': 'glyphicon-ok-sign',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }
                });
            };
        /**
         * Returns a static All filter instance.
         * @param appId ID of the target app
         * @returns Details of the filter
         */
        /**
         * Returns a static All filter instance.
         * @private
         * @param {?} appId ID of the target app
         * @return {?} Details of the filter
         */
        ProcessFilterService.prototype.getAllFilterInstance = /**
         * Returns a static All filter instance.
         * @private
         * @param {?} appId ID of the target app
         * @return {?} Details of the filter
         */
            function (appId) {
                return new FilterProcessRepresentationModel({
                    'name': 'All',
                    'appId': appId,
                    'recent': true,
                    'icon': 'glyphicon-th',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }
                });
            };
        /**
         * Adds a filter.
         * @param filter The filter to add
         * @returns The filter just added
         */
        /**
         * Adds a filter.
         * @param {?} filter The filter to add
         * @return {?} The filter just added
         */
        ProcessFilterService.prototype.addProcessFilter = /**
         * Adds a filter.
         * @param {?} filter The filter to add
         * @return {?} The filter just added
         */
            function (filter) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return response;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
         * @param appId ID of the target app
         * @returns List of filter details
         */
        /**
         * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
         * @param {?=} appId ID of the target app
         * @return {?} List of filter details
         */
        ProcessFilterService.prototype.callApiProcessFilters = /**
         * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
         * @param {?=} appId ID of the target app
         * @return {?} List of filter details
         */
            function (appId) {
                if (appId) {
                    return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });
                }
                else {
                    return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();
                }
            };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        ProcessFilterService.prototype.handleProcessError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                return rxjs.throwError(error || 'Server error');
            };
        ProcessFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProcessFilterService.ctorParameters = function () {
            return [
                { type: i1$1.AlfrescoApiService }
            ];
        };
        /** @nocollapse */ ProcessFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessFilterService_Factory() { return new ProcessFilterService(i0.inject(i1$1.AlfrescoApiService)); }, token: ProcessFilterService, providedIn: "root" });
        return ProcessFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /* spellchecker: disable */
    var IconModel = /** @class */ (function () {
        function IconModel() {
            this.initIconsMDL();
        }
        /**
         * @param {?} icon
         * @return {?}
         */
        IconModel.prototype.mapGlyphiconToMaterialDesignIcons = /**
         * @param {?} icon
         * @return {?}
         */
            function (icon) {
                return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;
            };
        /**
         * Map all the bootstrap glyphicon icons with Material design material icon
         */
        /**
         * Map all the bootstrap glyphicon icons with Material design material icon
         * @return {?}
         */
        IconModel.prototype.initIconsMDL = /**
         * Map all the bootstrap glyphicon icons with Material design material icon
         * @return {?}
         */
            function () {
                this.iconsMDL = new Map();
                this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');
                this.iconsMDL.set('glyphicon-plus', 'add');
                this.iconsMDL.set('glyphicon-euro', 'euro_symbol');
                this.iconsMDL.set('glyphicon-cloud', 'cloud');
                this.iconsMDL.set('glyphicon-envelope', 'mail');
                this.iconsMDL.set('glyphicon-pencil', 'create');
                this.iconsMDL.set('glyphicon-glass', 'local_bar');
                this.iconsMDL.set('glyphicon-music', 'music_note');
                this.iconsMDL.set('glyphicon-search', 'search');
                this.iconsMDL.set('glyphicon-heart', 'favorite');
                this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');
                this.iconsMDL.set('glyphicon-star', 'star');
                this.iconsMDL.set('glyphicon-star-empty', 'star_border');
                this.iconsMDL.set('glyphicon-user', 'person');
                this.iconsMDL.set('glyphicon-film', 'movie_creation');
                this.iconsMDL.set('glyphicon-th-large', 'view_comfy');
                this.iconsMDL.set('glyphicon-th', 'dashboard');
                this.iconsMDL.set('glyphicon-th-list', 'list');
                this.iconsMDL.set('glyphicon-ok', 'done');
                this.iconsMDL.set('glyphicon-remove', 'cancel');
                this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');
                this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');
                this.iconsMDL.set('glyphicon-off', 'highlight_off');
                this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');
                this.iconsMDL.set('glyphicon-cog', 'settings');
                this.iconsMDL.set('glyphicon-trash', 'delete');
                this.iconsMDL.set('glyphicon-home', 'home');
                this.iconsMDL.set('glyphicon-file', 'insert_drive_file');
                this.iconsMDL.set('glyphicon-time', 'access_time');
                this.iconsMDL.set('glyphicon-road', 'map');
                this.iconsMDL.set('glyphicon-download-alt', 'file_download');
                this.iconsMDL.set('glyphicon-download', 'file_download');
                this.iconsMDL.set('glyphicon-upload', 'file_upload');
                this.iconsMDL.set('glyphicon-inbox', 'inbox');
                this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');
                this.iconsMDL.set('glyphicon-repeat', 'refresh');
                this.iconsMDL.set('glyphicon-refresh', 'sync');
                this.iconsMDL.set('glyphicon-list-alt', 'event_note');
                this.iconsMDL.set('glyphicon-lock', 'lock_outline');
                this.iconsMDL.set('glyphicon-flag', 'assistant_photo');
                this.iconsMDL.set('glyphicon-headphones', 'headset');
                this.iconsMDL.set('glyphicon-volume-up', 'volume_up');
                this.iconsMDL.set('glyphicon-tag', 'local_offer');
                this.iconsMDL.set('glyphicon-tags', 'local_offer');
                this.iconsMDL.set('glyphicon-book', 'library_books');
                this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');
                this.iconsMDL.set('glyphicon-print', 'local_printshop');
                this.iconsMDL.set('glyphicon-camera', 'local_see');
                this.iconsMDL.set('glyphicon-list', 'view_list');
                this.iconsMDL.set('glyphicon-facetime-video', 'video_call');
                this.iconsMDL.set('glyphicon-picture', 'photo');
                this.iconsMDL.set('glyphicon-map-marker', 'add_location');
                this.iconsMDL.set('glyphicon-adjust', 'brightness_4');
                this.iconsMDL.set('glyphicon-tint', 'invert_colors');
                this.iconsMDL.set('glyphicon-edit', 'edit');
                this.iconsMDL.set('glyphicon-share', 'share');
                this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');
                this.iconsMDL.set('glyphicon-move', 'open_with');
                this.iconsMDL.set('glyphicon-play', 'play_arrow');
                this.iconsMDL.set('glyphicon-eject', 'eject');
                this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');
                this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');
                this.iconsMDL.set('glyphicon-remove-sign', 'cancel');
                this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');
                this.iconsMDL.set('glyphicon-question-sign', 'help');
                this.iconsMDL.set('glyphicon-info-sign', 'info');
                this.iconsMDL.set('glyphicon-screenshot', 'flare');
                this.iconsMDL.set('glyphicon-remove-circle', 'cancel');
                this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');
                this.iconsMDL.set('glyphicon-ban-circle', 'block');
                this.iconsMDL.set('glyphicon-share-alt', 'redo');
                this.iconsMDL.set('glyphicon-exclamation-sign', 'error');
                this.iconsMDL.set('glyphicon-gift', 'giftcard');
                this.iconsMDL.set('glyphicon-leaf', 'spa');
                this.iconsMDL.set('glyphicon-fire', 'whatshot');
                this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');
                this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');
                this.iconsMDL.set('glyphicon-warning-sign', 'warning');
                this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');
                this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-random', 'shuffle');
                this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-record', 'radio_button_checked');
                this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-send', 'send');
                this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
                this.iconsMDL.set('glyphicon-align-left', 'format_align_left');
            };
        IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
        return IconModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessFiltersComponent = /** @class */ (function () {
        function ProcessFiltersComponent(processFilterService, appsProcessService) {
            this.processFilterService = processFilterService;
            this.appsProcessService = appsProcessService;
            /**
             * Emitted when the user selects a filter from the list.
             */
            this.filterClick = new i0.EventEmitter();
            /**
             * Emitted when the list of filters has been successfully loaded from the server.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            /**
             * Toggle to show or hide the filter's icon.
             */
            this.showIcon = true;
            /**
             * Emitted when a process filter is selected.
             */
            this.filterSelected = new i0.EventEmitter();
            this.filters = [];
        }
        /**
         * @return {?}
         */
        ProcessFiltersComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.iconsMDL = new IconModel();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessFiltersComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var appId = changes['appId'];
                /** @type {?} */
                var appName = changes['appName'];
                /** @type {?} */
                var filter = changes['filterParam'];
                if (appId && (appId.currentValue || appId.currentValue === null)) {
                    this.getFiltersByAppId(appId.currentValue);
                }
                else if (appName && appName.currentValue) {
                    this.getFiltersByAppName(appName.currentValue);
                }
                else if (filter && filter.currentValue !== filter.previousValue) {
                    this.selectProcessFilter(filter.currentValue);
                }
            };
        /**
         * Return the filter list filtered by appId
         * @param appId - optional
         */
        /**
         * Return the filter list filtered by appId
         * @param {?=} appId - optional
         * @return {?}
         */
        ProcessFiltersComponent.prototype.getFiltersByAppId = /**
         * Return the filter list filtered by appId
         * @param {?=} appId - optional
         * @return {?}
         */
            function (appId) {
                var _this = this;
                this.processFilterService.getProcessFilters(appId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    if (res.length === 0 && _this.isFilterListEmpty()) {
                        _this.processFilterService.createDefaultFilters(appId).subscribe(( /**
                         * @param {?} resDefault
                         * @return {?}
                         */function (resDefault) {
                            _this.resetFilter();
                            _this.filters = resDefault;
                            _this.selectProcessFilter(_this.filterParam);
                            _this.success.emit(resDefault);
                        }), ( /**
                         * @param {?} errDefault
                         * @return {?}
                         */function (errDefault) {
                            _this.error.emit(errDefault);
                        }));
                    }
                    else {
                        _this.resetFilter();
                        _this.filters = res;
                        _this.selectProcessFilter(_this.filterParam);
                        _this.success.emit(res);
                    }
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * Return the filter list filtered by appName
         * @param appName
         */
        /**
         * Return the filter list filtered by appName
         * @param {?} appName
         * @return {?}
         */
        ProcessFiltersComponent.prototype.getFiltersByAppName = /**
         * Return the filter list filtered by appName
         * @param {?} appName
         * @return {?}
         */
            function (appName) {
                var _this = this;
                this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(( /**
                 * @param {?} application
                 * @return {?}
                 */function (application) {
                    _this.getFiltersByAppId(application.id);
                    _this.selectProcessFilter(_this.filterParam);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * Pass the selected filter as next
         * @param filter
         */
        /**
         * Pass the selected filter as next
         * @param {?} filter
         * @return {?}
         */
        ProcessFiltersComponent.prototype.selectFilter = /**
         * Pass the selected filter as next
         * @param {?} filter
         * @return {?}
         */
            function (filter) {
                this.currentFilter = filter;
                this.filterClick.emit(filter);
            };
        /**
         * Select the first filter of a list if present
         */
        /**
         * Select the first filter of a list if present
         * @param {?} filterParam
         * @return {?}
         */
        ProcessFiltersComponent.prototype.selectProcessFilter = /**
         * Select the first filter of a list if present
         * @param {?} filterParam
         * @return {?}
         */
            function (filterParam) {
                var _this = this;
                if (filterParam) {
                    this.filters.filter(( /**
                     * @param {?} processFilter
                     * @param {?} index
                     * @return {?}
                     */function (processFilter, index) {
                        if (filterParam.name && filterParam.name.toLowerCase() === processFilter.name.toLowerCase() ||
                            filterParam.id === processFilter.id ||
                            filterParam.index === index) {
                            _this.currentFilter = processFilter;
                            _this.filterSelected.emit(processFilter);
                        }
                    }));
                }
                if (this.isCurrentFilterEmpty()) {
                    this.selectDefaultTaskFilter();
                }
            };
        /**
         * Select the Running filter
         */
        /**
         * Select the Running filter
         * @return {?}
         */
        ProcessFiltersComponent.prototype.selectRunningFilter = /**
         * Select the Running filter
         * @return {?}
         */
            function () {
                this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));
            };
        /**
         * Select as default task filter the first in the list
         */
        /**
         * Select as default task filter the first in the list
         * @return {?}
         */
        ProcessFiltersComponent.prototype.selectDefaultTaskFilter = /**
         * Select as default task filter the first in the list
         * @return {?}
         */
            function () {
                if (!this.isFilterListEmpty()) {
                    this.currentFilter = this.filters[0];
                    this.filterSelected.emit(this.filters[0]);
                }
            };
        /**
         * Return the current task
         */
        /**
         * Return the current task
         * @return {?}
         */
        ProcessFiltersComponent.prototype.getCurrentFilter = /**
         * Return the current task
         * @return {?}
         */
            function () {
                return this.currentFilter;
            };
        /**
         * Check if the filter list is empty
         */
        /**
         * Check if the filter list is empty
         * @return {?}
         */
        ProcessFiltersComponent.prototype.isFilterListEmpty = /**
         * Check if the filter list is empty
         * @return {?}
         */
            function () {
                return this.filters === undefined || (this.filters && this.filters.length === 0);
            };
        /**
         * Reset the filters properties
         */
        /**
         * Reset the filters properties
         * @private
         * @return {?}
         */
        ProcessFiltersComponent.prototype.resetFilter = /**
         * Reset the filters properties
         * @private
         * @return {?}
         */
            function () {
                this.filters = [];
                this.currentFilter = undefined;
            };
        /**
         * @private
         * @return {?}
         */
        ProcessFiltersComponent.prototype.isCurrentFilterEmpty = /**
         * @private
         * @return {?}
         */
            function () {
                return this.currentFilter === undefined || null;
            };
        /**
         * Return current filter icon
         */
        /**
         * Return current filter icon
         * @param {?} icon
         * @return {?}
         */
        ProcessFiltersComponent.prototype.getFilterIcon = /**
         * Return current filter icon
         * @param {?} icon
         * @return {?}
         */
            function (icon) {
                return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
            };
        ProcessFiltersComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-instance-filters',
                        template: "<div class=\"menu-container\">\n    <mat-list class=\"adf-menu-list\">\n        <mat-list-item (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"\n                        class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n            <mat-icon *ngIf=\"showIcon\" matListIcon class=\"adf-filters__entry-icon\">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ProcessFiltersComponent.ctorParameters = function () {
            return [
                { type: ProcessFilterService },
                { type: i1$1.AppsProcessService }
            ];
        };
        ProcessFiltersComponent.propDecorators = {
            filterParam: [{ type: i0.Input }],
            filterClick: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            appId: [{ type: i0.Input }],
            appName: [{ type: i0.Input }],
            showIcon: [{ type: i0.Input }],
            filterSelected: [{ type: i0.Output }]
        };
        return ProcessFiltersComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessDefinitionRepresentation = /** @class */ (function () {
        function ProcessDefinitionRepresentation(obj) {
            this.id = obj && obj.id || null;
            this.name = obj && obj.name || null;
            this.description = obj && obj.description || null;
            this.key = obj && obj.key || null;
            this.category = obj && obj.category || null;
            this.version = obj && obj.version || 0;
            this.deploymentId = obj && obj.deploymentId || null;
            this.tenantId = obj && obj.tenantId || null;
            this.metaDataValues = obj && obj.metaDataValues || [];
            this.hasStartForm = obj && obj.hasStartForm === true ? true : false;
        }
        return ProcessDefinitionRepresentation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstanceVariable = /** @class */ (function () {
        function ProcessInstanceVariable(obj) {
            this.name = obj && obj.name !== undefined ? obj.name : null;
            this.scope = obj && obj.scope !== undefined ? obj.scope : null;
            this.value = obj && obj.value !== undefined ? obj.value : null;
            this.valueUrl = obj && obj.valueUrl !== undefined ? obj.valueUrl : null;
        }
        return ProcessInstanceVariable;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessInstance = /** @class */ (function () {
        function ProcessInstance(data) {
            this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;
            this.ended = data && data.ended !== undefined ? data.ended : null;
            this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;
            this.id = data && data.id !== undefined ? data.id : null;
            this.name = data && data.name !== undefined ? data.name : null;
            this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;
            this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;
            this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;
            this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;
            this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;
            this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;
            this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;
            this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;
            this.started = data && data.started !== undefined ? data.started : null;
            this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;
            this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;
            this.variables = data && data.variables !== undefined ? data.variables : null;
        }
        return ProcessInstance;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessListModel = /** @class */ (function () {
        function ProcessListModel(obj) {
            if (obj) {
                this.size = obj.size || null;
                this.total = obj.total || null;
                this.start = obj.start || null;
                this.length = obj.length || null;
                this.data = obj.data || [];
            }
        }
        return ProcessListModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessService = /** @class */ (function () {
        function ProcessService(alfrescoApiService) {
            this.alfrescoApiService = alfrescoApiService;
        }
        /**
         * Gets process instances for a filter and optionally a process definition.
         * @param requestNode Filter for instances
         * @param processDefinitionKey Limits returned instances to a process definition
         * @returns List of process instances
         */
        /**
         * Gets process instances for a filter and optionally a process definition.
         * @param {?} requestNode Filter for instances
         * @param {?=} processDefinitionKey Limits returned instances to a process definition
         * @return {?} List of process instances
         */
        ProcessService.prototype.getProcessInstances = /**
         * Gets process instances for a filter and optionally a process definition.
         * @param {?} requestNode Filter for instances
         * @param {?=} processDefinitionKey Limits returned instances to a process definition
         * @return {?} List of process instances
         */
            function (requestNode, processDefinitionKey) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))
                    .pipe(operators.map(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    if (processDefinitionKey) {
                        /** @type {?} */
                        var filtered = res.data.filter(( /**
                         * @param {?} process
                         * @return {?}
                         */function (process) { return process.processDefinitionKey === processDefinitionKey; }));
                        res.data = filtered;
                        return res;
                    }
                    else {
                        return res;
                    }
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Gets processes for a filter and optionally a process definition.
         * @param requestNode Filter for instances
         * @param processDefinitionKey Limits returned instances to a process definition
         * @returns List of processes
         */
        /**
         * Gets processes for a filter and optionally a process definition.
         * @param {?} requestNode Filter for instances
         * @param {?=} processDefinitionKey Limits returned instances to a process definition
         * @return {?} List of processes
         */
        ProcessService.prototype.getProcesses = /**
         * Gets processes for a filter and optionally a process definition.
         * @param {?} requestNode Filter for instances
         * @param {?=} processDefinitionKey Limits returned instances to a process definition
         * @return {?} List of processes
         */
            function (requestNode, processDefinitionKey) {
                return this.getProcessInstances(requestNode, processDefinitionKey)
                    .pipe(operators.catchError(( /**
             * @return {?}
             */function () {
                    return rxjs.of(new ProcessListModel({}));
                })));
            };
        /**
         * Fetches the Process Audit information as a PDF.
         * @param processId ID of the target process
         * @returns Binary PDF data
         */
        /**
         * Fetches the Process Audit information as a PDF.
         * @param {?} processId ID of the target process
         * @return {?} Binary PDF data
         */
        ProcessService.prototype.fetchProcessAuditPdfById = /**
         * Fetches the Process Audit information as a PDF.
         * @param {?} processId ID of the target process
         * @return {?} Binary PDF data
         */
            function (processId) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Fetches the Process Audit information in a JSON format.
         * @param processId ID of the target process
         * @returns JSON data
         */
        /**
         * Fetches the Process Audit information in a JSON format.
         * @param {?} processId ID of the target process
         * @return {?} JSON data
         */
        ProcessService.prototype.fetchProcessAuditJsonById = /**
         * Fetches the Process Audit information in a JSON format.
         * @param {?} processId ID of the target process
         * @return {?} JSON data
         */
            function (processId) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Gets Process Instance metadata.
         * @param processInstanceId ID of the target process
         * @returns Metadata for the instance
         */
        /**
         * Gets Process Instance metadata.
         * @param {?} processInstanceId ID of the target process
         * @return {?} Metadata for the instance
         */
        ProcessService.prototype.getProcess = /**
         * Gets Process Instance metadata.
         * @param {?} processInstanceId ID of the target process
         * @return {?} Metadata for the instance
         */
            function (processInstanceId) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Gets task instances for a process instance.
         * @param processInstanceId ID of the process instance
         * @param state Task state filter (can be "active" or "completed")
         * @returns Array of task instance details
         */
        /**
         * Gets task instances for a process instance.
         * @param {?} processInstanceId ID of the process instance
         * @param {?=} state Task state filter (can be "active" or "completed")
         * @return {?} Array of task instance details
         */
        ProcessService.prototype.getProcessTasks = /**
         * Gets task instances for a process instance.
         * @param {?} processInstanceId ID of the process instance
         * @param {?=} state Task state filter (can be "active" or "completed")
         * @return {?} Array of task instance details
         */
            function (processInstanceId, state) {
                var _this = this;
                /** @type {?} */
                var taskOpts = state ? {
                    processInstanceId: processInstanceId,
                    state: state
                } : {
                    processInstanceId: processInstanceId
                };
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))
                    .pipe(operators.map(this.extractData), operators.map(( /**
             * @param {?} tasks
             * @return {?}
             */function (tasks) {
                    return tasks.map(( /**
                     * @param {?} task
                     * @return {?}
                     */function (task) {
                        task.created = moment(task.created, 'YYYY-MM-DD').format();
                        return task;
                    }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Gets process definitions associated with an app.
         * @param appId ID of a target app
         * @returns Array of process definitions
         */
        /**
         * Gets process definitions associated with an app.
         * @param {?=} appId ID of a target app
         * @return {?} Array of process definitions
         */
        ProcessService.prototype.getProcessDefinitions = /**
         * Gets process definitions associated with an app.
         * @param {?=} appId ID of a target app
         * @return {?} Array of process definitions
         */
            function (appId) {
                var _this = this;
                /** @type {?} */
                var opts = appId ? {
                    latest: true,
                    appDefinitionId: appId
                } : {
                    latest: true
                };
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts))
                    .pipe(operators.map(this.extractData), operators.map(( /**
             * @param {?} processDefs
             * @return {?}
             */function (processDefs) {
                    return processDefs.map(( /**
                     * @param {?} pd
                     * @return {?}
                     */function (pd) { return new ProcessDefinitionRepresentation(pd); }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Starts a process based on a process definition, name, form values or variables.
         * @param processDefinitionId Process definition ID
         * @param name Process name
         * @param outcome Process outcome
         * @param startFormValues Values for the start form
         * @param variables Array of process instance variables
         * @returns Details of the process instance just started
         */
        /**
         * Starts a process based on a process definition, name, form values or variables.
         * @param {?} processDefinitionId Process definition ID
         * @param {?} name Process name
         * @param {?=} outcome Process outcome
         * @param {?=} startFormValues Values for the start form
         * @param {?=} variables Array of process instance variables
         * @return {?} Details of the process instance just started
         */
        ProcessService.prototype.startProcess = /**
         * Starts a process based on a process definition, name, form values or variables.
         * @param {?} processDefinitionId Process definition ID
         * @param {?} name Process name
         * @param {?=} outcome Process outcome
         * @param {?=} startFormValues Values for the start form
         * @param {?=} variables Array of process instance variables
         * @return {?} Details of the process instance just started
         */
            function (processDefinitionId, name, outcome, startFormValues, variables) {
                var _this = this;
                /** @type {?} */
                var startRequest = {
                    name: name,
                    processDefinitionId: processDefinitionId
                };
                if (outcome) {
                    startRequest.outcome = outcome;
                }
                if (startFormValues) {
                    startRequest.values = startFormValues;
                }
                if (variables) {
                    startRequest.variables = variables;
                }
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest))
                    .pipe(operators.map(( /**
             * @param {?} pd
             * @return {?}
             */function (pd) { return new ProcessInstance(pd); })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Cancels a process instance.
         * @param processInstanceId ID of process to cancel
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Cancels a process instance.
         * @param {?} processInstanceId ID of process to cancel
         * @return {?} Null response notifying when the operation is complete
         */
        ProcessService.prototype.cancelProcess = /**
         * Cancels a process instance.
         * @param {?} processInstanceId ID of process to cancel
         * @return {?} Null response notifying when the operation is complete
         */
            function (processInstanceId) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Gets the variables for a process instance.
         * @param processInstanceId ID of the target process
         * @returns Array of instance variable info
         */
        /**
         * Gets the variables for a process instance.
         * @param {?} processInstanceId ID of the target process
         * @return {?} Array of instance variable info
         */
        ProcessService.prototype.getProcessInstanceVariables = /**
         * Gets the variables for a process instance.
         * @param {?} processInstanceId ID of the target process
         * @return {?} Array of instance variable info
         */
            function (processInstanceId) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
                    .pipe(operators.map(( /**
             * @param {?} processVars
             * @return {?}
             */function (processVars) {
                    return processVars.map(( /**
                     * @param {?} currentProcessVar
                     * @return {?}
                     */function (currentProcessVar) { return new ProcessInstanceVariable(currentProcessVar); }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Creates or updates variables for a process instance.
         * @param processInstanceId ID of the target process
         * @param variables Variables to update
         * @returns Array of instance variable info
         */
        /**
         * Creates or updates variables for a process instance.
         * @param {?} processInstanceId ID of the target process
         * @param {?} variables Variables to update
         * @return {?} Array of instance variable info
         */
        ProcessService.prototype.createOrUpdateProcessInstanceVariables = /**
         * Creates or updates variables for a process instance.
         * @param {?} processInstanceId ID of the target process
         * @param {?} variables Variables to update
         * @return {?} Array of instance variable info
         */
            function (processInstanceId, variables) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)).pipe(operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * Deletes a variable for a process instance.
         * @param processInstanceId ID of the target process
         * @param variableName Name of the variable to delete
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Deletes a variable for a process instance.
         * @param {?} processInstanceId ID of the target process
         * @param {?} variableName Name of the variable to delete
         * @return {?} Null response notifying when the operation is complete
         */
        ProcessService.prototype.deleteProcessInstanceVariable = /**
         * Deletes a variable for a process instance.
         * @param {?} processInstanceId ID of the target process
         * @param {?} variableName Name of the variable to delete
         * @return {?} Null response notifying when the operation is complete
         */
            function (processInstanceId, variableName) {
                var _this = this;
                return rxjs.from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleProcessError(err); })));
            };
        /**
         * @private
         * @param {?} res
         * @return {?}
         */
        ProcessService.prototype.extractData = /**
         * @private
         * @param {?} res
         * @return {?}
         */
            function (res) {
                return res.data || {};
            };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        ProcessService.prototype.handleProcessError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                return rxjs.throwError(error || 'Server error');
            };
        ProcessService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProcessService.ctorParameters = function () {
            return [
                { type: i1$1.AlfrescoApiService }
            ];
        };
        /** @nocollapse */ ProcessService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessService_Factory() { return new ProcessService(i0.inject(i1$1.AlfrescoApiService)); }, token: ProcessService, providedIn: "root" });
        return ProcessService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessInstanceDetailsComponent = /** @class */ (function () {
        /**
         * Constructor
         * @param translate Translation service
         * @param activitiProcess   Process service
         */
        function ProcessInstanceDetailsComponent(activitiProcess, logService) {
            this.activitiProcess = activitiProcess;
            this.logService = logService;
            /**
             * Toggles whether to show or hide the title.
             */
            this.showTitle = true;
            /**
             * Toggles whether to show or hide the refresh button.
             */
            this.showRefreshButton = true;
            /**
             * Emitted when the current process is cancelled by the user from within the component.
             */
            this.processCancelled = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            /**
             * Emitted when a task is clicked.
             */
            this.taskClick = new i0.EventEmitter();
            /**
             * Emitted when the "show diagram" button is clicked.
             */
            this.showProcessDiagram = new i0.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var processInstanceId = changes['processInstanceId'];
                if (processInstanceId && !processInstanceId.currentValue) {
                    this.reset();
                    return;
                }
                if (processInstanceId && processInstanceId.currentValue) {
                    this.load(processInstanceId.currentValue);
                    return;
                }
            };
        /**
         * Reset the task detail
         */
        /**
         * Reset the task detail
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.reset = /**
         * Reset the task detail
         * @return {?}
         */
            function () {
                this.processInstanceDetails = null;
            };
        /**
         * @param {?} processId
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.load = /**
         * @param {?} processId
         * @return {?}
         */
            function (processId) {
                var _this = this;
                if (processId) {
                    this.activitiProcess.getProcess(processId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.processInstanceDetails = res;
                    }));
                }
            };
        /**
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.isRunning = /**
         * @return {?}
         */
            function () {
                return this.processInstanceDetails && !this.processInstanceDetails.ended;
            };
        /**
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.cancelProcess = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.processCancelled.emit(data);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        // bubbles (taskClick) event
        // bubbles (taskClick) event
        /**
         * @param {?} event
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.onTaskClicked =
            // bubbles (taskClick) event
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                this.taskClick.emit(event);
            };
        /**
         * @param {?} dateFormat
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.getProcessNameOrDescription = /**
         * @param {?} dateFormat
         * @return {?}
         */
            function (dateFormat) {
                /** @type {?} */
                var name = '';
                if (this.processInstanceDetails) {
                    name = this.processInstanceDetails.name ||
                        this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
                }
                return name;
            };
        /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.getFormatDate = /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
            function (value, format) {
                /** @type {?} */
                var datePipe = new common.DatePipe('en-US');
                try {
                    return datePipe.transform(value, format);
                }
                catch (err) {
                    this.logService.error("ProcessListInstanceHeader: error parsing date " + value + " to format " + format);
                }
            };
        /**
         * @param {?} processInstanceId
         * @return {?}
         */
        ProcessInstanceDetailsComponent.prototype.onShowProcessDiagram = /**
         * @param {?} processInstanceId
         * @return {?}
         */
            function (processInstanceId) {
                this.showProcessDiagram.emit({ value: this.processInstanceId });
            };
        ProcessInstanceDetailsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-instance-details',
                        template: "<div *ngIf=\"!processInstanceDetails\">{{ 'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE'|translate }}</div>\n<mat-card *ngIf=\"processInstanceDetails\">\n    <mat-card-header>\n        <mat-card-title>{{ getProcessNameOrDescription('medium') }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <adf-process-instance-header\n            #processInstanceHeader\n            [processInstance]=\"processInstanceDetails\"\n            (showProcessDiagram)=\"onShowProcessDiagram($event)\">\n        </adf-process-instance-header>\n\n        <button class=\"adf-in-medias-res-button\" mat-button id=\"show-diagram-button\" type=\"button\" mat-button mat-raised-button [disabled]=\"!isRunning()\" (click)=\"onShowProcessDiagram(processInstanceId)\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-tasks\n                    #processInstanceTasks\n                    [processInstanceDetails]=\"processInstanceDetails\"\n                    (taskClick)=\"onTaskClicked($event)\">\n                </adf-process-instance-tasks>\n            </mat-card-content>\n        </mat-card>\n\n        <div data-automation-id=\"header-status\" *ngIf=\"isRunning()\" class=\"adf-in-medias-res-button\">\n            <button mat-button type=\"button\" (click)=\"cancelProcess()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL' | translate }}</button>\n        </div>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-comments #activitiComments\n                    [readOnly]=\"false\"\n                    [processInstanceId]=\"processInstanceDetails.id\">\n                </adf-process-instance-comments>\n            </mat-card-content>\n        </mat-card>\n\n    </mat-card-content>\n</mat-card>\n",
                        styles: [":host{width:100%}.activiti-process-container{width:100%;min-height:100px;overflow:visible;padding:10px}.adf-comments-dialog{position:fixed;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);width:40%}.adf-in-medias-res-button{margin:16px 0}"]
                    }] }
        ];
        /** @nocollapse */
        ProcessInstanceDetailsComponent.ctorParameters = function () {
            return [
                { type: ProcessService },
                { type: i1$1.LogService }
            ];
        };
        ProcessInstanceDetailsComponent.propDecorators = {
            processInstanceId: [{ type: i0.Input }],
            processInstanceHeader: [{ type: i0.ViewChild, args: ['processInstanceHeader',] }],
            tasksList: [{ type: i0.ViewChild, args: ['processInstanceTasks',] }],
            showTitle: [{ type: i0.Input }],
            showRefreshButton: [{ type: i0.Input }],
            processCancelled: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            taskClick: [{ type: i0.Output }],
            showProcessDiagram: [{ type: i0.Output }]
        };
        return ProcessInstanceDetailsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var JSON_FORMAT = 'json';
    /** @type {?} */
    var PDF_FORMAT = 'pdf';
    var ProcessAuditDirective = /** @class */ (function () {
        /**
         *
         * @param translateService
         * @param processListService
         */
        function ProcessAuditDirective(contentService, processListService) {
            this.contentService = contentService;
            this.processListService = processListService;
            /**
             * Name of the file to download (for PDF downloads).
             */
            this.fileName = 'Audit';
            /**
             * Format for the audit information (can be "pdf" or "json").
             */
            this.format = 'pdf';
            /**
             * Enables downloading of the audit file on clicking.
             */
            this.download = true;
            /**
             * Emitted when the decorated element is clicked.
             */
            this.clicked = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessAuditDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.isValidType()) {
                    this.setDefaultFormatType();
                }
            };
        /**
         * @return {?}
         */
        ProcessAuditDirective.prototype.isValidType = /**
         * @return {?}
         */
            function () {
                if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {
                    return true;
                }
                return false;
            };
        /**
         * @return {?}
         */
        ProcessAuditDirective.prototype.setDefaultFormatType = /**
         * @return {?}
         */
            function () {
                this.format = PDF_FORMAT;
            };
        /**
         * fetch the audit information in the requested format
         */
        /**
         * fetch the audit information in the requested format
         * @return {?}
         */
        ProcessAuditDirective.prototype.fetchAuditInfo = /**
         * fetch the audit information in the requested format
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isPdfFormat()) {
                    this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(( /**
                     * @param {?} blob
                     * @return {?}
                     */function (blob) {
                        _this.audit = blob;
                        if (_this.download) {
                            _this.contentService.downloadBlob(_this.audit, _this.fileName + '.pdf');
                        }
                        _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
                else {
                    this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.audit = res;
                        _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
            };
        /**
         * @return {?}
         */
        ProcessAuditDirective.prototype.onClickAudit = /**
         * @return {?}
         */
            function () {
                this.fetchAuditInfo();
            };
        /**
         * @return {?}
         */
        ProcessAuditDirective.prototype.isJsonFormat = /**
         * @return {?}
         */
            function () {
                return this.format === JSON_FORMAT;
            };
        /**
         * @return {?}
         */
        ProcessAuditDirective.prototype.isPdfFormat = /**
         * @return {?}
         */
            function () {
                return this.format === PDF_FORMAT;
            };
        ProcessAuditDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'button[adf-process-audit]',
                        host: {
                            'role': 'button',
                            '(click)': 'onClickAudit()'
                        }
                    },] }
        ];
        /** @nocollapse */
        ProcessAuditDirective.ctorParameters = function () {
            return [
                { type: i1$1.ContentService },
                { type: ProcessService }
            ];
        };
        ProcessAuditDirective.propDecorators = {
            processId: [{ type: i0.Input, args: ['process-id',] }],
            fileName: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            download: [{ type: i0.Input }],
            clicked: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return ProcessAuditDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessInstanceHeaderComponent = /** @class */ (function () {
        function ProcessInstanceHeaderComponent(translationService, appConfig) {
            this.translationService = translationService;
            this.appConfig = appConfig;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.refreshData();
            };
        /**
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.refreshData = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.processInstance) {
                    /** @type {?} */
                    var defaultProperties = this.initDefaultProperties();
                    /** @type {?} */
                    var filteredProperties_1 = this.appConfig.get('adf-process-instance-header.presets.properties');
                    this.properties = defaultProperties.filter(( /**
                     * @param {?} cardItem
                     * @return {?}
                     */function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.initDefaultProperties = /**
         * @private
         * @return {?}
         */
            function () {
                return [
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_PROCESS_LIST.PROPERTIES.STATUS',
                        value: this.getProcessStatus(),
                        key: 'status'
                    }),
                    new i1$1.CardViewDateItemModel({
                        label: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE',
                        value: this.processInstance.ended,
                        format: 'MMM DD YYYY',
                        key: 'ended',
                        default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT')
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY',
                        value: this.processInstance.processDefinitionCategory,
                        key: 'category',
                        default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT')
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY',
                        value: this.processInstance.businessKey,
                        key: 'businessKey',
                        default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT')
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY',
                        value: this.getStartedByFullName(),
                        key: 'assignee',
                        default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT')
                    }),
                    new i1$1.CardViewDateItemModel({
                        label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED',
                        value: this.processInstance.started,
                        format: 'MMM DD YYYY',
                        key: 'created'
                    }),
                    new i1$1.CardViewTextItemModel({ label: 'ADF_PROCESS_LIST.PROPERTIES.ID',
                        value: this.processInstance.id,
                        key: 'id'
                    }),
                    new i1$1.CardViewTextItemModel({ label: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION',
                        value: this.processInstance.processDefinitionDescription,
                        key: 'description',
                        default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT')
                    })
                ];
            };
        /**
         * @private
         * @param {?} filteredProperties
         * @param {?} cardItem
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.isValidSelection = /**
         * @private
         * @param {?} filteredProperties
         * @param {?} cardItem
         * @return {?}
         */
            function (filteredProperties, cardItem) {
                return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
            };
        /**
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.getProcessStatus = /**
         * @return {?}
         */
            function () {
                if (this.processInstance) {
                    return this.isRunning() ? 'Running' : 'Completed';
                }
            };
        /**
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.getStartedByFullName = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var fullName = '';
                if (this.processInstance && this.processInstance.startedBy) {
                    fullName += this.processInstance.startedBy.firstName || '';
                    fullName += fullName ? ' ' : '';
                    fullName += this.processInstance.startedBy.lastName || '';
                }
                return fullName;
            };
        /**
         * @return {?}
         */
        ProcessInstanceHeaderComponent.prototype.isRunning = /**
         * @return {?}
         */
            function () {
                return this.processInstance && !this.processInstance.ended;
            };
        ProcessInstanceHeaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-instance-header',
                        template: "<mat-card *ngIf=\"processInstance\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\"></adf-card-view>\n    </mat-card-content>\n</mat-card>\n",
                        styles: [":host{width:100%}.adf-card-container{font-family:inherit}"]
                    }] }
        ];
        /** @nocollapse */
        ProcessInstanceHeaderComponent.ctorParameters = function () {
            return [
                { type: i1$1.TranslationService },
                { type: i1$1.AppConfigService }
            ];
        };
        ProcessInstanceHeaderComponent.propDecorators = {
            processInstance: [{ type: i0.Input }]
        };
        return ProcessInstanceHeaderComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppDefinitionRepresentationModel = /** @class */ (function () {
        function AppDefinitionRepresentationModel(obj) {
            if (obj) {
                this.defaultAppId = obj.defaultAppId ? obj.defaultAppId : null;
                this.deploymentId = obj.deploymentId ? obj.deploymentId : null;
                this.name = obj.name ? obj.name : null;
                this.description = obj.description ? obj.description : null;
                this.theme = obj.theme ? obj.theme : null;
                this.icon = obj.icon ? obj.icon : null;
                this.id = obj.id ? obj.id : null;
                this.modelId = obj.modelId ? obj.modelId : null;
                this.tenantId = obj.tenantId ? obj.tenantId : null;
            }
        }
        return AppDefinitionRepresentationModel;
    }());
    var FilterParamsModel = /** @class */ (function () {
        function FilterParamsModel(obj) {
            if (obj) {
                this.id = obj.id || null;
                this.name = obj.name || null;
                this.index = obj.index;
            }
        }
        return FilterParamsModel;
    }());
    var FilterRepresentationModel = /** @class */ (function () {
        function FilterRepresentationModel(obj) {
            if (obj) {
                this.id = obj.id || null;
                this.appId = obj.appId || null;
                this.name = obj.name || null;
                this.recent = !!obj.recent;
                this.icon = obj.icon || null;
                this.filter = new jsApi.UserTaskFilterRepresentation(obj.filter);
                this.index = obj.index;
            }
        }
        /**
         * @return {?}
         */
        FilterRepresentationModel.prototype.hasFilter = /**
         * @return {?}
         */
            function () {
                return this.filter ? true : false;
            };
        return FilterRepresentationModel;
    }());
    var TaskQueryRequestRepresentationModel = /** @class */ (function (_super) {
        __extends(TaskQueryRequestRepresentationModel, _super);
        function TaskQueryRequestRepresentationModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TaskQueryRequestRepresentationModel;
    }(jsApi.TaskQueryRepresentation));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @type {?} */
    var taskPresetsDefaultModel = {
        'default': [
            {
                'key': 'name',
                'type': 'text',
                'title': 'ADF_TASK_LIST.PROPERTIES.NAME',
                'sortable': true
            },
            {
                'key': 'created',
                'type': 'text',
                'title': 'ADF_TASK_LIST.PROPERTIES.CREATED',
                'cssClass': 'hidden',
                'sortable': true
            },
            {
                'key': 'assignee',
                'type': 'text',
                'title': 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                'cssClass': 'hidden',
                'sortable': true
            }
        ]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This object represent of the Form.
     */
    var /**
     * This object represent of the Form.
     */ Form = /** @class */ (function () {
        function Form(id, name) {
            this.name = name;
            this.id = id;
        }
        return Form;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskDetailsModel = /** @class */ (function () {
        function TaskDetailsModel(obj) {
            this.processDefinitionVersion = 0;
            if (obj) {
                this.id = obj.id || null;
                this.name = obj.name || null;
                this.priority = obj.priority;
                this.assignee = obj.assignee ? new i1$1.UserProcessModel(obj.assignee) : null;
                this.adhocTaskCanBeReassigned = obj.adhocTaskCanBeReassigned;
                this.category = obj.category || null;
                this.created = obj.created || null;
                this.description = obj.description || null;
                this.dueDate = obj.dueDate || null;
                this.duration = obj.duration || null;
                this.endDate = obj.endDate || null;
                this.executionId = obj.executionId || null;
                this.formKey = obj.formKey || null;
                this.initiatorCanCompleteTask = !!obj.initiatorCanCompleteTask;
                this.managerOfCandidateGroup = !!obj.managerOfCandidateGroup;
                this.memberOfCandidateGroup = !!obj.memberOfCandidateGroup;
                this.memberOfCandidateUsers = !!obj.memberOfCandidateUsers;
                this.involvedGroups = obj.involvedGroups;
                this.involvedPeople = obj.involvedPeople;
                this.parentTaskId = obj.parentTaskId || null;
                this.parentTaskName = obj.parentTaskName || null;
                this.processDefinitionCategory = obj.processDefinitionCategory || null;
                this.processDefinitionDeploymentId = obj.processDefinitionDeploymentId || null;
                this.processDefinitionDescription = obj.processDefinitionDescription || null;
                this.processDefinitionId = obj.processDefinitionId || null;
                this.processDefinitionKey = obj.processDefinitionKey || null;
                this.processDefinitionName = obj.processDefinitionName || null;
                this.processDefinitionVersion = obj.processDefinitionVersion || 0;
                this.processInstanceId = obj.processInstanceId || null;
                this.processInstanceName = obj.processInstanceName || null;
                this.processInstanceStartUserId = obj.processInstanceStartUserId || null;
                this.taskDefinitionKey = obj.taskDefinitionKey || null;
            }
        }
        /**
         * @return {?}
         */
        TaskDetailsModel.prototype.getFullName = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var fullName = '';
                if (this.assignee) {
                    /** @type {?} */
                    var firstName = this.assignee.firstName ? this.assignee.firstName : '';
                    /** @type {?} */
                    var lastName = this.assignee.lastName ? this.assignee.lastName : '';
                    fullName = firstName + " " + lastName;
                }
                return fullName.trim();
            };
        /**
         * @return {?}
         */
        TaskDetailsModel.prototype.isCompleted = /**
         * @return {?}
         */
            function () {
                return !!this.endDate;
            };
        return TaskDetailsModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskListModel = /** @class */ (function () {
        function TaskListModel(input) {
            this.data = [];
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        return new TaskDetailsModel(item);
                    }));
                }
            }
        }
        return TaskListModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskListService = /** @class */ (function () {
        function TaskListService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
        }
        /**
         * Gets all the filters in the list that belong to a task.
         * @param taskId ID of the target task
         * @param filterList List of filters to search through
         * @returns Filters belonging to the task
         */
        /**
         * Gets all the filters in the list that belong to a task.
         * @param {?} taskId ID of the target task
         * @param {?} filterList List of filters to search through
         * @return {?} Filters belonging to the task
         */
        TaskListService.prototype.getFilterForTaskById = /**
         * Gets all the filters in the list that belong to a task.
         * @param {?} taskId ID of the target task
         * @param {?} filterList List of filters to search through
         * @return {?} Filters belonging to the task
         */
            function (taskId, filterList) {
                var _this = this;
                return rxjs.from(filterList)
                    .pipe(operators.flatMap(( /**
             * @param {?} data
             * @return {?}
             */function (data) { return _this.isTaskRelatedToFilter(taskId, data); })), operators.filter(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) { return data != null; })));
            };
        /**
         * Gets the search query for a task based on the supplied filter.
         * @param filter The filter to use
         * @returns The search query
         */
        /**
         * Gets the search query for a task based on the supplied filter.
         * @private
         * @param {?} filterModel
         * @return {?} The search query
         */
        TaskListService.prototype.generateTaskRequestNodeFromFilter = /**
         * Gets the search query for a task based on the supplied filter.
         * @private
         * @param {?} filterModel
         * @return {?} The search query
         */
            function (filterModel) {
                /** @type {?} */
                var requestNode = {
                    appDefinitionId: filterModel.appId,
                    assignment: filterModel.filter.assignment,
                    state: filterModel.filter.state,
                    sort: filterModel.filter.sort
                };
                return new TaskQueryRequestRepresentationModel(requestNode);
            };
        /**
         * Checks if a taskId is filtered with the given filter.
         * @param taskId ID of the target task
         * @param filterModel The filter you want to check
         * @returns The filter if it is related or null otherwise
         */
        /**
         * Checks if a taskId is filtered with the given filter.
         * @param {?} taskId ID of the target task
         * @param {?} filterModel The filter you want to check
         * @return {?} The filter if it is related or null otherwise
         */
        TaskListService.prototype.isTaskRelatedToFilter = /**
         * Checks if a taskId is filtered with the given filter.
         * @param {?} taskId ID of the target task
         * @param {?} filterModel The filter you want to check
         * @return {?} The filter if it is related or null otherwise
         */
            function (taskId, filterModel) {
                var _this = this;
                /** @type {?} */
                var requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);
                return rxjs.from(this.callApiTasksFiltered(requestNodeForFilter))
                    .pipe(operators.map(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    return res.data.find(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) { return element.id === taskId; })) ? filterModel : null;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets all the tasks matching the supplied query.
         * @param requestNode Query to search for tasks
         * @returns List of tasks
         */
        /**
         * Gets all the tasks matching the supplied query.
         * @param {?} requestNode Query to search for tasks
         * @return {?} List of tasks
         */
        TaskListService.prototype.getTasks = /**
         * Gets all the tasks matching the supplied query.
         * @param {?} requestNode Query to search for tasks
         * @return {?} List of tasks
         */
            function (requestNode) {
                var _this = this;
                return rxjs.from(this.callApiTasksFiltered(requestNode))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets tasks matching a query and state value.
         * @param requestNode Query to search for tasks
         * @param state Task state. Can be "open" or "completed".
         * @returns List of tasks
         */
        /**
         * Gets tasks matching a query and state value.
         * @param {?} requestNode Query to search for tasks
         * @param {?=} state Task state. Can be "open" or "completed".
         * @return {?} List of tasks
         */
        TaskListService.prototype.findTasksByState = /**
         * Gets tasks matching a query and state value.
         * @param {?} requestNode Query to search for tasks
         * @param {?=} state Task state. Can be "open" or "completed".
         * @return {?} List of tasks
         */
            function (requestNode, state) {
                if (state) {
                    requestNode.state = state;
                }
                return this.getTasks(requestNode)
                    .pipe(operators.catchError(( /**
             * @return {?}
             */function () { return rxjs.of(new TaskListModel()); })));
            };
        /**
         * Gets all tasks matching a query and state value.
         * @param requestNode Query to search for tasks.
         * @param state Task state. Can be "open" or "completed".
         * @returns List of tasks
         */
        /**
         * Gets all tasks matching a query and state value.
         * @param {?} requestNode Query to search for tasks.
         * @param {?=} state Task state. Can be "open" or "completed".
         * @return {?} List of tasks
         */
        TaskListService.prototype.findAllTaskByState = /**
         * Gets all tasks matching a query and state value.
         * @param {?} requestNode Query to search for tasks.
         * @param {?=} state Task state. Can be "open" or "completed".
         * @return {?} List of tasks
         */
            function (requestNode, state) {
                var _this = this;
                if (state) {
                    requestNode.state = state;
                }
                return this.getTotalTasks(requestNode)
                    .pipe(operators.switchMap(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    requestNode.size = res.total;
                    return _this.getTasks(requestNode);
                })));
            };
        /**
         * Gets all tasks matching the supplied query but ignoring the task state.
         * @param requestNode Query to search for tasks
         * @returns List of tasks
         */
        /**
         * Gets all tasks matching the supplied query but ignoring the task state.
         * @param {?} requestNode Query to search for tasks
         * @return {?} List of tasks
         */
        TaskListService.prototype.findAllTasksWithoutState = /**
         * Gets all tasks matching the supplied query but ignoring the task state.
         * @param {?} requestNode Query to search for tasks
         * @return {?} List of tasks
         */
            function (requestNode) {
                return rxjs.forkJoin(this.findTasksByState(requestNode, 'open'), this.findAllTaskByState(requestNode, 'completed'), ( /**
                 * @param {?} activeTasks
                 * @param {?} completedTasks
                 * @return {?}
                 */function (activeTasks, completedTasks) {
                    /** @type {?} */
                    var tasks = Object.assign({}, activeTasks);
                    tasks.total += completedTasks.total;
                    tasks.data = tasks.data.concat(completedTasks.data);
                    return tasks;
                }));
            };
        /**
         * Gets details for a task.
         * @param taskId ID of the target task.
         * @returns Task details
         */
        /**
         * Gets details for a task.
         * @param {?} taskId ID of the target task.
         * @return {?} Task details
         */
        TaskListService.prototype.getTaskDetails = /**
         * Gets details for a task.
         * @param {?} taskId ID of the target task.
         * @return {?} Task details
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.callApiTaskDetails(taskId))
                    .pipe(operators.map(( /**
             * @param {?} details
             * @return {?}
             */function (details) {
                    return new TaskDetailsModel(details);
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets the checklist for a task.
         * @param id ID of the target task
         * @returns Array of checklist task details
         */
        /**
         * Gets the checklist for a task.
         * @param {?} id ID of the target task
         * @return {?} Array of checklist task details
         */
        TaskListService.prototype.getTaskChecklist = /**
         * Gets the checklist for a task.
         * @param {?} id ID of the target task
         * @return {?} Array of checklist task details
         */
            function (id) {
                var _this = this;
                return rxjs.from(this.callApiTaskChecklist(id))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    /** @type {?} */
                    var checklists = [];
                    response.data.forEach(( /**
                     * @param {?} checklist
                     * @return {?}
                     */function (checklist) {
                        checklists.push(new TaskDetailsModel(checklist));
                    }));
                    return checklists;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets all available reusable forms.
         * @returns Array of form details
         */
        /**
         * Gets all available reusable forms.
         * @return {?} Array of form details
         */
        TaskListService.prototype.getFormList = /**
         * Gets all available reusable forms.
         * @return {?} Array of form details
         */
            function () {
                var _this = this;
                /** @type {?} */
                var opts = {
                    'filter': 'myReusableForms',
                    // String | filter
                    'sort': 'modifiedDesc',
                    // String | sort
                    'modelType': 2 // Integer | modelType
                };
                return rxjs.from(this.apiService.getInstance().activiti.modelsApi.getModels(opts))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    /** @type {?} */
                    var forms$$1 = [];
                    response.data.forEach(( /**
                     * @param {?} form
                     * @return {?}
                     */function (form) {
                        forms$$1.push(new Form(form.id, form.name));
                    }));
                    return forms$$1;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Attaches a form to a task.
         * @param taskId ID of the target task
         * @param formId ID of the form to add
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Attaches a form to a task.
         * @param {?} taskId ID of the target task
         * @param {?} formId ID of the form to add
         * @return {?} Null response notifying when the operation is complete
         */
        TaskListService.prototype.attachFormToATask = /**
         * Attaches a form to a task.
         * @param {?} taskId ID of the target task
         * @param {?} formId ID of the form to add
         * @return {?} Null response notifying when the operation is complete
         */
            function (taskId, formId) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.attachForm(taskId, { 'formId': formId }))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Adds a subtask (ie, a checklist task) to a parent task.
         * @param task The task to add
         * @returns The subtask that was added
         */
        /**
         * Adds a subtask (ie, a checklist task) to a parent task.
         * @param {?} task The task to add
         * @return {?} The subtask that was added
         */
        TaskListService.prototype.addTask = /**
         * Adds a subtask (ie, a checklist task) to a parent task.
         * @param {?} task The task to add
         * @return {?} The subtask that was added
         */
            function (task) {
                var _this = this;
                return rxjs.from(this.callApiAddTask(task))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return new TaskDetailsModel(response);
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Deletes a subtask (ie, a checklist task) from a parent task.
         * @param taskId The task to delete
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Deletes a subtask (ie, a checklist task) from a parent task.
         * @param {?} taskId The task to delete
         * @return {?} Null response notifying when the operation is complete
         */
        TaskListService.prototype.deleteTask = /**
         * Deletes a subtask (ie, a checklist task) from a parent task.
         * @param {?} taskId The task to delete
         * @return {?} Null response notifying when the operation is complete
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.callApiDeleteTask(taskId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Deletes a form from a task.
         * @param taskId Task id related to form
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Deletes a form from a task.
         * @param {?} taskId Task id related to form
         * @return {?} Null response notifying when the operation is complete
         */
        TaskListService.prototype.deleteForm = /**
         * Deletes a form from a task.
         * @param {?} taskId Task id related to form
         * @return {?} Null response notifying when the operation is complete
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.callApiDeleteForm(taskId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gives completed status to a task.
         * @param taskId ID of the target task
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Gives completed status to a task.
         * @param {?} taskId ID of the target task
         * @return {?} Null response notifying when the operation is complete
         */
        TaskListService.prototype.completeTask = /**
         * Gives completed status to a task.
         * @param {?} taskId ID of the target task
         * @return {?} Null response notifying when the operation is complete
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.completeTask(taskId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets the total number of the tasks found by a query.
         * @param requestNode Query to search for tasks
         * @returns Number of tasks
         */
        /**
         * Gets the total number of the tasks found by a query.
         * @param {?} requestNode Query to search for tasks
         * @return {?} Number of tasks
         */
        TaskListService.prototype.getTotalTasks = /**
         * Gets the total number of the tasks found by a query.
         * @param {?} requestNode Query to search for tasks
         * @return {?} Number of tasks
         */
            function (requestNode) {
                var _this = this;
                requestNode.size = 0;
                return rxjs.from(this.callApiTasksFiltered(requestNode))
                    .pipe(operators.map(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    return res;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Creates a new standalone task.
         * @param task Details of the new task
         * @returns Details of the newly created task
         */
        /**
         * Creates a new standalone task.
         * @param {?} task Details of the new task
         * @return {?} Details of the newly created task
         */
        TaskListService.prototype.createNewTask = /**
         * Creates a new standalone task.
         * @param {?} task Details of the new task
         * @return {?} Details of the newly created task
         */
            function (task) {
                var _this = this;
                return rxjs.from(this.callApiCreateTask(task))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return new TaskDetailsModel(response);
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Assigns a task to a user or group.
         * @param taskId The task to assign
         * @param requestNode User or group to assign the task to
         * @returns Details of the assigned task
         */
        /**
         * Assigns a task to a user or group.
         * @param {?} taskId The task to assign
         * @param {?} requestNode User or group to assign the task to
         * @return {?} Details of the assigned task
         */
        TaskListService.prototype.assignTask = /**
         * Assigns a task to a user or group.
         * @param {?} taskId The task to assign
         * @param {?} requestNode User or group to assign the task to
         * @return {?} Details of the assigned task
         */
            function (taskId, requestNode) {
                var _this = this;
                /** @type {?} */
                var assignee = { assignee: requestNode.id };
                return rxjs.from(this.callApiAssignTask(taskId, assignee))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return new TaskDetailsModel(response);
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Assigns a task to a user.
         * @param taskId ID of the task to assign
         * @param userId ID of the user to assign the task to
         * @returns Details of the assigned task
         */
        /**
         * Assigns a task to a user.
         * @param {?} taskId ID of the task to assign
         * @param {?} userId ID of the user to assign the task to
         * @return {?} Details of the assigned task
         */
        TaskListService.prototype.assignTaskByUserId = /**
         * Assigns a task to a user.
         * @param {?} taskId ID of the task to assign
         * @param {?} userId ID of the user to assign the task to
         * @return {?} Details of the assigned task
         */
            function (taskId, userId) {
                var _this = this;
                /** @type {?} */
                var assignee = ( /** @type {?} */({ assignee: userId }));
                return rxjs.from(this.callApiAssignTask(taskId, assignee))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return new TaskDetailsModel(response);
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Claims a task for the current user.
         * @param taskId ID of the task to claim
         * @returns Details of the claimed task
         */
        /**
         * Claims a task for the current user.
         * @param {?} taskId ID of the task to claim
         * @return {?} Details of the claimed task
         */
        TaskListService.prototype.claimTask = /**
         * Claims a task for the current user.
         * @param {?} taskId ID of the task to claim
         * @return {?} Details of the claimed task
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.claimTask(taskId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Un-claims a task for the current user.
         * @param taskId ID of the task to unclaim
         * @returns Null response notifying when the operation is complete
         */
        /**
         * Un-claims a task for the current user.
         * @param {?} taskId ID of the task to unclaim
         * @return {?} Null response notifying when the operation is complete
         */
        TaskListService.prototype.unclaimTask = /**
         * Un-claims a task for the current user.
         * @param {?} taskId ID of the task to unclaim
         * @return {?} Null response notifying when the operation is complete
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.unclaimTask(taskId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * Updates the details (name, description, due date) for a task.
         * @param taskId ID of the task to update
         * @param updated Data to update the task (as a `TaskUpdateRepresentation` instance).
         * @returns Updated task details
         */
        /**
         * Updates the details (name, description, due date) for a task.
         * @param {?} taskId ID of the task to update
         * @param {?} updated Data to update the task (as a `TaskUpdateRepresentation` instance).
         * @return {?} Updated task details
         */
        TaskListService.prototype.updateTask = /**
         * Updates the details (name, description, due date) for a task.
         * @param {?} taskId ID of the task to update
         * @param {?} updated Data to update the task (as a `TaskUpdateRepresentation` instance).
         * @return {?} Updated task details
         */
            function (taskId, updated) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.updateTask(taskId, updated))
                    .pipe(operators.map(( /**
             * @param {?} result
             * @return {?}
             */function (result) { return ( /** @type {?} */(result)); })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Fetches the Task Audit information in PDF format.
         * @param taskId ID of the target task
         * @returns Binary PDF data
         */
        /**
         * Fetches the Task Audit information in PDF format.
         * @param {?} taskId ID of the target task
         * @return {?} Binary PDF data
         */
        TaskListService.prototype.fetchTaskAuditPdfById = /**
         * Fetches the Task Audit information in PDF format.
         * @param {?} taskId ID of the target task
         * @return {?} Binary PDF data
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.getTaskAuditPdf(taskId))
                    .pipe(operators.map(( /**
             * @param {?} data
             * @return {?}
             */function (data) { return ( /** @type {?} */(data)); })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Fetch the Task Audit information in JSON format
         * @param taskId ID of the target task
         * @returns JSON data
         */
        /**
         * Fetch the Task Audit information in JSON format
         * @param {?} taskId ID of the target task
         * @return {?} JSON data
         */
        TaskListService.prototype.fetchTaskAuditJsonById = /**
         * Fetch the Task Audit information in JSON format
         * @param {?} taskId ID of the target task
         * @return {?} JSON data
         */
            function (taskId) {
                var _this = this;
                return rxjs.from(this.apiService.taskApi.getTaskAuditJson(taskId))
                    .pipe(operators.catchError(( /**
             * @param {?} err
             * @return {?}
             */function (err) { return _this.handleError(err); })));
            };
        /**
         * @private
         * @param {?} requestNode
         * @return {?}
         */
        TaskListService.prototype.callApiTasksFiltered = /**
         * @private
         * @param {?} requestNode
         * @return {?}
         */
            function (requestNode) {
                return this.apiService.taskApi.listTasks(requestNode);
            };
        /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
        TaskListService.prototype.callApiTaskDetails = /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                return this.apiService.taskApi.getTask(taskId);
            };
        /**
         * @private
         * @param {?} task
         * @return {?}
         */
        TaskListService.prototype.callApiAddTask = /**
         * @private
         * @param {?} task
         * @return {?}
         */
            function (task) {
                return this.apiService.taskApi.addSubtask(task.parentTaskId, task);
            };
        /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
        TaskListService.prototype.callApiDeleteTask = /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                return this.apiService.taskApi.deleteTask(taskId);
            };
        /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
        TaskListService.prototype.callApiDeleteForm = /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                return this.apiService.taskApi.removeForm(taskId);
            };
        /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
        TaskListService.prototype.callApiTaskChecklist = /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                return this.apiService.taskApi.getChecklist(taskId);
            };
        /**
         * @private
         * @param {?} task
         * @return {?}
         */
        TaskListService.prototype.callApiCreateTask = /**
         * @private
         * @param {?} task
         * @return {?}
         */
            function (task) {
                return this.apiService.taskApi.createNewTask(task);
            };
        /**
         * @private
         * @param {?} taskId
         * @param {?} requestNode
         * @return {?}
         */
        TaskListService.prototype.callApiAssignTask = /**
         * @private
         * @param {?} taskId
         * @param {?} requestNode
         * @return {?}
         */
            function (taskId, requestNode) {
                return this.apiService.taskApi.assignTask(taskId, requestNode);
            };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        TaskListService.prototype.handleError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.logService.error(error);
                return rxjs.throwError(error || 'Server error');
            };
        TaskListService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TaskListService.ctorParameters = function () {
            return [
                { type: i1$1.AlfrescoApiService },
                { type: i1$1.LogService }
            ];
        };
        /** @nocollapse */ TaskListService.ngInjectableDef = i0.defineInjectable({ factory: function TaskListService_Factory() { return new TaskListService(i0.inject(i1$1.AlfrescoApiService), i0.inject(i1$1.LogService)); }, token: TaskListService, providedIn: "root" });
        return TaskListService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskListComponent = /** @class */ (function (_super) {
        __extends(TaskListComponent, _super);
        function TaskListComponent(taskListService, appConfigService, userPreferences) {
            var _this = _super.call(this, appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel) || this;
            _this.taskListService = taskListService;
            _this.userPreferences = userPreferences;
            /**
             * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
             * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
             * multiple rows.
             */
            _this.selectionMode = 'single'; // none|single|multiple
            // none|single|multiple
            /**
             * Toggles multiple row selection, renders checkboxes at the beginning of each row
             */
            _this.multiselect = false;
            /**
             * Toggles default selection of the first row
             */
            _this.selectFirstRow = true;
            /**
             * Emitted when a task in the list is clicked
             */
            _this.rowClick = new i0.EventEmitter();
            /**
             * Emitted when rows are selected/unselected
             */
            _this.rowsSelected = new i0.EventEmitter();
            /**
             * Emitted when the task list is loaded
             */
            _this.success = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            _this.error = new i0.EventEmitter();
            /**
             * The page number of the tasks to fetch.
             */
            _this.page = 0;
            /**
             * The number of tasks to fetch. Default value: 25.
             */
            _this.size = i1$1.PaginationComponent.DEFAULT_PAGINATION.maxItems;
            _this.rows = [];
            _this.isLoading = true;
            _this.sorting = ['created', 'desc'];
            /**
             * Toggles custom data source mode.
             * When enabled the component reloads data from it's current source instead of the server side.
             * This allows generating and displaying custom data sets (i.e. filtered out content).
             *
             * \@memberOf TaskListComponent
             */
            _this.hasCustomDataSource = false;
            _this.userPreferences.select(i1$1.UserPreferenceValues.PaginationSize).subscribe(( /**
             * @param {?} pageSize
             * @return {?}
             */function (pageSize) {
                _this.size = pageSize;
            }));
            _this.pagination = new rxjs.BehaviorSubject(( /** @type {?} */({
                maxItems: _this.size,
                skipCount: 0,
                totalItems: 0
            })));
            return _this;
        }
        /**
         * @return {?}
         */
        TaskListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.createDatatableSchema();
                if (this.data && this.data.getColumns().length === 0) {
                    this.data.setColumns(this.columns);
                }
                if (this.appId) {
                    this.reload();
                }
            };
        /**
         * @param {?} rows
         * @return {?}
         */
        TaskListComponent.prototype.setCustomDataSource = /**
         * @param {?} rows
         * @return {?}
         */
            function (rows) {
                if (rows) {
                    this.rows = rows;
                    this.hasCustomDataSource = true;
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TaskListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.isPropertyChanged(changes)) {
                    if (this.isSortChanged(changes)) {
                        this.sorting = this.sort ? this.sort.split('-') : this.sorting;
                    }
                    this.reload();
                }
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        TaskListComponent.prototype.isSortChanged = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var actualSort = changes['sort'];
                return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        TaskListComponent.prototype.isPropertyChanged = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var changed = true;
                /** @type {?} */
                var landingTaskId = changes['landingTaskId'];
                /** @type {?} */
                var page = changes['page'];
                /** @type {?} */
                var size = changes['size'];
                if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {
                    changed = false;
                }
                else if (page && page.currentValue !== page.previousValue) {
                    changed = true;
                }
                else if (size && size.currentValue !== size.previousValue) {
                    changed = true;
                }
                return changed;
            };
        /**
         * @return {?}
         */
        TaskListComponent.prototype.reload = /**
         * @return {?}
         */
            function () {
                if (!this.hasCustomDataSource) {
                    this.requestNode = this.createRequestNode();
                    this.load(this.requestNode);
                }
                else {
                    this.isLoading = false;
                }
            };
        /**
         * @private
         * @param {?} requestNode
         * @return {?}
         */
        TaskListComponent.prototype.load = /**
         * @private
         * @param {?} requestNode
         * @return {?}
         */
            function (requestNode) {
                var _this = this;
                this.isLoading = true;
                this.loadTasksByState().subscribe(( /**
                 * @param {?} tasks
                 * @return {?}
                 */function (tasks) {
                    _this.rows = _this.optimizeTaskDetails(tasks.data);
                    _this.selectTask(_this.landingTaskId);
                    _this.success.emit(tasks);
                    _this.isLoading = false;
                    _this.pagination.next({
                        count: tasks.data.length,
                        maxItems: _this.size,
                        skipCount: _this.page * _this.size,
                        totalItems: tasks.total
                    });
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.error.emit(error);
                    _this.isLoading = false;
                }));
            };
        /**
         * @private
         * @return {?}
         */
        TaskListComponent.prototype.loadTasksByState = /**
         * @private
         * @return {?}
         */
            function () {
                return this.requestNode.state === 'all'
                    ? this.taskListService.findAllTasksWithoutState(this.requestNode)
                    : this.taskListService.findTasksByState(this.requestNode);
            };
        /**
         * Select the task given in input if present
         */
        /**
         * Select the task given in input if present
         * @param {?} taskIdSelected
         * @return {?}
         */
        TaskListComponent.prototype.selectTask = /**
         * Select the task given in input if present
         * @param {?} taskIdSelected
         * @return {?}
         */
            function (taskIdSelected) {
                if (!this.isListEmpty()) {
                    /** @type {?} */
                    var dataRow = null;
                    if (taskIdSelected) {
                        dataRow = this.rows.find(( /**
                         * @param {?} currentRow
                         * @return {?}
                         */function (currentRow) {
                            return currentRow['id'] === taskIdSelected;
                        }));
                    }
                    if (!dataRow && this.selectFirstRow) {
                        dataRow = this.rows[0];
                    }
                    if (dataRow) {
                        dataRow.isSelected = true;
                        this.currentInstanceId = dataRow['id'];
                    }
                }
                else {
                    this.currentInstanceId = null;
                }
            };
        /**
         * Return the current id
         */
        /**
         * Return the current id
         * @return {?}
         */
        TaskListComponent.prototype.getCurrentId = /**
         * Return the current id
         * @return {?}
         */
            function () {
                return this.currentInstanceId;
            };
        /**
         * Check if the taskId is the same of the selected task
         * @param taskId
         */
        /**
         * Check if the taskId is the same of the selected task
         * @param {?} taskId
         * @return {?}
         */
        TaskListComponent.prototype.isEqualToCurrentId = /**
         * Check if the taskId is the same of the selected task
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                return this.currentInstanceId === taskId;
            };
        /**
         * Check if the list is empty
         */
        /**
         * Check if the list is empty
         * @return {?}
         */
        TaskListComponent.prototype.isListEmpty = /**
         * Check if the list is empty
         * @return {?}
         */
            function () {
                return !this.rows || this.rows.length === 0;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        TaskListComponent.prototype.onRowClick = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.currentInstanceId = item.value.getValue('id');
                this.rowClick.emit(this.currentInstanceId);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskListComponent.prototype.onRowSelect = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.selectedInstances = __spread(event.detail.selection);
                this.rowsSelected.emit(this.selectedInstances);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskListComponent.prototype.onRowUnselect = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.selectedInstances = __spread(event.detail.selection);
                this.rowsSelected.emit(this.selectedInstances);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskListComponent.prototype.onRowKeyUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.detail.keyboardEvent.key === 'Enter') {
                    event.preventDefault();
                    this.currentInstanceId = event.detail.row.getValue('id');
                    this.rowClick.emit(this.currentInstanceId);
                }
            };
        /**
         * Optimize name field
         * @param instances
         */
        /**
         * Optimize name field
         * @private
         * @param {?} instances
         * @return {?}
         */
        TaskListComponent.prototype.optimizeTaskDetails = /**
         * Optimize name field
         * @private
         * @param {?} instances
         * @return {?}
         */
            function (instances) {
                instances = instances.map(( /**
                 * @param {?} task
                 * @return {?}
                 */function (task) {
                    if (!task.name) {
                        task.name = 'No name';
                    }
                    return task;
                }));
                return instances;
            };
        /**
         * @private
         * @return {?}
         */
        TaskListComponent.prototype.createRequestNode = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var requestNode = {
                    appDefinitionId: this.appId,
                    dueAfter: this.dueAfter ? moment$1(this.dueAfter).toDate() : null,
                    dueBefore: this.dueBefore ? moment$1(this.dueBefore).toDate() : null,
                    processInstanceId: this.processInstanceId,
                    processDefinitionId: this.processDefinitionId,
                    text: this.name,
                    assignment: this.assignment,
                    state: this.state,
                    sort: this.sort,
                    page: this.page,
                    size: this.size,
                    start: this.start,
                    taskId: this.taskId,
                    includeProcessInstance: this.includeProcessInstance
                };
                return new TaskQueryRequestRepresentationModel(requestNode);
            };
        /**
         * @param {?} params
         * @return {?}
         */
        TaskListComponent.prototype.updatePagination = /**
         * @param {?} params
         * @return {?}
         */
            function (params) {
                /** @type {?} */
                var needsReload = params.maxItems || params.skipCount;
                this.size = params.maxItems;
                this.page = this.currentPage(params.skipCount, params.maxItems);
                if (needsReload) {
                    this.reload();
                }
            };
        /**
         * @param {?} skipCount
         * @param {?} maxItems
         * @return {?}
         */
        TaskListComponent.prototype.currentPage = /**
         * @param {?} skipCount
         * @param {?} maxItems
         * @return {?}
         */
            function (skipCount, maxItems) {
                return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
            };
        TaskListComponent.PRESET_KEY = 'adf-task-list.presets';
        TaskListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-tasklist',
                        template: "<div *ngIf=\"!requestNode\">{{ 'ADF_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"requestNode\">\n        <adf-datatable\n            [data]=\"data\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [sorting]=\"sorting\"\n            [loading]=\"isLoading\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            (row-select)=\"onRowSelect($event)\"\n            (row-unselect)=\"onRowUnselect($event)\"\n            (rowClick)=\"onRowClick($event)\"\n            (row-keyup)=\"onRowKeyUp($event)\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!--Add your custom loading template here-->\n                    <mat-progress-spinner\n                        *ngIf=\"!customLoadingContent\"\n                        class=\"adf-task-list-loading-margin\"\n                        [color]=\"'primary'\"\n                        [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                    <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!customEmptyContent\"\n                        icon=\"assignment\"\n                        [title]=\"'ADF_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                        [subtitle]=\"'ADF_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                        styles: [".adf-task-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}"]
                    }] }
        ];
        /** @nocollapse */
        TaskListComponent.ctorParameters = function () {
            return [
                { type: TaskListService },
                { type: i1$1.AppConfigService },
                { type: i1$1.UserPreferencesService }
            ];
        };
        TaskListComponent.propDecorators = {
            customEmptyContent: [{ type: i0.ContentChild, args: [i1$1.CustomEmptyContentTemplateDirective,] }],
            customLoadingContent: [{ type: i0.ContentChild, args: [i1$1.CustomLoadingContentTemplateDirective,] }],
            appId: [{ type: i0.Input }],
            processInstanceId: [{ type: i0.Input }],
            processDefinitionId: [{ type: i0.Input }],
            state: [{ type: i0.Input }],
            assignment: [{ type: i0.Input }],
            sort: [{ type: i0.Input }],
            name: [{ type: i0.Input }],
            landingTaskId: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            selectionMode: [{ type: i0.Input }],
            multiselect: [{ type: i0.Input }],
            selectFirstRow: [{ type: i0.Input }],
            taskId: [{ type: i0.Input }],
            includeProcessInstance: [{ type: i0.Input }],
            start: [{ type: i0.Input }],
            rowClick: [{ type: i0.Output }],
            rowsSelected: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            page: [{ type: i0.Input }],
            size: [{ type: i0.Input }],
            dueAfter: [{ type: i0.Input }],
            dueBefore: [{ type: i0.Input }]
        };
        return TaskListComponent;
    }(i1$1.DataTableSchema));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChecklistComponent = /** @class */ (function () {
        /**
         * Constructor
         * @param auth
         * @param translate
         */
        function ChecklistComponent(activitiTaskList, dialog) {
            this.activitiTaskList = activitiTaskList;
            this.dialog = dialog;
            /**
             * Toggle readonly state of the form. All form widgets
             * will render as readonly if enabled.
             */
            this.readOnly = false;
            /**
             * Emitted when a new checklist task is created.
             */
            this.checklistTaskCreated = new i0.EventEmitter();
            /**
             * Emitted when a checklist task is deleted.
             */
            this.checklistTaskDeleted = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.checklist = [];
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ChecklistComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var taskId = changes['taskId'];
                if (taskId && taskId.currentValue) {
                    this.getTaskChecklist(taskId.currentValue);
                    return;
                }
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        ChecklistComponent.prototype.getTaskChecklist = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                this.checklist = [];
                if (this.taskId) {
                    this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(( /**
                     * @param {?} taskDetailsModel
                     * @return {?}
                     */function (taskDetailsModel) {
                        taskDetailsModel.forEach(( /**
                         * @param {?} task
                         * @return {?}
                         */function (task) {
                            _this.checklist.push(task);
                        }));
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.error.emit(error);
                    }));
                }
                else {
                    this.checklist = [];
                }
            };
        /**
         * @return {?}
         */
        ChecklistComponent.prototype.showDialog = /**
         * @return {?}
         */
            function () {
                this.dialog.open(this.addNewDialog, { width: '350px' });
            };
        /**
         * @return {?}
         */
        ChecklistComponent.prototype.add = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var newTask = new TaskDetailsModel({
                    name: this.taskName,
                    parentTaskId: this.taskId,
                    assignee: { id: this.assignee }
                });
                this.activitiTaskList.addTask(newTask).subscribe(( /**
                 * @param {?} taskDetailsModel
                 * @return {?}
                 */function (taskDetailsModel) {
                    _this.checklist.push(taskDetailsModel);
                    _this.checklistTaskCreated.emit(taskDetailsModel);
                    _this.taskName = '';
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.error.emit(error);
                }));
                this.cancel();
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        ChecklistComponent.prototype.delete = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                this.activitiTaskList.deleteTask(taskId).subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.checklist = _this.checklist.filter(( /**
                     * @param {?} check
                     * @return {?}
                     */function (check) { return check.id !== taskId; }));
                    _this.checklistTaskDeleted.emit(taskId);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.error.emit(error);
                }));
            };
        /**
         * @return {?}
         */
        ChecklistComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.dialog.closeAll();
                this.taskName = '';
            };
        ChecklistComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-checklist',
                        template: "<div class=\"adf-checklist-control\">\n    <mat-chip-list data-automation-id=\"checklist-label\">\n        <span class=\"adf-activiti-label\">{{ 'ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST' | translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{checklist?.length}}</mat-chip>\n    </mat-chip-list>\n\n\n    <button mat-icon-button *ngIf=\"!readOnly\" matTooltip=\"Add a checklist\" [matTooltipPosition]=\"'before'\"\n            id=\"add-checklist\" class=\"adf-add-to-checklist-button\" (click)=\"showDialog()\">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n\n<div class=\"adf-checklist-menu-container\" *ngIf=\"checklist?.length > 0\">\n    <mat-chip-list class=\"mat-chip-list-stacked\">\n        <mat-chip id=\"check-{{check.id}}\" class=\"adf-checklist-chip\" *ngFor=\"let check of checklist\"\n                  (removed)=\"delete(check.id)\">\n            <span>{{check.name}}</span>\n            <mat-icon *ngIf=\"!readOnly && !check.endDate\" id=\"remove-{{check.id}}\" matChipRemove>cancel\n            </mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n</div>\n<div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\" class=\"adf-checklist-none-message\">\n    {{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.NONE' | translate }}\n</div>\n\n<ng-template #dialog>\n    <div class=\"adf-checklist-dialog\" id=\"checklist-dialog\">\n        <h4 matDialogTitle id=\"add-checklist-title\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.TITLE' | translate }}</h4>\n        <mat-dialog-content>\n            <mat-form-field>\n                <input matInput placeholder=\"{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.PLACEHOLDER' | translate }}\" [(ngModel)]=\"taskName\" id=\"checklist-name\"\n                       data-automation-id=\"checklist-name\">\n            </mat-form-field>\n        </mat-dialog-content>\n        <mat-dialog-actions class=\"adf-checklist-dialog-actions\">\n            <button mat-button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.CANCEL-BUTTON' | translate | uppercase }}</button>\n            <button mat-button type=\"button\" id=\"add-check\" (click)=\"add()\">{{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.ADD-BUTTON' | translate | uppercase  }}</button>\n        </mat-dialog-actions>\n    </div>\n</ng-template>\n",
                        styles: [":host{width:100%}.adf-activiti-label{font-weight:bolder}.mat-form-field{width:100%}.adf-checklist-cancel-button{margin-top:-13px;margin-right:-13px;float:right}.adf-checklist-chip{outline:0}.adf-checklist-menu-container,.adf-checklist-none-message{margin-top:10px}.adf-checklist-control{display:flex;justify-content:space-between}.adf-checklist-control .adfactiviti-label{margin-top:6px;margin-right:10px}.adf-checklist-control .adf-add-to-checklist-button{float:right}.adf-checklist-dialog-actions{display:flex;justify-content:flex-end}"]
                    }] }
        ];
        /** @nocollapse */
        ChecklistComponent.ctorParameters = function () {
            return [
                { type: TaskListService },
                { type: material.MatDialog }
            ];
        };
        ChecklistComponent.propDecorators = {
            taskId: [{ type: i0.Input }],
            readOnly: [{ type: i0.Input }],
            assignee: [{ type: i0.Input }],
            checklistTaskCreated: [{ type: i0.Output }],
            checklistTaskDeleted: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            addNewDialog: [{ type: i0.ViewChild, args: ['dialog',] }]
        };
        return ChecklistComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDescriptionValidator = /** @class */ (function () {
        function TaskDescriptionValidator() {
            this.message = 'ADF_CLOUD_TASK_HEADER.FORM_VALIDATION.INVALID_FIELD';
        }
        /**
         * @param {?} value
         * @return {?}
         */
        TaskDescriptionValidator.prototype.isValid = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var isWhitespace = (value || '').trim().length === 0;
                return value.length === 0 || !isWhitespace;
            };
        return TaskDescriptionValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskHeaderComponent = /** @class */ (function () {
        function TaskHeaderComponent(activitiTaskService, bpmUserService, translationService, logService, appConfig) {
            this.activitiTaskService = activitiTaskService;
            this.bpmUserService = bpmUserService;
            this.translationService = translationService;
            this.logService = logService;
            this.appConfig = appConfig;
            /**
             * The name of the form.
             */
            this.formName = null;
            /**
             * Emitted when the task is claimed.
             */
            this.claim = new i0.EventEmitter();
            /**
             * Emitted when the task is unclaimed (ie, requeued).
             */
            this.unclaim = new i0.EventEmitter();
            this.inEdit = false;
        }
        /**
         * @return {?}
         */
        TaskHeaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.loadCurrentBpmUserId();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TaskHeaderComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.refreshData();
            };
        /**
         * @private
         * @param {?} parentInfoMap
         * @return {?}
         */
        TaskHeaderComponent.prototype.initDefaultProperties = /**
         * @private
         * @param {?} parentInfoMap
         * @return {?}
         */
            function (parentInfoMap) {
                return [
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                        value: this.taskDetails.getFullName(),
                        key: 'assignee',
                        default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),
                        clickable: !this.isCompleted(),
                        icon: 'create'
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.STATUS',
                        value: this.getTaskStatus(),
                        key: 'status'
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',
                        value: this.taskDetails.priority,
                        key: 'priority',
                        editable: true
                    }),
                    new i1$1.CardViewDateItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',
                        value: this.taskDetails.dueDate,
                        key: 'dueDate',
                        default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),
                        editable: true
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',
                        value: this.taskDetails.category,
                        key: 'category',
                        default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')
                    }),
                    new i1$1.CardViewMapItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',
                        value: parentInfoMap,
                        key: 'parentName',
                        default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),
                        clickable: true
                    }),
                    new i1$1.CardViewDateItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.CREATED',
                        value: this.taskDetails.created,
                        key: 'created'
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.DURATION',
                        value: this.getTaskDuration(),
                        key: 'duration'
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',
                        value: this.taskDetails.parentTaskId,
                        key: 'parentTaskId'
                    }),
                    new i1$1.CardViewDateItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',
                        value: this.taskDetails.endDate,
                        key: 'endDate'
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.ID',
                        value: this.taskDetails.id,
                        key: 'id'
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',
                        value: this.taskDetails.description,
                        key: 'description',
                        default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),
                        multiline: true,
                        editable: true,
                        validators: [new TaskDescriptionValidator()]
                    }),
                    new i1$1.CardViewTextItemModel({
                        label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                        value: this.formName,
                        key: 'formName',
                        default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                        clickable: !!this.formName,
                        icon: 'create'
                    })
                ];
            };
        /**
         * Refresh the card data
         */
        /**
         * Refresh the card data
         * @return {?}
         */
        TaskHeaderComponent.prototype.refreshData = /**
         * Refresh the card data
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.taskDetails) {
                    /** @type {?} */
                    var parentInfoMap = this.getParentInfo();
                    /** @type {?} */
                    var defaultProperties = this.initDefaultProperties(parentInfoMap);
                    /** @type {?} */
                    var filteredProperties_1 = this.appConfig.get('adf-task-header.presets.properties');
                    this.properties = defaultProperties.filter(( /**
                     * @param {?} cardItem
                     * @return {?}
                     */function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); }));
                }
            };
        /**
         * @private
         * @param {?} filteredProperties
         * @param {?} cardItem
         * @return {?}
         */
        TaskHeaderComponent.prototype.isValidSelection = /**
         * @private
         * @param {?} filteredProperties
         * @param {?} cardItem
         * @return {?}
         */
            function (filteredProperties, cardItem) {
                return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
            };
        /**
         * Loads current bpm userId
         */
        /**
         * Loads current bpm userId
         * @private
         * @return {?}
         */
        TaskHeaderComponent.prototype.loadCurrentBpmUserId = /**
         * Loads current bpm userId
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.bpmUserService.getCurrentUserInfo().subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.currentUserId = res ? +res.id : null;
                }));
            };
        /**
         * Return the process parent information
         */
        /**
         * Return the process parent information
         * @return {?}
         */
        TaskHeaderComponent.prototype.getParentInfo = /**
         * Return the process parent information
         * @return {?}
         */
            function () {
                if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {
                    return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);
                }
            };
        /**
         * Does the task have an assignee
         */
        /**
         * Does the task have an assignee
         * @return {?}
         */
        TaskHeaderComponent.prototype.hasAssignee = /**
         * Does the task have an assignee
         * @return {?}
         */
            function () {
                return !!this.taskDetails.assignee ? true : false;
            };
        /**
         * Returns true if the task is assigned to logged in user
         */
        /**
         * Returns true if the task is assigned to logged in user
         * @param {?} userId
         * @return {?}
         */
        TaskHeaderComponent.prototype.isAssignedTo = /**
         * Returns true if the task is assigned to logged in user
         * @param {?} userId
         * @return {?}
         */
            function (userId) {
                return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;
            };
        /**
         * Return true if the task assigned
         */
        /**
         * Return true if the task assigned
         * @return {?}
         */
        TaskHeaderComponent.prototype.isAssignedToCurrentUser = /**
         * Return true if the task assigned
         * @return {?}
         */
            function () {
                return this.hasAssignee() && this.isAssignedTo(this.currentUserId);
            };
        /**
         * Return true if the user is a candidate member
         */
        /**
         * Return true if the user is a candidate member
         * @return {?}
         */
        TaskHeaderComponent.prototype.isCandidateMember = /**
         * Return true if the user is a candidate member
         * @return {?}
         */
            function () {
                return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
            };
        /**
         * Return true if the task claimable
         */
        /**
         * Return true if the task claimable
         * @return {?}
         */
        TaskHeaderComponent.prototype.isTaskClaimable = /**
         * Return true if the task claimable
         * @return {?}
         */
            function () {
                return !this.hasAssignee() && this.isCandidateMember();
            };
        /**
         * Return true if the task claimed by candidate member.
         */
        /**
         * Return true if the task claimed by candidate member.
         * @return {?}
         */
        TaskHeaderComponent.prototype.isTaskClaimedByCandidateMember = /**
         * Return true if the task claimed by candidate member.
         * @return {?}
         */
            function () {
                return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();
            };
        /**
         * Returns task's status
         */
        /**
         * Returns task's status
         * @return {?}
         */
        TaskHeaderComponent.prototype.getTaskStatus = /**
         * Returns task's status
         * @return {?}
         */
            function () {
                return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';
            };
        /**
         * Claim task
         *
         * @param taskId
         */
        /**
         * Claim task
         *
         * @param {?} taskId
         * @return {?}
         */
        TaskHeaderComponent.prototype.claimTask = /**
         * Claim task
         *
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                this.activitiTaskService.claimTask(taskId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.logService.info('Task claimed');
                    _this.claim.emit(taskId);
                }));
            };
        /**
         * Unclaim task
         *
         * @param taskId
         */
        /**
         * Unclaim task
         *
         * @param {?} taskId
         * @return {?}
         */
        TaskHeaderComponent.prototype.unclaimTask = /**
         * Unclaim task
         *
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                this.activitiTaskService.unclaimTask(taskId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.logService.info('Task unclaimed');
                    _this.unclaim.emit(taskId);
                }));
            };
        /**
         * Returns true if the task is completed
         */
        /**
         * Returns true if the task is completed
         * @return {?}
         */
        TaskHeaderComponent.prototype.isCompleted = /**
         * Returns true if the task is completed
         * @return {?}
         */
            function () {
                return this.taskDetails && !!this.taskDetails.endDate;
            };
        /**
         * @return {?}
         */
        TaskHeaderComponent.prototype.getTaskDuration = /**
         * @return {?}
         */
            function () {
                return this.taskDetails.duration ? this.taskDetails.duration + " ms" : '';
            };
        TaskHeaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-task-header',
                        template: "<mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-controls\">\n        <button *ngIf=\"isTaskClaimedByCandidateMember()\" mat-button data-automation-id=\"header-unclaim-button\" id=\"unclaim-task\" (click)=\"unclaimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n        </button>\n        <button *ngIf=\"isTaskClaimable()\" mat-button data-automation-id=\"header-claim-button\" id=\"claim-task\" (click)=\"claimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        TaskHeaderComponent.ctorParameters = function () {
            return [
                { type: TaskListService },
                { type: i1$1.BpmUserService },
                { type: i1$1.TranslationService },
                { type: i1$1.LogService },
                { type: i1$1.AppConfigService }
            ];
        };
        TaskHeaderComponent.propDecorators = {
            formName: [{ type: i0.Input }],
            taskDetails: [{ type: i0.Input }],
            claim: [{ type: i0.Output }],
            unclaim: [{ type: i0.Output }]
        };
        return TaskHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskDetailsComponent = /** @class */ (function () {
        function TaskDetailsComponent(taskListService, authService, peopleProcessService, logService, cardViewUpdateService, dialog) {
            var _this = this;
            this.taskListService = taskListService;
            this.authService = authService;
            this.peopleProcessService = peopleProcessService;
            this.logService = logService;
            this.cardViewUpdateService = cardViewUpdateService;
            this.dialog = dialog;
            /**
             * Toggles debug mode.
             */
            this.debugMode = false;
            /**
             * Automatically renders the next task when the current one is completed.
             */
            this.showNextTask = true;
            /**
             * Toggles task details Header component.
             */
            this.showHeader = true;
            /**
             * Toggles collapsed/expanded state of the Header component.
             */
            this.showHeaderContent = true;
            /**
             * Toggles `Involve People` feature for the Header component.
             */
            this.showInvolvePeople = true;
            /**
             * Toggles `Comments` feature for the Header component.
             */
            this.showComments = true;
            /**
             * Toggles `Checklist` feature for the Header component.
             */
            this.showChecklist = true;
            /**
             * Toggles rendering of the form title.
             */
            this.showFormTitle = false;
            /**
             * Toggles rendering of the `Complete` outcome button.
             */
            this.showFormCompleteButton = true;
            /**
             * Toggles rendering of the `Save` outcome button.
             */
            this.showFormSaveButton = true;
            /**
             * Toggles read-only state of the form. All form widgets render as read-only
             * if enabled.
             */
            this.readOnlyForm = false;
            /**
             * Toggles rendering of the `Refresh` button.
             */
            this.showFormRefreshButton = true;
            /**
             * Field validators for use with the form.
             */
            this.fieldValidators = [];
            /**
             * Emitted when the form is submitted with the `Save` or custom outcomes.
             */
            this.formSaved = new i0.EventEmitter();
            /**
             * Emitted when the form is submitted with the `Complete` outcome.
             */
            this.formCompleted = new i0.EventEmitter();
            /**
             * Emitted when the form field content is clicked.
             */
            this.formContentClicked = new i0.EventEmitter();
            /**
             * Emitted when the form is loaded or reloaded.
             */
            this.formLoaded = new i0.EventEmitter();
            /**
             * Emitted when a checklist task is created.
             */
            this.taskCreated = new i0.EventEmitter();
            /**
             * Emitted when a checklist task is deleted.
             */
            this.taskDeleted = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            /**
             * Emitted when any outcome is executed. Default behaviour can be prevented
             * via `event.preventDefault()`.
             */
            this.executeOutcome = new i0.EventEmitter();
            /**
             * Emitted when a task is assigned.
             */
            this.assignTask = new i0.EventEmitter();
            /**
             * Emitted when a task is claimed.
             */
            this.claimedTask = new i0.EventEmitter();
            /**
             * Emitted when a task is unclaimed.
             */
            this.unClaimedTask = new i0.EventEmitter();
            this.taskFormName = null;
            this.taskPeople = [];
            this.showAssignee = false;
            this.showAttachForm = false;
            this.internalReadOnlyForm = false;
            this.peopleSearch = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) { return _this.peopleSearchObserver = observer; }))
                .pipe(operators.share());
            this.authService.getBpmLoggedUser().subscribe(( /**
             * @param {?} user
             * @return {?}
             */function (user) {
                _this.currentLoggedUser = user;
            }));
        }
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.taskId) {
                    this.loadDetails(this.taskId);
                }
                this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));
                this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TaskDetailsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var taskId = changes.taskId;
                this.showAssignee = false;
                if (taskId && !taskId.currentValue) {
                    this.reset();
                }
                else if (taskId && taskId.currentValue) {
                    this.loadDetails(taskId.currentValue);
                }
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isStandaloneTask = /**
         * @return {?}
         */
            function () {
                return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isStandaloneTaskWithForm = /**
         * @return {?}
         */
            function () {
                return this.isStandaloneTask() && this.hasFormKey();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isStandaloneTaskWithoutForm = /**
         * @return {?}
         */
            function () {
                return this.isStandaloneTask() && !this.hasFormKey();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isFormComponentVisible = /**
         * @return {?}
         */
            function () {
                return this.hasFormKey() && !this.isShowAttachForm();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isTaskStandaloneComponentVisible = /**
         * @return {?}
         */
            function () {
                return this.isStandaloneTaskWithoutForm() && !this.isShowAttachForm();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isShowAttachForm = /**
         * @return {?}
         */
            function () {
                return this.showAttachForm;
            };
        /**
         * Reset the task details
         */
        /**
         * Reset the task details
         * @private
         * @return {?}
         */
        TaskDetailsComponent.prototype.reset = /**
         * Reset the task details
         * @private
         * @return {?}
         */
            function () {
                this.taskDetails = null;
            };
        /**
         * Check if the task has a form
         */
        /**
         * Check if the task has a form
         * @return {?}
         */
        TaskDetailsComponent.prototype.hasFormKey = /**
         * Check if the task has a form
         * @return {?}
         */
            function () {
                return (this.taskDetails && (!!this.taskDetails.formKey));
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isTaskActive = /**
         * @return {?}
         */
            function () {
                return this.taskDetails && this.taskDetails.duration === null;
            };
        /**
         * Save a task detail and update it after a successful response
         *
         * @param updateNotification
         */
        /**
         * Save a task detail and update it after a successful response
         *
         * @private
         * @param {?} updateNotification
         * @return {?}
         */
        TaskDetailsComponent.prototype.updateTaskDetails = /**
         * Save a task detail and update it after a successful response
         *
         * @private
         * @param {?} updateNotification
         * @return {?}
         */
            function (updateNotification) {
                var _this = this;
                this.taskListService.updateTask(this.taskId, updateNotification.changed)
                    .subscribe(( /**
             * @return {?}
             */function () {
                    _this.loadDetails(_this.taskId);
                }));
            };
        /**
         * @private
         * @param {?} clickNotification
         * @return {?}
         */
        TaskDetailsComponent.prototype.clickTaskDetails = /**
         * @private
         * @param {?} clickNotification
         * @return {?}
         */
            function (clickNotification) {
                if (clickNotification.target.key === 'assignee') {
                    this.showAssignee = true;
                }
                if (clickNotification.target.key === 'formName') {
                    this.showAttachForm = true;
                }
            };
        /**
         * Load the activiti task details
         * @param taskId
         */
        /**
         * Load the activiti task details
         * @private
         * @param {?} taskId
         * @return {?}
         */
        TaskDetailsComponent.prototype.loadDetails = /**
         * Load the activiti task details
         * @private
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                this.taskPeople = [];
                this.taskFormName = null;
                if (taskId) {
                    this.taskListService.getTaskDetails(taskId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.showAttachForm = false;
                        _this.taskDetails = res;
                        if (_this.taskDetails.name === 'null') {
                            _this.taskDetails.name = 'No name';
                        }
                        /** @type {?} */
                        var endDate = res.endDate;
                        if (endDate && !isNaN(endDate.getTime())) {
                            _this.internalReadOnlyForm = true;
                        }
                        else {
                            _this.internalReadOnlyForm = _this.readOnlyForm;
                        }
                        if (_this.taskDetails && _this.taskDetails.involvedPeople) {
                            _this.taskDetails.involvedPeople.forEach(( /**
                             * @param {?} user
                             * @return {?}
                             */function (user) {
                                _this.taskPeople.push(new i1$1.UserProcessModel(user));
                            }));
                        }
                    }));
                }
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isAssigned = /**
         * @return {?}
         */
            function () {
                return !!this.taskDetails.assignee;
            };
        /**
         * @private
         * @return {?}
         */
        TaskDetailsComponent.prototype.hasEmailAddress = /**
         * @private
         * @return {?}
         */
            function () {
                return this.taskDetails.assignee.email ? true : false;
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isAssignedToMe = /**
         * @return {?}
         */
            function () {
                return this.isAssigned() && this.hasEmailAddress() ?
                    this.isEmailEqual(this.taskDetails.assignee.email, this.currentLoggedUser.email) :
                    this.isExternalIdEqual(this.taskDetails.assignee.externalId, this.currentLoggedUser.externalId);
            };
        /**
         * @private
         * @param {?} assigneeMail
         * @param {?} currentLoggedEmail
         * @return {?}
         */
        TaskDetailsComponent.prototype.isEmailEqual = /**
         * @private
         * @param {?} assigneeMail
         * @param {?} currentLoggedEmail
         * @return {?}
         */
            function (assigneeMail, currentLoggedEmail) {
                return assigneeMail.toLocaleLowerCase() === currentLoggedEmail.toLocaleLowerCase();
            };
        /**
         * @private
         * @param {?} assigneeExternalId
         * @param {?} currentUserExternalId
         * @return {?}
         */
        TaskDetailsComponent.prototype.isExternalIdEqual = /**
         * @private
         * @param {?} assigneeExternalId
         * @param {?} currentUserExternalId
         * @return {?}
         */
            function (assigneeExternalId, currentUserExternalId) {
                return assigneeExternalId.toLocaleLowerCase() === currentUserExternalId.toLocaleLowerCase();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isCompleteButtonEnabled = /**
         * @return {?}
         */
            function () {
                return this.isAssignedToMe() || this.canInitiatorComplete();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isCompleteButtonVisible = /**
         * @return {?}
         */
            function () {
                return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.canInitiatorComplete = /**
         * @return {?}
         */
            function () {
                return this.taskDetails.initiatorCanCompleteTask;
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isSaveButtonVisible = /**
         * @return {?}
         */
            function () {
                return this.hasSaveButton() && (!this.canInitiatorComplete() || this.isAssignedToMe());
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.hasSaveButton = /**
         * @return {?}
         */
            function () {
                return this.showFormSaveButton;
            };
        /**
         * Retrieve the next open task
         * @param processInstanceId
         * @param processDefinitionId
         */
        /**
         * Retrieve the next open task
         * @private
         * @param {?} processInstanceId
         * @param {?} processDefinitionId
         * @return {?}
         */
        TaskDetailsComponent.prototype.loadNextTask = /**
         * Retrieve the next open task
         * @private
         * @param {?} processInstanceId
         * @param {?} processDefinitionId
         * @return {?}
         */
            function (processInstanceId, processDefinitionId) {
                var _this = this;
                /** @type {?} */
                var requestNode = new TaskQueryRequestRepresentationModel({
                    processInstanceId: processInstanceId,
                    processDefinitionId: processDefinitionId
                });
                this.taskListService.getTasks(requestNode).subscribe(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    if (response && response.length > 0) {
                        _this.taskDetails = new TaskDetailsModel(response[0]);
                    }
                    else {
                        _this.reset();
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.error.emit(error);
                }));
            };
        /**
         * Complete button clicked
         */
        /**
         * Complete button clicked
         * @return {?}
         */
        TaskDetailsComponent.prototype.onComplete = /**
         * Complete button clicked
         * @return {?}
         */
            function () {
                var _this = this;
                this.taskListService.completeTask(this.taskId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) { return _this.onFormCompleted(null); }));
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.onShowAttachForm = /**
         * @return {?}
         */
            function () {
                this.showAttachForm = true;
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.onCancelAttachForm = /**
         * @return {?}
         */
            function () {
                this.showAttachForm = false;
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.onCompleteAttachForm = /**
         * @return {?}
         */
            function () {
                this.showAttachForm = false;
                this.loadDetails(this.taskId);
            };
        /**
         * @param {?} content
         * @return {?}
         */
        TaskDetailsComponent.prototype.onFormContentClick = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                this.formContentClicked.emit(content);
            };
        /**
         * @param {?} form
         * @return {?}
         */
        TaskDetailsComponent.prototype.onFormSaved = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formSaved.emit(form);
            };
        /**
         * @param {?} form
         * @return {?}
         */
        TaskDetailsComponent.prototype.onFormCompleted = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formCompleted.emit(form);
                if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {
                    this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
                }
            };
        /**
         * @param {?} form
         * @return {?}
         */
        TaskDetailsComponent.prototype.onFormLoaded = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.taskFormName = (form && form.name ? form.name : null);
                this.formLoaded.emit(form);
            };
        /**
         * @param {?} task
         * @return {?}
         */
        TaskDetailsComponent.prototype.onChecklistTaskCreated = /**
         * @param {?} task
         * @return {?}
         */
            function (task) {
                this.taskCreated.emit(task);
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        TaskDetailsComponent.prototype.onChecklistTaskDeleted = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                this.taskDeleted.emit(taskId);
            };
        /**
         * @param {?} error
         * @return {?}
         */
        TaskDetailsComponent.prototype.onFormError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });
                this.error.emit(error);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskDetailsComponent.prototype.onFormExecuteOutcome = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.executeOutcome.emit(event);
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.closeErrorDialog = /**
         * @return {?}
         */
            function () {
                this.dialog.closeAll();
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        TaskDetailsComponent.prototype.onClaimAction = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                this.claimedTask.emit(taskId);
                this.loadDetails(taskId);
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        TaskDetailsComponent.prototype.onUnclaimAction = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                this.unClaimedTask.emit(taskId);
                this.loadDetails(taskId);
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isCompletedTask = /**
         * @return {?}
         */
            function () {
                return this.taskDetails && this.taskDetails.endDate ? true : undefined;
            };
        /**
         * @param {?} searchedWord
         * @return {?}
         */
        TaskDetailsComponent.prototype.searchUser = /**
         * @param {?} searchedWord
         * @return {?}
         */
            function (searchedWord) {
                var _this = this;
                this.peopleProcessService.getWorkflowUsers(null, searchedWord)
                    .subscribe(( /**
             * @param {?} users
             * @return {?}
             */function (users) {
                    users = users.filter(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.id !== _this.taskDetails.assignee.id; }));
                    _this.peopleSearchObserver.next(users);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) { return _this.logService.error('Could not load users'); }));
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.onCloseSearch = /**
         * @return {?}
         */
            function () {
                this.showAssignee = false;
            };
        /**
         * @param {?} selectedUser
         * @return {?}
         */
        TaskDetailsComponent.prototype.assignTaskToUser = /**
         * @param {?} selectedUser
         * @return {?}
         */
            function (selectedUser) {
                var _this = this;
                this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    _this.logService.info('Task Assigned to ' + selectedUser.email);
                    _this.assignTask.emit();
                }));
                this.showAssignee = false;
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.getTaskHeaderViewClass = /**
         * @return {?}
         */
            function () {
                if (this.showAssignee) {
                    return 'assign-edit-view';
                }
                else {
                    return 'default-view';
                }
            };
        /**
         * @return {?}
         */
        TaskDetailsComponent.prototype.isReadOnlyComment = /**
         * @return {?}
         */
            function () {
                return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);
            };
        TaskDetailsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-task-details',
                        template: "<div *ngIf=\"!taskDetails\" data-automation-id=\"adf-tasks-details--empty\">\n    <ng-template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"\n                 [ngForTemplate]=\"noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </ng-template>\n    <div *ngIf=\"!noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </div>\n</div>\n<div *ngIf=\"taskDetails\" class=\"adf-task-details\">\n\n    <div *ngIf=\"showHeader\" class=\"adf-task-details-header\">\n        <h2 class=\"adf-activiti-task-details__header\">\n            <span>{{taskDetails.name || 'No name'}}</span>\n        </h2>\n    </div>\n\n    <div class=\"adf-task-details-core\"\n        fxLayout=\"column\"\n        fxLayoutGap=\"8px\"\n        fxLayout.lt-lg=\"column\">\n\n        <div class=\"adf-task-details-core-form\">\n            <div *ngIf=\"isAssigned()\">\n                <adf-form *ngIf=\"isFormComponentVisible()\" #activitiForm\n                          [taskId]=\"taskDetails.id\"\n                          [showTitle]=\"showFormTitle\"\n                          [showRefreshButton]=\"showFormRefreshButton\"\n                          [showCompleteButton]=\"showFormCompleteButton\"\n                          [disableCompleteButton]=\"!isCompleteButtonEnabled()\"\n                          [showSaveButton]=\"isSaveButtonVisible()\"\n                          [readOnly]=\"internalReadOnlyForm\"\n                          [fieldValidators]=\"fieldValidators\"\n                          (formSaved)='onFormSaved($event)'\n                          (formCompleted)='onFormCompleted($event)'\n                          (formContentClicked)='onFormContentClick($event)'\n                          (formLoaded)='onFormLoaded($event)'\n                          (error)='onFormError($event)'\n                          (executeOutcome)='onFormExecuteOutcome($event)'>\n                </adf-form>\n                <adf-task-standalone *ngIf=\"isTaskStandaloneComponentVisible()\"\n                                     [taskName]=\"taskDetails.name\"\n                                     [taskId]=\"taskDetails.id\"\n                                     [isCompleted]=\"isCompletedTask()\"\n                                     [hasCompletePermission]=\"isCompleteButtonEnabled()\"\n                                     [hideCancelButton]=\"true\"\n                                     (complete)=\"onComplete()\"\n                                     (showAttachForm)=\"onShowAttachForm()\">\n                </adf-task-standalone>\n\n                <mat-card class=\"adf-message-card\" *ngIf=\"!isTaskStandaloneComponentVisible() && !isCompletedTask() && !isFormComponentVisible()\" >\n                    <mat-card-content>\n                        <div class=\"adf-no-form-message-container\">\n                            <div class=\"adf-no-form-message-list\">\n                                <div *ngIf=\"!isCompletedTask()\" class=\"adf-no-form-message\">\n                                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-content>\n\n                    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n                        <div>\n                            <button mat-button id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onComplete()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n                        </div>\n                    </mat-card-actions>\n\n                </mat-card>\n\n                <adf-attach-form *ngIf=\"isShowAttachForm()\"\n                                 [taskId]=\"taskDetails.id\"\n                                 [formKey]=\"taskDetails.formKey\"\n                                 (cancelAttachForm)=\"onCancelAttachForm()\"\n                                 (success)=\"onCompleteAttachForm()\">\n                </adf-attach-form>\n            </div>\n            <div *ngIf=\"!isAssigned()\" id=\"claim-message-id\">\n                {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM' | translate }}\n            </div>\n        </div>\n        <div class=\"adf-task-details-core-sidebar\">\n            <adf-info-drawer *ngIf=\"showHeaderContent\" title=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE' | translate }}\" id=\"adf-task-details-core-sidebar-drawer\" class=\"adf-task-details-core-sidebar-drawer\">\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE' | translate }}\">\n                    <div class=\"adf-assignment-container\" *ngIf=\"showAssignee\">\n                        <adf-people-search\n                            (searchPeople)=\"searchUser($event)\"\n                            (success)=\"assignTaskToUser($event)\"\n                            (closeSearch)=\"onCloseSearch()\"\n                            [results]=\"peopleSearch\">\n                            <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                            <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                        </adf-people-search>\n                    </div>\n                    <adf-task-header\n                        [class]=\"getTaskHeaderViewClass()\"\n                        [taskDetails]=\"taskDetails\"\n                        [formName]=\"taskFormName\"\n                        (claim)=\"onClaimAction($event)\"\n                        (unclaim)=\"onUnclaimAction($event)\">\n                    </adf-task-header>\n                    <adf-people *ngIf=\"showInvolvePeople\" #people\n                                [people]=\"taskPeople\"\n                                [readOnly]=\"internalReadOnlyForm\"\n                                [taskId]=\"taskDetails.id\">\n                    </adf-people>\n                </adf-info-drawer-tab>\n\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE' | translate }}\">\n                    <mat-card *ngIf=\"showComments\">\n                        <mat-card-content>\n                            <adf-comments #activitiComments\n                                          [readOnly]=\"isReadOnlyComment()\"\n                                          [taskId]=\"taskDetails.id\">\n                            </adf-comments>\n                        </mat-card-content>\n                    </mat-card>\n                </adf-info-drawer-tab>\n\n            </adf-info-drawer>\n\n            <div *ngIf=\"showHeaderContent\" class=\"adf-task-details-core-sidebar-checklist\">\n                <div *ngIf=\"showChecklist\">\n                    <adf-checklist #activitiChecklist\n                                   [readOnly]=\"internalReadOnlyForm\"\n                                   [taskId]=\"taskDetails.id\"\n                                   [assignee]=\"taskDetails?.assignee?.id\"\n                                   (checklistTaskCreated)=\"onChecklistTaskCreated($event)\"\n                                   (checklistTaskDeleted)=\"onChecklistTaskDeleted($event)\">\n                    </adf-checklist>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #errorDialog>\n        <h3 matDialogTitle>{{'ADF_TASK_LIST.DETAILS.ERROR.TITLE'|translate}}</h3>\n        <mat-dialog-content>\n            <p>{{'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION'|translate}}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <button mat-button type=\"button\" (click)=\"closeErrorDialog()\">{{'ADF_TASK_LIST.DETAILS.ERROR.CLOSE'|translate}}\n            </button>\n        </mat-dialog-actions>\n    </ng-template>\n\n</div>\n",
                        styles: [":host{width:100%}.adf-error-dialog h3{margin:16px 0}.adf-activiti-task-details__header{align-self:flex-end;display:flex;font-size:24px;font-weight:300;line-height:normal;overflow:hidden;margin:8px 0 16px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-activiti-task-details__action-button{text-transform:uppercase}.adf-assignment-container{padding:10px 20px;width:auto}adf-task-header.adf-assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=header-assignee]{display:none}.adf-task-details-header{display:flex;justify-content:space-between}.adf-task-details-header-toggle{position:relative;top:10px;margin-right:2px;height:23px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-task-details-toggle{position:relative}.adf-task-details-core{display:flex;justify-content:space-between}@media screen and (max-width:1279px){.adf-task-details-core-sidebar-drawer{margin-left:0}}.adf-task-details-core-sidebar-checklist{margin-top:30px;padding-left:20px;padding-right:20px}.adf-task-details-core-form{flex-grow:1}.adf-task-details-core-form ::ng-deep .adf-form-debug-container{display:flex;flex-direction:column;padding:20px 0}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle{margin-left:auto}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle+div{background-color:#000;padding:20px;clear:both;margin-top:30px;color:#fff}.adf-task-details-core-form ::ng-deep .mat-tab-label{flex-grow:1}"]
                    }] }
        ];
        /** @nocollapse */
        TaskDetailsComponent.ctorParameters = function () {
            return [
                { type: TaskListService },
                { type: i1$1.AuthenticationService },
                { type: i1$1.PeopleProcessService },
                { type: i1$1.LogService },
                { type: i1$1.CardViewUpdateService },
                { type: material.MatDialog }
            ];
        };
        TaskDetailsComponent.propDecorators = {
            activitiComments: [{ type: i0.ViewChild, args: ['activitiComments',] }],
            activitiChecklist: [{ type: i0.ViewChild, args: ['activitiChecklist',] }],
            errorDialog: [{ type: i0.ViewChild, args: ['errorDialog',] }],
            debugMode: [{ type: i0.Input }],
            taskId: [{ type: i0.Input }],
            showNextTask: [{ type: i0.Input }],
            showHeader: [{ type: i0.Input }],
            showHeaderContent: [{ type: i0.Input }],
            showInvolvePeople: [{ type: i0.Input }],
            showComments: [{ type: i0.Input }],
            showChecklist: [{ type: i0.Input }],
            showFormTitle: [{ type: i0.Input }],
            showFormCompleteButton: [{ type: i0.Input }],
            showFormSaveButton: [{ type: i0.Input }],
            readOnlyForm: [{ type: i0.Input }],
            showFormRefreshButton: [{ type: i0.Input }],
            fieldValidators: [{ type: i0.Input }],
            formSaved: [{ type: i0.Output }],
            formCompleted: [{ type: i0.Output }],
            formContentClicked: [{ type: i0.Output }],
            formLoaded: [{ type: i0.Output }],
            taskCreated: [{ type: i0.Output }],
            taskDeleted: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            executeOutcome: [{ type: i0.Output }],
            assignTask: [{ type: i0.Output }],
            claimedTask: [{ type: i0.Output }],
            unClaimedTask: [{ type: i0.Output }]
        };
        return TaskDetailsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Directive selectors without adf- prefix will be deprecated on 3.0.0
     */
    var NoTaskDetailsTemplateDirective = /** @class */ (function () {
        function NoTaskDetailsTemplateDirective(activitiTaskDetails) {
            this.activitiTaskDetails = activitiTaskDetails;
        }
        /**
         * @return {?}
         */
        NoTaskDetailsTemplateDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;
            };
        NoTaskDetailsTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'adf-no-task-details-template, no-task-details-template'
                    },] }
        ];
        /** @nocollapse */
        NoTaskDetailsTemplateDirective.ctorParameters = function () {
            return [
                { type: TaskDetailsComponent }
            ];
        };
        NoTaskDetailsTemplateDirective.propDecorators = {
            template: [{ type: i0.ContentChild, args: [i0.TemplateRef,] }]
        };
        return NoTaskDetailsTemplateDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskFilterService = /** @class */ (function () {
        function TaskFilterService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
        }
        /**
         * Creates and returns the default filters for a process app.
         * @param appId ID of the target app
         * @returns Array of default filters just created
         */
        /**
         * Creates and returns the default filters for a process app.
         * @param {?} appId ID of the target app
         * @return {?} Array of default filters just created
         */
        TaskFilterService.prototype.createDefaultFilters = /**
         * Creates and returns the default filters for a process app.
         * @param {?} appId ID of the target app
         * @return {?} Array of default filters just created
         */
            function (appId) {
                var _this = this;
                /** @type {?} */
                var involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);
                /** @type {?} */
                var involvedObservable = this.addFilter(involvedTasksFilter);
                /** @type {?} */
                var myTasksFilter = this.getMyTasksFilterInstance(appId);
                /** @type {?} */
                var myTaskObservable = this.addFilter(myTasksFilter);
                /** @type {?} */
                var queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);
                /** @type {?} */
                var queuedObservable = this.addFilter(queuedTasksFilter);
                /** @type {?} */
                var completedTasksFilter = this.getCompletedTasksFilterInstance(appId);
                /** @type {?} */
                var completeObservable = this.addFilter(completedTasksFilter);
                return new rxjs.Observable(( /**
                 * @param {?} observer
                 * @return {?}
                 */function (observer) {
                    rxjs.forkJoin(involvedObservable, myTaskObservable, queuedObservable, completeObservable).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        /** @type {?} */
                        var filters = [];
                        res.forEach(( /**
                         * @param {?} filter
                         * @return {?}
                         */function (filter) {
                            if (filter.name === involvedTasksFilter.name) {
                                involvedTasksFilter.id = filter.id;
                                filters.push(involvedTasksFilter);
                            }
                            else if (filter.name === myTasksFilter.name) {
                                myTasksFilter.id = filter.id;
                                filters.push(myTasksFilter);
                            }
                            else if (filter.name === queuedTasksFilter.name) {
                                queuedTasksFilter.id = filter.id;
                                filters.push(queuedTasksFilter);
                            }
                            else if (filter.name === completedTasksFilter.name) {
                                completedTasksFilter.id = filter.id;
                                filters.push(completedTasksFilter);
                            }
                        }));
                        observer.next(filters);
                        observer.complete();
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.logService.error(err);
                    }));
                }));
            };
        /**
         * Gets all task filters for a process app.
         * @param appId Optional ID for a specific app
         * @returns Array of task filter details
         */
        /**
         * Gets all task filters for a process app.
         * @param {?=} appId Optional ID for a specific app
         * @return {?} Array of task filter details
         */
        TaskFilterService.prototype.getTaskListFilters = /**
         * Gets all task filters for a process app.
         * @param {?=} appId Optional ID for a specific app
         * @return {?} Array of task filter details
         */
            function (appId) {
                var _this = this;
                return rxjs.from(this.callApiTaskFilters(appId))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    /** @type {?} */
                    var filters = [];
                    response.data.forEach(( /**
                     * @param {?} filter
                     * @return {?}
                     */function (filter) {
                        /** @type {?} */
                        var filterModel = new FilterRepresentationModel(filter);
                        filters.push(filterModel);
                    }));
                    return filters;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets a task filter by ID.
         * @param filterId ID of the filter
         * @param appId ID of the app for the filter
         * @returns Details of task filter
         */
        /**
         * Gets a task filter by ID.
         * @param {?} filterId ID of the filter
         * @param {?=} appId ID of the app for the filter
         * @return {?} Details of task filter
         */
        TaskFilterService.prototype.getTaskFilterById = /**
         * Gets a task filter by ID.
         * @param {?} filterId ID of the filter
         * @param {?=} appId ID of the app for the filter
         * @return {?} Details of task filter
         */
            function (filterId, appId) {
                var _this = this;
                return rxjs.from(this.callApiTaskFilters(appId)).pipe(operators.map(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    return response.data.find(( /**
                     * @param {?} filter
                     * @return {?}
                     */function (filter) { return filter.id === filterId; }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Gets a task filter by name.
         * @param taskName Name of the filter
         * @param appId ID of the app for the filter
         * @returns Details of task filter
         */
        /**
         * Gets a task filter by name.
         * @param {?} taskName Name of the filter
         * @param {?=} appId ID of the app for the filter
         * @return {?} Details of task filter
         */
        TaskFilterService.prototype.getTaskFilterByName = /**
         * Gets a task filter by name.
         * @param {?} taskName Name of the filter
         * @param {?=} appId ID of the app for the filter
         * @return {?} Details of task filter
         */
            function (taskName, appId) {
                var _this = this;
                return rxjs.from(this.callApiTaskFilters(appId)).pipe(operators.map(( /**
                 * @param {?} response
                 * @return {?}
                 */function (response) {
                    return response.data.find(( /**
                     * @param {?} filter
                     * @return {?}
                     */function (filter) { return filter.name === taskName; }));
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Adds a new task filter
         * @param filter The new filter to add
         * @returns Details of task filter just added
         */
        /**
         * Adds a new task filter
         * @param {?} filter The new filter to add
         * @return {?} Details of task filter just added
         */
        TaskFilterService.prototype.addFilter = /**
         * Adds a new task filter
         * @param {?} filter The new filter to add
         * @return {?} Details of task filter just added
         */
            function (filter) {
                var _this = this;
                return rxjs.from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))
                    .pipe(operators.map(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    return response;
                })), operators.catchError(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); })));
            };
        /**
         * Calls `getUserTaskFilters` from the Alfresco JS API.
         * @param appId ID of the target app
         * @returns List of task filters
         */
        /**
         * Calls `getUserTaskFilters` from the Alfresco JS API.
         * @param {?=} appId ID of the target app
         * @return {?} List of task filters
         */
        TaskFilterService.prototype.callApiTaskFilters = /**
         * Calls `getUserTaskFilters` from the Alfresco JS API.
         * @param {?=} appId ID of the target app
         * @return {?} List of task filters
         */
            function (appId) {
                if (appId) {
                    return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });
                }
                else {
                    return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();
                }
            };
        /**
         * Creates and returns a filter for "Involved" task instances.
         * @param appId ID of the target app
         * @returns The newly created filter
         */
        /**
         * Creates and returns a filter for "Involved" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
        TaskFilterService.prototype.getInvolvedTasksFilterInstance = /**
         * Creates and returns a filter for "Involved" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
            function (appId) {
                return new FilterRepresentationModel({
                    'name': 'Involved Tasks',
                    'appId': appId,
                    'recent': false,
                    'icon': 'glyphicon-align-left',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }
                });
            };
        /**
         * Creates and returns a filter for "My Tasks" task instances.
         * @param appId ID of the target app
         * @returns The newly created filter
         */
        /**
         * Creates and returns a filter for "My Tasks" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
        TaskFilterService.prototype.getMyTasksFilterInstance = /**
         * Creates and returns a filter for "My Tasks" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
            function (appId) {
                return new FilterRepresentationModel({
                    'name': 'My Tasks',
                    'appId': appId,
                    'recent': false,
                    'icon': 'glyphicon-inbox',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }
                });
            };
        /**
         * Creates and returns a filter for "Queued Tasks" task instances.
         * @param appId ID of the target app
         * @returns The newly created filter
         */
        /**
         * Creates and returns a filter for "Queued Tasks" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
        TaskFilterService.prototype.getQueuedTasksFilterInstance = /**
         * Creates and returns a filter for "Queued Tasks" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
            function (appId) {
                return new FilterRepresentationModel({
                    'name': 'Queued Tasks',
                    'appId': appId,
                    'recent': false,
                    'icon': 'glyphicon-record',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }
                });
            };
        /**
         * Creates and returns a filter for "Completed" task instances.
         * @param appId ID of the target app
         * @returns The newly created filter
         */
        /**
         * Creates and returns a filter for "Completed" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
        TaskFilterService.prototype.getCompletedTasksFilterInstance = /**
         * Creates and returns a filter for "Completed" task instances.
         * @param {?} appId ID of the target app
         * @return {?} The newly created filter
         */
            function (appId) {
                return new FilterRepresentationModel({
                    'name': 'Completed Tasks',
                    'appId': appId,
                    'recent': true,
                    'icon': 'glyphicon-ok-sign',
                    'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }
                });
            };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        TaskFilterService.prototype.handleError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.logService.error(error);
                return rxjs.throwError(error || 'Server error');
            };
        TaskFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TaskFilterService.ctorParameters = function () {
            return [
                { type: i1$1.AlfrescoApiService },
                { type: i1$1.LogService }
            ];
        };
        /** @nocollapse */ TaskFilterService.ngInjectableDef = i0.defineInjectable({ factory: function TaskFilterService_Factory() { return new TaskFilterService(i0.inject(i1$1.AlfrescoApiService), i0.inject(i1$1.LogService)); }, token: TaskFilterService, providedIn: "root" });
        return TaskFilterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskFiltersComponent = /** @class */ (function () {
        function TaskFiltersComponent(taskFilterService, taskListService, appsProcessService) {
            this.taskFilterService = taskFilterService;
            this.taskListService = taskListService;
            this.appsProcessService = appsProcessService;
            /**
             * Emitted when a filter in the list is clicked.
             */
            this.filterClick = new i0.EventEmitter();
            /**
             * Emitted when the list is loaded.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when an error occurs during loading.
             */
            this.error = new i0.EventEmitter();
            this.filters = [];
        }
        /**
         * @return {?}
         */
        TaskFiltersComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.iconsMDL = new IconModel();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TaskFiltersComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var appName = changes['appName'];
                /** @type {?} */
                var appId = changes['appId'];
                /** @type {?} */
                var filter = changes['filterParam'];
                if (appName && appName.currentValue) {
                    this.getFiltersByAppName(appName.currentValue);
                }
                else if (appId && appId.currentValue !== appId.previousValue) {
                    this.getFiltersByAppId(appId.currentValue);
                }
                else if (filter && filter.currentValue !== filter.previousValue) {
                    this.selectFilter(filter.currentValue);
                }
            };
        /**
         * Return the task list filtered by appId or by appName
         * @param appId
         * @param appName
         */
        /**
         * Return the task list filtered by appId or by appName
         * @param {?=} appId
         * @param {?=} appName
         * @return {?}
         */
        TaskFiltersComponent.prototype.getFilters = /**
         * Return the task list filtered by appId or by appName
         * @param {?=} appId
         * @param {?=} appName
         * @return {?}
         */
            function (appId, appName) {
                appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);
            };
        /**
         * Return the filter list filtered by appId
         * @param appId - optional
         */
        /**
         * Return the filter list filtered by appId
         * @param {?=} appId - optional
         * @return {?}
         */
        TaskFiltersComponent.prototype.getFiltersByAppId = /**
         * Return the filter list filtered by appId
         * @param {?=} appId - optional
         * @return {?}
         */
            function (appId) {
                var _this = this;
                this.taskFilterService.getTaskListFilters(appId).subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                    if (res.length === 0 && _this.isFilterListEmpty()) {
                        _this.createFiltersByAppId(appId);
                    }
                    else {
                        _this.resetFilter();
                        _this.filters = res;
                        _this.selectFilter(_this.filterParam);
                        _this.success.emit(res);
                    }
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * Return the filter list filtered by appName
         * @param appName
         */
        /**
         * Return the filter list filtered by appName
         * @param {?} appName
         * @return {?}
         */
        TaskFiltersComponent.prototype.getFiltersByAppName = /**
         * Return the filter list filtered by appName
         * @param {?} appName
         * @return {?}
         */
            function (appName) {
                var _this = this;
                this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(( /**
                 * @param {?} application
                 * @return {?}
                 */function (application) {
                    _this.getFiltersByAppId(application.id);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * Create default filters by appId
         * @param appId
         */
        /**
         * Create default filters by appId
         * @param {?=} appId
         * @return {?}
         */
        TaskFiltersComponent.prototype.createFiltersByAppId = /**
         * Create default filters by appId
         * @param {?=} appId
         * @return {?}
         */
            function (appId) {
                var _this = this;
                this.taskFilterService.createDefaultFilters(appId).subscribe(( /**
                 * @param {?} resDefault
                 * @return {?}
                 */function (resDefault) {
                    _this.resetFilter();
                    _this.filters = resDefault;
                    _this.selectFilter(_this.filterParam);
                    _this.success.emit(resDefault);
                }), ( /**
                 * @param {?} errDefault
                 * @return {?}
                 */function (errDefault) {
                    _this.error.emit(errDefault);
                }));
            };
        /**
         * Pass the selected filter as next
         * @param filter
         */
        /**
         * Pass the selected filter as next
         * @param {?} newFilter
         * @return {?}
         */
        TaskFiltersComponent.prototype.selectFilter = /**
         * Pass the selected filter as next
         * @param {?} newFilter
         * @return {?}
         */
            function (newFilter) {
                if (newFilter) {
                    this.currentFilter = this.filters.find(( /**
                     * @param {?} filter
                     * @param {?} index
                     * @return {?}
                     */function (filter, index) {
                        return newFilter.index === index ||
                            newFilter.id === filter.id ||
                            (newFilter.name &&
                                (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase()));
                    }));
                }
                if (!this.currentFilter) {
                    this.selectDefaultTaskFilter();
                }
            };
        /**
         * @param {?} newFilter
         * @return {?}
         */
        TaskFiltersComponent.prototype.selectFilterAndEmit = /**
         * @param {?} newFilter
         * @return {?}
         */
            function (newFilter) {
                this.selectFilter(newFilter);
                this.filterClick.emit(this.currentFilter);
            };
        /**
         * Select filter with task
         * @param taskId
         */
        /**
         * Select filter with task
         * @param {?} taskId
         * @return {?}
         */
        TaskFiltersComponent.prototype.selectFilterWithTask = /**
         * Select filter with task
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                /** @type {?} */
                var filteredFilterList = [];
                this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe(( /**
                 * @param {?} filter
                 * @return {?}
                 */function (filter) {
                    filteredFilterList.push(filter);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }), ( /**
                 * @return {?}
                 */function () {
                    if (filteredFilterList.length > 0) {
                        _this.selectFilter(filteredFilterList[0]);
                        _this.filterClick.emit(_this.currentFilter);
                    }
                }));
            };
        /**
         * Select as default task filter the first in the list
         * @param filteredFilterList
         */
        /**
         * Select as default task filter the first in the list
         * @return {?}
         */
        TaskFiltersComponent.prototype.selectDefaultTaskFilter = /**
         * Select as default task filter the first in the list
         * @return {?}
         */
            function () {
                if (!this.isFilterListEmpty()) {
                    this.currentFilter = this.filters[0];
                }
            };
        /**
         * Return the current task
         */
        /**
         * Return the current task
         * @return {?}
         */
        TaskFiltersComponent.prototype.getCurrentFilter = /**
         * Return the current task
         * @return {?}
         */
            function () {
                return this.currentFilter;
            };
        /**
         * Check if the filter list is empty
         */
        /**
         * Check if the filter list is empty
         * @return {?}
         */
        TaskFiltersComponent.prototype.isFilterListEmpty = /**
         * Check if the filter list is empty
         * @return {?}
         */
            function () {
                return this.filters === undefined || (this.filters && this.filters.length === 0);
            };
        /**
         * Reset the filters properties
         */
        /**
         * Reset the filters properties
         * @private
         * @return {?}
         */
        TaskFiltersComponent.prototype.resetFilter = /**
         * Reset the filters properties
         * @private
         * @return {?}
         */
            function () {
                this.filters = [];
                this.currentFilter = undefined;
            };
        /**
         * Return current filter icon
         */
        /**
         * Return current filter icon
         * @param {?} icon
         * @return {?}
         */
        TaskFiltersComponent.prototype.getFilterIcon = /**
         * Return current filter icon
         * @param {?} icon
         * @return {?}
         */
            function (icon) {
                return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);
            };
        TaskFiltersComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-task-filters',
                        template: "<div class=\"menu-container\">\n    <mat-list class=\"adf-menu-list\">\n        <mat-list-item (click)=\"selectFilterAndEmit(filter)\" *ngFor=\"let filter of filters\"\n                      class=\"adf-filters__entry\" [class.adf-active]=\"currentFilter === filter\">\n            <mat-icon *ngIf=\"showIcon\" matListIcon class=\"adf-filters__entry-icon\">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        TaskFiltersComponent.ctorParameters = function () {
            return [
                { type: TaskFilterService },
                { type: TaskListService },
                { type: i1$1.AppsProcessService }
            ];
        };
        TaskFiltersComponent.propDecorators = {
            filterParam: [{ type: i0.Input }],
            filterClick: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            appId: [{ type: i0.Input }],
            appName: [{ type: i0.Input }],
            showIcon: [{ type: i0.Input }]
        };
        return TaskFiltersComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var JSON_FORMAT$1 = 'json';
    /** @type {?} */
    var PDF_FORMAT$1 = 'pdf';
    var TaskAuditDirective = /** @class */ (function () {
        /**
         *
         * @param translateService
         * @param taskListService
         */
        function TaskAuditDirective(contentService, taskListService) {
            this.contentService = contentService;
            this.taskListService = taskListService;
            /**
             * Name of the downloaded file (for PDF downloads).
             */
            this.fileName = 'Audit';
            /**
             * Format of the audit information. Can be "pdf" or "json".
             */
            this.format = 'pdf';
            /**
             * Enables downloading of the audit when the decorated element is clicked.
             */
            this.download = true;
            /**
             * Emitted when the decorated element is clicked.
             */
            this.clicked = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        TaskAuditDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.isValidType()) {
                    this.setDefaultFormatType();
                }
            };
        /**
         * @return {?}
         */
        TaskAuditDirective.prototype.isValidType = /**
         * @return {?}
         */
            function () {
                if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {
                    return true;
                }
                return false;
            };
        /**
         * @return {?}
         */
        TaskAuditDirective.prototype.setDefaultFormatType = /**
         * @return {?}
         */
            function () {
                this.format = PDF_FORMAT$1;
            };
        /**
         * fetch the audit information in the requested format
         */
        /**
         * fetch the audit information in the requested format
         * @return {?}
         */
        TaskAuditDirective.prototype.fetchAuditInfo = /**
         * fetch the audit information in the requested format
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isPdfFormat()) {
                    this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(( /**
                     * @param {?} blob
                     * @return {?}
                     */function (blob) {
                        _this.audit = blob;
                        if (_this.download) {
                            _this.contentService.downloadBlob(_this.audit, _this.fileName + '.pdf');
                        }
                        _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
                else {
                    this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.audit = res;
                        _this.clicked.emit({ format: _this.format, value: _this.audit, fileName: _this.fileName });
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
            };
        /**
         * @return {?}
         */
        TaskAuditDirective.prototype.onClickAudit = /**
         * @return {?}
         */
            function () {
                this.fetchAuditInfo();
            };
        /**
         * @return {?}
         */
        TaskAuditDirective.prototype.isJsonFormat = /**
         * @return {?}
         */
            function () {
                return this.format === JSON_FORMAT$1;
            };
        /**
         * @return {?}
         */
        TaskAuditDirective.prototype.isPdfFormat = /**
         * @return {?}
         */
            function () {
                return this.format === PDF_FORMAT$1;
            };
        TaskAuditDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: 'button[adf-task-audit]',
                        host: {
                            'role': 'button',
                            '(click)': 'onClickAudit()'
                        }
                    },] }
        ];
        /** @nocollapse */
        TaskAuditDirective.ctorParameters = function () {
            return [
                { type: i1$1.ContentService },
                { type: TaskListService }
            ];
        };
        TaskAuditDirective.propDecorators = {
            taskId: [{ type: i0.Input, args: ['task-id',] }],
            fileName: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            download: [{ type: i0.Input }],
            clicked: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return TaskAuditDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0 = i1$1.MOMENT_DATE_FORMATS;
    var StartTaskComponent = /** @class */ (function () {
        /**
         * Constructor
         * @param auth
         * @param translate
         * @param taskService
         */
        function StartTaskComponent(taskService, dateAdapter, userPreferencesService, formBuilder, logService) {
            this.taskService = taskService;
            this.dateAdapter = dateAdapter;
            this.userPreferencesService = userPreferencesService;
            this.formBuilder = formBuilder;
            this.logService = logService;
            this.FORMAT_DATE = 'DD/MM/YYYY';
            this.MAX_LENGTH = 255;
            /**
             * Default Task Name.
             */
            this.name = '';
            /**
             * Emitted when the task is successfully created.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when the cancel button is clicked by the user.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.taskDetailsModel = new TaskDetailsModel();
            this.dateError = false;
            this.maxTaskNameLength = this.MAX_LENGTH;
            this.loading = false;
        }
        /**
         * @return {?}
         */
        StartTaskComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.name) {
                    this.taskDetailsModel.name = this.name;
                }
                this.validateMaxTaskNameLength();
                this.field = new i1$1.FormFieldModel(new i1$1.FormModel(), { id: this.assigneeId, value: this.assigneeId, placeholder: 'Assignee' });
                this.userPreferencesService.select(i1$1.UserPreferenceValues.Locale).subscribe(( /**
                 * @param {?} locale
                 * @return {?}
                 */function (locale) {
                    _this.dateAdapter.setLocale(locale);
                }));
                this.loadFormsTask();
                this.buildForm();
            };
        /**
         * @return {?}
         */
        StartTaskComponent.prototype.buildForm = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.taskForm = this.formBuilder.group({
                    name: new forms.FormControl(this.taskDetailsModel.name, [forms.Validators.required, forms.Validators.maxLength(this.maxTaskNameLength), this.whitespaceValidator]),
                    description: new forms.FormControl('', [this.whitespaceValidator]),
                    formKey: new forms.FormControl('')
                });
                this.taskForm.valueChanges.subscribe(( /**
                 * @param {?} taskFormValues
                 * @return {?}
                 */function (taskFormValues) { return _this.setTaskDetails(taskFormValues); }));
            };
        /**
         * @param {?} control
         * @return {?}
         */
        StartTaskComponent.prototype.whitespaceValidator = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.value) {
                    /** @type {?} */
                    var isWhitespace = (control.value || '').trim().length === 0;
                    /** @type {?} */
                    var isValid = control.value.length === 0 || !isWhitespace;
                    return isValid ? null : { 'whitespace': true };
                }
            };
        /**
         * @param {?} form
         * @return {?}
         */
        StartTaskComponent.prototype.setTaskDetails = /**
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.taskDetailsModel.name = form.name;
                this.taskDetailsModel.description = form.description;
                this.taskDetailsModel.formKey = form.formKey ? form.formKey.toString() : null;
            };
        /**
         * @return {?}
         */
        StartTaskComponent.prototype.isFormValid = /**
         * @return {?}
         */
            function () {
                return this.taskForm.valid && !this.dateError && !this.loading;
            };
        /**
         * @return {?}
         */
        StartTaskComponent.prototype.saveTask = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.loading = true;
                if (this.appId) {
                    this.taskDetailsModel.category = this.appId.toString();
                }
                this.taskService.createNewTask(this.taskDetailsModel)
                    .pipe(operators.switchMap(( /**
             * @param {?} createRes
             * @return {?}
             */function (createRes) {
                    return _this.attachForm(createRes.id, _this.taskDetailsModel.formKey).pipe(operators.defaultIfEmpty(createRes), operators.switchMap(( /**
                     * @param {?} attachRes
                     * @return {?}
                     */function (attachRes) {
                        return _this.assignTaskByUserId(createRes.id, _this.assigneeId).pipe(operators.defaultIfEmpty(attachRes ? attachRes : createRes));
                    })));
                })))
                    .subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    _this.loading = false;
                    _this.success.emit(res);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.loading = false;
                    _this.error.emit(err);
                    _this.logService.error('An error occurred while creating new task');
                }));
            };
        /**
         * @param {?} userId
         * @return {?}
         */
        StartTaskComponent.prototype.getAssigneeId = /**
         * @param {?} userId
         * @return {?}
         */
            function (userId) {
                this.assigneeId = userId;
            };
        /**
         * @private
         * @param {?} taskId
         * @param {?} formKey
         * @return {?}
         */
        StartTaskComponent.prototype.attachForm = /**
         * @private
         * @param {?} taskId
         * @param {?} formKey
         * @return {?}
         */
            function (taskId, formKey) {
                /** @type {?} */
                var response = rxjs.of();
                if (taskId && formKey) {
                    response = this.taskService.attachFormToATask(taskId, parseInt(formKey, 10));
                }
                return response;
            };
        /**
         * @private
         * @param {?} taskId
         * @param {?} userId
         * @return {?}
         */
        StartTaskComponent.prototype.assignTaskByUserId = /**
         * @private
         * @param {?} taskId
         * @param {?} userId
         * @return {?}
         */
            function (taskId, userId) {
                /** @type {?} */
                var response = rxjs.of();
                if (taskId && userId) {
                    response = this.taskService.assignTaskByUserId(taskId, userId);
                }
                return response;
            };
        /**
         * @return {?}
         */
        StartTaskComponent.prototype.onCancel = /**
         * @return {?}
         */
            function () {
                this.cancel.emit();
            };
        /**
         * @private
         * @return {?}
         */
        StartTaskComponent.prototype.loadFormsTask = /**
         * @private
         * @return {?}
         */
            function () {
                this.forms$ = this.taskService.getFormList();
            };
        /**
         * @param {?} user
         * @return {?}
         */
        StartTaskComponent.prototype.isUserNameEmpty = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));
            };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        StartTaskComponent.prototype.isEmpty = /**
         * @private
         * @param {?} data
         * @return {?}
         */
            function (data) {
                return data === undefined || data === null || data.trim().length === 0;
            };
        /**
         * @param {?} firstName
         * @param {?} lastName
         * @param {?=} delimiter
         * @return {?}
         */
        StartTaskComponent.prototype.getDisplayUser = /**
         * @param {?} firstName
         * @param {?} lastName
         * @param {?=} delimiter
         * @return {?}
         */
            function (firstName, lastName, delimiter) {
                if (delimiter === void 0) {
                    delimiter = '-';
                }
                firstName = (firstName !== null ? firstName : '');
                lastName = (lastName !== null ? lastName : '');
                return firstName + delimiter + lastName;
            };
        /**
         * @param {?} newDateValue
         * @return {?}
         */
        StartTaskComponent.prototype.onDateChanged = /**
         * @param {?} newDateValue
         * @return {?}
         */
            function (newDateValue) {
                this.dateError = false;
                if (newDateValue) {
                    /** @type {?} */
                    var momentDate = void 0;
                    if (typeof newDateValue === 'string') {
                        momentDate = moment$1(newDateValue, this.FORMAT_DATE, true);
                    }
                    else {
                        momentDate = newDateValue;
                    }
                    if (momentDate.isValid()) {
                        this.taskDetailsModel.dueDate = momentDate.toDate();
                    }
                    else {
                        this.dateError = true;
                        this.taskDetailsModel.dueDate = null;
                    }
                }
                else {
                    this.taskDetailsModel.dueDate = null;
                }
            };
        /**
         * @private
         * @return {?}
         */
        StartTaskComponent.prototype.validateMaxTaskNameLength = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.maxTaskNameLength > this.MAX_LENGTH) {
                    this.maxTaskNameLength = this.MAX_LENGTH;
                    this.logService.log("the task name length cannot be greater than " + this.MAX_LENGTH);
                }
            };
        Object.defineProperty(StartTaskComponent.prototype, "nameController", {
            get: /**
             * @return {?}
             */ function () {
                return this.taskForm.get('name');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StartTaskComponent.prototype, "descriptionController", {
            get: /**
             * @return {?}
             */ function () {
                return this.taskForm.get('description');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StartTaskComponent.prototype, "formKeyController", {
            get: /**
             * @return {?}
             */ function () {
                return this.taskForm.get('formKey');
            },
            enumerable: true,
            configurable: true
        });
        StartTaskComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-start-task',
                        template: "<mat-card fxFlex=\"70%\" class=\"adf-new-task-layout-card\">\n    <mat-card-header fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\" class=\"adf-new-task-heading\">\n        <mat-card-title>{{'ADF_TASK_LIST.START_TASK.FORM.TITLE' | translate}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <form [formGroup]=\"taskForm\" fxLayout=\"column\" fxLayoutGap=\"10px\">\n            <div class=\"adf-task-name\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NAME' | translate}}</mat-label>\n                    <input\n                        matInput\n                        id=\"name_id\"\n                        formControlName=\"name\">\n                        <mat-error *ngIf=\"nameController.hasError('required') || nameController.hasError('whitespace')\">\n                            {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.REQUIRED' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                            {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxTaskNameLength } }}\n                        </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"adf-task-description\">\n                <mat-form-field fxFlex>\n                    <mat-label>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        rows=\"1\"\n                        id=\"description_id\"\n                        formControlName=\"description\">\n                    </textarea>\n                    <mat-error *ngIf=\"descriptionController.hasError('whitespace')\">\n                        {{ 'ADF_TASK_LIST.START_TASK.FORM.ERROR.MESSAGE' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"input-row\" fxLayout=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"20px\" fxLayoutGap.lt-md=\"0px\">\n                <mat-form-field fxFlex>\n                    <input\n                        matInput\n                        (keyup)=\"onDateChanged($event.srcElement.value)\"\n                        (dateInput)=\"onDateChanged($event.value)\"\n                        [matDatepicker]=\"taskDatePicker\"\n                        placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                        id=\"date_id\">\n                    <mat-datepicker-toggle\n                        matSuffix\n                        [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                    <mat-datepicker\n                        #taskDatePicker\n                        [touchUi]=\"true\">\n                    </mat-datepicker>\n                    <div class=\"adf-error-text-container\">\n                        <div *ngIf=\"dateError\">\n                            <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE'|translate}}</div>\n                            <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <div fxFlex>\n                    <people-widget\n                        (peopleSelected)=\"getAssigneeId($event)\"\n                        [field]=\"field\"\n                        class=\"adf-people-widget-content\"></people-widget>\n                </div>\n            </div>\n            <div class=\"adf-task-form\">\n                <mat-form-field fxFlex=\"48%\" fxFlex.xs=\"100%\">\n                    <mat-label id=\"form_label\">{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}</mat-label>\n                    <mat-select\n                        id=\"form_id\"\n                        class=\"form-control\"\n                        formControlName=\"formKey\">\n                    <mat-option>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n                    <mat-option *ngFor=\"let form of forms$ | async\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    </mat-card-content>\n    <mat-card-actions>\n        <div class=\"adf-new-task-footer\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n            <button\n                mat-button\n                (click)=\"onCancel()\"\n                id=\"button-cancel\">\n                {{'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n            </button>\n            <button\n                color=\"primary\"\n                mat-button\n                [disabled]=\"!isFormValid()\"\n                (click)=\"saveTask()\"\n                id=\"button-start\">\n                {{'ADF_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n            </button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n",
                        providers: [
                            { provide: core.DateAdapter, useClass: i1$1.MomentDateAdapter },
                            { provide: core.MAT_DATE_FORMATS, useValue: ɵ0 }
                        ],
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        StartTaskComponent.ctorParameters = function () {
            return [
                { type: TaskListService },
                { type: core.DateAdapter },
                { type: i1$1.UserPreferencesService },
                { type: forms.FormBuilder },
                { type: i1$1.LogService }
            ];
        };
        StartTaskComponent.propDecorators = {
            appId: [{ type: i0.Input }],
            name: [{ type: i0.Input }],
            success: [{ type: i0.Output }],
            cancel: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return StartTaskComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskStandaloneComponent = /** @class */ (function () {
        function TaskStandaloneComponent() {
            /**
             * If true then Task completed message is shown and `Complete` and `Cancel` buttons are hidden.
             */
            this.isCompleted = false;
            /**
             * Toggles rendering of the `Complete` button.
             */
            this.hasCompletePermission = true;
            // TODO: rename all with show prefix
            /**
             * Toggles rendering of the `Cancel` button.
             */
            this.hideCancelButton = true;
            /**
             * Emitted when the "Cancel" button is clicked.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Emitted when the form associated with the task is completed.
             */
            this.complete = new i0.EventEmitter();
            /**
             * Emitted when the form associated with the form task is attached.
             */
            this.showAttachForm = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        TaskStandaloneComponent.prototype.onCancelButtonClick = /**
         * @return {?}
         */
            function () {
                this.cancel.emit();
            };
        /**
         * @return {?}
         */
        TaskStandaloneComponent.prototype.onCompleteButtonClick = /**
         * @return {?}
         */
            function () {
                this.complete.emit();
            };
        /**
         * @return {?}
         */
        TaskStandaloneComponent.prototype.hasCompleteButton = /**
         * @return {?}
         */
            function () {
                return this.hasCompletePermission && !this.isCompleted;
            };
        /**
         * @return {?}
         */
        TaskStandaloneComponent.prototype.hasCancelButton = /**
         * @return {?}
         */
            function () {
                return !this.hideCancelButton && !this.isCompleted;
            };
        /**
         * @return {?}
         */
        TaskStandaloneComponent.prototype.hasAttachFormButton = /**
         * @return {?}
         */
            function () {
                return !this.isCompleted;
            };
        /**
         * @return {?}
         */
        TaskStandaloneComponent.prototype.onShowAttachForm = /**
         * @return {?}
         */
            function () {
                this.showAttachForm.emit();
            };
        TaskStandaloneComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-task-standalone',
                        template: "<mat-card class=\"adf-message-card\">\n    <mat-card-content>\n        <div class=\"adf-no-form-message-container\">\n            <div class=\"adf-no-form-message-list\">\n                <div *ngIf=\"!isCompleted; else completedMessage\" class=\"adf-no-form-message\">\n                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                </div>\n                <ng-template #completedMessage>\n                    <div id=\"adf-completed-form-message\" class=\"adf-no-form-message\">\n                        <p>{{'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_MESSAGE' | translate : {taskName : taskName} }}</p>\n                    </div>\n                    <div class=\"adf-no-form-submessage\">\n                        {{'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_SUB_MESSAGE' | translate}}\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n        <button mat-button *ngIf=\"hasAttachFormButton()\" id=\"adf-no-form-attach-form-button\" (click)=\"onShowAttachForm()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n        <div>\n            <button mat-button *ngIf=\"hasCancelButton()\" id=\"adf-no-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n            <button mat-button *ngIf=\"hasCompleteButton()\" id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onCompleteButtonClick()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        TaskStandaloneComponent.ctorParameters = function () { return []; };
        TaskStandaloneComponent.propDecorators = {
            taskName: [{ type: i0.Input }],
            taskId: [{ type: i0.Input }],
            isCompleted: [{ type: i0.Input }],
            hasCompletePermission: [{ type: i0.Input }],
            hideCancelButton: [{ type: i0.Input }],
            cancel: [{ type: i0.Output }],
            complete: [{ type: i0.Output }],
            showAttachForm: [{ type: i0.Output }]
        };
        return TaskStandaloneComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachFormComponent = /** @class */ (function () {
        function AttachFormComponent(taskService, logService, formService) {
            this.taskService = taskService;
            this.logService = logService;
            this.formService = formService;
            /**
             * Emitted when the "Cancel" button is clicked.
             */
            this.cancelAttachForm = new i0.EventEmitter();
            /**
             * Emitted when the form is attached successfully.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.disableSubmit = true;
        }
        /**
         * @return {?}
         */
        AttachFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.attachFormControl = new forms.FormControl('', forms.Validators.required);
                this.attachFormControl.valueChanges.subscribe(( /**
                 * @param {?} currentValue
                 * @return {?}
                 */function (currentValue) {
                    if (_this.attachFormControl.valid) {
                        if (_this.formId !== currentValue) {
                            _this.disableSubmit = false;
                        }
                        else {
                            _this.disableSubmit = true;
                        }
                    }
                }));
            };
        /**
         * @return {?}
         */
        AttachFormComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.formId = undefined;
                this.disableSubmit = true;
                this.loadFormsTask();
                if (this.formKey) {
                    this.onFormAttached();
                }
            };
        /**
         * @return {?}
         */
        AttachFormComponent.prototype.onCancelButtonClick = /**
         * @return {?}
         */
            function () {
                this.selectedFormId = this.formId;
                this.cancelAttachForm.emit();
            };
        /**
         * @return {?}
         */
        AttachFormComponent.prototype.onRemoveButtonClick = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.taskService.deleteForm(this.taskId).subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.formId = _this.selectedFormId = null;
                    _this.success.emit();
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                    _this.logService.error('An error occurred while trying to delete the form');
                }));
            };
        /**
         * @return {?}
         */
        AttachFormComponent.prototype.onAttachFormButtonClick = /**
         * @return {?}
         */
            function () {
                this.attachForm(this.taskId, this.selectedFormId);
            };
        /**
         * @private
         * @return {?}
         */
        AttachFormComponent.prototype.loadFormsTask = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.taskService.getFormList().subscribe(( /**
                 * @param {?} form
                 * @return {?}
                 */function (form) {
                    _this.forms = form;
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                    _this.logService.error('An error occurred while trying to get the forms');
                }));
            };
        /**
         * @private
         * @return {?}
         */
        AttachFormComponent.prototype.onFormAttached = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.formService.getTaskForm(this.taskId)
                    .subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    _this.formService.getFormDefinitionByName(res.name).subscribe(( /**
                     * @param {?} formDef
                     * @return {?}
                     */function (formDef) {
                        _this.formId = _this.selectedFormId = formDef;
                    }));
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                    _this.logService.error('Could not load forms');
                }));
            };
        /**
         * @private
         * @param {?} taskId
         * @param {?} formId
         * @return {?}
         */
        AttachFormComponent.prototype.attachForm = /**
         * @private
         * @param {?} taskId
         * @param {?} formId
         * @return {?}
         */
            function (taskId, formId) {
                var _this = this;
                if (taskId && formId) {
                    this.taskService.attachFormToATask(taskId, formId)
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this.success.emit();
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                        _this.logService.error('Could not attach form');
                    }));
                }
            };
        AttachFormComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-attach-form',
                        template: "<div class=\"adf-attach-form\">\n    <mat-card>\n        <mat-card-content>\n            <div class=\"adf-no-form-message-container\">\n                <mat-card-title class=\"mat-card-title\">\n                    <h4 class=\"adf-form-title\">{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_FORM' | translate }}</h4>\n                </mat-card-title>\n                <div class=\"adf-attach-form-row\">\n                    <mat-form-field class=\"adf-grid-full-width\">\n                        <mat-select [formControl]=\"attachFormControl\" placeholder=\"{{ 'ADF_TASK_LIST.ATTACH_FORM.SELECT_OPTION' | translate }}\" id=\"form_id\" [(ngModel)]=\"selectedFormId\">\n                            <mat-option *ngFor=\"let form of forms\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n\n                <adf-form *ngIf=\"this.attachFormControl.valid\"\n                    [formId]=\"selectedFormId\"\n                    [readOnly]=\"true\"\n                    [showCompleteButton]=\"false\"\n                    [showRefreshButton]=\"false\"\n                    [showValidationIcon]=\"false\">\n                </adf-form>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n            <div>\n                <button mat-button id=\"adf-no-form-remove-button\" color=\"warn\" *ngIf=\"formKey\" (click)=\"onRemoveButtonClick()\">{{ 'ADF_TASK_LIST.ATTACH_FORM.REMOVE_FORM' | translate }}</button>\n            </div>\n            <div>\n                <button mat-button id=\"adf-no-form-cancel-button\" (click)=\"onCancelButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL' | translate }}</button>\n                <button mat-button id=\"adf-no-form-attach-form-button\" [disabled]=\"disableSubmit\" color=\"primary\" (click)=\"onAttachFormButtonClick()\">{{ 'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM' | translate }}</button>\n            </div>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                        styles: [".adf-attach-form .mat-form-field{width:100%}.adf-attach-form-row{display:flex;justify-content:space-between;margin:20px 0}.adf-attach-form .adf-no-form-mat-card-actions{justify-content:space-between;margin-top:30px;text-align:right}"]
                    }] }
        ];
        /** @nocollapse */
        AttachFormComponent.ctorParameters = function () {
            return [
                { type: TaskListService },
                { type: i1$1.LogService },
                { type: i1$1.FormService }
            ];
        };
        AttachFormComponent.propDecorators = {
            taskId: [{ type: i0.Input }],
            formKey: [{ type: i0.Input }],
            cancelAttachForm: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return AttachFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessUploadService = /** @class */ (function (_super) {
        __extends(ProcessUploadService, _super);
        function ProcessUploadService(apiService, appConfigService) {
            return _super.call(this, apiService, appConfigService) || this;
        }
        /**
         * @param {?} file
         * @return {?}
         */
        ProcessUploadService.prototype.getUploadPromise = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                var _this = this;
                /** @type {?} */
                var opts = {
                    isRelatedContent: true
                };
                /** @type {?} */
                var processInstanceId = file.options.parentId;
                /** @type {?} */
                var promise = this.apiService.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file.file, opts);
                promise.catch(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); }));
                return promise;
            };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        ProcessUploadService.prototype.handleError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                return rxjs.throwError(error || 'Server error');
            };
        ProcessUploadService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProcessUploadService.ctorParameters = function () {
            return [
                { type: i1$1.AlfrescoApiService },
                { type: i1$1.AppConfigService }
            ];
        };
        /** @nocollapse */ ProcessUploadService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessUploadService_Factory() { return new ProcessUploadService(i0.inject(i1$1.AlfrescoApiService), i0.inject(i1$1.AppConfigService)); }, token: ProcessUploadService, providedIn: "root" });
        return ProcessUploadService;
    }(i1$1.UploadService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskUploadService = /** @class */ (function (_super) {
        __extends(TaskUploadService, _super);
        function TaskUploadService(apiService, appConfigService) {
            return _super.call(this, apiService, appConfigService) || this;
        }
        /**
         * @param {?} file
         * @return {?}
         */
        TaskUploadService.prototype.getUploadPromise = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                var _this = this;
                /** @type {?} */
                var opts = {
                    isRelatedContent: true
                };
                /** @type {?} */
                var taskId = file.options.parentId;
                /** @type {?} */
                var promise = this.apiService.getInstance().activiti.contentApi.createRelatedContentOnTask(taskId, file.file, opts);
                promise.catch(( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) { return _this.handleError(err); }));
                return promise;
            };
        /**
         * @private
         * @param {?} error
         * @return {?}
         */
        TaskUploadService.prototype.handleError = /**
         * @private
         * @param {?} error
         * @return {?}
         */
            function (error) {
                return rxjs.throwError(error || 'Server error');
            };
        TaskUploadService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TaskUploadService.ctorParameters = function () {
            return [
                { type: i1$1.AlfrescoApiService },
                { type: i1$1.AppConfigService }
            ];
        };
        /** @nocollapse */ TaskUploadService.ngInjectableDef = i0.defineInjectable({ factory: function TaskUploadService_Factory() { return new TaskUploadService(i0.inject(i1$1.AlfrescoApiService), i0.inject(i1$1.AppConfigService)); }, token: TaskUploadService, providedIn: "root" });
        return TaskUploadService;
    }(i1$1.UploadService));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StartTaskModel = /** @class */ (function () {
        function StartTaskModel(obj) {
            this.name = obj && obj.name || null;
            this.description = obj && obj.description || null;
            this.assignee = obj && obj.assignee ? new i1$1.UserProcessModel(obj.assignee) : null;
            this.dueDate = obj && obj.dueDate || null;
            this.formKey = obj && obj.formKey || null;
            this.category = obj && obj.category || null;
        }
        return StartTaskModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var TaskDetailsEvent = /** @class */ (function () {
        function TaskDetailsEvent(value) {
            this._defaultPrevented = false;
            this._value = value;
        }
        Object.defineProperty(TaskDetailsEvent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskDetailsEvent.prototype, "defaultPrevented", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultPrevented;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        TaskDetailsEvent.prototype.preventDefault = /**
         * @return {?}
         */
            function () {
                this._defaultPrevented = true;
            };
        return TaskDetailsEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This object represent the User Event.
     */
    var /**
     * This object represent the User Event.
     */ UserEventModel = /** @class */ (function () {
        function UserEventModel(obj) {
            this.type = '';
            this.value = {};
            this.type = obj && obj.type;
            this.value = obj && obj.value || {};
        }
        return UserEventModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This object represent the process service user group.*
     */
    var UserGroupModel = /** @class */ (function () {
        function UserGroupModel(obj) {
            this.groups = {};
            this.id = obj && obj.id;
            this.name = obj && obj.name;
            this.externalId = obj && obj.externalId;
            this.status = obj && obj.status;
            this.groups = obj && obj.groups;
        }
        return UserGroupModel;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function modules() {
        return [
            material.MatAutocompleteModule, material.MatButtonModule, material.MatCardModule, material.MatDialogModule,
            material.MatCheckboxModule, material.MatDatepickerModule, material.MatGridListModule, material.MatIconModule, material.MatInputModule,
            material.MatListModule, material.MatOptionModule, material.MatRadioModule, material.MatSelectModule, material.MatSlideToggleModule, material.MatTableModule,
            material.MatTabsModule, material.MatProgressSpinnerModule, material.MatNativeDateModule, material.MatRippleModule, material.MatTooltipModule,
            material.MatChipsModule, material.MatMenuModule
        ];
    }
    var ɵ0$1 = { float: 'never' };
    var MaterialModule = /** @class */ (function () {
        function MaterialModule() {
        }
        MaterialModule.decorators = [
            { type: i0.NgModule, args: [{
                        providers: [
                            { provide: material.MAT_LABEL_GLOBAL_OPTIONS, useValue: ɵ0$1 }
                        ],
                        imports: modules(),
                        exports: modules()
                    },] }
        ];
        return MaterialModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessCommentsComponent = /** @class */ (function () {
        function ProcessCommentsComponent(commentProcessService) {
            var _this = this;
            this.commentProcessService = commentProcessService;
            /**
             * Should the comments be read-only?
             */
            this.readOnly = true;
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.comments = [];
            this.beingAdded = false;
            this.comment$ = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) { return _this.commentObserver = observer; }))
                .pipe(operators.share());
            this.comment$.subscribe(( /**
             * @param {?} comment
             * @return {?}
             */function (comment) {
                _this.comments.push(comment);
            }));
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessCommentsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var processInstanceId = changes['processInstanceId'];
                if (processInstanceId) {
                    if (processInstanceId.currentValue) {
                        this.getProcessInstanceComments(processInstanceId.currentValue);
                    }
                    else {
                        this.resetComments();
                    }
                }
            };
        /**
         * @private
         * @param {?} processInstanceId
         * @return {?}
         */
        ProcessCommentsComponent.prototype.getProcessInstanceComments = /**
         * @private
         * @param {?} processInstanceId
         * @return {?}
         */
            function (processInstanceId) {
                var _this = this;
                this.resetComments();
                if (processInstanceId) {
                    this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        res = res.sort(( /**
                         * @param {?} comment1
                         * @param {?} comment2
                         * @return {?}
                         */function (comment1, comment2) {
                            /** @type {?} */
                            var date1 = new Date(comment1.created);
                            /** @type {?} */
                            var date2 = new Date(comment2.created);
                            return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;
                        }));
                        res.forEach(( /**
                         * @param {?} comment
                         * @return {?}
                         */function (comment) {
                            _this.commentObserver.next(comment);
                        }));
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        ProcessCommentsComponent.prototype.resetComments = /**
         * @private
         * @return {?}
         */
            function () {
                this.comments = [];
            };
        /**
         * @return {?}
         */
        ProcessCommentsComponent.prototype.add = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.message && this.message.trim() && !this.beingAdded) {
                    this.beingAdded = true;
                    this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)
                        .subscribe(( /**
                 * @param {?} res
                 * @return {?}
                 */function (res) {
                        _this.comments.unshift(res);
                        _this.message = '';
                        _this.beingAdded = false;
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                        _this.beingAdded = false;
                    }));
                }
            };
        /**
         * @return {?}
         */
        ProcessCommentsComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.message = '';
            };
        /**
         * @return {?}
         */
        ProcessCommentsComponent.prototype.isReadOnly = /**
         * @return {?}
         */
            function () {
                return this.readOnly;
            };
        /**
         * @param {?} error
         * @return {?}
         */
        ProcessCommentsComponent.prototype.onError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.error.emit(error);
            };
        ProcessCommentsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-instance-comments',
                        template: "<div class=\"adf-comments-container\">\n    <div id=\"comment-header\" class=\"adf-comments-header\">\n        {{'ADF_PROCESS_LIST.DETAILS.COMMENTS.HEADER' | translate: { count: comments?.length} }}\n    </div>\n    <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input matInput id=\"comment-input\" placeholder=\"{{'ADF_PROCESS_LIST.DETAILS.COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\" (keyup.enter)=\"add()\" (keyup.esc)=\"clear()\">\n        </mat-form-field>\n    </div>\n\n    <div *ngIf=\"comments.length > 0\">\n        <adf-comment-list [comments]=\"comments\">\n        </adf-comment-list>\n    </div>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ProcessCommentsComponent.ctorParameters = function () {
            return [
                { type: i1$1.CommentProcessService }
            ];
        };
        ProcessCommentsComponent.propDecorators = {
            processInstanceId: [{ type: i0.Input }],
            readOnly: [{ type: i0.Input }],
            error: [{ type: i0.Output }]
        };
        return ProcessCommentsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessCommentsModule = /** @class */ (function () {
        function ProcessCommentsModule() {
        }
        ProcessCommentsModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            MaterialModule,
                            common.CommonModule,
                            i1$1.CoreModule.forChild()
                        ],
                        declarations: [
                            ProcessCommentsComponent
                        ],
                        exports: [
                            ProcessCommentsComponent
                        ]
                    },] }
        ];
        return ProcessCommentsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PeopleComponent = /** @class */ (function () {
        function PeopleComponent(logService, peopleProcessService) {
            var _this = this;
            this.logService = logService;
            this.peopleProcessService = peopleProcessService;
            /**
             * The array of User objects to display.
             */
            this.people = [];
            /**
             * The numeric ID of the task.
             */
            this.taskId = '';
            /**
             * Should the data be read-only?
             */
            this.readOnly = false;
            this.showAssignment = false;
            this.peopleSearch$ = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) { return _this.peopleSearchObserver = observer; }))
                .pipe(operators.share());
        }
        /**
         * @return {?}
         */
        PeopleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.involveUserAndCloseSearch = /**
         * @return {?}
         */
            function () {
                if (this.peopleSearch) {
                    this.peopleSearch.involveUserAndClose();
                }
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.involveUserWithoutCloseSearch = /**
         * @return {?}
         */
            function () {
                if (this.peopleSearch) {
                    this.peopleSearch.involveUser();
                }
            };
        /**
         * @param {?} searchedWord
         * @return {?}
         */
        PeopleComponent.prototype.searchUser = /**
         * @param {?} searchedWord
         * @return {?}
         */
            function (searchedWord) {
                var _this = this;
                this.peopleProcessService.getWorkflowUsers(this.taskId, searchedWord)
                    .subscribe(( /**
             * @param {?} users
             * @return {?}
             */function (users) {
                    _this.peopleSearchObserver.next(users);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) { return _this.logService.error(error); }));
            };
        /**
         * @param {?} user
         * @return {?}
         */
        PeopleComponent.prototype.involveUser = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                var _this = this;
                this.peopleProcessService.involveUserWithTask(this.taskId, user.id.toString())
                    .subscribe(( /**
             * @return {?}
             */function () {
                    _this.people = __spread(_this.people, [user]);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) { return _this.logService.error('Impossible to involve user with task'); }));
            };
        /**
         * @param {?} user
         * @return {?}
         */
        PeopleComponent.prototype.removeInvolvedUser = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                var _this = this;
                this.peopleProcessService.removeInvolvedUser(this.taskId, user.id.toString())
                    .subscribe(( /**
             * @return {?}
             */function () {
                    _this.people = _this.people.filter(( /**
                     * @param {?} involvedUser
                     * @return {?}
                     */function (involvedUser) {
                        return involvedUser.id !== user.id;
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) { return _this.logService.error('Impossible to remove involved user from task'); }));
            };
        /**
         * @param {?} firstName
         * @param {?} lastName
         * @param {?=} delimiter
         * @return {?}
         */
        PeopleComponent.prototype.getDisplayUser = /**
         * @param {?} firstName
         * @param {?} lastName
         * @param {?=} delimiter
         * @return {?}
         */
            function (firstName, lastName, delimiter) {
                if (delimiter === void 0) {
                    delimiter = '-';
                }
                firstName = (firstName !== null ? firstName : '');
                lastName = (lastName !== null ? lastName : '');
                return firstName + delimiter + lastName;
            };
        /**
         * @param {?} firstName
         * @param {?} lastName
         * @return {?}
         */
        PeopleComponent.prototype.getInitialUserName = /**
         * @param {?} firstName
         * @param {?} lastName
         * @return {?}
         */
            function (firstName, lastName) {
                firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
                lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
                return this.getDisplayUser(firstName, lastName, '');
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.onAddAssignment = /**
         * @return {?}
         */
            function () {
                this.showAssignment = true;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PeopleComponent.prototype.onClickAction = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.type === 'remove') {
                    this.removeInvolvedUser(event.value);
                }
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.hasPeople = /**
         * @return {?}
         */
            function () {
                return this.people && this.people.length > 0;
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.isEditMode = /**
         * @return {?}
         */
            function () {
                return !this.readOnly;
            };
        /**
         * @return {?}
         */
        PeopleComponent.prototype.onCloseSearch = /**
         * @return {?}
         */
            function () {
                this.showAssignment = false;
            };
        PeopleComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-people',
                        template: "<mat-card class=\"adf-assignment-top-container\">\n    <div mat-card-content class=\"adf-assignment-top-container-content\">\n        <div class=\"assignment-header\">\n                <div *ngIf=\"hasPeople()\" class=\"adf-assignment-count\" id=\"people-title\">\n                    {{ 'ADF_TASK_LIST.DETAILS.LABELS.PEOPLE' | translate }} {{ ' (' + people.length + ')' }}\n                </div>\n                <div *ngIf=\"!hasPeople()\" class=\"adf-assignment-count\" id=\"no-people-label\">\n                    {{ 'ADF_TASK_LIST.DETAILS.PEOPLE.NONE' | translate }}\n                </div>\n                <div *ngIf=\"isEditMode()\" class=\"adf-add-people\" (click)=\"onAddAssignment()\">\n                    <mat-icon class=\"adf-add-person-icon\">person_add</mat-icon>\n                </div>\n            </div>\n            <div class=\"adf-assignment-container\" *ngIf=\"showAssignment\">\n                <adf-people-search\n                    #peopleSearch\n                    (searchPeople)=\"searchUser($event)\"\n                    (success)=\"involveUser($event)\"\n                    (closeSearch)=\"onCloseSearch()\"\n                    [results]=\"peopleSearch$\">\n                    <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_PEOPLE' | translate }}</ng-container>\n                    <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_USER' | translate }}</ng-container>\n                </adf-people-search>\n            </div>\n            <div class=\"adf-assignment-list-container\" id=\"assignment-people-list\" *ngIf=\"hasPeople()\">\n                <adf-people-list\n                [users]=\"people\"\n                [actions]=\"isEditMode()\"\n                (clickAction)=\"onClickAction($event)\">\n                    <data-columns>\n                        <data-column key=\"firstName\">\n                            <ng-template let-entry=\"$implicit\">\n                                <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-search-people-pic\">\n                                    {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                                <div>\n                                    <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                        [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                        <data-column key=\"email\" class=\"adf-full-width\">\n                            <ng-template let-entry=\"$implicit\">\n                                <div class=\"adf-people-user-info\">\n                                    <div class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                                    <div class=\"adf-people-email\">{{ entry.row.obj.email }}</div>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                    </data-columns>\n                </adf-people-list>\n            </div>\n    </div>\n</mat-card>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        PeopleComponent.ctorParameters = function () {
            return [
                { type: i1$1.LogService },
                { type: i1$1.PeopleProcessService }
            ];
        };
        PeopleComponent.propDecorators = {
            people: [{ type: i0.Input }],
            taskId: [{ type: i0.Input }],
            readOnly: [{ type: i0.Input }],
            peopleSearch: [{ type: i0.ViewChild, args: ['peopleSearch',] }]
        };
        return PeopleComponent;
    }());

    var PeopleListComponent = /** @class */ (function () {
        function PeopleListComponent() {
            /**
             * Toggles whether or not actions should be visible, i.e. the 'Three-Dots' menu.
             */
            this.actions = false;
            /**
             * Emitted when the user clicks a row in the people list.
             */
            this.clickRow = new i0.EventEmitter();
            /**
             * Emitted when the user clicks in the 'Three Dots' drop down menu for a row.
             */
            this.clickAction = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        PeopleListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.peopleDataTable.columnList = this.columnList;
            };
        /**
         * @return {?}
         */
        PeopleListComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PeopleListComponent.prototype.selectUser = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.user = event.value.obj;
                this.clickRow.emit(this.user);
            };
        /**
         * @return {?}
         */
        PeopleListComponent.prototype.hasActions = /**
         * @return {?}
         */
            function () {
                return this.actions;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PeopleListComponent.prototype.onShowRowActionsMenu = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var removeAction = {
                    title: 'Remove',
                    name: 'remove'
                };
                event.value.actions = [
                    removeAction
                ];
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PeopleListComponent.prototype.onExecuteRowAction = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var args = event.value;
                /** @type {?} */
                var action = args.action;
                this.clickAction.emit(new UserEventModel({ type: action.name, value: args.row.obj }));
            };
        PeopleListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-people-list',
                        template: "<adf-datatable\n    #dataTable\n    class=\"adf-task-people-list\"\n    [rows]=\"users\"\n    [actions]=\"hasActions()\"\n    [showHeader]=\"false\"\n    (rowClick)=\"selectUser($event)\"\n    (rowDblClick)=\"selectUser($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\">\n</adf-datatable>\n",
                        styles: [""]
                    }] }
        ];
        PeopleListComponent.propDecorators = {
            columnList: [{ type: i0.ContentChild, args: [i1$1.DataColumnListComponent,] }],
            peopleDataTable: [{ type: i0.ViewChild, args: ['dataTable',] }],
            users: [{ type: i0.Input }],
            actions: [{ type: i0.Input }],
            clickRow: [{ type: i0.Output }],
            clickAction: [{ type: i0.Output }]
        };
        return PeopleListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PeopleSearchComponent = /** @class */ (function () {
        function PeopleSearchComponent() {
            /**
             * Emitted when a search is performed with a new keyword.
             */
            this.searchPeople = new i0.EventEmitter();
            /**
             * Emitted when a user is selected and the action button is clicked.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when the "close" button is clicked.
             */
            this.closeSearch = new i0.EventEmitter();
            this.selectedUser = {};
        }
        /**
         * @return {?}
         */
        PeopleSearchComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.filteredResults$ = this.results
                    .pipe(operators.map(( /**
             * @param {?} users
             * @return {?}
             */function (users) {
                    return users.filter(( /**
                     * @param {?} user
                     * @return {?}
                     */function (user) { return user.id !== _this.selectedUser.id; }));
                })));
                this.performSearch = this.performSearchCallback.bind(this);
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        PeopleSearchComponent.prototype.performSearchCallback = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.searchPeople.emit(event);
                return this.filteredResults$;
            };
        /**
         * @param {?} user
         * @return {?}
         */
        PeopleSearchComponent.prototype.onRowClick = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                this.selectedUser = user;
            };
        /**
         * @return {?}
         */
        PeopleSearchComponent.prototype.closeSearchList = /**
         * @return {?}
         */
            function () {
                this.closeSearch.emit();
            };
        /**
         * @return {?}
         */
        PeopleSearchComponent.prototype.involveUserAndClose = /**
         * @return {?}
         */
            function () {
                this.involveUser();
                this.closeSearchList();
            };
        /**
         * @return {?}
         */
        PeopleSearchComponent.prototype.involveUser = /**
         * @return {?}
         */
            function () {
                if (this.selectedUser === undefined) {
                    return;
                }
                this.success.emit(this.selectedUser);
            };
        PeopleSearchComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-people-search',
                        template: "<div class=\"adf-search-text-header\">\n    <ng-content select=\"[adf-people-search-title], [people-search-title]\"></ng-content>\n</div>\n\n<adf-people-search-field [performSearch]=\"performSearch\" (rowClick)=\"onRowClick($event)\"></adf-people-search-field>\n\n<div class=\"search-list-action-container\">\n    <button mat-button type=\"button\" id=\"close-people-search\" (click)=\"closeSearchList()\">\n        {{'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE' | translate }}\n    </button>\n    <button mat-button type=\"button\" id=\"add-people\" (click)=\"involveUserAndClose()\">\n        <ng-content select=\"[adf-people-search-action-label], [people-search-action-label]\"></ng-content>\n    </button>\n</div>\n",
                        host: {
                            'class': 'adf-people-search'
                        },
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        PeopleSearchComponent.ctorParameters = function () { return []; };
        PeopleSearchComponent.propDecorators = {
            results: [{ type: i0.Input }],
            searchPeople: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            closeSearch: [{ type: i0.Output }]
        };
        return PeopleSearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @param {?=} delimiter
     * @return {?}
     */
    function getDisplayUser(firstName, lastName, delimiter) {
        if (delimiter === void 0) {
            delimiter = '-';
        }
        firstName = (firstName !== null ? firstName : '');
        lastName = (lastName !== null ? lastName : '');
        return firstName + delimiter + lastName;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PeopleSearchFieldComponent = /** @class */ (function () {
        function PeopleSearchFieldComponent(peopleProcessService, translationService) {
            var _this = this;
            this.peopleProcessService = peopleProcessService;
            this.translationService = translationService;
            this.rowClick = new i0.EventEmitter();
            this.searchUser = new forms.FormControl();
            this.defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';
            this.users$ = this.searchUser.valueChanges
                .pipe(operators.debounceTime(200), operators.switchMap(( /**
         * @param {?} searchWord
         * @return {?}
         */function (searchWord) {
                if (searchWord && searchWord.trim()) {
                    return _this.performSearch(searchWord);
                }
                else {
                    return rxjs.of([]);
                }
            })));
            this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);
        }
        /**
         * @return {?}
         */
        PeopleSearchFieldComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.searchUser.reset();
            };
        Object.defineProperty(PeopleSearchFieldComponent.prototype, "searchPlaceholder", {
            get: /**
             * @return {?}
             */ function () {
                return this.placeholder || this.defaultPlaceholder;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        PeopleSearchFieldComponent.prototype.onRowClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.rowClick.emit(event);
            };
        /**
         * @param {?} firstName
         * @param {?} lastName
         * @param {?=} delimiter
         * @return {?}
         */
        PeopleSearchFieldComponent.prototype.getDisplayUser = /**
         * @param {?} firstName
         * @param {?} lastName
         * @param {?=} delimiter
         * @return {?}
         */
            function (firstName, lastName, delimiter) {
                if (delimiter === void 0) {
                    delimiter = '-';
                }
                return getDisplayUser(firstName, lastName, delimiter);
            };
        /**
         * @param {?} firstName
         * @param {?} lastName
         * @return {?}
         */
        PeopleSearchFieldComponent.prototype.getInitialUserName = /**
         * @param {?} firstName
         * @param {?} lastName
         * @return {?}
         */
            function (firstName, lastName) {
                firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
                lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
                return this.getDisplayUser(firstName, lastName, '');
            };
        PeopleSearchFieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-people-search-field',
                        template: "<mat-form-field class=\"adf-search-text-container\">\n    <input\n        matInput\n        placeholder=\"{{ searchPlaceholder }}\"\n        type=\"text\"\n        id=\"userSearchText\"\n        [value]=\"\"\n        [formControl]=\"searchUser\"\n        data-automation-id=\"adf-people-search-input\">\n</mat-form-field>\n<ng-container *ngIf=\"users$ | async; let users\">\n    <div class=\"adf-search-list-container\" id=\"search-people-list\" *ngIf=\"users.length > 0\">\n        <adf-people-list [users]=\"users\" (clickRow)=\"onRowClick($event)\">\n            <data-columns>\n                <data-column key=\"firstName\">\n                    <ng-template let-entry=\"$implicit\">\n                            <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-pic\">\n                                {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                            <div>\n                                <img [alt]=\"getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ')\" *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                    [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                            </div>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"email\" class=\"adf-full-width\">\n                    <ng-template let-entry=\"$implicit\">\n                        <div class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n        </adf-people-list>\n    </div>\n</ng-container>\n",
                        host: { 'class': 'adf-people-search-field' },
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        PeopleSearchFieldComponent.ctorParameters = function () {
            return [
                { type: i1$1.PeopleProcessService },
                { type: i1$1.TranslationService }
            ];
        };
        PeopleSearchFieldComponent.propDecorators = {
            performSearch: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            rowClick: [{ type: i0.Output }]
        };
        return PeopleSearchFieldComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';
    var PeopleSelectorComponent = /** @class */ (function () {
        function PeopleSelectorComponent(peopleProcessService, logService, translationService) {
            this.peopleProcessService = peopleProcessService;
            this.logService = logService;
            this.translationService = translationService;
            this.peopleIdChange = new i0.EventEmitter();
            this.performSearch = this.searchUser.bind(this);
            this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);
        }
        /**
         * @param {?} searchWord
         * @return {?}
         */
        PeopleSelectorComponent.prototype.searchUser = /**
         * @param {?} searchWord
         * @return {?}
         */
            function (searchWord) {
                return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)
                    .pipe(operators.catchError(this.onSearchUserError.bind(this)));
            };
        /**
         * @private
         * @return {?}
         */
        PeopleSelectorComponent.prototype.onSearchUserError = /**
         * @private
         * @return {?}
         */
            function () {
                this.logService.error('getWorkflowUsers threw error');
                return rxjs.of([]);
            };
        /**
         * @param {?} user
         * @return {?}
         */
        PeopleSelectorComponent.prototype.userSelected = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                this.updateUserSelection(user);
            };
        /**
         * @return {?}
         */
        PeopleSelectorComponent.prototype.userDeselected = /**
         * @return {?}
         */
            function () {
                this.updateUserSelection(undefined);
            };
        /**
         * @private
         * @param {?} user
         * @return {?}
         */
        PeopleSelectorComponent.prototype.updateUserSelection = /**
         * @private
         * @param {?} user
         * @return {?}
         */
            function (user) {
                this.selectedUser = user;
                this.peopleIdChange.emit(user && user.id || undefined);
                this.searchFieldComponent.reset();
            };
        Object.defineProperty(PeopleSelectorComponent.prototype, "placeholder", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.selectedUser) {
                    return this.defaultPlaceholder;
                }
                return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');
            },
            enumerable: true,
            configurable: true
        });
        PeopleSelectorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-people-selector',
                        template: "<adf-people-search-field\n    #peopleSearchField\n    class=\"adf-people-selector-field\"\n    [performSearch]=\"performSearch\"\n    [placeholder]=\"placeholder\"\n    (rowClick)=\"userSelected($event)\">\n</adf-people-search-field>\n<button\n    *ngIf=\"selectedUser\"\n    mat-icon-button\n    class=\"adf-people-selector-deselect\"\n    data-automation-id=\"adf-people-selector-deselect\"\n    (click)=\"userDeselected()\">\n        <mat-icon>cancel</mat-icon>\n</button>\n",
                        host: { 'class': 'adf-people-selector' },
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        PeopleSelectorComponent.ctorParameters = function () {
            return [
                { type: i1$1.PeopleProcessService },
                { type: i1$1.LogService },
                { type: i1$1.TranslationService }
            ];
        };
        PeopleSelectorComponent.propDecorators = {
            peopleId: [{ type: i0.Input }],
            peopleIdChange: [{ type: i0.Output }],
            searchFieldComponent: [{ type: i0.ViewChild, args: ['peopleSearchField',] }]
        };
        return PeopleSelectorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Directive selectors without adf- prefix will be deprecated on 3.0.0
     */
    var PeopleSearchActionLabelDirective = /** @class */ (function () {
        function PeopleSearchActionLabelDirective() {
        }
        PeopleSearchActionLabelDirective.decorators = [
            { type: i0.Directive, args: [{ selector: 'adf-people-search-action-label, people-search-action-label' },] }
        ];
        return PeopleSearchActionLabelDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Directive selectors without adf- prefix will be deprecated on 3.0.0
     */
    var PeopleSearchTitleDirective = /** @class */ (function () {
        function PeopleSearchTitleDirective() {
        }
        PeopleSearchTitleDirective.decorators = [
            { type: i0.Directive, args: [{ selector: 'adf-people-search-title, people-search-title' },] }
        ];
        return PeopleSearchTitleDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PeopleModule = /** @class */ (function () {
        function PeopleModule() {
        }
        PeopleModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            MaterialModule,
                            common.CommonModule,
                            i1$1.CoreModule.forChild()
                        ],
                        declarations: [
                            PeopleComponent,
                            PeopleSearchComponent,
                            PeopleSearchFieldComponent,
                            PeopleSelectorComponent,
                            PeopleSearchTitleDirective,
                            PeopleSearchActionLabelDirective,
                            PeopleListComponent
                        ],
                        exports: [
                            PeopleComponent,
                            PeopleSearchComponent,
                            PeopleSearchFieldComponent,
                            PeopleSelectorComponent,
                            PeopleSearchTitleDirective,
                            PeopleSearchActionLabelDirective,
                            PeopleListComponent
                        ]
                    },] }
        ];
        return PeopleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachFileWidgetDialogComponent = /** @class */ (function () {
        function AttachFileWidgetDialogComponent(data, externalApiService) {
            this.data = data;
            this.externalApiService = externalApiService;
            (( /** @type {?} */(externalApiService))).init(data.ecmHost, data.context);
            this.buttonActionName = data.actionName ? "ATTACH-FILE.ACTIONS." + data.actionName.toUpperCase() : 'ATTACH-FILE.ACTIONS.CHOOSE';
        }
        /**
         * @return {?}
         */
        AttachFileWidgetDialogComponent.prototype.isLoggedIn = /**
         * @return {?}
         */
            function () {
                return this.externalApiService.getInstance().isLoggedIn();
            };
        /**
         * @return {?}
         */
        AttachFileWidgetDialogComponent.prototype.performLogin = /**
         * @return {?}
         */
            function () {
                this.loginPanel.submitForm();
            };
        /**
         * @return {?}
         */
        AttachFileWidgetDialogComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.data.selected.complete();
            };
        /**
         * @param {?} nodeList
         * @return {?}
         */
        AttachFileWidgetDialogComponent.prototype.onSelect = /**
         * @param {?} nodeList
         * @return {?}
         */
            function (nodeList) {
                if (nodeList && nodeList[0].isFile) {
                    this.chosenNode = nodeList;
                }
                else {
                    this.chosenNode = null;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AttachFileWidgetDialogComponent.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.data.selected.next(this.chosenNode);
                this.data.selected.complete();
            };
        AttachFileWidgetDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-attach-file-widget-dialog',
                        template: "<header\n    mat-dialog-title\n    data-automation-id=\"content-node-selector-title\">{{data?.title}}\n</header>\n\n<mat-dialog-content class=\"adf-login-dialog-content\">\n    <adf-login-dialog-panel id=\"attach-file-login-panel\" #adfLoginPanel *ngIf=\"!isLoggedIn()\">\n    </adf-login-dialog-panel>\n    <adf-content-node-selector-panel *ngIf=\"isLoggedIn()\"\n                                     id=\"attach-file-content-node\"\n                                     [isSelectionValid]=\"data?.isSelectionValid\"\n                                     (select)=\"onSelect($event)\">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"end\">\n    <button\n        mat-button\n        (click)=\"close()\"\n        data-automation-id=\"attach-file-dialog-actions-cancel\">{{ 'ATTACH-FILE.ACTIONS.CANCEL' | translate }}\n    </button>\n\n    <button *ngIf=\"!isLoggedIn()\"\n        mat-button\n        (click)=\"performLogin()\"\n        data-automation-id=\"attach-file-dialog-actions-login\">{{ 'ATTACH-FILE.ACTIONS.LOGIN' | translate }}\n    </button>\n\n    <button *ngIf=\"isLoggedIn()\"\n        mat-button\n        [disabled]=\"!chosenNode\"\n        class=\"adf-choose-action\"\n        (click)=\"onClick($event)\"\n        data-automation-id=\"attach-file-dialog-actions-choose\">{{ buttonActionName | translate }}\n    </button>\n\n</mat-dialog-actions>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        providers: [i1$1.AuthenticationService,
                            adfContentServices.DocumentListService,
                            i1$1.SitesService,
                            adfContentServices.ContentNodeSelectorService,
                            i1$1.SearchService,
                            { provide: i1$1.AlfrescoApiService, useClass: i1$1.ExternalAlfrescoApiService }],
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AttachFileWidgetDialogComponent.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [material.MAT_DIALOG_DATA,] }] },
                { type: i1$1.AlfrescoApiService }
            ];
        };
        AttachFileWidgetDialogComponent.propDecorators = {
            loginPanel: [{ type: i0.ViewChild, args: ['adfLoginPanel',] }]
        };
        return AttachFileWidgetDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachFileWidgetDialogService = /** @class */ (function () {
        function AttachFileWidgetDialogService(dialog) {
            this.dialog = dialog;
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
        }
        /**
         * Opens a dialog to choose a file to upload.
         * @param action Name of the action to show in the title
         * @param contentEntry Item to upload
         * @returns Information about the chosen file(s)
         */
        /**
         * Opens a dialog to choose a file to upload.
         * @param {?} ecmHost
         * @param {?=} actionName
         * @param {?=} context
         * @return {?} Information about the chosen file(s)
         */
        AttachFileWidgetDialogService.prototype.openLogin = /**
         * Opens a dialog to choose a file to upload.
         * @param {?} ecmHost
         * @param {?=} actionName
         * @param {?=} context
         * @return {?} Information about the chosen file(s)
         */
            function (ecmHost, actionName, context) {
                /** @type {?} */
                var titleString = "Please log in for " + ecmHost;
                /** @type {?} */
                var selected = new rxjs.Subject();
                selected.subscribe({
                    complete: this.close.bind(this)
                });
                /** @type {?} */
                var data = {
                    title: titleString,
                    actionName: actionName,
                    selected: selected,
                    ecmHost: ecmHost,
                    context: context,
                    isSelectionValid: this.isNodeFile.bind(this)
                };
                this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');
                return selected;
            };
        /**
         * @private
         * @param {?} data
         * @param {?} currentPanelClass
         * @param {?} chosenWidth
         * @return {?}
         */
        AttachFileWidgetDialogService.prototype.openLoginDialog = /**
         * @private
         * @param {?} data
         * @param {?} currentPanelClass
         * @param {?} chosenWidth
         * @return {?}
         */
            function (data, currentPanelClass, chosenWidth) {
                this.dialog.open(AttachFileWidgetDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
            };
        /** Closes the currently open dialog. */
        /**
         * Closes the currently open dialog.
         * @return {?}
         */
        AttachFileWidgetDialogService.prototype.close = /**
         * Closes the currently open dialog.
         * @return {?}
         */
            function () {
                this.dialog.closeAll();
            };
        /**
         * @private
         * @param {?} entry
         * @return {?}
         */
        AttachFileWidgetDialogService.prototype.isNodeFile = /**
         * @private
         * @param {?} entry
         * @return {?}
         */
            function (entry) {
                return entry.isFile;
            };
        AttachFileWidgetDialogService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AttachFileWidgetDialogService.ctorParameters = function () {
            return [
                { type: material.MatDialog }
            ];
        };
        AttachFileWidgetDialogService.propDecorators = {
            error: [{ type: i0.Output }]
        };
        /** @nocollapse */ AttachFileWidgetDialogService.ngInjectableDef = i0.defineInjectable({ factory: function AttachFileWidgetDialogService_Factory() { return new AttachFileWidgetDialogService(i0.inject(i1.MatDialog)); }, token: AttachFileWidgetDialogService, providedIn: "root" });
        return AttachFileWidgetDialogService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachFileWidgetComponent = /** @class */ (function (_super) {
        __extends(AttachFileWidgetComponent, _super);
        function AttachFileWidgetComponent(formService, logger, thumbnails, processContentService, activitiContentService, contentService, contentDialog, appConfigService, attachDialogService) {
            var _this = _super.call(this, formService, logger, thumbnails, processContentService) || this;
            _this.formService = formService;
            _this.logger = logger;
            _this.thumbnails = thumbnails;
            _this.processContentService = processContentService;
            _this.activitiContentService = activitiContentService;
            _this.contentService = contentService;
            _this.contentDialog = contentDialog;
            _this.appConfigService = appConfigService;
            _this.attachDialogService = attachDialogService;
            _this.repositoryList = [];
            _this.tempFilesList = [];
            return _this;
        }
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.field &&
                    this.field.value &&
                    this.field.value.length > 0) {
                    this.hasFile = true;
                }
                this.getMultipleFileParam();
                this.activitiContentService.getAlfrescoRepositories(null, true).subscribe(( /**
                 * @param {?} repoList
                 * @return {?}
                 */function (repoList) {
                    _this.repositoryList = repoList;
                }));
                this.formService.taskSaved.subscribe(( /**
                 * @param {?} formSaved
                 * @return {?}
                 */function (formSaved) {
                    if (formSaved.form.id === _this.field.form.id) {
                        _this.tempFilesList = [];
                    }
                }));
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isFileSourceConfigured = /**
         * @return {?}
         */
            function () {
                return !!this.field.params && !!this.field.params.fileSource;
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isMultipleSourceUpload = /**
         * @return {?}
         */
            function () {
                return !this.field.readOnly && this.isFileSourceConfigured() && !this.isOnlyLocalSourceSelected();
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isAllFileSourceSelected = /**
         * @return {?}
         */
            function () {
                return this.field.params &&
                    this.field.params.fileSource &&
                    this.field.params.fileSource.serviceId === 'all-file-sources';
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isOnlyLocalSourceSelected = /**
         * @return {?}
         */
            function () {
                return this.field.params &&
                    this.field.params.fileSource &&
                    this.field.params.fileSource.serviceId === 'local-file';
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isSimpleUploadButton = /**
         * @return {?}
         */
            function () {
                return this.isUploadButtonVisible() &&
                    !this.isFileSourceConfigured() ||
                    this.isOnlyLocalSourceSelected();
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isUploadButtonVisible = /**
         * @return {?}
         */
            function () {
                return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isDefinedSourceFolder = /**
         * @return {?}
         */
            function () {
                return !!this.field.params &&
                    !!this.field.params.fileSource &&
                    !!this.field.params.fileSource.selectedFolder;
            };
        /**
         * @param {?} file
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.isTemporaryFile = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                return this.tempFilesList.findIndex(( /**
                 * @param {?} elem
                 * @return {?}
                 */function (elem) { return elem.name === file.name; })) >= 0;
            };
        /**
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.openSelectDialogFromFileSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var params = this.field.params;
                if (this.isDefinedSourceFolder()) {
                    this.contentDialog.openFileBrowseDialogByFolderId(params.fileSource.selectedFolder.pathId).subscribe(( /**
                     * @param {?} selections
                     * @return {?}
                     */function (selections) {
                        var _a;
                        (_a = _this.tempFilesList).push.apply(_a, __spread(selections));
                        _this.uploadFileFromCS(selections, _this.field.params.fileSource.selectedFolder.accountId, _this.field.params.fileSource.selectedFolder.siteId);
                    }));
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.onAttachFileChanged = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _a;
                (_a = this.tempFilesList).push.apply(_a, __spread(Array.from(event.target.files)));
                this.onFileChanged(event);
            };
        /**
         * @param {?} file
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.onRemoveAttachFile = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                if (this.isTemporaryFile(file)) {
                    this.tempFilesList.splice(this.tempFilesList.indexOf((( /** @type {?} */(file))).contentBlob), 1);
                }
                this.removeFile(file);
            };
        /**
         * @param {?} file
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.onAttachFileClicked = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                if (file.isExternal) {
                    this.logger.info("The file " + file.name + " comes from an external source and cannot be showed at this moment");
                    return;
                }
                if (this.isTemporaryFile(file)) {
                    this.formService.formContentClicked.next(file);
                }
                else {
                    this.fileClicked(file);
                }
            };
        /**
         * @param {?} file
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.downloadContent = /**
         * @param {?} file
         * @return {?}
         */
            function (file) {
                var _this = this;
                if (this.isTemporaryFile(file)) {
                    this.contentService.downloadBlob((( /** @type {?} */(file))).contentBlob, file.name);
                }
                else {
                    this.processContentService.getFileRawContent((( /** @type {?} */(file))).id).subscribe(( /**
                     * @param {?} blob
                     * @return {?}
                     */function (blob) {
                        _this.contentService.downloadBlob(blob, (( /** @type {?} */(file))).name);
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.logger.error('Impossible retrieve content for download');
                    }));
                }
            };
        /**
         * @param {?} repository
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.openSelectDialog = /**
         * @param {?} repository
         * @return {?}
         */
            function (repository) {
                var _this = this;
                /** @type {?} */
                var accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;
                /** @type {?} */
                var currentECMHost = this.getDomainHost(this.appConfigService.get(i1$1.AppConfigValues.ECMHOST));
                /** @type {?} */
                var chosenRepositoryHost = this.getDomainHost(repository.repositoryUrl);
                if (chosenRepositoryHost !== currentECMHost) {
                    /** @type {?} */
                    var formattedRepositoryHost = repository.repositoryUrl.replace('/alfresco', '');
                    this.attachDialogService.openLogin(formattedRepositoryHost).subscribe(( /**
                     * @param {?} selections
                     * @return {?}
                     */function (selections) {
                        var _a;
                        selections.forEach(( /**
                         * @param {?} node
                         * @return {?}
                         */function (node) { return node.isExternal = true; }));
                        (_a = _this.tempFilesList).push.apply(_a, __spread(selections));
                        _this.uploadFileFromCS(selections, accountIdentifier);
                    }));
                }
                else {
                    this.contentDialog.openFileBrowseDialogBySite().subscribe(( /**
                     * @param {?} selections
                     * @return {?}
                     */function (selections) {
                        var _a;
                        (_a = _this.tempFilesList).push.apply(_a, __spread(selections));
                        _this.uploadFileFromCS(selections, accountIdentifier);
                    }));
                }
            };
        /**
         * @private
         * @param {?} fileNodeList
         * @param {?} accountId
         * @param {?=} siteId
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.uploadFileFromCS = /**
         * @private
         * @param {?} fileNodeList
         * @param {?} accountId
         * @param {?=} siteId
         * @return {?}
         */
            function (fileNodeList, accountId, siteId) {
                var _this = this;
                /** @type {?} */
                var filesSaved = [];
                rxjs.from(fileNodeList).pipe(operators.mergeMap(( /**
                 * @param {?} node
                 * @return {?}
                 */function (node) {
                    return rxjs.zip(rxjs.of(node.content.mimeType), _this.activitiContentService.applyAlfrescoNode(node, siteId, accountId), rxjs.of(node.isExternal));
                })))
                    .subscribe(( /**
             * @param {?} __0
             * @return {?}
             */function (_a) {
                    var _b = __read(_a, 3), mimeType = _b[0], res = _b[1], isExternal = _b[2];
                    res.mimeType = mimeType;
                    res.isExternal = isExternal;
                    filesSaved.push(res);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.logger.error(error);
                }), ( /**
                 * @return {?}
                 */function () {
                    _this.field.value = filesSaved;
                    _this.field.json.value = filesSaved;
                    _this.hasFile = true;
                }));
            };
        /**
         * @private
         * @param {?} urlToCheck
         * @return {?}
         */
        AttachFileWidgetComponent.prototype.getDomainHost = /**
         * @private
         * @param {?} urlToCheck
         * @return {?}
         */
            function (urlToCheck) {
                /** @type {?} */
                var result = urlToCheck.match('^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)');
                return result[1];
            };
        AttachFileWidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'attach-widget',
                        template: "<div class=\"adf-attach-widget {{field.className}}\"\n    [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}\n        <span *ngIf=\"isRequired()\">*</span>\n    </label>\n    <div class=\"adf-attach-widget-container\">\n        <div id=\"adf-attach-widget-simple-upload\" *ngIf=\"isSimpleUploadButton() && isUploadButtonVisible()\">\n            <a mat-raised-button color=\"primary\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                        [multiple]=\"multipleOption\"\n                        type=\"file\"\n                        [id]=\"field.id\"\n                        (change)=\"onAttachFileChanged($event)\" />\n            </a>\n        </div>\n        <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible() && isMultipleSourceUpload()\">\n            <button mat-raised-button color=\"primary\" [matMenuTriggerFor]=\"menu\" [id]=\"field.id\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                    <mat-icon>attach_file</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" class=\"adf-attach-widget__menu-content\">\n                <button mat-menu-item (click)=\"uploadFile.click()\"\n                        id=\"attach-local-file\"\n                        *ngIf=\"isAllFileSourceSelected()\">\n                    {{ 'FORM.FIELD.LOCALSTORAGE' | translate }}\n                    <mat-icon>file_upload</mat-icon>\n                    <input #uploadFile\n                            class=\"adf-attach-widget__input-type\"\n                            [multiple]=\"multipleOption\"\n                            type=\"file\"\n                            [id]=\"field.id\"\n                            (change)=\"onAttachFileChanged($event)\" />\n                </button>\n                <button mat-menu-item\n                        *ngIf=\"isDefinedSourceFolder()\"\n                        id=\"attach-{{field.params?.fileSource?.name}}\"\n                        (click)=\"openSelectDialogFromFileSource()\">\n                        {{field.params?.fileSource?.name}}\n                        <mat-icon>\n                            <img alt=\"alfresco\" class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                        </mat-icon>\n                </button>\n                <div *ngIf=\"!isDefinedSourceFolder()\">\n                    <button mat-menu-item *ngFor=\"let repo of repositoryList\"\n                            id=\"attach-{{repo?.name}}\"\n                           (click)=\"openSelectDialog(repo)\">\n                            {{repo.name}}\n                            <mat-icon>\n                                <img alt=\"alfresco\" class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                            </mat-icon>\n                    </button>\n                </div>\n            </mat-menu>\n        </div>\n    </div>\n</div>\n\n<div id=\"adf-attach-widget-readonly-list\">\n    <mat-list *ngIf=\"hasFile\">\n        <mat-list-item class=\"adf-attach-files-row\" *ngFor=\"let file of field.value\">\n            <img mat-list-icon class=\"adf-attach-widget__icon\"\n                 [id]=\"'file-'+file.id+'-icon'\"\n                 [src]=\"file.content ? getIcon(file.content.mimeType) : getIcon(file.mimeType)\"\n                 [alt]=\"mimeTypeIcon\"\n                 (click)=\"onAttachFileClicked(file)\"\n                 (keyup.enter)=\"onAttachFileClicked(file)\"\n                 role=\"button\"\n                 tabindex=\"0\"/>\n            <span matLine id=\"{{'file-'+file.id}}\" (click)=\"onAttachFileClicked(file)\" (keyup.enter)=\"onAttachFileClicked(file)\"\n                  role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n            <button id=\"{{'file-'+file.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                <button id=\"{{'file-'+file.id+'-show-file'}}\"\n                    [disabled]=\"file.isExternal\"\n                    mat-menu-item (click)=\"onAttachFileClicked(file)\">\n                    <mat-icon>image</mat-icon>\n                    <span>{{ 'FORM.FIELD.SHOW_FILE' | translate }}</span>\n                </button>\n                <button id=\"{{'file-'+file.id+'-download-file'}}\"\n                    mat-menu-item (click)=\"downloadContent(file)\">\n                    <mat-icon>file_download</mat-icon>\n                    <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                </button>\n                <button *ngIf=\"!field.readOnly\" id=\"{{'file-'+file.id+'-remove-file'}}\"\n                        mat-menu-item [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(file);\" (keyup.enter)=\"onRemoveAttachFile(file);\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                </button>\n            </mat-menu>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<error-widget [error]=\"field.validationSummary\"></error-widget>\n<error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n",
                        host: {
                            '(click)': 'event($event)',
                            '(blur)': 'event($event)',
                            '(change)': 'event($event)',
                            '(focus)': 'event($event)',
                            '(focusin)': 'event($event)',
                            '(focusout)': 'event($event)',
                            '(input)': 'event($event)',
                            '(invalid)': 'event($event)',
                            '(select)': 'event($event)'
                        },
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [".adf-attach-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{display:flex;align-items:center}.adf-attach-widget__input-type{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-widget__icon{padding:6px;float:left;cursor:pointer}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row .mat-line{margin-bottom:0}"]
                    }] }
        ];
        /** @nocollapse */
        AttachFileWidgetComponent.ctorParameters = function () {
            return [
                { type: i1$1.FormService },
                { type: i1$1.LogService },
                { type: i1$1.ThumbnailService },
                { type: i1$1.ProcessContentService },
                { type: i1$1.ActivitiContentService },
                { type: i1$1.ContentService },
                { type: adfContentServices.ContentNodeDialogService },
                { type: i1$1.AppConfigService },
                { type: AttachFileWidgetDialogService }
            ];
        };
        return AttachFileWidgetComponent;
    }(i1$1.UploadWidgetComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachFolderWidgetComponent = /** @class */ (function (_super) {
        __extends(AttachFolderWidgetComponent, _super);
        function AttachFolderWidgetComponent(contentDialog, formService, nodeService) {
            var _this = _super.call(this) || this;
            _this.contentDialog = contentDialog;
            _this.formService = formService;
            _this.nodeService = nodeService;
            _this.hasFolder = false;
            _this.selectedFolderName = '';
            return _this;
        }
        /**
         * @return {?}
         */
        AttachFolderWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.field &&
                    this.field.value) {
                    this.hasFolder = true;
                    this.nodeService.getNode(this.field.value).subscribe(( /**
                     * @param {?} node
                     * @return {?}
                     */function (node) {
                        _this.selectedFolderName = node.name;
                    }));
                }
            };
        /**
         * @return {?}
         */
        AttachFolderWidgetComponent.prototype.isDefinedSourceFolder = /**
         * @return {?}
         */
            function () {
                return !!this.field.params &&
                    !!this.field.params.folderSource &&
                    !!this.field.params.folderSource.selectedFolder;
            };
        /**
         * @return {?}
         */
        AttachFolderWidgetComponent.prototype.openSelectDialogFromFileSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var params = this.field.params;
                if (this.isDefinedSourceFolder()) {
                    this.contentDialog.openFolderBrowseDialogByFolderId(params.folderSource.selectedFolder.pathId).subscribe(( /**
                     * @param {?} selections
                     * @return {?}
                     */function (selections) {
                        _this.selectedFolderName = selections[0].name;
                        _this.field.value = selections[0].id;
                        _this.hasFolder = true;
                    }));
                }
                else {
                    this.contentDialog.openFolderBrowseDialogBySite().subscribe(( /**
                     * @param {?} selections
                     * @return {?}
                     */function (selections) {
                        _this.selectedFolderName = selections[0].name;
                        _this.field.value = selections[0].id;
                        _this.hasFolder = true;
                    }));
                }
            };
        /**
         * @return {?}
         */
        AttachFolderWidgetComponent.prototype.removeFolder = /**
         * @return {?}
         */
            function () {
                this.field.value = null;
                this.selectedFolderName = '';
                this.hasFolder = false;
            };
        AttachFolderWidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'attach-folder-widget',
                        template: "<div class=\"adf-attach-folder-widget {{field.className}}\"\n     [class.adf-invalid]=\"!field.isValid\"\n     [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n    <div class=\"adf-attach-folder-widget-container\">\n        <div *ngIf=\"hasFolder\" class=\"adf-attach-folder-result\">\n            <mat-icon>folder</mat-icon>\n            <div class=\"adf-attach-folder-files-row\">\n                <span matLine id=\"{{'folder-'+field?.id}}\"\n                        role=\"button\" tabindex=\"0\" class=\"adf-folder\">{{selectedFolderName}}</span>\n                <button *ngIf=\"!field.readOnly\" mat-icon-button [id]=\"'folder-'+field?.id+'-remove'\"\n                        (click)=\"removeFolder();\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                </button>\n            </div>\n        </div>\n\n        <div class=\"button-row\" *ngIf=\"!hasFolder && !field.readOnly\">\n            <button mat-raised-button\n                color=\"primary\"\n                (click)=\"openSelectDialogFromFileSource()\"\n                [id]=\"'folder-'+field?.id+'-button'\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>cloud_upload</mat-icon>\n            </button>\n        </div>\n    </div>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                        host: {
                            '(click)': 'event($event)',
                            '(blur)': 'event($event)',
                            '(change)': 'event($event)',
                            '(focus)': 'event($event)',
                            '(focusin)': 'event($event)',
                            '(focusout)': 'event($event)',
                            '(input)': 'event($event)',
                            '(invalid)': 'event($event)',
                            '(select)': 'event($event)'
                        },
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [".adf-attach-folder-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-folder-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-folder-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-folder-files-row{padding-left:8px}.adf-attach-folder-files-row .mat-line{margin-bottom:0}.adf-attach-folder-result{display:flex;align-items:center}"]
                    }] }
        ];
        /** @nocollapse */
        AttachFolderWidgetComponent.ctorParameters = function () {
            return [
                { type: adfContentServices.ContentNodeDialogService },
                { type: i1$1.FormService },
                { type: i1$1.NodesApiService }
            ];
        };
        return AttachFolderWidgetComponent;
    }(i1$1.WidgetComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ContentWidgetModule = /** @class */ (function () {
        function ContentWidgetModule() {
        }
        ContentWidgetModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$1.CoreModule.forChild(),
                            adfContentServices.ContentNodeSelectorModule,
                            MaterialModule
                        ],
                        entryComponents: [
                            AttachFileWidgetComponent,
                            AttachFolderWidgetComponent,
                            AttachFileWidgetDialogComponent
                        ],
                        declarations: [
                            AttachFileWidgetComponent,
                            AttachFolderWidgetComponent,
                            AttachFileWidgetDialogComponent
                        ],
                        exports: [
                            AttachFileWidgetComponent,
                            AttachFolderWidgetComponent,
                            AttachFileWidgetDialogComponent
                        ]
                    },] }
        ];
        return ContentWidgetModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormComponent = /** @class */ (function (_super) {
        __extends(FormComponent, _super);
        function FormComponent(formService, visibilityService, ecmModelService, nodeService, formRenderingService) {
            var _this = _super.call(this) || this;
            _this.formService = formService;
            _this.visibilityService = visibilityService;
            _this.ecmModelService = ecmModelService;
            _this.nodeService = nodeService;
            _this.formRenderingService = formRenderingService;
            /**
             * Toggle saving of form metadata.
             */
            _this.saveMetadata = false;
            /**
             * Emitted when the form is submitted with the `Save` or custom outcomes.
             */
            _this.formSaved = new i0.EventEmitter();
            /**
             * Emitted when the form is submitted with the `Complete` outcome.
             */
            _this.formCompleted = new i0.EventEmitter();
            /**
             * Emitted when form content is clicked.
             */
            _this.formContentClicked = new i0.EventEmitter();
            /**
             * Emitted when the form is loaded or reloaded.
             */
            _this.formLoaded = new i0.EventEmitter();
            /**
             * Emitted when form values are refreshed due to a data property change.
             */
            _this.formDataRefreshed = new i0.EventEmitter();
            _this.debugMode = false;
            _this.subscriptions = [];
            _this.formRenderingService.setComponentTypeResolver('upload', ( /**
             * @return {?}
             */function () { return AttachFileWidgetComponent; }), true);
            _this.formRenderingService.setComponentTypeResolver('select-folder', ( /**
             * @return {?}
             */function () { return AttachFolderWidgetComponent; }), true);
            return _this;
        }
        /**
         * @return {?}
         */
        FormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscriptions.push(this.formService.formContentClicked.subscribe(( /**
                 * @param {?} content
                 * @return {?}
                 */function (content) {
                    _this.formContentClicked.emit(content);
                })), this.formService.validateForm.subscribe(( /**
                 * @param {?} validateFormEvent
                 * @return {?}
                 */function (validateFormEvent) {
                    if (validateFormEvent.errorsField.length > 0) {
                        _this.formError.next(validateFormEvent.errorsField);
                    }
                })));
            };
        /**
         * @return {?}
         */
        FormComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscriptions.forEach(( /**
                 * @param {?} subscription
                 * @return {?}
                 */function (subscription) { return subscription.unsubscribe(); }));
                this.subscriptions = [];
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FormComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var taskId = changes['taskId'];
                if (taskId && taskId.currentValue) {
                    this.getFormByTaskId(taskId.currentValue);
                    return;
                }
                /** @type {?} */
                var formId = changes['formId'];
                if (formId && formId.currentValue) {
                    this.getFormDefinitionByFormId(formId.currentValue);
                    return;
                }
                /** @type {?} */
                var formName = changes['formName'];
                if (formName && formName.currentValue) {
                    this.getFormDefinitionByFormName(formName.currentValue);
                    return;
                }
                /** @type {?} */
                var nodeId = changes['nodeId'];
                if (nodeId && nodeId.currentValue) {
                    this.loadFormForEcmNode(nodeId.currentValue);
                    return;
                }
                /** @type {?} */
                var data = changes['data'];
                if (data && data.currentValue) {
                    this.refreshFormData();
                    return;
                }
            };
        /**
         * Invoked when user clicks form refresh button.
         */
        /**
         * Invoked when user clicks form refresh button.
         * @return {?}
         */
        FormComponent.prototype.onRefreshClicked = /**
         * Invoked when user clicks form refresh button.
         * @return {?}
         */
            function () {
                this.loadForm();
            };
        /**
         * @return {?}
         */
        FormComponent.prototype.loadForm = /**
         * @return {?}
         */
            function () {
                if (this.taskId) {
                    this.getFormByTaskId(this.taskId);
                    return;
                }
                if (this.formId) {
                    this.getFormDefinitionByFormId(this.formId);
                    return;
                }
                if (this.formName) {
                    this.getFormDefinitionByFormName(this.formName);
                    return;
                }
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        FormComponent.prototype.findProcessVariablesByTaskId = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                return this.formService.getTask(taskId).pipe(operators.switchMap(( /**
                 * @param {?} task
                 * @return {?}
                 */function (task) {
                    if (_this.isAProcessTask(task)) {
                        return _this.visibilityService.getTaskProcessVariable(taskId);
                    }
                    else {
                        return rxjs.of({});
                    }
                })));
            };
        /**
         * @param {?} taskRepresentation
         * @return {?}
         */
        FormComponent.prototype.isAProcessTask = /**
         * @param {?} taskRepresentation
         * @return {?}
         */
            function (taskRepresentation) {
                return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
            };
        /**
         * @param {?} taskId
         * @return {?}
         */
        FormComponent.prototype.getFormByTaskId = /**
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                return new Promise(( /**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */function (resolve, reject) {
                    _this.findProcessVariablesByTaskId(taskId).subscribe(( /**
                     * @param {?} processVariables
                     * @return {?}
                     */function (processVariables) {
                        _this.formService
                            .getTaskForm(taskId)
                            .subscribe(( /**
                     * @param {?} form
                     * @return {?}
                     */function (form) {
                            /** @type {?} */
                            var parsedForm = _this.parseForm(form);
                            _this.visibilityService.refreshVisibility(parsedForm);
                            parsedForm.validateForm();
                            _this.form = parsedForm;
                            _this.onFormLoaded(_this.form);
                            resolve(_this.form);
                        }), ( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) {
                            _this.handleError(error);
                            // reject(error);
                            resolve(null);
                        }));
                    }));
                }));
            };
        /**
         * @param {?} formId
         * @return {?}
         */
        FormComponent.prototype.getFormDefinitionByFormId = /**
         * @param {?} formId
         * @return {?}
         */
            function (formId) {
                var _this = this;
                this.formService
                    .getFormDefinitionById(formId)
                    .subscribe(( /**
             * @param {?} form
             * @return {?}
             */function (form) {
                    _this.formName = form.name;
                    _this.form = _this.parseForm(form);
                    _this.visibilityService.refreshVisibility(_this.form);
                    _this.form.validateForm();
                    _this.onFormLoaded(_this.form);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.handleError(error);
                }));
            };
        /**
         * @param {?} formName
         * @return {?}
         */
        FormComponent.prototype.getFormDefinitionByFormName = /**
         * @param {?} formName
         * @return {?}
         */
            function (formName) {
                var _this = this;
                this.formService
                    .getFormDefinitionByName(formName)
                    .subscribe(( /**
             * @param {?} id
             * @return {?}
             */function (id) {
                    _this.formService.getFormDefinitionById(id).subscribe(( /**
                     * @param {?} form
                     * @return {?}
                     */function (form) {
                        _this.form = _this.parseForm(form);
                        _this.visibilityService.refreshVisibility(_this.form);
                        _this.form.validateForm();
                        _this.onFormLoaded(_this.form);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.handleError(error);
                    }));
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.handleError(error);
                }));
            };
        /**
         * @return {?}
         */
        FormComponent.prototype.saveTaskForm = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.form && this.form.taskId) {
                    this.formService
                        .saveTaskForm(this.form.taskId, this.form.values)
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this.onTaskSaved(_this.form);
                        _this.storeFormAsMetadata();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) { return _this.onTaskSavedError(_this.form, error); }));
                }
            };
        /**
         * @param {?=} outcome
         * @return {?}
         */
        FormComponent.prototype.completeTaskForm = /**
         * @param {?=} outcome
         * @return {?}
         */
            function (outcome) {
                var _this = this;
                if (this.form && this.form.taskId) {
                    this.formService
                        .completeTaskForm(this.form.taskId, this.form.values, outcome)
                        .subscribe(( /**
                 * @return {?}
                 */function () {
                        _this.onTaskCompleted(_this.form);
                        _this.storeFormAsMetadata();
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) { return _this.onTaskCompletedError(_this.form, error); }));
                }
            };
        /**
         * @param {?} err
         * @return {?}
         */
        FormComponent.prototype.handleError = /**
         * @param {?} err
         * @return {?}
         */
            function (err) {
                this.error.emit(err);
            };
        /**
         * @param {?} json
         * @return {?}
         */
        FormComponent.prototype.parseForm = /**
         * @param {?} json
         * @return {?}
         */
            function (json) {
                if (json) {
                    /** @type {?} */
                    var form = new i1$1.FormModel(json, this.data, this.readOnly, this.formService);
                    if (!json.fields) {
                        form.outcomes = this.getFormDefinitionOutcomes(form);
                    }
                    if (this.fieldValidators && this.fieldValidators.length > 0) {
                        form.fieldValidators = this.fieldValidators;
                    }
                    return form;
                }
                return null;
            };
        /**
         * Get custom set of outcomes for a Form Definition.
         * @param form Form definition model.
         */
        /**
         * Get custom set of outcomes for a Form Definition.
         * @param {?} form Form definition model.
         * @return {?}
         */
        FormComponent.prototype.getFormDefinitionOutcomes = /**
         * Get custom set of outcomes for a Form Definition.
         * @param {?} form Form definition model.
         * @return {?}
         */
            function (form) {
                return [
                    new i1$1.FormOutcomeModel(form, { id: '$save', name: i1$1.FormOutcomeModel.SAVE_ACTION, isSystem: true })
                ];
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FormComponent.prototype.checkVisibility = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (field && field.form) {
                    this.visibilityService.refreshVisibility(field.form);
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormComponent.prototype.refreshFormData = /**
         * @private
         * @return {?}
         */
            function () {
                this.form = this.parseForm(this.form.json);
                this.onFormLoaded(this.form);
                this.onFormDataRefreshed(this.form);
            };
        /**
         * @private
         * @param {?} nodeId
         * @return {?}
         */
        FormComponent.prototype.loadFormForEcmNode = /**
         * @private
         * @param {?} nodeId
         * @return {?}
         */
            function (nodeId) {
                var _this = this;
                this.nodeService.getNodeMetadata(nodeId).subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.data = data.metadata;
                    _this.loadFormFromActiviti(data.nodeType);
                }), this.handleError);
            };
        /**
         * @param {?} nodeType
         * @return {?}
         */
        FormComponent.prototype.loadFormFromActiviti = /**
         * @param {?} nodeType
         * @return {?}
         */
            function (nodeType) {
                var _this = this;
                this.formService.searchFrom(nodeType).subscribe(( /**
                 * @param {?} form
                 * @return {?}
                 */function (form) {
                    if (!form) {
                        _this.formService.createFormFromANode(nodeType).subscribe(( /**
                         * @param {?} formMetadata
                         * @return {?}
                         */function (formMetadata) {
                            _this.loadFormFromFormId(formMetadata.id);
                        }));
                    }
                    else {
                        _this.loadFormFromFormId(form.id);
                    }
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.handleError(error);
                }));
            };
        /**
         * @private
         * @param {?} formId
         * @return {?}
         */
        FormComponent.prototype.loadFormFromFormId = /**
         * @private
         * @param {?} formId
         * @return {?}
         */
            function (formId) {
                this.formId = formId;
                this.loadForm();
            };
        /**
         * @protected
         * @return {?}
         */
        FormComponent.prototype.storeFormAsMetadata = /**
         * @protected
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.saveMetadata) {
                    this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(( /**
                     * @param {?} type
                     * @return {?}
                     */function (type) {
                        _this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, i1$1.EcmModelService.MODEL_NAMESPACE, _this.form.values, _this.path, _this.nameNode);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.handleError(error);
                    }));
                }
            };
        /**
         * @protected
         * @param {?} form
         * @return {?}
         */
        FormComponent.prototype.onFormLoaded = /**
         * @protected
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formLoaded.emit(form);
                this.formService.formLoaded.next(new i1$1.FormEvent(form));
            };
        /**
         * @protected
         * @param {?} form
         * @return {?}
         */
        FormComponent.prototype.onFormDataRefreshed = /**
         * @protected
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formDataRefreshed.emit(form);
                this.formService.formDataRefreshed.next(new i1$1.FormEvent(form));
            };
        /**
         * @protected
         * @param {?} form
         * @return {?}
         */
        FormComponent.prototype.onTaskSaved = /**
         * @protected
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formSaved.emit(form);
                this.formService.taskSaved.next(new i1$1.FormEvent(form));
            };
        /**
         * @protected
         * @param {?} form
         * @param {?} error
         * @return {?}
         */
        FormComponent.prototype.onTaskSavedError = /**
         * @protected
         * @param {?} form
         * @param {?} error
         * @return {?}
         */
            function (form, error) {
                this.handleError(error);
                this.formService.taskSavedError.next(new i1$1.FormErrorEvent(form, error));
            };
        /**
         * @protected
         * @param {?} form
         * @return {?}
         */
        FormComponent.prototype.onTaskCompleted = /**
         * @protected
         * @param {?} form
         * @return {?}
         */
            function (form) {
                this.formCompleted.emit(form);
                this.formService.taskCompleted.next(new i1$1.FormEvent(form));
            };
        /**
         * @protected
         * @param {?} form
         * @param {?} error
         * @return {?}
         */
        FormComponent.prototype.onTaskCompletedError = /**
         * @protected
         * @param {?} form
         * @param {?} error
         * @return {?}
         */
            function (form, error) {
                this.handleError(error);
                this.formService.taskCompletedError.next(new i1$1.FormErrorEvent(form, error));
            };
        /**
         * @protected
         * @param {?} outcome
         * @return {?}
         */
        FormComponent.prototype.onExecuteOutcome = /**
         * @protected
         * @param {?} outcome
         * @return {?}
         */
            function (outcome) {
                /** @type {?} */
                var args = new i1$1.FormOutcomeEvent(outcome);
                this.formService.executeOutcome.next(args);
                if (args.defaultPrevented) {
                    return false;
                }
                this.executeOutcome.emit(args);
                if (args.defaultPrevented) {
                    return false;
                }
                return true;
            };
        FormComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-form',
                        template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"adf-form-container\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\"\n                            *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\">\n                        {{form.taskName}}\n                        <ng-container *ngIf=\"!form.taskName\">\n                            {{'FORM.FORM_RENDERER.NAMELESS_TASK' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]=\"form\">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                [color]=\"getColorForOutcome(outcome.name)\" mat-button [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                        encapsulation: i0.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        FormComponent.ctorParameters = function () {
            return [
                { type: i1$1.FormService },
                { type: i1$1.WidgetVisibilityService },
                { type: i1$1.EcmModelService },
                { type: i1$1.NodeService },
                { type: i1$1.FormRenderingService }
            ];
        };
        FormComponent.propDecorators = {
            form: [{ type: i0.Input }],
            taskId: [{ type: i0.Input }],
            nodeId: [{ type: i0.Input }],
            formId: [{ type: i0.Input }],
            formName: [{ type: i0.Input }],
            saveMetadata: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            formSaved: [{ type: i0.Output }],
            formCompleted: [{ type: i0.Output }],
            formContentClicked: [{ type: i0.Output }],
            formLoaded: [{ type: i0.Output }],
            formDataRefreshed: [{ type: i0.Output }]
        };
        return FormComponent;
    }(i1$1.FormBaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StartFormComponent = /** @class */ (function (_super) {
        __extends(StartFormComponent, _super);
        function StartFormComponent(formService, visibilityService, formRenderingService) {
            var _this = _super.call(this, formService, visibilityService, null, null, formRenderingService) || this;
            /**
             * Should form outcome buttons be shown?
             */
            _this.showOutcomeButtons = true;
            /**
             * Should the refresh button be shown?
             */
            _this.showRefreshButton = true;
            /**
             * Is the form read-only (ie, can't be edited)?
             */
            _this.readOnlyForm = false;
            /**
             * Emitted when the user clicks one of the outcome buttons that completes the form.
             */
            _this.outcomeClick = new i0.EventEmitter();
            /**
             * Emitted when a field of the form is clicked.
             */
            _this.formContentClicked = new i0.EventEmitter();
            _this.outcomesContainer = null;
            _this.showTitle = false;
            return _this;
        }
        /**
         * @return {?}
         */
        StartFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscriptions.push(this.formService.formContentClicked.subscribe(( /**
                 * @param {?} content
                 * @return {?}
                 */function (content) {
                    _this.formContentClicked.emit(content);
                })), this.formService.validateForm.subscribe(( /**
                 * @param {?} validateFormEvent
                 * @return {?}
                 */function (validateFormEvent) {
                    if (validateFormEvent.errorsField.length > 0) {
                        _this.formError.next(validateFormEvent.errorsField);
                    }
                })));
            };
        /**
         * @return {?}
         */
        StartFormComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscriptions.forEach(( /**
                 * @param {?} subscription
                 * @return {?}
                 */function (subscription) { return subscription.unsubscribe(); }));
                this.subscriptions = [];
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        StartFormComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var processDefinitionId = changes['processDefinitionId'];
                if (processDefinitionId && processDefinitionId.currentValue) {
                    this.visibilityService.cleanProcessVariable();
                    this.getStartFormDefinition(processDefinitionId.currentValue);
                    return;
                }
                /** @type {?} */
                var processId = changes['processId'];
                if (processId && processId.currentValue) {
                    this.visibilityService.cleanProcessVariable();
                    this.loadStartForm(processId.currentValue);
                    return;
                }
            };
        /**
         * @param {?} processId
         * @return {?}
         */
        StartFormComponent.prototype.loadStartForm = /**
         * @param {?} processId
         * @return {?}
         */
            function (processId) {
                var _this = this;
                this.formService.getProcessInstance(processId)
                    .subscribe(( /**
             * @param {?} instance
             * @return {?}
             */function (instance) {
                    _this.formService
                        .getStartFormInstance(processId)
                        .subscribe(( /**
                 * @param {?} form
                 * @return {?}
                 */function (form) {
                        _this.formName = form.name;
                        if (instance.variables) {
                            form.processVariables = instance.variables;
                        }
                        _this.form = _this.parseForm(form);
                        _this.visibilityService.refreshVisibility(_this.form);
                        _this.form.validateForm();
                        _this.form.readOnly = _this.readOnlyForm;
                        _this.onFormLoaded(_this.form);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) { return _this.handleError(error); }));
                }));
            };
        /**
         * @param {?} processId
         * @return {?}
         */
        StartFormComponent.prototype.getStartFormDefinition = /**
         * @param {?} processId
         * @return {?}
         */
            function (processId) {
                var _this = this;
                this.formService
                    .getStartFormDefinition(processId)
                    .subscribe(( /**
             * @param {?} form
             * @return {?}
             */function (form) {
                    _this.formName = form.processDefinitionName;
                    _this.form = _this.parseForm(form);
                    _this.visibilityService.refreshVisibility(_this.form);
                    _this.form.validateForm();
                    _this.form.readOnly = _this.readOnlyForm;
                    _this.onFormLoaded(_this.form);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) { return _this.handleError(error); }));
            };
        /** @override */
        /**
         * @override
         * @param {?} outcome
         * @param {?} isFormReadOnly
         * @return {?}
         */
        StartFormComponent.prototype.isOutcomeButtonVisible = /**
         * @override
         * @param {?} outcome
         * @param {?} isFormReadOnly
         * @return {?}
         */
            function (outcome, isFormReadOnly) {
                if (outcome && outcome.isSystem && (outcome.name === i1$1.FormOutcomeModel.SAVE_ACTION ||
                    outcome.name === i1$1.FormOutcomeModel.COMPLETE_ACTION)) {
                    return false;
                }
                else if (outcome && outcome.name === i1$1.FormOutcomeModel.START_PROCESS_ACTION) {
                    return true;
                }
                return _super.prototype.isOutcomeButtonVisible.call(this, outcome, isFormReadOnly);
            };
        /** @override */
        /**
         * @override
         * @return {?}
         */
        StartFormComponent.prototype.saveTaskForm = /**
         * @override
         * @return {?}
         */
            function () {
                // do nothing
            };
        /** @override */
        /**
         * @override
         * @return {?}
         */
        StartFormComponent.prototype.onRefreshClicked = /**
         * @override
         * @return {?}
         */
            function () {
                if (this.processDefinitionId) {
                    this.visibilityService.cleanProcessVariable();
                    this.getStartFormDefinition(this.processDefinitionId);
                }
                else if (this.processId) {
                    this.visibilityService.cleanProcessVariable();
                    this.loadStartForm(this.processId);
                }
            };
        /**
         * @param {?=} outcome
         * @return {?}
         */
        StartFormComponent.prototype.completeTaskForm = /**
         * @param {?=} outcome
         * @return {?}
         */
            function (outcome) {
                this.outcomeClick.emit(outcome);
            };
        StartFormComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-start-form',
                        template: "<div class=\"adf-start-form-container\" *ngIf=\"hasForm()\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h2 *ngIf=\"isTitleEnabled()\" class=\"mdl-card__title-text\">{{form.taskName}}</h2>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf=\"form.hasTabs()\">\n                <tabs-widget [tabs]=\"form.tabs\" (formTabChanged)=\"checkVisibility($event);\"></tabs-widget>\n            </div>\n\n            <div *ngIf=\"!form.hasTabs() && form.hasFields()\">\n                <div *ngFor=\"let field of form.fields\">\n                    <adf-form-field [field]=\"field.field\"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-content class=\"adf-start-form-actions\" *ngIf=\"showOutcomeButtons && form.hasOutcomes()\"\n                          #outcomesContainer>\n            <ng-content select=\"[adf-form-custom-button], [form-custom-button]\"></ng-content>\n\n            <button *ngFor=\"let outcome of form.outcomes\"\n                    mat-button\n                    [attr.data-automation-id]=\"'adf-form-' + outcome.name  | lowercase\"\n                    [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.mdl-button--colored]=\"!outcome.isSystem\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                {{ outcome.name | uppercase | translate | uppercase }}\n            </button>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"showRefreshButton\">\n            <button mat-button\n                    (click)=\"onRefreshClicked()\">\n                <mat-icon>refresh</mat-icon>\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        StartFormComponent.ctorParameters = function () {
            return [
                { type: i1$1.FormService },
                { type: i1$1.WidgetVisibilityService },
                { type: i1$1.FormRenderingService }
            ];
        };
        StartFormComponent.propDecorators = {
            processDefinitionId: [{ type: i0.Input }],
            processId: [{ type: i0.Input }],
            showOutcomeButtons: [{ type: i0.Input }],
            showRefreshButton: [{ type: i0.Input }],
            readOnlyForm: [{ type: i0.Input }],
            outcomeClick: [{ type: i0.Output }],
            formContentClicked: [{ type: i0.Output }],
            outcomesContainer: [{ type: i0.ViewChild, args: ['outcomesContainer', {},] }]
        };
        return StartFormComponent;
    }(FormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormModule = /** @class */ (function () {
        function FormModule() {
        }
        FormModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$1.CoreModule.forChild(),
                            MaterialModule
                        ],
                        declarations: [
                            FormComponent,
                            StartFormComponent
                        ],
                        exports: [
                            FormComponent,
                            StartFormComponent
                        ]
                    },] }
        ];
        return FormModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskListModule = /** @class */ (function () {
        function TaskListModule() {
        }
        TaskListModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            flexLayout.FlexLayoutModule,
                            MaterialModule,
                            forms.FormsModule,
                            FormModule,
                            forms.ReactiveFormsModule,
                            i1$1.CoreModule.forChild(),
                            PeopleModule,
                            ProcessCommentsModule,
                            ContentWidgetModule
                        ],
                        declarations: [
                            NoTaskDetailsTemplateDirective,
                            TaskFiltersComponent,
                            TaskListComponent,
                            TaskDetailsComponent,
                            TaskAuditDirective,
                            ChecklistComponent,
                            TaskHeaderComponent,
                            StartTaskComponent,
                            TaskStandaloneComponent,
                            AttachFormComponent
                        ],
                        exports: [
                            NoTaskDetailsTemplateDirective,
                            TaskFiltersComponent,
                            TaskListComponent,
                            TaskDetailsComponent,
                            TaskAuditDirective,
                            ChecklistComponent,
                            TaskHeaderComponent,
                            StartTaskComponent,
                            TaskStandaloneComponent,
                            AttachFormComponent
                        ]
                    },] }
        ];
        return TaskListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessInstanceTasksComponent = /** @class */ (function () {
        function ProcessInstanceTasksComponent(activitiProcess, logService, dialog) {
            var _this = this;
            this.activitiProcess = activitiProcess;
            this.logService = logService;
            this.dialog = dialog;
            /**
             * Toggles whether to show a refresh button next to the list of tasks to allow
             * it to be updated from the server.
             */
            this.showRefreshButton = true;
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.activeTasks = [];
            this.completedTasks = [];
            /**
             * Emitted when a task is clicked.
             */
            this.taskClick = new i0.EventEmitter();
            this.task$ = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) { return _this.taskObserver = observer; }))
                .pipe(operators.share());
            this.completedTask$ = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) { return _this.completedTaskObserver = observer; }))
                .pipe(operators.share());
        }
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.task$.subscribe(( /**
                 * @param {?} task
                 * @return {?}
                 */function (task) {
                    _this.activeTasks.push(task);
                }));
                this.completedTask$.subscribe(( /**
                 * @param {?} task
                 * @return {?}
                 */function (task) {
                    _this.completedTasks.push(task);
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var processInstanceDetails = changes['processInstanceDetails'];
                if (processInstanceDetails && processInstanceDetails.currentValue) {
                    this.load(processInstanceDetails.currentValue.id);
                }
            };
        /**
         * @param {?} processInstanceId
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.load = /**
         * @param {?} processInstanceId
         * @return {?}
         */
            function (processInstanceId) {
                this.loadActive(processInstanceId);
                this.loadCompleted(processInstanceId);
            };
        /**
         * @param {?} processInstanceId
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.loadActive = /**
         * @param {?} processInstanceId
         * @return {?}
         */
            function (processInstanceId) {
                var _this = this;
                this.activeTasks = [];
                if (processInstanceId) {
                    this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        res.forEach(( /**
                         * @param {?} task
                         * @return {?}
                         */function (task) {
                            _this.taskObserver.next(task);
                        }));
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
                else {
                    this.activeTasks = [];
                }
            };
        /**
         * @param {?} processInstanceId
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.loadCompleted = /**
         * @param {?} processInstanceId
         * @return {?}
         */
            function (processInstanceId) {
                var _this = this;
                this.completedTasks = [];
                if (processInstanceId) {
                    this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        res.forEach(( /**
                         * @param {?} task
                         * @return {?}
                         */function (task) {
                            _this.completedTaskObserver.next(task);
                        }));
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
                else {
                    this.completedTasks = [];
                }
            };
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.hasStartFormDefined = /**
         * @return {?}
         */
            function () {
                return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;
            };
        /**
         * @param {?} user
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.getUserFullName = /**
         * @param {?} user
         * @return {?}
         */
            function (user) {
                if (user) {
                    return (user.firstName && user.firstName !== 'null'
                        ? user.firstName + ' ' : '') +
                        user.lastName;
                }
                return 'Nobody';
            };
        /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.getFormatDate = /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
            function (value, format) {
                /** @type {?} */
                var datePipe = new common.DatePipe('en-US');
                try {
                    return datePipe.transform(value, format);
                }
                catch (err) {
                    this.logService.error("ProcessListInstanceTask: error parsing date " + value + " to format " + format);
                }
            };
        /**
         * @param {?} $event
         * @param {?} task
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.clickTask = /**
         * @param {?} $event
         * @param {?} task
         * @return {?}
         */
            function ($event, task) {
                /** @type {?} */
                var args = new TaskDetailsEvent(task);
                this.taskClick.emit(args);
            };
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.clickStartTask = /**
         * @return {?}
         */
            function () {
                this.processId = this.processInstanceDetails.id;
                this.showStartDialog();
            };
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.showStartDialog = /**
         * @return {?}
         */
            function () {
                this.dialog.open(this.startDialog, { height: '500px', width: '700px' });
            };
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.closeStartDialog = /**
         * @return {?}
         */
            function () {
                this.dialog.closeAll();
            };
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.onRefreshClicked = /**
         * @return {?}
         */
            function () {
                this.load(this.processInstanceDetails.id);
            };
        /**
         * @return {?}
         */
        ProcessInstanceTasksComponent.prototype.onFormContentClick = /**
         * @return {?}
         */
            function () {
                this.closeStartDialog();
            };
        ProcessInstanceTasksComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-instance-tasks',
                        template: "<div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >\n    <button mat-icon-button (click)=\"onRefreshClicked()\">\n        <mat-icon class=\"md-24\" aria-label=\"Refresh\">refresh</mat-icon>\n    </button>\n</div>\n\n<!-- ACTIVE FORM -->\n\n<mat-chip-list>\n    <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>\n    <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{activeTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of activeTasks\" (click)=\"clickTask($event, task)\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n                </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<!-- START FORM -->\n\n<div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE' | translate }}\n</div>\n\n<div *ngIf=\"hasStartFormDefined()\">\n    <span class=\"adf-activiti-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</span>\n\n    <!--IF START TASK COMPLETED -->\n    <div class=\"menu-container\">\n        <mat-list>\n            <mat-list-item class=\"process-tasks__task-item\" (click)=\"clickStartTask()\">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h3>\n                <span matLine>\n                    {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}\n                </span>\n            </mat-list-item>\n        </mat-list>\n    </div>\n\n</div>\n\n<!-- COMPLETED FORM -->\n<mat-chip-list>\n        <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>\n        <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{completedTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">\n    <mat-list>\n        <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of completedTasks\" (click)=\"clickTask($event, task)\">\n            <mat-icon mat-list-icon>assignment</mat-icon>\n            <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n            <span matLine>\n                {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n            </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">\n    {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED' | translate }}\n</div>\n\n<ng-template *ngIf=\"hasStartFormDefined()\" #startDialog>\n    <div id=\"adf-start-process-dialog\" class=\"adf-start-process-dialog\">\n        <h4 matDialogTitle>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h4>\n        <div mat-dialog-content class=\"adf-start-process-dialog-content\">\n            <adf-start-form [processId]=\"processId\"\n                                 [showRefreshButton]=\"false\" [readOnlyForm]=\"true\"\n                                 (formContentClicked)='onFormContentClick()'>\n            </adf-start-form>\n        </div>\n        <div mat-dialog-actions class=\"adf-start-process-dialog-actions\">\n            <button mat-button type=\"button\" (click)=\"closeStartDialog()\">{{ 'ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE' | translate }}</button>\n        </div>\n    </div>\n</ng-template>\n",
                        styles: [":host{width:100%}.activiti-label{font-weight:bolder;vertical-align:top}.adf-process-badge{pointer-events:none;outline:0}.adf-chip-label{position:relative;top:5px;margin-right:8px;font-weight:700}.menu-container{margin-bottom:32px}.activiti-label+.icon{position:relative;top:-2px}.task-details-dialog{position:fixed;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);width:40%}.process-tasks-refresh{float:right}.adf-start-process-dialog{width:100%;height:100%;display:flex;flex-direction:column}.adf-start-process-dialog-content{flex-grow:1}.adf-start-process-dialog-actions{display:flex;justify-content:flex-end}.no-results{margin-left:9px;font-size:14px;font-weight:400;letter-spacing:0;line-height:18px;color:rgba(0,0,0,.54);display:block;padding:12px}.process-tasks__task-item{cursor:pointer}"]
                    }] }
        ];
        /** @nocollapse */
        ProcessInstanceTasksComponent.ctorParameters = function () {
            return [
                { type: ProcessService },
                { type: i1$1.LogService },
                { type: material.MatDialog }
            ];
        };
        ProcessInstanceTasksComponent.propDecorators = {
            processInstanceDetails: [{ type: i0.Input }],
            showRefreshButton: [{ type: i0.Input }],
            error: [{ type: i0.Output }],
            startDialog: [{ type: i0.ViewChild, args: ['startDialog',] }],
            taskDetails: [{ type: i0.ViewChild, args: ['taskDetails',] }],
            taskClick: [{ type: i0.Output }]
        };
        return ProcessInstanceTasksComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @type {?} */
    var processPresetsDefaultModel = {
        'default': [
            {
                'key': 'name',
                'type': 'text',
                'title': 'ADF_PROCESS_LIST.PROPERTIES.NAME',
                'sortable': true
            },
            {
                'key': 'created',
                'type': 'text',
                'title': 'ADF_PROCESS_LIST.PROPERTIES.CREATED',
                'cssClass': 'hidden',
                'sortable': true
            }
        ]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessInstanceListComponent = /** @class */ (function (_super) {
        __extends(ProcessInstanceListComponent, _super);
        function ProcessInstanceListComponent(processService, userPreferences, appConfig) {
            var _this = _super.call(this, appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel) || this;
            _this.processService = processService;
            _this.userPreferences = userPreferences;
            _this.FORMAT_DATE = 'll';
            /**
             * The page number of the processes to fetch.
             */
            _this.page = 0;
            /**
             * The number of processes to fetch in each page.
             */
            _this.size = i1$1.PaginationComponent.DEFAULT_PAGINATION.maxItems;
            /**
             * Toggles multiple row selection, which renders checkboxes at the beginning of each row
             */
            _this.multiselect = false;
            /**
             * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
             * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
             * multiple rows.
             */
            _this.selectionMode = 'single'; // none|single|multiple
            // none|single|multiple
            /**
             * Toggles default selection of the first row
             */
            _this.selectFirstRow = true;
            /**
             * Emitted when a row in the process list is clicked.
             */
            _this.rowClick = new i0.EventEmitter();
            /**
             * Emitted when the list of process instances has been loaded successfully from the server.
             */
            _this.success = new i0.EventEmitter();
            /**
             * Emitted when an error occurs while loading the list of process instances from the server.
             */
            _this.error = new i0.EventEmitter();
            _this.isLoading = true;
            _this.rows = [];
            _this.sorting = ['created', 'desc'];
            _this.size = _this.userPreferences.paginationSize;
            _this.pagination = new rxjs.BehaviorSubject(( /** @type {?} */({
                maxItems: _this.size,
                skipCount: 0,
                totalItems: 0
            })));
            return _this;
        }
        /**
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.createDatatableSchema();
                if (this.data && this.data.getColumns().length === 0) {
                    this.data.setColumns(this.columns);
                }
                if (this.appId != null) {
                    this.reload();
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.isPropertyChanged(changes)) {
                    if (this.isSortChanged(changes)) {
                        this.sorting = this.sort ? this.sort.split('-') : this.sorting;
                    }
                    this.reload();
                }
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.isSortChanged = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var actualSort = changes['sort'];
                return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.isPropertyChanged = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var changed = false;
                /** @type {?} */
                var appId = changes['appId'];
                /** @type {?} */
                var processDefinitionId = changes['processDefinitionId'];
                /** @type {?} */
                var processInstanceId = changes['processInstanceId'];
                /** @type {?} */
                var state = changes['state'];
                /** @type {?} */
                var sort = changes['sort'];
                /** @type {?} */
                var page = changes['page'];
                /** @type {?} */
                var size = changes['size'];
                if (appId && appId.currentValue) {
                    changed = true;
                }
                else if (processDefinitionId) {
                    changed = true;
                }
                else if (processInstanceId) {
                    changed = true;
                }
                else if (state && state.currentValue) {
                    changed = true;
                }
                else if (sort && sort.currentValue) {
                    changed = true;
                }
                else if (page && page.currentValue !== page.previousValue) {
                    changed = true;
                }
                else if (size && size.currentValue !== size.previousValue) {
                    changed = true;
                }
                return changed;
            };
        /**
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.reload = /**
         * @return {?}
         */
            function () {
                this.requestNode = this.createRequestNode();
                this.load(this.requestNode);
            };
        /**
         * @private
         * @param {?} requestNode
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.load = /**
         * @private
         * @param {?} requestNode
         * @return {?}
         */
            function (requestNode) {
                var _this = this;
                this.isLoading = true;
                this.processService.getProcesses(requestNode)
                    .subscribe(( /**
             * @param {?} response
             * @return {?}
             */function (response) {
                    _this.rows = _this.optimizeProcessDetails(response.data);
                    _this.selectFirst();
                    _this.success.emit(response);
                    _this.isLoading = false;
                    _this.pagination.next({
                        count: response.data.length,
                        maxItems: _this.size,
                        skipCount: _this.page * _this.size,
                        totalItems: response.total
                    });
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.error.emit(error);
                    _this.isLoading = false;
                }));
            };
        /**
         * Select the first instance of a list if present
         */
        /**
         * Select the first instance of a list if present
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.selectFirst = /**
         * Select the first instance of a list if present
         * @return {?}
         */
            function () {
                if (this.selectFirstRow) {
                    if (!this.isListEmpty()) {
                        /** @type {?} */
                        var dataRow = this.rows[0];
                        dataRow.isSelected = true;
                        this.currentInstanceId = dataRow['id'];
                    }
                    else {
                        this.currentInstanceId = null;
                    }
                }
            };
        /**
         * Return the current id
         */
        /**
         * Return the current id
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.getCurrentId = /**
         * Return the current id
         * @return {?}
         */
            function () {
                return this.currentInstanceId;
            };
        /**
         * Check if the list is empty
         */
        /**
         * Check if the list is empty
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.isListEmpty = /**
         * Check if the list is empty
         * @return {?}
         */
            function () {
                return !this.rows || this.rows.length === 0;
            };
        /**
         * Emit the event rowClick passing the current task id when the row is clicked
         * @param event
         */
        /**
         * Emit the event rowClick passing the current task id when the row is clicked
         * @param {?} event
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.onRowClick = /**
         * Emit the event rowClick passing the current task id when the row is clicked
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var item = event;
                this.currentInstanceId = item.value.getValue('id');
                this.rowClick.emit(this.currentInstanceId);
            };
        /**
         * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row
         * @param event
         */
        /**
         * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row
         * @param {?} event
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.onRowKeyUp = /**
         * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.detail.keyboardEvent.key === 'Enter') {
                    event.preventDefault();
                    this.currentInstanceId = event.detail.row.getValue('id');
                    this.rowClick.emit(this.currentInstanceId);
                }
            };
        /**
         * Optimize name field
         * @param instances
         */
        /**
         * Optimize name field
         * @private
         * @param {?} instances
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.optimizeProcessDetails = /**
         * Optimize name field
         * @private
         * @param {?} instances
         * @return {?}
         */
            function (instances) {
                var _this = this;
                instances = instances.map(( /**
                 * @param {?} instance
                 * @return {?}
                 */function (instance) {
                    instance.name = _this.getProcessNameOrDescription(instance, 'medium');
                    if (instance.started) {
                        instance.started = moment$1(instance.started).format(_this.FORMAT_DATE);
                    }
                    return instance;
                }));
                return instances;
            };
        /**
         * @param {?} processInstance
         * @param {?} dateFormat
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.getProcessNameOrDescription = /**
         * @param {?} processInstance
         * @param {?} dateFormat
         * @return {?}
         */
            function (processInstance, dateFormat) {
                /** @type {?} */
                var name = '';
                if (processInstance) {
                    name = processInstance.name ||
                        processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
                }
                return name;
            };
        /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.getFormatDate = /**
         * @param {?} value
         * @param {?} format
         * @return {?}
         */
            function (value, format) {
                /** @type {?} */
                var datePipe = new common.DatePipe('en-US');
                try {
                    return datePipe.transform(value, format);
                }
                catch (err) {
                    return '';
                }
            };
        /**
         * @private
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.createRequestNode = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var requestNode = {
                    appDefinitionId: this.appId,
                    processDefinitionId: this.processDefinitionId,
                    processInstanceId: this.processInstanceId,
                    state: this.state,
                    sort: this.sort,
                    page: this.page,
                    size: this.size,
                    start: 0
                };
                return new ProcessFilterParamRepresentationModel(requestNode);
            };
        /**
         * @param {?} params
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.updatePagination = /**
         * @param {?} params
         * @return {?}
         */
            function (params) {
                /** @type {?} */
                var needsReload = params.maxItems || params.skipCount;
                this.size = params.maxItems;
                this.page = this.currentPage(params.skipCount, params.maxItems);
                if (needsReload) {
                    this.reload();
                }
            };
        /**
         * @param {?} skipCount
         * @param {?} maxItems
         * @return {?}
         */
        ProcessInstanceListComponent.prototype.currentPage = /**
         * @param {?} skipCount
         * @param {?} maxItems
         * @return {?}
         */
            function (skipCount, maxItems) {
                return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
            };
        ProcessInstanceListComponent.PRESET_KEY = 'adf-process-list.presets';
        ProcessInstanceListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-instance-list',
                        template: "<adf-datatable #dataTable\n    [data]=\"data\"\n    [rows]=\"rows\"\n    [columns]=\"columns\"\n    [sorting]=\"sorting\"\n    [loading]=\"isLoading\"\n    [selectionMode]=\"selectionMode\"\n    [multiselect]=\"multiselect\"\n    (rowClick)=\"onRowClick($event)\"\n    (row-keyup)=\"onRowKeyUp($event)\">\n    <adf-loading-content-template>\n        <ng-template>\n            <!--Add your custom loading template here-->\n            <mat-progress-spinner\n                *ngIf=\"!customLoadingContent\"\n                class=\"adf-process-list-loading-margin\"\n                [color]=\"'primary'\"\n                [mode]=\"'indeterminate'\">\n            </mat-progress-spinner>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n    <adf-no-content-template>\n        <ng-template>\n                <adf-empty-content *ngIf=\"!customEmptyContent\"\n                    icon=\"assessment\"\n                    [title]=\"(requestNode ? 'ADF_PROCESS_LIST.LIST.TITLE' : 'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE') | translate \"\n                    [subtitle]=\"'ADF_PROCESS_LIST.LIST.SUBTITLE'| translate\">\n                </adf-empty-content>\n            <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n</adf-datatable>\n",
                        styles: [".adf-process-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}.no-content-message{font-size:16px;font-weight:700;text-align:center;opacity:.54;color:#000}"]
                    }] }
        ];
        /** @nocollapse */
        ProcessInstanceListComponent.ctorParameters = function () {
            return [
                { type: ProcessService },
                { type: i1$1.UserPreferencesService },
                { type: i1$1.AppConfigService }
            ];
        };
        ProcessInstanceListComponent.propDecorators = {
            customEmptyContent: [{ type: i0.ContentChild, args: [i1$1.CustomEmptyContentTemplateDirective,] }],
            customLoadingContent: [{ type: i0.ContentChild, args: [i1$1.CustomLoadingContentTemplateDirective,] }],
            appId: [{ type: i0.Input }],
            processDefinitionId: [{ type: i0.Input }],
            processInstanceId: [{ type: i0.Input }],
            state: [{ type: i0.Input }],
            sort: [{ type: i0.Input }],
            page: [{ type: i0.Input }],
            size: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            multiselect: [{ type: i0.Input }],
            selectionMode: [{ type: i0.Input }],
            selectFirstRow: [{ type: i0.Input }],
            rowClick: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return ProcessInstanceListComponent;
    }(i1$1.DataTableSchema));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StartProcessInstanceComponent = /** @class */ (function () {
        function StartProcessInstanceComponent(activitiProcess, activitiContentService, appConfig) {
            this.activitiProcess = activitiProcess;
            this.activitiContentService = activitiContentService;
            this.appConfig = appConfig;
            this.MAX_LENGTH = 255;
            /**
             * (optional) Name to assign to the current process.
             */
            this.name = '';
            /**
             * Hide or show the process selection dropdown.
             */
            this.showSelectProcessDropdown = true;
            /**
             * (optional) Parameter to enable selection of process when filtering.
             */
            this.processFilterSelector = true;
            /**
             * Emitted when the process starts.
             */
            this.start = new i0.EventEmitter();
            /**
             * Emitted when the process is canceled.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.processDefinitions = [];
            this.selectedProcessDef = new ProcessDefinitionRepresentation();
            this.errorMessageId = '';
            this.maxProcessNameLength = this.MAX_LENGTH;
        }
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.processNameInput = new forms.FormControl(this.name, [forms.Validators.required, forms.Validators.maxLength(this.maxProcessNameLength)]);
                this.processDefinitionInput = new forms.FormControl();
                this.loadStartProcess();
                this.processNameInput.valueChanges.subscribe(( /**
                 * @param {?} name
                 * @return {?}
                 */function (name) { return _this.name = name; }));
                this.filteredProcesses = this.processDefinitionInput.valueChanges
                    .pipe(operators.map(( /**
             * @param {?} value
             * @return {?}
             */function (value) { return _this._filter(value); })));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['values'] && changes['values'].currentValue) {
                    this.moveNodeFromCStoPS();
                }
                if (changes['appId'] && changes['appId'].currentValue) {
                    this.appId = changes['appId'].currentValue;
                }
                this.loadStartProcess();
            };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        StartProcessInstanceComponent.prototype._filter = /**
         * @private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value !== null && value !== undefined) {
                    /** @type {?} */
                    var filterValue_1 = value.toLowerCase();
                    /** @type {?} */
                    var filteredProcess = this.processDefinitions.filter(( /**
                     * @param {?} option
                     * @return {?}
                     */function (option) { return option.name.toLowerCase().includes(filterValue_1); }));
                    if (this.processFilterSelector) {
                        this.selectedProcessDef = this.getSelectedProcess(filterValue_1);
                    }
                    return filteredProcess;
                }
            };
        /**
         * @param {?} selectedProcess
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.getSelectedProcess = /**
         * @param {?} selectedProcess
         * @return {?}
         */
            function (selectedProcess) {
                /** @type {?} */
                var processSelected = this.processDefinitions.find(( /**
                 * @param {?} process
                 * @return {?}
                 */function (process) { return process.name.toLowerCase() === selectedProcess; }));
                if (!processSelected) {
                    processSelected = new ProcessDefinitionRepresentation();
                }
                return processSelected;
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.loadStartProcess = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.resetSelectedProcessDefinition();
                this.resetErrorMessage();
                this.activitiProcess.getProcessDefinitions(this.appId).subscribe(( /**
                 * @param {?} processDefinitionRepresentations
                 * @return {?}
                 */function (processDefinitionRepresentations) {
                    _this.processDefinitions = processDefinitionRepresentations;
                    if (!_this.isProcessDefinitionsEmpty()) {
                        if (_this.processDefinitions.length === 1) {
                            _this.selectedProcessDef = _this.processDefinitions[0];
                        }
                        if (_this.processDefinitionName) {
                            /** @type {?} */
                            var selectedProcess = _this.processDefinitions.find(( /**
                             * @param {?} currentProcessDefinition
                             * @return {?}
                             */function (currentProcessDefinition) {
                                return currentProcessDefinition.name === _this.processDefinitionName;
                            }));
                            if (selectedProcess) {
                                _this.selectedProcessDef = selectedProcess;
                            }
                        }
                        _this.processDefinitionInput.setValue(_this.selectedProcessDef.name);
                    }
                }), ( /**
                 * @return {?}
                 */function () {
                    _this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
                }));
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.isProcessDefinitionsEmpty = /**
         * @return {?}
         */
            function () {
                return this.processDefinitions.length === 0;
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.getAlfrescoRepositoryName = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var alfrescoRepositoryName = this.appConfig.get(i1$1.AppConfigValues.ALFRESCO_REPOSITORY_NAME);
                if (!alfrescoRepositoryName) {
                    alfrescoRepositoryName = 'alfresco-1';
                }
                return alfrescoRepositoryName + 'Alfresco';
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.moveNodeFromCStoPS = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var accountIdentifier = this.getAlfrescoRepositoryName();
                var _loop_1 = function (key) {
                    if (this_1.values.hasOwnProperty(key)) {
                        /** @type {?} */
                        var currentValue = this_1.values[key];
                        if (currentValue.isFile) {
                            this_1.activitiContentService.applyAlfrescoNode(currentValue, null, accountIdentifier).subscribe(( /**
                             * @param {?} res
                             * @return {?}
                             */function (res) {
                                _this.values[key] = [res];
                            }));
                        }
                    }
                };
                var this_1 = this;
                for (var key in this.values) {
                    _loop_1(key);
                }
            };
        /**
         * @param {?=} outcome
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.startProcess = /**
         * @param {?=} outcome
         * @return {?}
         */
            function (outcome) {
                var _this = this;
                if (this.selectedProcessDef && this.selectedProcessDef.id && this.name) {
                    this.resetErrorMessage();
                    /** @type {?} */
                    var formValues = this.startForm ? this.startForm.form.values : undefined;
                    this.activitiProcess.startProcess(this.selectedProcessDef.id, this.name, outcome, formValues, this.variables).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.name = '';
                        _this.start.emit(res);
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.START';
                        _this.error.error(err);
                    }));
                }
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.cancelStartProcess = /**
         * @return {?}
         */
            function () {
                this.cancel.emit();
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.hasStartForm = /**
         * @return {?}
         */
            function () {
                return this.selectedProcessDef && this.selectedProcessDef.hasStartForm;
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.isProcessDefinitionEmpty = /**
         * @return {?}
         */
            function () {
                return this.processDefinitions ? (this.processDefinitions.length > 0 || this.errorMessageId) : this.errorMessageId;
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.isStartFormMissingOrValid = /**
         * @return {?}
         */
            function () {
                if (this.startForm) {
                    return this.startForm.form && this.startForm.form.isValid;
                }
                else {
                    return true;
                }
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.validateForm = /**
         * @return {?}
         */
            function () {
                return this.selectedProcessDef && this.selectedProcessDef.id && this.processNameInput.valid && this.isStartFormMissingOrValid();
            };
        /**
         * @private
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.resetSelectedProcessDefinition = /**
         * @private
         * @return {?}
         */
            function () {
                this.selectedProcessDef = new ProcessDefinitionRepresentation();
            };
        /**
         * @private
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.resetErrorMessage = /**
         * @private
         * @return {?}
         */
            function () {
                this.errorMessageId = '';
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.hasErrorMessage = /**
         * @return {?}
         */
            function () {
                return this.processDefinitions.length === 0 && !this.errorMessageId;
            };
        /**
         * @param {?} outcome
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.onOutcomeClick = /**
         * @param {?} outcome
         * @return {?}
         */
            function (outcome) {
                this.startProcess(outcome);
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.resetSelectedProcessDefinition();
                this.name = '';
                if (this.startForm) {
                    this.startForm.data = {};
                }
                this.resetErrorMessage();
            };
        /**
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.hasProcessName = /**
         * @return {?}
         */
            function () {
                return this.name ? true : false;
            };
        /**
         * @param {?} process
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.displayFn = /**
         * @param {?} process
         * @return {?}
         */
            function (process) {
                if (process) {
                    /** @type {?} */
                    var processName = process;
                    if (typeof process !== 'string') {
                        processName = process.name;
                    }
                    return processName;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        StartProcessInstanceComponent.prototype.displayDropdown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopPropagation();
                if (!this.inputAutocomplete.panelOpen) {
                    this.processDefinitionInput.setValue('');
                    this.inputAutocomplete.openPanel();
                }
                else {
                    this.inputAutocomplete.closePanel();
                }
            };
        Object.defineProperty(StartProcessInstanceComponent.prototype, "nameController", {
            get: /**
             * @return {?}
             */ function () {
                return this.processNameInput;
            },
            enumerable: true,
            configurable: true
        });
        StartProcessInstanceComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-start-process',
                        template: "<mat-card class=\"adf-start-process\">\n    <mat-card-title>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.TITLE' | translate}}\n    </mat-card-title>\n    <mat-card-content *ngIf=\"isProcessDefinitionEmpty()\">\n        <mat-card-subtitle id=\"error-message\" *ngIf=\"errorMessageId\">\n            {{errorMessageId|translate}}\n        </mat-card-subtitle>\n        <mat-form-field class=\"adf-process-input-container\">\n            <input\n                matInput\n                placeholder=\"{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME' | translate}}\"\n                [formControl]=\"processNameInput\"\n                id=\"processName\"\n                required/>\n                <mat-error *ngIf=\"nameController.hasError('maxlength')\">\n                    {{ 'ADF_PROCESS_LIST.START_PROCESS.ERROR.MAXIMUM_LENGTH' | translate : { characters : maxProcessNameLength } }}\n                </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"adf-process-input-container\">\n            <input\n                type=\"text\"\n                placeholder=\"{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE'|translate}}\"\n                matInput\n                [formControl]=\"processDefinitionInput\"\n                [matAutocomplete]=\"auto\"\n                id=\"processDefinitionName\"\n                #inputAutocomplete>\n            <div class=\"adf-process-input-autocomplete\">\n                <mat-autocomplete\n                    #auto=\"matAutocomplete\"\n                    id=\"processDefinitionOptions\"\n                    [displayWith]=\"displayFn\">\n                    <mat-option *ngFor=\"let processDef of filteredProcesses | async\" [value]=\"processDef.name\">\n                        {{ processDef.name }}\n                    </mat-option>\n                </mat-autocomplete>\n                <button\n                    id=\"adf-select-process-dropdown\"\n                    *ngIf=\"showSelectProcessDropdown\"\n                    mat-icon-button\n                    (click)=\"displayDropdown($event)\">\n                    <mat-icon>arrow_drop_down</mat-icon>\n                </button>\n            </div>\n        </mat-form-field>\n\n        <adf-start-form\n            #startForm\n            *ngIf=\"hasStartForm()\"\n            [data]=\"values\"\n            [disableStartProcessButton]=\"!hasProcessName()\"\n            [processDefinitionId]=\"selectedProcessDef.id\"\n            (outcomeClick)=\"onOutcomeClick($event)\"\n            [showRefreshButton]=\"false\">\n            <button\n                adf-form-custom-button\n                mat-button\n                (click)=\"cancelStartProcess()\"\n                id=\"cancel_process\">\n                {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n            </button>\n        </adf-start-form>\n    </mat-card-content>\n    <mat-card-content *ngIf=\"hasErrorMessage()\">\n        <mat-card-subtitle class=\"error-message\" id=\"no-process-message\">\n            {{'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS' | translate | uppercase}}\n        </mat-card-subtitle>\n    </mat-card-content>\n    <mat-card-actions *ngIf=\"!hasStartForm()\">\n        <button\n            mat-button\n            *ngIf=\"!hasStartForm()\"\n            (click)=\"cancelStartProcess()\"\n            id=\"cancel_process\">\n            {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate | uppercase}}\n        </button>\n        <button\n            color=\"primary\"\n            mat-button\n            *ngIf=\"!hasStartForm()\"\n            [disabled]=\"!validateForm()\"\n            (click)=\"startProcess()\"\n            data-automation-id=\"btn-start\"\n            id=\"button-start\"\n            class=\"btn-start\">\n            {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START' | translate | uppercase}}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [".adf-start-process{width:66%;margin-left:auto;margin-right:auto;margin-top:10px}.adf-start-process .mat-select-trigger{font-size:14px!important}.adf-start-process mat-form-field{width:100%}.adf-start-process mat-select{width:100%;padding:16px 0 0}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}@media (max-width:600px){.adf-start-process{width:90%;margin-left:auto;margin-right:auto}}"]
                    }] }
        ];
        /** @nocollapse */
        StartProcessInstanceComponent.ctorParameters = function () {
            return [
                { type: ProcessService },
                { type: i1$1.ActivitiContentService },
                { type: i1$1.AppConfigService }
            ];
        };
        StartProcessInstanceComponent.propDecorators = {
            appId: [{ type: i0.Input }],
            processDefinitionName: [{ type: i0.Input }],
            variables: [{ type: i0.Input }],
            values: [{ type: i0.Input }],
            name: [{ type: i0.Input }],
            showSelectProcessDropdown: [{ type: i0.Input }],
            processFilterSelector: [{ type: i0.Input }],
            start: [{ type: i0.Output }],
            cancel: [{ type: i0.Output }],
            error: [{ type: i0.Output }],
            startForm: [{ type: i0.ViewChild, args: ['startForm',] }],
            inputAutocomplete: [{ type: i0.ViewChild, args: [material.MatAutocompleteTrigger,] }]
        };
        return StartProcessInstanceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProcessFilterRequestRepresentation = /** @class */ (function () {
        function ProcessFilterRequestRepresentation(obj) {
            this.processDefinitionId = obj && obj.processDefinitionId || null;
            this.appDefinitionId = obj && obj.appDefinitionId || null;
            this.state = obj && obj.state || null;
            this.sort = obj && obj.sort || null;
            this.page = obj && obj.page || 0;
            this.size = obj && obj.size || 25;
        }
        return ProcessFilterRequestRepresentation;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessListModule = /** @class */ (function () {
        function ProcessListModule() {
        }
        ProcessListModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            MaterialModule,
                            flexLayout.FlexLayoutModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            i1$1.CoreModule.forChild(),
                            TaskListModule,
                            PeopleModule,
                            ContentWidgetModule,
                            ProcessCommentsModule,
                            FormModule
                        ],
                        declarations: [
                            ProcessInstanceListComponent,
                            ProcessFiltersComponent,
                            ProcessInstanceDetailsComponent,
                            ProcessAuditDirective,
                            ProcessInstanceHeaderComponent,
                            ProcessInstanceTasksComponent,
                            StartProcessInstanceComponent
                        ],
                        exports: [
                            ProcessInstanceListComponent,
                            ProcessFiltersComponent,
                            ProcessInstanceDetailsComponent,
                            ProcessAuditDirective,
                            ProcessInstanceHeaderComponent,
                            ProcessInstanceTasksComponent,
                            StartProcessInstanceComponent
                        ]
                    },] }
        ];
        return ProcessListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppsListComponent = /** @class */ (function () {
        function AppsListComponent(appsProcessService, translationService) {
            var _this = this;
            this.appsProcessService = appsProcessService;
            this.translationService = translationService;
            /**
             * (**required**) Defines the layout of the apps. There are two possible
             * values, "GRID" and "LIST".
             */
            this.layoutType = AppsListComponent.LAYOUT_GRID;
            /**
             * Emitted when an app entry is clicked.
             */
            this.appClick = new i0.EventEmitter();
            /**
             * Emitted when an error occurs.
             */
            this.error = new i0.EventEmitter();
            this.appList = [];
            this.loading = false;
            this.hasEmptyCustomContentTemplate = false;
            this.apps$ = new rxjs.Observable(( /**
             * @param {?} observer
             * @return {?}
             */function (observer) { return _this.appsObserver = observer; }))
                .pipe(operators.share());
        }
        /**
         * @return {?}
         */
        AppsListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.isValidType()) {
                    this.setDefaultLayoutType();
                }
                this.apps$.subscribe(( /**
                 * @param {?} app
                 * @return {?}
                 */function (app) {
                    _this.appList.push(app);
                }));
                this.iconsMDL = new IconModel();
                this.load();
            };
        /**
         * @return {?}
         */
        AppsListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this.emptyCustomContent) {
                    this.hasEmptyCustomContentTemplate = true;
                }
            };
        /**
         * @private
         * @return {?}
         */
        AppsListComponent.prototype.load = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.loading = true;
                this.appsProcessService.getDeployedApplications()
                    .subscribe(( /**
             * @param {?} res
             * @return {?}
             */function (res) {
                    _this.filterApps(res).forEach(( /**
                     * @param {?} app
                     * @return {?}
                     */function (app) {
                        if (_this.isDefaultApp(app)) {
                            app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;
                            app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;
                            _this.appsObserver.next(app);
                        }
                        else if (app.deploymentId) {
                            _this.appsObserver.next(app);
                        }
                        _this.loading = false;
                    }));
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                    _this.loading = false;
                }));
            };
        /**
         * @param {?} app
         * @return {?}
         */
        AppsListComponent.prototype.isDefaultApp = /**
         * @param {?} app
         * @return {?}
         */
            function (app) {
                return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;
            };
        /**
         * @param {?} app
         * @return {?}
         */
        AppsListComponent.prototype.getAppName = /**
         * @param {?} app
         * @return {?}
         */
            function (app) {
                return this.isDefaultApp(app)
                    ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)
                    : rxjs.of(app.name);
            };
        /**
         * Pass the selected app as next
         * @param app
         */
        /**
         * Pass the selected app as next
         * @param {?} app
         * @return {?}
         */
        AppsListComponent.prototype.selectApp = /**
         * Pass the selected app as next
         * @param {?} app
         * @return {?}
         */
            function (app) {
                this.currentApp = app;
                this.appClick.emit(app);
            };
        /**
         * Return true if the appId is the current app
         * @param appId
         */
        /**
         * Return true if the appId is the current app
         * @param {?} appId
         * @return {?}
         */
        AppsListComponent.prototype.isSelected = /**
         * Return true if the appId is the current app
         * @param {?} appId
         * @return {?}
         */
            function (appId) {
                return (this.currentApp !== undefined && appId === this.currentApp.id);
            };
        /**
         * @private
         * @param {?} apps
         * @return {?}
         */
        AppsListComponent.prototype.filterApps = /**
         * @private
         * @param {?} apps
         * @return {?}
         */
            function (apps) {
                var _this = this;
                /** @type {?} */
                var filteredApps = [];
                if (this.filtersAppId) {
                    apps.filter(( /**
                     * @param {?} app
                     * @return {?}
                     */function (app) {
                        _this.filtersAppId.forEach(( /**
                         * @param {?} filter
                         * @return {?}
                         */function (filter) {
                            if (app.defaultAppId === filter.defaultAppId ||
                                app.deploymentId === filter.deploymentId ||
                                app.name === filter.name ||
                                app.id === filter.id ||
                                app.modelId === filter.modelId ||
                                app.tenantId === filter.tenantId) {
                                filteredApps.push(app);
                            }
                        }));
                    }));
                }
                else {
                    return apps;
                }
                return filteredApps;
            };
        /**
         * Check if the value of the layoutType property is an allowed value
         */
        /**
         * Check if the value of the layoutType property is an allowed value
         * @return {?}
         */
        AppsListComponent.prototype.isValidType = /**
         * Check if the value of the layoutType property is an allowed value
         * @return {?}
         */
            function () {
                if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {
                    return true;
                }
                return false;
            };
        /**
         * Assign the default value to LayoutType
         */
        /**
         * Assign the default value to LayoutType
         * @return {?}
         */
        AppsListComponent.prototype.setDefaultLayoutType = /**
         * Assign the default value to LayoutType
         * @return {?}
         */
            function () {
                this.layoutType = AppsListComponent.LAYOUT_GRID;
            };
        /**
         * Return true if the layout type is LIST
         */
        /**
         * Return true if the layout type is LIST
         * @return {?}
         */
        AppsListComponent.prototype.isList = /**
         * Return true if the layout type is LIST
         * @return {?}
         */
            function () {
                return this.layoutType === AppsListComponent.LAYOUT_LIST;
            };
        /**
         * Return true if the layout type is GRID
         */
        /**
         * Return true if the layout type is GRID
         * @return {?}
         */
        AppsListComponent.prototype.isGrid = /**
         * Return true if the layout type is GRID
         * @return {?}
         */
            function () {
                return this.layoutType === AppsListComponent.LAYOUT_GRID;
            };
        /**
         * @return {?}
         */
        AppsListComponent.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return this.appList.length === 0;
            };
        /**
         * @return {?}
         */
        AppsListComponent.prototype.isLoading = /**
         * @return {?}
         */
            function () {
                return this.loading;
            };
        /**
         * @param {?} app
         * @return {?}
         */
        AppsListComponent.prototype.getTheme = /**
         * @param {?} app
         * @return {?}
         */
            function (app) {
                return app.theme ? app.theme : '';
            };
        /**
         * @param {?} app
         * @return {?}
         */
        AppsListComponent.prototype.getBackgroundIcon = /**
         * @param {?} app
         * @return {?}
         */
            function (app) {
                return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);
            };
        AppsListComponent.LAYOUT_LIST = 'LIST';
        AppsListComponent.LAYOUT_GRID = 'GRID';
        AppsListComponent.DEFAULT_TASKS_APP = 'tasks';
        AppsListComponent.DEFAULT_TASKS_APP_NAME = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';
        AppsListComponent.DEFAULT_TASKS_APP_THEME = 'theme-2';
        AppsListComponent.DEFAULT_TASKS_APP_ICON = 'glyphicon-asterisk';
        AppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
        AppsListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-apps',
                        template: "<div class=\"menu-container\" *ngIf=\"!isEmpty()\">\n    <mat-list *ngIf=\"isList()\" class=\"adf-app-list\">\n        <mat-list-item class=\"adf-app-list-item\" (click)=\"selectApp(app)\" (keyup.enter)=\"selectApp(app)\" *ngFor=\"let app of appList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n            <mat-icon matListIcon>touch_app</mat-icon>\n            <span matLine>{{getAppName(app) | async}}</span>\n        </mat-list-item>\n    </mat-list>\n    <div fxLayout=\"row wrap\" *ngIf=\"isGrid()\" class=\"adf-app-listgrid\">\n        <div *ngFor=\"let app of appList\"\n            class=\"adf-app-listgrid-item\"\n            fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\">\n                <mat-card tabindex=\"0\"\n                    fxLayout=\"column\"\n                    role=\"button\"\n                    class=\"adf-app-listgrid-item-card\"\n                    title=\"{{getAppName(app) | async}}\"\n                    [ngClass]=\"[getTheme(app)]\"\n                    (click)=\"selectApp(app)\"\n                    (keyup.enter)=\"selectApp(app)\">\n                        <div class=\"adf-app-listgrid-item-card-logo\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{getBackgroundIcon(app)}}</mat-icon>\n                        </div>\n                        <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                            <h1>{{getAppName(app) | async}}</h1>\n                        </div>\n                        <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                            <div class=\"adf-line-clamp\">{{app.description}}</div>\n                        </mat-card-subtitle>\n\n                        <mat-card-actions class=\"adf-app-listgrid-item-card-actions\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-actions-icon\" *ngIf=\"isSelected(app.id)\">done</mat-icon>\n                        </mat-card-actions>\n                </mat-card>\n        </div>\n    </div>\n</div>\n\n<ng-container *ngIf=\"isLoading(); else empty\">\n    <div class=\"adf-app-list-spinner\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-container>\n\n<ng-template #empty>\n    <div class=\"adf-app-list-empty\" *ngIf=\"isEmpty()\">\n        <ng-content select=\"adf-custom-empty-content\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\" class=\"adf-custom-empty-template\"></ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content\n                icon=\"apps\"\n                [title]=\"'ADF_TASK_LIST.APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_TASK_LIST.APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AppsListComponent.ctorParameters = function () {
            return [
                { type: i1$1.AppsProcessService },
                { type: i1$1.TranslationService }
            ];
        };
        AppsListComponent.propDecorators = {
            emptyCustomContent: [{ type: i0.ContentChild, args: [i1$1.CustomEmptyContentTemplateDirective,] }],
            layoutType: [{ type: i0.Input }],
            filtersAppId: [{ type: i0.Input }],
            appClick: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return AppsListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectAppsDialogComponent = /** @class */ (function () {
        function SelectAppsDialogComponent(appsProcessService, dialogRef, data) {
            var _this = this;
            this.appsProcessService = appsProcessService;
            this.dialogRef = dialogRef;
            this.data = data;
            this.appsProcessService.getDeployedApplications().subscribe(( /**
             * @param {?} apps
             * @return {?}
             */function (apps) {
                _this.processApps = apps.filter(( /**
                 * @param {?} currentApp
                 * @return {?}
                 */function (currentApp) {
                    return currentApp.id;
                }));
            }));
        }
        /**
         * @return {?}
         */
        SelectAppsDialogComponent.prototype.onStart = /**
         * @return {?}
         */
            function () {
                this.dialogRef.close(this.selectedProcess);
            };
        SelectAppsDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-select-apps-dialog',
                        template: "<header mat-dialog-title id=\"adf-selet-app-dialog-title\">{{'APP.DIALOG.TITLE' | translate}}</header>\n<section mat-dialog-content>\n\n    <mat-select id=\"adf-selet-app-dialog-dropdown\" placeholder=\"{{'APP.DIALOG.LIST' | translate}}\" [(value)]=\"selectedProcess\" >\n        <mat-option *ngFor=\"let currentProcessApp of processApps\" [value]=\"currentProcessApp\">\n            {{ currentProcessApp.name }}\n        </mat-option>\n    </mat-select>\n\n</section>\n<footer mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <button mat-button (click)=\"onStart()\">{{'APP.DIALOG.START' | translate}}</button>\n</footer>\n"
                    }] }
        ];
        /** @nocollapse */
        SelectAppsDialogComponent.ctorParameters = function () {
            return [
                { type: i1$1.AppsProcessService },
                { type: material.MatDialogRef },
                { type: undefined, decorators: [{ type: i0.Inject, args: [material.MAT_DIALOG_DATA,] }] }
            ];
        };
        return SelectAppsDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppsListModule = /** @class */ (function () {
        function AppsListModule() {
        }
        AppsListModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            MaterialModule,
                            flexLayout.FlexLayoutModule,
                            i1$1.CoreModule.forChild()
                        ],
                        declarations: [
                            AppsListComponent,
                            SelectAppsDialogComponent
                        ],
                        exports: [
                            AppsListComponent,
                            SelectAppsDialogComponent
                        ],
                        entryComponents: [
                            SelectAppsDialogComponent
                        ]
                    },] }
        ];
        return AppsListModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskAttachmentListComponent = /** @class */ (function () {
        function TaskAttachmentListComponent(activitiContentService, contentService, thumbnailService, ngZone) {
            this.activitiContentService = activitiContentService;
            this.contentService = contentService;
            this.thumbnailService = thumbnailService;
            this.ngZone = ngZone;
            /**
             * Disable/Enable read only mode for attachment list.
             */
            this.disabled = false;
            /**
             * Emitted when the attachment is double-clicked or a view
             * option is selected from the context menu by the user from within the component.
             * Returns a Blob representing the clicked object.
             */
            this.attachmentClick = new i0.EventEmitter();
            /**
             * Emitted when the attachment list has fetched all the attachments.
             * Returns a list of attachments.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when an error occurs while fetching the attachments.
             */
            this.error = new i0.EventEmitter();
            this.hasCustomTemplate = false;
            this.attachments = [];
            this.isLoading = false;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['taskId'] && changes['taskId'].currentValue) {
                    this.loadAttachmentsByTaskId(changes['taskId'].currentValue);
                }
            };
        /**
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this.emptyTemplate) {
                    this.hasCustomTemplate = true;
                }
            };
        /**
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.attachments = [];
            };
        /**
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.hasCustomEmptyTemplate = /**
         * @return {?}
         */
            function () {
                return !!this.emptyTemplate;
            };
        /**
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.reload = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.run(( /**
                 * @return {?}
                 */function () {
                    _this.loadAttachmentsByTaskId(_this.taskId);
                }));
            };
        /**
         * @param {?} content
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.add = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                var _this = this;
                this.ngZone.run(( /**
                 * @return {?}
                 */function () {
                    _this.attachments.push({
                        id: content.id,
                        name: content.name,
                        created: content.created,
                        createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                        icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                    });
                }));
            };
        /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.loadAttachmentsByTaskId = /**
         * @private
         * @param {?} taskId
         * @return {?}
         */
            function (taskId) {
                var _this = this;
                if (taskId) {
                    this.isLoading = true;
                    this.reset();
                    /** @type {?} */
                    var opts = 'true';
                    this.activitiContentService.getTaskRelatedContent(taskId, opts).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        /** @type {?} */
                        var attachList = [];
                        res.data.forEach(( /**
                         * @param {?} content
                         * @return {?}
                         */function (content) {
                            attachList.push({
                                id: content.id,
                                name: content.name,
                                created: content.created,
                                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                                icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                            });
                        }));
                        _this.attachments = attachList;
                        _this.success.emit(_this.attachments);
                        _this.isLoading = false;
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                        _this.isLoading = false;
                    }));
                }
            };
        /**
         * @param {?} contentId
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.deleteAttachmentById = /**
         * @param {?} contentId
         * @return {?}
         */
            function (contentId) {
                var _this = this;
                if (contentId) {
                    this.activitiContentService.deleteRelatedContent(contentId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.attachments = _this.attachments.filter(( /**
                         * @param {?} content
                         * @return {?}
                         */function (content) {
                            return content.id !== contentId;
                        }));
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
            };
        /**
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return this.attachments && this.attachments.length === 0;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.onShowRowActionsMenu = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var viewAction = {
                    title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',
                    name: 'view'
                };
                /** @type {?} */
                var removeAction = {
                    title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',
                    name: 'remove'
                };
                /** @type {?} */
                var downloadAction = {
                    title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
                    name: 'download'
                };
                event.value.actions = [
                    viewAction,
                    downloadAction
                ];
                if (!this.disabled) {
                    event.value.actions.splice(1, 0, removeAction);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.onExecuteRowAction = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var args = event.value;
                /** @type {?} */
                var action = args.action;
                if (action.name === 'view') {
                    this.emitDocumentContent(args.row.obj);
                }
                else if (action.name === 'remove') {
                    this.deleteAttachmentById(args.row.obj.id);
                }
                else if (action.name === 'download') {
                    this.downloadContent(args.row.obj);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.openContent = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var content = event.value.obj;
                this.emitDocumentContent(content);
            };
        /**
         * @param {?} content
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.emitDocumentContent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                var _this = this;
                this.activitiContentService.getFileRawContent(content.id).subscribe(( /**
                 * @param {?} blob
                 * @return {?}
                 */function (blob) {
                    content.contentBlob = blob;
                    _this.attachmentClick.emit(content);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * @param {?} content
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.downloadContent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                var _this = this;
                this.activitiContentService.getFileRawContent(content.id).subscribe(( /**
                 * @param {?} blob
                 * @return {?}
                 */function (blob) { return _this.contentService.downloadBlob(blob, content.name); }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * @return {?}
         */
        TaskAttachmentListComponent.prototype.isDisabled = /**
         * @return {?}
         */
            function () {
                return this.disabled;
            };
        TaskAttachmentListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-task-attachment-list',
                        template: "<adf-datatable [rows]=\"attachments\"\n               [actions]=\"true\"\n               [loading]=\"isLoading\"\n               (rowDblClick)=\"openContent($event)\"\n               (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n               (executeRowAction)=\"onExecuteRowAction($event)\">\n            <adf-no-content-template>\n                <ng-template>\n                    <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                    <ng-template #defaulEmptyList>\n                        <adf-empty-list>\n                            <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                {{'ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER' | translate}}\n                            </div>\n                        </adf-empty-list>\n                    </ng-template>\n                </ng-template>\n            </adf-no-content-template>\n\n            <data-columns>\n                <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_TASK_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF_TASK_LIST.PROPERTIES.NAME\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n                <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"ADF_TASK_LIST.PROPERTIES.CREATED\"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                <!--Add your custom loading template here-->\n                    <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n</adf-datatable>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        TaskAttachmentListComponent.ctorParameters = function () {
            return [
                { type: i1$1.ProcessContentService },
                { type: i1$1.ContentService },
                { type: i1$1.ThumbnailService },
                { type: i0.NgZone }
            ];
        };
        TaskAttachmentListComponent.propDecorators = {
            emptyTemplate: [{ type: i0.ContentChild, args: [i1$1.EmptyListComponent,] }],
            taskId: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            attachmentClick: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return TaskAttachmentListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProcessAttachmentListComponent = /** @class */ (function () {
        function ProcessAttachmentListComponent(activitiContentService, contentService, thumbnailService, ngZone) {
            this.activitiContentService = activitiContentService;
            this.contentService = contentService;
            this.thumbnailService = thumbnailService;
            this.ngZone = ngZone;
            /**
             * Disable/Enable read-only mode for attachment list.
             */
            this.disabled = false;
            /**
             * Emitted when the attachment is double-clicked or the
             * view option is selected from the context menu by the user from
             * within the component. Returns a Blob representing the object
             * that was clicked.
             */
            this.attachmentClick = new i0.EventEmitter();
            /**
             * Emitted when the attachment list has fetched all the attachments.
             * Returns a list of attachments.
             */
            this.success = new i0.EventEmitter();
            /**
             * Emitted when the attachment list is not able to fetch the attachments
             * (eg, following a network error).
             */
            this.error = new i0.EventEmitter();
            this.hasCustomTemplate = false;
            this.attachments = [];
            this.isLoading = false;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
                    this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);
                }
            };
        /**
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this.emptyTemplate) {
                    this.hasCustomTemplate = true;
                }
            };
        /**
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.attachments = [];
            };
        /**
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.reload = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.run(( /**
                 * @return {?}
                 */function () {
                    _this.loadAttachmentsByProcessInstanceId(_this.processInstanceId);
                }));
            };
        /**
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.hasCustomEmptyTemplate = /**
         * @return {?}
         */
            function () {
                return !!this.emptyTemplate;
            };
        /**
         * @param {?} content
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.add = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                var _this = this;
                this.ngZone.run(( /**
                 * @return {?}
                 */function () {
                    _this.attachments.push({
                        id: content.id,
                        name: content.name,
                        created: content.created,
                        createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                        icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                    });
                }));
            };
        /**
         * @private
         * @param {?} processInstanceId
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.loadAttachmentsByProcessInstanceId = /**
         * @private
         * @param {?} processInstanceId
         * @return {?}
         */
            function (processInstanceId) {
                var _this = this;
                if (processInstanceId) {
                    this.reset();
                    this.isLoading = true;
                    /** @type {?} */
                    var opts = 'true';
                    this.activitiContentService.getProcessRelatedContent(processInstanceId, opts).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        res.data.forEach(( /**
                         * @param {?} content
                         * @return {?}
                         */function (content) {
                            _this.attachments.push({
                                id: content.id,
                                name: content.name,
                                created: content.created,
                                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                                icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                            });
                        }));
                        _this.success.emit(_this.attachments);
                        _this.isLoading = false;
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                        _this.isLoading = false;
                    }));
                }
            };
        /**
         * @private
         * @param {?} contentId
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.deleteAttachmentById = /**
         * @private
         * @param {?} contentId
         * @return {?}
         */
            function (contentId) {
                var _this = this;
                if (contentId) {
                    this.activitiContentService.deleteRelatedContent(contentId).subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        _this.attachments = _this.attachments.filter(( /**
                         * @param {?} content
                         * @return {?}
                         */function (content) {
                            return content.id !== contentId;
                        }));
                    }), ( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) {
                        _this.error.emit(err);
                    }));
                }
            };
        /**
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return this.attachments && this.attachments.length === 0;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.onShowRowActionsMenu = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var viewAction = {
                    title: 'ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT',
                    name: 'view'
                };
                /** @type {?} */
                var removeAction = {
                    title: 'ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT',
                    name: 'remove'
                };
                /** @type {?} */
                var downloadAction = {
                    title: 'ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
                    name: 'download'
                };
                event.value.actions = [
                    viewAction,
                    downloadAction
                ];
                if (!this.disabled) {
                    event.value.actions.splice(1, 0, removeAction);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.onExecuteRowAction = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var args = event.value;
                /** @type {?} */
                var action = args.action;
                if (action.name === 'view') {
                    this.emitDocumentContent(args.row.obj);
                }
                else if (action.name === 'remove') {
                    this.deleteAttachmentById(args.row.obj.id);
                }
                else if (action.name === 'download') {
                    this.downloadContent(args.row.obj);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.openContent = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var content = event.value.obj;
                this.emitDocumentContent(content);
            };
        /**
         * @param {?} content
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.emitDocumentContent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                var _this = this;
                this.activitiContentService.getFileRawContent(content.id).subscribe(( /**
                 * @param {?} blob
                 * @return {?}
                 */function (blob) {
                    content.contentBlob = blob;
                    _this.attachmentClick.emit(content);
                }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * @param {?} content
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.downloadContent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                var _this = this;
                this.activitiContentService.getFileRawContent(content.id).subscribe(( /**
                 * @param {?} blob
                 * @return {?}
                 */function (blob) { return _this.contentService.downloadBlob(blob, content.name); }), ( /**
                 * @param {?} err
                 * @return {?}
                 */function (err) {
                    _this.error.emit(err);
                }));
            };
        /**
         * @return {?}
         */
        ProcessAttachmentListComponent.prototype.isDisabled = /**
         * @return {?}
         */
            function () {
                return this.disabled;
            };
        ProcessAttachmentListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-process-attachment-list',
                        template: "<adf-datatable  [rows]=\"attachments\" \n                [actions]=\"true\" \n                [loading]=\"isLoading\" \n                (rowDblClick)=\"openContent($event)\" \n                (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n                (executeRowAction)=\"onExecuteRowAction($event)\">\n\n                <adf-no-content-template>\n                    <ng-template>\n                        <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                        <ng-template #defaulEmptyList>\n                            <adf-empty-list>\n                                <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                    {{'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.HEADER' | translate}}\n                                </div>\n                            </adf-empty-list>\n                        </ng-template>\n                    </ng-template>\n                </adf-no-content-template>\n\n    <data-columns>\n        <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_PROCESS_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n        <data-column key=\"name\" type=\"text\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.NAME' | translate}}\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n        <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.CREATED' | translate}}\"></data-column>\n    </data-columns>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <!--Add your custom loading template here-->\n            <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n            </mat-progress-spinner>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        ProcessAttachmentListComponent.ctorParameters = function () {
            return [
                { type: i1$1.ProcessContentService },
                { type: i1$1.ContentService },
                { type: i1$1.ThumbnailService },
                { type: i0.NgZone }
            ];
        };
        ProcessAttachmentListComponent.propDecorators = {
            emptyTemplate: [{ type: i0.ContentChild, args: [i1$1.EmptyListComponent,] }],
            processInstanceId: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            attachmentClick: [{ type: i0.Output }],
            success: [{ type: i0.Output }],
            error: [{ type: i0.Output }]
        };
        return ProcessAttachmentListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CreateProcessAttachmentComponent = /** @class */ (function () {
        function CreateProcessAttachmentComponent(activitiContentService) {
            this.activitiContentService = activitiContentService;
            /**
             * Emitted when an error occurs while creating or uploading an attachment
             * from the user within the component.
             */
            this.error = new i0.EventEmitter();
            /**
             * Emitted when an attachment is successfully created or uploaded
             * from within the component.
             */
            this.success = new i0.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        CreateProcessAttachmentComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
                    this.processInstanceId = changes['processInstanceId'].currentValue;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        CreateProcessAttachmentComponent.prototype.onFileUpload = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                var e_1, _a;
                /** @type {?} */
                var filesList = event.detail.files.map(( /**
                 * @param {?} obj
                 * @return {?}
                 */function (obj) { return obj.file; }));
                try {
                    for (var filesList_1 = __values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                        var fileInfoObj = filesList_1_1.value;
                        /** @type {?} */
                        var file = fileInfoObj;
                        /** @type {?} */
                        var opts = {
                            isRelatedContent: true
                        };
                        this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            _this.success.emit(res);
                        }), ( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            _this.error.emit(err);
                        }));
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return))
                            _a.call(filesList_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        CreateProcessAttachmentComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-create-process-attachment',
                        template: "<button\n    id=\"add_new_process_content_button\"\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                        styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                    }] }
        ];
        /** @nocollapse */
        CreateProcessAttachmentComponent.ctorParameters = function () {
            return [
                { type: i1$1.ProcessContentService }
            ];
        };
        CreateProcessAttachmentComponent.propDecorators = {
            processInstanceId: [{ type: i0.Input }],
            error: [{ type: i0.Output }],
            success: [{ type: i0.Output }]
        };
        return CreateProcessAttachmentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachmentComponent = /** @class */ (function () {
        function AttachmentComponent(activitiContentService) {
            this.activitiContentService = activitiContentService;
            /**
             * Emitted when an error occurs while creating or uploading an
             *  attachment from the user within the component.
             */
            this.error = new i0.EventEmitter();
            /**
             * Emitted when an attachment is created or uploaded successfully
             * from within the component.
             */
            this.success = new i0.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        AttachmentComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['taskId'] && changes['taskId'].currentValue) {
                    this.taskId = changes['taskId'].currentValue;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        AttachmentComponent.prototype.onFileUpload = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                var e_1, _a;
                /** @type {?} */
                var filesList = event.detail.files.map(( /**
                 * @param {?} obj
                 * @return {?}
                 */function (obj) { return obj.file; }));
                try {
                    for (var filesList_1 = __values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                        var fileInfoObj = filesList_1_1.value;
                        /** @type {?} */
                        var file = fileInfoObj;
                        /** @type {?} */
                        var opts = {
                            isRelatedContent: true
                        };
                        this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            _this.success.emit(res);
                        }), ( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            _this.error.emit(err);
                        }));
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return))
                            _a.call(filesList_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        AttachmentComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-create-task-attachment',
                        template: "<button\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                        styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                    }] }
        ];
        /** @nocollapse */
        AttachmentComponent.ctorParameters = function () {
            return [
                { type: i1$1.ProcessContentService }
            ];
        };
        AttachmentComponent.propDecorators = {
            taskId: [{ type: i0.Input }],
            error: [{ type: i0.Output }],
            success: [{ type: i0.Output }]
        };
        return AttachmentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AttachmentModule = /** @class */ (function () {
        function AttachmentModule() {
        }
        AttachmentModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$1.CoreModule.forChild(),
                            MaterialModule
                        ],
                        declarations: [
                            TaskAttachmentListComponent,
                            ProcessAttachmentListComponent,
                            CreateProcessAttachmentComponent,
                            CreateProcessAttachmentComponent,
                            AttachmentComponent
                        ],
                        exports: [
                            TaskAttachmentListComponent,
                            ProcessAttachmentListComponent,
                            CreateProcessAttachmentComponent,
                            CreateProcessAttachmentComponent,
                            AttachmentComponent
                        ]
                    },] }
        ];
        return AttachmentModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ɵ0$2 = {
        name: 'adf-process-services',
        source: 'assets/adf-process-services'
    };
    var ProcessModule = /** @class */ (function () {
        function ProcessModule() {
        }
        /**
         * @return {?}
         */
        ProcessModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ProcessModule,
                    providers: [
                        {
                            provide: i1$1.TRANSLATION_PROVIDER,
                            multi: true,
                            useValue: {
                                name: 'adf-process-services',
                                source: 'assets/adf-process-services'
                            }
                        }
                    ]
                };
            };
        /**
         * @return {?}
         */
        ProcessModule.forChild = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ProcessModuleLazy
                };
            };
        ProcessModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$1.CoreModule.forChild(),
                            common.CommonModule,
                            ProcessCommentsModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            MaterialModule,
                            ProcessListModule,
                            TaskListModule,
                            AppsListModule,
                            AttachmentModule,
                            PeopleModule,
                            FormModule
                        ],
                        providers: [
                            {
                                provide: i1$1.TRANSLATION_PROVIDER,
                                multi: true,
                                useValue: ɵ0$2
                            }
                        ],
                        exports: [
                            common.CommonModule,
                            ProcessCommentsModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            ProcessListModule,
                            TaskListModule,
                            AppsListModule,
                            AttachmentModule,
                            PeopleModule,
                            FormModule
                        ]
                    },] }
        ];
        return ProcessModule;
    }());
    var ProcessModuleLazy = /** @class */ (function () {
        function ProcessModuleLazy() {
        }
        ProcessModuleLazy.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1$1.CoreModule.forChild(),
                            common.CommonModule,
                            ProcessCommentsModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            MaterialModule,
                            ProcessListModule,
                            TaskListModule,
                            AppsListModule,
                            AttachmentModule,
                            PeopleModule
                        ],
                        exports: [
                            common.CommonModule,
                            ProcessCommentsModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            ProcessListModule,
                            TaskListModule,
                            AppsListModule,
                            AttachmentModule,
                            PeopleModule
                        ]
                    },] }
        ];
        return ProcessModuleLazy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ProcessFiltersComponent = ProcessFiltersComponent;
    exports.ProcessInstanceDetailsComponent = ProcessInstanceDetailsComponent;
    exports.ProcessAuditDirective = ProcessAuditDirective;
    exports.ProcessInstanceHeaderComponent = ProcessInstanceHeaderComponent;
    exports.ProcessInstanceTasksComponent = ProcessInstanceTasksComponent;
    exports.ProcessInstanceListComponent = ProcessInstanceListComponent;
    exports.StartProcessInstanceComponent = StartProcessInstanceComponent;
    exports.ProcessService = ProcessService;
    exports.ProcessFilterService = ProcessFilterService;
    exports.FilterProcessRepresentationModel = FilterProcessRepresentationModel;
    exports.ProcessFilterParamRepresentationModel = ProcessFilterParamRepresentationModel;
    exports.ProcessDefinitionRepresentation = ProcessDefinitionRepresentation;
    exports.ProcessInstance = ProcessInstance;
    exports.ProcessFilterRequestRepresentation = ProcessFilterRequestRepresentation;
    exports.ProcessInstanceVariable = ProcessInstanceVariable;
    exports.ProcessListModule = ProcessListModule;
    exports.TaskListComponent = TaskListComponent;
    exports.ChecklistComponent = ChecklistComponent;
    exports.TaskHeaderComponent = TaskHeaderComponent;
    exports.NoTaskDetailsTemplateDirective = NoTaskDetailsTemplateDirective;
    exports.TaskFiltersComponent = TaskFiltersComponent;
    exports.TaskDetailsComponent = TaskDetailsComponent;
    exports.TaskAuditDirective = TaskAuditDirective;
    exports.StartTaskComponent = StartTaskComponent;
    exports.TaskStandaloneComponent = TaskStandaloneComponent;
    exports.AttachFormComponent = AttachFormComponent;
    exports.TaskListService = TaskListService;
    exports.ProcessUploadService = ProcessUploadService;
    exports.TaskUploadService = TaskUploadService;
    exports.TaskFilterService = TaskFilterService;
    exports.AppDefinitionRepresentationModel = AppDefinitionRepresentationModel;
    exports.FilterParamsModel = FilterParamsModel;
    exports.FilterRepresentationModel = FilterRepresentationModel;
    exports.TaskQueryRequestRepresentationModel = TaskQueryRequestRepresentationModel;
    exports.Form = Form;
    exports.StartTaskModel = StartTaskModel;
    exports.TaskDetailsEvent = TaskDetailsEvent;
    exports.TaskDetailsModel = TaskDetailsModel;
    exports.TaskListModel = TaskListModel;
    exports.UserEventModel = UserEventModel;
    exports.UserGroupModel = UserGroupModel;
    exports.TaskListModule = TaskListModule;
    exports.AppsListComponent = AppsListComponent;
    exports.SelectAppsDialogComponent = SelectAppsDialogComponent;
    exports.AppsListModule = AppsListModule;
    exports.TaskAttachmentListComponent = TaskAttachmentListComponent;
    exports.ProcessAttachmentListComponent = ProcessAttachmentListComponent;
    exports.CreateProcessAttachmentComponent = CreateProcessAttachmentComponent;
    exports.AttachmentComponent = AttachmentComponent;
    exports.AttachmentModule = AttachmentModule;
    exports.ProcessCommentsComponent = ProcessCommentsComponent;
    exports.ProcessCommentsModule = ProcessCommentsModule;
    exports.PeopleComponent = PeopleComponent;
    exports.PeopleListComponent = PeopleListComponent;
    exports.PeopleSearchComponent = PeopleSearchComponent;
    exports.PeopleSearchFieldComponent = PeopleSearchFieldComponent;
    exports.PeopleSelectorComponent = PeopleSelectorComponent;
    exports.PeopleSearchActionLabelDirective = PeopleSearchActionLabelDirective;
    exports.PeopleSearchTitleDirective = PeopleSearchTitleDirective;
    exports.PeopleModule = PeopleModule;
    exports.AttachFileWidgetComponent = AttachFileWidgetComponent;
    exports.AttachFolderWidgetComponent = AttachFolderWidgetComponent;
    exports.AttachFileWidgetDialogComponent = AttachFileWidgetDialogComponent;
    exports.AttachFileWidgetDialogService = AttachFileWidgetDialogService;
    exports.ContentWidgetModule = ContentWidgetModule;
    exports.FormComponent = FormComponent;
    exports.StartFormComponent = StartFormComponent;
    exports.FormModule = FormModule;
    exports.ProcessModule = ProcessModule;
    exports.ProcessModuleLazy = ProcessModuleLazy;
    exports.ɵb = MaterialModule;
    exports.ɵa = modules;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=adf-process-services.umd.js.map