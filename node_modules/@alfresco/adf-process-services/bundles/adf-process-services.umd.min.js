!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@alfresco/js-api"),require("@angular/material/core"),require("@angular/material/dialog"),require("@alfresco/adf-content-services"),require("moment-es6"),require("rxjs"),require("rxjs/operators"),require("@angular/material"),require("@angular/flex-layout"),require("@angular/common"),require("@angular/core"),require("@angular/forms"),require("@alfresco/adf-core")):"function"==typeof define&&define.amd?define("@alfresco/adf-process-services",["exports","@alfresco/js-api","@angular/material/core","@angular/material/dialog","@alfresco/adf-content-services","moment-es6","rxjs","rxjs/operators","@angular/material","@angular/flex-layout","@angular/common","@angular/core","@angular/forms","@alfresco/adf-core"],e):e((t.alfresco=t.alfresco||{},t.alfresco["adf-process-services"]={}),t["@alfresco/js-api"],t["@angular/material/core"],t.ng.material.dialog,t["@alfresco/adf-content-services"],t["moment-es6"],t.rxjs,t.rxjs.operators,t["@angular/material"],t["@angular/flex-layout"],t.ng.common,t.ng.core,t.ng.forms,t["@alfresco/adf-core"])}(this,function(t,e,n,i,s,r,d,a,o,c,l,u,p,m){"use strict";r=r&&r.hasOwnProperty("default")?r["default"]:r;
/*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
var f=function(){function t(t){t&&(this.id=t.id||null,this.appId=t.appId||null,this.name=t.name||null,this.recent=!!t.recent,this.icon=t.icon||null,this.filter=t.filter||null,this.index=t.index)}return t.prototype.hasFilter=function(){return!!this.filter},t}(),h=function qt(t){this.processDefinitionId=t.processDefinitionId||null,this.appDefinitionId=t.appDefinitionId||null,this.processInstanceId=t.processInstanceId||null,this.state=t.state||null,this.sort=t.sort||null,this.page=t.page||null,this.size=t.size||null},g=function(){function t(t){this.alfrescoApiService=t}return t.prototype.getProcessFilters=function(t){var e=this;return d.from(this.callApiProcessFilters(t)).pipe(a.map(function(t){var n=[];return t.data.forEach(function(t){var e=new f(t);n.push(e)}),n}),a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.getProcessFilterById=function(e,t){var n=this;return d.from(this.callApiProcessFilters(t)).pipe(a.map(function(t){return t.data.find(function(t){return t.id===e})}),a.catchError(function(t){return n.handleProcessError(t)}))},t.prototype.getProcessFilterByName=function(e,t){var n=this;return d.from(this.callApiProcessFilters(t)).pipe(a.map(function(t){return t.data.find(function(t){return t.name===e})}),a.catchError(function(t){return n.handleProcessError(t)}))},t.prototype.createDefaultFilters=function(t){var e=this,i=this.getRunningFilterInstance(t),o=this.addProcessFilter(i),s=this.getCompletedFilterInstance(t),r=this.addProcessFilter(s),a=this.getAllFilterInstance(t),c=this.addProcessFilter(a);return new d.Observable(function(n){d.forkJoin(o,r,c).subscribe(function(t){var e=[];t.forEach(function(t){t.name===i.name?(i.id=t.id,e.push(i)):t.name===s.name?(s.id=t.id,e.push(s)):t.name===a.name&&(a.id=t.id,e.push(a))}),n.next(e),n.complete()},function(t){e.handleProcessError(t)})})},t.prototype.getRunningFilterInstance=function(t){return new f({name:"Running",appId:t,recent:!0,icon:"glyphicon-random",filter:{sort:"created-desc",name:"",state:"running"}})},t.prototype.getCompletedFilterInstance=function(t){return new f({name:"Completed",appId:t,recent:!1,icon:"glyphicon-ok-sign",filter:{sort:"created-desc",name:"",state:"completed"}})},t.prototype.getAllFilterInstance=function(t){return new f({name:"All",appId:t,recent:!0,icon:"glyphicon-th",filter:{sort:"created-desc",name:"",state:"all"}})},t.prototype.addProcessFilter=function(t){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(t)).pipe(a.map(function(t){return t}),a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.callApiProcessFilters=function(t){return t?this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({appId:t}):this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters()},t.prototype.handleProcessError=function(t){return d.throwError(t||"Server error")},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:m.AlfrescoApiService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(m.AlfrescoApiService))},token:t,providedIn:"root"}),t}(),y=function(){function e(){this.initIconsMDL()}return e.prototype.mapGlyphiconToMaterialDesignIcons=function(t){return this.iconsMDL.get(t)?this.iconsMDL.get(t):e.DEFAULT_TASKS_APP_MATERIAL_ICON},e.prototype.initIconsMDL=function(){this.iconsMDL=new Map,this.iconsMDL.set("glyphicon-asterisk","ac_unit"),this.iconsMDL.set("glyphicon-plus","add"),this.iconsMDL.set("glyphicon-euro","euro_symbol"),this.iconsMDL.set("glyphicon-cloud","cloud"),this.iconsMDL.set("glyphicon-envelope","mail"),this.iconsMDL.set("glyphicon-pencil","create"),this.iconsMDL.set("glyphicon-glass","local_bar"),this.iconsMDL.set("glyphicon-music","music_note"),this.iconsMDL.set("glyphicon-search","search"),this.iconsMDL.set("glyphicon-heart","favorite"),this.iconsMDL.set("glyphicon-heart-empty","favorite_border"),this.iconsMDL.set("glyphicon-star","star"),this.iconsMDL.set("glyphicon-star-empty","star_border"),this.iconsMDL.set("glyphicon-user","person"),this.iconsMDL.set("glyphicon-film","movie_creation"),this.iconsMDL.set("glyphicon-th-large","view_comfy"),this.iconsMDL.set("glyphicon-th","dashboard"),this.iconsMDL.set("glyphicon-th-list","list"),this.iconsMDL.set("glyphicon-ok","done"),this.iconsMDL.set("glyphicon-remove","cancel"),this.iconsMDL.set("glyphicon-zoom-in","zoom_in"),this.iconsMDL.set("glyphicon-zoom-out","zoom_out"),this.iconsMDL.set("glyphicon-off","highlight_off"),this.iconsMDL.set("glyphicon-signal","signal_cellular_4_bar"),this.iconsMDL.set("glyphicon-cog","settings"),this.iconsMDL.set("glyphicon-trash","delete"),this.iconsMDL.set("glyphicon-home","home"),this.iconsMDL.set("glyphicon-file","insert_drive_file"),this.iconsMDL.set("glyphicon-time","access_time"),this.iconsMDL.set("glyphicon-road","map"),this.iconsMDL.set("glyphicon-download-alt","file_download"),this.iconsMDL.set("glyphicon-download","file_download"),this.iconsMDL.set("glyphicon-upload","file_upload"),this.iconsMDL.set("glyphicon-inbox","inbox"),this.iconsMDL.set("glyphicon-play-circle","play_circle_outline"),this.iconsMDL.set("glyphicon-repeat","refresh"),this.iconsMDL.set("glyphicon-refresh","sync"),this.iconsMDL.set("glyphicon-list-alt","event_note"),this.iconsMDL.set("glyphicon-lock","lock_outline"),this.iconsMDL.set("glyphicon-flag","assistant_photo"),this.iconsMDL.set("glyphicon-headphones","headset"),this.iconsMDL.set("glyphicon-volume-up","volume_up"),this.iconsMDL.set("glyphicon-tag","local_offer"),this.iconsMDL.set("glyphicon-tags","local_offer"),this.iconsMDL.set("glyphicon-book","library_books"),this.iconsMDL.set("glyphicon-bookmark","collections_bookmark"),this.iconsMDL.set("glyphicon-print","local_printshop"),this.iconsMDL.set("glyphicon-camera","local_see"),this.iconsMDL.set("glyphicon-list","view_list"),this.iconsMDL.set("glyphicon-facetime-video","video_call"),this.iconsMDL.set("glyphicon-picture","photo"),this.iconsMDL.set("glyphicon-map-marker","add_location"),this.iconsMDL.set("glyphicon-adjust","brightness_4"),this.iconsMDL.set("glyphicon-tint","invert_colors"),this.iconsMDL.set("glyphicon-edit","edit"),this.iconsMDL.set("glyphicon-share","share"),this.iconsMDL.set("glyphicon-check","assignment_turned_in"),this.iconsMDL.set("glyphicon-move","open_with"),this.iconsMDL.set("glyphicon-play","play_arrow"),this.iconsMDL.set("glyphicon-eject","eject"),this.iconsMDL.set("glyphicon-plus-sign","add_circle"),this.iconsMDL.set("glyphicon-minus-sign","remove_circle"),this.iconsMDL.set("glyphicon-remove-sign","cancel"),this.iconsMDL.set("glyphicon-ok-sign","check_circle"),this.iconsMDL.set("glyphicon-question-sign","help"),this.iconsMDL.set("glyphicon-info-sign","info"),this.iconsMDL.set("glyphicon-screenshot","flare"),this.iconsMDL.set("glyphicon-remove-circle","cancel"),this.iconsMDL.set("glyphicon-ok-circle","add_circle"),this.iconsMDL.set("glyphicon-ban-circle","block"),this.iconsMDL.set("glyphicon-share-alt","redo"),this.iconsMDL.set("glyphicon-exclamation-sign","error"),this.iconsMDL.set("glyphicon-gift","giftcard"),this.iconsMDL.set("glyphicon-leaf","spa"),this.iconsMDL.set("glyphicon-fire","whatshot"),this.iconsMDL.set("glyphicon-eye-open","remove_red_eye"),this.iconsMDL.set("glyphicon-eye-close","remove_red_eye"),this.iconsMDL.set("glyphicon-warning-sign","warning"),this.iconsMDL.set("glyphicon-plane","airplanemode_active"),this.iconsMDL.set("glyphicon-calendar",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-random","shuffle"),this.iconsMDL.set("glyphicon-comment",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-magnet",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-retweet",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-shopping-cart",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-folder-close",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-folder-open",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-hdd",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-bullhorn",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-bell",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-certificate",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-thumbs-up",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-thumbs-down",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-hand-left",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-globe",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-wrench",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-tasks",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-filter",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-briefcase",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-dashboard",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-paperclip",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-link",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-phone",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-pushpin",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-usd",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-gbp",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-sort",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-flash",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-record","radio_button_checked"),this.iconsMDL.set("glyphicon-save",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-open",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-saved",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-send","send"),this.iconsMDL.set("glyphicon-floppy-disk",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-credit-card",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-cutlery",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-earphone",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-phone-alt",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-tower",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-stats",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-cloud-download",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-cloud-upload",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-tree-conifer",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-tree-deciduous",e.DEFAULT_TASKS_APP_MATERIAL_ICON),this.iconsMDL.set("glyphicon-align-left","format_align_left")},e.DEFAULT_TASKS_APP_MATERIAL_ICON="favorite_border",e}(),v=function(){function t(t,e){this.processFilterService=t,this.appsProcessService=e,this.filterClick=new u.EventEmitter,this.success=new u.EventEmitter,this.error=new u.EventEmitter,this.showIcon=!0,this.filterSelected=new u.EventEmitter,this.filters=[]}return t.prototype.ngOnInit=function(){this.iconsMDL=new y},t.prototype.ngOnChanges=function(t){var e=t.appId,n=t.appName,i=t.filterParam;e&&(e.currentValue||null===e.currentValue)?this.getFiltersByAppId(e.currentValue):n&&n.currentValue?this.getFiltersByAppName(n.currentValue):i&&i.currentValue!==i.previousValue&&this.selectProcessFilter(i.currentValue)},t.prototype.getFiltersByAppId=function(e){var n=this;this.processFilterService.getProcessFilters(e).subscribe(function(t){0===t.length&&n.isFilterListEmpty()?n.processFilterService.createDefaultFilters(e).subscribe(function(t){n.resetFilter(),n.filters=t,n.selectProcessFilter(n.filterParam),n.success.emit(t)},function(t){n.error.emit(t)}):(n.resetFilter(),n.filters=t,n.selectProcessFilter(n.filterParam),n.success.emit(t))},function(t){n.error.emit(t)})},t.prototype.getFiltersByAppName=function(t){var e=this;this.appsProcessService.getDeployedApplicationsByName(t).subscribe(function(t){e.getFiltersByAppId(t.id),e.selectProcessFilter(e.filterParam)},function(t){e.error.emit(t)})},t.prototype.selectFilter=function(t){this.currentFilter=t,this.filterClick.emit(t)},t.prototype.selectProcessFilter=function(n){var i=this;n&&this.filters.filter(function(t,e){(n.name&&n.name.toLowerCase()===t.name.toLowerCase()||n.id===t.id||n.index===e)&&(i.currentFilter=t,i.filterSelected.emit(t))}),this.isCurrentFilterEmpty()&&this.selectDefaultTaskFilter()},t.prototype.selectRunningFilter=function(){this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null))},t.prototype.selectDefaultTaskFilter=function(){this.isFilterListEmpty()||(this.currentFilter=this.filters[0],this.filterSelected.emit(this.filters[0]))},t.prototype.getCurrentFilter=function(){return this.currentFilter},t.prototype.isFilterListEmpty=function(){return this.filters===undefined||this.filters&&0===this.filters.length},t.prototype.resetFilter=function(){this.filters=[],this.currentFilter=undefined},t.prototype.isCurrentFilterEmpty=function(){return this.currentFilter===undefined||null},t.prototype.getFilterIcon=function(t){return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(t)},t.decorators=[{type:u.Component,args:[{selector:"adf-process-instance-filters",template:'<div class="menu-container">\n    <mat-list class="adf-menu-list">\n        <mat-list-item (click)="selectFilter(filter)" *ngFor="let filter of filters"\n                        class="adf-filters__entry" [class.adf-active]="currentFilter === filter">\n            <mat-icon *ngIf="showIcon" matListIcon class="adf-filters__entry-icon">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]="filter.name + \'_filter\'">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n',styles:[""]}]}],t.ctorParameters=function(){return[{type:g},{type:m.AppsProcessService}]},t.propDecorators={filterParam:[{type:u.Input}],filterClick:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}],appId:[{type:u.Input}],appName:[{type:u.Input}],showIcon:[{type:u.Input}],filterSelected:[{type:u.Output}]},t}(),S=function zt(t){this.id=t&&t.id||null,this.name=t&&t.name||null,this.description=t&&t.description||null,this.key=t&&t.key||null,this.category=t&&t.category||null,this.version=t&&t.version||0,this.deploymentId=t&&t.deploymentId||null,this.tenantId=t&&t.tenantId||null,this.metaDataValues=t&&t.metaDataValues||[],this.hasStartForm=!(!t||!0!==t.hasStartForm)},I=function Yt(t){this.name=t&&t.name!==undefined?t.name:null,this.scope=t&&t.scope!==undefined?t.scope:null,this.value=t&&t.value!==undefined?t.value:null,this.valueUrl=t&&t.valueUrl!==undefined?t.valueUrl:null},T=function Wt(t){this.businessKey=t&&t.businessKey!==undefined?t.businessKey:null,this.ended=t&&t.ended!==undefined?t.ended:null,this.graphicalNotationDefined=t&&t.graphicalNotationDefined!==undefined?t.graphicalNotationDefined:null,this.id=t&&t.id!==undefined?t.id:null,this.name=t&&t.name!==undefined?t.name:null,this.processDefinitionCategory=t&&t.processDefinitionCategory!==undefined?t.processDefinitionCategory:null,this.processDefinitionDeploymentId=t&&t.processDefinitionDeploymentId!==undefined?t.processDefinitionDeploymentId:null,this.processDefinitionDescription=t&&t.processDefinitionDescription!==undefined?t.processDefinitionDescription:null,this.processDefinitionId=t&&t.processDefinitionId!==undefined?t.processDefinitionId:null,this.processDefinitionKey=t&&t.processDefinitionKey!==undefined?t.processDefinitionKey:null,this.processDefinitionName=t&&t.processDefinitionName!==undefined?t.processDefinitionName:null,this.processDefinitionVersion=t&&t.processDefinitionVersion!==undefined?t.processDefinitionVersion:null,this.startFormDefined=t&&t.startFormDefined!==undefined?t.startFormDefined:null,this.started=t&&t.started!==undefined?t.started:null,this.startedBy=t&&t.startedBy!==undefined?t.startedBy:null,this.tenantId=t&&t.tenantId!==undefined?t.tenantId:null,this.variables=t&&t.variables!==undefined?t.variables:null},A=function Jt(t){t&&(this.size=t.size||null,this.total=t.total||null,this.start=t.start||null,this.length=t.length||null,this.data=t.data||[])},D=function(){function t(t){this.alfrescoApiService=t}return t.prototype.getProcessInstances=function(t,n){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(t)).pipe(a.map(function(t){if(n){var e=t.data.filter(function(t){return t.processDefinitionKey===n});return t.data=e,t}return t}),a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.getProcesses=function(t,e){return this.getProcessInstances(t,e).pipe(a.catchError(function(){return d.of(new A({}))}))},t.prototype.fetchProcessAuditPdfById=function(t){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(t)).pipe(a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.fetchProcessAuditJsonById=function(t){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(t)).pipe(a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.getProcess=function(t){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(t)).pipe(a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.getProcessTasks=function(t,e){var n=this,i=e?{processInstanceId:t,state:e}:{processInstanceId:t};return d.from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(i)).pipe(a.map(this.extractData),a.map(function(t){return t.map(function(t){return t.created=moment(t.created,"YYYY-MM-DD").format(),t})}),a.catchError(function(t){return n.handleProcessError(t)}))},t.prototype.getProcessDefinitions=function(t){var e=this,n=t?{latest:!0,appDefinitionId:t}:{latest:!0};return d.from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(n)).pipe(a.map(this.extractData),a.map(function(t){return t.map(function(t){return new S(t)})}),a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.startProcess=function(t,e,n,i,o){var s=this,r={name:e,processDefinitionId:t};return n&&(r.outcome=n),i&&(r.values=i),o&&(r.variables=o),d.from(this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(r)).pipe(a.map(function(t){return new T(t)}),a.catchError(function(t){return s.handleProcessError(t)}))},t.prototype.cancelProcess=function(t){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(t)).pipe(a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.getProcessInstanceVariables=function(t){var e=this;return d.from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(t)).pipe(a.map(function(t){return t.map(function(t){return new I(t)})}),a.catchError(function(t){return e.handleProcessError(t)}))},t.prototype.createOrUpdateProcessInstanceVariables=function(t,e){var n=this;return d.from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(t,e)).pipe(a.catchError(function(t){return n.handleProcessError(t)}))},t.prototype.deleteProcessInstanceVariable=function(t,e){var n=this;return d.from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(t,e)).pipe(a.catchError(function(t){return n.handleProcessError(t)}))},t.prototype.extractData=function(t){return t.data||{}},t.prototype.handleProcessError=function(t){return d.throwError(t||"Server error")},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:m.AlfrescoApiService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(m.AlfrescoApiService))},token:t,providedIn:"root"}),t}(),E=function(){function t(t,e){this.activitiProcess=t,this.logService=e,this.showTitle=!0,this.showRefreshButton=!0,this.processCancelled=new u.EventEmitter,this.error=new u.EventEmitter,this.taskClick=new u.EventEmitter,this.showProcessDiagram=new u.EventEmitter}return t.prototype.ngOnChanges=function(t){var e=t.processInstanceId;!e||e.currentValue?e&&e.currentValue&&this.load(e.currentValue):this.reset()},t.prototype.reset=function(){this.processInstanceDetails=null},t.prototype.load=function(t){var e=this;t&&this.activitiProcess.getProcess(t).subscribe(function(t){e.processInstanceDetails=t})},t.prototype.isRunning=function(){return this.processInstanceDetails&&!this.processInstanceDetails.ended},t.prototype.cancelProcess=function(){var e=this;this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(function(t){e.processCancelled.emit(t)},function(t){e.error.emit(t)})},t.prototype.onTaskClicked=function(t){this.taskClick.emit(t)},t.prototype.getProcessNameOrDescription=function(t){var e="";return this.processInstanceDetails&&(e=this.processInstanceDetails.name||this.processInstanceDetails.processDefinitionName+" - "+this.getFormatDate(this.processInstanceDetails.started,t)),e},t.prototype.getFormatDate=function(t,e){var n=new l.DatePipe("en-US");try{return n.transform(t,e)}catch(i){this.logService.error("ProcessListInstanceHeader: error parsing date "+t+" to format "+e)}},t.prototype.onShowProcessDiagram=function(t){this.showProcessDiagram.emit({value:this.processInstanceId})},t.decorators=[{type:u.Component,args:[{selector:"adf-process-instance-details",template:'<div *ngIf="!processInstanceDetails">{{ \'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE\'|translate }}</div>\n<mat-card *ngIf="processInstanceDetails">\n    <mat-card-header>\n        <mat-card-title>{{ getProcessNameOrDescription(\'medium\') }}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <adf-process-instance-header\n            #processInstanceHeader\n            [processInstance]="processInstanceDetails"\n            (showProcessDiagram)="onShowProcessDiagram($event)">\n        </adf-process-instance-header>\n\n        <button class="adf-in-medias-res-button" mat-button id="show-diagram-button" type="button" mat-button mat-raised-button [disabled]="!isRunning()" (click)="onShowProcessDiagram(processInstanceId)">{{ \'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM\' | translate }}</button>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-tasks\n                    #processInstanceTasks\n                    [processInstanceDetails]="processInstanceDetails"\n                    (taskClick)="onTaskClicked($event)">\n                </adf-process-instance-tasks>\n            </mat-card-content>\n        </mat-card>\n\n        <div data-automation-id="header-status" *ngIf="isRunning()" class="adf-in-medias-res-button">\n            <button mat-button type="button" (click)="cancelProcess()">{{ \'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL\' | translate }}</button>\n        </div>\n\n        <mat-card>\n            <mat-card-content>\n                <adf-process-instance-comments #activitiComments\n                    [readOnly]="false"\n                    [processInstanceId]="processInstanceDetails.id">\n                </adf-process-instance-comments>\n            </mat-card-content>\n        </mat-card>\n\n    </mat-card-content>\n</mat-card>\n',styles:[":host{width:100%}.activiti-process-container{width:100%;min-height:100px;overflow:visible;padding:10px}.adf-comments-dialog{position:fixed;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);width:40%}.adf-in-medias-res-button{margin:16px 0}"]}]}],t.ctorParameters=function(){return[{type:D},{type:m.LogService}]},t.propDecorators={processInstanceId:[{type:u.Input}],processInstanceHeader:[{type:u.ViewChild,args:["processInstanceHeader"]}],tasksList:[{type:u.ViewChild,args:["processInstanceTasks"]}],showTitle:[{type:u.Input}],showRefreshButton:[{type:u.Input}],processCancelled:[{type:u.Output}],error:[{type:u.Output}],taskClick:[{type:u.Output}],showProcessDiagram:[{type:u.Output}]},t}(),k=function(){function t(t,e){this.contentService=t,this.processListService=e,this.fileName="Audit",this.format="pdf",this.download=!0,this.clicked=new u.EventEmitter,this.error=new u.EventEmitter}return t.prototype.ngOnChanges=function(t){this.isValidType()||this.setDefaultFormatType()},t.prototype.isValidType=function(){return!(!this.format||!this.isJsonFormat()&&!this.isPdfFormat())},t.prototype.setDefaultFormatType=function(){this.format="pdf"},t.prototype.fetchAuditInfo=function(){var e=this;this.isPdfFormat()?this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(function(t){e.audit=t,e.download&&e.contentService.downloadBlob(e.audit,e.fileName+".pdf"),e.clicked.emit({format:e.format,value:e.audit,fileName:e.fileName})},function(t){e.error.emit(t)}):this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(function(t){e.audit=t,e.clicked.emit({format:e.format,value:e.audit,fileName:e.fileName})},function(t){e.error.emit(t)})},t.prototype.onClickAudit=function(){this.fetchAuditInfo()},t.prototype.isJsonFormat=function(){return"json"===this.format},t.prototype.isPdfFormat=function(){return"pdf"===this.format},t.decorators=[{type:u.Directive,args:[{selector:"button[adf-process-audit]",host:{role:"button","(click)":"onClickAudit()"}}]}],t.ctorParameters=function(){return[{type:m.ContentService},{type:D}]},t.propDecorators={processId:[{type:u.Input,args:["process-id"]}],fileName:[{type:u.Input}],format:[{type:u.Input}],download:[{type:u.Input}],clicked:[{type:u.Output}],error:[{type:u.Output}]},t}(),C=function(){function t(t,e){this.translationService=t,this.appConfig=e}return t.prototype.ngOnChanges=function(t){this.refreshData()},t.prototype.refreshData=function(){var e=this;if(this.processInstance){var t=this.initDefaultProperties(),n=this.appConfig.get("adf-process-instance-header.presets.properties");this.properties=t.filter(function(t){return e.isValidSelection(n,t)})}},t.prototype.initDefaultProperties=function(){return[new m.CardViewTextItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.STATUS",value:this.getProcessStatus(),key:"status"}),new m.CardViewDateItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.END_DATE",value:this.processInstance.ended,format:"MMM DD YYYY",key:"ended","default":this.translationService.instant("ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT")}),new m.CardViewTextItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.CATEGORY",value:this.processInstance.processDefinitionCategory,key:"category","default":this.translationService.instant("ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT")}),new m.CardViewTextItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY",value:this.processInstance.businessKey,key:"businessKey","default":this.translationService.instant("ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT")}),new m.CardViewTextItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.CREATED_BY",value:this.getStartedByFullName(),key:"assignee","default":this.translationService.instant("ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT")}),new m.CardViewDateItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.CREATED",value:this.processInstance.started,format:"MMM DD YYYY",key:"created"}),new m.CardViewTextItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.ID",value:this.processInstance.id,key:"id"}),new m.CardViewTextItemModel({label:"ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION",value:this.processInstance.processDefinitionDescription,key:"description","default":this.translationService.instant("ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT")})]},t.prototype.isValidSelection=function(t,e){return!t||0<=t.indexOf(e.key)},t.prototype.getProcessStatus=function(){if(this.processInstance)return this.isRunning()?"Running":"Completed"},t.prototype.getStartedByFullName=function(){var t="";return this.processInstance&&this.processInstance.startedBy&&(t+=this.processInstance.startedBy.firstName||"",t+=t?" ":"",t+=this.processInstance.startedBy.lastName||""),t},t.prototype.isRunning=function(){return this.processInstance&&!this.processInstance.ended},t.decorators=[{type:u.Component,args:[{selector:"adf-process-instance-header",template:'<mat-card *ngIf="processInstance" class="adf-card-container">\n    <mat-card-content>\n        <adf-card-view [properties]="properties"></adf-card-view>\n    </mat-card-content>\n</mat-card>\n',styles:[":host{width:100%}.adf-card-container{font-family:inherit}"]}]}],t.ctorParameters=function(){return[{type:m.TranslationService},{type:m.AppConfigService}]},t.propDecorators={processInstance:[{type:u.Input}]},t}(),F=function(t,e){return(F=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function b(t,e){function n(){this.constructor=t}F(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function L(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function _(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,o,s=n.call(t),r=[];try{for(;(void 0===e||0<e--)&&!(i=s.next()).done;)r.push(i.value)}catch(a){o={error:a}}finally{try{i&&!i.done&&(n=s["return"])&&n.call(s)}finally{if(o)throw o.error}}return r}function w(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(_(arguments[e]));return t}var P=function Xt(t){t&&(this.defaultAppId=t.defaultAppId?t.defaultAppId:null,this.deploymentId=t.deploymentId?t.deploymentId:null,this.name=t.name?t.name:null,this.description=t.description?t.description:null,this.theme=t.theme?t.theme:null,this.icon=t.icon?t.icon:null,this.id=t.id?t.id:null,this.modelId=t.modelId?t.modelId:null,this.tenantId=t.tenantId?t.tenantId:null)},O=function Qt(t){t&&(this.id=t.id||null,this.name=t.name||null,this.index=t.index)},M=function(){function t(t){t&&(this.id=t.id||null,this.appId=t.appId||null,this.name=t.name||null,this.recent=!!t.recent,this.icon=t.icon||null,this.filter=new e.UserTaskFilterRepresentation(t.filter),this.index=t.index)}return t.prototype.hasFilter=function(){return!!this.filter},t}(),R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return b(e,t),e}(e.TaskQueryRepresentation),N={"default":[{key:"name",type:"text",title:"ADF_TASK_LIST.PROPERTIES.NAME",sortable:!0},{key:"created",type:"text",title:"ADF_TASK_LIST.PROPERTIES.CREATED",cssClass:"hidden",sortable:!0},{key:"assignee",type:"text",title:"ADF_TASK_LIST.PROPERTIES.ASSIGNEE",cssClass:"hidden",sortable:!0}]},x=function Zt(t,e){this.name=e,this.id=t},U=function(){function t(t){this.processDefinitionVersion=0,t&&(this.id=t.id||null,this.name=t.name||null,this.priority=t.priority,this.assignee=t.assignee?new m.UserProcessModel(t.assignee):null,this.adhocTaskCanBeReassigned=t.adhocTaskCanBeReassigned,this.category=t.category||null,this.created=t.created||null,this.description=t.description||null,this.dueDate=t.dueDate||null,this.duration=t.duration||null,this.endDate=t.endDate||null,this.executionId=t.executionId||null,this.formKey=t.formKey||null,this.initiatorCanCompleteTask=!!t.initiatorCanCompleteTask,this.managerOfCandidateGroup=!!t.managerOfCandidateGroup,this.memberOfCandidateGroup=!!t.memberOfCandidateGroup,this.memberOfCandidateUsers=!!t.memberOfCandidateUsers,this.involvedGroups=t.involvedGroups,this.involvedPeople=t.involvedPeople,this.parentTaskId=t.parentTaskId||null,this.parentTaskName=t.parentTaskName||null,this.processDefinitionCategory=t.processDefinitionCategory||null,this.processDefinitionDeploymentId=t.processDefinitionDeploymentId||null,this.processDefinitionDescription=t.processDefinitionDescription||null,this.processDefinitionId=t.processDefinitionId||null,this.processDefinitionKey=t.processDefinitionKey||null,this.processDefinitionName=t.processDefinitionName||null,this.processDefinitionVersion=t.processDefinitionVersion||0,this.processInstanceId=t.processInstanceId||null,this.processInstanceName=t.processInstanceName||null,this.processInstanceStartUserId=t.processInstanceStartUserId||null,this.taskDefinitionKey=t.taskDefinitionKey||null)}return t.prototype.getFullName=function(){var t="";this.assignee&&(t=(this.assignee.firstName?this.assignee.firstName:"")+" "+(this.assignee.lastName?this.assignee.lastName:""));return t.trim()},t.prototype.isCompleted=function(){return!!this.endDate},t}(),V=function te(t){this.data=[],t&&(Object.assign(this,t),t.data&&(this.data=t.data.map(function(t){return new U(t)})))},B=function(){function t(t,e){this.apiService=t,this.logService=e}return t.prototype.getFilterForTaskById=function(e,t){var n=this;return d.from(t).pipe(a.flatMap(function(t){return n.isTaskRelatedToFilter(e,t)}),a.filter(function(t){return null!=t}))},t.prototype.generateTaskRequestNodeFromFilter=function(t){var e={appDefinitionId:t.appId,assignment:t.filter.assignment,state:t.filter.state,sort:t.filter.sort};return new R(e)},t.prototype.isTaskRelatedToFilter=function(e,n){var i=this,t=this.generateTaskRequestNodeFromFilter(n);return d.from(this.callApiTasksFiltered(t)).pipe(a.map(function(t){return t.data.find(function(t){return t.id===e})?n:null}),a.catchError(function(t){return i.handleError(t)}))},t.prototype.getTasks=function(t){var e=this;return d.from(this.callApiTasksFiltered(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.findTasksByState=function(t,e){return e&&(t.state=e),this.getTasks(t).pipe(a.catchError(function(){return d.of(new V)}))},t.prototype.findAllTaskByState=function(e,t){var n=this;return t&&(e.state=t),this.getTotalTasks(e).pipe(a.switchMap(function(t){return e.size=t.total,n.getTasks(e)}))},t.prototype.findAllTasksWithoutState=function(t){return d.forkJoin(this.findTasksByState(t,"open"),this.findAllTaskByState(t,"completed"),function(t,e){var n=Object.assign({},t);return n.total+=e.total,n.data=n.data.concat(e.data),n})},t.prototype.getTaskDetails=function(t){var e=this;return d.from(this.callApiTaskDetails(t)).pipe(a.map(function(t){return new U(t)}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.getTaskChecklist=function(t){var e=this;return d.from(this.callApiTaskChecklist(t)).pipe(a.map(function(t){var e=[];return t.data.forEach(function(t){e.push(new U(t))}),e}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.getFormList=function(){var e=this;return d.from(this.apiService.getInstance().activiti.modelsApi.getModels({filter:"myReusableForms",sort:"modifiedDesc",modelType:2})).pipe(a.map(function(t){var e=[];return t.data.forEach(function(t){e.push(new x(t.id,t.name))}),e}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.attachFormToATask=function(t,e){var n=this;return d.from(this.apiService.taskApi.attachForm(t,{formId:e})).pipe(a.catchError(function(t){return n.handleError(t)}))},t.prototype.addTask=function(t){var e=this;return d.from(this.callApiAddTask(t)).pipe(a.map(function(t){return new U(t)}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.deleteTask=function(t){var e=this;return d.from(this.callApiDeleteTask(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.deleteForm=function(t){var e=this;return d.from(this.callApiDeleteForm(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.completeTask=function(t){var e=this;return d.from(this.apiService.taskApi.completeTask(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.getTotalTasks=function(t){var e=this;return t.size=0,d.from(this.callApiTasksFiltered(t)).pipe(a.map(function(t){return t}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.createNewTask=function(t){var e=this;return d.from(this.callApiCreateTask(t)).pipe(a.map(function(t){return new U(t)}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.assignTask=function(t,e){var n=this,i={assignee:e.id};return d.from(this.callApiAssignTask(t,i)).pipe(a.map(function(t){return new U(t)}),a.catchError(function(t){return n.handleError(t)}))},t.prototype.assignTaskByUserId=function(t,e){var n=this,i={assignee:e};return d.from(this.callApiAssignTask(t,i)).pipe(a.map(function(t){return new U(t)}),a.catchError(function(t){return n.handleError(t)}))},t.prototype.claimTask=function(t){var e=this;return d.from(this.apiService.taskApi.claimTask(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.unclaimTask=function(t){var e=this;return d.from(this.apiService.taskApi.unclaimTask(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.updateTask=function(t,e){var n=this;return d.from(this.apiService.taskApi.updateTask(t,e)).pipe(a.map(function(t){return t}),a.catchError(function(t){return n.handleError(t)}))},t.prototype.fetchTaskAuditPdfById=function(t){var e=this;return d.from(this.apiService.taskApi.getTaskAuditPdf(t)).pipe(a.map(function(t){return t}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.fetchTaskAuditJsonById=function(t){var e=this;return d.from(this.apiService.taskApi.getTaskAuditJson(t)).pipe(a.catchError(function(t){return e.handleError(t)}))},t.prototype.callApiTasksFiltered=function(t){return this.apiService.taskApi.listTasks(t)},t.prototype.callApiTaskDetails=function(t){return this.apiService.taskApi.getTask(t)},t.prototype.callApiAddTask=function(t){return this.apiService.taskApi.addSubtask(t.parentTaskId,t)},t.prototype.callApiDeleteTask=function(t){return this.apiService.taskApi.deleteTask(t)},t.prototype.callApiDeleteForm=function(t){return this.apiService.taskApi.removeForm(t)},t.prototype.callApiTaskChecklist=function(t){return this.apiService.taskApi.getChecklist(t)},t.prototype.callApiCreateTask=function(t){return this.apiService.taskApi.createNewTask(t)},t.prototype.callApiAssignTask=function(t,e){return this.apiService.taskApi.assignTask(t,e)},t.prototype.handleError=function(t){return this.logService.error(t),d.throwError(t||"Server error")},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:m.AlfrescoApiService},{type:m.LogService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(m.AlfrescoApiService),u.inject(m.LogService))},token:t,providedIn:"root"}),t}(),K=function(o){function s(t,e,n){var i=o.call(this,e,s.PRESET_KEY,N)||this;return i.taskListService=t,i.userPreferences=n,i.selectionMode="single",i.multiselect=!1,i.selectFirstRow=!0,i.rowClick=new u.EventEmitter,i.rowsSelected=new u.EventEmitter,i.success=new u.EventEmitter,i.error=new u.EventEmitter,i.page=0,i.size=m.PaginationComponent.DEFAULT_PAGINATION.maxItems,i.rows=[],i.isLoading=!0,i.sorting=["created","desc"],i.hasCustomDataSource=!1,i.userPreferences.select(m.UserPreferenceValues.PaginationSize).subscribe(function(t){i.size=t}),i.pagination=new d.BehaviorSubject({maxItems:i.size,skipCount:0,totalItems:0}),i}return b(s,o),s.prototype.ngAfterContentInit=function(){this.createDatatableSchema(),this.data&&0===this.data.getColumns().length&&this.data.setColumns(this.columns),this.appId&&this.reload()},s.prototype.setCustomDataSource=function(t){t&&(this.rows=t,this.hasCustomDataSource=!0)},s.prototype.ngOnChanges=function(t){this.isPropertyChanged(t)&&(this.isSortChanged(t)&&(this.sorting=this.sort?this.sort.split("-"):this.sorting),this.reload())},s.prototype.isSortChanged=function(t){var e=t.sort;return e&&e.currentValue&&e.currentValue!==e.previousValue},s.prototype.isPropertyChanged=function(t){var e=!0,n=t.landingTaskId,i=t.page,o=t.size;return n&&n.currentValue&&this.isEqualToCurrentId(n.currentValue)?e=!1:i&&i.currentValue!==i.previousValue?e=!0:o&&o.currentValue!==o.previousValue&&(e=!0),e},s.prototype.reload=function(){this.hasCustomDataSource?this.isLoading=!1:(this.requestNode=this.createRequestNode(),this.load(this.requestNode))},s.prototype.load=function(t){var e=this;this.isLoading=!0,this.loadTasksByState().subscribe(function(t){e.rows=e.optimizeTaskDetails(t.data),e.selectTask(e.landingTaskId),e.success.emit(t),e.isLoading=!1,e.pagination.next({count:t.data.length,maxItems:e.size,skipCount:e.page*e.size,totalItems:t.total})},function(t){e.error.emit(t),e.isLoading=!1})},s.prototype.loadTasksByState=function(){return"all"===this.requestNode.state?this.taskListService.findAllTasksWithoutState(this.requestNode):this.taskListService.findTasksByState(this.requestNode)},s.prototype.selectTask=function(e){if(this.isListEmpty())this.currentInstanceId=null;else{var t=null;e&&(t=this.rows.find(function(t){return t.id===e})),!t&&this.selectFirstRow&&(t=this.rows[0]),t&&(t.isSelected=!0,this.currentInstanceId=t.id)}},s.prototype.getCurrentId=function(){return this.currentInstanceId},s.prototype.isEqualToCurrentId=function(t){return this.currentInstanceId===t},s.prototype.isListEmpty=function(){return!this.rows||0===this.rows.length},s.prototype.onRowClick=function(t){this.currentInstanceId=t.value.getValue("id"),this.rowClick.emit(this.currentInstanceId)},s.prototype.onRowSelect=function(t){this.selectedInstances=w(t.detail.selection),this.rowsSelected.emit(this.selectedInstances)},s.prototype.onRowUnselect=function(t){this.selectedInstances=w(t.detail.selection),this.rowsSelected.emit(this.selectedInstances)},s.prototype.onRowKeyUp=function(t){"Enter"===t.detail.keyboardEvent.key&&(t.preventDefault(),this.currentInstanceId=t.detail.row.getValue("id"),this.rowClick.emit(this.currentInstanceId))},s.prototype.optimizeTaskDetails=function(t){return t=t.map(function(t){return t.name||(t.name="No name"),t})},s.prototype.createRequestNode=function(){var t={appDefinitionId:this.appId,dueAfter:this.dueAfter?r(this.dueAfter).toDate():null,dueBefore:this.dueBefore?r(this.dueBefore).toDate():null,processInstanceId:this.processInstanceId,processDefinitionId:this.processDefinitionId,text:this.name,assignment:this.assignment,state:this.state,sort:this.sort,page:this.page,size:this.size,start:this.start,taskId:this.taskId,includeProcessInstance:this.includeProcessInstance};return new R(t)},s.prototype.updatePagination=function(t){var e=t.maxItems||t.skipCount;this.size=t.maxItems,this.page=this.currentPage(t.skipCount,t.maxItems),e&&this.reload()},s.prototype.currentPage=function(t,e){return t&&e?Math.floor(t/e):0},s.PRESET_KEY="adf-task-list.presets",s.decorators=[{type:u.Component,args:[{selector:"adf-tasklist",template:'<div *ngIf="!requestNode">{{ \'ADF_TASK_LIST.FILTERS.MESSAGES.NONE\' | translate }}</div>\n<ng-container *ngIf="requestNode">\n        <adf-datatable\n            [data]="data"\n            [rows]="rows"\n            [columns]="columns"\n            [sorting]="sorting"\n            [loading]="isLoading"\n            [multiselect]="multiselect"\n            [selectionMode]="selectionMode"\n            (row-select)="onRowSelect($event)"\n            (row-unselect)="onRowUnselect($event)"\n            (rowClick)="onRowClick($event)"\n            (row-keyup)="onRowKeyUp($event)">\n            <adf-loading-content-template>\n                <ng-template>\n                    \x3c!--Add your custom loading template here--\x3e\n                    <mat-progress-spinner\n                        *ngIf="!customLoadingContent"\n                        class="adf-task-list-loading-margin"\n                        [color]="\'primary\'"\n                        [mode]="\'indeterminate\'">\n                    </mat-progress-spinner>\n                    <ng-content select="adf-custom-loading-content-template"></ng-content>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf="!customEmptyContent"\n                        icon="assignment"\n                        [title]="\'ADF_TASK_LIST.LIST.MESSAGES.TITLE\' | translate"\n                        [subtitle]="\'ADF_TASK_LIST.LIST.MESSAGES.SUBTITLE\' | translate">\n                    </adf-empty-content>\n                    <ng-content select="adf-custom-empty-content-template"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n',styles:[".adf-task-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}"]}]}],s.ctorParameters=function(){return[{type:B},{type:m.AppConfigService},{type:m.UserPreferencesService}]},s.propDecorators={customEmptyContent:[{type:u.ContentChild,args:[m.CustomEmptyContentTemplateDirective]}],customLoadingContent:[{type:u.ContentChild,args:[m.CustomLoadingContentTemplateDirective]}],appId:[{type:u.Input}],processInstanceId:[{type:u.Input}],processDefinitionId:[{type:u.Input}],state:[{type:u.Input}],assignment:[{type:u.Input}],sort:[{type:u.Input}],name:[{type:u.Input}],landingTaskId:[{type:u.Input}],data:[{type:u.Input}],selectionMode:[{type:u.Input}],multiselect:[{type:u.Input}],selectFirstRow:[{type:u.Input}],taskId:[{type:u.Input}],includeProcessInstance:[{type:u.Input}],start:[{type:u.Input}],rowClick:[{type:u.Output}],rowsSelected:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}],page:[{type:u.Input}],size:[{type:u.Input}],dueAfter:[{type:u.Input}],dueBefore:[{type:u.Input}]},s}(m.DataTableSchema),j=function(){function t(t,e){this.activitiTaskList=t,this.dialog=e,this.readOnly=!1,this.checklistTaskCreated=new u.EventEmitter,this.checklistTaskDeleted=new u.EventEmitter,this.error=new u.EventEmitter,this.checklist=[]}return t.prototype.ngOnChanges=function(t){var e=t.taskId;e&&e.currentValue&&this.getTaskChecklist(e.currentValue)},t.prototype.getTaskChecklist=function(t){var e=this;this.checklist=[],this.taskId?this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(function(t){t.forEach(function(t){e.checklist.push(t)})},function(t){e.error.emit(t)}):this.checklist=[]},t.prototype.showDialog=function(){this.dialog.open(this.addNewDialog,{width:"350px"})},t.prototype.add=function(){var e=this,t=new U({name:this.taskName,parentTaskId:this.taskId,assignee:{id:this.assignee}});this.activitiTaskList.addTask(t).subscribe(function(t){e.checklist.push(t),e.checklistTaskCreated.emit(t),e.taskName=""},function(t){e.error.emit(t)}),this.cancel()},t.prototype["delete"]=function(e){var n=this;this.activitiTaskList.deleteTask(e).subscribe(function(){n.checklist=n.checklist.filter(function(t){return t.id!==e}),n.checklistTaskDeleted.emit(e)},function(t){n.error.emit(t)})},t.prototype.cancel=function(){this.dialog.closeAll(),this.taskName=""},t.decorators=[{type:u.Component,args:[{selector:"adf-checklist",template:'<div class="adf-checklist-control">\n    <mat-chip-list data-automation-id="checklist-label">\n        <span class="adf-activiti-label">{{ \'ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST\' | translate }}</span>\n        <mat-chip class="adf-process-badge" color="accent" selected="true">{{checklist?.length}}</mat-chip>\n    </mat-chip-list>\n\n\n    <button mat-icon-button *ngIf="!readOnly" matTooltip="Add a checklist" [matTooltipPosition]="\'before\'"\n            id="add-checklist" class="adf-add-to-checklist-button" (click)="showDialog()">\n        <mat-icon>add</mat-icon>\n    </button>\n</div>\n\n<div class="adf-checklist-menu-container" *ngIf="checklist?.length > 0">\n    <mat-chip-list class="mat-chip-list-stacked">\n        <mat-chip id="check-{{check.id}}" class="adf-checklist-chip" *ngFor="let check of checklist"\n                  (removed)="delete(check.id)">\n            <span>{{check.name}}</span>\n            <mat-icon *ngIf="!readOnly && !check.endDate" id="remove-{{check.id}}" matChipRemove>cancel\n            </mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n</div>\n<div *ngIf="checklist?.length === 0" id="checklist-none-message" class="adf-checklist-none-message">\n    {{ \'ADF_TASK_LIST.DETAILS.CHECKLIST.NONE\' | translate }}\n</div>\n\n<ng-template #dialog>\n    <div class="adf-checklist-dialog" id="checklist-dialog">\n        <h4 matDialogTitle id="add-checklist-title">{{ \'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.TITLE\' | translate }}</h4>\n        <mat-dialog-content>\n            <mat-form-field>\n                <input matInput placeholder="{{ \'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.PLACEHOLDER\' | translate }}" [(ngModel)]="taskName" id="checklist-name"\n                       data-automation-id="checklist-name">\n            </mat-form-field>\n        </mat-dialog-content>\n        <mat-dialog-actions class="adf-checklist-dialog-actions">\n            <button mat-button type="button" id="close-check-dialog" (click)="cancel()">{{ \'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.CANCEL-BUTTON\' | translate | uppercase }}</button>\n            <button mat-button type="button" id="add-check" (click)="add()">{{ \'ADF_TASK_LIST.DETAILS.CHECKLIST.DIALOG.ADD-BUTTON\' | translate | uppercase  }}</button>\n        </mat-dialog-actions>\n    </div>\n</ng-template>\n',styles:[":host{width:100%}.adf-activiti-label{font-weight:bolder}.mat-form-field{width:100%}.adf-checklist-cancel-button{margin-top:-13px;margin-right:-13px;float:right}.adf-checklist-chip{outline:0}.adf-checklist-menu-container,.adf-checklist-none-message{margin-top:10px}.adf-checklist-control{display:flex;justify-content:space-between}.adf-checklist-control .adfactiviti-label{margin-top:6px;margin-right:10px}.adf-checklist-control .adf-add-to-checklist-button{float:right}.adf-checklist-dialog-actions{display:flex;justify-content:flex-end}"]}]}],t.ctorParameters=function(){return[{type:B},{type:o.MatDialog}]},t.propDecorators={taskId:[{type:u.Input}],readOnly:[{type:u.Input}],assignee:[{type:u.Input}],checklistTaskCreated:[{type:u.Output}],checklistTaskDeleted:[{type:u.Output}],error:[{type:u.Output}],addNewDialog:[{type:u.ViewChild,args:["dialog"]}]},t}(),$=function(){function t(){this.message="ADF_CLOUD_TASK_HEADER.FORM_VALIDATION.INVALID_FIELD"}return t.prototype.isValid=function(t){var e=0===(t||"").trim().length;return 0===t.length||!e},t}(),G=function(){function t(t,e,n,i,o){this.activitiTaskService=t,this.bpmUserService=e,this.translationService=n,this.logService=i,this.appConfig=o,this.formName=null,this.claim=new u.EventEmitter,this.unclaim=new u.EventEmitter,this.inEdit=!1}return t.prototype.ngOnInit=function(){this.loadCurrentBpmUserId()},t.prototype.ngOnChanges=function(t){this.refreshData()},t.prototype.initDefaultProperties=function(t){return[new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.ASSIGNEE",value:this.taskDetails.getFullName(),key:"assignee","default":this.translationService.instant("ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT"),clickable:!this.isCompleted(),icon:"create"}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.STATUS",value:this.getTaskStatus(),key:"status"}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.PRIORITY",value:this.taskDetails.priority,key:"priority",editable:!0}),new m.CardViewDateItemModel({label:"ADF_TASK_LIST.PROPERTIES.DUE_DATE",value:this.taskDetails.dueDate,key:"dueDate","default":this.translationService.instant("ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT"),editable:!0}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.CATEGORY",value:this.taskDetails.category,key:"category","default":this.translationService.instant("ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT")}),new m.CardViewMapItemModel({label:"ADF_TASK_LIST.PROPERTIES.PARENT_NAME",value:t,key:"parentName","default":this.translationService.instant("ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT"),clickable:!0}),new m.CardViewDateItemModel({label:"ADF_TASK_LIST.PROPERTIES.CREATED",value:this.taskDetails.created,key:"created"}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.DURATION",value:this.getTaskDuration(),key:"duration"}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID",value:this.taskDetails.parentTaskId,key:"parentTaskId"}),new m.CardViewDateItemModel({label:"ADF_TASK_LIST.PROPERTIES.END_DATE",value:this.taskDetails.endDate,key:"endDate"}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.ID",value:this.taskDetails.id,key:"id"}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.DESCRIPTION",value:this.taskDetails.description,key:"description","default":this.translationService.instant("ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT"),multiline:!0,editable:!0,validators:[new $]}),new m.CardViewTextItemModel({label:"ADF_TASK_LIST.PROPERTIES.FORM_NAME",value:this.formName,key:"formName","default":this.translationService.instant("ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT"),clickable:!!this.formName,icon:"create"})]},t.prototype.refreshData=function(){var e=this;if(this.taskDetails){var t=this.getParentInfo(),n=this.initDefaultProperties(t),i=this.appConfig.get("adf-task-header.presets.properties");this.properties=n.filter(function(t){return e.isValidSelection(i,t)})}},t.prototype.isValidSelection=function(t,e){return!t||0<=t.indexOf(e.key)},t.prototype.loadCurrentBpmUserId=function(){var e=this;this.bpmUserService.getCurrentUserInfo().subscribe(function(t){e.currentUserId=t?+t.id:null})},t.prototype.getParentInfo=function(){if(this.taskDetails.processInstanceId&&this.taskDetails.processDefinitionName)return new Map([[this.taskDetails.processInstanceId,this.taskDetails.processDefinitionName]])},t.prototype.hasAssignee=function(){return!!this.taskDetails.assignee},t.prototype.isAssignedTo=function(t){return!!this.hasAssignee()&&this.taskDetails.assignee.id===t},t.prototype.isAssignedToCurrentUser=function(){return this.hasAssignee()&&this.isAssignedTo(this.currentUserId)},t.prototype.isCandidateMember=function(){return this.taskDetails.managerOfCandidateGroup||this.taskDetails.memberOfCandidateGroup||this.taskDetails.memberOfCandidateUsers},t.prototype.isTaskClaimable=function(){return!this.hasAssignee()&&this.isCandidateMember()},t.prototype.isTaskClaimedByCandidateMember=function(){return this.isCandidateMember()&&this.isAssignedToCurrentUser()&&!this.isCompleted()},t.prototype.getTaskStatus=function(){return this.taskDetails&&this.taskDetails.isCompleted()?"Completed":"Running"},t.prototype.claimTask=function(e){var n=this;this.activitiTaskService.claimTask(e).subscribe(function(t){n.logService.info("Task claimed"),n.claim.emit(e)})},t.prototype.unclaimTask=function(e){var n=this;this.activitiTaskService.unclaimTask(e).subscribe(function(t){n.logService.info("Task unclaimed"),n.unclaim.emit(e)})},t.prototype.isCompleted=function(){return this.taskDetails&&!!this.taskDetails.endDate},t.prototype.getTaskDuration=function(){return this.taskDetails.duration?this.taskDetails.duration+" ms":""},t.decorators=[{type:u.Component,args:[{selector:"adf-task-header",template:'<mat-card *ngIf="taskDetails" class="adf-card-container">\n    <mat-card-content>\n        <adf-card-view [properties]="properties" [editable]="!isCompleted()"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class="adf-controls">\n        <button *ngIf="isTaskClaimedByCandidateMember()" mat-button data-automation-id="header-unclaim-button" id="unclaim-task" (click)="unclaimTask(taskDetails.id)" class="adf-claim-controls">{{ \'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM\' | translate }}\n        </button>\n        <button *ngIf="isTaskClaimable()" mat-button data-automation-id="header-claim-button" id="claim-task" (click)="claimTask(taskDetails.id)" class="adf-claim-controls">{{ \'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM\' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n',styles:[""]}]}],t.ctorParameters=function(){return[{type:B},{type:m.BpmUserService},{type:m.TranslationService},{type:m.LogService},{type:m.AppConfigService}]},t.propDecorators={formName:[{type:u.Input}],taskDetails:[{type:u.Input}],claim:[{type:u.Output}],unclaim:[{type:u.Output}]},t}(),H=function(){function t(t,e,n,i,o,s){var r=this;this.taskListService=t,this.authService=e,this.peopleProcessService=n,this.logService=i,this.cardViewUpdateService=o,this.dialog=s,this.debugMode=!1,this.showNextTask=!0,this.showHeader=!0,this.showHeaderContent=!0,this.showInvolvePeople=!0,this.showComments=!0,this.showChecklist=!0,this.showFormTitle=!1,this.showFormCompleteButton=!0,this.showFormSaveButton=!0,this.readOnlyForm=!1,this.showFormRefreshButton=!0,this.fieldValidators=[],this.formSaved=new u.EventEmitter,this.formCompleted=new u.EventEmitter,this.formContentClicked=new u.EventEmitter,this.formLoaded=new u.EventEmitter,this.taskCreated=new u.EventEmitter,this.taskDeleted=new u.EventEmitter,this.error=new u.EventEmitter,this.executeOutcome=new u.EventEmitter,this.assignTask=new u.EventEmitter,this.claimedTask=new u.EventEmitter,this.unClaimedTask=new u.EventEmitter,this.taskFormName=null,this.taskPeople=[],this.showAssignee=!1,this.showAttachForm=!1,this.internalReadOnlyForm=!1,this.peopleSearch=new d.Observable(function(t){return r.peopleSearchObserver=t}).pipe(a.share()),this.authService.getBpmLoggedUser().subscribe(function(t){r.currentLoggedUser=t})}return t.prototype.ngOnInit=function(){this.taskId&&this.loadDetails(this.taskId),this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this)),this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this))},t.prototype.ngOnChanges=function(t){var e=t.taskId;this.showAssignee=!1,e&&!e.currentValue?this.reset():e&&e.currentValue&&this.loadDetails(e.currentValue)},t.prototype.isStandaloneTask=function(){return!(this.taskDetails&&this.taskDetails.processDefinitionId)},t.prototype.isStandaloneTaskWithForm=function(){return this.isStandaloneTask()&&this.hasFormKey()},t.prototype.isStandaloneTaskWithoutForm=function(){return this.isStandaloneTask()&&!this.hasFormKey()},t.prototype.isFormComponentVisible=function(){return this.hasFormKey()&&!this.isShowAttachForm()},t.prototype.isTaskStandaloneComponentVisible=function(){return this.isStandaloneTaskWithoutForm()&&!this.isShowAttachForm()},t.prototype.isShowAttachForm=function(){return this.showAttachForm},t.prototype.reset=function(){this.taskDetails=null},t.prototype.hasFormKey=function(){return this.taskDetails&&!!this.taskDetails.formKey},t.prototype.isTaskActive=function(){return this.taskDetails&&null===this.taskDetails.duration},t.prototype.updateTaskDetails=function(t){var e=this;this.taskListService.updateTask(this.taskId,t.changed).subscribe(function(){e.loadDetails(e.taskId)})},t.prototype.clickTaskDetails=function(t){"assignee"===t.target.key&&(this.showAssignee=!0),"formName"===t.target.key&&(this.showAttachForm=!0)},t.prototype.loadDetails=function(t){var n=this;this.taskPeople=[],this.taskFormName=null,t&&this.taskListService.getTaskDetails(t).subscribe(function(t){n.showAttachForm=!1,n.taskDetails=t,"null"===n.taskDetails.name&&(n.taskDetails.name="No name");var e=t.endDate;e&&!isNaN(e.getTime())?n.internalReadOnlyForm=!0:n.internalReadOnlyForm=n.readOnlyForm,n.taskDetails&&n.taskDetails.involvedPeople&&n.taskDetails.involvedPeople.forEach(function(t){n.taskPeople.push(new m.UserProcessModel(t))})})},t.prototype.isAssigned=function(){return!!this.taskDetails.assignee},t.prototype.hasEmailAddress=function(){return!!this.taskDetails.assignee.email},t.prototype.isAssignedToMe=function(){return this.isAssigned()&&this.hasEmailAddress()?this.isEmailEqual(this.taskDetails.assignee.email,this.currentLoggedUser.email):this.isExternalIdEqual(this.taskDetails.assignee.externalId,this.currentLoggedUser.externalId)},t.prototype.isEmailEqual=function(t,e){return t.toLocaleLowerCase()===e.toLocaleLowerCase()},t.prototype.isExternalIdEqual=function(t,e){return t.toLocaleLowerCase()===e.toLocaleLowerCase()},t.prototype.isCompleteButtonEnabled=function(){return this.isAssignedToMe()||this.canInitiatorComplete()},t.prototype.isCompleteButtonVisible=function(){return!this.hasFormKey()&&this.isTaskActive()&&this.isCompleteButtonEnabled()},t.prototype.canInitiatorComplete=function(){return this.taskDetails.initiatorCanCompleteTask},t.prototype.isSaveButtonVisible=function(){return this.hasSaveButton()&&(!this.canInitiatorComplete()||this.isAssignedToMe())},t.prototype.hasSaveButton=function(){return this.showFormSaveButton},t.prototype.loadNextTask=function(t,e){var n=this,i=new R({processInstanceId:t,processDefinitionId:e});this.taskListService.getTasks(i).subscribe(function(t){t&&0<t.length?n.taskDetails=new U(t[0]):n.reset()},function(t){n.error.emit(t)})},t.prototype.onComplete=function(){var e=this;this.taskListService.completeTask(this.taskId).subscribe(function(t){return e.onFormCompleted(null)})},t.prototype.onShowAttachForm=function(){this.showAttachForm=!0},t.prototype.onCancelAttachForm=function(){this.showAttachForm=!1},t.prototype.onCompleteAttachForm=function(){this.showAttachForm=!1,this.loadDetails(this.taskId)},t.prototype.onFormContentClick=function(t){this.formContentClicked.emit(t)},t.prototype.onFormSaved=function(t){this.formSaved.emit(t)},t.prototype.onFormCompleted=function(t){this.formCompleted.emit(t),this.showNextTask&&(this.taskDetails.processInstanceId||this.taskDetails.processDefinitionId)&&this.loadNextTask(this.taskDetails.processInstanceId,this.taskDetails.processDefinitionId)},t.prototype.onFormLoaded=function(t){this.taskFormName=t&&t.name?t.name:null,this.formLoaded.emit(t)},t.prototype.onChecklistTaskCreated=function(t){this.taskCreated.emit(t)},t.prototype.onChecklistTaskDeleted=function(t){this.taskDeleted.emit(t)},t.prototype.onFormError=function(t){this.errorDialogRef=this.dialog.open(this.errorDialog,{width:"500px"}),this.error.emit(t)},t.prototype.onFormExecuteOutcome=function(t){this.executeOutcome.emit(t)},t.prototype.closeErrorDialog=function(){this.dialog.closeAll()},t.prototype.onClaimAction=function(t){this.claimedTask.emit(t),this.loadDetails(t)},t.prototype.onUnclaimAction=function(t){this.unClaimedTask.emit(t),this.loadDetails(t)},t.prototype.isCompletedTask=function(){return!(!this.taskDetails||!this.taskDetails.endDate)||undefined},t.prototype.searchUser=function(t){var e=this;this.peopleProcessService.getWorkflowUsers(null,t).subscribe(function(t){t=t.filter(function(t){return t.id!==e.taskDetails.assignee.id}),e.peopleSearchObserver.next(t)},function(t){return e.logService.error("Could not load users")})},t.prototype.onCloseSearch=function(){this.showAssignee=!1},t.prototype.assignTaskToUser=function(e){var n=this;this.taskListService.assignTask(this.taskDetails.id,e).subscribe(function(t){n.logService.info("Task Assigned to "+e.email),n.assignTask.emit()}),this.showAssignee=!1},t.prototype.getTaskHeaderViewClass=function(){return this.showAssignee?"assign-edit-view":"default-view"},t.prototype.isReadOnlyComment=function(){return this.taskDetails&&this.taskDetails.isCompleted()&&this.taskPeople&&0===this.taskPeople.length},t.decorators=[{type:u.Component,args:[{selector:"adf-task-details",template:'<div *ngIf="!taskDetails" data-automation-id="adf-tasks-details--empty">\n    <ng-template *ngIf="noTaskDetailsTemplateComponent" ngFor [ngForOf]="[data]"\n                 [ngForTemplate]="noTaskDetailsTemplateComponent">\n        {{ \'ADF_TASK_LIST.DETAILS.MESSAGES.NONE\' | translate }}\n    </ng-template>\n    <div *ngIf="!noTaskDetailsTemplateComponent">\n        {{ \'ADF_TASK_LIST.DETAILS.MESSAGES.NONE\' | translate }}\n    </div>\n</div>\n<div *ngIf="taskDetails" class="adf-task-details">\n\n    <div *ngIf="showHeader" class="adf-task-details-header">\n        <h2 class="adf-activiti-task-details__header">\n            <span>{{taskDetails.name || \'No name\'}}</span>\n        </h2>\n    </div>\n\n    <div class="adf-task-details-core"\n        fxLayout="column"\n        fxLayoutGap="8px"\n        fxLayout.lt-lg="column">\n\n        <div class="adf-task-details-core-form">\n            <div *ngIf="isAssigned()">\n                <adf-form *ngIf="isFormComponentVisible()" #activitiForm\n                          [taskId]="taskDetails.id"\n                          [showTitle]="showFormTitle"\n                          [showRefreshButton]="showFormRefreshButton"\n                          [showCompleteButton]="showFormCompleteButton"\n                          [disableCompleteButton]="!isCompleteButtonEnabled()"\n                          [showSaveButton]="isSaveButtonVisible()"\n                          [readOnly]="internalReadOnlyForm"\n                          [fieldValidators]="fieldValidators"\n                          (formSaved)=\'onFormSaved($event)\'\n                          (formCompleted)=\'onFormCompleted($event)\'\n                          (formContentClicked)=\'onFormContentClick($event)\'\n                          (formLoaded)=\'onFormLoaded($event)\'\n                          (error)=\'onFormError($event)\'\n                          (executeOutcome)=\'onFormExecuteOutcome($event)\'>\n                </adf-form>\n                <adf-task-standalone *ngIf="isTaskStandaloneComponentVisible()"\n                                     [taskName]="taskDetails.name"\n                                     [taskId]="taskDetails.id"\n                                     [isCompleted]="isCompletedTask()"\n                                     [hasCompletePermission]="isCompleteButtonEnabled()"\n                                     [hideCancelButton]="true"\n                                     (complete)="onComplete()"\n                                     (showAttachForm)="onShowAttachForm()">\n                </adf-task-standalone>\n\n                <mat-card class="adf-message-card" *ngIf="!isTaskStandaloneComponentVisible() && !isCompletedTask() && !isFormComponentVisible()" >\n                    <mat-card-content>\n                        <div class="adf-no-form-message-container">\n                            <div class="adf-no-form-message-list">\n                                <div *ngIf="!isCompletedTask()" class="adf-no-form-message">\n                                    <span id="adf-no-form-message">{{\'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE\' | translate}}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-content>\n\n                    <mat-card-actions class="adf-no-form-mat-card-actions">\n                        <div>\n                            <button mat-button id="adf-no-form-complete-button" color="primary" (click)="onComplete()">{{ \'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE\' | translate }}</button>\n                        </div>\n                    </mat-card-actions>\n\n                </mat-card>\n\n                <adf-attach-form *ngIf="isShowAttachForm()"\n                                 [taskId]="taskDetails.id"\n                                 [formKey]="taskDetails.formKey"\n                                 (cancelAttachForm)="onCancelAttachForm()"\n                                 (success)="onCompleteAttachForm()">\n                </adf-attach-form>\n            </div>\n            <div *ngIf="!isAssigned()" id="claim-message-id">\n                {{ \'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM\' | translate }}\n            </div>\n        </div>\n        <div class="adf-task-details-core-sidebar">\n            <adf-info-drawer *ngIf="showHeaderContent" title="{{ \'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE\' | translate }}" id="adf-task-details-core-sidebar-drawer" class="adf-task-details-core-sidebar-drawer">\n                <adf-info-drawer-tab label="{{ \'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE\' | translate }}">\n                    <div class="adf-assignment-container" *ngIf="showAssignee">\n                        <adf-people-search\n                            (searchPeople)="searchUser($event)"\n                            (success)="assignTaskToUser($event)"\n                            (closeSearch)="onCloseSearch()"\n                            [results]="peopleSearch">\n                            <ng-container adf-people-search-title>{{ \'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE\' | translate }}\n                            </ng-container>\n                            <ng-container adf-people-search-action-label>{{ \'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE\' | translate }}\n                            </ng-container>\n                        </adf-people-search>\n                    </div>\n                    <adf-task-header\n                        [class]="getTaskHeaderViewClass()"\n                        [taskDetails]="taskDetails"\n                        [formName]="taskFormName"\n                        (claim)="onClaimAction($event)"\n                        (unclaim)="onUnclaimAction($event)">\n                    </adf-task-header>\n                    <adf-people *ngIf="showInvolvePeople" #people\n                                [people]="taskPeople"\n                                [readOnly]="internalReadOnlyForm"\n                                [taskId]="taskDetails.id">\n                    </adf-people>\n                </adf-info-drawer-tab>\n\n                <adf-info-drawer-tab label="{{ \'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE\' | translate }}">\n                    <mat-card *ngIf="showComments">\n                        <mat-card-content>\n                            <adf-comments #activitiComments\n                                          [readOnly]="isReadOnlyComment()"\n                                          [taskId]="taskDetails.id">\n                            </adf-comments>\n                        </mat-card-content>\n                    </mat-card>\n                </adf-info-drawer-tab>\n\n            </adf-info-drawer>\n\n            <div *ngIf="showHeaderContent" class="adf-task-details-core-sidebar-checklist">\n                <div *ngIf="showChecklist">\n                    <adf-checklist #activitiChecklist\n                                   [readOnly]="internalReadOnlyForm"\n                                   [taskId]="taskDetails.id"\n                                   [assignee]="taskDetails?.assignee?.id"\n                                   (checklistTaskCreated)="onChecklistTaskCreated($event)"\n                                   (checklistTaskDeleted)="onChecklistTaskDeleted($event)">\n                    </adf-checklist>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #errorDialog>\n        <h3 matDialogTitle>{{\'ADF_TASK_LIST.DETAILS.ERROR.TITLE\'|translate}}</h3>\n        <mat-dialog-content>\n            <p>{{\'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION\'|translate}}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <button mat-button type="button" (click)="closeErrorDialog()">{{\'ADF_TASK_LIST.DETAILS.ERROR.CLOSE\'|translate}}\n            </button>\n        </mat-dialog-actions>\n    </ng-template>\n\n</div>\n',styles:[":host{width:100%}.adf-error-dialog h3{margin:16px 0}.adf-activiti-task-details__header{align-self:flex-end;display:flex;font-size:24px;font-weight:300;line-height:normal;overflow:hidden;margin:8px 0 16px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-activiti-task-details__action-button{text-transform:uppercase}.adf-assignment-container{padding:10px 20px;width:auto}adf-task-header.adf-assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=header-assignee]{display:none}.adf-task-details-header{display:flex;justify-content:space-between}.adf-task-details-header-toggle{position:relative;top:10px;margin-right:2px;height:23px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-task-details-toggle{position:relative}.adf-task-details-core{display:flex;justify-content:space-between}@media screen and (max-width:1279px){.adf-task-details-core-sidebar-drawer{margin-left:0}}.adf-task-details-core-sidebar-checklist{margin-top:30px;padding-left:20px;padding-right:20px}.adf-task-details-core-form{flex-grow:1}.adf-task-details-core-form ::ng-deep .adf-form-debug-container{display:flex;flex-direction:column;padding:20px 0}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle{margin-left:auto}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle+div{background-color:#000;padding:20px;clear:both;margin-top:30px;color:#fff}.adf-task-details-core-form ::ng-deep .mat-tab-label{flex-grow:1}"]}]}],t.ctorParameters=function(){return[{type:B},{type:m.AuthenticationService},{type:m.PeopleProcessService},{type:m.LogService},{type:m.CardViewUpdateService},{type:o.MatDialog}]},t.propDecorators={activitiComments:[{type:u.ViewChild,args:["activitiComments"]}],activitiChecklist:[{type:u.ViewChild,args:["activitiChecklist"]}],errorDialog:[{type:u.ViewChild,args:["errorDialog"]}],debugMode:[{type:u.Input}],taskId:[{type:u.Input}],showNextTask:[{type:u.Input}],showHeader:[{type:u.Input}],showHeaderContent:[{type:u.Input}],showInvolvePeople:[{type:u.Input}],showComments:[{type:u.Input}],showChecklist:[{type:u.Input}],showFormTitle:[{type:u.Input}],showFormCompleteButton:[{type:u.Input}],showFormSaveButton:[{type:u.Input}],readOnlyForm:[{type:u.Input}],showFormRefreshButton:[{type:u.Input}],fieldValidators:[{type:u.Input}],formSaved:[{type:u.Output}],formCompleted:[{type:u.Output}],formContentClicked:[{type:u.Output}],formLoaded:[{type:u.Output}],taskCreated:[{type:u.Output}],taskDeleted:[{type:u.Output}],error:[{type:u.Output}],executeOutcome:[{type:u.Output}],assignTask:[{type:u.Output}],claimedTask:[{type:u.Output}],unClaimedTask:[{type:u.Output}]},t}(),q=function(){function t(t){this.activitiTaskDetails=t}return t.prototype.ngAfterContentInit=function(){this.activitiTaskDetails.noTaskDetailsTemplateComponent=this.template},t.decorators=[{type:u.Directive,args:[{selector:"adf-no-task-details-template, no-task-details-template"}]}],t.ctorParameters=function(){return[{type:H}]},t.propDecorators={template:[{type:u.ContentChild,args:[u.TemplateRef]}]},t}(),z=function(){function t(t,e){this.apiService=t,this.logService=e}return t.prototype.createDefaultFilters=function(t){var e=this,i=this.getInvolvedTasksFilterInstance(t),o=this.addFilter(i),s=this.getMyTasksFilterInstance(t),r=this.addFilter(s),a=this.getQueuedTasksFilterInstance(t),c=this.addFilter(a),l=this.getCompletedTasksFilterInstance(t),p=this.addFilter(l);return new d.Observable(function(n){d.forkJoin(o,r,c,p).subscribe(function(t){var e=[];t.forEach(function(t){t.name===i.name?(i.id=t.id,e.push(i)):t.name===s.name?(s.id=t.id,e.push(s)):t.name===a.name?(a.id=t.id,e.push(a)):t.name===l.name&&(l.id=t.id,e.push(l))}),n.next(e),n.complete()},function(t){e.logService.error(t)})})},t.prototype.getTaskListFilters=function(t){var e=this;return d.from(this.callApiTaskFilters(t)).pipe(a.map(function(t){var n=[];return t.data.forEach(function(t){var e=new M(t);n.push(e)}),n}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.getTaskFilterById=function(e,t){var n=this;return d.from(this.callApiTaskFilters(t)).pipe(a.map(function(t){return t.data.find(function(t){return t.id===e})}),a.catchError(function(t){return n.handleError(t)}))},t.prototype.getTaskFilterByName=function(e,t){var n=this;return d.from(this.callApiTaskFilters(t)).pipe(a.map(function(t){return t.data.find(function(t){return t.name===e})}),a.catchError(function(t){return n.handleError(t)}))},t.prototype.addFilter=function(t){var e=this;return d.from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(t)).pipe(a.map(function(t){return t}),a.catchError(function(t){return e.handleError(t)}))},t.prototype.callApiTaskFilters=function(t){return t?this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({appId:t}):this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters()},t.prototype.getInvolvedTasksFilterInstance=function(t){return new M({name:"Involved Tasks",appId:t,recent:!1,icon:"glyphicon-align-left",filter:{sort:"created-desc",name:"",state:"open",assignment:"involved"}})},t.prototype.getMyTasksFilterInstance=function(t){return new M({name:"My Tasks",appId:t,recent:!1,icon:"glyphicon-inbox",filter:{sort:"created-desc",name:"",state:"open",assignment:"assignee"}})},t.prototype.getQueuedTasksFilterInstance=function(t){return new M({name:"Queued Tasks",appId:t,recent:!1,icon:"glyphicon-record",filter:{sort:"created-desc",name:"",state:"open",assignment:"candidate"}})},t.prototype.getCompletedTasksFilterInstance=function(t){return new M({name:"Completed Tasks",appId:t,recent:!0,icon:"glyphicon-ok-sign",filter:{sort:"created-desc",name:"",state:"completed",assignment:"involved"}})},t.prototype.handleError=function(t){return this.logService.error(t),d.throwError(t||"Server error")},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:m.AlfrescoApiService},{type:m.LogService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(m.AlfrescoApiService),u.inject(m.LogService))},token:t,providedIn:"root"}),t}(),Y=function(){function t(t,e,n){this.taskFilterService=t,this.taskListService=e,this.appsProcessService=n,this.filterClick=new u.EventEmitter,this.success=new u.EventEmitter,this.error=new u.EventEmitter,this.filters=[]}return t.prototype.ngOnInit=function(){this.iconsMDL=new y},t.prototype.ngOnChanges=function(t){var e=t.appName,n=t.appId,i=t.filterParam;e&&e.currentValue?this.getFiltersByAppName(e.currentValue):n&&n.currentValue!==n.previousValue?this.getFiltersByAppId(n.currentValue):i&&i.currentValue!==i.previousValue&&this.selectFilter(i.currentValue)},t.prototype.getFilters=function(t,e){e?this.getFiltersByAppName(e):this.getFiltersByAppId(t)},t.prototype.getFiltersByAppId=function(e){var n=this;this.taskFilterService.getTaskListFilters(e).subscribe(function(t){0===t.length&&n.isFilterListEmpty()?n.createFiltersByAppId(e):(n.resetFilter(),n.filters=t,n.selectFilter(n.filterParam),n.success.emit(t))},function(t){n.error.emit(t)})},t.prototype.getFiltersByAppName=function(t){var e=this;this.appsProcessService.getDeployedApplicationsByName(t).subscribe(function(t){e.getFiltersByAppId(t.id)},function(t){e.error.emit(t)})},t.prototype.createFiltersByAppId=function(t){var e=this;this.taskFilterService.createDefaultFilters(t).subscribe(function(t){e.resetFilter(),e.filters=t,e.selectFilter(e.filterParam),e.success.emit(t)},function(t){e.error.emit(t)})},t.prototype.selectFilter=function(n){n&&(this.currentFilter=this.filters.find(function(t,e){return n.index===e||n.id===t.id||n.name&&n.name.toLocaleLowerCase()===t.name.toLocaleLowerCase()})),this.currentFilter||this.selectDefaultTaskFilter()},t.prototype.selectFilterAndEmit=function(t){this.selectFilter(t),this.filterClick.emit(this.currentFilter)},t.prototype.selectFilterWithTask=function(t){var e=this,n=[];this.taskListService.getFilterForTaskById(t,this.filters).subscribe(function(t){n.push(t)},function(t){e.error.emit(t)},function(){0<n.length&&(e.selectFilter(n[0]),e.filterClick.emit(e.currentFilter))})},t.prototype.selectDefaultTaskFilter=function(){this.isFilterListEmpty()||(this.currentFilter=this.filters[0])},t.prototype.getCurrentFilter=function(){return this.currentFilter},t.prototype.isFilterListEmpty=function(){return this.filters===undefined||this.filters&&0===this.filters.length},t.prototype.resetFilter=function(){this.filters=[],this.currentFilter=undefined},t.prototype.getFilterIcon=function(t){return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(t)},t.decorators=[{type:u.Component,args:[{selector:"adf-task-filters",template:'<div class="menu-container">\n    <mat-list class="adf-menu-list">\n        <mat-list-item (click)="selectFilterAndEmit(filter)" *ngFor="let filter of filters"\n                      class="adf-filters__entry" [class.adf-active]="currentFilter === filter">\n            <mat-icon *ngIf="showIcon" matListIcon class="adf-filters__entry-icon">{{getFilterIcon(filter.icon)}}</mat-icon>\n            <span matLine [attr.data-automation-id]="filter.name + \'_filter\'">{{filter.name}}</span>\n        </mat-list-item>\n    </mat-list>\n</div>\n',styles:[""]}]}],t.ctorParameters=function(){return[{type:z},{type:B},{type:m.AppsProcessService}]},t.propDecorators={filterParam:[{type:u.Input}],filterClick:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}],appId:[{type:u.Input}],appName:[{type:u.Input}],showIcon:[{type:u.Input}]},t}(),W=function(){function t(t,e){this.contentService=t,this.taskListService=e,this.fileName="Audit",this.format="pdf",this.download=!0,this.clicked=new u.EventEmitter,this.error=new u.EventEmitter}return t.prototype.ngOnChanges=function(t){this.isValidType()||this.setDefaultFormatType()},t.prototype.isValidType=function(){return!(!this.format||!this.isJsonFormat()&&!this.isPdfFormat())},t.prototype.setDefaultFormatType=function(){this.format="pdf"},t.prototype.fetchAuditInfo=function(){var e=this;this.isPdfFormat()?this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(function(t){e.audit=t,e.download&&e.contentService.downloadBlob(e.audit,e.fileName+".pdf"),e.clicked.emit({format:e.format,value:e.audit,fileName:e.fileName})},function(t){e.error.emit(t)}):this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(function(t){e.audit=t,e.clicked.emit({format:e.format,value:e.audit,fileName:e.fileName})},function(t){e.error.emit(t)})},t.prototype.onClickAudit=function(){this.fetchAuditInfo()},t.prototype.isJsonFormat=function(){return"json"===this.format},t.prototype.isPdfFormat=function(){return"pdf"===this.format},t.decorators=[{type:u.Directive,args:[{selector:"button[adf-task-audit]",host:{role:"button","(click)":"onClickAudit()"}}]}],t.ctorParameters=function(){return[{type:m.ContentService},{type:B}]},t.propDecorators={taskId:[{type:u.Input,args:["task-id"]}],fileName:[{type:u.Input}],format:[{type:u.Input}],download:[{type:u.Input}],clicked:[{type:u.Output}],error:[{type:u.Output}]},t}(),J=m.MOMENT_DATE_FORMATS,X=function(){function t(t,e,n,i,o){this.taskService=t,this.dateAdapter=e,this.userPreferencesService=n,this.formBuilder=i,this.logService=o,this.FORMAT_DATE="DD/MM/YYYY",this.MAX_LENGTH=255,this.name="",this.success=new u.EventEmitter,this.cancel=new u.EventEmitter,this.error=new u.EventEmitter,this.taskDetailsModel=new U,this.dateError=!1,this.maxTaskNameLength=this.MAX_LENGTH,this.loading=!1}return t.prototype.ngOnInit=function(){var e=this;this.name&&(this.taskDetailsModel.name=this.name),this.validateMaxTaskNameLength(),this.field=new m.FormFieldModel(new m.FormModel,{id:this.assigneeId,value:this.assigneeId,placeholder:"Assignee"}),this.userPreferencesService.select(m.UserPreferenceValues.Locale).subscribe(function(t){e.dateAdapter.setLocale(t)}),this.loadFormsTask(),this.buildForm()},t.prototype.buildForm=function(){var e=this;this.taskForm=this.formBuilder.group({name:new p.FormControl(this.taskDetailsModel.name,[p.Validators.required,p.Validators.maxLength(this.maxTaskNameLength),this.whitespaceValidator]),description:new p.FormControl("",[this.whitespaceValidator]),formKey:new p.FormControl("")}),this.taskForm.valueChanges.subscribe(function(t){return e.setTaskDetails(t)})},t.prototype.whitespaceValidator=function(t){if(t.value){var e=0===(t.value||"").trim().length;return 0===t.value.length||!e?null:{whitespace:!0}}},t.prototype.setTaskDetails=function(t){this.taskDetailsModel.name=t.name,this.taskDetailsModel.description=t.description,this.taskDetailsModel.formKey=t.formKey?t.formKey.toString():null},t.prototype.isFormValid=function(){return this.taskForm.valid&&!this.dateError&&!this.loading},t.prototype.saveTask=function(){var n=this;this.loading=!0,this.appId&&(this.taskDetailsModel.category=this.appId.toString()),this.taskService.createNewTask(this.taskDetailsModel).pipe(a.switchMap(function(e){return n.attachForm(e.id,n.taskDetailsModel.formKey).pipe(a.defaultIfEmpty(e),a.switchMap(function(t){return n.assignTaskByUserId(e.id,n.assigneeId).pipe(a.defaultIfEmpty(t||e))}))})).subscribe(function(t){n.loading=!1,n.success.emit(t)},function(t){n.loading=!1,n.error.emit(t),n.logService.error("An error occurred while creating new task")})},t.prototype.getAssigneeId=function(t){this.assigneeId=t},t.prototype.attachForm=function(t,e){var n=d.of();return t&&e&&(n=this.taskService.attachFormToATask(t,parseInt(e,10))),n},t.prototype.assignTaskByUserId=function(t,e){var n=d.of();return t&&e&&(n=this.taskService.assignTaskByUserId(t,e)),n},t.prototype.onCancel=function(){this.cancel.emit()},t.prototype.loadFormsTask=function(){this.forms$=this.taskService.getFormList()},t.prototype.isUserNameEmpty=function(t){return!t||this.isEmpty(t.firstName)&&this.isEmpty(t.lastName)},t.prototype.isEmpty=function(t){return t===undefined||null===t||0===t.trim().length},t.prototype.getDisplayUser=function(t,e,n){return void 0===n&&(n="-"),(t=null!==t?t:"")+n+(e=null!==e?e:"")},t.prototype.onDateChanged=function(t){if(this.dateError=!1,t){var e=void 0;(e="string"==typeof t?r(t,this.FORMAT_DATE,!0):t).isValid()?this.taskDetailsModel.dueDate=e.toDate():(this.dateError=!0,this.taskDetailsModel.dueDate=null)}else this.taskDetailsModel.dueDate=null},t.prototype.validateMaxTaskNameLength=function(){this.maxTaskNameLength>this.MAX_LENGTH&&(this.maxTaskNameLength=this.MAX_LENGTH,this.logService.log("the task name length cannot be greater than "+this.MAX_LENGTH))},Object.defineProperty(t.prototype,"nameController",{get:function(){return this.taskForm.get("name")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"descriptionController",{get:function(){return this.taskForm.get("description")},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"formKeyController",{get:function(){return this.taskForm.get("formKey")},enumerable:!0,configurable:!0}),t.decorators=[{type:u.Component,args:[{selector:"adf-start-task",template:'<mat-card fxFlex="70%" class="adf-new-task-layout-card">\n    <mat-card-header fxLayout="row" fxLayoutAlign="start center" fxLayoutGap="10px" class="adf-new-task-heading">\n        <mat-card-title>{{\'ADF_TASK_LIST.START_TASK.FORM.TITLE\' | translate}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <form [formGroup]="taskForm" fxLayout="column" fxLayoutGap="10px">\n            <div class="adf-task-name">\n                <mat-form-field fxFlex>\n                    <mat-label>{{\'ADF_TASK_LIST.START_TASK.FORM.LABEL.NAME\' | translate}}</mat-label>\n                    <input\n                        matInput\n                        id="name_id"\n                        formControlName="name">\n                        <mat-error *ngIf="nameController.hasError(\'required\') || nameController.hasError(\'whitespace\')">\n                            {{ \'ADF_TASK_LIST.START_TASK.FORM.ERROR.REQUIRED\' | translate }}\n                        </mat-error>\n                        <mat-error *ngIf="nameController.hasError(\'maxlength\')">\n                            {{ \'ADF_TASK_LIST.START_TASK.FORM.ERROR.MAXIMUM_LENGTH\' | translate : { characters : maxTaskNameLength } }}\n                        </mat-error>\n                </mat-form-field>\n            </div>\n            <div class="adf-task-description">\n                <mat-form-field fxFlex>\n                    <mat-label>{{\'ADF_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION\' | translate}}</mat-label>\n                    <textarea\n                        matInput\n                        rows="1"\n                        id="description_id"\n                        formControlName="description">\n                    </textarea>\n                    <mat-error *ngIf="descriptionController.hasError(\'whitespace\')">\n                        {{ \'ADF_TASK_LIST.START_TASK.FORM.ERROR.MESSAGE\' | translate }}\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div class="input-row" fxLayout="row" fxLayout.lt-md="column" fxLayoutGap="20px" fxLayoutGap.lt-md="0px">\n                <mat-form-field fxFlex>\n                    <input\n                        matInput\n                        (keyup)="onDateChanged($event.srcElement.value)"\n                        (dateInput)="onDateChanged($event.value)"\n                        [matDatepicker]="taskDatePicker"\n                        placeholder="{{\'ADF_TASK_LIST.START_TASK.FORM.LABEL.DATE\'|translate}}"\n                        id="date_id">\n                    <mat-datepicker-toggle\n                        matSuffix\n                        [for]="taskDatePicker"></mat-datepicker-toggle>\n                    <mat-datepicker\n                        #taskDatePicker\n                        [touchUi]="true">\n                    </mat-datepicker>\n                    <div class="adf-error-text-container">\n                        <div *ngIf="dateError">\n                            <div class="adf-error-text">{{\'ADF_TASK_LIST.START_TASK.FORM.ERROR.DATE\'|translate}}</div>\n                            <mat-icon class="adf-error-icon">warning</mat-icon>\n                        </div>\n                    </div>\n                </mat-form-field>\n                <div fxFlex>\n                    <people-widget\n                        (peopleSelected)="getAssigneeId($event)"\n                        [field]="field"\n                        class="adf-people-widget-content"></people-widget>\n                </div>\n            </div>\n            <div class="adf-task-form">\n                <mat-form-field fxFlex="48%" fxFlex.xs="100%">\n                    <mat-label id="form_label">{{\'ADF_TASK_LIST.START_TASK.FORM.LABEL.FORM\'|translate}}</mat-label>\n                    <mat-select\n                        id="form_id"\n                        class="form-control"\n                        formControlName="formKey">\n                    <mat-option>{{\'ADF_TASK_LIST.START_TASK.FORM.LABEL.NONE\'|translate}}</mat-option>\n                    <mat-option *ngFor="let form of forms$ | async" [value]="form.id">{{ form.name }}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    </mat-card-content>\n    <mat-card-actions>\n        <div class="adf-new-task-footer" fxLayout="row" fxLayoutAlign="end end">\n            <button\n                mat-button\n                (click)="onCancel()"\n                id="button-cancel">\n                {{\'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL\'|translate}}\n            </button>\n            <button\n                color="primary"\n                mat-button\n                [disabled]="!isFormValid()"\n                (click)="saveTask()"\n                id="button-start">\n                {{\'ADF_TASK_LIST.START_TASK.FORM.ACTION.START\'|translate}}\n            </button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n',providers:[{provide:n.DateAdapter,useClass:m.MomentDateAdapter},{provide:n.MAT_DATE_FORMATS,useValue:J}],encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[{type:B},{type:n.DateAdapter},{type:m.UserPreferencesService},{type:p.FormBuilder},{type:m.LogService}]},t.propDecorators={appId:[{type:u.Input}],name:[{type:u.Input}],success:[{type:u.Output}],cancel:[{type:u.Output}],error:[{type:u.Output}]},t}(),Q=function(){function t(){this.isCompleted=!1,this.hasCompletePermission=!0,this.hideCancelButton=!0,this.cancel=new u.EventEmitter,this.complete=new u.EventEmitter,this.showAttachForm=new u.EventEmitter}return t.prototype.onCancelButtonClick=function(){this.cancel.emit()},t.prototype.onCompleteButtonClick=function(){this.complete.emit()},t.prototype.hasCompleteButton=function(){return this.hasCompletePermission&&!this.isCompleted},t.prototype.hasCancelButton=function(){return!this.hideCancelButton&&!this.isCompleted},t.prototype.hasAttachFormButton=function(){return!this.isCompleted},t.prototype.onShowAttachForm=function(){this.showAttachForm.emit()},t.decorators=[{type:u.Component,args:[{selector:"adf-task-standalone",template:'<mat-card class="adf-message-card">\n    <mat-card-content>\n        <div class="adf-no-form-message-container">\n            <div class="adf-no-form-message-list">\n                <div *ngIf="!isCompleted; else completedMessage" class="adf-no-form-message">\n                    <span id="adf-no-form-message">{{\'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE\' | translate}}</span>\n                </div>\n                <ng-template #completedMessage>\n                    <div id="adf-completed-form-message" class="adf-no-form-message">\n                        <p>{{\'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_MESSAGE\' | translate : {taskName : taskName} }}</p>\n                    </div>\n                    <div class="adf-no-form-submessage">\n                        {{\'ADF_TASK_LIST.STANDALONE_TASK.COMPLETE_TASK_SUB_MESSAGE\' | translate}}\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </mat-card-content>\n\n    <mat-card-actions class="adf-no-form-mat-card-actions">\n        <button mat-button *ngIf="hasAttachFormButton()" id="adf-no-form-attach-form-button" (click)="onShowAttachForm()">{{ \'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM\' | translate }}</button>\n        <div>\n            <button mat-button *ngIf="hasCancelButton()" id="adf-no-form-cancel-button" (click)="onCancelButtonClick()">{{ \'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL\' | translate }}</button>\n            <button mat-button *ngIf="hasCompleteButton()" id="adf-no-form-complete-button" color="primary" (click)="onCompleteButtonClick()">{{ \'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE\' | translate }}</button>\n        </div>\n    </mat-card-actions>\n</mat-card>\n',encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={taskName:[{type:u.Input}],taskId:[{type:u.Input}],isCompleted:[{type:u.Input}],hasCompletePermission:[{type:u.Input}],hideCancelButton:[{type:u.Input}],cancel:[{type:u.Output}],complete:[{type:u.Output}],showAttachForm:[{type:u.Output}]},t}(),Z=function(){function t(t,e,n){this.taskService=t,this.logService=e,this.formService=n,this.cancelAttachForm=new u.EventEmitter,this.success=new u.EventEmitter,this.error=new u.EventEmitter,this.disableSubmit=!0}return t.prototype.ngOnInit=function(){var e=this;this.attachFormControl=new p.FormControl("",p.Validators.required),this.attachFormControl.valueChanges.subscribe(function(t){e.attachFormControl.valid&&(e.formId!==t?e.disableSubmit=!1:e.disableSubmit=!0)})},t.prototype.ngOnChanges=function(){this.formId=undefined,this.disableSubmit=!0,this.loadFormsTask(),this.formKey&&this.onFormAttached()},t.prototype.onCancelButtonClick=function(){this.selectedFormId=this.formId,this.cancelAttachForm.emit()},t.prototype.onRemoveButtonClick=function(){var e=this;this.taskService.deleteForm(this.taskId).subscribe(function(){e.formId=e.selectedFormId=null,e.success.emit()},function(t){e.error.emit(t),e.logService.error("An error occurred while trying to delete the form")})},t.prototype.onAttachFormButtonClick=function(){this.attachForm(this.taskId,this.selectedFormId)},t.prototype.loadFormsTask=function(){var e=this;this.taskService.getFormList().subscribe(function(t){e.forms=t},function(t){e.error.emit(t),e.logService.error("An error occurred while trying to get the forms")})},t.prototype.onFormAttached=function(){var e=this;this.formService.getTaskForm(this.taskId).subscribe(function(t){e.formService.getFormDefinitionByName(t.name).subscribe(function(t){e.formId=e.selectedFormId=t})},function(t){e.error.emit(t),e.logService.error("Could not load forms")})},t.prototype.attachForm=function(t,e){var n=this;t&&e&&this.taskService.attachFormToATask(t,e).subscribe(function(){n.success.emit()},function(t){n.error.emit(t),n.logService.error("Could not attach form")})},t.decorators=[{type:u.Component,args:[{selector:"adf-attach-form",template:'<div class="adf-attach-form">\n    <mat-card>\n        <mat-card-content>\n            <div class="adf-no-form-message-container">\n                <mat-card-title class="mat-card-title">\n                    <h4 class="adf-form-title">{{ \'ADF_TASK_LIST.ATTACH_FORM.SELECT_FORM\' | translate }}</h4>\n                </mat-card-title>\n                <div class="adf-attach-form-row">\n                    <mat-form-field class="adf-grid-full-width">\n                        <mat-select [formControl]="attachFormControl" placeholder="{{ \'ADF_TASK_LIST.ATTACH_FORM.SELECT_OPTION\' | translate }}" id="form_id" [(ngModel)]="selectedFormId">\n                            <mat-option *ngFor="let form of forms" [value]="form.id">{{ form.name }}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n\n                <adf-form *ngIf="this.attachFormControl.valid"\n                    [formId]="selectedFormId"\n                    [readOnly]="true"\n                    [showCompleteButton]="false"\n                    [showRefreshButton]="false"\n                    [showValidationIcon]="false">\n                </adf-form>\n            </div>\n        </mat-card-content>\n\n        <mat-card-actions class="adf-no-form-mat-card-actions">\n            <div>\n                <button mat-button id="adf-no-form-remove-button" color="warn" *ngIf="formKey" (click)="onRemoveButtonClick()">{{ \'ADF_TASK_LIST.ATTACH_FORM.REMOVE_FORM\' | translate }}</button>\n            </div>\n            <div>\n                <button mat-button id="adf-no-form-cancel-button" (click)="onCancelButtonClick()">{{ \'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL\' | translate }}</button>\n                <button mat-button id="adf-no-form-attach-form-button" [disabled]="disableSubmit" color="primary" (click)="onAttachFormButtonClick()">{{ \'ADF_TASK_LIST.START_TASK.FORM.LABEL.ATTACHFORM\' | translate }}</button>\n            </div>\n        </mat-card-actions>\n    </mat-card>\n</div>\n',styles:[".adf-attach-form .mat-form-field{width:100%}.adf-attach-form-row{display:flex;justify-content:space-between;margin:20px 0}.adf-attach-form .adf-no-form-mat-card-actions{justify-content:space-between;margin-top:30px;text-align:right}"]}]}],t.ctorParameters=function(){return[{type:B},{type:m.LogService},{type:m.FormService}]},t.propDecorators={taskId:[{type:u.Input}],formKey:[{type:u.Input}],cancelAttachForm:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}]},t}(),tt=function(n){function t(t,e){return n.call(this,t,e)||this}return b(t,n),t.prototype.getUploadPromise=function(t){var e=this,n=t.options.parentId,i=this.apiService.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(n,t.file,{isRelatedContent:!0});return i["catch"](function(t){return e.handleError(t)}),i},t.prototype.handleError=function(t){return d.throwError(t||"Server error")},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:m.AlfrescoApiService},{type:m.AppConfigService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(m.AlfrescoApiService),u.inject(m.AppConfigService))},token:t,providedIn:"root"}),t}(m.UploadService),et=function(n){function t(t,e){return n.call(this,t,e)||this}return b(t,n),t.prototype.getUploadPromise=function(t){var e=this,n=t.options.parentId,i=this.apiService.getInstance().activiti.contentApi.createRelatedContentOnTask(n,t.file,{isRelatedContent:!0});return i["catch"](function(t){return e.handleError(t)}),i},t.prototype.handleError=function(t){return d.throwError(t||"Server error")},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:m.AlfrescoApiService},{type:m.AppConfigService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(m.AlfrescoApiService),u.inject(m.AppConfigService))},token:t,providedIn:"root"}),t}(m.UploadService),nt=function ee(t){this.name=t&&t.name||null,this.description=t&&t.description||null,this.assignee=t&&t.assignee?new m.UserProcessModel(t.assignee):null,this.dueDate=t&&t.dueDate||null,this.formKey=t&&t.formKey||null,this.category=t&&t.category||null},it=function(){function t(t){this._defaultPrevented=!1,this._value=t}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"defaultPrevented",{get:function(){return this._defaultPrevented},enumerable:!0,configurable:!0}),t.prototype.preventDefault=function(){this._defaultPrevented=!0},t}(),ot=function ne(t){this.type="",this.value={},this.type=t&&t.type,this.value=t&&t.value||{}},st=function ie(t){this.groups={},this.id=t&&t.id,this.name=t&&t.name,this.externalId=t&&t.externalId,this.status=t&&t.status,this.groups=t&&t.groups};function rt(){return[o.MatAutocompleteModule,o.MatButtonModule,o.MatCardModule,o.MatDialogModule,o.MatCheckboxModule,o.MatDatepickerModule,o.MatGridListModule,o.MatIconModule,o.MatInputModule,o.MatListModule,o.MatOptionModule,o.MatRadioModule,o.MatSelectModule,o.MatSlideToggleModule,o.MatTableModule,o.MatTabsModule,o.MatProgressSpinnerModule,o.MatNativeDateModule,o.MatRippleModule,o.MatTooltipModule,o.MatChipsModule,o.MatMenuModule]}var at={"float":"never"},ct=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{providers:[{provide:o.MAT_LABEL_GLOBAL_OPTIONS,useValue:at}],imports:rt(),exports:rt()}]}],t}(),lt=function(){function t(t){var e=this;this.commentProcessService=t,this.readOnly=!0,this.error=new u.EventEmitter,this.comments=[],this.beingAdded=!1,this.comment$=new d.Observable(function(t){return e.commentObserver=t}).pipe(a.share()),this.comment$.subscribe(function(t){e.comments.push(t)})}return t.prototype.ngOnChanges=function(t){var e=t.processInstanceId;e&&(e.currentValue?this.getProcessInstanceComments(e.currentValue):this.resetComments())},t.prototype.getProcessInstanceComments=function(t){var e=this;this.resetComments(),t&&this.commentProcessService.getProcessInstanceComments(t).subscribe(function(t){(t=t.sort(function(t,e){var n=new Date(t.created),i=new Date(e.created);return i<n?-1:n<i?1:0})).forEach(function(t){e.commentObserver.next(t)})},function(t){e.error.emit(t)})},t.prototype.resetComments=function(){this.comments=[]},t.prototype.add=function(){var e=this;this.message&&this.message.trim()&&!this.beingAdded&&(this.beingAdded=!0,this.commentProcessService.addProcessInstanceComment(this.processInstanceId,this.message).subscribe(function(t){e.comments.unshift(t),e.message="",e.beingAdded=!1},function(t){e.error.emit(t),e.beingAdded=!1}))},t.prototype.clear=function(){this.message=""},t.prototype.isReadOnly=function(){return this.readOnly},t.prototype.onError=function(t){this.error.emit(t)},t.decorators=[{type:u.Component,args:[{selector:"adf-process-instance-comments",template:'<div class="adf-comments-container">\n    <div id="comment-header" class="adf-comments-header">\n        {{\'ADF_PROCESS_LIST.DETAILS.COMMENTS.HEADER\' | translate: { count: comments?.length} }}\n    </div>\n    <div class="adf-comments-input-container" *ngIf="!isReadOnly()">\n        <mat-form-field class="adf-full-width">\n            <input matInput id="comment-input" placeholder="{{\'ADF_PROCESS_LIST.DETAILS.COMMENTS.ADD\' | translate}}" [(ngModel)]="message" (keyup.enter)="add()" (keyup.esc)="clear()">\n        </mat-form-field>\n    </div>\n\n    <div *ngIf="comments.length > 0">\n        <adf-comment-list [comments]="comments">\n        </adf-comment-list>\n    </div>\n</div>\n',styles:[""]}]}],t.ctorParameters=function(){return[{type:m.CommentProcessService}]},t.propDecorators={processInstanceId:[{type:u.Input}],readOnly:[{type:u.Input}],error:[{type:u.Output}]},t}(),pt=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[p.FormsModule,p.ReactiveFormsModule,ct,l.CommonModule,m.CoreModule.forChild()],declarations:[lt],exports:[lt]}]}],t}(),dt=function(){function t(t,e){var n=this;this.logService=t,this.peopleProcessService=e,this.people=[],this.taskId="",this.readOnly=!1,this.showAssignment=!1,this.peopleSearch$=new d.Observable(function(t){return n.peopleSearchObserver=t}).pipe(a.share())}return t.prototype.ngOnInit=function(){},t.prototype.ngAfterViewInit=function(){},t.prototype.involveUserAndCloseSearch=function(){this.peopleSearch&&this.peopleSearch.involveUserAndClose()},t.prototype.involveUserWithoutCloseSearch=function(){this.peopleSearch&&this.peopleSearch.involveUser()},t.prototype.searchUser=function(t){var e=this;this.peopleProcessService.getWorkflowUsers(this.taskId,t).subscribe(function(t){e.peopleSearchObserver.next(t)},function(t){return e.logService.error(t)})},t.prototype.involveUser=function(t){var e=this;this.peopleProcessService.involveUserWithTask(this.taskId,t.id.toString()).subscribe(function(){e.people=w(e.people,[t])},function(t){return e.logService.error("Impossible to involve user with task")})},t.prototype.removeInvolvedUser=function(e){var n=this;this.peopleProcessService.removeInvolvedUser(this.taskId,e.id.toString()).subscribe(function(){n.people=n.people.filter(function(t){return t.id!==e.id})},function(t){return n.logService.error("Impossible to remove involved user from task")})},t.prototype.getDisplayUser=function(t,e,n){return void 0===n&&(n="-"),(t=null!==t?t:"")+n+(e=null!==e?e:"")},t.prototype.getInitialUserName=function(t,e){return t=null!==t&&""!==t?t[0]:"",e=null!==e&&""!==e?e[0]:"",this.getDisplayUser(t,e,"")},t.prototype.onAddAssignment=function(){this.showAssignment=!0},t.prototype.onClickAction=function(t){"remove"===t.type&&this.removeInvolvedUser(t.value)},t.prototype.hasPeople=function(){return this.people&&0<this.people.length},t.prototype.isEditMode=function(){return!this.readOnly},t.prototype.onCloseSearch=function(){this.showAssignment=!1},t.decorators=[{type:u.Component,args:[{selector:"adf-people",template:'<mat-card class="adf-assignment-top-container">\n    <div mat-card-content class="adf-assignment-top-container-content">\n        <div class="assignment-header">\n                <div *ngIf="hasPeople()" class="adf-assignment-count" id="people-title">\n                    {{ \'ADF_TASK_LIST.DETAILS.LABELS.PEOPLE\' | translate }} {{ \' (\' + people.length + \')\' }}\n                </div>\n                <div *ngIf="!hasPeople()" class="adf-assignment-count" id="no-people-label">\n                    {{ \'ADF_TASK_LIST.DETAILS.PEOPLE.NONE\' | translate }}\n                </div>\n                <div *ngIf="isEditMode()" class="adf-add-people" (click)="onAddAssignment()">\n                    <mat-icon class="adf-add-person-icon">person_add</mat-icon>\n                </div>\n            </div>\n            <div class="adf-assignment-container" *ngIf="showAssignment">\n                <adf-people-search\n                    #peopleSearch\n                    (searchPeople)="searchUser($event)"\n                    (success)="involveUser($event)"\n                    (closeSearch)="onCloseSearch()"\n                    [results]="peopleSearch$">\n                    <ng-container adf-people-search-title>{{ \'ADF_TASK_LIST.DETAILS.LABELS.ADD_PEOPLE\' | translate }}</ng-container>\n                    <ng-container adf-people-search-action-label>{{ \'ADF_TASK_LIST.PEOPLE.ADD_USER\' | translate }}</ng-container>\n                </adf-people-search>\n            </div>\n            <div class="adf-assignment-list-container" id="assignment-people-list" *ngIf="hasPeople()">\n                <adf-people-list\n                [users]="people"\n                [actions]="isEditMode()"\n                (clickAction)="onClickAction($event)">\n                    <data-columns>\n                        <data-column key="firstName">\n                            <ng-template let-entry="$implicit">\n                                <div *ngIf="!entry.row.obj.pictureId" class="adf-people-search-people-pic">\n                                    {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                                <div>\n                                    <img [alt]="getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, \' \')" *ngIf="entry.row.obj.pictureId" class="adf-people-img"\n                                        [src]="peopleProcessService.getUserImage(entry.row.obj)"/>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                        <data-column key="email" class="adf-full-width">\n                            <ng-template let-entry="$implicit">\n                                <div class="adf-people-user-info">\n                                    <div class="adf-people-full-name">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, \' \') }}</div>\n                                    <div class="adf-people-email">{{ entry.row.obj.email }}</div>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                    </data-columns>\n                </adf-people-list>\n            </div>\n    </div>\n</mat-card>\n',styles:[""]}]}],t.ctorParameters=function(){return[{type:m.LogService},{type:m.PeopleProcessService}]},t.propDecorators={people:[{type:u.Input}],taskId:[{type:u.Input}],readOnly:[{type:u.Input}],peopleSearch:[{type:u.ViewChild,args:["peopleSearch"]}]},t}(),ut=function(){function t(){this.actions=!1,this.clickRow=new u.EventEmitter,this.clickAction=new u.EventEmitter}return t.prototype.ngAfterContentInit=function(){this.peopleDataTable.columnList=this.columnList},t.prototype.ngAfterViewInit=function(){},t.prototype.selectUser=function(t){this.user=t.value.obj,this.clickRow.emit(this.user)},t.prototype.hasActions=function(){return this.actions},t.prototype.onShowRowActionsMenu=function(t){t.value.actions=[{title:"Remove",name:"remove"}]},t.prototype.onExecuteRowAction=function(t){var e=t.value,n=e.action;this.clickAction.emit(new ot({type:n.name,value:e.row.obj}))},t.decorators=[{type:u.Component,args:[{selector:"adf-people-list",template:'<adf-datatable\n    #dataTable\n    class="adf-task-people-list"\n    [rows]="users"\n    [actions]="hasActions()"\n    [showHeader]="false"\n    (rowClick)="selectUser($event)"\n    (rowDblClick)="selectUser($event)"\n    (showRowActionsMenu)="onShowRowActionsMenu($event)"\n    (executeRowAction)="onExecuteRowAction($event)">\n</adf-datatable>\n',styles:[""]}]}],t.propDecorators={columnList:[{type:u.ContentChild,args:[m.DataColumnListComponent]}],peopleDataTable:[{type:u.ViewChild,args:["dataTable"]}],users:[{type:u.Input}],actions:[{type:u.Input}],clickRow:[{type:u.Output}],clickAction:[{type:u.Output}]},t}(),mt=function(){function t(){this.searchPeople=new u.EventEmitter,this.success=new u.EventEmitter,this.closeSearch=new u.EventEmitter,this.selectedUser={}}return t.prototype.ngOnInit=function(){var e=this;this.filteredResults$=this.results.pipe(a.map(function(t){return t.filter(function(t){return t.id!==e.selectedUser.id})})),this.performSearch=this.performSearchCallback.bind(this)},t.prototype.performSearchCallback=function(t){return this.searchPeople.emit(t),this.filteredResults$},t.prototype.onRowClick=function(t){this.selectedUser=t},t.prototype.closeSearchList=function(){this.closeSearch.emit()},t.prototype.involveUserAndClose=function(){this.involveUser(),this.closeSearchList()},t.prototype.involveUser=function(){this.selectedUser!==undefined&&this.success.emit(this.selectedUser)},t.decorators=[{type:u.Component,args:[{selector:"adf-people-search",template:'<div class="adf-search-text-header">\n    <ng-content select="[adf-people-search-title], [people-search-title]"></ng-content>\n</div>\n\n<adf-people-search-field [performSearch]="performSearch" (rowClick)="onRowClick($event)"></adf-people-search-field>\n\n<div class="search-list-action-container">\n    <button mat-button type="button" id="close-people-search" (click)="closeSearchList()">\n        {{\'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE\' | translate }}\n    </button>\n    <button mat-button type="button" id="add-people" (click)="involveUserAndClose()">\n        <ng-content select="[adf-people-search-action-label], [people-search-action-label]"></ng-content>\n    </button>\n</div>\n',host:{"class":"adf-people-search"},encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={results:[{type:u.Input}],searchPeople:[{type:u.Output}],success:[{type:u.Output}],closeSearch:[{type:u.Output}]},t}();
/*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
function ft(t,e,n){return void 0===n&&(n="-"),(t=null!==t?t:"")+n+(e=null!==e?e:"")}var ht=function(){function t(t,e){var n=this;this.peopleProcessService=t,this.translationService=e,this.rowClick=new u.EventEmitter,this.searchUser=new p.FormControl,this.defaultPlaceholder="ADF_TASK_LIST.PEOPLE.SEARCH_USER",this.users$=this.searchUser.valueChanges.pipe(a.debounceTime(200),a.switchMap(function(t){return t&&t.trim()?n.performSearch(t):d.of([])})),this.defaultPlaceholder=this.translationService.instant(this.defaultPlaceholder)}return t.prototype.reset=function(){this.searchUser.reset()},Object.defineProperty(t.prototype,"searchPlaceholder",{get:function(){return this.placeholder||this.defaultPlaceholder},enumerable:!0,configurable:!0}),t.prototype.onRowClick=function(t){this.rowClick.emit(t)},t.prototype.getDisplayUser=function(t,e,n){return void 0===n&&(n="-"),ft(t,e,n)},t.prototype.getInitialUserName=function(t,e){return t=null!==t&&""!==t?t[0]:"",e=null!==e&&""!==e?e[0]:"",this.getDisplayUser(t,e,"")},t.decorators=[{type:u.Component,args:[{selector:"adf-people-search-field",template:'<mat-form-field class="adf-search-text-container">\n    <input\n        matInput\n        placeholder="{{ searchPlaceholder }}"\n        type="text"\n        id="userSearchText"\n        [value]=""\n        [formControl]="searchUser"\n        data-automation-id="adf-people-search-input">\n</mat-form-field>\n<ng-container *ngIf="users$ | async; let users">\n    <div class="adf-search-list-container" id="search-people-list" *ngIf="users.length > 0">\n        <adf-people-list [users]="users" (clickRow)="onRowClick($event)">\n            <data-columns>\n                <data-column key="firstName">\n                    <ng-template let-entry="$implicit">\n                            <div *ngIf="!entry.row.obj.pictureId" class="adf-people-pic">\n                                {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                            <div>\n                                <img [alt]="getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, \' \')" *ngIf="entry.row.obj.pictureId" class="adf-people-img"\n                                    [src]="peopleProcessService.getUserImage(entry.row.obj)"/>\n                            </div>\n                    </ng-template>\n                </data-column>\n                <data-column key="email" class="adf-full-width">\n                    <ng-template let-entry="$implicit">\n                        <div class="adf-people-full-name">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, \' \') }}</div>\n                    </ng-template>\n                </data-column>\n            </data-columns>\n        </adf-people-list>\n    </div>\n</ng-container>\n',host:{"class":"adf-people-search-field"},encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[{type:m.PeopleProcessService},{type:m.TranslationService}]},t.propDecorators={performSearch:[{type:u.Input}],placeholder:[{type:u.Input}],rowClick:[{type:u.Output}]},t}(),gt=function(){function t(t,e,n){this.peopleProcessService=t,this.logService=e,this.translationService=n,this.peopleIdChange=new u.EventEmitter,this.performSearch=this.searchUser.bind(this),this.defaultPlaceholder=this.translationService.instant("ADF_TASK_LIST.PEOPLE.ASSIGNEE")}return t.prototype.searchUser=function(t){return this.peopleProcessService.getWorkflowUsers(undefined,t).pipe(a.catchError(this.onSearchUserError.bind(this)))},t.prototype.onSearchUserError=function(){return this.logService.error("getWorkflowUsers threw error"),d.of([])},t.prototype.userSelected=function(t){this.updateUserSelection(t)},t.prototype.userDeselected=function(){this.updateUserSelection(undefined)},t.prototype.updateUserSelection=function(t){this.selectedUser=t,this.peopleIdChange.emit(t&&t.id||undefined),this.searchFieldComponent.reset()},Object.defineProperty(t.prototype,"placeholder",{get:function(){return this.selectedUser?ft(this.selectedUser.firstName,this.selectedUser.lastName," "):this.defaultPlaceholder},enumerable:!0,configurable:!0}),t.decorators=[{type:u.Component,args:[{selector:"adf-people-selector",template:'<adf-people-search-field\n    #peopleSearchField\n    class="adf-people-selector-field"\n    [performSearch]="performSearch"\n    [placeholder]="placeholder"\n    (rowClick)="userSelected($event)">\n</adf-people-search-field>\n<button\n    *ngIf="selectedUser"\n    mat-icon-button\n    class="adf-people-selector-deselect"\n    data-automation-id="adf-people-selector-deselect"\n    (click)="userDeselected()">\n        <mat-icon>cancel</mat-icon>\n</button>\n',host:{"class":"adf-people-selector"},encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[{type:m.PeopleProcessService},{type:m.LogService},{type:m.TranslationService}]},t.propDecorators={peopleId:[{type:u.Input}],peopleIdChange:[{type:u.Output}],searchFieldComponent:[{type:u.ViewChild,args:["peopleSearchField"]}]},t}(),yt=function(){function t(){}return t.decorators=[{type:u.Directive,args:[{selector:"adf-people-search-action-label, people-search-action-label"}]}],t}(),vt=function(){function t(){}return t.decorators=[{type:u.Directive,args:[{selector:"adf-people-search-title, people-search-title"}]}],t}(),St=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[p.FormsModule,p.ReactiveFormsModule,ct,l.CommonModule,m.CoreModule.forChild()],declarations:[dt,mt,ht,gt,vt,yt,ut],exports:[dt,mt,ht,gt,vt,yt,ut]}]}],t}(),It=function(){function t(t,e){this.data=t,(this.externalApiService=e).init(t.ecmHost,t.context),this.buttonActionName=t.actionName?"ATTACH-FILE.ACTIONS."+t.actionName.toUpperCase():"ATTACH-FILE.ACTIONS.CHOOSE"}return t.prototype.isLoggedIn=function(){return this.externalApiService.getInstance().isLoggedIn()},t.prototype.performLogin=function(){this.loginPanel.submitForm()},t.prototype.close=function(){this.data.selected.complete()},t.prototype.onSelect=function(t){t&&t[0].isFile?this.chosenNode=t:this.chosenNode=null},t.prototype.onClick=function(t){this.data.selected.next(this.chosenNode),this.data.selected.complete()},t.decorators=[{type:u.Component,args:[{selector:"adf-attach-file-widget-dialog",template:'<header\n    mat-dialog-title\n    data-automation-id="content-node-selector-title">{{data?.title}}\n</header>\n\n<mat-dialog-content class="adf-login-dialog-content">\n    <adf-login-dialog-panel id="attach-file-login-panel" #adfLoginPanel *ngIf="!isLoggedIn()">\n    </adf-login-dialog-panel>\n    <adf-content-node-selector-panel *ngIf="isLoggedIn()"\n                                     id="attach-file-content-node"\n                                     [isSelectionValid]="data?.isSelectionValid"\n                                     (select)="onSelect($event)">\n    </adf-content-node-selector-panel>\n</mat-dialog-content>\n\n<mat-dialog-actions align="end">\n    <button\n        mat-button\n        (click)="close()"\n        data-automation-id="attach-file-dialog-actions-cancel">{{ \'ATTACH-FILE.ACTIONS.CANCEL\' | translate }}\n    </button>\n\n    <button *ngIf="!isLoggedIn()"\n        mat-button\n        (click)="performLogin()"\n        data-automation-id="attach-file-dialog-actions-login">{{ \'ATTACH-FILE.ACTIONS.LOGIN\' | translate }}\n    </button>\n\n    <button *ngIf="isLoggedIn()"\n        mat-button\n        [disabled]="!chosenNode"\n        class="adf-choose-action"\n        (click)="onClick($event)"\n        data-automation-id="attach-file-dialog-actions-choose">{{ buttonActionName | translate }}\n    </button>\n\n</mat-dialog-actions>\n',encapsulation:u.ViewEncapsulation.None,providers:[m.AuthenticationService,s.DocumentListService,m.SitesService,s.ContentNodeSelectorService,m.SearchService,{provide:m.AlfrescoApiService,useClass:m.ExternalAlfrescoApiService}],styles:[""]}]}],t.ctorParameters=function(){return[{type:undefined,decorators:[{type:u.Inject,args:[o.MAT_DIALOG_DATA]}]},{type:m.AlfrescoApiService}]},t.propDecorators={loginPanel:[{type:u.ViewChild,args:["adfLoginPanel"]}]},t}(),Tt=function(){function t(t){this.dialog=t,this.error=new u.EventEmitter}return t.prototype.openLogin=function(t,e,n){var i="Please log in for "+t,o=new d.Subject;o.subscribe({complete:this.close.bind(this)});var s={title:i,actionName:e,selected:o,ecmHost:t,context:n,isSelectionValid:this.isNodeFile.bind(this)};return this.openLoginDialog(s,"adf-attach-file-widget-dialog","630px"),o},t.prototype.openLoginDialog=function(t,e,n){this.dialog.open(It,{data:t,panelClass:e,width:n})},t.prototype.close=function(){this.dialog.closeAll()},t.prototype.isNodeFile=function(t){return t.isFile},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:o.MatDialog}]},t.propDecorators={error:[{type:u.Output}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(i.MatDialog))},token:t,providedIn:"root"}),t}(),At=function(p){function t(t,e,n,i,o,s,r,a,c){var l=p.call(this,t,e,n,i)||this;return l.formService=t,l.logger=e,l.thumbnails=n,l.processContentService=i,l.activitiContentService=o,l.contentService=s,l.contentDialog=r,l.appConfigService=a,l.attachDialogService=c,l.repositoryList=[],l.tempFilesList=[],l}return b(t,p),t.prototype.ngOnInit=function(){var e=this;this.field&&this.field.value&&0<this.field.value.length&&(this.hasFile=!0),this.getMultipleFileParam(),this.activitiContentService.getAlfrescoRepositories(null,!0).subscribe(function(t){e.repositoryList=t}),this.formService.taskSaved.subscribe(function(t){t.form.id===e.field.form.id&&(e.tempFilesList=[])})},t.prototype.isFileSourceConfigured=function(){return!!this.field.params&&!!this.field.params.fileSource},t.prototype.isMultipleSourceUpload=function(){return!this.field.readOnly&&this.isFileSourceConfigured()&&!this.isOnlyLocalSourceSelected()},t.prototype.isAllFileSourceSelected=function(){return this.field.params&&this.field.params.fileSource&&"all-file-sources"===this.field.params.fileSource.serviceId},t.prototype.isOnlyLocalSourceSelected=function(){return this.field.params&&this.field.params.fileSource&&"local-file"===this.field.params.fileSource.serviceId},t.prototype.isSimpleUploadButton=function(){return this.isUploadButtonVisible()&&!this.isFileSourceConfigured()||this.isOnlyLocalSourceSelected()},t.prototype.isUploadButtonVisible=function(){return(!this.hasFile||this.multipleOption)&&!this.field.readOnly},t.prototype.isDefinedSourceFolder=function(){return!!this.field.params&&!!this.field.params.fileSource&&!!this.field.params.fileSource.selectedFolder},t.prototype.isTemporaryFile=function(e){return 0<=this.tempFilesList.findIndex(function(t){return t.name===e.name})},t.prototype.openSelectDialogFromFileSource=function(){var n=this,t=this.field.params;this.isDefinedSourceFolder()&&this.contentDialog.openFileBrowseDialogByFolderId(t.fileSource.selectedFolder.pathId).subscribe(function(t){var e;(e=n.tempFilesList).push.apply(e,w(t)),n.uploadFileFromCS(t,n.field.params.fileSource.selectedFolder.accountId,n.field.params.fileSource.selectedFolder.siteId)})},t.prototype.onAttachFileChanged=function(t){var e;(e=this.tempFilesList).push.apply(e,w(Array.from(t.target.files))),this.onFileChanged(t)},t.prototype.onRemoveAttachFile=function(t){this.isTemporaryFile(t)&&this.tempFilesList.splice(this.tempFilesList.indexOf(t.contentBlob),1),this.removeFile(t)},t.prototype.onAttachFileClicked=function(t){t.isExternal?this.logger.info("The file "+t.name+" comes from an external source and cannot be showed at this moment"):this.isTemporaryFile(t)?this.formService.formContentClicked.next(t):this.fileClicked(t)},t.prototype.downloadContent=function(e){var n=this;this.isTemporaryFile(e)?this.contentService.downloadBlob(e.contentBlob,e.name):this.processContentService.getFileRawContent(e.id).subscribe(function(t){n.contentService.downloadBlob(t,e.name)},function(t){n.logger.error("Impossible retrieve content for download")})},t.prototype.openSelectDialog=function(t){var n=this,i="alfresco-"+t.id+"-"+t.name,e=this.getDomainHost(this.appConfigService.get(m.AppConfigValues.ECMHOST));if(this.getDomainHost(t.repositoryUrl)!==e){var o=t.repositoryUrl.replace("/alfresco","");this.attachDialogService.openLogin(o).subscribe(function(t){var e;t.forEach(function(t){return t.isExternal=!0}),(e=n.tempFilesList).push.apply(e,w(t)),n.uploadFileFromCS(t,i)})}else this.contentDialog.openFileBrowseDialogBySite().subscribe(function(t){var e;(e=n.tempFilesList).push.apply(e,w(t)),n.uploadFileFromCS(t,i)})},t.prototype.uploadFileFromCS=function(t,e,n){var i=this,s=[];d.from(t).pipe(a.mergeMap(function(t){return d.zip(d.of(t.content.mimeType),i.activitiContentService.applyAlfrescoNode(t,n,e),d.of(t.isExternal))})).subscribe(function(t){var e=_(t,3),n=e[0],i=e[1],o=e[2];i.mimeType=n,i.isExternal=o,s.push(i)},function(t){i.logger.error(t)},function(){i.field.value=s,i.field.json.value=s,i.hasFile=!0})},t.prototype.getDomainHost=function(t){return t.match("^(?:https?://)?(?:[^@/\n]+@)?(?:www.)?([^:/?\n]+)")[1]},t.decorators=[{type:u.Component,args:[{selector:"attach-widget",template:'<div class="adf-attach-widget {{field.className}}"\n    [class.adf-invalid]="!field.isValid"\n    [class.adf-readonly]="field.readOnly">\n    <label class="adf-label" [attr.for]="field.id">{{field.name}}\n        <span *ngIf="isRequired()">*</span>\n    </label>\n    <div class="adf-attach-widget-container">\n        <div id="adf-attach-widget-simple-upload" *ngIf="isSimpleUploadButton() && isUploadButtonVisible()">\n            <a mat-raised-button color="primary">\n                {{ \'FORM.FIELD.UPLOAD\' | translate }}\n                <mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                        [multiple]="multipleOption"\n                        type="file"\n                        [id]="field.id"\n                        (change)="onAttachFileChanged($event)" />\n            </a>\n        </div>\n        <div class="adf-attach-widget__menu-upload" *ngIf="isUploadButtonVisible() && isMultipleSourceUpload()">\n            <button mat-raised-button color="primary" [matMenuTriggerFor]="menu" [id]="field.id">\n                    {{ \'FORM.FIELD.UPLOAD\' | translate }}\n                    <mat-icon>attach_file</mat-icon>\n            </button>\n            <mat-menu #menu="matMenu" class="adf-attach-widget__menu-content">\n                <button mat-menu-item (click)="uploadFile.click()"\n                        id="attach-local-file"\n                        *ngIf="isAllFileSourceSelected()">\n                    {{ \'FORM.FIELD.LOCALSTORAGE\' | translate }}\n                    <mat-icon>file_upload</mat-icon>\n                    <input #uploadFile\n                            class="adf-attach-widget__input-type"\n                            [multiple]="multipleOption"\n                            type="file"\n                            [id]="field.id"\n                            (change)="onAttachFileChanged($event)" />\n                </button>\n                <button mat-menu-item\n                        *ngIf="isDefinedSourceFolder()"\n                        id="attach-{{field.params?.fileSource?.name}}"\n                        (click)="openSelectDialogFromFileSource()">\n                        {{field.params?.fileSource?.name}}\n                        <mat-icon>\n                            <img alt="alfresco" class="adf-attach-widget__image-logo" src="../assets/images/alfresco-flower.svg">\n                        </mat-icon>\n                </button>\n                <div *ngIf="!isDefinedSourceFolder()">\n                    <button mat-menu-item *ngFor="let repo of repositoryList"\n                            id="attach-{{repo?.name}}"\n                           (click)="openSelectDialog(repo)">\n                            {{repo.name}}\n                            <mat-icon>\n                                <img alt="alfresco" class="adf-attach-widget__image-logo" src="../assets/images/alfresco-flower.svg">\n                            </mat-icon>\n                    </button>\n                </div>\n            </mat-menu>\n        </div>\n    </div>\n</div>\n\n<div id="adf-attach-widget-readonly-list">\n    <mat-list *ngIf="hasFile">\n        <mat-list-item class="adf-attach-files-row" *ngFor="let file of field.value">\n            <img mat-list-icon class="adf-attach-widget__icon"\n                 [id]="\'file-\'+file.id+\'-icon\'"\n                 [src]="file.content ? getIcon(file.content.mimeType) : getIcon(file.mimeType)"\n                 [alt]="mimeTypeIcon"\n                 (click)="onAttachFileClicked(file)"\n                 (keyup.enter)="onAttachFileClicked(file)"\n                 role="button"\n                 tabindex="0"/>\n            <span matLine id="{{\'file-\'+file.id}}" (click)="onAttachFileClicked(file)" (keyup.enter)="onAttachFileClicked(file)"\n                  role="button" tabindex="0" class="adf-file">{{file.name}}</span>\n            <button id="{{\'file-\'+file.id+\'-option-menu\'}}" mat-icon-button [matMenuTriggerFor]="fileActionMenu">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #fileActionMenu="matMenu" xPosition="before">\n                <button id="{{\'file-\'+file.id+\'-show-file\'}}"\n                    [disabled]="file.isExternal"\n                    mat-menu-item (click)="onAttachFileClicked(file)">\n                    <mat-icon>image</mat-icon>\n                    <span>{{ \'FORM.FIELD.SHOW_FILE\' | translate }}</span>\n                </button>\n                <button id="{{\'file-\'+file.id+\'-download-file\'}}"\n                    mat-menu-item (click)="downloadContent(file)">\n                    <mat-icon>file_download</mat-icon>\n                    <span>{{ \'FORM.FIELD.DOWNLOAD_FILE\' | translate }}</span>\n                </button>\n                <button *ngIf="!field.readOnly" id="{{\'file-\'+file.id+\'-remove-file\'}}"\n                        mat-menu-item [id]="\'file-\'+file.id+\'-remove\'"\n                        (click)="onRemoveAttachFile(file);" (keyup.enter)="onRemoveAttachFile(file);">\n                    <mat-icon class="mat-24">highlight_off</mat-icon>\n                    <span>{{ \'FORM.FIELD.REMOVE_FILE\' | translate }}</span>\n                </button>\n            </mat-menu>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<error-widget [error]="field.validationSummary"></error-widget>\n<error-widget *ngIf="isInvalidFieldRequired()" required="{{ \'FORM.FIELD.REQUIRED\' | translate }}"></error-widget>\n',host:{"(click)":"event($event)","(blur)":"event($event)","(change)":"event($event)","(focus)":"event($event)","(focusin)":"event($event)","(focusout)":"event($event)","(input)":"event($event)","(invalid)":"event($event)","(select)":"event($event)"},encapsulation:u.ViewEncapsulation.None,styles:[".adf-attach-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{display:flex;align-items:center}.adf-attach-widget__input-type{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-widget__icon{padding:6px;float:left;cursor:pointer}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row .mat-line{margin-bottom:0}"]}]}],t.ctorParameters=function(){return[{type:m.FormService},{type:m.LogService},{type:m.ThumbnailService},{type:m.ProcessContentService},{type:m.ActivitiContentService},{type:m.ContentService},{type:s.ContentNodeDialogService},{type:m.AppConfigService},{type:Tt}]},t}(m.UploadWidgetComponent),Dt=function(o){function t(t,e,n){var i=o.call(this)||this;return i.contentDialog=t,i.formService=e,i.nodeService=n,i.hasFolder=!1,i.selectedFolderName="",i}return b(t,o),t.prototype.ngOnInit=function(){var e=this;this.field&&this.field.value&&(this.hasFolder=!0,this.nodeService.getNode(this.field.value).subscribe(function(t){e.selectedFolderName=t.name}))},t.prototype.isDefinedSourceFolder=function(){return!!this.field.params&&!!this.field.params.folderSource&&!!this.field.params.folderSource.selectedFolder},t.prototype.openSelectDialogFromFileSource=function(){var e=this,t=this.field.params;this.isDefinedSourceFolder()?this.contentDialog.openFolderBrowseDialogByFolderId(t.folderSource.selectedFolder.pathId).subscribe(function(t){e.selectedFolderName=t[0].name,e.field.value=t[0].id,e.hasFolder=!0}):this.contentDialog.openFolderBrowseDialogBySite().subscribe(function(t){e.selectedFolderName=t[0].name,e.field.value=t[0].id,e.hasFolder=!0})},t.prototype.removeFolder=function(){this.field.value=null,this.selectedFolderName="",this.hasFolder=!1},t.decorators=[{type:u.Component,args:[{selector:"attach-folder-widget",template:'<div class="adf-attach-folder-widget {{field.className}}"\n     [class.adf-invalid]="!field.isValid"\n     [class.adf-readonly]="field.readOnly">\n    <label class="adf-label" [attr.for]="field.id">{{field.name}}<span *ngIf="isRequired()">*</span></label>\n    <div class="adf-attach-folder-widget-container">\n        <div *ngIf="hasFolder" class="adf-attach-folder-result">\n            <mat-icon>folder</mat-icon>\n            <div class="adf-attach-folder-files-row">\n                <span matLine id="{{\'folder-\'+field?.id}}"\n                        role="button" tabindex="0" class="adf-folder">{{selectedFolderName}}</span>\n                <button *ngIf="!field.readOnly" mat-icon-button [id]="\'folder-\'+field?.id+\'-remove\'"\n                        (click)="removeFolder();">\n                    <mat-icon class="mat-24">highlight_off</mat-icon>\n                </button>\n            </div>\n        </div>\n\n        <div class="button-row" *ngIf="!hasFolder && !field.readOnly">\n            <button mat-raised-button\n                color="primary"\n                (click)="openSelectDialogFromFileSource()"\n                [id]="\'folder-\'+field?.id+\'-button\'">\n                    {{ \'FORM.FIELD.UPLOAD\' | translate }}\n                <mat-icon>cloud_upload</mat-icon>\n            </button>\n        </div>\n    </div>\n    <error-widget [error]="field.validationSummary"></error-widget>\n    <error-widget *ngIf="isInvalidFieldRequired()" required="{{ \'FORM.FIELD.REQUIRED\' | translate }}"></error-widget>\n</div>\n',host:{"(click)":"event($event)","(blur)":"event($event)","(change)":"event($event)","(focus)":"event($event)","(focusin)":"event($event)","(focusout)":"event($event)","(input)":"event($event)","(invalid)":"event($event)","(select)":"event($event)"},encapsulation:u.ViewEncapsulation.None,styles:[".adf-attach-folder-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-folder-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-folder-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-folder-files-row{padding-left:8px}.adf-attach-folder-files-row .mat-line{margin-bottom:0}.adf-attach-folder-result{display:flex;align-items:center}"]}]}],t.ctorParameters=function(){return[{type:s.ContentNodeDialogService},{type:m.FormService},{type:m.NodesApiService}]},t}(m.WidgetComponent),Et=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[m.CoreModule.forChild(),s.ContentNodeSelectorModule,ct],entryComponents:[At,Dt,It],declarations:[At,Dt,It],exports:[At,Dt,It]}]}],t}(),kt=function(r){function t(t,e,n,i,o){var s=r.call(this)||this;return s.formService=t,s.visibilityService=e,s.ecmModelService=n,s.nodeService=i,s.formRenderingService=o,s.saveMetadata=!1,s.formSaved=new u.EventEmitter,s.formCompleted=new u.EventEmitter,s.formContentClicked=new u.EventEmitter,s.formLoaded=new u.EventEmitter,s.formDataRefreshed=new u.EventEmitter,s.debugMode=!1,s.subscriptions=[],s.formRenderingService.setComponentTypeResolver("upload",function(){return At},!0),s.formRenderingService.setComponentTypeResolver("select-folder",function(){return Dt},!0),s}return b(t,r),t.prototype.ngOnInit=function(){var e=this;this.subscriptions.push(this.formService.formContentClicked.subscribe(function(t){e.formContentClicked.emit(t)}),this.formService.validateForm.subscribe(function(t){0<t.errorsField.length&&e.formError.next(t.errorsField)}))},t.prototype.ngOnDestroy=function(){this.subscriptions.forEach(function(t){return t.unsubscribe()}),this.subscriptions=[]},t.prototype.ngOnChanges=function(t){var e=t.taskId;if(e&&e.currentValue)this.getFormByTaskId(e.currentValue);else{var n=t.formId;if(n&&n.currentValue)this.getFormDefinitionByFormId(n.currentValue);else{var i=t.formName;if(i&&i.currentValue)this.getFormDefinitionByFormName(i.currentValue);else{var o=t.nodeId;if(o&&o.currentValue)this.loadFormForEcmNode(o.currentValue);else{var s=t.data;s&&s.currentValue&&this.refreshFormData()}}}}},t.prototype.onRefreshClicked=function(){this.loadForm()},t.prototype.loadForm=function(){this.taskId?this.getFormByTaskId(this.taskId):this.formId?this.getFormDefinitionByFormId(this.formId):this.formName&&this.getFormDefinitionByFormName(this.formName)},t.prototype.findProcessVariablesByTaskId=function(e){var n=this;return this.formService.getTask(e).pipe(a.switchMap(function(t){return n.isAProcessTask(t)?n.visibilityService.getTaskProcessVariable(e):d.of({})}))},t.prototype.isAProcessTask=function(t){return t.processDefinitionId&&"null"!==t.processDefinitionDeploymentId},t.prototype.getFormByTaskId=function(e){var i=this;return new Promise(function(n,t){i.findProcessVariablesByTaskId(e).subscribe(function(t){i.formService.getTaskForm(e).subscribe(function(t){var e=i.parseForm(t);i.visibilityService.refreshVisibility(e),e.validateForm(),i.form=e,i.onFormLoaded(i.form),n(i.form)},function(t){i.handleError(t),n(null)})})})},t.prototype.getFormDefinitionByFormId=function(t){var e=this;this.formService.getFormDefinitionById(t).subscribe(function(t){e.formName=t.name,e.form=e.parseForm(t),e.visibilityService.refreshVisibility(e.form),e.form.validateForm(),e.onFormLoaded(e.form)},function(t){e.handleError(t)})},t.prototype.getFormDefinitionByFormName=function(t){var e=this;this.formService.getFormDefinitionByName(t).subscribe(function(t){e.formService.getFormDefinitionById(t).subscribe(function(t){e.form=e.parseForm(t),e.visibilityService.refreshVisibility(e.form),e.form.validateForm(),e.onFormLoaded(e.form)},function(t){e.handleError(t)})},function(t){e.handleError(t)})},t.prototype.saveTaskForm=function(){var e=this;this.form&&this.form.taskId&&this.formService.saveTaskForm(this.form.taskId,this.form.values).subscribe(function(){e.onTaskSaved(e.form),e.storeFormAsMetadata()},function(t){return e.onTaskSavedError(e.form,t)})},t.prototype.completeTaskForm=function(t){var e=this;this.form&&this.form.taskId&&this.formService.completeTaskForm(this.form.taskId,this.form.values,t).subscribe(function(){e.onTaskCompleted(e.form),e.storeFormAsMetadata()},function(t){return e.onTaskCompletedError(e.form,t)})},t.prototype.handleError=function(t){this.error.emit(t)},t.prototype.parseForm=function(t){if(t){var e=new m.FormModel(t,this.data,this.readOnly,this.formService);return t.fields||(e.outcomes=this.getFormDefinitionOutcomes(e)),this.fieldValidators&&0<this.fieldValidators.length&&(e.fieldValidators=this.fieldValidators),e}return null},t.prototype.getFormDefinitionOutcomes=function(t){return[new m.FormOutcomeModel(t,{id:"$save",name:m.FormOutcomeModel.SAVE_ACTION,isSystem:!0})]},t.prototype.checkVisibility=function(t){t&&t.form&&this.visibilityService.refreshVisibility(t.form)},t.prototype.refreshFormData=function(){this.form=this.parseForm(this.form.json),this.onFormLoaded(this.form),this.onFormDataRefreshed(this.form)},t.prototype.loadFormForEcmNode=function(t){var e=this;this.nodeService.getNodeMetadata(t).subscribe(function(t){e.data=t.metadata,e.loadFormFromActiviti(t.nodeType)},this.handleError)},t.prototype.loadFormFromActiviti=function(e){var n=this;this.formService.searchFrom(e).subscribe(function(t){t?n.loadFormFromFormId(t.id):n.formService.createFormFromANode(e).subscribe(function(t){n.loadFormFromFormId(t.id)})},function(t){n.handleError(t)})},t.prototype.loadFormFromFormId=function(t){this.formId=t,this.loadForm()},t.prototype.storeFormAsMetadata=function(){var e=this;this.saveMetadata&&this.ecmModelService.createEcmTypeForActivitiForm(this.formName,this.form).subscribe(function(t){e.nodeService.createNodeMetadata(t.nodeType||t.entry.prefixedName,m.EcmModelService.MODEL_NAMESPACE,e.form.values,e.path,e.nameNode)},function(t){e.handleError(t)})},t.prototype.onFormLoaded=function(t){this.formLoaded.emit(t),this.formService.formLoaded.next(new m.FormEvent(t))},t.prototype.onFormDataRefreshed=function(t){this.formDataRefreshed.emit(t),this.formService.formDataRefreshed.next(new m.FormEvent(t))},t.prototype.onTaskSaved=function(t){this.formSaved.emit(t),this.formService.taskSaved.next(new m.FormEvent(t))},t.prototype.onTaskSavedError=function(t,e){this.handleError(e),this.formService.taskSavedError.next(new m.FormErrorEvent(t,e))},t.prototype.onTaskCompleted=function(t){this.formCompleted.emit(t),this.formService.taskCompleted.next(new m.FormEvent(t))},t.prototype.onTaskCompletedError=function(t,e){this.handleError(e),this.formService.taskCompletedError.next(new m.FormErrorEvent(t,e))},t.prototype.onExecuteOutcome=function(t){var e=new m.FormOutcomeEvent(t);return this.formService.executeOutcome.next(e),!e.defaultPrevented&&(this.executeOutcome.emit(e),!e.defaultPrevented)},t.decorators=[{type:u.Component,args:[{selector:"adf-form",template:'<div *ngIf="!hasForm()">\n    <ng-content select="[empty-form]">\n    </ng-content>\n</div>\n\n<div *ngIf="hasForm()" class="adf-form-container">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf="showValidationIcon" class="adf-form-validation-button">\n                        <i id="adf-valid-form-icon" class="material-icons"\n                            *ngIf="form.isValid; else no_valid_form">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id="adf-invalid-form-icon" class="material-icons adf-invalid-color">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf="showRefreshButton" class="adf-form-reload-button">\n                        <button mat-icon-button (click)="onRefreshClicked()">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf="isTitleEnabled()" class="adf-form-title">\n                        {{form.taskName}}\n                        <ng-container *ngIf="!form.taskName">\n                            {{\'FORM.FORM_RENDERER.NAMELESS_TASK\' | translate}}\n                        </ng-container>\n                    </span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <adf-form-renderer [formDefinition]="form">\n            </adf-form-renderer>\n        </mat-card-content>\n        <mat-card-actions *ngIf="form.hasOutcomes()" class="adf-form-mat-card-actions">\n            <button [id]="\'adf-form-\'+ outcome.name  | formatSpace" *ngFor="let outcome of form.outcomes"\n                [color]="getColorForOutcome(outcome.name)" mat-button [disabled]="!isOutcomeButtonEnabled(outcome)"\n                [class.adf-form-hide-button]="!isOutcomeButtonVisible(outcome, form.readOnly)"\n                (click)="onOutcomeClicked(outcome)">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n',encapsulation:u.ViewEncapsulation.None}]}],t.ctorParameters=function(){return[{type:m.FormService},{type:m.WidgetVisibilityService},{type:m.EcmModelService},{type:m.NodeService},{type:m.FormRenderingService}]},t.propDecorators={form:[{type:u.Input}],taskId:[{type:u.Input}],nodeId:[{type:u.Input}],formId:[{type:u.Input}],formName:[{type:u.Input}],saveMetadata:[{type:u.Input}],data:[{type:u.Input}],formSaved:[{type:u.Output}],formCompleted:[{type:u.Output}],formContentClicked:[{type:u.Output}],formLoaded:[{type:u.Output}],formDataRefreshed:[{type:u.Output}]},t}(m.FormBaseComponent),Ct=function(o){function t(t,e,n){var i=o.call(this,t,e,null,null,n)||this;return i.showOutcomeButtons=!0,i.showRefreshButton=!0,i.readOnlyForm=!1,i.outcomeClick=new u.EventEmitter,i.formContentClicked=new u.EventEmitter,i.outcomesContainer=null,i.showTitle=!1,i}return b(t,o),t.prototype.ngOnInit=function(){var e=this;this.subscriptions.push(this.formService.formContentClicked.subscribe(function(t){e.formContentClicked.emit(t)}),this.formService.validateForm.subscribe(function(t){0<t.errorsField.length&&e.formError.next(t.errorsField)}))},t.prototype.ngOnDestroy=function(){this.subscriptions.forEach(function(t){return t.unsubscribe()}),this.subscriptions=[]},t.prototype.ngOnChanges=function(t){var e=t.processDefinitionId;if(e&&e.currentValue)return this.visibilityService.cleanProcessVariable(),void this.getStartFormDefinition(e.currentValue);var n=t.processId;return n&&n.currentValue?(this.visibilityService.cleanProcessVariable(),void this.loadStartForm(n.currentValue)):void 0},t.prototype.loadStartForm=function(t){var n=this;this.formService.getProcessInstance(t).subscribe(function(e){n.formService.getStartFormInstance(t).subscribe(function(t){n.formName=t.name,e.variables&&(t.processVariables=e.variables),n.form=n.parseForm(t),n.visibilityService.refreshVisibility(n.form),n.form.validateForm(),n.form.readOnly=n.readOnlyForm,n.onFormLoaded(n.form)},function(t){return n.handleError(t)})})},t.prototype.getStartFormDefinition=function(t){var e=this;this.formService.getStartFormDefinition(t).subscribe(function(t){e.formName=t.processDefinitionName,e.form=e.parseForm(t),e.visibilityService.refreshVisibility(e.form),e.form.validateForm(),e.form.readOnly=e.readOnlyForm,e.onFormLoaded(e.form)},function(t){return e.handleError(t)})},t.prototype.isOutcomeButtonVisible=function(t,e){return(!t||!t.isSystem||t.name!==m.FormOutcomeModel.SAVE_ACTION&&t.name!==m.FormOutcomeModel.COMPLETE_ACTION)&&(!(!t||t.name!==m.FormOutcomeModel.START_PROCESS_ACTION)||o.prototype.isOutcomeButtonVisible.call(this,t,e))},t.prototype.saveTaskForm=function(){},t.prototype.onRefreshClicked=function(){this.processDefinitionId?(this.visibilityService.cleanProcessVariable(),this.getStartFormDefinition(this.processDefinitionId)):this.processId&&(this.visibilityService.cleanProcessVariable(),this.loadStartForm(this.processId))},t.prototype.completeTaskForm=function(t){this.outcomeClick.emit(t)},t.decorators=[{type:u.Component,args:[{selector:"adf-start-form",template:'<div class="adf-start-form-container" *ngIf="hasForm()">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h2 *ngIf="isTitleEnabled()" class="mdl-card__title-text">{{form.taskName}}</h2>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf="form.hasTabs()">\n                <tabs-widget [tabs]="form.tabs" (formTabChanged)="checkVisibility($event);"></tabs-widget>\n            </div>\n\n            <div *ngIf="!form.hasTabs() && form.hasFields()">\n                <div *ngFor="let field of form.fields">\n                    <adf-form-field [field]="field.field"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-content class="adf-start-form-actions" *ngIf="showOutcomeButtons && form.hasOutcomes()"\n                          #outcomesContainer>\n            <ng-content select="[adf-form-custom-button], [form-custom-button]"></ng-content>\n\n            <button *ngFor="let outcome of form.outcomes"\n                    mat-button\n                    [attr.data-automation-id]="\'adf-form-\' + outcome.name  | lowercase"\n                    [disabled]="!isOutcomeButtonEnabled(outcome)"\n                    [class.mdl-button--colored]="!outcome.isSystem"\n                    [class.adf-form-hide-button]="!isOutcomeButtonVisible(outcome, form.readOnly)"\n                    (click)="onOutcomeClicked(outcome)">\n                {{ outcome.name | uppercase | translate | uppercase }}\n            </button>\n        </mat-card-content>\n        <mat-card-actions *ngIf="showRefreshButton">\n            <button mat-button\n                    (click)="onRefreshClicked()">\n                <mat-icon>refresh</mat-icon>\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n',encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[{type:m.FormService},{type:m.WidgetVisibilityService},{type:m.FormRenderingService}]},t.propDecorators={processDefinitionId:[{type:u.Input}],processId:[{type:u.Input}],showOutcomeButtons:[{type:u.Input}],showRefreshButton:[{type:u.Input}],readOnlyForm:[{type:u.Input}],outcomeClick:[{type:u.Output}],formContentClicked:[{type:u.Output}],outcomesContainer:[{type:u.ViewChild,args:["outcomesContainer",{}]}]},t}(kt),Ft=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[m.CoreModule.forChild(),ct],declarations:[kt,Ct],exports:[kt,Ct]}]}],t}(),bt=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[l.CommonModule,c.FlexLayoutModule,ct,p.FormsModule,Ft,p.ReactiveFormsModule,m.CoreModule.forChild(),St,pt,Et],declarations:[q,Y,K,H,W,j,G,X,Q,Z],exports:[q,Y,K,H,W,j,G,X,Q,Z]}]}],t}(),Lt=function(){function t(t,e,n){var i=this;this.activitiProcess=t,this.logService=e,this.dialog=n,this.showRefreshButton=!0,this.error=new u.EventEmitter,this.activeTasks=[],this.completedTasks=[],this.taskClick=new u.EventEmitter,this.task$=new d.Observable(function(t){return i.taskObserver=t}).pipe(a.share()),this.completedTask$=new d.Observable(function(t){return i.completedTaskObserver=t}).pipe(a.share())}return t.prototype.ngOnInit=function(){var e=this;this.task$.subscribe(function(t){e.activeTasks.push(t)}),this.completedTask$.subscribe(function(t){e.completedTasks.push(t)})},t.prototype.ngOnChanges=function(t){var e=t.processInstanceDetails;e&&e.currentValue&&this.load(e.currentValue.id)},t.prototype.load=function(t){this.loadActive(t),this.loadCompleted(t)},t.prototype.loadActive=function(t){var e=this;this.activeTasks=[],t?this.activitiProcess.getProcessTasks(t,null).subscribe(function(t){t.forEach(function(t){e.taskObserver.next(t)})},function(t){e.error.emit(t)}):this.activeTasks=[]},t.prototype.loadCompleted=function(t){var e=this;this.completedTasks=[],t?this.activitiProcess.getProcessTasks(t,"completed").subscribe(function(t){t.forEach(function(t){e.completedTaskObserver.next(t)})},function(t){e.error.emit(t)}):this.completedTasks=[]},t.prototype.hasStartFormDefined=function(){return this.processInstanceDetails&&!0===this.processInstanceDetails.startFormDefined},t.prototype.getUserFullName=function(t){return t?(t.firstName&&"null"!==t.firstName?t.firstName+" ":"")+t.lastName:"Nobody"},t.prototype.getFormatDate=function(t,e){var n=new l.DatePipe("en-US");try{return n.transform(t,e)}catch(i){this.logService.error("ProcessListInstanceTask: error parsing date "+t+" to format "+e)}},t.prototype.clickTask=function(t,e){var n=new it(e);this.taskClick.emit(n)},t.prototype.clickStartTask=function(){this.processId=this.processInstanceDetails.id,this.showStartDialog()},t.prototype.showStartDialog=function(){this.dialog.open(this.startDialog,{height:"500px",width:"700px"})},t.prototype.closeStartDialog=function(){this.dialog.closeAll()},t.prototype.onRefreshClicked=function(){this.load(this.processInstanceDetails.id)},t.prototype.onFormContentClick=function(){this.closeStartDialog()},t.decorators=[{type:u.Component,args:[{selector:"adf-process-instance-tasks",template:'<div  *ngIf="showRefreshButton" class="process-tasks-refresh" >\n    <button mat-icon-button (click)="onRefreshClicked()">\n        <mat-icon class="md-24" aria-label="Refresh">refresh</mat-icon>\n    </button>\n</div>\n\n\x3c!-- ACTIVE FORM --\x3e\n\n<mat-chip-list>\n    <span class="adf-chip-label">{{ \'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE\'|translate }}</span>\n    <mat-chip class="adf-process-badge" color="accent" selected="true">{{activeTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class="menu-container" *ngIf="activeTasks?.length > 0" data-automation-id="active-tasks">\n    <mat-list>\n        <mat-list-item class="process-tasks__task-item" *ngFor="let task of activeTasks" (click)="clickTask($event, task)">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{task.name || \'Nameless task\'}}</h3>\n                <span matLine>\n                    {{ \'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE\' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, \'mediumDate\') } }}\n                </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n\x3c!-- START FORM --\x3e\n\n<div *ngIf="activeTasks?.length === 0" data-automation-id="active-tasks-none" class="no-results">\n    {{ \'ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE\' | translate }}\n</div>\n\n<div *ngIf="hasStartFormDefined()">\n    <span class="adf-activiti-label">{{ \'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM\'|translate }}</span>\n\n    \x3c!--IF START TASK COMPLETED --\x3e\n    <div class="menu-container">\n        <mat-list>\n            <mat-list-item class="process-tasks__task-item" (click)="clickStartTask()">\n                <mat-icon mat-list-icon>assignment</mat-icon>\n                <h3 matLine>{{ \'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM\'|translate }}</h3>\n                <span matLine>\n                    {{ \'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE\' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, \'mediumDate\') } }}\n                </span>\n            </mat-list-item>\n        </mat-list>\n    </div>\n\n</div>\n\n\x3c!-- COMPLETED FORM --\x3e\n<mat-chip-list>\n        <span class="adf-chip-label">{{ \'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED\'|translate }}</span>\n        <mat-chip class="adf-process-badge" color="accent" selected="true">{{completedTasks?.length}}</mat-chip>\n</mat-chip-list>\n\n<div class="menu-container" *ngIf="completedTasks?.length > 0" data-automation-id="completed-tasks">\n    <mat-list>\n        <mat-list-item class="process-tasks__task-item" *ngFor="let task of completedTasks" (click)="clickTask($event, task)">\n            <mat-icon mat-list-icon>assignment</mat-icon>\n            <h3 matLine>{{task.name || \'Nameless task\'}}</h3>\n            <span matLine>\n                {{ \'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE\' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, \'mediumDate\') } }}\n            </span>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<div *ngIf="completedTasks?.length === 0" data-automation-id="completed-tasks-none" class="no-results">\n    {{ \'ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED\' | translate }}\n</div>\n\n<ng-template *ngIf="hasStartFormDefined()" #startDialog>\n    <div id="adf-start-process-dialog" class="adf-start-process-dialog">\n        <h4 matDialogTitle>{{ \'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM\'|translate }}</h4>\n        <div mat-dialog-content class="adf-start-process-dialog-content">\n            <adf-start-form [processId]="processId"\n                                 [showRefreshButton]="false" [readOnlyForm]="true"\n                                 (formContentClicked)=\'onFormContentClick()\'>\n            </adf-start-form>\n        </div>\n        <div mat-dialog-actions class="adf-start-process-dialog-actions">\n            <button mat-button type="button" (click)="closeStartDialog()">{{ \'ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE\' | translate }}</button>\n        </div>\n    </div>\n</ng-template>\n',styles:[":host{width:100%}.activiti-label{font-weight:bolder;vertical-align:top}.adf-process-badge{pointer-events:none;outline:0}.adf-chip-label{position:relative;top:5px;margin-right:8px;font-weight:700}.menu-container{margin-bottom:32px}.activiti-label+.icon{position:relative;top:-2px}.task-details-dialog{position:fixed;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);width:40%}.process-tasks-refresh{float:right}.adf-start-process-dialog{width:100%;height:100%;display:flex;flex-direction:column}.adf-start-process-dialog-content{flex-grow:1}.adf-start-process-dialog-actions{display:flex;justify-content:flex-end}.no-results{margin-left:9px;font-size:14px;font-weight:400;letter-spacing:0;line-height:18px;color:rgba(0,0,0,.54);display:block;padding:12px}.process-tasks__task-item{cursor:pointer}"]}]}],t.ctorParameters=function(){return[{type:D},{type:m.LogService},{type:o.MatDialog}]},t.propDecorators={processInstanceDetails:[{type:u.Input}],showRefreshButton:[{type:u.Input}],error:[{type:u.Output}],startDialog:[{type:u.ViewChild,args:["startDialog"]}],taskDetails:[{type:u.ViewChild,args:["taskDetails"]}],taskClick:[{type:u.Output}]},t}(),_t={"default":[{key:"name",type:"text",title:"ADF_PROCESS_LIST.PROPERTIES.NAME",sortable:!0},{key:"created",type:"text",title:"ADF_PROCESS_LIST.PROPERTIES.CREATED",cssClass:"hidden",sortable:!0}]},wt=function(o){function s(t,e,n){var i=o.call(this,n,s.PRESET_KEY,_t)||this;return i.processService=t,i.userPreferences=e,i.FORMAT_DATE="ll",i.page=0,i.size=m.PaginationComponent.DEFAULT_PAGINATION.maxItems,i.multiselect=!1,i.selectionMode="single",i.selectFirstRow=!0,i.rowClick=new u.EventEmitter,i.success=new u.EventEmitter,i.error=new u.EventEmitter,i.isLoading=!0,i.rows=[],i.sorting=["created","desc"],i.size=i.userPreferences.paginationSize,i.pagination=new d.BehaviorSubject({maxItems:i.size,skipCount:0,totalItems:0}),i}return b(s,o),s.prototype.ngAfterContentInit=function(){this.createDatatableSchema(),this.data&&0===this.data.getColumns().length&&this.data.setColumns(this.columns),null!=this.appId&&this.reload()},s.prototype.ngOnChanges=function(t){this.isPropertyChanged(t)&&(this.isSortChanged(t)&&(this.sorting=this.sort?this.sort.split("-"):this.sorting),this.reload())},s.prototype.isSortChanged=function(t){var e=t.sort;return e&&e.currentValue&&e.currentValue!==e.previousValue},s.prototype.isPropertyChanged=function(t){var e=!1,n=t.appId,i=t.processDefinitionId,o=t.processInstanceId,s=t.state,r=t.sort,a=t.page,c=t.size;return n&&n.currentValue?e=!0:i?e=!0:o?e=!0:s&&s.currentValue?e=!0:r&&r.currentValue?e=!0:a&&a.currentValue!==a.previousValue?e=!0:c&&c.currentValue!==c.previousValue&&(e=!0),e},s.prototype.reload=function(){this.requestNode=this.createRequestNode(),this.load(this.requestNode)},s.prototype.load=function(t){var e=this;this.isLoading=!0,this.processService.getProcesses(t).subscribe(function(t){e.rows=e.optimizeProcessDetails(t.data),e.selectFirst(),e.success.emit(t),e.isLoading=!1,e.pagination.next({count:t.data.length,maxItems:e.size,skipCount:e.page*e.size,totalItems:t.total})},function(t){e.error.emit(t),e.isLoading=!1})},s.prototype.selectFirst=function(){if(this.selectFirstRow)if(this.isListEmpty())this.currentInstanceId=null;else{var t=this.rows[0];t.isSelected=!0,this.currentInstanceId=t.id}},s.prototype.getCurrentId=function(){return this.currentInstanceId},s.prototype.isListEmpty=function(){return!this.rows||0===this.rows.length},s.prototype.onRowClick=function(t){var e=t;this.currentInstanceId=e.value.getValue("id"),this.rowClick.emit(this.currentInstanceId)},s.prototype.onRowKeyUp=function(t){"Enter"===t.detail.keyboardEvent.key&&(t.preventDefault(),this.currentInstanceId=t.detail.row.getValue("id"),this.rowClick.emit(this.currentInstanceId))},s.prototype.optimizeProcessDetails=function(t){var e=this;return t=t.map(function(t){return t.name=e.getProcessNameOrDescription(t,"medium"),t.started&&(t.started=r(t.started).format(e.FORMAT_DATE)),t})},s.prototype.getProcessNameOrDescription=function(t,e){var n="";return t&&(n=t.name||t.processDefinitionName+" - "+this.getFormatDate(t.started,e)),n},s.prototype.getFormatDate=function(t,e){var n=new l.DatePipe("en-US");try{return n.transform(t,e)}catch(i){return""}},s.prototype.createRequestNode=function(){var t={appDefinitionId:this.appId,processDefinitionId:this.processDefinitionId,processInstanceId:this.processInstanceId,state:this.state,sort:this.sort,page:this.page,size:this.size,start:0};return new h(t)},s.prototype.updatePagination=function(t){var e=t.maxItems||t.skipCount;this.size=t.maxItems,this.page=this.currentPage(t.skipCount,t.maxItems),e&&this.reload()},s.prototype.currentPage=function(t,e){return t&&e?Math.floor(t/e):0},s.PRESET_KEY="adf-process-list.presets",s.decorators=[{type:u.Component,args:[{selector:"adf-process-instance-list",template:'<adf-datatable #dataTable\n    [data]="data"\n    [rows]="rows"\n    [columns]="columns"\n    [sorting]="sorting"\n    [loading]="isLoading"\n    [selectionMode]="selectionMode"\n    [multiselect]="multiselect"\n    (rowClick)="onRowClick($event)"\n    (row-keyup)="onRowKeyUp($event)">\n    <adf-loading-content-template>\n        <ng-template>\n            \x3c!--Add your custom loading template here--\x3e\n            <mat-progress-spinner\n                *ngIf="!customLoadingContent"\n                class="adf-process-list-loading-margin"\n                [color]="\'primary\'"\n                [mode]="\'indeterminate\'">\n            </mat-progress-spinner>\n            <ng-content select="adf-custom-loading-content-template"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n    <adf-no-content-template>\n        <ng-template>\n                <adf-empty-content *ngIf="!customEmptyContent"\n                    icon="assessment"\n                    [title]="(requestNode ? \'ADF_PROCESS_LIST.LIST.TITLE\' : \'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE\') | translate "\n                    [subtitle]="\'ADF_PROCESS_LIST.LIST.SUBTITLE\'| translate">\n                </adf-empty-content>\n            <ng-content select="adf-custom-empty-content-template"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n</adf-datatable>\n',styles:[".adf-process-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}.no-content-message{font-size:16px;font-weight:700;text-align:center;opacity:.54;color:#000}"]}]}],s.ctorParameters=function(){return[{type:D},{type:m.UserPreferencesService},{type:m.AppConfigService}]},s.propDecorators={customEmptyContent:[{type:u.ContentChild,args:[m.CustomEmptyContentTemplateDirective]}],customLoadingContent:[{type:u.ContentChild,args:[m.CustomLoadingContentTemplateDirective]}],appId:[{type:u.Input}],processDefinitionId:[{type:u.Input}],processInstanceId:[{type:u.Input}],state:[{type:u.Input}],sort:[{type:u.Input}],page:[{type:u.Input}],size:[{type:u.Input}],data:[{type:u.Input}],multiselect:[{type:u.Input}],selectionMode:[{type:u.Input}],selectFirstRow:[{type:u.Input}],rowClick:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}]},s}(m.DataTableSchema),Pt=function(){function t(t,e,n){this.activitiProcess=t,this.activitiContentService=e,this.appConfig=n,this.MAX_LENGTH=255,this.name="",this.showSelectProcessDropdown=!0,this.processFilterSelector=!0,this.start=new u.EventEmitter,this.cancel=new u.EventEmitter,this.error=new u.EventEmitter,this.processDefinitions=[],this.selectedProcessDef=new S,this.errorMessageId="",this.maxProcessNameLength=this.MAX_LENGTH}return t.prototype.ngOnInit=function(){var e=this;this.processNameInput=new p.FormControl(this.name,[p.Validators.required,p.Validators.maxLength(this.maxProcessNameLength)]),this.processDefinitionInput=new p.FormControl,this.loadStartProcess(),this.processNameInput.valueChanges.subscribe(function(t){return e.name=t}),this.filteredProcesses=this.processDefinitionInput.valueChanges.pipe(a.map(function(t){return e._filter(t)}))},t.prototype.ngOnChanges=function(t){t.values&&t.values.currentValue&&this.moveNodeFromCStoPS(),t.appId&&t.appId.currentValue&&(this.appId=t.appId.currentValue),this.loadStartProcess()},t.prototype._filter=function(t){if(null!==t&&t!==undefined){var e=t.toLowerCase(),n=this.processDefinitions.filter(function(t){return t.name.toLowerCase().includes(e)});return this.processFilterSelector&&(this.selectedProcessDef=this.getSelectedProcess(e)),n}},t.prototype.getSelectedProcess=function(e){var t=this.processDefinitions.find(function(t){return t.name.toLowerCase()===e});return t||(t=new S),t},t.prototype.loadStartProcess=function(){var n=this;this.resetSelectedProcessDefinition(),this.resetErrorMessage(),this.activitiProcess.getProcessDefinitions(this.appId).subscribe(function(t){if(n.processDefinitions=t,!n.isProcessDefinitionsEmpty()){if(1===n.processDefinitions.length&&(n.selectedProcessDef=n.processDefinitions[0]),n.processDefinitionName){var e=n.processDefinitions.find(function(t){return t.name===n.processDefinitionName});e&&(n.selectedProcessDef=e)}n.processDefinitionInput.setValue(n.selectedProcessDef.name)}},function(){n.errorMessageId="ADF_PROCESS_LIST.START_PROCESS.ERROR.LOAD_PROCESS_DEFS"})},t.prototype.isProcessDefinitionsEmpty=function(){return 0===this.processDefinitions.length},t.prototype.getAlfrescoRepositoryName=function(){var t=this.appConfig.get(m.AppConfigValues.ALFRESCO_REPOSITORY_NAME);return t||(t="alfresco-1"),t+"Alfresco"},t.prototype.moveNodeFromCStoPS=function(){var n=this,i=this.getAlfrescoRepositoryName(),t=function(e){if(o.values.hasOwnProperty(e)){var t=o.values[e];t.isFile&&o.activitiContentService.applyAlfrescoNode(t,null,i).subscribe(function(t){n.values[e]=[t]})}},o=this;for(var e in this.values)t(e)},t.prototype.startProcess=function(t){var e=this;if(this.selectedProcessDef&&this.selectedProcessDef.id&&this.name){this.resetErrorMessage();var n=this.startForm?this.startForm.form.values:undefined;this.activitiProcess.startProcess(this.selectedProcessDef.id,this.name,t,n,this.variables).subscribe(function(t){e.name="",e.start.emit(t)},function(t){e.errorMessageId="ADF_PROCESS_LIST.START_PROCESS.ERROR.START",e.error.error(t)})}},t.prototype.cancelStartProcess=function(){this.cancel.emit()},t.prototype.hasStartForm=function(){return this.selectedProcessDef&&this.selectedProcessDef.hasStartForm},t.prototype.isProcessDefinitionEmpty=function(){return this.processDefinitions&&0<this.processDefinitions.length||this.errorMessageId},t.prototype.isStartFormMissingOrValid=function(){return!this.startForm||this.startForm.form&&this.startForm.form.isValid},t.prototype.validateForm=function(){return this.selectedProcessDef&&this.selectedProcessDef.id&&this.processNameInput.valid&&this.isStartFormMissingOrValid()},t.prototype.resetSelectedProcessDefinition=function(){this.selectedProcessDef=new S},t.prototype.resetErrorMessage=function(){this.errorMessageId=""},t.prototype.hasErrorMessage=function(){return 0===this.processDefinitions.length&&!this.errorMessageId},t.prototype.onOutcomeClick=function(t){this.startProcess(t)},t.prototype.reset=function(){this.resetSelectedProcessDefinition(),this.name="",this.startForm&&(this.startForm.data={}),this.resetErrorMessage()},t.prototype.hasProcessName=function(){return!!this.name},t.prototype.displayFn=function(t){if(t){var e=t;return"string"!=typeof t&&(e=t.name),e}},t.prototype.displayDropdown=function(t){t.stopPropagation(),this.inputAutocomplete.panelOpen?this.inputAutocomplete.closePanel():(this.processDefinitionInput.setValue(""),this.inputAutocomplete.openPanel())},Object.defineProperty(t.prototype,"nameController",{get:function(){return this.processNameInput},enumerable:!0,configurable:!0}),t.decorators=[{type:u.Component,args:[{selector:"adf-start-process",template:'<mat-card class="adf-start-process">\n    <mat-card-title>{{\'ADF_PROCESS_LIST.START_PROCESS.FORM.TITLE\' | translate}}\n    </mat-card-title>\n    <mat-card-content *ngIf="isProcessDefinitionEmpty()">\n        <mat-card-subtitle id="error-message" *ngIf="errorMessageId">\n            {{errorMessageId|translate}}\n        </mat-card-subtitle>\n        <mat-form-field class="adf-process-input-container">\n            <input\n                matInput\n                placeholder="{{\'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME\' | translate}}"\n                [formControl]="processNameInput"\n                id="processName"\n                required/>\n                <mat-error *ngIf="nameController.hasError(\'maxlength\')">\n                    {{ \'ADF_PROCESS_LIST.START_PROCESS.ERROR.MAXIMUM_LENGTH\' | translate : { characters : maxProcessNameLength } }}\n                </mat-error>\n        </mat-form-field>\n        <mat-form-field class="adf-process-input-container">\n            <input\n                type="text"\n                placeholder="{{\'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE\'|translate}}"\n                matInput\n                [formControl]="processDefinitionInput"\n                [matAutocomplete]="auto"\n                id="processDefinitionName"\n                #inputAutocomplete>\n            <div class="adf-process-input-autocomplete">\n                <mat-autocomplete\n                    #auto="matAutocomplete"\n                    id="processDefinitionOptions"\n                    [displayWith]="displayFn">\n                    <mat-option *ngFor="let processDef of filteredProcesses | async" [value]="processDef.name">\n                        {{ processDef.name }}\n                    </mat-option>\n                </mat-autocomplete>\n                <button\n                    id="adf-select-process-dropdown"\n                    *ngIf="showSelectProcessDropdown"\n                    mat-icon-button\n                    (click)="displayDropdown($event)">\n                    <mat-icon>arrow_drop_down</mat-icon>\n                </button>\n            </div>\n        </mat-form-field>\n\n        <adf-start-form\n            #startForm\n            *ngIf="hasStartForm()"\n            [data]="values"\n            [disableStartProcessButton]="!hasProcessName()"\n            [processDefinitionId]="selectedProcessDef.id"\n            (outcomeClick)="onOutcomeClick($event)"\n            [showRefreshButton]="false">\n            <button\n                adf-form-custom-button\n                mat-button\n                (click)="cancelStartProcess()"\n                id="cancel_process">\n                {{\'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL\'| translate | uppercase}}\n            </button>\n        </adf-start-form>\n    </mat-card-content>\n    <mat-card-content *ngIf="hasErrorMessage()">\n        <mat-card-subtitle class="error-message" id="no-process-message">\n            {{\'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS\' | translate | uppercase}}\n        </mat-card-subtitle>\n    </mat-card-content>\n    <mat-card-actions *ngIf="!hasStartForm()">\n        <button\n            mat-button\n            *ngIf="!hasStartForm()"\n            (click)="cancelStartProcess()"\n            id="cancel_process">\n            {{\'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL\'| translate | uppercase}}\n        </button>\n        <button\n            color="primary"\n            mat-button\n            *ngIf="!hasStartForm()"\n            [disabled]="!validateForm()"\n            (click)="startProcess()"\n            data-automation-id="btn-start"\n            id="button-start"\n            class="btn-start">\n            {{\'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START\' | translate | uppercase}}\n        </button>\n    </mat-card-actions>\n</mat-card>\n',encapsulation:u.ViewEncapsulation.None,styles:[".adf-start-process{width:66%;margin-left:auto;margin-right:auto;margin-top:10px}.adf-start-process .mat-select-trigger{font-size:14px!important}.adf-start-process mat-form-field{width:100%}.adf-start-process mat-select{width:100%;padding:16px 0 0}.adf-start-process mat-card-actions{text-align:right}.adf-start-process mat-card-actions .mat-button{text-transform:uppercase!important}.adf-process-input-container mat-form-field{width:100%}.adf-process-input-autocomplete{display:flex}.adf-process-input-autocomplete button{position:absolute;right:-14px;top:0}.adf-start-form-container .mat-card{box-shadow:none!important;padding:0!important}.adf-start-form-actions{text-align:right!important}@media (max-width:600px){.adf-start-process{width:90%;margin-left:auto;margin-right:auto}}"]}]}],t.ctorParameters=function(){return[{type:D},{type:m.ActivitiContentService},{type:m.AppConfigService}]},t.propDecorators={appId:[{type:u.Input}],processDefinitionName:[{type:u.Input}],variables:[{type:u.Input}],values:[{type:u.Input}],name:[{type:u.Input}],showSelectProcessDropdown:[{type:u.Input}],processFilterSelector:[{type:u.Input}],start:[{type:u.Output}],cancel:[{type:u.Output}],error:[{type:u.Output}],startForm:[{type:u.ViewChild,args:["startForm"]}],inputAutocomplete:[{type:u.ViewChild,args:[o.MatAutocompleteTrigger]}]},t}(),Ot=function oe(t){this.processDefinitionId=t&&t.processDefinitionId||null,this.appDefinitionId=t&&t.appDefinitionId||null,this.state=t&&t.state||null,this.sort=t&&t.sort||null,this.page=t&&t.page||0,this.size=t&&t.size||25},Mt=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[l.CommonModule,ct,c.FlexLayoutModule,p.FormsModule,p.ReactiveFormsModule,m.CoreModule.forChild(),bt,St,Et,pt,Ft],declarations:[wt,v,E,k,C,Lt,Pt],exports:[wt,v,E,k,C,Lt,Pt]}]}],t}(),Rt=function(){function i(t,e){var n=this;this.appsProcessService=t,this.translationService=e,this.layoutType=i.LAYOUT_GRID,this.appClick=new u.EventEmitter,this.error=new u.EventEmitter,this.appList=[],this.loading=!1,this.hasEmptyCustomContentTemplate=!1,this.apps$=new d.Observable(function(t){return n.appsObserver=t}).pipe(a.share())}return i.prototype.ngOnInit=function(){var e=this;this.isValidType()||this.setDefaultLayoutType(),this.apps$.subscribe(function(t){e.appList.push(t)}),this.iconsMDL=new y,this.load()},i.prototype.ngAfterContentInit=function(){this.emptyCustomContent&&(this.hasEmptyCustomContentTemplate=!0)},i.prototype.load=function(){var e=this;this.loading=!0,this.appsProcessService.getDeployedApplications().subscribe(function(t){e.filterApps(t).forEach(function(t){e.isDefaultApp(t)?(t.theme=i.DEFAULT_TASKS_APP_THEME,t.icon=i.DEFAULT_TASKS_APP_ICON,e.appsObserver.next(t)):t.deploymentId&&e.appsObserver.next(t),e.loading=!1})},function(t){e.error.emit(t),e.loading=!1})},i.prototype.isDefaultApp=function(t){return t.defaultAppId===i.DEFAULT_TASKS_APP},i.prototype.getAppName=function(t){return this.isDefaultApp(t)?this.translationService.get(i.DEFAULT_TASKS_APP_NAME):d.of(t.name)},i.prototype.selectApp=function(t){this.currentApp=t,this.appClick.emit(t)},i.prototype.isSelected=function(t){return this.currentApp!==undefined&&t===this.currentApp.id},i.prototype.filterApps=function(t){var n=this,i=[];return this.filtersAppId?(t.filter(function(e){n.filtersAppId.forEach(function(t){e.defaultAppId!==t.defaultAppId&&e.deploymentId!==t.deploymentId&&e.name!==t.name&&e.id!==t.id&&e.modelId!==t.modelId&&e.tenantId!==t.tenantId||i.push(e)})}),i):t},i.prototype.isValidType=function(){return!(!this.layoutType||this.layoutType!==i.LAYOUT_LIST&&this.layoutType!==i.LAYOUT_GRID)},i.prototype.setDefaultLayoutType=function(){this.layoutType=i.LAYOUT_GRID},i.prototype.isList=function(){return this.layoutType===i.LAYOUT_LIST},i.prototype.isGrid=function(){return this.layoutType===i.LAYOUT_GRID},i.prototype.isEmpty=function(){return 0===this.appList.length},i.prototype.isLoading=function(){return this.loading},i.prototype.getTheme=function(t){return t.theme?t.theme:""},i.prototype.getBackgroundIcon=function(t){return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(t.icon)},i.LAYOUT_LIST="LIST",i.LAYOUT_GRID="GRID",i.DEFAULT_TASKS_APP="tasks",i.DEFAULT_TASKS_APP_NAME="ADF_TASK_LIST.APPS.TASK_APP_NAME",i.DEFAULT_TASKS_APP_THEME="theme-2",i.DEFAULT_TASKS_APP_ICON="glyphicon-asterisk",i.DEFAULT_TASKS_APP_MATERIAL_ICON="favorite_border",i.decorators=[{type:u.Component,args:[{selector:"adf-apps",template:'<div class="menu-container" *ngIf="!isEmpty()">\n    <mat-list *ngIf="isList()" class="adf-app-list">\n        <mat-list-item class="adf-app-list-item" (click)="selectApp(app)" (keyup.enter)="selectApp(app)" *ngFor="let app of appList" tabindex="0" role="button" title="{{app.name}}">\n            <mat-icon matListIcon>touch_app</mat-icon>\n            <span matLine>{{getAppName(app) | async}}</span>\n        </mat-list-item>\n    </mat-list>\n    <div fxLayout="row wrap" *ngIf="isGrid()" class="adf-app-listgrid">\n        <div *ngFor="let app of appList"\n            class="adf-app-listgrid-item"\n            fxFlex="33.33333%" fxFlex.lt-md="50%" fxFlex.lt-sm="100%">\n                <mat-card tabindex="0"\n                    fxLayout="column"\n                    role="button"\n                    class="adf-app-listgrid-item-card"\n                    title="{{getAppName(app) | async}}"\n                    [ngClass]="[getTheme(app)]"\n                    (click)="selectApp(app)"\n                    (keyup.enter)="selectApp(app)">\n                        <div class="adf-app-listgrid-item-card-logo">\n                            <mat-icon class="adf-app-listgrid-item-card-logo-icon">{{getBackgroundIcon(app)}}</mat-icon>\n                        </div>\n                        <div mat-card-title class="adf-app-listgrid-item-card-title">\n                            <h1>{{getAppName(app) | async}}</h1>\n                        </div>\n                        <mat-card-subtitle class="adf-app-listgrid-item-card-subtitle" fxFlex="1 0 auto">\n                            <div class="adf-line-clamp">{{app.description}}</div>\n                        </mat-card-subtitle>\n\n                        <mat-card-actions class="adf-app-listgrid-item-card-actions">\n                            <mat-icon class="adf-app-listgrid-item-card-actions-icon" *ngIf="isSelected(app.id)">done</mat-icon>\n                        </mat-card-actions>\n                </mat-card>\n        </div>\n    </div>\n</div>\n\n<ng-container *ngIf="isLoading(); else empty">\n    <div class="adf-app-list-spinner">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-container>\n\n<ng-template #empty>\n    <div class="adf-app-list-empty" *ngIf="isEmpty()">\n        <ng-content select="adf-custom-empty-content" *ngIf="hasEmptyCustomContentTemplate; else defaultEmptyTemplate" class="adf-custom-empty-template"></ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content\n                icon="apps"\n                [title]="\'ADF_TASK_LIST.APPS.TITLE\' | translate"\n                [subtitle]="\'ADF_TASK_LIST.APPS.SUBTITLE\' | translate">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n',styles:[""]}]}],i.ctorParameters=function(){return[{type:m.AppsProcessService},{type:m.TranslationService}]},i.propDecorators={emptyCustomContent:[{type:u.ContentChild,args:[m.CustomEmptyContentTemplateDirective]}],layoutType:[{type:u.Input}],filtersAppId:[{type:u.Input}],appClick:[{type:u.Output}],error:[{type:u.Output}]},i}(),Nt=function(){function t(t,e,n){var i=this;this.appsProcessService=t,this.dialogRef=e,this.data=n,this.appsProcessService.getDeployedApplications().subscribe(function(t){i.processApps=t.filter(function(t){return t.id})})}return t.prototype.onStart=function(){this.dialogRef.close(this.selectedProcess)},t.decorators=[{type:u.Component,args:[{selector:"adf-select-apps-dialog",template:'<header mat-dialog-title id="adf-selet-app-dialog-title">{{\'APP.DIALOG.TITLE\' | translate}}</header>\n<section mat-dialog-content>\n\n    <mat-select id="adf-selet-app-dialog-dropdown" placeholder="{{\'APP.DIALOG.LIST\' | translate}}" [(value)]="selectedProcess" >\n        <mat-option *ngFor="let currentProcessApp of processApps" [value]="currentProcessApp">\n            {{ currentProcessApp.name }}\n        </mat-option>\n    </mat-select>\n\n</section>\n<footer mat-dialog-actions fxLayout="row" fxLayoutAlign="end center">\n    <button mat-button (click)="onStart()">{{\'APP.DIALOG.START\' | translate}}</button>\n</footer>\n'}]}],t.ctorParameters=function(){return[{type:m.AppsProcessService},{type:o.MatDialogRef},{type:undefined,decorators:[{type:u.Inject,args:[o.MAT_DIALOG_DATA]}]}]},t}(),xt=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[l.CommonModule,ct,c.FlexLayoutModule,m.CoreModule.forChild()],declarations:[Rt,Nt],exports:[Rt,Nt],entryComponents:[Nt]}]}],t}(),Ut=function(){function t(t,e,n,i){this.activitiContentService=t,this.contentService=e,this.thumbnailService=n,this.ngZone=i,this.disabled=!1,this.attachmentClick=new u.EventEmitter,this.success=new u.EventEmitter,this.error=new u.EventEmitter,this.hasCustomTemplate=!1,this.attachments=[],this.isLoading=!1}return t.prototype.ngOnChanges=function(t){t.taskId&&t.taskId.currentValue&&this.loadAttachmentsByTaskId(t.taskId.currentValue)},t.prototype.ngAfterContentInit=function(){this.emptyTemplate&&(this.hasCustomTemplate=!0)},t.prototype.reset=function(){this.attachments=[]},t.prototype.hasCustomEmptyTemplate=function(){return!!this.emptyTemplate},t.prototype.reload=function(){var t=this;this.ngZone.run(function(){t.loadAttachmentsByTaskId(t.taskId)})},t.prototype.add=function(t){var e=this;this.ngZone.run(function(){e.attachments.push({id:t.id,name:t.name,created:t.created,createdBy:t.createdBy.firstName+" "+t.createdBy.lastName,icon:e.thumbnailService.getMimeTypeIcon(t.mimeType)})})},t.prototype.loadAttachmentsByTaskId=function(t){var n=this;if(t){this.isLoading=!0,this.reset();this.activitiContentService.getTaskRelatedContent(t,"true").subscribe(function(t){var e=[];t.data.forEach(function(t){e.push({id:t.id,name:t.name,created:t.created,createdBy:t.createdBy.firstName+" "+t.createdBy.lastName,icon:n.thumbnailService.getMimeTypeIcon(t.mimeType)})}),n.attachments=e,n.success.emit(n.attachments),n.isLoading=!1},function(t){n.error.emit(t),n.isLoading=!1})}},t.prototype.deleteAttachmentById=function(e){var n=this;e&&this.activitiContentService.deleteRelatedContent(e).subscribe(function(t){n.attachments=n.attachments.filter(function(t){return t.id!==e})},function(t){n.error.emit(t)})},t.prototype.isEmpty=function(){return this.attachments&&0===this.attachments.length},t.prototype.onShowRowActionsMenu=function(t){t.value.actions=[{title:"ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT",name:"view"},{title:"ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT",name:"download"}],this.disabled||t.value.actions.splice(1,0,{title:"ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT",name:"remove"})},t.prototype.onExecuteRowAction=function(t){var e=t.value,n=e.action;"view"===n.name?this.emitDocumentContent(e.row.obj):"remove"===n.name?this.deleteAttachmentById(e.row.obj.id):"download"===n.name&&this.downloadContent(e.row.obj)},t.prototype.openContent=function(t){var e=t.value.obj;this.emitDocumentContent(e)},t.prototype.emitDocumentContent=function(e){var n=this;this.activitiContentService.getFileRawContent(e.id).subscribe(function(t){e.contentBlob=t,n.attachmentClick.emit(e)},function(t){n.error.emit(t)})},t.prototype.downloadContent=function(e){var n=this;this.activitiContentService.getFileRawContent(e.id).subscribe(function(t){return n.contentService.downloadBlob(t,e.name)},function(t){n.error.emit(t)})},t.prototype.isDisabled=function(){return this.disabled},t.decorators=[{type:u.Component,args:[{selector:"adf-task-attachment-list",template:'<adf-datatable [rows]="attachments"\n               [actions]="true"\n               [loading]="isLoading"\n               (rowDblClick)="openContent($event)"\n               (showRowActionsMenu)="onShowRowActionsMenu($event)"\n               (executeRowAction)="onExecuteRowAction($event)">\n            <adf-no-content-template>\n                <ng-template>\n                    <ng-content *ngIf="hasCustomTemplate; else defaulEmptyList" class="adf-custom-empty-template"></ng-content>\n                    <ng-template #defaulEmptyList>\n                        <adf-empty-list>\n                            <div adf-empty-list-header class="adf-empty-list-header">\n                                {{\'ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER\' | translate}}\n                            </div>\n                        </adf-empty-list>\n                    </ng-template>\n                </ng-template>\n            </adf-no-content-template>\n\n            <data-columns>\n                <data-column key="icon" type="image" srTitle="ADF_TASK_LIST.PROPERTIES.THUMBNAIL" [sortable]="false"></data-column>\n                <data-column key="name" type="text" title="ADF_TASK_LIST.PROPERTIES.NAME" class="adf-full-width adf-ellipsis-cell" [sortable]="true"></data-column>\n                <data-column key="created" type="date" format="shortDate" title="ADF_TASK_LIST.PROPERTIES.CREATED"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                \x3c!--Add your custom loading template here--\x3e\n                    <mat-progress-spinner class="adf-attachment-list-loading-margin" [color]="\'primary\'" [mode]="\'indeterminate\'">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n</adf-datatable>\n',encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[{type:m.ProcessContentService},{type:m.ContentService},{type:m.ThumbnailService},{type:u.NgZone}]},t.propDecorators={emptyTemplate:[{type:u.ContentChild,args:[m.EmptyListComponent]}],taskId:[{type:u.Input}],disabled:[{type:u.Input}],attachmentClick:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}]},t}(),Vt=function(){function t(t,e,n,i){this.activitiContentService=t,this.contentService=e,this.thumbnailService=n,this.ngZone=i,this.disabled=!1,this.attachmentClick=new u.EventEmitter,this.success=new u.EventEmitter,this.error=new u.EventEmitter,this.hasCustomTemplate=!1,this.attachments=[],this.isLoading=!1}return t.prototype.ngOnChanges=function(t){t.processInstanceId&&t.processInstanceId.currentValue&&this.loadAttachmentsByProcessInstanceId(t.processInstanceId.currentValue)},t.prototype.ngAfterContentInit=function(){this.emptyTemplate&&(this.hasCustomTemplate=!0)},t.prototype.reset=function(){this.attachments=[]},t.prototype.reload=function(){var t=this;this.ngZone.run(function(){t.loadAttachmentsByProcessInstanceId(t.processInstanceId)})},t.prototype.hasCustomEmptyTemplate=function(){return!!this.emptyTemplate},t.prototype.add=function(t){var e=this;this.ngZone.run(function(){e.attachments.push({id:t.id,name:t.name,created:t.created,createdBy:t.createdBy.firstName+" "+t.createdBy.lastName,icon:e.thumbnailService.getMimeTypeIcon(t.mimeType)})})},t.prototype.loadAttachmentsByProcessInstanceId=function(t){var e=this;if(t){this.reset(),this.isLoading=!0;this.activitiContentService.getProcessRelatedContent(t,"true").subscribe(function(t){t.data.forEach(function(t){e.attachments.push({id:t.id,name:t.name,created:t.created,createdBy:t.createdBy.firstName+" "+t.createdBy.lastName,icon:e.thumbnailService.getMimeTypeIcon(t.mimeType)})}),e.success.emit(e.attachments),e.isLoading=!1},function(t){e.error.emit(t),e.isLoading=!1})}},t.prototype.deleteAttachmentById=function(e){var n=this;e&&this.activitiContentService.deleteRelatedContent(e).subscribe(function(t){n.attachments=n.attachments.filter(function(t){return t.id!==e})},function(t){n.error.emit(t)})},t.prototype.isEmpty=function(){return this.attachments&&0===this.attachments.length},t.prototype.onShowRowActionsMenu=function(t){t.value.actions=[{title:"ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT",name:"view"},{title:"ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT",name:"download"}],this.disabled||t.value.actions.splice(1,0,{title:"ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT",name:"remove"})},t.prototype.onExecuteRowAction=function(t){var e=t.value,n=e.action;"view"===n.name?this.emitDocumentContent(e.row.obj):"remove"===n.name?this.deleteAttachmentById(e.row.obj.id):"download"===n.name&&this.downloadContent(e.row.obj)},t.prototype.openContent=function(t){var e=t.value.obj;this.emitDocumentContent(e)},t.prototype.emitDocumentContent=function(e){var n=this;this.activitiContentService.getFileRawContent(e.id).subscribe(function(t){e.contentBlob=t,n.attachmentClick.emit(e)},function(t){n.error.emit(t)})},t.prototype.downloadContent=function(e){var n=this;this.activitiContentService.getFileRawContent(e.id).subscribe(function(t){return n.contentService.downloadBlob(t,e.name)},function(t){n.error.emit(t)})},t.prototype.isDisabled=function(){return this.disabled},t.decorators=[{type:u.Component,args:[{selector:"adf-process-attachment-list",template:'<adf-datatable  [rows]="attachments" \n                [actions]="true" \n                [loading]="isLoading" \n                (rowDblClick)="openContent($event)" \n                (showRowActionsMenu)="onShowRowActionsMenu($event)"\n                (executeRowAction)="onExecuteRowAction($event)">\n\n                <adf-no-content-template>\n                    <ng-template>\n                        <ng-content *ngIf="hasCustomTemplate; else defaulEmptyList" class="adf-custom-empty-template"></ng-content>\n                        <ng-template #defaulEmptyList>\n                            <adf-empty-list>\n                                <div adf-empty-list-header class="adf-empty-list-header">\n                                    {{\'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.HEADER\' | translate}}\n                                </div>\n                            </adf-empty-list>\n                        </ng-template>\n                    </ng-template>\n                </adf-no-content-template>\n\n    <data-columns>\n        <data-column key="icon" type="image" srTitle="ADF_PROCESS_LIST.PROPERTIES.THUMBNAIL" [sortable]="false"></data-column>\n        <data-column key="name" type="text" title="{{\'ADF_PROCESS_LIST.PROPERTIES.NAME\' | translate}}" class="adf-full-width adf-ellipsis-cell" [sortable]="true"></data-column>\n        <data-column key="created" type="date" format="shortDate" title="{{\'ADF_PROCESS_LIST.PROPERTIES.CREATED\' | translate}}"></data-column>\n    </data-columns>\n\n    <adf-loading-content-template>\n        <ng-template>\n            \x3c!--Add your custom loading template here--\x3e\n            <mat-progress-spinner class="adf-attachment-list-loading-margin" [color]="\'primary\'" [mode]="\'indeterminate\'">\n            </mat-progress-spinner>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n',encapsulation:u.ViewEncapsulation.None,styles:[""]}]}],t.ctorParameters=function(){return[{type:m.ProcessContentService},{type:m.ContentService},{type:m.ThumbnailService},{type:u.NgZone}]},t.propDecorators={emptyTemplate:[{type:u.ContentChild,args:[m.EmptyListComponent]}],processInstanceId:[{type:u.Input}],disabled:[{type:u.Input}],attachmentClick:[{type:u.Output}],success:[{type:u.Output}],error:[{type:u.Output}]},t}(),Bt=function(){function t(t){this.activitiContentService=t,this.error=new u.EventEmitter,this.success=new u.EventEmitter}return t.prototype.ngOnChanges=function(t){t.processInstanceId&&t.processInstanceId.currentValue&&(this.processInstanceId=t.processInstanceId.currentValue)},t.prototype.onFileUpload=function(t){var e,n,i=this,o=t.detail.files.map(function(t){return t.file});try{for(var s=L(o),r=s.next();!r.done;r=s.next()){var a=r.value;this.activitiContentService.createProcessRelatedContent(this.processInstanceId,a,{isRelatedContent:!0}).subscribe(function(t){i.success.emit(t)},function(t){i.error.emit(t)})}}catch(c){e={error:c}}finally{try{r&&!r.done&&(n=s["return"])&&n.call(s)}finally{if(e)throw e.error}}},t.decorators=[{type:u.Component,args:[{selector:"adf-create-process-attachment",template:'<button\n    id="add_new_process_content_button"\n    color="primary"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class="adf-create-attachment"\n    adf-upload="true"\n    [mode]="[\'click\']"\n    [multiple]="true"\n    (upload-files)="onFileUpload($event)">\n    <mat-icon>add</mat-icon>\n</button>\n',styles:[".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]}]}],t.ctorParameters=function(){return[{type:m.ProcessContentService}]},t.propDecorators={processInstanceId:[{type:u.Input}],error:[{type:u.Output}],success:[{type:u.Output}]},t}(),Kt=function(){function t(t){this.activitiContentService=t,this.error=new u.EventEmitter,this.success=new u.EventEmitter}return t.prototype.ngOnChanges=function(t){t.taskId&&t.taskId.currentValue&&(this.taskId=t.taskId.currentValue)},t.prototype.onFileUpload=function(t){var e,n,i=this,o=t.detail.files.map(function(t){return t.file});try{for(var s=L(o),r=s.next();!r.done;r=s.next()){var a=r.value;this.activitiContentService.createTaskRelatedContent(this.taskId,a,{isRelatedContent:!0}).subscribe(function(t){i.success.emit(t)},function(t){i.error.emit(t)})}}catch(c){e={error:c}}finally{try{r&&!r.done&&(n=s["return"])&&n.call(s)}finally{if(e)throw e.error}}},t.decorators=[{type:u.Component,args:[{selector:"adf-create-task-attachment",template:'<button\n    color="primary"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class="adf-create-attachment"\n    adf-upload="true"\n    [mode]="[\'click\']"\n    [multiple]="true"\n    (upload-files)="onFileUpload($event)">\n    <mat-icon>add</mat-icon>\n</button>\n',styles:[".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]}]}],t.ctorParameters=function(){return[{type:m.ProcessContentService}]},t.propDecorators={taskId:[{type:u.Input}],error:[{type:u.Output}],success:[{type:u.Output}]},t}(),jt=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[m.CoreModule.forChild(),ct],declarations:[Ut,Vt,Bt,Bt,Kt],exports:[Ut,Vt,Bt,Bt,Kt]}]}],t}(),$t={name:"adf-process-services",source:"assets/adf-process-services"},Gt=function(){function t(){}return t.forRoot=function(){return{ngModule:t,providers:[{provide:m.TRANSLATION_PROVIDER,multi:!0,useValue:{name:"adf-process-services",source:"assets/adf-process-services"}}]}},t.forChild=function(){return{ngModule:Ht}},t.decorators=[{type:u.NgModule,args:[{imports:[m.CoreModule.forChild(),l.CommonModule,pt,p.FormsModule,p.ReactiveFormsModule,ct,Mt,bt,xt,jt,St,Ft],providers:[{provide:m.TRANSLATION_PROVIDER,multi:!0,useValue:$t}],exports:[l.CommonModule,pt,p.FormsModule,p.ReactiveFormsModule,Mt,bt,xt,jt,St,Ft]}]}],t}(),Ht=function(){function t(){}return t.decorators=[{type:u.NgModule,args:[{imports:[m.CoreModule.forChild(),l.CommonModule,pt,p.FormsModule,p.ReactiveFormsModule,ct,Mt,bt,xt,jt,St],exports:[l.CommonModule,pt,p.FormsModule,p.ReactiveFormsModule,Mt,bt,xt,jt,St]}]}],t}();t.ProcessFiltersComponent=v,t.ProcessInstanceDetailsComponent=E,t.ProcessAuditDirective=k,t.ProcessInstanceHeaderComponent=C,t.ProcessInstanceTasksComponent=Lt,t.ProcessInstanceListComponent=wt,t.StartProcessInstanceComponent=Pt,t.ProcessService=D,t.ProcessFilterService=g,t.FilterProcessRepresentationModel=f,t.ProcessFilterParamRepresentationModel=h,t.ProcessDefinitionRepresentation=S,t.ProcessInstance=T,t.ProcessFilterRequestRepresentation=Ot,t.ProcessInstanceVariable=I,t.ProcessListModule=Mt,t.TaskListComponent=K,t.ChecklistComponent=j,t.TaskHeaderComponent=G,t.NoTaskDetailsTemplateDirective=q,t.TaskFiltersComponent=Y,t.TaskDetailsComponent=H,t.TaskAuditDirective=W,t.StartTaskComponent=X,t.TaskStandaloneComponent=Q,t.AttachFormComponent=Z,t.TaskListService=B,t.ProcessUploadService=tt,t.TaskUploadService=et,t.TaskFilterService=z,t.AppDefinitionRepresentationModel=P,t.FilterParamsModel=O,t.FilterRepresentationModel=M,t.TaskQueryRequestRepresentationModel=R,t.Form=x,t.StartTaskModel=nt,t.TaskDetailsEvent=it,t.TaskDetailsModel=U,t.TaskListModel=V,t.UserEventModel=ot,t.UserGroupModel=st,t.TaskListModule=bt,t.AppsListComponent=Rt,t.SelectAppsDialogComponent=Nt,t.AppsListModule=xt,t.TaskAttachmentListComponent=Ut,t.ProcessAttachmentListComponent=Vt,t.CreateProcessAttachmentComponent=Bt,t.AttachmentComponent=Kt,t.AttachmentModule=jt,t.ProcessCommentsComponent=lt,t.ProcessCommentsModule=pt,t.PeopleComponent=dt,t.PeopleListComponent=ut,t.PeopleSearchComponent=mt,t.PeopleSearchFieldComponent=ht,t.PeopleSelectorComponent=gt,t.PeopleSearchActionLabelDirective=yt,t.PeopleSearchTitleDirective=vt,t.PeopleModule=St,t.AttachFileWidgetComponent=At,t.AttachFolderWidgetComponent=Dt,t.AttachFileWidgetDialogComponent=It,t.AttachFileWidgetDialogService=Tt,t.ContentWidgetModule=Et,t.FormComponent=kt,t.StartFormComponent=Ct,t.FormModule=Ft,t.ProcessModule=Gt,t.ProcessModuleLazy=Ht,t.ɵb=ct,t.ɵa=rt,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=adf-process-services.umd.min.js.map