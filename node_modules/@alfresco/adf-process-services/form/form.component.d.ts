/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, SimpleChanges, OnInit, OnDestroy, OnChanges } from '@angular/core';
import { EcmModelService, NodeService, WidgetVisibilityService, FormService, FormRenderingService, FormBaseComponent, FormOutcomeModel, FormFieldModel, FormModel, FormValues, ContentLinkModel } from '@alfresco/adf-core';
import { Observable, Subscription } from 'rxjs';
export declare class FormComponent extends FormBaseComponent implements OnInit, OnDestroy, OnChanges {
    protected formService: FormService;
    protected visibilityService: WidgetVisibilityService;
    protected ecmModelService: EcmModelService;
    protected nodeService: NodeService;
    protected formRenderingService: FormRenderingService;
    /** Underlying form model instance. */
    form: FormModel;
    /** Task id to fetch corresponding form and values. */
    taskId: string;
    /** Content Services node ID for the form metadata. */
    nodeId: string;
    /** The id of the form definition to load and display with custom values. */
    formId: number;
    /** Name of the form definition to load and display with custom values. */
    formName: string;
    /** Toggle saving of form metadata. */
    saveMetadata: boolean;
    /** Custom form values map to be used with the rendered form. */
    data: FormValues;
    /** Emitted when the form is submitted with the `Save` or custom outcomes. */
    formSaved: EventEmitter<FormModel>;
    /** Emitted when the form is submitted with the `Complete` outcome. */
    formCompleted: EventEmitter<FormModel>;
    /** Emitted when form content is clicked. */
    formContentClicked: EventEmitter<ContentLinkModel>;
    /** Emitted when the form is loaded or reloaded. */
    formLoaded: EventEmitter<FormModel>;
    /** Emitted when form values are refreshed due to a data property change. */
    formDataRefreshed: EventEmitter<FormModel>;
    debugMode: boolean;
    protected subscriptions: Subscription[];
    constructor(formService: FormService, visibilityService: WidgetVisibilityService, ecmModelService: EcmModelService, nodeService: NodeService, formRenderingService: FormRenderingService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Invoked when user clicks form refresh button.
     */
    onRefreshClicked(): void;
    loadForm(): void;
    findProcessVariablesByTaskId(taskId: string): Observable<any>;
    isAProcessTask(taskRepresentation: any): boolean;
    getFormByTaskId(taskId: string): Promise<FormModel>;
    getFormDefinitionByFormId(formId: number): void;
    getFormDefinitionByFormName(formName: string): void;
    saveTaskForm(): void;
    completeTaskForm(outcome?: string): void;
    handleError(err: any): any;
    parseForm(json: any): FormModel;
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param form Form definition model.
     */
    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[];
    checkVisibility(field: FormFieldModel): void;
    private refreshFormData;
    private loadFormForEcmNode;
    loadFormFromActiviti(nodeType: string): any;
    private loadFormFromFormId;
    protected storeFormAsMetadata(): void;
    protected onFormLoaded(form: FormModel): void;
    protected onFormDataRefreshed(form: FormModel): void;
    protected onTaskSaved(form: FormModel): void;
    protected onTaskSavedError(form: FormModel, error: any): void;
    protected onTaskCompleted(form: FormModel): void;
    protected onTaskCompletedError(form: FormModel, error: any): void;
    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean;
}
