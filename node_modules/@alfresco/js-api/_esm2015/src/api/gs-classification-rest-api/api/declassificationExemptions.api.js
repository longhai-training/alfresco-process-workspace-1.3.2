/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { DeclassificationExemptionEntry } from '../model/declassificationExemptionEntry';
import { DeclassificationExemptionsPaging } from '../model/declassificationExemptionsPaging';
import { BaseApi } from './base.api';
export class DeclassificationExemptionsApi extends BaseApi {
    createDeclassificationExemption(declassificationExemption) {
        let postBody = declassificationExemption;
        if (declassificationExemption === undefined || declassificationExemption === null) {
            throw new Error("Required param 'declassificationExemption' in createDeclassificationExemption");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
    }
    deleteDeclassificationExemption(declassificationExemptionId) {
        let postBody = null;
        if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
            throw new Error("Required param 'declassificationExemptionId' in deleteDeclassificationExemption");
        }
        let pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listDeclassificationExemptions(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionsPaging);
    }
    showDeclassificationExemptionById(declassificationExemptionId) {
        let postBody = null;
        if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
            throw new Error("Required param 'declassificationExemptionId' in showDeclassificationExemptionById");
        }
        let pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
    }
    updateDeclassificationExemption(declassificationExemptionId, declassificationExemption) {
        let postBody = declassificationExemption;
        if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
            throw new Error("Required param 'declassificationExemptionId' in updateDeclassificationExemption");
        }
        if (declassificationExemption === undefined || declassificationExemption === null) {
            throw new Error("Required param 'declassificationExemption' in updateDeclassificationExemption");
        }
        let pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
    }
}
//# sourceMappingURL=declassificationExemptions.api.js.map