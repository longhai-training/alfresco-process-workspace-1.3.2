/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { ClassificationGuideEntry } from '../model/classificationGuideEntry';
import { ClassificationGuidePaging } from '../model/classificationGuidePaging';
import { InstructionEntry } from '../model/instructionEntry';
import { SubtopicPaging } from '../model/subtopicPaging';
import { TopicEntry } from '../model/topicEntry';
import { TopicPaging } from '../model/topicPaging';
import { BaseApi } from './base.api';
export class ClassificationGuidesApi extends BaseApi {
    combinedInstructions(opts) {
        opts = opts || {};
        let postBody = opts['instructions'];
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/combined-instructions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, InstructionEntry);
    }
    createClassificationGuide(classificationGuide) {
        let postBody = classificationGuide;
        if (classificationGuide === undefined || classificationGuide === null) {
            throw new Error("Required param 'classificationGuide' in createClassificationGuide");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
    }
    createSubtopic(topicId, topic, opts) {
        opts = opts || {};
        let postBody = topic;
        if (topicId === undefined || topicId === null) {
            throw new Error("Required param 'topicId' in createSubtopic");
        }
        if (topic === undefined || topic === null) {
            throw new Error("Required param 'topic' in createSubtopic");
        }
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}/subtopics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
    }
    createTopic(classificationGuideId, topic, opts) {
        opts = opts || {};
        let postBody = topic;
        if (classificationGuideId === undefined || classificationGuideId === null) {
            throw new Error("Required param 'classificationGuideId' in createTopic");
        }
        if (topic === undefined || topic === null) {
            throw new Error("Required param 'topic' in createTopic");
        }
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
    }
    deleteClassificationGuide(classificationGuideId) {
        let postBody = null;
        if (classificationGuideId === undefined || classificationGuideId === null) {
            throw new Error("Required param 'classificationGuideId' in deleteClassificationGuide");
        }
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteTopic(topicId) {
        let postBody = null;
        if (topicId === undefined || topicId === null) {
            throw new Error("Required param 'topicId' in deleteTopic");
        }
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listClassificationGuides(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuidePaging);
    }
    listSubtopics(topicId, opts) {
        opts = opts || {};
        let postBody = null;
        if (topicId === undefined || topicId === null) {
            throw new Error("Required param 'topicId' in listSubtopics");
        }
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'includeSource': opts['includeSource']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}/subtopics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubtopicPaging);
    }
    listTopics(classificationGuideId, opts) {
        opts = opts || {};
        let postBody = null;
        if (classificationGuideId === undefined || classificationGuideId === null) {
            throw new Error("Required param 'classificationGuideId' in listTopics");
        }
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'includeSource': opts['includeSource']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicPaging);
    }
    showClassificationGuideById(classificationGuideId) {
        let postBody = null;
        if (classificationGuideId === undefined || classificationGuideId === null) {
            throw new Error("Required param 'classificationGuideId' in showClassificationGuideById");
        }
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
    }
    showTopicById(topicId, opts) {
        opts = opts || {};
        let postBody = null;
        if (topicId === undefined || topicId === null) {
            throw new Error("Required param 'topicId' in showTopicById");
        }
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
    }
    updateClassificationGuide(classificationGuideId, classificationGuide) {
        let postBody = classificationGuide;
        if (classificationGuideId === undefined || classificationGuideId === null) {
            throw new Error("Required param 'classificationGuideId' in updateClassificationGuide");
        }
        if (classificationGuide === undefined || classificationGuide === null) {
            throw new Error("Required param 'classificationGuide' in updateClassificationGuide");
        }
        let pathParams = {
            'classificationGuideId': classificationGuideId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
    }
    updateTopic(topicId, topic, opts) {
        opts = opts || {};
        let postBody = topic;
        if (topicId === undefined || topicId === null) {
            throw new Error("Required param 'topicId' in updateTopic");
        }
        if (topic === undefined || topic === null) {
            throw new Error("Required param 'topic' in updateTopic");
        }
        let pathParams = {
            'topicId': topicId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/topics/{topicId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
    }
}
//# sourceMappingURL=classificationGuides.api.js.map