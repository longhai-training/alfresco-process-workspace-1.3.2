/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { ResultListDataRepresentationUserProcessInstanceFilterRepresentation } from '../model/resultListDataRepresentationUserProcessInstanceFilterRepresentation';
import { ResultListDataRepresentationUserTaskFilterRepresentation } from '../model/resultListDataRepresentationUserTaskFilterRepresentation';
import { UserProcessInstanceFilterRepresentation } from '../model/userProcessInstanceFilterRepresentation';
import { UserTaskFilterRepresentation } from '../model/userTaskFilterRepresentation';
import { BaseApi } from './base.api';
export class UserFiltersApi extends BaseApi {
    createUserProcessInstanceFilter(userProcessInstanceFilterRepresentation) {
        let postBody = userProcessInstanceFilterRepresentation;
        if (userProcessInstanceFilterRepresentation === undefined || userProcessInstanceFilterRepresentation === null) {
            throw new Error("Required param 'userProcessInstanceFilterRepresentation' in createUserProcessInstanceFilter");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
    }
    createUserTaskFilter(userTaskFilterRepresentation) {
        let postBody = userTaskFilterRepresentation;
        if (userTaskFilterRepresentation === undefined || userTaskFilterRepresentation === null) {
            throw new Error("Required param 'userTaskFilterRepresentation' in createUserTaskFilter");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
    }
    deleteUserProcessInstanceFilter(userFilterId) {
        let postBody = null;
        if (userFilterId === undefined || userFilterId === null) {
            throw new Error("Required param 'userFilterId' in deleteUserProcessInstanceFilter");
        }
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteUserTaskFilter(userFilterId) {
        let postBody = null;
        if (userFilterId === undefined || userFilterId === null) {
            throw new Error("Required param 'userFilterId' in deleteUserTaskFilter");
        }
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getUserProcessInstanceFilter(userFilterId) {
        let postBody = null;
        if (userFilterId === undefined || userFilterId === null) {
            throw new Error("Required param 'userFilterId' in getUserProcessInstanceFilter");
        }
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
    }
    getUserProcessInstanceFilters(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'appId': opts['appId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserProcessInstanceFilterRepresentation);
    }
    getUserTaskFilter(userFilterId) {
        let postBody = null;
        if (userFilterId === undefined || userFilterId === null) {
            throw new Error("Required param 'userFilterId' in getUserTaskFilter");
        }
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
    }
    getUserTaskFilters(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'appId': opts['appId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserTaskFilterRepresentation);
    }
    orderUserProcessInstanceFilters(filterOrderRepresentation) {
        let postBody = filterOrderRepresentation;
        if (filterOrderRepresentation === undefined || filterOrderRepresentation === null) {
            throw new Error("Required param 'filterOrderRepresentation' in orderUserProcessInstanceFilters");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    orderUserTaskFilters(filterOrderRepresentation) {
        let postBody = filterOrderRepresentation;
        if (filterOrderRepresentation === undefined || filterOrderRepresentation === null) {
            throw new Error("Required param 'filterOrderRepresentation' in orderUserTaskFilters");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateUserProcessInstanceFilter(userFilterId, userProcessInstanceFilterRepresentation) {
        let postBody = userProcessInstanceFilterRepresentation;
        if (userFilterId === undefined || userFilterId === null) {
            throw new Error("Required param 'userFilterId' in updateUserProcessInstanceFilter");
        }
        if (userProcessInstanceFilterRepresentation === undefined || userProcessInstanceFilterRepresentation === null) {
            throw new Error("Required param 'userProcessInstanceFilterRepresentation' in updateUserProcessInstanceFilter");
        }
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
    }
    updateUserTaskFilter(userFilterId, userTaskFilterRepresentation) {
        let postBody = userTaskFilterRepresentation;
        if (userFilterId === undefined || userFilterId === null) {
            throw new Error("Required param 'userFilterId' in updateUserTaskFilter");
        }
        if (userTaskFilterRepresentation === undefined || userTaskFilterRepresentation === null) {
            throw new Error("Required param 'userTaskFilterRepresentation' in updateUserTaskFilter");
        }
        let pathParams = {
            'userFilterId': userFilterId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
    }
}
//# sourceMappingURL=userFilters.api.js.map