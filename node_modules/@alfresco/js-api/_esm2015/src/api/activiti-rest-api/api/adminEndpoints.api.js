/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { EndpointBasicAuthRepresentation } from '../model/endpointBasicAuthRepresentation';
import { EndpointConfigurationRepresentation } from '../model/endpointConfigurationRepresentation';
import { BaseApi } from './base.api';
export class AdminEndpointsApi extends BaseApi {
    createBasicAuthConfiguration(createRepresentation) {
        let postBody = createRepresentation;
        if (createRepresentation === undefined || createRepresentation === null) {
            throw new Error("Required param 'createRepresentation' in createBasicAuthConfiguration");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/basic-auths', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
    }
    createEndpointConfiguration(representation) {
        let postBody = representation;
        if (representation === undefined || representation === null) {
            throw new Error("Required param 'representation' in createEndpointConfiguration");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/endpoints', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
    }
    getBasicAuthConfiguration(basicAuthId, tenantId) {
        let postBody = null;
        if (basicAuthId === undefined || basicAuthId === null) {
            throw new Error("Required param 'basicAuthId' in getBasicAuthConfiguration");
        }
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getBasicAuthConfiguration");
        }
        let pathParams = {
            'basicAuthId': basicAuthId
        };
        let queryParams = {
            'tenantId': tenantId
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
    }
    getBasicAuthConfigurations(tenantId) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getBasicAuthConfigurations");
        }
        let pathParams = {};
        let queryParams = {
            'tenantId': tenantId
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/basic-auths', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
    }
    getEndpointConfiguration(endpointConfigurationId, tenantId) {
        let postBody = null;
        if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
            throw new Error("Required param 'endpointConfigurationId' in getEndpointConfiguration");
        }
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getEndpointConfiguration");
        }
        let pathParams = {
            'endpointConfigurationId': endpointConfigurationId
        };
        let queryParams = {
            'tenantId': tenantId
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
    }
    getEndpointConfigurations(tenantId) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getEndpointConfigurations");
        }
        let pathParams = {};
        let queryParams = {
            'tenantId': tenantId
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/endpoints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
    }
    removeBasicAuthConfiguration(basicAuthId, tenantId) {
        let postBody = null;
        if (basicAuthId === undefined || basicAuthId === null) {
            throw new Error("Required param 'basicAuthId' in removeBasicAuthonfiguration");
        }
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in removeBasicAuthonfiguration");
        }
        let pathParams = {
            'basicAuthId': basicAuthId
        };
        let queryParams = {
            'tenantId': tenantId
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    removeEndpointConfiguration(endpointConfigurationId, tenantId) {
        let postBody = null;
        if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
            throw new Error("Required param 'endpointConfigurationId' in removeEndpointConfiguration");
        }
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in removeEndpointConfiguration");
        }
        let pathParams = {
            'endpointConfigurationId': endpointConfigurationId
        };
        let queryParams = {
            'tenantId': tenantId
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateBasicAuthConfiguration(basicAuthId, createRepresentation) {
        let postBody = createRepresentation;
        if (basicAuthId === undefined || basicAuthId === null) {
            throw new Error("Required param 'basicAuthId' in updateBasicAuthConfiguration");
        }
        if (createRepresentation === undefined || createRepresentation === null) {
            throw new Error("Required param 'createRepresentation' in updateBasicAuthConfiguration");
        }
        let pathParams = {
            'basicAuthId': basicAuthId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
    }
    updateEndpointConfiguration(endpointConfigurationId, representation) {
        let postBody = representation;
        if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
            throw new Error("Required param 'endpointConfigurationId' in updateEndpointConfiguration");
        }
        if (representation === undefined || representation === null) {
            throw new Error("Required param 'representation' in updateEndpointConfiguration");
        }
        let pathParams = {
            'endpointConfigurationId': endpointConfigurationId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
    }
}
//# sourceMappingURL=adminEndpoints.api.js.map