/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { RelatedContentRepresentation } from '../model/relatedContentRepresentation';
import { ResultListDataRepresentationRelatedContentRepresentation } from '../model/resultListDataRepresentationRelatedContentRepresentation';
import { BaseApi } from './base.api';
export class ContentApi extends BaseApi {
    createRelatedContentOnProcessInstance(processInstanceId, relatedContent, opts) {
        opts = opts || {};
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in createRelatedContentOnProcessInstance");
        }
        if (relatedContent === undefined || relatedContent === null) {
            throw new Error("Required param 'relatedContent' in createRelatedContentOnProcessInstance");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {
            'isRelatedContent': opts['isRelatedContent']
        };
        let headerParams = {};
        let formParams = {};
        let accepts = ['application/json'];
        if (relatedContent instanceof RelatedContentRepresentation) {
            let postBody = relatedContent;
            let contentTypes = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        }
        else {
            let postBody = null;
            formParams = {
                'file': relatedContent
            };
            let contentTypes = ['multipart/form-data'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/raw-content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        }
    }
    createRelatedContentOnTask(taskId, relatedContent, opts) {
        opts = opts || {};
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in createRelatedContentOnTask");
        }
        if (relatedContent === undefined || relatedContent === null) {
            throw new Error("Required param 'relatedContent' in createRelatedContentOnTask");
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {
            'isRelatedContent': opts['isRelatedContent']
        };
        let headerParams = {};
        let formParams = {};
        let accepts = ['application/json'];
        if (relatedContent instanceof RelatedContentRepresentation) {
            let postBody = relatedContent;
            let contentTypes = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        }
        else {
            let postBody = null;
            formParams = {
                'file': relatedContent
            };
            let contentTypes = ['multipart/form-data'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/raw-content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        }
    }
    createTemporaryRawRelatedContent(file) {
        let postBody = null;
        if (file === undefined || file === null) {
            throw new Error("Required param 'file' in createTemporaryRawRelatedContent");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {
            'file': file
        };
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/content/raw', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
    }
    createTemporaryRelatedContent(relatedContent) {
        let postBody = relatedContent;
        if (relatedContent === undefined || relatedContent === null) {
            throw new Error("Required param 'relatedContent' in createTemporaryRelatedContent");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
    }
    deleteContent(contentId) {
        let postBody = null;
        if (contentId === undefined || contentId === null) {
            throw new Error("Required param 'contentId' in deleteContent");
        }
        let pathParams = {
            'contentId': contentId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/content/{contentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getContent(contentId) {
        let postBody = null;
        if (contentId === undefined || contentId === null) {
            throw new Error("Required param 'contentId' in getContent");
        }
        let pathParams = {
            'contentId': contentId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/content/{contentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
    }
    getRawContentUrl(contentId) {
        return `${this.apiClient.basePath}/api/enterprise/content/${contentId}/raw`;
    }
    getRawContent(contentId, renditionType) {
        let postBody = null;
        if (contentId === undefined || contentId === null) {
            throw new Error("Required param 'contentId' in getRawContent");
        }
        let pathParams = {
            'contentId': contentId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json', '*/*'];
        if (renditionType) {
            return this.apiClient.callApi('/api/enterprise/content/{contentId}/rendition/{renditionType}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
        else {
            return this.apiClient.callApi('/api/enterprise/content/{contentId}/raw', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, undefined, undefined, 'blob');
        }
    }
    getRelatedContentForProcessInstance(processInstanceId, opts) {
        opts = opts || {};
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getRelatedContentForProcessInstance");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {
            'isRelatedContent': opts['isRelatedContent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);
    }
    getRelatedContentForTask(taskId, opts) {
        opts = opts || {};
        let postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getRelatedContentForTask");
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {
            'isRelatedContent': opts['isRelatedContent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);
    }
}
//# sourceMappingURL=content.api.js.map