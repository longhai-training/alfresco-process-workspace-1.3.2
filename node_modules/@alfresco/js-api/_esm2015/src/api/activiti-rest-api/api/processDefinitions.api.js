/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { FormDefinitionRepresentation } from '../model/formDefinitionRepresentation';
import { FormValueRepresentation } from '../model/formValueRepresentation';
import { IdentityLinkRepresentation } from '../model/identityLinkRepresentation';
import { ResultListDataRepresentationProcessDefinitionRepresentation } from '../model/resultListDataRepresentationProcessDefinitionRepresentation';
import { ResultListDataRepresentationRuntimeDecisionTableRepresentation } from '../model/resultListDataRepresentationRuntimeDecisionTableRepresentation';
import { ResultListDataRepresentationRuntimeFormRepresentation } from '../model/resultListDataRepresentationRuntimeFormRepresentation';
import { BaseApi } from './base.api';
export class ProcessDefinitionsApi extends BaseApi {
    createIdentityLink(processDefinitionId, identityLinkRepresentation) {
        let postBody = identityLinkRepresentation;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in createIdentityLink");
        }
        if (identityLinkRepresentation === undefined || identityLinkRepresentation === null) {
            throw new Error("Required param 'identityLinkRepresentation' in createIdentityLink");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    deleteIdentityLink(processDefinitionId, family, identityId) {
        let postBody = null;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in deleteIdentityLink");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in deleteIdentityLink");
        }
        if (identityId === undefined || identityId === null) {
            throw new Error("Required param 'identityId' in deleteIdentityLink");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getIdentityLinkType(processDefinitionId, family, identityId) {
        let postBody = null;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in getIdentityLinkType");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in getIdentityLinkType");
        }
        if (identityId === undefined || identityId === null) {
            throw new Error("Required param 'identityId' in getIdentityLinkType");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    getIdentityLinksForFamily(processDefinitionId, family) {
        let postBody = null;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in getIdentityLinksForFamily");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in getIdentityLinksForFamily");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId, 'family': family
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    getIdentityLinks(processDefinitionId) {
        let postBody = null;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in getIdentityLinks");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    }
    getProcessDefinitionDecisionTables(processDefinitionId) {
        let postBody = null;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in getProcessDefinitionDecisionTables");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/decision-tables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);
    }
    getProcessDefinitionForms(processDefinitionId) {
        let postBody = null;
        if (processDefinitionId === undefined || processDefinitionId === null) {
            throw new Error("Required param 'processDefinitionId' in getProcessDefinitionForms");
        }
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);
    }
    getProcessDefinitionStartForm(processDefinitionId) {
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
    }
    getProcessDefinitions(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'latest': opts['latest'],
            'appDefinitionId': opts['appDefinitionId'],
            'deploymentId': opts['deploymentId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessDefinitionRepresentation);
    }
    getRestFieldValues(processDefinitionId, field) {
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId,
            'field': field
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
    }
    getRestTableFieldValues(processDefinitionId, field, column) {
        let postBody = null;
        let pathParams = {
            'processDefinitionId': processDefinitionId,
            'field': field,
            'column': column
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
    }
}
//# sourceMappingURL=processDefinitions.api.js.map