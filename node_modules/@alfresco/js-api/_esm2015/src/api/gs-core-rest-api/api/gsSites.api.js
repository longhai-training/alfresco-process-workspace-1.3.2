/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { RMSiteEntry } from '../model/rMSiteEntry';
import { BaseApi } from './base.api';
export class GsSitesApi extends BaseApi {
    createRMSite(siteBodyCreate, opts) {
        opts = opts || {};
        let postBody = siteBodyCreate;
        if (siteBodyCreate === undefined || siteBodyCreate === null) {
            throw new Error("Required param 'siteBodyCreate' in createRMSite");
        }
        let pathParams = {};
        let queryParams = {
            'skipAddToFavorites': opts['skipAddToFavorites']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/gs-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
    }
    deleteRMSite() {
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/gs-sites/rm', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getRMSite(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/gs-sites/rm', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
    }
    updateRMSite(siteBodyUpdate, opts) {
        opts = opts || {};
        let postBody = siteBodyUpdate;
        if (siteBodyUpdate === undefined || siteBodyUpdate === null) {
            throw new Error("Required param 'siteBodyUpdate' in updateRMSite");
        }
        let pathParams = {};
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/gs-sites/rm', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
    }
}
//# sourceMappingURL=gsSites.api.js.map