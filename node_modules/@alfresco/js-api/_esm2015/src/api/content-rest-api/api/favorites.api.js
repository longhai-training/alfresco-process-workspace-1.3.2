/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { FavoriteEntry } from '../model/favoriteEntry';
import { FavoritePaging } from '../model/favoritePaging';
import { FavoriteSiteEntry } from '../model/favoriteSiteEntry';
import { SiteEntry } from '../model/siteEntry';
import { SitePaging } from '../model/sitePaging';
import { BaseApi } from './base.api';
export class FavoritesApi extends BaseApi {
    createFavorite(personId, favoriteBodyCreate, opts) {
        opts = opts || {};
        let postBody = favoriteBodyCreate;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in createFavorite");
        }
        if (favoriteBodyCreate === undefined || favoriteBodyCreate === null) {
            throw new Error("Required param 'favoriteBodyCreate' in createFavorite");
        }
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
    }
    createSiteFavorite(personId, favoriteSiteBodyCreate, opts) {
        opts = opts || {};
        let postBody = favoriteSiteBodyCreate;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in createSiteFavorite");
        }
        if (favoriteSiteBodyCreate === undefined || favoriteSiteBodyCreate === null) {
            throw new Error("Required param 'favoriteSiteBodyCreate' in createSiteFavorite");
        }
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteSiteEntry);
    }
    deleteFavorite(personId, favoriteId) {
        let postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in deleteFavorite");
        }
        if (favoriteId === undefined || favoriteId === null) {
            throw new Error("Required param 'favoriteId' in deleteFavorite");
        }
        let pathParams = {
            'personId': personId, 'favoriteId': favoriteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSiteFavorite(personId, siteId) {
        let postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in deleteSiteFavorite");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in deleteSiteFavorite");
        }
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getFavorite(personId, favoriteId, opts) {
        opts = opts || {};
        let postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in getFavorite");
        }
        if (favoriteId === undefined || favoriteId === null) {
            throw new Error("Required param 'favoriteId' in getFavorite");
        }
        let pathParams = {
            'personId': personId, 'favoriteId': favoriteId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
    }
    getFavoriteSite(personId, siteId, opts) {
        opts = opts || {};
        let postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in getFavoriteSite");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in getFavoriteSite");
        }
        let pathParams = {
            'personId': personId, 'siteId': siteId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    }
    listFavoriteSitesForPerson(personId, opts) {
        opts = opts || {};
        let postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in listFavoriteSitesForPerson");
        }
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorite-sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
    }
    listFavorites(personId, opts) {
        opts = opts || {};
        let postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in listFavorites");
        }
        let pathParams = {
            'personId': personId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/favorites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoritePaging);
    }
}
//# sourceMappingURL=favorites.api.js.map