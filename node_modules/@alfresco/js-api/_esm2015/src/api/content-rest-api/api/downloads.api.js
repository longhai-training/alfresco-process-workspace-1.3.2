/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { DownloadEntry } from '../model/downloadEntry';
import { BaseApi } from './base.api';
export class DownloadsApi extends BaseApi {
    cancelDownload(downloadId) {
        let postBody = null;
        if (downloadId === undefined || downloadId === null) {
            throw new Error("Required param 'downloadId' in cancelDownload");
        }
        let pathParams = {
            'downloadId': downloadId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/downloads/{downloadId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    createDownload(downloadBodyCreate, opts) {
        opts = opts || {};
        let postBody = downloadBodyCreate;
        if (downloadBodyCreate === undefined || downloadBodyCreate === null) {
            throw new Error("Required param 'downloadBodyCreate' in createDownload");
        }
        let pathParams = {};
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/downloads', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DownloadEntry);
    }
    getDownload(downloadId, opts) {
        opts = opts || {};
        let postBody = null;
        if (downloadId === undefined || downloadId === null) {
            throw new Error("Required param 'downloadId' in getDownload");
        }
        let pathParams = {
            'downloadId': downloadId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/downloads/{downloadId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DownloadEntry);
    }
}
//# sourceMappingURL=downloads.api.js.map