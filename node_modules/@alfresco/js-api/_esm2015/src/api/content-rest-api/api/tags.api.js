/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { TagEntry } from '../model/tagEntry';
import { TagPaging } from '../model/tagPaging';
import { BaseApi } from './base.api';
export class TagsApi extends BaseApi {
    createTagForNode(nodeId, tagBodyCreate, opts) {
        opts = opts || {};
        let postBody = tagBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createTagForNode");
        }
        if (tagBodyCreate === undefined || tagBodyCreate === null) {
            throw new Error("Required param 'tagBodyCreate' in createTagForNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
    }
    deleteTagFromNode(nodeId, tagId) {
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in deleteTagFromNode");
        }
        if (tagId === undefined || tagId === null) {
            throw new Error("Required param 'tagId' in deleteTagFromNode");
        }
        let pathParams = {
            'nodeId': nodeId, 'tagId': tagId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags/{tagId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getTag(tagId, opts) {
        opts = opts || {};
        let postBody = null;
        if (tagId === undefined || tagId === null) {
            throw new Error("Required param 'tagId' in getTag");
        }
        let pathParams = {
            'tagId': tagId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
    }
    listTags(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
    }
    listTagsForNode(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listTagsForNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
    }
    updateTag(tagId, tagBodyUpdate, opts) {
        opts = opts || {};
        let postBody = tagBodyUpdate;
        if (tagId === undefined || tagId === null) {
            throw new Error("Required param 'tagId' in updateTag");
        }
        if (tagBodyUpdate === undefined || tagBodyUpdate === null) {
            throw new Error("Required param 'tagBodyUpdate' in updateTag");
        }
        let pathParams = {
            'tagId': tagId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/tags/{tagId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
    }
}
//# sourceMappingURL=tags.api.js.map