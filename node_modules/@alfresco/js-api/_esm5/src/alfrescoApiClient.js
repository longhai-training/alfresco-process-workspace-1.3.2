/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as _Emitter from 'event-emitter';
import { Storage } from './storage';
import * as superagent_ from 'superagent';
import { Authentication } from './authentication/authentication';
var Emitter = _Emitter;
var superagent = superagent_;
var process = {};
var AlfrescoApiClient = (function () {
    function AlfrescoApiClient(host) {
        this.basePath = '';
        this.authentications = new Authentication({
            'basicAuth': {}, type: 'basic'
        });
        this.defaultHeaders = {};
        this.timeout = undefined;
        this.on = Emitter.on;
        this.off = Emitter.off;
        this.once = Emitter.once;
        this.emit = Emitter.emit;
        this.storage = new Storage();
        this.host = host;
        this.on = (new Emitter()).on;
        this.off = (new Emitter()).off;
        this.once = (new Emitter()).once;
        this.emit = (new Emitter()).emit;
        Emitter.call(this);
    }
    AlfrescoApiClient.prototype.paramToString = function (param) {
        if (param === undefined || param === null) {
            return '';
        }
        if (param instanceof Date) {
            return param.toJSON();
        }
        return param.toString();
    };
    AlfrescoApiClient.prototype.buildUrl = function (path, pathParams) {
        if (!path.match(/^\//)) {
            path = '/' + path;
        }
        var url = this.basePath + path;
        var _this = this;
        url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
            var value;
            if (pathParams.hasOwnProperty(key)) {
                value = _this.paramToString(pathParams[key]);
            }
            else {
                value = fullMatch;
            }
            return encodeURIComponent(value);
        });
        return url;
    };
    AlfrescoApiClient.prototype.isJsonMime = function (contentType) {
        return Boolean(contentType !== null && contentType.match(/^application\/json(;.*)?$/i));
    };
    AlfrescoApiClient.prototype.jsonPreferredMime = function (contentTypes) {
        for (var i = 0; i < contentTypes.length; i++) {
            if (this.isJsonMime(contentTypes[i])) {
                return contentTypes[i];
            }
        }
        return contentTypes[0];
    };
    AlfrescoApiClient.prototype.isFileParam = function (param) {
        if (typeof Buffer === 'function' && (param instanceof Buffer || param.path)) {
            return true;
        }
        if (typeof Blob === 'function' && param instanceof Blob) {
            return true;
        }
        if (typeof File === 'function' && param instanceof File) {
            return true;
        }
        if (typeof File === 'object' && param instanceof File) {
            return true;
        }
        return false;
    };
    AlfrescoApiClient.prototype.normalizeParams = function (params) {
        var newParams = {};
        for (var key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined && params[key] !== null) {
                var value = params[key];
                if (this.isFileParam(value) || Array.isArray(value)) {
                    newParams[key] = value;
                }
                else {
                    newParams[key] = this.paramToString(value);
                }
            }
        }
        return newParams;
    };
    AlfrescoApiClient.prototype.buildCollectionParam = function (param, collectionFormat) {
        if (!param) {
            return null;
        }
        switch (collectionFormat) {
            case 'csv':
                return param.map(this.paramToString).join(',');
            case 'ssv':
                return param.map(this.paramToString).join(' ');
            case 'tsv':
                return param.map(this.paramToString).join('\t');
            case 'pipes':
                return param.map(this.paramToString).join('|');
            case 'multi':
                return param.map(this.paramToString);
            default:
                throw new Error('Unknown collection format: ' + collectionFormat);
        }
    };
    AlfrescoApiClient.prototype.isWithCredentials = function () {
        if (this.config) {
            return this.config.withCredentials;
        }
        else {
            return false;
        }
    };
    AlfrescoApiClient.prototype.applyAuthToRequest = function (request) {
        if (this.authentications) {
            switch (this.authentications.type) {
                case 'basic':
                    var basicAuth = this.authentications.basicAuth;
                    if (basicAuth.username || basicAuth.password) {
                        request.auth(basicAuth.username ? encodeURI(basicAuth.username) : '', basicAuth.password ? encodeURI(basicAuth.password) : '');
                    }
                    break;
                case 'activiti':
                    if (this.authentications.basicAuth.ticket) {
                        request.set({ 'Authorization': this.authentications.basicAuth.ticket });
                    }
                    break;
                case 'oauth2':
                    var oauth2 = this.authentications.oauth2;
                    if (oauth2.accessToken) {
                        request.set({ 'Authorization': 'Bearer ' + oauth2.accessToken });
                    }
                    break;
                default:
                    throw new Error('Unknown authentication type: ' + this.authentications.type);
            }
        }
    };
    AlfrescoApiClient.prototype.deserialize = function (response, returnType) {
        if (response === null) {
            return null;
        }
        var data = response.body;
        if (data === null) {
            data = response.text;
        }
        if (returnType) {
            if (Array.isArray(data)) {
                data = data.map(function (element) {
                    return new returnType(element);
                });
            }
            else {
                data = new returnType(data);
            }
        }
        return data;
    };
    AlfrescoApiClient.prototype.basicAuth = function (username, password) {
        var str = username + ':' + password;
        var base64;
        if (typeof Buffer === 'function') {
            base64 = Buffer.from(str.toString(), 'binary').toString('base64');
        }
        else {
            base64 = btoa(str);
        }
        return 'Basic ' + base64;
    };
    AlfrescoApiClient.prototype.callApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType) {
        var url;
        if (contextRoot) {
            var basePath = this.host + "/" + contextRoot;
            url = this.buildUrlCustomBasePath(basePath, path, pathParams);
        }
        else {
            url = this.buildUrl(path, pathParams);
        }
        return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url);
    };
    AlfrescoApiClient.prototype.callCustomApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType) {
        var url = this.buildUrlCustomBasePath(path, '', pathParams);
        return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url);
    };
    AlfrescoApiClient.prototype.callHostApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url) {
        var _this_1 = this;
        var eventEmitter = {};
        Emitter(eventEmitter);
        var request = this.buildRequest(httpMethod, url, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, responseType, eventEmitter, returnType);
        if (returnType === 'Binary') {
            request = request.buffer(true).parse(superagent.parse['application/octet-stream']);
        }
        var promise = new Promise(function (resolve, reject) {
            request.end(function (error, response) {
                if (error) {
                    _this_1.emit('error', error);
                    eventEmitter.emit('error', error);
                    if (error.status === 401) {
                        _this_1.emit('unauthorized');
                        eventEmitter.emit('unauthorized');
                    }
                    if (response && response.text) {
                        error = error || {};
                        reject(Object.assign(error, { message: response.text }));
                    }
                    else {
                        reject({ error: error });
                    }
                }
                else {
                    if (_this_1.isBpmRequest()) {
                        if (response.header && response.header.hasOwnProperty('set-cookie')) {
                            _this_1.authentications.cookie = response.header['set-cookie'];
                        }
                    }
                    var data = {};
                    if (response.type === 'text/html') {
                        data = _this_1.deserialize(response);
                    }
                    else {
                        data = _this_1.deserialize(response, returnType);
                    }
                    eventEmitter.emit('success', data);
                    resolve(data);
                }
            }).on('abort', function () {
                eventEmitter.emit('abort');
            });
        });
        promise.on = function () {
            eventEmitter.on.apply(eventEmitter, arguments);
            return this;
        };
        promise.once = function () {
            eventEmitter.once.apply(eventEmitter, arguments);
            return this;
        };
        promise.emit = function () {
            eventEmitter.emit.apply(eventEmitter, arguments);
            return this;
        };
        promise.off = function () {
            eventEmitter.off.apply(eventEmitter, arguments);
            return this;
        };
        promise.abort = function () {
            request.abort();
            return this;
        };
        return promise;
    };
    AlfrescoApiClient.prototype.isBpmRequest = function () {
        return this.className === 'ProcessAuth' || this.className === 'ProcessClient';
    };
    AlfrescoApiClient.prototype.isCsrfEnabled = function () {
        if (this.config) {
            return !this.config.disableCsrf;
        }
        else {
            return true;
        }
    };
    AlfrescoApiClient.prototype.setCsrfToken = function (request) {
        var token = this.createCSRFToken();
        request.set('X-CSRF-TOKEN', token);
        if (this.isNodeEnv()) {
            request.set('Cookie', 'CSRF-TOKEN=' + token + ';path=/');
        }
        try {
            document.cookie = 'CSRF-TOKEN=' + token + ';path=/';
        }
        catch (err) {
        }
    };
    AlfrescoApiClient.prototype.isNodeEnv = function () {
        return (typeof process !== 'undefined') && (process.release && process.release.name === 'node');
    };
    AlfrescoApiClient.prototype.createCSRFToken = function (a) {
        return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e16] + (1e16).toString()).replace(/[01]/g, this.createCSRFToken);
    };
    AlfrescoApiClient.prototype.progress = function (event, eventEmitter) {
        if (event.lengthComputable) {
            var percent = Math.round(event.loaded / event.total * 100);
            eventEmitter.emit('progress', {
                total: event.total,
                loaded: event.loaded,
                percent: percent
            });
        }
    };
    AlfrescoApiClient.prototype.buildUrlCustomBasePath = function (basePath, path, pathParams) {
        if (path && path !== '' && !path.match(/^\//)) {
            path = '/' + path;
        }
        var url = basePath + path;
        var _this = this;
        url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
            var value;
            if (pathParams.hasOwnProperty(key)) {
                value = _this.paramToString(pathParams[key]);
            }
            else {
                value = fullMatch;
            }
            return encodeURIComponent(value);
        });
        return url;
    };
    AlfrescoApiClient.prototype.buildRequest = function (httpMethod, url, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, responseType, eventEmitter, returnType) {
        var _this_1 = this;
        var request = superagent(httpMethod, url);
        this.applyAuthToRequest(request);
        request.query(this.normalizeParams(queryParams));
        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
        if (this.isBpmRequest() && this.isCsrfEnabled()) {
            this.setCsrfToken(request);
        }
        if (this.isWithCredentials()) {
            request.withCredentials();
        }
        if (this.isBpmRequest()) {
            request._withCredentials = true;
            if (this.authentications.cookie) {
                if (this.isNodeEnv()) {
                    request.set('Cookie', this.authentications.cookie);
                }
            }
        }
        request.timeout(this.timeout);
        var contentType = this.jsonPreferredMime(contentTypes);
        if (contentType && contentType !== 'multipart/form-data') {
            request.type(contentType);
        }
        else if (!request.header['Content-Type'] && contentType !== 'multipart/form-data') {
            request.type('application/json');
        }
        if (contentType === 'application/x-www-form-urlencoded') {
            request.send(this.normalizeParams(formParams)).on('progress', function (event) {
                _this_1.progress(event, eventEmitter);
            });
        }
        else if (contentType === 'multipart/form-data') {
            var _formParams = this.normalizeParams(formParams);
            for (var key in _formParams) {
                if (_formParams.hasOwnProperty(key)) {
                    if (this.isFileParam(_formParams[key])) {
                        request.attach(key, _formParams[key]).on('progress', function (event) {
                            _this_1.progress(event, eventEmitter);
                        });
                    }
                    else {
                        request.field(key, _formParams[key]).on('progress', function (event) {
                            _this_1.progress(event, eventEmitter);
                        });
                    }
                }
            }
        }
        else if (bodyParam) {
            request.send(bodyParam).on('progress', function (event) {
                _this_1.progress(event, eventEmitter);
            });
        }
        var accept = this.jsonPreferredMime(accepts);
        if (accept) {
            request.accept(accept);
        }
        if (returnType === 'Blob' || responseType === 'blob' || responseType === 'Blob') {
            request.responseType('blob');
        }
        else if (returnType === 'String') {
            request.responseType('string');
        }
        return request;
    };
    AlfrescoApiClient.prototype.getAlfTicket = function (ticket) {
        var alfTicketFragment = '';
        if (ticket) {
            alfTicketFragment = '&alf_ticket=' + ticket;
        }
        else if (this.config.ticketEcm) {
            alfTicketFragment = '&alf_ticket=' + this.config.ticketEcm;
        }
        return alfTicketFragment;
    };
    return AlfrescoApiClient;
}());
export { AlfrescoApiClient };
//# sourceMappingURL=alfrescoApiClient.js.map