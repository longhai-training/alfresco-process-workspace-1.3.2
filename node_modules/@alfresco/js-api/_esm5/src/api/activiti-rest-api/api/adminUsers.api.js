/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { AbstractUserRepresentation } from '../model/abstractUserRepresentation';
import { ResultListDataRepresentationAbstractUserRepresentation } from '../model/resultListDataRepresentationAbstractUserRepresentation';
import { UserRepresentation } from '../model/userRepresentation';
import { BaseApi } from './base.api';
var AdminUsersApi = (function (_super) {
    tslib_1.__extends(AdminUsersApi, _super);
    function AdminUsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdminUsersApi.prototype.bulkUpdateUsers = function (update) {
        var postBody = update;
        if (update === undefined || update === null) {
            throw new Error("Required param 'update' in bulkUpdateUsers");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AdminUsersApi.prototype.createNewUser = function (userRepresentation) {
        var postBody = userRepresentation;
        if (userRepresentation === undefined || userRepresentation === null) {
            throw new Error("Required param 'userRepresentation' in createNewUser");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
    };
    AdminUsersApi.prototype.getUser = function (userId, opts) {
        opts = opts || {};
        var postBody = null;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in getUser");
        }
        var pathParams = {
            'userId': userId
        };
        var queryParams = {
            'summary': opts['summary']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AbstractUserRepresentation);
    };
    AdminUsersApi.prototype.getUsers = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'filter': opts['filter'],
            'status': opts['status'],
            'accountType': opts['accountType'],
            'sort': opts['sort'],
            'company': opts['company'],
            'start': opts['start'],
            'page': opts['page'],
            'size': opts['size'],
            'groupId': opts['groupId'],
            'tenantId': opts['tenantId'],
            'summary': opts['summary']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAbstractUserRepresentation);
    };
    AdminUsersApi.prototype.updateUserDetails = function (userId, userRepresentation) {
        var postBody = userRepresentation;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in updateUserDetails");
        }
        if (userRepresentation === undefined || userRepresentation === null) {
            throw new Error("Required param 'userRepresentation' in updateUserDetails");
        }
        var pathParams = {
            'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    return AdminUsersApi;
}(BaseApi));
export { AdminUsersApi };
//# sourceMappingURL=adminUsers.api.js.map