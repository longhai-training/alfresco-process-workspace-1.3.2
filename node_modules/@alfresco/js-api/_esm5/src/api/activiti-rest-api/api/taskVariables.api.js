/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { RestVariable } from '../model/restVariable';
import { BaseApi } from './base.api';
var TaskVariablesApi = (function (_super) {
    tslib_1.__extends(TaskVariablesApi, _super);
    function TaskVariablesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TaskVariablesApi.prototype.createTaskVariable = function (taskId, restVariables) {
        var postBody = restVariables;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in createTaskVariable");
        }
        if (restVariables === undefined || restVariables === null) {
            throw new Error("Required param 'restVariables' in createTaskVariable");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
    };
    TaskVariablesApi.prototype.deleteAllLocalTaskVariables = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in deleteAllLocalTaskVariables");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskVariablesApi.prototype.deleteVariable = function (taskId, variableName, opts) {
        opts = opts || {};
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in deleteVariable");
        }
        if (variableName === undefined || variableName === null) {
            throw new Error("Required param 'variableName' in deleteVariable");
        }
        var pathParams = {
            'taskId': taskId, 'variableName': variableName
        };
        var queryParams = {
            'scope': opts['scope']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskVariablesApi.prototype.getVariable = function (taskId, variableName, opts) {
        opts = opts || {};
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getVariable");
        }
        if (variableName === undefined || variableName === null) {
            throw new Error("Required param 'variableName' in getVariable");
        }
        var pathParams = {
            'taskId': taskId, 'variableName': variableName
        };
        var queryParams = {
            'scope': opts['scope']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
    };
    TaskVariablesApi.prototype.getVariables = function (taskId, opts) {
        opts = opts || {};
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getVariables");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {
            'scope': opts['scope']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
    };
    TaskVariablesApi.prototype.updateVariable = function (taskId, variableName, restVariable) {
        var postBody = restVariable;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in updateVariable");
        }
        if (variableName === undefined || variableName === null) {
            throw new Error("Required param 'variableName' in updateVariable");
        }
        if (restVariable === undefined || restVariable === null) {
            throw new Error("Required param 'restVariable' in updateVariable");
        }
        var pathParams = {
            'taskId': taskId, 'variableName': variableName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
    };
    return TaskVariablesApi;
}(BaseApi));
export { TaskVariablesApi };
//# sourceMappingURL=taskVariables.api.js.map