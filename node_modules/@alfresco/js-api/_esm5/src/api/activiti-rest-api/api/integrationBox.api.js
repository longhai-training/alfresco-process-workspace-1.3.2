/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { ResultListDataRepresentationBoxContent } from '../model/resultListDataRepresentationBoxContent';
import { BaseApi } from './base.api';
var IntegrationBoxApi = (function (_super) {
    tslib_1.__extends(IntegrationBoxApi, _super);
    function IntegrationBoxApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntegrationBoxApi.prototype.confirmAuthorisation = function () {
        var postBody = null;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['text/html'];
        return this.apiClient.callApi('/api/enterprise/integration/box/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    IntegrationBoxApi.prototype.createRepositoryAccount = function (userId, credentials) {
        var postBody = credentials;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in createRepositoryAccount");
        }
        if (credentials === undefined || credentials === null) {
            throw new Error("Required param 'credentials' in createRepositoryAccount");
        }
        var pathParams = {
            'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    IntegrationBoxApi.prototype.deleteRepositoryAccount = function (userId) {
        var postBody = null;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in deleteRepositoryAccount");
        }
        var pathParams = {
            'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    IntegrationBoxApi.prototype.getBoxPluginStatus = function () {
        var postBody = null;
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    IntegrationBoxApi.prototype.getFiles = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'filter': opts['filter'],
            'parent': opts['parent']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/files', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationBoxContent);
    };
    IntegrationBoxApi.prototype.getRepositoryAccount = function (userId) {
        var postBody = null;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in getRepositoryAccount");
        }
        var pathParams = {
            'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    IntegrationBoxApi.prototype.updateRepositoryAccount = function (userId, credentials) {
        var postBody = credentials;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in updateRepositoryAccount");
        }
        if (credentials === undefined || credentials === null) {
            throw new Error("Required param 'credentials' in updateRepositoryAccount");
        }
        var pathParams = {
            'userId': userId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['*/*'];
        return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    return IntegrationBoxApi;
}(BaseApi));
export { IntegrationBoxApi };
//# sourceMappingURL=integrationBox.api.js.map