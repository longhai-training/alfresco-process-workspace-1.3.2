/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { IdentityLinkRepresentation } from '../model/identityLinkRepresentation';
import { ResultListDataRepresentationTaskRepresentation } from '../model/resultListDataRepresentationTaskRepresentation';
import { TaskAuditInfoRepresentation } from '../model/taskAuditInfoRepresentation';
import { TaskRepresentation } from '../model/taskRepresentation';
import { BaseApi } from './base.api';
var TasksApi = (function (_super) {
    tslib_1.__extends(TasksApi, _super);
    function TasksApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TasksApi.prototype.createIdentityLink = function (taskId, identityLinkRepresentation) {
        var postBody = identityLinkRepresentation;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in createIdentityLink");
        }
        if (identityLinkRepresentation === undefined || identityLinkRepresentation === null) {
            throw new Error("Required param 'identityLinkRepresentation' in createIdentityLink");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    TasksApi.prototype.createNewTask = function (taskRepresentation) {
        var postBody = taskRepresentation;
        if (taskRepresentation === undefined || taskRepresentation === null) {
            throw new Error("Required param 'taskRepresentation' in createNewTask");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    };
    TasksApi.prototype.deleteIdentityLink = function (taskId, family, identityId, type) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in deleteIdentityLink");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in deleteIdentityLink");
        }
        if (identityId === undefined || identityId === null) {
            throw new Error("Required param 'identityId' in deleteIdentityLink");
        }
        if (type === undefined || type === null) {
            throw new Error("Required param 'type' in deleteIdentityLink");
        }
        var pathParams = {
            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TasksApi.prototype.deleteTask = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in deleteTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TasksApi.prototype.filterTasks = function (tasksFilter) {
        var postBody = tasksFilter;
        if (tasksFilter === undefined || tasksFilter === null) {
            throw new Error("Required param 'tasksFilter' in filterTasks");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
    };
    TasksApi.prototype.getIdentityLinkType = function (taskId, family, identityId, type) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getIdentityLinkType");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in getIdentityLinkType");
        }
        if (identityId === undefined || identityId === null) {
            throw new Error("Required param 'identityId' in getIdentityLinkType");
        }
        if (type === undefined || type === null) {
            throw new Error("Required param 'type' in getIdentityLinkType");
        }
        var pathParams = {
            'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    TasksApi.prototype.getIdentityLinksForFamily = function (taskId, family) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getIdentityLinksForFamily");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in getIdentityLinksForFamily");
        }
        var pathParams = {
            'taskId': taskId, 'family': family
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    TasksApi.prototype.getIdentityLinks = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getIdentityLinks");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
    };
    TasksApi.prototype.getTaskAuditLog = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getTaskAuditLog");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskAuditInfoRepresentation);
    };
    TasksApi.prototype.getTask = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    };
    TasksApi.prototype.listHistoricTasks = function (queryRequest) {
        var postBody = queryRequest;
        if (queryRequest === undefined || queryRequest === null) {
            throw new Error("Required param 'queryRequest' in listHistoricTasks");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/historic-tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
    };
    TasksApi.prototype.listTasks = function (tasksQuery) {
        var postBody = tasksQuery;
        if (tasksQuery === undefined || tasksQuery === null) {
            throw new Error("Required param 'tasksQuery' in listTasks");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
    };
    TasksApi.prototype.updateTask = function (taskId, updated) {
        var postBody = updated;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in updateTask");
        }
        if (updated === undefined || updated === null) {
            throw new Error("Required param 'updated' in updateTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    };
    return TasksApi;
}(BaseApi));
export { TasksApi };
//# sourceMappingURL=tasks.api.js.map