/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { TaskRepresentation } from '../model/taskRepresentation';
import { BaseApi } from './base.api';
var TaskActionsApi = (function (_super) {
    tslib_1.__extends(TaskActionsApi, _super);
    function TaskActionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TaskActionsApi.prototype.assignTask = function (taskId, userIdentifier) {
        var postBody = userIdentifier;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in assignTask");
        }
        if (userIdentifier === undefined || userIdentifier === null) {
            throw new Error("Required param 'userIdentifier' in assignTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/assign', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
    };
    TaskActionsApi.prototype.attachForm = function (taskId, formIdentifier) {
        var postBody = formIdentifier;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in attachForm");
        }
        if (formIdentifier === undefined || formIdentifier === null) {
            throw new Error("Required param 'formIdentifier' in attachForm");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/attach-form', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.claimTask = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in claimTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/claim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.completeTask = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in completeTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/complete', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.delegateTask = function (taskId, userIdentifier) {
        var postBody = userIdentifier;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in delegateTask");
        }
        if (userIdentifier === undefined || userIdentifier === null) {
            throw new Error("Required param 'userIdentifier' in delegateTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/delegate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.involveGroup = function (taskId, groupId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in involveGroup");
        }
        if (groupId === undefined || groupId === null) {
            throw new Error("Required param 'groupId' in involveGroup");
        }
        var pathParams = {
            'taskId': taskId, 'groupId': groupId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.involveUser = function (taskId, userIdentifier) {
        var postBody = userIdentifier;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in involveUser");
        }
        if (userIdentifier === undefined || userIdentifier === null) {
            throw new Error("Required param 'userIdentifier' in involveUser");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/involve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.removeForm = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in removeForm");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-form', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.removeInvolvedUser = function (taskId, identifier) {
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in removeInvolvedUser");
        }
        if (identifier === undefined || identifier === null) {
            throw new Error("Required param 'groupId' in identifier");
        }
        var pathParams = {
            'taskId': taskId, 'groupId': identifier
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        if (identifier instanceof String) {
            var postBody = null;
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
        else {
            var postBody = identifier;
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-involved', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        }
    };
    TaskActionsApi.prototype.resolveTask = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in resolveTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/resolve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TaskActionsApi.prototype.unclaimTask = function (taskId) {
        var postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in unclaimTask");
        }
        var pathParams = {
            'taskId': taskId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/unclaim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    return TaskActionsApi;
}(BaseApi));
export { TaskActionsApi };
//# sourceMappingURL=taskActions.api.js.map