/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { ActionDefinitionEntry } from '../model/actionDefinitionEntry';
import { ActionDefinitionList } from '../model/actionDefinitionList';
import { ActionExecResultEntry } from '../model/actionExecResultEntry';
import { BaseApi } from './base.api';
var ActionsApi = (function (_super) {
    tslib_1.__extends(ActionsApi, _super);
    function ActionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionsApi.prototype.actionDetails = function (actionDefinitionId) {
        var postBody = null;
        if (actionDefinitionId === undefined || actionDefinitionId === null) {
            throw new Error("Required param 'actionDefinitionId' in actionDetails");
        }
        var pathParams = {
            'actionDefinitionId': actionDefinitionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/action-definitions/{actionDefinitionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionEntry);
    };
    ActionsApi.prototype.actionExec = function (actionBodyExec) {
        var postBody = actionBodyExec;
        if (actionBodyExec === undefined || actionBodyExec === null) {
            throw new Error("Required param 'actionBodyExec' in actionExec");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/action-executions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionExecResultEntry);
    };
    ActionsApi.prototype.listActions = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionList);
    };
    ActionsApi.prototype.nodeActions = function (nodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in nodeActions");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionList);
    };
    return ActionsApi;
}(BaseApi));
export { ActionsApi };
//# sourceMappingURL=actions.api.js.map