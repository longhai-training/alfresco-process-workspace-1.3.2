/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { RenditionEntry } from '../model/renditionEntry';
import { RenditionPaging } from '../model/renditionPaging';
import { BaseApi } from './base.api';
var RenditionsApi = (function (_super) {
    tslib_1.__extends(RenditionsApi, _super);
    function RenditionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RenditionsApi.prototype.createRendition = function (nodeId, renditionBodyCreate) {
        var postBody = renditionBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createRendition");
        }
        if (renditionBodyCreate === undefined || renditionBodyCreate === null) {
            throw new Error("Required param 'renditionBodyCreate' in createRendition");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RenditionsApi.prototype.getRendition = function (nodeId, renditionId) {
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getRendition");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getRendition");
        }
        var pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
    };
    RenditionsApi.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getRenditionContent");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getRenditionContent");
        }
        var pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        var queryParams = {
            'attachment': opts['attachment'],
            'placeholder': opts['placeholder']
        };
        var headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RenditionsApi.prototype.listRenditions = function (nodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listRenditions");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'where': opts['where']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
    };
    return RenditionsApi;
}(BaseApi));
export { RenditionsApi };
//# sourceMappingURL=renditions.api.js.map