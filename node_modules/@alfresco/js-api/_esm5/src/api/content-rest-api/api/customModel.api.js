/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var CustomModelApi = (function () {
    function CustomModelApi(alfrescoApi) {
        this.private = true;
        if (alfrescoApi) {
            this.apiClient = alfrescoApi.contentPrivateClient;
        }
    }
    CustomModelApi.prototype.createCustomModel = function (status, description, name, namespaceUri, namespacePrefix) {
        if (namespaceUri === undefined || namespaceUri === null) {
            throw "Missing param 'namespaceUri' in createCustomModel";
        }
        if (namespacePrefix === undefined || namespacePrefix === null) {
            throw "Missing param 'namespacePrefix' in createCustomModel";
        }
        var postBody = {
            'status': status,
            'description': description,
            'name': name,
            'namespaceUri': namespaceUri,
            'namespacePrefix': namespacePrefix
        };
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.createCustomType = function (modelName, name, parentName, title, description) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in createCustomType";
        }
        if (name === undefined || name === null) {
            throw "Missing param 'name' in createCustomType";
        }
        var postBody = {
            'name': name,
            'parentName': parentName,
            'title': title,
            'description': description
        };
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/types', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.createCustomAspect = function (modelName, name, parentName, title, description) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in createCustomAspect";
        }
        if (name === undefined || name === null) {
            throw "Missing param 'name' in createCustomAspect";
        }
        var postBody = {
            'name': name,
            'parentName': parentName,
            'title': title,
            'description': description
        };
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/aspects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.createCustomConstraint = function (modelName, name, type, parameters) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in createCustomConstraint";
        }
        if (type === undefined || type === null) {
            throw "Missing param 'type' in createCustomConstraint";
        }
        if (name === undefined || name === null) {
            throw "Missing param 'name' in createCustomConstraint";
        }
        var postBody = {
            'name': name,
            'type': type,
            'parameters': parameters
        };
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/constraints', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.activateCustomModel = function (modelName) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in activateCustomModel";
        }
        var postBody = {
            'status': 'ACTIVE'
        };
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}?select=status', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.deactivateCustomModel = function (modelName) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in deactivateCustomModel";
        }
        var postBody = {
            'status': 'DRAFT'
        };
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}?select=status', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.addPropertyToAspect = function (modelName, aspectName, properties) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in addPropertyToAspect";
        }
        if (aspectName === undefined || aspectName === null) {
            throw "Missing param 'aspectName' in addPropertyToAspect";
        }
        var postBody = {
            'name': aspectName,
            'properties': properties
        };
        var pathParams = {
            'modelName': modelName,
            'aspectName': aspectName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/aspects/{aspectName}?select=props', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.addPropertyToType = function (modelName, typeName, properties, aspectName) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in addPropertyToType";
        }
        if (typeName === undefined || typeName === null) {
            throw "Missing param 'typeName' in addPropertyToType";
        }
        var postBody = {
            'name': aspectName,
            'properties': properties
        };
        var pathParams = {
            'modelName': modelName,
            'typeName': typeName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/types/{typeName}?select=props', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.updateCustomModel = function (modelName, description, namespaceUri, namespacePrefix) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in updateCustomModel";
        }
        var postBody = {
            'name': modelName,
            'description': description,
            'namespaceUri': namespaceUri,
            'namespacePrefix': namespacePrefix
        };
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.updateCustomType = function (modelName, typeName, description, parentName, title) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in UpdateCustomType";
        }
        if (typeName === undefined || typeName === null) {
            throw "Missing param 'typeName' in UpdateCustomType";
        }
        var postBody = {
            'name': modelName,
            'parentName': parentName,
            'title': title,
            'description': description
        };
        var pathParams = {
            'modelName': modelName,
            'typeName': typeName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/types/{typeName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.updateCustomAspect = function (modelName, aspectName, description, parentName, title) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in updateCustomAspect";
        }
        if (aspectName === undefined || aspectName === null) {
            throw "Missing param 'aspectName' in updateCustomAspect";
        }
        var postBody = {
            'name': modelName,
            'parentName': parentName,
            'title': title,
            'description': description
        };
        var pathParams = {
            'modelName': modelName,
            'aspectName': aspectName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/aspects/{aspectName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getAllCustomModel = function () {
        var postBody = {};
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getCustomModel = function (modelName, queryParamsInput) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getCustomModel";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = queryParamsInput || {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getAllCustomType = function (modelName) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getAllCustomType";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/types', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getCustomType = function (modelName, typeName, queryParamsInput) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getCustomType";
        }
        if (typeName === undefined || typeName === null) {
            throw "Missing param 'typeName' in getCustomType";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName,
            'typeName': typeName
        };
        var queryParams = queryParamsInput || {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/types/{typeName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getAllCustomAspect = function (modelName, queryParamsInput) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getAllCustomAspect";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = queryParamsInput || {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/aspects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getCustomAspect = function (modelName, aspectName, queryParamsInput) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getCustomAspect";
        }
        if (aspectName === undefined || aspectName === null) {
            throw "Missing param 'aspectName' in getCustomAspect";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName,
            'aspectName': aspectName
        };
        var queryParams = queryParamsInput || {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/aspects/{aspectName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getAllCustomConstraints = function (modelName, queryParamsInput) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getAllCustomConstraints";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = queryParamsInput || {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/constraints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.getCustomConstraints = function (modelName, constraintName, queryParamsInput) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getCustomConstraints";
        }
        if (constraintName === undefined || constraintName === null) {
            throw "Missing param 'constraintName' in getCustomConstraints";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName,
            'constraintName': constraintName
        };
        var queryParams = queryParamsInput || {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/constraints{constraintName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.deleteCustomModel = function (modelName) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in deleteCustomModel";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    CustomModelApi.prototype.deleteCustomType = function (modelName, typeName) {
        if (modelName === undefined || modelName === null) {
            throw "Missing param 'modelName' in getCustomConstraints";
        }
        if (typeName === undefined || typeName === null) {
            throw "Missing param 'modelName' in deleteCustomType";
        }
        var postBody = {};
        var pathParams = {
            'modelName': modelName,
            'typeName': typeName
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('cmm/{modelName}/types/{typeName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    return CustomModelApi;
}());
export { CustomModelApi };
//# sourceMappingURL=customModel.api.js.map