/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { PersonNetworkEntry } from '../model/personNetworkEntry';
import { PersonNetworkPaging } from '../model/personNetworkPaging';
import { BaseApi } from './base.api';
var NetworksApi = (function (_super) {
    tslib_1.__extends(NetworksApi, _super);
    function NetworksApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NetworksApi.prototype.getNetwork = function (networkId, opts) {
        opts = opts || {};
        var postBody = null;
        if (networkId === undefined || networkId === null) {
            throw new Error("Required param 'networkId' in getNetwork");
        }
        var pathParams = {
            'networkId': networkId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkEntry);
    };
    NetworksApi.prototype.getNetworkForPerson = function (personId, networkId, opts) {
        opts = opts || {};
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in getNetworkForPerson");
        }
        if (networkId === undefined || networkId === null) {
            throw new Error("Required param 'networkId' in getNetworkForPerson");
        }
        var pathParams = {
            'personId': personId, 'networkId': networkId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkEntry);
    };
    NetworksApi.prototype.listNetworksForPerson = function (personId, opts) {
        opts = opts || {};
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in listNetworksForPerson");
        }
        var pathParams = {
            'personId': personId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkPaging);
    };
    return NetworksApi;
}(BaseApi));
export { NetworksApi };
//# sourceMappingURL=networks.api.js.map