/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { AuditApp } from '../model/auditApp';
import { AuditAppPaging } from '../model/auditAppPaging';
import { AuditEntryEntry } from '../model/auditEntryEntry';
import { AuditEntryPaging } from '../model/auditEntryPaging';
import { BaseApi } from './base.api';
var AuditApi = (function (_super) {
    tslib_1.__extends(AuditApi, _super);
    function AuditApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AuditApi.prototype.deleteAuditEntriesForAuditApp = function (auditApplicationId, where) {
        var postBody = null;
        if (auditApplicationId === undefined || auditApplicationId === null) {
            throw new Error("Required param 'auditApplicationId' in deleteAuditEntriesForAuditApp");
        }
        if (where === undefined || where === null) {
            throw new Error("Required param 'where' in deleteAuditEntriesForAuditApp");
        }
        var pathParams = {
            'auditApplicationId': auditApplicationId
        };
        var queryParams = {
            'where': where
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AuditApi.prototype.deleteAuditEntry = function (auditApplicationId, auditEntryId) {
        var postBody = null;
        if (auditApplicationId === undefined || auditApplicationId === null) {
            throw new Error("Required param 'auditApplicationId' in deleteAuditEntry");
        }
        if (auditEntryId === undefined || auditEntryId === null) {
            throw new Error("Required param 'auditEntryId' in deleteAuditEntry");
        }
        var pathParams = {
            'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    AuditApi.prototype.getAuditApp = function (auditApplicationId, opts) {
        opts = opts || {};
        var postBody = null;
        if (auditApplicationId === undefined || auditApplicationId === null) {
            throw new Error("Required param 'auditApplicationId' in getAuditApp");
        }
        var pathParams = {
            'auditApplicationId': auditApplicationId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
    };
    AuditApi.prototype.getAuditEntry = function (auditApplicationId, auditEntryId, opts) {
        opts = opts || {};
        var postBody = null;
        if (auditApplicationId === undefined || auditApplicationId === null) {
            throw new Error("Required param 'auditApplicationId' in getAuditEntry");
        }
        if (auditEntryId === undefined || auditEntryId === null) {
            throw new Error("Required param 'auditEntryId' in getAuditEntry");
        }
        var pathParams = {
            'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryEntry);
    };
    AuditApi.prototype.listAuditApps = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditAppPaging);
    };
    AuditApi.prototype.listAuditEntriesForAuditApp = function (auditApplicationId, opts) {
        opts = opts || {};
        var postBody = null;
        if (auditApplicationId === undefined || auditApplicationId === null) {
            throw new Error("Required param 'auditApplicationId' in listAuditEntriesForAuditApp");
        }
        var pathParams = {
            'auditApplicationId': auditApplicationId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
    };
    AuditApi.prototype.listAuditEntriesForNode = function (nodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listAuditEntriesForNode");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
    };
    AuditApi.prototype.updateAuditApp = function (auditApplicationId, auditAppBodyUpdate, opts) {
        opts = opts || {};
        var postBody = auditAppBodyUpdate;
        if (auditApplicationId === undefined || auditApplicationId === null) {
            throw new Error("Required param 'auditApplicationId' in updateAuditApp");
        }
        if (auditAppBodyUpdate === undefined || auditAppBodyUpdate === null) {
            throw new Error("Required param 'auditAppBodyUpdate' in updateAuditApp");
        }
        var pathParams = {
            'auditApplicationId': auditApplicationId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
    };
    return AuditApi;
}(BaseApi));
export { AuditApi };
//# sourceMappingURL=audit.api.js.map