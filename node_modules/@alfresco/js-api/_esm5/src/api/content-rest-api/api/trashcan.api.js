/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { DeletedNodeEntry } from '../model/deletedNodeEntry';
import { DeletedNodesPaging } from '../model/deletedNodesPaging';
import { NodeEntry } from '../model/nodeEntry';
import { RenditionEntry } from '../model/renditionEntry';
import { RenditionPaging } from '../model/renditionPaging';
import { BaseApi } from './base.api';
var TrashcanApi = (function (_super) {
    tslib_1.__extends(TrashcanApi, _super);
    function TrashcanApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TrashcanApi.prototype.deleteDeletedNode = function (nodeId) {
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in deleteDeletedNode");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TrashcanApi.prototype.getArchivedNodeRendition = function (nodeId, renditionId) {
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getArchivedNodeRendition");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getArchivedNodeRendition");
        }
        var pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
    };
    TrashcanApi.prototype.getArchivedNodeRenditionContent = function (nodeId, renditionId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getArchivedNodeRenditionContent");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getArchivedNodeRenditionContent");
        }
        var pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        var queryParams = {
            'attachment': opts['attachment'],
            'placeholder': opts['placeholder']
        };
        var headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TrashcanApi.prototype.getDeletedNode = function (nodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getDeletedNode");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodeEntry);
    };
    TrashcanApi.prototype.getDeletedNodeContent = function (nodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getDeletedNodeContent");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'attachment': opts['attachment']
        };
        var headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    TrashcanApi.prototype.listDeletedNodeRenditions = function (nodeId, opts) {
        opts = opts || {};
        var postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listDeletedNodeRenditions");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'where': opts['where']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
    };
    TrashcanApi.prototype.listDeletedNodes = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodesPaging);
    };
    TrashcanApi.prototype.restoreDeletedNode = function (nodeId, opts) {
        opts = opts || {};
        var postBody = opts['deletedNodeBodyRestore'];
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in restoreDeletedNode");
        }
        var pathParams = {
            'nodeId': nodeId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/deleted-nodes/{nodeId}/restore', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
    };
    return TrashcanApi;
}(BaseApi));
export { TrashcanApi };
//# sourceMappingURL=trashcan.api.js.map