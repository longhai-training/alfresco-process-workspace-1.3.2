/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { RenditionEntry } from '../model/renditionEntry';
import { RenditionPaging } from '../model/renditionPaging';
import { SharedLinkEntry } from '../model/sharedLinkEntry';
import { SharedLinkPaging } from '../model/sharedLinkPaging';
import { BaseApi } from './base.api';
var SharedlinksApi = (function (_super) {
    tslib_1.__extends(SharedlinksApi, _super);
    function SharedlinksApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SharedlinksApi.prototype.createSharedLink = function (sharedLinkBodyCreate, opts) {
        opts = opts || {};
        var postBody = sharedLinkBodyCreate;
        if (sharedLinkBodyCreate === undefined || sharedLinkBodyCreate === null) {
            throw new Error("Required param 'sharedLinkBodyCreate' in createSharedLink");
        }
        var pathParams = {};
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
    };
    SharedlinksApi.prototype.deleteSharedLink = function (sharedId) {
        var postBody = null;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in deleteSharedLink");
        }
        var pathParams = {
            'sharedId': sharedId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SharedlinksApi.prototype.emailSharedLink = function (sharedId, sharedLinkBodyEmail) {
        var postBody = sharedLinkBodyEmail;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in emailSharedLink");
        }
        if (sharedLinkBodyEmail === undefined || sharedLinkBodyEmail === null) {
            throw new Error("Required param 'sharedLinkBodyEmail' in emailSharedLink");
        }
        var pathParams = {
            'sharedId': sharedId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/email', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SharedlinksApi.prototype.getSharedLink = function (sharedId, opts) {
        opts = opts || {};
        var postBody = null;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in getSharedLink");
        }
        var pathParams = {
            'sharedId': sharedId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
    };
    SharedlinksApi.prototype.getSharedLinkContent = function (sharedId, opts) {
        opts = opts || {};
        var postBody = null;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in getSharedLinkContent");
        }
        var pathParams = {
            'sharedId': sharedId
        };
        var queryParams = {
            'attachment': opts['attachment']
        };
        var headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SharedlinksApi.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
        var postBody = null;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in getSharedLinkRendition");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getSharedLinkRendition");
        }
        var pathParams = {
            'sharedId': sharedId, 'renditionId': renditionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
    };
    SharedlinksApi.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
        opts = opts || {};
        var postBody = null;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in getSharedLinkRenditionContent");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getSharedLinkRenditionContent");
        }
        var pathParams = {
            'sharedId': sharedId, 'renditionId': renditionId
        };
        var queryParams = {
            'attachment': opts['attachment']
        };
        var headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SharedlinksApi.prototype.listSharedLinkRenditions = function (sharedId) {
        var postBody = null;
        if (sharedId === undefined || sharedId === null) {
            throw new Error("Required param 'sharedId' in listSharedLinkRenditions");
        }
        var pathParams = {
            'sharedId': sharedId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links/{sharedId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
    };
    SharedlinksApi.prototype.listSharedLinks = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/shared-links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkPaging);
    };
    return SharedlinksApi;
}(BaseApi));
export { SharedlinksApi };
//# sourceMappingURL=sharedlinks.api.js.map