/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { SiteContainerEntry } from '../model/siteContainerEntry';
import { SiteContainerPaging } from '../model/siteContainerPaging';
import { SiteEntry } from '../model/siteEntry';
import { SiteMemberEntry } from '../model/siteMemberEntry';
import { SiteMemberPaging } from '../model/siteMemberPaging';
import { SiteMembershipRequestEntry } from '../model/siteMembershipRequestEntry';
import { SiteMembershipRequestPaging } from '../model/siteMembershipRequestPaging';
import { SiteMembershipRequestWithPersonPaging } from '../model/siteMembershipRequestWithPersonPaging';
import { SitePaging } from '../model/sitePaging';
import { SiteRoleEntry } from '../model/siteRoleEntry';
import { SiteRolePaging } from '../model/siteRolePaging';
import { BaseApi } from './base.api';
var SitesApi = (function (_super) {
    tslib_1.__extends(SitesApi, _super);
    function SitesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SitesApi.prototype.approveSiteMembershipRequest = function (siteId, inviteeId, opts) {
        opts = opts || {};
        var postBody = opts['siteMembershipApprovalBody'];
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in approveSiteMembershipRequest");
        }
        if (inviteeId === undefined || inviteeId === null) {
            throw new Error("Required param 'inviteeId' in approveSiteMembershipRequest");
        }
        var pathParams = {
            'siteId': siteId, 'inviteeId': inviteeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SitesApi.prototype.createSite = function (siteBodyCreate, opts) {
        opts = opts || {};
        var postBody = siteBodyCreate;
        if (siteBodyCreate === undefined || siteBodyCreate === null) {
            throw new Error("Required param 'siteBodyCreate' in createSite");
        }
        var pathParams = {};
        var queryParams = {
            'skipConfiguration': opts['skipConfiguration'],
            'skipAddToFavorites': opts['skipAddToFavorites'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    };
    SitesApi.prototype.createSiteMembership = function (siteId, siteMembershipBodyCreate, opts) {
        opts = opts || {};
        var postBody = siteMembershipBodyCreate;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in createSiteMembership");
        }
        if (siteMembershipBodyCreate === undefined || siteMembershipBodyCreate === null) {
            throw new Error("Required param 'siteMembershipBodyCreate' in createSiteMembership");
        }
        var pathParams = {
            'siteId': siteId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
    };
    SitesApi.prototype.createSiteMembershipRequestForPerson = function (personId, siteMembershipRequestBodyCreate, opts) {
        opts = opts || {};
        var postBody = siteMembershipRequestBodyCreate;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in createSiteMembershipRequestForPerson");
        }
        if (siteMembershipRequestBodyCreate === undefined || siteMembershipRequestBodyCreate === null) {
            throw new Error("Required param 'siteMembershipRequestBodyCreate' in createSiteMembershipRequestForPerson");
        }
        var pathParams = {
            'personId': personId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
    };
    SitesApi.prototype.deleteSite = function (siteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in deleteSite");
        }
        var pathParams = {
            'siteId': siteId
        };
        var queryParams = {
            'permanent': opts['permanent']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SitesApi.prototype.deleteSiteMembership = function (siteId, personId) {
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in deleteSiteMembership");
        }
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in deleteSiteMembership");
        }
        var pathParams = {
            'siteId': siteId, 'personId': personId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SitesApi.prototype.deleteSiteMembershipForPerson = function (personId, siteId) {
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in deleteSiteMembershipForPerson");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in deleteSiteMembershipForPerson");
        }
        var pathParams = {
            'personId': personId, 'siteId': siteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SitesApi.prototype.deleteSiteMembershipRequestForPerson = function (personId, siteId) {
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in deleteSiteMembershipRequestForPerson");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in deleteSiteMembershipRequestForPerson");
        }
        var pathParams = {
            'personId': personId, 'siteId': siteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SitesApi.prototype.getSite = function (siteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in getSite");
        }
        var pathParams = {
            'siteId': siteId
        };
        var queryParams = {
            'relations': this.apiClient.buildCollectionParam(opts['relations'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    };
    SitesApi.prototype.getSiteContainer = function (siteId, containerId, opts) {
        opts = opts || {};
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in getSiteContainer");
        }
        if (containerId === undefined || containerId === null) {
            throw new Error("Required param 'containerId' in getSiteContainer");
        }
        var pathParams = {
            'siteId': siteId, 'containerId': containerId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/containers/{containerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerEntry);
    };
    SitesApi.prototype.getSiteMembership = function (siteId, personId, opts) {
        opts = opts || {};
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in getSiteMembership");
        }
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in getSiteMembership");
        }
        var pathParams = {
            'siteId': siteId, 'personId': personId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
    };
    SitesApi.prototype.getSiteMembershipForPerson = function (personId, siteId) {
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in getSiteMembershipForPerson");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in getSiteMembershipForPerson");
        }
        var pathParams = {
            'personId': personId, 'siteId': siteId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRoleEntry);
    };
    SitesApi.prototype.getSiteMembershipRequestForPerson = function (personId, siteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in getSiteMembershipRequestForPerson");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in getSiteMembershipRequestForPerson");
        }
        var pathParams = {
            'personId': personId, 'siteId': siteId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
    };
    SitesApi.prototype.getSiteMembershipRequests = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestWithPersonPaging);
    };
    SitesApi.prototype.listSiteContainers = function (siteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in listSiteContainers");
        }
        var pathParams = {
            'siteId': siteId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/containers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerPaging);
    };
    SitesApi.prototype.listSiteMembershipRequestsForPerson = function (personId, opts) {
        opts = opts || {};
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in listSiteMembershipRequestsForPerson");
        }
        var pathParams = {
            'personId': personId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestPaging);
    };
    SitesApi.prototype.listSiteMemberships = function (siteId, opts) {
        opts = opts || {};
        var postBody = null;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in listSiteMemberships");
        }
        var pathParams = {
            'siteId': siteId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberPaging);
    };
    SitesApi.prototype.listSiteMembershipsForPerson = function (personId, opts) {
        opts = opts || {};
        var postBody = null;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in listSiteMembershipsForPerson");
        }
        var pathParams = {
            'personId': personId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'relations': this.apiClient.buildCollectionParam(opts['relations'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
            'where': opts['where']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRolePaging);
    };
    SitesApi.prototype.listSites = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'relations': this.apiClient.buildCollectionParam(opts['relations'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
            'where': opts['where']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
    };
    SitesApi.prototype.rejectSiteMembershipRequest = function (siteId, inviteeId, opts) {
        opts = opts || {};
        var postBody = opts['siteMembershipRejectionBody'];
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in rejectSiteMembershipRequest");
        }
        if (inviteeId === undefined || inviteeId === null) {
            throw new Error("Required param 'inviteeId' in rejectSiteMembershipRequest");
        }
        var pathParams = {
            'siteId': siteId, 'inviteeId': inviteeId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    SitesApi.prototype.updateSite = function (siteId, siteBodyUpdate, opts) {
        opts = opts || {};
        var postBody = siteBodyUpdate;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in updateSite");
        }
        if (siteBodyUpdate === undefined || siteBodyUpdate === null) {
            throw new Error("Required param 'siteBodyUpdate' in updateSite");
        }
        var pathParams = {
            'siteId': siteId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
    };
    SitesApi.prototype.updateSiteMembership = function (siteId, personId, siteMembershipBodyUpdate, opts) {
        opts = opts || {};
        var postBody = siteMembershipBodyUpdate;
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in updateSiteMembership");
        }
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in updateSiteMembership");
        }
        if (siteMembershipBodyUpdate === undefined || siteMembershipBodyUpdate === null) {
            throw new Error("Required param 'siteMembershipBodyUpdate' in updateSiteMembership");
        }
        var pathParams = {
            'siteId': siteId, 'personId': personId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
    };
    SitesApi.prototype.updateSiteMembershipRequestForPerson = function (personId, siteId, siteMembershipRequestBodyUpdate, opts) {
        opts = opts || {};
        var postBody = siteMembershipRequestBodyUpdate;
        if (personId === undefined || personId === null) {
            throw new Error("Required param 'personId' in updateSiteMembershipRequestForPerson");
        }
        if (siteId === undefined || siteId === null) {
            throw new Error("Required param 'siteId' in updateSiteMembershipRequestForPerson");
        }
        if (siteMembershipRequestBodyUpdate === undefined || siteMembershipRequestBodyUpdate === null) {
            throw new Error("Required param 'siteMembershipRequestBodyUpdate' in updateSiteMembershipRequestForPerson");
        }
        var pathParams = {
            'personId': personId, 'siteId': siteId
        };
        var queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
    };
    return SitesApi;
}(BaseApi));
export { SitesApi };
//# sourceMappingURL=sites.api.js.map