/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { DeclassificationExemptionEntry } from '../model/declassificationExemptionEntry';
import { DeclassificationExemptionsPaging } from '../model/declassificationExemptionsPaging';
import { BaseApi } from './base.api';
var DeclassificationExemptionsApi = (function (_super) {
    tslib_1.__extends(DeclassificationExemptionsApi, _super);
    function DeclassificationExemptionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeclassificationExemptionsApi.prototype.createDeclassificationExemption = function (declassificationExemption) {
        var postBody = declassificationExemption;
        if (declassificationExemption === undefined || declassificationExemption === null) {
            throw new Error("Required param 'declassificationExemption' in createDeclassificationExemption");
        }
        var pathParams = {};
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
    };
    DeclassificationExemptionsApi.prototype.deleteDeclassificationExemption = function (declassificationExemptionId) {
        var postBody = null;
        if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
            throw new Error("Required param 'declassificationExemptionId' in deleteDeclassificationExemption");
        }
        var pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    DeclassificationExemptionsApi.prototype.listDeclassificationExemptions = function (opts) {
        opts = opts || {};
        var postBody = null;
        var pathParams = {};
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems']
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionsPaging);
    };
    DeclassificationExemptionsApi.prototype.showDeclassificationExemptionById = function (declassificationExemptionId) {
        var postBody = null;
        if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
            throw new Error("Required param 'declassificationExemptionId' in showDeclassificationExemptionById");
        }
        var pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
    };
    DeclassificationExemptionsApi.prototype.updateDeclassificationExemption = function (declassificationExemptionId, declassificationExemption) {
        var postBody = declassificationExemption;
        if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
            throw new Error("Required param 'declassificationExemptionId' in updateDeclassificationExemption");
        }
        if (declassificationExemption === undefined || declassificationExemption === null) {
            throw new Error("Required param 'declassificationExemption' in updateDeclassificationExemption");
        }
        var pathParams = {
            'declassificationExemptionId': declassificationExemptionId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
    };
    return DeclassificationExemptionsApi;
}(BaseApi));
export { DeclassificationExemptionsApi };
//# sourceMappingURL=declassificationExemptions.api.js.map