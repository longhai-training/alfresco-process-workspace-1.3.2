/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { RecordEntry } from '../model/recordEntry';
import { BaseApi } from './base.api';
var RecordsApi = (function (_super) {
    tslib_1.__extends(RecordsApi, _super);
    function RecordsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RecordsApi.prototype.completeRecord = function (recordId, opts) {
        opts = opts || {};
        var postBody = null;
        if (recordId === undefined || recordId === null) {
            throw new Error("Required param 'recordId' in completeRecord");
        }
        var pathParams = {
            'recordId': recordId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/records/{recordId}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
    };
    RecordsApi.prototype.deleteRecord = function (recordId) {
        var postBody = null;
        if (recordId === undefined || recordId === null) {
            throw new Error("Required param 'recordId' in deleteRecord");
        }
        var pathParams = {
            'recordId': recordId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/records/{recordId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RecordsApi.prototype.fileRecord = function (recordId, nodeBodyFile, opts) {
        opts = opts || {};
        var postBody = nodeBodyFile;
        if (recordId === undefined || recordId === null) {
            throw new Error("Required param 'recordId' in fileRecord");
        }
        if (nodeBodyFile === undefined || nodeBodyFile === null) {
            throw new Error("Required param 'nodeBodyFile' in fileRecord");
        }
        var pathParams = {
            'recordId': recordId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/records/{recordId}/file', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
    };
    RecordsApi.prototype.getRecord = function (recordId, opts) {
        opts = opts || {};
        var postBody = null;
        if (recordId === undefined || recordId === null) {
            throw new Error("Required param 'recordId' in getRecord");
        }
        var pathParams = {
            'recordId': recordId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/records/{recordId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
    };
    RecordsApi.prototype.getRecordContent = function (recordId, opts) {
        opts = opts || {};
        var postBody = null;
        if (recordId === undefined || recordId === null) {
            throw new Error("Required param 'recordId' in getRecordContent");
        }
        var pathParams = {
            'recordId': recordId
        };
        var queryParams = {
            'attachment': opts['attachment']
        };
        var headerParams = {
            'If-Modified-Since': opts['ifModifiedSince']
        };
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/records/{recordId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RecordsApi.prototype.updateRecord = function (recordId, recordBodyUpdate, opts) {
        opts = opts || {};
        var postBody = recordBodyUpdate;
        if (recordId === undefined || recordId === null) {
            throw new Error("Required param 'recordId' in updateRecord");
        }
        if (recordBodyUpdate === undefined || recordBodyUpdate === null) {
            throw new Error("Required param 'recordBodyUpdate' in updateRecord");
        }
        var pathParams = {
            'recordId': recordId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/records/{recordId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
    };
    return RecordsApi;
}(BaseApi));
export { RecordsApi };
//# sourceMappingURL=records.api.js.map