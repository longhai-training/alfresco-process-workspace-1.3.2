/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { RecordFolderAssociationPaging } from '../model/recordFolderAssociationPaging';
import { RecordFolderEntry } from '../model/recordFolderEntry';
import { BaseApi } from './base.api';
var RecordFoldersApi = (function (_super) {
    tslib_1.__extends(RecordFoldersApi, _super);
    function RecordFoldersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RecordFoldersApi.prototype.createRecordFolderChild = function (recordFolderId, recordBodyCreate, opts) {
        opts = opts || {};
        var postBody = recordBodyCreate;
        if (recordFolderId === undefined || recordFolderId === null) {
            throw new Error("Required param 'recordFolderId' in createRecordFolderChild");
        }
        if (recordBodyCreate === undefined || recordBodyCreate === null) {
            throw new Error("Required param 'recordBodyCreate' in createRecordFolderChild");
        }
        var pathParams = {
            'recordFolderId': recordFolderId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json', 'multipart/form-data'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RecordFoldersApi.prototype.deleteRecordFolder = function (recordFolderId) {
        var postBody = null;
        if (recordFolderId === undefined || recordFolderId === null) {
            throw new Error("Required param 'recordFolderId' in deleteRecordFolder");
        }
        var pathParams = {
            'recordFolderId': recordFolderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    RecordFoldersApi.prototype.getRecordFolder = function (recordFolderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (recordFolderId === undefined || recordFolderId === null) {
            throw new Error("Required param 'recordFolderId' in getRecordFolder");
        }
        var pathParams = {
            'recordFolderId': recordFolderId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderEntry);
    };
    RecordFoldersApi.prototype.listRecordFolderChildren = function (recordFolderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (recordFolderId === undefined || recordFolderId === null) {
            throw new Error("Required param 'recordFolderId' in listRecordFolderChildren");
        }
        var pathParams = {
            'recordFolderId': recordFolderId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderAssociationPaging);
    };
    RecordFoldersApi.prototype.updateRecordFolder = function (recordFolderId, recordFolderBodyUpdate, opts) {
        opts = opts || {};
        var postBody = recordFolderBodyUpdate;
        if (recordFolderId === undefined || recordFolderId === null) {
            throw new Error("Required param 'recordFolderId' in updateRecordFolder");
        }
        if (recordFolderBodyUpdate === undefined || recordFolderBodyUpdate === null) {
            throw new Error("Required param 'recordFolderBodyUpdate' in updateRecordFolder");
        }
        var pathParams = {
            'recordFolderId': recordFolderId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/record-folders/{recordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderEntry);
    };
    return RecordFoldersApi;
}(BaseApi));
export { RecordFoldersApi };
//# sourceMappingURL=recordFolders.api.js.map