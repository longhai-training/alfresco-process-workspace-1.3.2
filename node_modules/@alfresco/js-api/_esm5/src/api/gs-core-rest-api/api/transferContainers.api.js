/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { TransferContainerAssociationPaging } from '../model/transferContainerAssociationPaging';
import { TransferContainerEntry } from '../model/transferContainerEntry';
import { BaseApi } from './base.api';
var TransferContainersApi = (function (_super) {
    tslib_1.__extends(TransferContainersApi, _super);
    function TransferContainersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransferContainersApi.prototype.getTransferContainer = function (transferContainerId, opts) {
        opts = opts || {};
        var postBody = null;
        if (transferContainerId === undefined || transferContainerId === null) {
            throw new Error("Required param 'transferContainerId' in getTransferContainer");
        }
        var pathParams = {
            'transferContainerId': transferContainerId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/transfer-containers/{transferContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerEntry);
    };
    TransferContainersApi.prototype.listTransfers = function (transferContainerId, opts) {
        opts = opts || {};
        var postBody = null;
        if (transferContainerId === undefined || transferContainerId === null) {
            throw new Error("Required param 'transferContainerId' in listTransfers");
        }
        var pathParams = {
            'transferContainerId': transferContainerId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/transfer-containers/{transferContainerId}/transfers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerAssociationPaging);
    };
    TransferContainersApi.prototype.updateTransferContainer = function (transferContainerId, nodeBodyUpdate, opts) {
        opts = opts || {};
        var postBody = nodeBodyUpdate;
        if (transferContainerId === undefined || transferContainerId === null) {
            throw new Error("Required param 'transferContainerId' in updateTransferContainer");
        }
        if (nodeBodyUpdate === undefined || nodeBodyUpdate === null) {
            throw new Error("Required param 'nodeBodyUpdate' in updateTransferContainer");
        }
        var pathParams = {
            'transferContainerId': transferContainerId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/transfer-containers/{transferContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerEntry);
    };
    return TransferContainersApi;
}(BaseApi));
export { TransferContainersApi };
//# sourceMappingURL=transferContainers.api.js.map