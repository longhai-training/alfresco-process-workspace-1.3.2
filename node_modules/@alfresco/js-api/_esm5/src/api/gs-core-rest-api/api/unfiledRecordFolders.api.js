/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { UnfiledRecordFolderAssociationPaging } from '../model/unfiledRecordFolderAssociationPaging';
import { UnfiledRecordFolderEntry } from '../model/unfiledRecordFolderEntry';
import { BaseApi } from './base.api';
var UnfiledRecordFoldersApi = (function (_super) {
    tslib_1.__extends(UnfiledRecordFoldersApi, _super);
    function UnfiledRecordFoldersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnfiledRecordFoldersApi.prototype.createUnfiledRecordFolderChildren = function (unfiledRecordFolderId, nodeBodyCreate, opts) {
        opts = opts || {};
        var postBody = nodeBodyCreate;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in createUnfiledRecordFolderChildren");
        }
        if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
            throw new Error("Required param 'nodeBodyCreate' in createUnfiledRecordFolderChildren");
        }
        var pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        var queryParams = {
            'autoRename': opts['autoRename'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json', 'multipart/form-data'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderAssociationPaging);
    };
    UnfiledRecordFoldersApi.prototype.deleteUnfiledRecordFolder = function (unfiledRecordFolderId) {
        var postBody = null;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in deleteUnfiledRecordFolder");
        }
        var pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        var queryParams = {};
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    };
    UnfiledRecordFoldersApi.prototype.getUnfiledRecordFolder = function (unfiledRecordFolderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in getUnfiledRecordFolder");
        }
        var pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderEntry);
    };
    UnfiledRecordFoldersApi.prototype.listUnfiledRecordFolderChildren = function (unfiledRecordFolderId, opts) {
        opts = opts || {};
        var postBody = null;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in listUnfiledRecordFolderChildren");
        }
        var pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderAssociationPaging);
    };
    UnfiledRecordFoldersApi.prototype.updateUnfiledRecordFolder = function (unfiledRecordFolderId, unfiledRecordFolderBodyUpdate, opts) {
        opts = opts || {};
        var postBody = unfiledRecordFolderBodyUpdate;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in updateUnfiledRecordFolder");
        }
        if (unfiledRecordFolderBodyUpdate === undefined || unfiledRecordFolderBodyUpdate === null) {
            throw new Error("Required param 'unfiledRecordFolderBodyUpdate' in updateUnfiledRecordFolder");
        }
        var pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderEntry);
    };
    return UnfiledRecordFoldersApi;
}(BaseApi));
export { UnfiledRecordFoldersApi };
//# sourceMappingURL=unfiledRecordFolders.api.js.map