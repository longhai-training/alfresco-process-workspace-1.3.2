/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import * as tslib_1 from "tslib";
import { UnfiledContainerAssociationPaging } from '../model/unfiledContainerAssociationPaging';
import { UnfiledContainerEntry } from '../model/unfiledContainerEntry';
import { BaseApi } from './base.api';
var UnfiledContainersApi = (function (_super) {
    tslib_1.__extends(UnfiledContainersApi, _super);
    function UnfiledContainersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnfiledContainersApi.prototype.createUnfiledContainerChildren = function (unfiledContainerId, nodeBodyCreate, opts) {
        opts = opts || {};
        var postBody = nodeBodyCreate;
        if (unfiledContainerId === undefined || unfiledContainerId === null) {
            throw new Error("Required param 'unfiledContainerId' in createUnfiledContainerChildren");
        }
        if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
            throw new Error("Required param 'nodeBodyCreate' in createUnfiledContainerChildren");
        }
        var pathParams = {
            'unfiledContainerId': unfiledContainerId
        };
        var queryParams = {
            'autoRename': opts['autoRename'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json', 'multipart/form-data'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerAssociationPaging);
    };
    UnfiledContainersApi.prototype.getUnfiledContainer = function (unfiledContainerId, opts) {
        opts = opts || {};
        var postBody = null;
        if (unfiledContainerId === undefined || unfiledContainerId === null) {
            throw new Error("Required param 'unfiledContainerId' in getUnfiledContainer");
        }
        var pathParams = {
            'unfiledContainerId': unfiledContainerId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerEntry);
    };
    UnfiledContainersApi.prototype.listUnfiledContainerChildren = function (unfiledContainerId, opts) {
        opts = opts || {};
        var postBody = null;
        if (unfiledContainerId === undefined || unfiledContainerId === null) {
            throw new Error("Required param 'unfiledContainerId' in listUnfiledContainerChildren");
        }
        var pathParams = {
            'unfiledContainerId': unfiledContainerId
        };
        var queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerAssociationPaging);
    };
    UnfiledContainersApi.prototype.updateUnfiledContainer = function (unfiledContainerId, unfiledContainerBodyUpdate, opts) {
        opts = opts || {};
        var postBody = unfiledContainerBodyUpdate;
        if (unfiledContainerId === undefined || unfiledContainerId === null) {
            throw new Error("Required param 'unfiledContainerId' in updateUnfiledContainer");
        }
        if (unfiledContainerBodyUpdate === undefined || unfiledContainerBodyUpdate === null) {
            throw new Error("Required param 'unfiledContainerBodyUpdate' in updateUnfiledContainer");
        }
        var pathParams = {
            'unfiledContainerId': unfiledContainerId
        };
        var queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        var headerParams = {};
        var formParams = {};
        var contentTypes = ['application/json'];
        var accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerEntry);
    };
    return UnfiledContainersApi;
}(BaseApi));
export { UnfiledContainersApi };
//# sourceMappingURL=unfiledContainers.api.js.map