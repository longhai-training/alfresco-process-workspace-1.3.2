"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const resultListDataRepresentationLightUserRepresentation_1 = require("../model/resultListDataRepresentationLightUserRepresentation");
const userRepresentation_1 = require("../model/userRepresentation");
const base_api_1 = require("./base.api");
class UsersApi extends base_api_1.BaseApi {
    executeAction(userId, actionRequest) {
        let postBody = actionRequest;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in executeAction");
        }
        if (actionRequest === undefined || actionRequest === null) {
            throw new Error("Required param 'actionRequest' in executeAction");
        }
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/users/{userId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getUserProfilePictureUrl(userId) {
        return this.apiClient.basePath + '/app/rest/users/' + userId + '/picture';
    }
    getUser(userId) {
        let postBody = null;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in getUser");
        }
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userRepresentation_1.UserRepresentation);
    }
    getUsers(opts) {
        opts = opts || {};
        let postBody = null;
        let pathParams = {};
        let queryParams = {
            'filter': opts['filter'],
            'email': opts['email'],
            'externalId': opts['externalId'],
            'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],
            'excludeTaskId': opts['excludeTaskId'],
            'excludeProcessId': opts['excludeProcessId'],
            'groupId': opts['groupId'],
            'tenantId': opts['tenantId']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationLightUserRepresentation_1.ResultListDataRepresentationLightUserRepresentation);
    }
    requestPasswordReset(resetPassword) {
        let postBody = resetPassword;
        if (resetPassword === undefined || resetPassword === null) {
            throw new Error("Required param 'resetPassword' in requestPasswordReset");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/idm/passwords', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    updateUser(userId, userRequest) {
        let postBody = userRequest;
        if (userId === undefined || userId === null) {
            throw new Error("Required param 'userId' in updateUser");
        }
        if (userRequest === undefined || userRequest === null) {
            throw new Error("Required param 'userRequest' in updateUser");
        }
        let pathParams = {
            'userId': userId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, userRepresentation_1.UserRepresentation);
    }
}
exports.UsersApi = UsersApi;
//# sourceMappingURL=users.api.js.map