"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const formDefinitionRepresentation_1 = require("../model/formDefinitionRepresentation");
const identityLinkRepresentation_1 = require("../model/identityLinkRepresentation");
const processInstanceAuditInfoRepresentation_1 = require("../model/processInstanceAuditInfoRepresentation");
const processInstanceRepresentation_1 = require("../model/processInstanceRepresentation");
const processInstanceVariableRepresentation_1 = require("../model/processInstanceVariableRepresentation");
const resultListDataRepresentationProcessContentRepresentation_1 = require("../model/resultListDataRepresentationProcessContentRepresentation");
const resultListDataRepresentationProcessInstanceRepresentation_1 = require("../model/resultListDataRepresentationProcessInstanceRepresentation");
const base_api_1 = require("./base.api");
class ProcessInstancesApi extends base_api_1.BaseApi {
    activateProcessInstance(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in activateProcessInstance");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/activate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceRepresentation_1.ProcessInstanceRepresentation);
    }
    createIdentityLink(processInstanceId, identityLinkRepresentation) {
        let postBody = identityLinkRepresentation;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in createIdentityLink");
        }
        if (identityLinkRepresentation === undefined || identityLinkRepresentation === null) {
            throw new Error("Required param 'identityLinkRepresentation' in createIdentityLink");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    deleteIdentityLink(processInstanceId, family, identityId, type) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in deleteIdentityLink");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in deleteIdentityLink");
        }
        if (identityId === undefined || identityId === null) {
            throw new Error("Required param 'identityId' in deleteIdentityLink");
        }
        if (type === undefined || type === null) {
            throw new Error("Required param 'type' in deleteIdentityLink");
        }
        let pathParams = {
            'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteProcessInstance(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in deleteProcessInstance");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    filterProcessInstances(filterRequest) {
        let postBody = filterRequest;
        if (filterRequest === undefined || filterRequest === null) {
            throw new Error("Required param 'filterRequest' in filterProcessInstances");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationProcessInstanceRepresentation_1.ResultListDataRepresentationProcessInstanceRepresentation);
    }
    getHistoricProcessInstanceVariables(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getHistoricProcessInstanceVariables");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/historic-variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceVariableRepresentation_1.ProcessInstanceVariableRepresentation);
    }
    getHistoricProcessInstances(queryRequest) {
        let postBody = queryRequest;
        if (queryRequest === undefined || queryRequest === null) {
            throw new Error("Required param 'queryRequest' in getHistoricProcessInstances");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/historic-process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationProcessInstanceRepresentation_1.ResultListDataRepresentationProcessInstanceRepresentation);
    }
    getIdentityLinkType(processInstanceId, family, identityId, type) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getIdentityLinkType");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in getIdentityLinkType");
        }
        if (identityId === undefined || identityId === null) {
            throw new Error("Required param 'identityId' in getIdentityLinkType");
        }
        if (type === undefined || type === null) {
            throw new Error("Required param 'type' in getIdentityLinkType");
        }
        let pathParams = {
            'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getIdentityLinksForFamily(processInstanceId, family) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getIdentityLinksForFamily");
        }
        if (family === undefined || family === null) {
            throw new Error("Required param 'family' in getIdentityLinksForFamily");
        }
        let pathParams = {
            'processInstanceId': processInstanceId, 'family': family
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getIdentityLinks(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getIdentityLinks");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, identityLinkRepresentation_1.IdentityLinkRepresentation);
    }
    getProcessInstanceContent(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getProcessInstanceContent");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/field-content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationProcessContentRepresentation_1.ResultListDataRepresentationProcessContentRepresentation);
    }
    getProcessInstanceDiagram(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getProcessInstanceDiagram");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['image/png'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/diagram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getProcessInstanceStartForm(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getProcessInstanceStartForm");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formDefinitionRepresentation_1.FormDefinitionRepresentation);
    }
    getProcessInstance(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getProcessInstance");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceRepresentation_1.ProcessInstanceRepresentation);
    }
    getProcessInstances(processInstancesQuery) {
        let postBody = processInstancesQuery;
        if (processInstancesQuery === undefined || processInstancesQuery === null) {
            throw new Error("Required param 'processInstancesQuery' in getProcessInstances");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationProcessInstanceRepresentation_1.ResultListDataRepresentationProcessInstanceRepresentation);
    }
    getTaskAuditLog(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in getTaskAuditLog");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/audit-log', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceAuditInfoRepresentation_1.ProcessInstanceAuditInfoRepresentation);
    }
    getProcessAuditPdf(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw "Missing param 'processId' in getProcessAuditPdf";
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let contextRoot = null;
        let responseType = null;
        return this.apiClient.callApi('/app/rest/process-instances/{processInstanceId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, null, contextRoot, responseType);
    }
    startNewProcessInstance(startRequest) {
        let postBody = startRequest;
        if (startRequest === undefined || startRequest === null) {
            throw new Error("Required param 'startRequest' in startNewProcessInstance");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceRepresentation_1.ProcessInstanceRepresentation);
    }
    suspendProcessInstance(processInstanceId) {
        let postBody = null;
        if (processInstanceId === undefined || processInstanceId === null) {
            throw new Error("Required param 'processInstanceId' in suspendProcessInstance");
        }
        let pathParams = {
            'processInstanceId': processInstanceId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/suspend', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceRepresentation_1.ProcessInstanceRepresentation);
    }
}
exports.ProcessInstancesApi = ProcessInstancesApi;
//# sourceMappingURL=processInstances.api.js.map