"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const formDefinitionRepresentation_1 = require("../model/formDefinitionRepresentation");
const formValueRepresentation_1 = require("../model/formValueRepresentation");
const processInstanceVariableRepresentation_1 = require("../model/processInstanceVariableRepresentation");
const base_api_1 = require("./base.api");
class TaskFormsApi extends base_api_1.BaseApi {
    completeTaskForm(taskId, completeTaskFormRepresentation) {
        let postBody = completeTaskFormRepresentation;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in completeTaskForm");
        }
        if (completeTaskFormRepresentation === undefined || completeTaskFormRepresentation === null) {
            throw new Error("Required param 'completeTaskFormRepresentation' in completeTaskForm");
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getProcessInstanceVariables(taskId) {
        let postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getProcessInstanceVariables");
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, processInstanceVariableRepresentation_1.ProcessInstanceVariableRepresentation);
    }
    getRestFieldColumnValues(taskId, field, column) {
        let postBody = null;
        if (taskId === undefined || taskId === null) {
            throw "Missing param 'taskId' in getRestFieldValues";
        }
        if (field === undefined || field === null) {
            throw "Missing param 'field' in getRestFieldValues";
        }
        if (column === undefined || column === null) {
            throw "Missing param 'column' in getRestFieldValues";
        }
        let pathParams = {
            'taskId': taskId,
            'field': field,
            'column': column
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getRestFieldValues(taskId, field) {
        let postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getRestFieldValues");
        }
        if (field === undefined || field === null) {
            throw new Error("Required param 'field' in getRestFieldValues");
        }
        let pathParams = {
            'taskId': taskId, 'field': field
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formValueRepresentation_1.FormValueRepresentation);
    }
    getTaskForm(taskId) {
        let postBody = null;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in getTaskForm");
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formDefinitionRepresentation_1.FormDefinitionRepresentation);
    }
    saveTaskForm(taskId, saveTaskFormRepresentation) {
        let postBody = saveTaskFormRepresentation;
        if (taskId === undefined || taskId === null) {
            throw new Error("Required param 'taskId' in saveTaskForm");
        }
        if (saveTaskFormRepresentation === undefined || saveTaskFormRepresentation === null) {
            throw new Error("Required param 'saveTaskFormRepresentation' in saveTaskForm");
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/save-form', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getTaskFormVariables(taskId) {
        let postBody = null;
        if (taskId === undefined || taskId === null) {
            throw "Missing param 'taskId' in getTaskFormVariables";
        }
        let pathParams = {
            'taskId': taskId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
}
exports.TaskFormsApi = TaskFormsApi;
//# sourceMappingURL=taskForms.api.js.map