"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const imageUploadRepresentation_1 = require("../model/imageUploadRepresentation");
const lightTenantRepresentation_1 = require("../model/lightTenantRepresentation");
const tenantEvent_1 = require("../model/tenantEvent");
const tenantRepresentation_1 = require("../model/tenantRepresentation");
const base_api_1 = require("./base.api");
class AdminTenantsApi extends base_api_1.BaseApi {
    createTenant(createTenantRepresentation) {
        let postBody = createTenantRepresentation;
        if (createTenantRepresentation === undefined || createTenantRepresentation === null) {
            throw new Error("Required param 'createTenantRepresentation' in createTenant");
        }
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, lightTenantRepresentation_1.LightTenantRepresentation);
    }
    deleteTenant(tenantId) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in deleteTenant");
        }
        let pathParams = {
            'tenantId': tenantId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getTenantEvents(tenantId) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getTenantEvents");
        }
        let pathParams = {
            'tenantId': tenantId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tenantEvent_1.TenantEvent);
    }
    getTenantLogo(tenantId) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getTenantLogo");
        }
        let pathParams = {
            'tenantId': tenantId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/logo', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getTenant(tenantId) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in getTenant");
        }
        let pathParams = {
            'tenantId': tenantId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tenantRepresentation_1.TenantRepresentation);
    }
    getTenants() {
        let postBody = null;
        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, lightTenantRepresentation_1.LightTenantRepresentation);
    }
    update(tenantId, createTenantRepresentation) {
        let postBody = createTenantRepresentation;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in update");
        }
        if (createTenantRepresentation === undefined || createTenantRepresentation === null) {
            throw new Error("Required param 'createTenantRepresentation' in update");
        }
        let pathParams = {
            'tenantId': tenantId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, tenantRepresentation_1.TenantRepresentation);
    }
    uploadTenantLogo(tenantId, file) {
        let postBody = null;
        if (tenantId === undefined || tenantId === null) {
            throw new Error("Required param 'tenantId' in uploadTenantLogo");
        }
        if (file === undefined || file === null) {
            throw new Error("Required param 'file' in uploadTenantLogo");
        }
        let pathParams = {
            'tenantId': tenantId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {
            'file': file
        };
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/logo', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, imageUploadRepresentation_1.ImageUploadRepresentation);
    }
}
exports.AdminTenantsApi = AdminTenantsApi;
//# sourceMappingURL=adminTenants.api.js.map