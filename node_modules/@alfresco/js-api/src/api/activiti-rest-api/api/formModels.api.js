"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const formDefinitionRepresentation_1 = require("../model/formDefinitionRepresentation");
const formRepresentation_1 = require("../model/formRepresentation");
const resultListDataRepresentationFormRepresentation_1 = require("../model/resultListDataRepresentationFormRepresentation");
const resultListDataRepresentationRuntimeFormRepresentation_1 = require("../model/resultListDataRepresentationRuntimeFormRepresentation");
const validationErrorRepresentation_1 = require("../model/validationErrorRepresentation");
const base_api_1 = require("./base.api");
class FormModelsApi extends base_api_1.BaseApi {
    getFormEditorJson(formId) {
        let postBody = null;
        if (formId === undefined || formId === null) {
            throw new Error("Required param 'formId' in getFormEditorJson");
        }
        let pathParams = {
            'formId': formId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/forms/{formId}/editorJson', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formDefinitionRepresentation_1.FormDefinitionRepresentation);
    }
    getFormHistory(formId, formHistoryId) {
        let postBody = null;
        if (formId === undefined || formId === null) {
            throw new Error("Required param 'formId' in getFormHistory");
        }
        if (formHistoryId === undefined || formHistoryId === null) {
            throw new Error("Required param 'formHistoryId' in getFormHistory");
        }
        let pathParams = {
            'formId': formId, 'formHistoryId': formHistoryId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/history/{formHistoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formRepresentation_1.FormRepresentation);
    }
    getForm(formId) {
        let postBody = null;
        if (formId === undefined || formId === null) {
            throw new Error("Required param 'formId' in getForm");
        }
        let pathParams = {
            'formId': formId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formRepresentation_1.FormRepresentation);
    }
    getForms(input) {
        let postBody = null;
        let pathParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        if (input instanceof String) {
            let queryParams = {
                'formId': this.apiClient.buildCollectionParam(input, 'multi')
            };
            return this.apiClient.callApi('/api/enterprise/editor/form-models/values', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formRepresentation_1.FormRepresentation);
        }
        else if (input instanceof Object) {
            input = input || {};
            let queryParams = {
                'nameLike': input['nameLike'],
                'appId': input['appId'],
                'tenantId': input['tenantId'],
                'start': input['start'],
                'sort': input['sort'],
                'order': input['order'],
                'size': input['size']
            };
            return this.apiClient.callApi('/api/enterprise/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationRuntimeFormRepresentation_1.ResultListDataRepresentationRuntimeFormRepresentation);
        }
        else {
            let queryParams = {};
            return this.apiClient.callApi('/api/enterprise/editor/form-models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, resultListDataRepresentationFormRepresentation_1.ResultListDataRepresentationFormRepresentation);
        }
    }
    saveForm(formId, saveRepresentation) {
        let postBody = saveRepresentation;
        if (formId === undefined || formId === null) {
            throw new Error("Required param 'formId' in saveForm");
        }
        if (saveRepresentation === undefined || saveRepresentation === null) {
            throw new Error("Required param 'saveRepresentation' in saveForm");
        }
        let pathParams = {
            'formId': formId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, formRepresentation_1.FormRepresentation);
    }
    validateModel(formId, saveRepresentation) {
        let postBody = saveRepresentation;
        if (formId === undefined || formId === null) {
            throw new Error("Required param 'formId' in validateModel");
        }
        if (saveRepresentation === undefined || saveRepresentation === null) {
            throw new Error("Required param 'saveRepresentation' in validateModel");
        }
        let pathParams = {
            'formId': formId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/validate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, validationErrorRepresentation_1.ValidationErrorRepresentation);
    }
}
exports.FormModelsApi = FormModelsApi;
//# sourceMappingURL=formModels.api.js.map