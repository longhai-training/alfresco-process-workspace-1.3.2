"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const associationEntry_1 = require("../model/associationEntry");
const childAssociationEntry_1 = require("../model/childAssociationEntry");
const nodeAssociationPaging_1 = require("../model/nodeAssociationPaging");
const nodeChildAssociationPaging_1 = require("../model/nodeChildAssociationPaging");
const nodeEntry_1 = require("../model/nodeEntry");
const base_api_1 = require("./base.api");
class NodesApi extends base_api_1.BaseApi {
    copyNode(nodeId, nodeBodyCopy, opts) {
        opts = opts || {};
        let postBody = nodeBodyCopy;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in copyNode");
        }
        if (nodeBodyCopy === undefined || nodeBodyCopy === null) {
            throw new Error("Required param 'nodeBodyCopy' in copyNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/copy', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
    createAssociation(nodeId, associationBodyCreate, opts) {
        opts = opts || {};
        let postBody = associationBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createAssociation");
        }
        if (associationBodyCreate === undefined || associationBodyCreate === null) {
            throw new Error("Required param 'associationBodyCreate' in createAssociation");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/targets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, associationEntry_1.AssociationEntry);
    }
    createNode(nodeId, nodeBodyCreate, opts, formParams) {
        opts = opts || {};
        let postBody = nodeBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createNode");
        }
        if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
            throw new Error("Required param 'nodeBodyCreate' in createNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'autoRename': opts['autoRename'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        formParams = formParams || {};
        let contentTypes, returnType = null;
        if (formParams.filedata) {
            contentTypes = ['multipart/form-data'];
        }
        else {
            contentTypes = ['application/json'];
            returnType = nodeEntry_1.NodeEntry;
        }
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, returnType);
    }
    createSecondaryChildAssociation(nodeId, secondaryChildAssociationBodyCreate, opts) {
        opts = opts || {};
        let postBody = secondaryChildAssociationBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createSecondaryChildAssociation");
        }
        if (secondaryChildAssociationBodyCreate === undefined || secondaryChildAssociationBodyCreate === null) {
            throw new Error("Required param 'secondaryChildAssociationBodyCreate' in createSecondaryChildAssociation");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, childAssociationEntry_1.ChildAssociationEntry);
    }
    deleteAssociation(nodeId, targetId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in deleteAssociation");
        }
        if (targetId === undefined || targetId === null) {
            throw new Error("Required param 'targetId' in deleteAssociation");
        }
        let pathParams = {
            'nodeId': nodeId, 'targetId': targetId
        };
        let queryParams = {
            'assocType': opts['assocType']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/targets/{targetId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteNode(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in deleteNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'permanent': opts['permanent']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    deleteSecondaryChildAssociation(nodeId, childId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in deleteSecondaryChildAssociation");
        }
        if (childId === undefined || childId === null) {
            throw new Error("Required param 'childId' in deleteSecondaryChildAssociation");
        }
        let pathParams = {
            'nodeId': nodeId, 'childId': childId
        };
        let queryParams = {
            'assocType': opts['assocType']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/secondary-children/{childId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getNode(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
    getNodeContent(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getNodeContent");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'attachment': opts['attachment']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listNodeChildren(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listNodeChildren");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeChildAssociationPaging_1.NodeChildAssociationPaging);
    }
    listParents(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listParents");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/parents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeAssociationPaging_1.NodeAssociationPaging);
    }
    listSecondaryChildren(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listSecondaryChildren");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeChildAssociationPaging_1.NodeChildAssociationPaging);
    }
    listSourceAssociations(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listSourceAssociations");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeAssociationPaging_1.NodeAssociationPaging);
    }
    listTargetAssociations(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listTargetAssociations");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/targets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeAssociationPaging_1.NodeAssociationPaging);
    }
    lockNode(nodeId, nodeBodyLock, opts) {
        opts = opts || {};
        let postBody = nodeBodyLock;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in lockNode");
        }
        if (nodeBodyLock === undefined || nodeBodyLock === null) {
            throw new Error("Required param 'nodeBodyLock' in lockNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/lock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
    moveNode(nodeId, nodeBodyMove, opts) {
        opts = opts || {};
        let postBody = nodeBodyMove;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in moveNode");
        }
        if (nodeBodyMove === undefined || nodeBodyMove === null) {
            throw new Error("Required param 'nodeBodyMove' in moveNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/move', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
    unlockNode(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in unlockNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/unlock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
    updateNode(nodeId, nodeBodyUpdate, opts) {
        opts = opts || {};
        let postBody = nodeBodyUpdate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in updateNode");
        }
        if (nodeBodyUpdate === undefined || nodeBodyUpdate === null) {
            throw new Error("Required param 'nodeBodyUpdate' in updateNode");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
    updateNodeContent(nodeId, contentBodyUpdate, opts) {
        opts = opts || {};
        let postBody = contentBodyUpdate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in updateNodeContent");
        }
        if (contentBodyUpdate === undefined || contentBodyUpdate === null) {
            throw new Error("Required param 'contentBodyUpdate' in updateNodeContent");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'majorVersion': opts['majorVersion'],
            'comment': opts['comment'],
            'name': opts['name'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/octet-stream'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/content', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodeEntry_1.NodeEntry);
    }
}
exports.NodesApi = NodesApi;
//# sourceMappingURL=nodes.api.js.map