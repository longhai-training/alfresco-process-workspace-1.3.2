"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const renditionEntry_1 = require("../model/renditionEntry");
const renditionPaging_1 = require("../model/renditionPaging");
const base_api_1 = require("./base.api");
class RenditionsApi extends base_api_1.BaseApi {
    createRendition(nodeId, renditionBodyCreate) {
        let postBody = renditionBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createRendition");
        }
        if (renditionBodyCreate === undefined || renditionBodyCreate === null) {
            throw new Error("Required param 'renditionBodyCreate' in createRendition");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getRendition(nodeId, renditionId) {
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getRendition");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getRendition");
        }
        let pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, renditionEntry_1.RenditionEntry);
    }
    getRenditionContent(nodeId, renditionId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in getRenditionContent");
        }
        if (renditionId === undefined || renditionId === null) {
            throw new Error("Required param 'renditionId' in getRenditionContent");
        }
        let pathParams = {
            'nodeId': nodeId, 'renditionId': renditionId
        };
        let queryParams = {
            'attachment': opts['attachment'],
            'placeholder': opts['placeholder']
        };
        let headerParams = {
            'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
        };
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listRenditions(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listRenditions");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'where': opts['where']
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, renditionPaging_1.RenditionPaging);
    }
}
exports.RenditionsApi = RenditionsApi;
//# sourceMappingURL=renditions.api.js.map