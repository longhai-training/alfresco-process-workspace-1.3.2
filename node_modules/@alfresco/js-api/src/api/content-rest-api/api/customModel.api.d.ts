/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { AlfrescoApi } from '../../../alfrescoApi';
import { AlfrescoApiClient } from '../../../alfrescoApiClient';
/**
 * Comments service.
 * @module api/CustomModelApi
 * @version 0.1.0
 */
/**
 * Constructs a new CustomModelApi.
 * @alias module:api/CustomModelApi
 * @class
 * @param {module:ApiClient} apiClient Optional API client implementation to use, default to {@link module:ApiClient#instance}
 * if unspecified.
 */
export declare class CustomModelApi {
    private: boolean;
    apiClient: AlfrescoApiClient;
    constructor(alfrescoApi?: AlfrescoApi);
    /**
     * create Custom Model
     */
    createCustomModel(status: string, description: string, name: string, namespaceUri: string, namespacePrefix: string): Promise<any>;
    /**
     * Create a custom type
     */
    createCustomType(modelName: string, name: string, parentName?: string, title?: string, description?: string): Promise<any>;
    /**
     * Create a custom aspect
     */
    createCustomAspect(modelName: string, name: string, parentName?: string, title?: string, description?: string): Promise<any>;
    /**
     * Create a custom constraint
     */
    createCustomConstraint(modelName: string, name: string, type: string, parameters?: any): Promise<any>;
    /**
     * Activate the custom model
     */
    activateCustomModel(modelName: string): Promise<any>;
    /**
     * Deactivate the custom model
     */
    deactivateCustomModel(modelName: string): Promise<any>;
    /**
     * Add property into an existing aspect
     */
    addPropertyToAspect(modelName: string, aspectName: string, properties?: any[]): Promise<any>;
    /**
     * Add Property into an existing type
     */
    addPropertyToType(modelName: string, typeName: string, properties?: any[], aspectName?: string): Promise<any>;
    /**
     * Edit an existing custom model
     */
    updateCustomModel(modelName: string, description?: string, namespaceUri?: string, namespacePrefix?: string): Promise<any>;
    /**
     * Edit an existing custom model type
     */
    updateCustomType(modelName: string, typeName: string, description?: string, parentName?: string, title?: string): Promise<any>;
    /**
     * Edit an existing custom model aspect
     */
    updateCustomAspect(modelName: string, aspectName: string, description?: string, parentName?: string, title?: string): Promise<any>;
    /**
     * Get all custom models
     */
    getAllCustomModel(): Promise<any>;
    /**
     * Get custom model
     */
    getCustomModel(modelName: string, queryParamsInput?: any): Promise<any>;
    /**
     * Get all custom model types
     */
    getAllCustomType(modelName: string): Promise<any>;
    /**
     * Get custom model type
     */
    getCustomType(modelName: string, typeName?: string, queryParamsInput?: any): Promise<any>;
    /**
     * Get all custom model aspect
     */
    getAllCustomAspect(modelName: string, queryParamsInput?: any): Promise<any>;
    /**
     * Get custom model aspect
     */
    getCustomAspect(modelName: string, aspectName: string, queryParamsInput?: any): Promise<any>;
    /**
     * Get all custom model defined constraints
     */
    getAllCustomConstraints(modelName: string, queryParamsInput?: any): Promise<any>;
    /**
     * Get custom model defined constraints
     */
    getCustomConstraints(modelName: string, constraintName: string, queryParamsInput?: any): Promise<any>;
    /**
     * Delete the given custom model
     */
    deleteCustomModel(modelName: string): Promise<any>;
    /**
     * Delete the given custom type
     */
    deleteCustomType(modelName: string, typeName: string): Promise<any>;
}
