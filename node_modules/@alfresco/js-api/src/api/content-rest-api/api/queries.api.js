"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const nodePaging_1 = require("../model/nodePaging");
const personPaging_1 = require("../model/personPaging");
const sitePaging_1 = require("../model/sitePaging");
const base_api_1 = require("./base.api");
class QueriesApi extends base_api_1.BaseApi {
    findNodes(term, opts) {
        opts = opts || {};
        let postBody = null;
        if (term === undefined || term === null) {
            throw new Error("Required param 'term' in findNodes");
        }
        let pathParams = {};
        let queryParams = {
            'term': term,
            'rootNodeId': opts['rootNodeId'],
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'nodeType': opts['nodeType'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/queries/nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, nodePaging_1.NodePaging);
    }
    findPeople(term, opts) {
        opts = opts || {};
        let postBody = null;
        if (term === undefined || term === null) {
            throw new Error("Required param 'term' in findPeople");
        }
        let pathParams = {};
        let queryParams = {
            'term': term,
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/queries/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, personPaging_1.PersonPaging);
    }
    findSites(term, opts) {
        opts = opts || {};
        let postBody = null;
        if (term === undefined || term === null) {
            throw new Error("Required param 'term' in findSites");
        }
        let pathParams = {};
        let queryParams = {
            'term': term,
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/queries/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, sitePaging_1.SitePaging);
    }
}
exports.QueriesApi = QueriesApi;
//# sourceMappingURL=queries.api.js.map