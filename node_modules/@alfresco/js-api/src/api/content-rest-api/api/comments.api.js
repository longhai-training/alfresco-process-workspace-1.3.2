"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const commentEntry_1 = require("../model/commentEntry");
const commentPaging_1 = require("../model/commentPaging");
const base_api_1 = require("./base.api");
class CommentsApi extends base_api_1.BaseApi {
    createComment(nodeId, commentBodyCreate, opts) {
        opts = opts || {};
        let postBody = commentBodyCreate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in createComment");
        }
        if (commentBodyCreate === undefined || commentBodyCreate === null) {
            throw new Error("Required param 'commentBodyCreate' in createComment");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, commentEntry_1.CommentEntry);
    }
    deleteComment(nodeId, commentId) {
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in deleteComment");
        }
        if (commentId === undefined || commentId === null) {
            throw new Error("Required param 'commentId' in deleteComment");
        }
        let pathParams = {
            'nodeId': nodeId, 'commentId': commentId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    listComments(nodeId, opts) {
        opts = opts || {};
        let postBody = null;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in listComments");
        }
        let pathParams = {
            'nodeId': nodeId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, commentPaging_1.CommentPaging);
    }
    updateComment(nodeId, commentId, commentBodyUpdate, opts) {
        opts = opts || {};
        let postBody = commentBodyUpdate;
        if (nodeId === undefined || nodeId === null) {
            throw new Error("Required param 'nodeId' in updateComment");
        }
        if (commentId === undefined || commentId === null) {
            throw new Error("Required param 'commentId' in updateComment");
        }
        if (commentBodyUpdate === undefined || commentBodyUpdate === null) {
            throw new Error("Required param 'commentBodyUpdate' in updateComment");
        }
        let pathParams = {
            'nodeId': nodeId, 'commentId': commentId
        };
        let queryParams = {
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, commentEntry_1.CommentEntry);
    }
}
exports.CommentsApi = CommentsApi;
//# sourceMappingURL=comments.api.js.map