"use strict";
/*!
* @license
* Copyright 2018 Alfresco Software, Ltd.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const unfiledRecordFolderAssociationPaging_1 = require("../model/unfiledRecordFolderAssociationPaging");
const unfiledRecordFolderEntry_1 = require("../model/unfiledRecordFolderEntry");
const base_api_1 = require("./base.api");
class UnfiledRecordFoldersApi extends base_api_1.BaseApi {
    createUnfiledRecordFolderChildren(unfiledRecordFolderId, nodeBodyCreate, opts) {
        opts = opts || {};
        let postBody = nodeBodyCreate;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in createUnfiledRecordFolderChildren");
        }
        if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
            throw new Error("Required param 'nodeBodyCreate' in createUnfiledRecordFolderChildren");
        }
        let pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        let queryParams = {
            'autoRename': opts['autoRename'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json', 'multipart/form-data'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, unfiledRecordFolderAssociationPaging_1.UnfiledRecordFolderAssociationPaging);
    }
    deleteUnfiledRecordFolder(unfiledRecordFolderId) {
        let postBody = null;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in deleteUnfiledRecordFolder");
        }
        let pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
    }
    getUnfiledRecordFolder(unfiledRecordFolderId, opts) {
        opts = opts || {};
        let postBody = null;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in getUnfiledRecordFolder");
        }
        let pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, unfiledRecordFolderEntry_1.UnfiledRecordFolderEntry);
    }
    listUnfiledRecordFolderChildren(unfiledRecordFolderId, opts) {
        opts = opts || {};
        let postBody = null;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in listUnfiledRecordFolderChildren");
        }
        let pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        let queryParams = {
            'skipCount': opts['skipCount'],
            'maxItems': opts['maxItems'],
            'where': opts['where'],
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'relativePath': opts['relativePath'],
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, unfiledRecordFolderAssociationPaging_1.UnfiledRecordFolderAssociationPaging);
    }
    updateUnfiledRecordFolder(unfiledRecordFolderId, unfiledRecordFolderBodyUpdate, opts) {
        opts = opts || {};
        let postBody = unfiledRecordFolderBodyUpdate;
        if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
            throw new Error("Required param 'unfiledRecordFolderId' in updateUnfiledRecordFolder");
        }
        if (unfiledRecordFolderBodyUpdate === undefined || unfiledRecordFolderBodyUpdate === null) {
            throw new Error("Required param 'unfiledRecordFolderBodyUpdate' in updateUnfiledRecordFolder");
        }
        let pathParams = {
            'unfiledRecordFolderId': unfiledRecordFolderId
        };
        let queryParams = {
            'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
            'includeSource': opts['includeSource'],
            'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
        };
        let headerParams = {};
        let formParams = {};
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, unfiledRecordFolderEntry_1.UnfiledRecordFolderEntry);
    }
}
exports.UnfiledRecordFoldersApi = UnfiledRecordFoldersApi;
//# sourceMappingURL=unfiledRecordFolders.api.js.map