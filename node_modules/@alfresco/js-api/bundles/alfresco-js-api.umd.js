/**
  @license
  
                              Apache License
                        Version 2.0, January 2004
                     http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

   "License" shall mean the terms and conditions for use, reproduction,
   and distribution as defined by Sections 1 through 9 of this document.

   "Licensor" shall mean the copyright owner or entity authorized by
   the copyright owner that is granting the License.

   "Legal Entity" shall mean the union of the acting entity and all
   other entities that control, are controlled by, or are under common
   control with that entity. For the purposes of this definition,
   "control" means (i) the power, direct or indirect, to cause the
   direction or management of such entity, whether by contract or
   otherwise, or (ii) ownership of fifty percent (50%) or more of the
   outstanding shares, or (iii) beneficial ownership of such entity.

   "You" (or "Your") shall mean an individual or Legal Entity
   exercising permissions granted by this License.

   "Source" form shall mean the preferred form for making modifications,
   including but not limited to software source code, documentation
   source, and configuration files.

   "Object" form shall mean any form resulting from mechanical
   transformation or translation of a Source form, including but
   not limited to compiled object code, generated documentation,
   and conversions to other media types.

   "Work" shall mean the work of authorship, whether in Source or
   Object form, made available under the License, as indicated by a
   copyright notice that is included in or attached to the work
   (an example is provided in the Appendix below).

   "Derivative Works" shall mean any work, whether in Source or Object
   form, that is based on (or derived from) the Work and for which the
   editorial revisions, annotations, elaborations, or other modifications
   represent, as a whole, an original work of authorship. For the purposes
   of this License, Derivative Works shall not include works that remain
   separable from, or merely link (or bind by name) to the interfaces of,
   the Work and Derivative Works thereof.

   "Contribution" shall mean any work of authorship, including
   the original version of the Work and any modifications or additions
   to that Work or Derivative Works thereof, that is intentionally
   submitted to Licensor for inclusion in the Work by the copyright owner
   or by an individual or Legal Entity authorized to submit on behalf of
   the copyright owner. For the purposes of this definition, "submitted"
   means any form of electronic, verbal, or written communication sent
   to the Licensor or its representatives, including but not limited to
   communication on electronic mailing lists, source code control systems,
   and issue tracking systems that are managed by, or on behalf of, the
   Licensor for the purpose of discussing and improving the Work, but
   excluding communication that is conspicuously marked or otherwise
   designated in writing by the copyright owner as "Not a Contribution."

   "Contributor" shall mean Licensor and any individual or Legal Entity
   on behalf of whom a Contribution has been received by Licensor and
   subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   copyright license to reproduce, prepare Derivative Works of,
   publicly display, publicly perform, sublicense, and distribute the
   Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   (except as stated in this section) patent license to make, have made,
   use, offer to sell, sell, import, and otherwise transfer the Work,
   where such license applies only to those patent claims licensable
   by such Contributor that are necessarily infringed by their
   Contribution(s) alone or by combination of their Contribution(s)
   with the Work to which such Contribution(s) was submitted. If You
   institute patent litigation against any entity (including a
   cross-claim or counterclaim in a lawsuit) alleging that the Work
   or a Contribution incorporated within the Work constitutes direct
   or contributory patent infringement, then any patent licenses
   granted to You under this License for that Work shall terminate
   as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the
   Work or Derivative Works thereof in any medium, with or without
   modifications, and in Source or Object form, provided that You
   meet the following conditions:

   (a) You must give any other recipients of the Work or
       Derivative Works a copy of this License; and

   (b) You must cause any modified files to carry prominent notices
       stating that You changed the files; and

   (c) You must retain, in the Source form of any Derivative Works
       that You distribute, all copyright, patent, trademark, and
       attribution notices from the Source form of the Work,
       excluding those notices that do not pertain to any part of
       the Derivative Works; and

   (d) If the Work includes a "NOTICE" text file as part of its
       distribution, then any Derivative Works that You distribute must
       include a readable copy of the attribution notices contained
       within such NOTICE file, excluding those notices that do not
       pertain to any part of the Derivative Works, in at least one
       of the following places: within a NOTICE text file distributed
       as part of the Derivative Works; within the Source form or
       documentation, if provided along with the Derivative Works; or,
       within a display generated by the Derivative Works, if and
       wherever such third-party notices normally appear. The contents
       of the NOTICE file are for informational purposes only and
       do not modify the License. You may add Your own attribution
       notices within Derivative Works that You distribute, alongside
       or as an addendum to the NOTICE text from the Work, provided
       that such additional attribution notices cannot be construed
       as modifying the License.

   You may add Your own copyright statement to Your modifications and
   may provide additional or different license terms and conditions
   for use, reproduction, or distribution of Your modifications, or
   for any such Derivative Works as a whole, provided Your use,
   reproduction, and distribution of the Work otherwise complies with
   the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise,
   any Contribution intentionally submitted for inclusion in the Work
   by You to the Licensor shall be under the terms and conditions of
   this License, without any additional terms or conditions.
   Notwithstanding the above, nothing herein shall supersede or modify
   the terms of any separate license agreement you may have executed
   with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade
   names, trademarks, service marks, or product names of the Licensor,
   except as required for reasonable and customary use in describing the
   origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or
   agreed to in writing, Licensor provides the Work (and each
   Contributor provides its Contributions) on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied, including, without limitation, any warranties or conditions
   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
   PARTICULAR PURPOSE. You are solely responsible for determining the
   appropriateness of using or redistributing the Work and assume any
   risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory,
   whether in tort (including negligence), contract, or otherwise,
   unless required by applicable law (such as deliberate and grossly
   negligent acts) or agreed to in writing, shall any Contributor be
   liable to You for damages, including any direct, indirect, special,
   incidental, or consequential damages of any character arising as a
   result of this License or out of the use or inability to use the
   Work (including but not limited to damages for loss of goodwill,
   work stoppage, computer failure or malfunction, or any and all
   other commercial damages or losses), even if such Contributor
   has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing
   the Work or Derivative Works thereof, You may choose to offer,
   and charge a fee for, acceptance of support, warranty, indemnity,
   or other liability obligations and/or rights consistent with this
   License. However, in accepting such obligations, You may act only
   on Your own behalf and on Your sole responsibility, not on behalf
   of any other Contributor, and only if You agree to indemnify,
   defend, and hold each Contributor harmless for any liability
   incurred by, or claims asserted against, such Contributor by reason
   of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

 **/
/**
  @license
  
                              Apache License
                        Version 2.0, January 2004
                     http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

   "License" shall mean the terms and conditions for use, reproduction,
   and distribution as defined by Sections 1 through 9 of this document.

   "Licensor" shall mean the copyright owner or entity authorized by
   the copyright owner that is granting the License.

   "Legal Entity" shall mean the union of the acting entity and all
   other entities that control, are controlled by, or are under common
   control with that entity. For the purposes of this definition,
   "control" means (i) the power, direct or indirect, to cause the
   direction or management of such entity, whether by contract or
   otherwise, or (ii) ownership of fifty percent (50%) or more of the
   outstanding shares, or (iii) beneficial ownership of such entity.

   "You" (or "Your") shall mean an individual or Legal Entity
   exercising permissions granted by this License.

   "Source" form shall mean the preferred form for making modifications,
   including but not limited to software source code, documentation
   source, and configuration files.

   "Object" form shall mean any form resulting from mechanical
   transformation or translation of a Source form, including but
   not limited to compiled object code, generated documentation,
   and conversions to other media types.

   "Work" shall mean the work of authorship, whether in Source or
   Object form, made available under the License, as indicated by a
   copyright notice that is included in or attached to the work
   (an example is provided in the Appendix below).

   "Derivative Works" shall mean any work, whether in Source or Object
   form, that is based on (or derived from) the Work and for which the
   editorial revisions, annotations, elaborations, or other modifications
   represent, as a whole, an original work of authorship. For the purposes
   of this License, Derivative Works shall not include works that remain
   separable from, or merely link (or bind by name) to the interfaces of,
   the Work and Derivative Works thereof.

   "Contribution" shall mean any work of authorship, including
   the original version of the Work and any modifications or additions
   to that Work or Derivative Works thereof, that is intentionally
   submitted to Licensor for inclusion in the Work by the copyright owner
   or by an individual or Legal Entity authorized to submit on behalf of
   the copyright owner. For the purposes of this definition, "submitted"
   means any form of electronic, verbal, or written communication sent
   to the Licensor or its representatives, including but not limited to
   communication on electronic mailing lists, source code control systems,
   and issue tracking systems that are managed by, or on behalf of, the
   Licensor for the purpose of discussing and improving the Work, but
   excluding communication that is conspicuously marked or otherwise
   designated in writing by the copyright owner as "Not a Contribution."

   "Contributor" shall mean Licensor and any individual or Legal Entity
   on behalf of whom a Contribution has been received by Licensor and
   subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   copyright license to reproduce, prepare Derivative Works of,
   publicly display, publicly perform, sublicense, and distribute the
   Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   (except as stated in this section) patent license to make, have made,
   use, offer to sell, sell, import, and otherwise transfer the Work,
   where such license applies only to those patent claims licensable
   by such Contributor that are necessarily infringed by their
   Contribution(s) alone or by combination of their Contribution(s)
   with the Work to which such Contribution(s) was submitted. If You
   institute patent litigation against any entity (including a
   cross-claim or counterclaim in a lawsuit) alleging that the Work
   or a Contribution incorporated within the Work constitutes direct
   or contributory patent infringement, then any patent licenses
   granted to You under this License for that Work shall terminate
   as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the
   Work or Derivative Works thereof in any medium, with or without
   modifications, and in Source or Object form, provided that You
   meet the following conditions:

   (a) You must give any other recipients of the Work or
       Derivative Works a copy of this License; and

   (b) You must cause any modified files to carry prominent notices
       stating that You changed the files; and

   (c) You must retain, in the Source form of any Derivative Works
       that You distribute, all copyright, patent, trademark, and
       attribution notices from the Source form of the Work,
       excluding those notices that do not pertain to any part of
       the Derivative Works; and

   (d) If the Work includes a "NOTICE" text file as part of its
       distribution, then any Derivative Works that You distribute must
       include a readable copy of the attribution notices contained
       within such NOTICE file, excluding those notices that do not
       pertain to any part of the Derivative Works, in at least one
       of the following places: within a NOTICE text file distributed
       as part of the Derivative Works; within the Source form or
       documentation, if provided along with the Derivative Works; or,
       within a display generated by the Derivative Works, if and
       wherever such third-party notices normally appear. The contents
       of the NOTICE file are for informational purposes only and
       do not modify the License. You may add Your own attribution
       notices within Derivative Works that You distribute, alongside
       or as an addendum to the NOTICE text from the Work, provided
       that such additional attribution notices cannot be construed
       as modifying the License.

   You may add Your own copyright statement to Your modifications and
   may provide additional or different license terms and conditions
   for use, reproduction, or distribution of Your modifications, or
   for any such Derivative Works as a whole, provided Your use,
   reproduction, and distribution of the Work otherwise complies with
   the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise,
   any Contribution intentionally submitted for inclusion in the Work
   by You to the Licensor shall be under the terms and conditions of
   this License, without any additional terms or conditions.
   Notwithstanding the above, nothing herein shall supersede or modify
   the terms of any separate license agreement you may have executed
   with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade
   names, trademarks, service marks, or product names of the Licensor,
   except as required for reasonable and customary use in describing the
   origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or
   agreed to in writing, Licensor provides the Work (and each
   Contributor provides its Contributions) on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied, including, without limitation, any warranties or conditions
   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
   PARTICULAR PURPOSE. You are solely responsible for determining the
   appropriateness of using or redistributing the Work and assume any
   risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory,
   whether in tort (including negligence), contract, or otherwise,
   unless required by applicable law (such as deliberate and grossly
   negligent acts) or agreed to in writing, shall any Contributor be
   liable to You for damages, including any direct, indirect, special,
   incidental, or consequential damages of any character arising as a
   result of this License or out of the use or inability to use the
   Work (including but not limited to damages for loss of goodwill,
   work stoppage, computer failure or malfunction, or any and all
   other commercial damages or losses), even if such Contributor
   has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing
   the Work or Derivative Works thereof, You may choose to offer,
   and charge a fee for, acceptance of support, warranty, indemnity,
   or other liability obligations and/or rights consistent with this
   License. However, in accepting such obligations, You may act only
   on Your own behalf and on Your sole responsibility, not on behalf
   of any other Contributor, and only if You agree to indemnify,
   defend, and hold each Contributor harmless for any liability
   incurred by, or claims asserted against, such Contributor by reason
   of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

 **/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@alfresco/js-api', ['exports'], factory) :
    (factory((global['@alfresco/js-api'] = {})));
}(this, (function (exports) { 'use strict';

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CustomModelApi = (function () {
        function CustomModelApi(alfrescoApi) {
            this.private = true;
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.contentPrivateClient;
            }
        }
        CustomModelApi.prototype.createCustomModel = function (status, description, name, namespaceUri, namespacePrefix) {
            if (namespaceUri === undefined || namespaceUri === null) {
                throw "Missing param 'namespaceUri' in createCustomModel";
            }
            if (namespacePrefix === undefined || namespacePrefix === null) {
                throw "Missing param 'namespacePrefix' in createCustomModel";
            }
            var postBody = {
                'status': status,
                'description': description,
                'name': name,
                'namespaceUri': namespaceUri,
                'namespacePrefix': namespacePrefix
            };
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.createCustomType = function (modelName, name, parentName, title, description) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in createCustomType";
            }
            if (name === undefined || name === null) {
                throw "Missing param 'name' in createCustomType";
            }
            var postBody = {
                'name': name,
                'parentName': parentName,
                'title': title,
                'description': description
            };
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/types', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.createCustomAspect = function (modelName, name, parentName, title, description) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in createCustomAspect";
            }
            if (name === undefined || name === null) {
                throw "Missing param 'name' in createCustomAspect";
            }
            var postBody = {
                'name': name,
                'parentName': parentName,
                'title': title,
                'description': description
            };
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/aspects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.createCustomConstraint = function (modelName, name, type, parameters) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in createCustomConstraint";
            }
            if (type === undefined || type === null) {
                throw "Missing param 'type' in createCustomConstraint";
            }
            if (name === undefined || name === null) {
                throw "Missing param 'name' in createCustomConstraint";
            }
            var postBody = {
                'name': name,
                'type': type,
                'parameters': parameters
            };
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/constraints', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.activateCustomModel = function (modelName) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in activateCustomModel";
            }
            var postBody = {
                'status': 'ACTIVE'
            };
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}?select=status', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.deactivateCustomModel = function (modelName) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in deactivateCustomModel";
            }
            var postBody = {
                'status': 'DRAFT'
            };
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}?select=status', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.addPropertyToAspect = function (modelName, aspectName, properties) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in addPropertyToAspect";
            }
            if (aspectName === undefined || aspectName === null) {
                throw "Missing param 'aspectName' in addPropertyToAspect";
            }
            var postBody = {
                'name': aspectName,
                'properties': properties
            };
            var pathParams = {
                'modelName': modelName,
                'aspectName': aspectName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/aspects/{aspectName}?select=props', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.addPropertyToType = function (modelName, typeName, properties, aspectName) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in addPropertyToType";
            }
            if (typeName === undefined || typeName === null) {
                throw "Missing param 'typeName' in addPropertyToType";
            }
            var postBody = {
                'name': aspectName,
                'properties': properties
            };
            var pathParams = {
                'modelName': modelName,
                'typeName': typeName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/types/{typeName}?select=props', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.updateCustomModel = function (modelName, description, namespaceUri, namespacePrefix) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in updateCustomModel";
            }
            var postBody = {
                'name': modelName,
                'description': description,
                'namespaceUri': namespaceUri,
                'namespacePrefix': namespacePrefix
            };
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.updateCustomType = function (modelName, typeName, description, parentName, title) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in UpdateCustomType";
            }
            if (typeName === undefined || typeName === null) {
                throw "Missing param 'typeName' in UpdateCustomType";
            }
            var postBody = {
                'name': modelName,
                'parentName': parentName,
                'title': title,
                'description': description
            };
            var pathParams = {
                'modelName': modelName,
                'typeName': typeName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/types/{typeName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.updateCustomAspect = function (modelName, aspectName, description, parentName, title) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in updateCustomAspect";
            }
            if (aspectName === undefined || aspectName === null) {
                throw "Missing param 'aspectName' in updateCustomAspect";
            }
            var postBody = {
                'name': modelName,
                'parentName': parentName,
                'title': title,
                'description': description
            };
            var pathParams = {
                'modelName': modelName,
                'aspectName': aspectName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/aspects/{aspectName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getAllCustomModel = function () {
            var postBody = {};
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getCustomModel = function (modelName, queryParamsInput) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getCustomModel";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = queryParamsInput || {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getAllCustomType = function (modelName) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getAllCustomType";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/types', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getCustomType = function (modelName, typeName, queryParamsInput) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getCustomType";
            }
            if (typeName === undefined || typeName === null) {
                throw "Missing param 'typeName' in getCustomType";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName,
                'typeName': typeName
            };
            var queryParams = queryParamsInput || {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/types/{typeName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getAllCustomAspect = function (modelName, queryParamsInput) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getAllCustomAspect";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = queryParamsInput || {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/aspects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getCustomAspect = function (modelName, aspectName, queryParamsInput) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getCustomAspect";
            }
            if (aspectName === undefined || aspectName === null) {
                throw "Missing param 'aspectName' in getCustomAspect";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName,
                'aspectName': aspectName
            };
            var queryParams = queryParamsInput || {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/aspects/{aspectName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getAllCustomConstraints = function (modelName, queryParamsInput) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getAllCustomConstraints";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = queryParamsInput || {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/constraints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.getCustomConstraints = function (modelName, constraintName, queryParamsInput) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getCustomConstraints";
            }
            if (constraintName === undefined || constraintName === null) {
                throw "Missing param 'constraintName' in getCustomConstraints";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName,
                'constraintName': constraintName
            };
            var queryParams = queryParamsInput || {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/constraints{constraintName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.deleteCustomModel = function (modelName) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in deleteCustomModel";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CustomModelApi.prototype.deleteCustomType = function (modelName, typeName) {
            if (modelName === undefined || modelName === null) {
                throw "Missing param 'modelName' in getCustomConstraints";
            }
            if (typeName === undefined || typeName === null) {
                throw "Missing param 'modelName' in deleteCustomType";
            }
            var postBody = {};
            var pathParams = {
                'modelName': modelName,
                'typeName': typeName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('cmm/{modelName}/types/{typeName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return CustomModelApi;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionParameterDefinition = (function () {
        function ActionParameterDefinition(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ActionParameterDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinition = (function () {
        function ActionDefinition(input) {
            if (input) {
                Object.assign(this, input);
                if (input.parameterDefinitions) {
                    this.parameterDefinitions = input.parameterDefinitions.map(function (item) {
                        return new ActionParameterDefinition(item);
                    });
                }
            }
        }
        return ActionDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinitionEntry = (function () {
        function ActionDefinitionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ActionDefinition(input.entry) : undefined;
            }
        }
        return ActionDefinitionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Pagination = (function () {
        function Pagination(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Pagination;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinitionListList = (function () {
        function ActionDefinitionListList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ActionDefinition(item);
                    });
                }
            }
        }
        return ActionDefinitionListList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionDefinitionList = (function () {
        function ActionDefinitionList(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ActionDefinitionListList(input.list) : undefined;
            }
        }
        return ActionDefinitionList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionExecResult = (function () {
        function ActionExecResult(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ActionExecResult;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionExecResultEntry = (function () {
        function ActionExecResultEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ActionExecResult(input.entry) : undefined;
            }
        }
        return ActionExecResultEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi = (function () {
        function BaseApi(alfrescoApi) {
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.contentClient;
            }
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionsApi = (function (_super) {
        __extends(ActionsApi, _super);
        function ActionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActionsApi.prototype.actionDetails = function (actionDefinitionId) {
            var postBody = null;
            if (actionDefinitionId === undefined || actionDefinitionId === null) {
                throw new Error("Required param 'actionDefinitionId' in actionDetails");
            }
            var pathParams = {
                'actionDefinitionId': actionDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/action-definitions/{actionDefinitionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionEntry);
        };
        ActionsApi.prototype.actionExec = function (actionBodyExec) {
            var postBody = actionBodyExec;
            if (actionBodyExec === undefined || actionBodyExec === null) {
                throw new Error("Required param 'actionBodyExec' in actionExec");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/action-executions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionExecResultEntry);
        };
        ActionsApi.prototype.listActions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionList);
        };
        ActionsApi.prototype.nodeActions = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in nodeActions");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/action-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActionDefinitionList);
        };
        return ActionsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DateAlfresco = (function (_super) {
        __extends(DateAlfresco, _super);
        function DateAlfresco() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DateAlfresco.parseDate = function (dateToConvert) {
            if (dateToConvert instanceof Date) {
                return dateToConvert;
            }
            else if (typeof dateToConvert === 'number') {
                return new Date(dateToConvert);
            }
            var dateLength = 10;
            var separatorPos = dateToConvert.substring(dateLength).search(/[\+\-]/) + dateLength;
            var dateStr = separatorPos > dateLength ? dateToConvert.substring(0, separatorPos) : dateToConvert;
            var tzStr = separatorPos > dateLength ? dateToConvert.substring(separatorPos) : '';
            var parsedDate = this.parseDateTime(dateStr);
            var tzOffsetMins = this.parseDateTimeZone(tzStr);
            parsedDate.setTime(parsedDate.getTime() + tzOffsetMins * 60000);
            return parsedDate;
        };
        DateAlfresco.parseDateTime = function (dateToConvert) {
            var dateParts = dateToConvert.split(/[^0-9]/).map(function (s) {
                return parseInt(s, 10);
            });
            return new Date(Date.UTC(dateParts[0], dateParts[1] - 1 || 0, dateParts[2] || 1, dateParts[3] || 0, dateParts[4] || 0, dateParts[5] || 0, dateParts[6] || 0));
        };
        DateAlfresco.parseDateTimeZone = function (dateToConvert) {
            var match = /([\+\-])(\d{2}):?(\d{2})?/.exec(dateToConvert);
            if (match !== null) {
                return (parseInt(match[1] + '1', 10) * -1 * (parseInt(match[2], 10) * 60) + parseInt(match[3] || '0', 10));
            }
            else {
                return 0;
            }
        };
        return DateAlfresco;
    }(Date));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Activity = (function () {
        function Activity(input) {
            if (input) {
                Object.assign(this, input);
                this.postedAt = input.postedAt ? DateAlfresco.parseDate(input.postedAt) : undefined;
            }
        }
        return Activity;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivityEntry = (function () {
        function ActivityEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Activity(input.entry) : undefined;
            }
        }
        return ActivityEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivityPagingList = (function () {
        function ActivityPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ActivityEntry(item);
                    });
                }
            }
        }
        return ActivityPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivityPaging = (function () {
        function ActivityPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ActivityPagingList(input.list) : undefined;
            }
        }
        return ActivityPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivitiesApi = (function (_super) {
        __extends(ActivitiesApi, _super);
        function ActivitiesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActivitiesApi.prototype.listActivitiesForPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listActivitiesForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'who': opts['who'],
                'siteId': opts['siteId'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/activities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ActivityPaging);
        };
        return ActivitiesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditApp = (function () {
        function AuditApp(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditApp;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditAppEntry = (function () {
        function AuditAppEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new AuditApp(input.entry) : undefined;
            }
        }
        return AuditAppEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditAppPagingList = (function () {
        function AuditAppPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new AuditAppEntry(item);
                    });
                }
            }
        }
        return AuditAppPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditAppPaging = (function () {
        function AuditAppPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new AuditAppPagingList(input.list) : undefined;
            }
        }
        return AuditAppPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserInfo = (function () {
        function UserInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntry = (function () {
        function AuditEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
            }
        }
        return AuditEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntryEntry = (function () {
        function AuditEntryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new AuditEntry(input.entry) : undefined;
            }
        }
        return AuditEntryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntryPagingList = (function () {
        function AuditEntryPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new AuditEntryEntry(item);
                    });
                }
            }
        }
        return AuditEntryPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditEntryPaging = (function () {
        function AuditEntryPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new AuditEntryPagingList(input.list) : undefined;
            }
        }
        return AuditEntryPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditApi = (function (_super) {
        __extends(AuditApi, _super);
        function AuditApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AuditApi.prototype.deleteAuditEntriesForAuditApp = function (auditApplicationId, where) {
            var postBody = null;
            if (auditApplicationId === undefined || auditApplicationId === null) {
                throw new Error("Required param 'auditApplicationId' in deleteAuditEntriesForAuditApp");
            }
            if (where === undefined || where === null) {
                throw new Error("Required param 'where' in deleteAuditEntriesForAuditApp");
            }
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'where': where
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AuditApi.prototype.deleteAuditEntry = function (auditApplicationId, auditEntryId) {
            var postBody = null;
            if (auditApplicationId === undefined || auditApplicationId === null) {
                throw new Error("Required param 'auditApplicationId' in deleteAuditEntry");
            }
            if (auditEntryId === undefined || auditEntryId === null) {
                throw new Error("Required param 'auditEntryId' in deleteAuditEntry");
            }
            var pathParams = {
                'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AuditApi.prototype.getAuditApp = function (auditApplicationId, opts) {
            opts = opts || {};
            var postBody = null;
            if (auditApplicationId === undefined || auditApplicationId === null) {
                throw new Error("Required param 'auditApplicationId' in getAuditApp");
            }
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
        };
        AuditApi.prototype.getAuditEntry = function (auditApplicationId, auditEntryId, opts) {
            opts = opts || {};
            var postBody = null;
            if (auditApplicationId === undefined || auditApplicationId === null) {
                throw new Error("Required param 'auditApplicationId' in getAuditEntry");
            }
            if (auditEntryId === undefined || auditEntryId === null) {
                throw new Error("Required param 'auditEntryId' in getAuditEntry");
            }
            var pathParams = {
                'auditApplicationId': auditApplicationId, 'auditEntryId': auditEntryId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryEntry);
        };
        AuditApi.prototype.listAuditApps = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditAppPaging);
        };
        AuditApi.prototype.listAuditEntriesForAuditApp = function (auditApplicationId, opts) {
            opts = opts || {};
            var postBody = null;
            if (auditApplicationId === undefined || auditApplicationId === null) {
                throw new Error("Required param 'auditApplicationId' in listAuditEntriesForAuditApp");
            }
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
        };
        AuditApi.prototype.listAuditEntriesForNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listAuditEntriesForNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/audit-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditEntryPaging);
        };
        AuditApi.prototype.updateAuditApp = function (auditApplicationId, auditAppBodyUpdate, opts) {
            opts = opts || {};
            var postBody = auditAppBodyUpdate;
            if (auditApplicationId === undefined || auditApplicationId === null) {
                throw new Error("Required param 'auditApplicationId' in updateAuditApp");
            }
            if (auditAppBodyUpdate === undefined || auditAppBodyUpdate === null) {
                throw new Error("Required param 'auditAppBodyUpdate' in updateAuditApp");
            }
            var pathParams = {
                'auditApplicationId': auditApplicationId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/audit-applications/{auditApplicationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AuditApp);
        };
        return AuditApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Capabilities = (function () {
        function Capabilities(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Capabilities;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Company = (function () {
        function Company(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Company;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Person = (function () {
        function Person(input) {
            if (input) {
                Object.assign(this, input);
                this.company = input.company ? new Company(input.company) : undefined;
                this.statusUpdatedAt = input.statusUpdatedAt ? DateAlfresco.parseDate(input.statusUpdatedAt) : undefined;
                this.capabilities = input.capabilities ? new Capabilities(input.capabilities) : undefined;
            }
        }
        return Person;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Comment = (function () {
        function Comment(input) {
            if (input) {
                Object.assign(this, input);
                this.createdBy = input.createdBy ? new Person(input.createdBy) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.modifiedBy = input.modifiedBy ? new Person(input.modifiedBy) : undefined;
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
            }
        }
        return Comment;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentEntry = (function () {
        function CommentEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Comment(input.entry) : undefined;
            }
        }
        return CommentEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentPagingList = (function () {
        function CommentPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new CommentEntry(item);
                    });
                }
            }
        }
        return CommentPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentPaging = (function () {
        function CommentPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new CommentPagingList(input.list) : undefined;
            }
        }
        return CommentPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentsApi = (function (_super) {
        __extends(CommentsApi, _super);
        function CommentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CommentsApi.prototype.createComment = function (nodeId, commentBodyCreate, opts) {
            opts = opts || {};
            var postBody = commentBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createComment");
            }
            if (commentBodyCreate === undefined || commentBodyCreate === null) {
                throw new Error("Required param 'commentBodyCreate' in createComment");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentEntry);
        };
        CommentsApi.prototype.deleteComment = function (nodeId, commentId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteComment");
            }
            if (commentId === undefined || commentId === null) {
                throw new Error("Required param 'commentId' in deleteComment");
            }
            var pathParams = {
                'nodeId': nodeId, 'commentId': commentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        CommentsApi.prototype.listComments = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listComments");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentPaging);
        };
        CommentsApi.prototype.updateComment = function (nodeId, commentId, commentBodyUpdate, opts) {
            opts = opts || {};
            var postBody = commentBodyUpdate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in updateComment");
            }
            if (commentId === undefined || commentId === null) {
                throw new Error("Required param 'commentId' in updateComment");
            }
            if (commentBodyUpdate === undefined || commentBodyUpdate === null) {
                throw new Error("Required param 'commentBodyUpdate' in updateComment");
            }
            var pathParams = {
                'nodeId': nodeId, 'commentId': commentId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/comments/{commentId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentEntry);
        };
        return CommentsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.Download = (function () {
        function Download(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Download;
    }());
    (function (Download) {
        Download.StatusEnum = {
            PENDING: 'PENDING',
            CANCELLED: 'CANCELLED',
            INPROGRESS: 'IN_PROGRESS',
            DONE: 'DONE',
            MAXCONTENTSIZEEXCEEDED: 'MAX_CONTENT_SIZE_EXCEEDED'
        };
    })(exports.Download || (exports.Download = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadEntry = (function () {
        function DownloadEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.Download(input.entry) : undefined;
            }
        }
        return DownloadEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadsApi = (function (_super) {
        __extends(DownloadsApi, _super);
        function DownloadsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DownloadsApi.prototype.cancelDownload = function (downloadId) {
            var postBody = null;
            if (downloadId === undefined || downloadId === null) {
                throw new Error("Required param 'downloadId' in cancelDownload");
            }
            var pathParams = {
                'downloadId': downloadId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/downloads/{downloadId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        DownloadsApi.prototype.createDownload = function (downloadBodyCreate, opts) {
            opts = opts || {};
            var postBody = downloadBodyCreate;
            if (downloadBodyCreate === undefined || downloadBodyCreate === null) {
                throw new Error("Required param 'downloadBodyCreate' in createDownload");
            }
            var pathParams = {};
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/downloads', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DownloadEntry);
        };
        DownloadsApi.prototype.getDownload = function (downloadId, opts) {
            opts = opts || {};
            var postBody = null;
            if (downloadId === undefined || downloadId === null) {
                throw new Error("Required param 'downloadId' in getDownload");
            }
            var pathParams = {
                'downloadId': downloadId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/downloads/{downloadId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DownloadEntry);
        };
        return DownloadsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Favorite = (function () {
        function Favorite(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
            }
        }
        return Favorite;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteEntry = (function () {
        function FavoriteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Favorite(input.entry) : undefined;
            }
        }
        return FavoriteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritePagingList = (function () {
        function FavoritePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new FavoriteEntry(item);
                    });
                }
            }
        }
        return FavoritePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritePaging = (function () {
        function FavoritePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new FavoritePagingList(input.list) : undefined;
            }
        }
        return FavoritePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteSite = (function () {
        function FavoriteSite(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FavoriteSite;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteSiteEntry = (function () {
        function FavoriteSiteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new FavoriteSite(input.entry) : undefined;
            }
        }
        return FavoriteSiteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.Site = (function () {
        function Site(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Site;
    }());
    (function (Site) {
        Site.VisibilityEnum = {
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED',
            PUBLIC: 'PUBLIC'
        };
        Site.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.Site || (exports.Site = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteEntry = (function () {
        function SiteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.Site(input.entry) : undefined;
            }
        }
        return SiteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitePagingList = (function () {
        function SitePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteEntry(item);
                    });
                }
            }
        }
        return SitePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitePaging = (function () {
        function SitePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SitePagingList(input.list) : undefined;
            }
        }
        return SitePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritesApi = (function (_super) {
        __extends(FavoritesApi, _super);
        function FavoritesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FavoritesApi.prototype.createFavorite = function (personId, favoriteBodyCreate, opts) {
            opts = opts || {};
            var postBody = favoriteBodyCreate;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in createFavorite");
            }
            if (favoriteBodyCreate === undefined || favoriteBodyCreate === null) {
                throw new Error("Required param 'favoriteBodyCreate' in createFavorite");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
        };
        FavoritesApi.prototype.createSiteFavorite = function (personId, favoriteSiteBodyCreate, opts) {
            opts = opts || {};
            var postBody = favoriteSiteBodyCreate;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in createSiteFavorite");
            }
            if (favoriteSiteBodyCreate === undefined || favoriteSiteBodyCreate === null) {
                throw new Error("Required param 'favoriteSiteBodyCreate' in createSiteFavorite");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteSiteEntry);
        };
        FavoritesApi.prototype.deleteFavorite = function (personId, favoriteId) {
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in deleteFavorite");
            }
            if (favoriteId === undefined || favoriteId === null) {
                throw new Error("Required param 'favoriteId' in deleteFavorite");
            }
            var pathParams = {
                'personId': personId, 'favoriteId': favoriteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        FavoritesApi.prototype.deleteSiteFavorite = function (personId, siteId) {
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in deleteSiteFavorite");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in deleteSiteFavorite");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        FavoritesApi.prototype.getFavorite = function (personId, favoriteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getFavorite");
            }
            if (favoriteId === undefined || favoriteId === null) {
                throw new Error("Required param 'favoriteId' in getFavorite");
            }
            var pathParams = {
                'personId': personId, 'favoriteId': favoriteId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites/{favoriteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoriteEntry);
        };
        FavoritesApi.prototype.getFavoriteSite = function (personId, siteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getFavoriteSite");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getFavoriteSite");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        FavoritesApi.prototype.listFavoriteSitesForPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listFavoriteSitesForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorite-sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
        };
        FavoritesApi.prototype.listFavorites = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listFavorites");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/favorites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FavoritePaging);
        };
        return FavoritesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Group = (function () {
        function Group(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Group;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupEntry = (function () {
        function GroupEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Group(input.entry) : undefined;
            }
        }
        return GroupEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.GroupMember = (function () {
        function GroupMember(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupMember;
    }());
    (function (GroupMember) {
        GroupMember.MemberTypeEnum = {
            GROUP: 'GROUP',
            PERSON: 'PERSON'
        };
    })(exports.GroupMember || (exports.GroupMember = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupMemberEntry = (function () {
        function GroupMemberEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.GroupMember(input.entry) : undefined;
            }
        }
        return GroupMemberEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupMemberPagingList = (function () {
        function GroupMemberPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new GroupMemberEntry(item);
                    });
                }
            }
        }
        return GroupMemberPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupMemberPaging = (function () {
        function GroupMemberPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new GroupMemberPagingList(input.list) : undefined;
            }
        }
        return GroupMemberPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupPagingList = (function () {
        function GroupPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new GroupEntry(item);
                    });
                }
            }
        }
        return GroupPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupPaging = (function () {
        function GroupPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new GroupPagingList(input.list) : undefined;
            }
        }
        return GroupPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupsApi = (function (_super) {
        __extends(GroupsApi, _super);
        function GroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupsApi.prototype.createGroup = function (groupBodyCreate, opts) {
            opts = opts || {};
            var postBody = groupBodyCreate;
            if (groupBodyCreate === undefined || groupBodyCreate === null) {
                throw new Error("Required param 'groupBodyCreate' in createGroup");
            }
            var pathParams = {};
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
        };
        GroupsApi.prototype.createGroupMembership = function (groupId, groupMembershipBodyCreate, opts) {
            opts = opts || {};
            var postBody = groupMembershipBodyCreate;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in createGroupMembership");
            }
            if (groupMembershipBodyCreate === undefined || groupMembershipBodyCreate === null) {
                throw new Error("Required param 'groupMembershipBodyCreate' in createGroupMembership");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupMemberEntry);
        };
        GroupsApi.prototype.deleteGroup = function (groupId, opts) {
            opts = opts || {};
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in deleteGroup");
            }
            var cascadeDelete = opts['cascade'] ? opts['cascade'] : false;
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'cascade': cascadeDelete
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        GroupsApi.prototype.deleteGroupMembership = function (groupId, groupMemberId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in deleteGroupMembership");
            }
            if (groupMemberId === undefined || groupMemberId === null) {
                throw new Error("Required param 'groupMemberId' in deleteGroupMembership");
            }
            var pathParams = {
                'groupId': groupId, 'groupMemberId': groupMemberId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}/members/{groupMemberId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        GroupsApi.prototype.getGroup = function (groupId, opts) {
            opts = opts || {};
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in getGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
        };
        GroupsApi.prototype.listGroupMemberships = function (groupId, opts) {
            opts = opts || {};
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in listGroupMemberships");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupMemberPaging);
        };
        GroupsApi.prototype.listGroupMembershipsForPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listGroupMembershipsForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'where': opts['where'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupPaging);
        };
        GroupsApi.prototype.listGroups = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'where': opts['where'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupPaging);
        };
        GroupsApi.prototype.updateGroup = function (groupId, groupBodyUpdate, opts) {
            opts = opts || {};
            var postBody = groupBodyUpdate;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in updateGroup");
            }
            if (groupBodyUpdate === undefined || groupBodyUpdate === null) {
                throw new Error("Required param 'groupBodyUpdate' in updateGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupEntry);
        };
        return GroupsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NetworkQuota = (function () {
        function NetworkQuota(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NetworkQuota;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.PersonNetwork = (function () {
        function PersonNetwork(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                if (input.quotas) {
                    this.quotas = input.quotas.map(function (item) {
                        return new NetworkQuota(item);
                    });
                }
            }
        }
        return PersonNetwork;
    }());
    (function (PersonNetwork) {
        PersonNetwork.SubscriptionLevelEnum = {
            Free: 'Free',
            Standard: 'Standard',
            Enterprise: 'Enterprise'
        };
    })(exports.PersonNetwork || (exports.PersonNetwork = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonNetworkEntry = (function () {
        function PersonNetworkEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.PersonNetwork(input.entry) : undefined;
            }
        }
        return PersonNetworkEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonNetworkPagingList = (function () {
        function PersonNetworkPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new PersonNetworkEntry(item);
                    });
                }
            }
        }
        return PersonNetworkPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonNetworkPaging = (function () {
        function PersonNetworkPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new PersonNetworkPagingList(input.list) : undefined;
            }
        }
        return PersonNetworkPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NetworksApi = (function (_super) {
        __extends(NetworksApi, _super);
        function NetworksApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NetworksApi.prototype.getNetwork = function (networkId, opts) {
            opts = opts || {};
            var postBody = null;
            if (networkId === undefined || networkId === null) {
                throw new Error("Required param 'networkId' in getNetwork");
            }
            var pathParams = {
                'networkId': networkId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkEntry);
        };
        NetworksApi.prototype.getNetworkForPerson = function (personId, networkId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getNetworkForPerson");
            }
            if (networkId === undefined || networkId === null) {
                throw new Error("Required param 'networkId' in getNetworkForPerson");
            }
            var pathParams = {
                'personId': personId, 'networkId': networkId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/networks/{networkId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkEntry);
        };
        NetworksApi.prototype.listNetworksForPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listNetworksForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonNetworkPaging);
        };
        return NetworksApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Association = (function () {
        function Association(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Association;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssociationEntry = (function () {
        function AssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Association(input.entry) : undefined;
            }
        }
        return AssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociation = (function () {
        function ChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationEntry = (function () {
        function ChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ChildAssociation(input.entry) : undefined;
            }
        }
        return ChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentInfo = (function () {
        function ContentInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ContentInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PathElement = (function () {
        function PathElement(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PathElement;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PathInfo = (function () {
        function PathInfo(input) {
            if (input) {
                Object.assign(this, input);
                if (input.elements) {
                    this.elements = input.elements.map(function (item) {
                        return new PathElement(item);
                    });
                }
            }
        }
        return PathInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.PermissionElement = (function () {
        function PermissionElement(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PermissionElement;
    }());
    (function (PermissionElement) {
        PermissionElement.AccessStatusEnum = {
            ALLOWED: 'ALLOWED',
            DENIED: 'DENIED'
        };
    })(exports.PermissionElement || (exports.PermissionElement = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PermissionsInfo = (function () {
        function PermissionsInfo(input) {
            if (input) {
                Object.assign(this, input);
                if (input.inherited) {
                    this.inherited = input.inherited.map(function (item) {
                        return new exports.PermissionElement(item);
                    });
                }
                if (input.locallySet) {
                    this.locallySet = input.locallySet.map(function (item) {
                        return new exports.PermissionElement(item);
                    });
                }
            }
        }
        return PermissionsInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Node = (function () {
        function Node(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
            }
        }
        return Node;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssociationInfo = (function () {
        function AssociationInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AssociationInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociation = (function () {
        function NodeAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
                this.association = input.association ? new AssociationInfo(input.association) : undefined;
            }
        }
        return NodeAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociationEntry = (function () {
        function NodeAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new NodeAssociation(input.entry) : undefined;
            }
        }
        return NodeAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociationPagingList = (function () {
        function NodeAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new NodeAssociationEntry(item);
                    });
                }
                this.source = input.source ? new Node(input.source) : undefined;
            }
        }
        return NodeAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeAssociationPaging = (function () {
        function NodeAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new NodeAssociationPagingList(input.list) : undefined;
            }
        }
        return NodeAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationInfo = (function () {
        function ChildAssociationInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChildAssociationInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociation = (function () {
        function NodeChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return NodeChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociationEntry = (function () {
        function NodeChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new NodeChildAssociation(input.entry) : undefined;
            }
        }
        return NodeChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociationPagingList = (function () {
        function NodeChildAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new NodeChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new Node(input.source) : undefined;
            }
        }
        return NodeChildAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeChildAssociationPaging = (function () {
        function NodeChildAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new NodeChildAssociationPagingList(input.list) : undefined;
            }
        }
        return NodeChildAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeEntry = (function () {
        function NodeEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Node(input.entry) : undefined;
            }
        }
        return NodeEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodesApi = (function (_super) {
        __extends(NodesApi, _super);
        function NodesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NodesApi.prototype.copyNode = function (nodeId, nodeBodyCopy, opts) {
            opts = opts || {};
            var postBody = nodeBodyCopy;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in copyNode");
            }
            if (nodeBodyCopy === undefined || nodeBodyCopy === null) {
                throw new Error("Required param 'nodeBodyCopy' in copyNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/copy', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.createAssociation = function (nodeId, associationBodyCreate, opts) {
            opts = opts || {};
            var postBody = associationBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createAssociation");
            }
            if (associationBodyCreate === undefined || associationBodyCreate === null) {
                throw new Error("Required param 'associationBodyCreate' in createAssociation");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/targets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AssociationEntry);
        };
        NodesApi.prototype.createNode = function (nodeId, nodeBodyCreate, opts, formParams) {
            opts = opts || {};
            var postBody = nodeBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createNode");
            }
            if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
                throw new Error("Required param 'nodeBodyCreate' in createNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            formParams = formParams || {};
            var contentTypes, returnType = null;
            if (formParams.filedata) {
                contentTypes = ['multipart/form-data'];
            }
            else {
                contentTypes = ['application/json'];
                returnType = NodeEntry;
            }
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, returnType);
        };
        NodesApi.prototype.createSecondaryChildAssociation = function (nodeId, secondaryChildAssociationBodyCreate, opts) {
            opts = opts || {};
            var postBody = secondaryChildAssociationBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createSecondaryChildAssociation");
            }
            if (secondaryChildAssociationBodyCreate === undefined || secondaryChildAssociationBodyCreate === null) {
                throw new Error("Required param 'secondaryChildAssociationBodyCreate' in createSecondaryChildAssociation");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ChildAssociationEntry);
        };
        NodesApi.prototype.deleteAssociation = function (nodeId, targetId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteAssociation");
            }
            if (targetId === undefined || targetId === null) {
                throw new Error("Required param 'targetId' in deleteAssociation");
            }
            var pathParams = {
                'nodeId': nodeId, 'targetId': targetId
            };
            var queryParams = {
                'assocType': opts['assocType']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/targets/{targetId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.deleteNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'permanent': opts['permanent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.deleteSecondaryChildAssociation = function (nodeId, childId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteSecondaryChildAssociation");
            }
            if (childId === undefined || childId === null) {
                throw new Error("Required param 'childId' in deleteSecondaryChildAssociation");
            }
            var pathParams = {
                'nodeId': nodeId, 'childId': childId
            };
            var queryParams = {
                'assocType': opts['assocType']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/secondary-children/{childId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.getNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.getNodeContent = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getNodeContent");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        NodesApi.prototype.listNodeChildren = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listNodeChildren");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeChildAssociationPaging);
        };
        NodesApi.prototype.listParents = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listParents");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/parents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
        };
        NodesApi.prototype.listSecondaryChildren = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listSecondaryChildren");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/secondary-children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeChildAssociationPaging);
        };
        NodesApi.prototype.listSourceAssociations = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listSourceAssociations");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
        };
        NodesApi.prototype.listTargetAssociations = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listTargetAssociations");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/targets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeAssociationPaging);
        };
        NodesApi.prototype.lockNode = function (nodeId, nodeBodyLock, opts) {
            opts = opts || {};
            var postBody = nodeBodyLock;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in lockNode");
            }
            if (nodeBodyLock === undefined || nodeBodyLock === null) {
                throw new Error("Required param 'nodeBodyLock' in lockNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/lock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.moveNode = function (nodeId, nodeBodyMove, opts) {
            opts = opts || {};
            var postBody = nodeBodyMove;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in moveNode");
            }
            if (nodeBodyMove === undefined || nodeBodyMove === null) {
                throw new Error("Required param 'nodeBodyMove' in moveNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/move', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.unlockNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in unlockNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/unlock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.updateNode = function (nodeId, nodeBodyUpdate, opts) {
            opts = opts || {};
            var postBody = nodeBodyUpdate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in updateNode");
            }
            if (nodeBodyUpdate === undefined || nodeBodyUpdate === null) {
                throw new Error("Required param 'nodeBodyUpdate' in updateNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        NodesApi.prototype.updateNodeContent = function (nodeId, contentBodyUpdate, opts) {
            opts = opts || {};
            var postBody = contentBodyUpdate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in updateNodeContent");
            }
            if (contentBodyUpdate === undefined || contentBodyUpdate === null) {
                throw new Error("Required param 'contentBodyUpdate' in updateNodeContent");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'majorVersion': opts['majorVersion'],
                'comment': opts['comment'],
                'name': opts['name'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/octet-stream'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/content', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        return NodesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonEntry = (function () {
        function PersonEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Person(input.entry) : undefined;
            }
        }
        return PersonEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonPagingList = (function () {
        function PersonPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new PersonEntry(item);
                    });
                }
            }
        }
        return PersonPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonPaging = (function () {
        function PersonPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new PersonPagingList(input.list) : undefined;
            }
        }
        return PersonPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PeopleApi = (function (_super) {
        __extends(PeopleApi, _super);
        function PeopleApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PeopleApi.prototype.createPerson = function (personBodyCreate, opts) {
            opts = opts || {};
            var postBody = personBodyCreate;
            if (personBodyCreate === undefined || personBodyCreate === null) {
                throw new Error("Required param 'personBodyCreate' in createPerson");
            }
            var pathParams = {};
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
        };
        PeopleApi.prototype.deleteAvatarImage = function (personId) {
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in deleteAvatarImage");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/avatar', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.getAvatarImage = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getAvatarImage");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'attachment': opts['attachment'],
                'placeholder': opts['placeholder']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/avatar', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.getPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
        };
        PeopleApi.prototype.listPeople = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonPaging);
        };
        PeopleApi.prototype.requestPasswordReset = function (personId, clientBody) {
            var postBody = clientBody;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in requestPasswordReset");
            }
            if (clientBody === undefined || clientBody === null) {
                throw new Error("Required param 'clientBody' in requestPasswordReset");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/request-password-reset', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.resetPassword = function (personId, passwordResetBody) {
            var postBody = passwordResetBody;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in resetPassword");
            }
            if (passwordResetBody === undefined || passwordResetBody === null) {
                throw new Error("Required param 'passwordResetBody' in resetPassword");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/reset-password', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.updateAvatarImage = function (personId, contentBodyUpdate) {
            var postBody = contentBodyUpdate;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in updateAvatarImage");
            }
            if (contentBodyUpdate === undefined || contentBodyUpdate === null) {
                throw new Error("Required param 'contentBodyUpdate' in updateAvatarImage");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/octet-stream'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/avatar', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        PeopleApi.prototype.updatePerson = function (personId, personBodyUpdate, opts) {
            opts = opts || {};
            var postBody = personBodyUpdate;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in updatePerson");
            }
            if (personBodyUpdate === undefined || personBodyUpdate === null) {
                throw new Error("Required param 'personBodyUpdate' in updatePerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonEntry);
        };
        return PeopleApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Preference = (function () {
        function Preference(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Preference;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferenceEntry = (function () {
        function PreferenceEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Preference(input.entry) : undefined;
            }
        }
        return PreferenceEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferencePagingList = (function () {
        function PreferencePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new PreferenceEntry(item);
                    });
                }
            }
        }
        return PreferencePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferencePaging = (function () {
        function PreferencePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new PreferencePagingList(input.list) : undefined;
            }
        }
        return PreferencePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PreferencesApi = (function (_super) {
        __extends(PreferencesApi, _super);
        function PreferencesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreferencesApi.prototype.getPreference = function (personId, preferenceName, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getPreference");
            }
            if (preferenceName === undefined || preferenceName === null) {
                throw new Error("Required param 'preferenceName' in getPreference");
            }
            var pathParams = {
                'personId': personId, 'preferenceName': preferenceName
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/preferences/{preferenceName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PreferenceEntry);
        };
        PreferencesApi.prototype.listPreferences = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listPreferences");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/preferences', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PreferencePaging);
        };
        return PreferencesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProbeEntryEntry = (function () {
        function ProbeEntryEntry(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProbeEntryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProbeEntry = (function () {
        function ProbeEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ProbeEntryEntry(input.entry) : undefined;
            }
        }
        return ProbeEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProbesApi = (function (_super) {
        __extends(ProbesApi, _super);
        function ProbesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProbesApi.prototype.getProbe = function (probeId) {
            var postBody = null;
            if (probeId === undefined || probeId === null) {
                throw new Error("Required param 'probeId' in getProbe");
            }
            var pathParams = {
                'probeId': probeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/probes/{probeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProbeEntry);
        };
        return ProbesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodePagingList = (function () {
        function NodePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new NodeEntry(item);
                    });
                }
                this.source = input.source ? new Node(input.source) : undefined;
            }
        }
        return NodePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodePaging = (function () {
        function NodePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new NodePagingList(input.list) : undefined;
            }
        }
        return NodePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var QueriesApi = (function (_super) {
        __extends(QueriesApi, _super);
        function QueriesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QueriesApi.prototype.findNodes = function (term, opts) {
            opts = opts || {};
            var postBody = null;
            if (term === undefined || term === null) {
                throw new Error("Required param 'term' in findNodes");
            }
            var pathParams = {};
            var queryParams = {
                'term': term,
                'rootNodeId': opts['rootNodeId'],
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'nodeType': opts['nodeType'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/queries/nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodePaging);
        };
        QueriesApi.prototype.findPeople = function (term, opts) {
            opts = opts || {};
            var postBody = null;
            if (term === undefined || term === null) {
                throw new Error("Required param 'term' in findPeople");
            }
            var pathParams = {};
            var queryParams = {
                'term': term,
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/queries/people', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PersonPaging);
        };
        QueriesApi.prototype.findSites = function (term, opts) {
            opts = opts || {};
            var postBody = null;
            if (term === undefined || term === null) {
                throw new Error("Required param 'term' in findSites");
            }
            var pathParams = {};
            var queryParams = {
                'term': term,
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/queries/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
        };
        return QueriesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingAggregate = (function () {
        function RatingAggregate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RatingAggregate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Rating = (function () {
        function Rating(input) {
            if (input) {
                Object.assign(this, input);
                this.aggregate = input.aggregate ? new RatingAggregate(input.aggregate) : undefined;
                this.ratedAt = input.ratedAt ? DateAlfresco.parseDate(input.ratedAt) : undefined;
            }
        }
        return Rating;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingEntry = (function () {
        function RatingEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Rating(input.entry) : undefined;
            }
        }
        return RatingEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingPagingList = (function () {
        function RatingPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RatingEntry(item);
                    });
                }
            }
        }
        return RatingPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingPaging = (function () {
        function RatingPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RatingPagingList(input.list) : undefined;
            }
        }
        return RatingPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingsApi = (function (_super) {
        __extends(RatingsApi, _super);
        function RatingsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RatingsApi.prototype.createRating = function (nodeId, ratingBodyCreate, opts) {
            opts = opts || {};
            var postBody = ratingBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createRating");
            }
            if (ratingBodyCreate === undefined || ratingBodyCreate === null) {
                throw new Error("Required param 'ratingBodyCreate' in createRating");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RatingEntry);
        };
        RatingsApi.prototype.deleteRating = function (nodeId, ratingId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteRating");
            }
            if (ratingId === undefined || ratingId === null) {
                throw new Error("Required param 'ratingId' in deleteRating");
            }
            var pathParams = {
                'nodeId': nodeId, 'ratingId': ratingId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings/{ratingId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RatingsApi.prototype.getRating = function (nodeId, ratingId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getRating");
            }
            if (ratingId === undefined || ratingId === null) {
                throw new Error("Required param 'ratingId' in getRating");
            }
            var pathParams = {
                'nodeId': nodeId, 'ratingId': ratingId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings/{ratingId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RatingEntry);
        };
        RatingsApi.prototype.listRatings = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listRatings");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/ratings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RatingPaging);
        };
        return RatingsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.Rendition = (function () {
        function Rendition(input) {
            if (input) {
                Object.assign(this, input);
                this.content = input.content ? new ContentInfo(input.content) : undefined;
            }
        }
        return Rendition;
    }());
    (function (Rendition) {
        Rendition.StatusEnum = {
            CREATED: 'CREATED',
            NOTCREATED: 'NOT_CREATED'
        };
    })(exports.Rendition || (exports.Rendition = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionEntry = (function () {
        function RenditionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.Rendition(input.entry) : undefined;
            }
        }
        return RenditionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionPagingList = (function () {
        function RenditionPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RenditionEntry(item);
                    });
                }
            }
        }
        return RenditionPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionPaging = (function () {
        function RenditionPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RenditionPagingList(input.list) : undefined;
            }
        }
        return RenditionPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionsApi = (function (_super) {
        __extends(RenditionsApi, _super);
        function RenditionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RenditionsApi.prototype.createRendition = function (nodeId, renditionBodyCreate) {
            var postBody = renditionBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createRendition");
            }
            if (renditionBodyCreate === undefined || renditionBodyCreate === null) {
                throw new Error("Required param 'renditionBodyCreate' in createRendition");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RenditionsApi.prototype.getRendition = function (nodeId, renditionId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getRendition");
            }
            if (renditionId === undefined || renditionId === null) {
                throw new Error("Required param 'renditionId' in getRendition");
            }
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
        };
        RenditionsApi.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getRenditionContent");
            }
            if (renditionId === undefined || renditionId === null) {
                throw new Error("Required param 'renditionId' in getRenditionContent");
            }
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {
                'attachment': opts['attachment'],
                'placeholder': opts['placeholder']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RenditionsApi.prototype.listRenditions = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listRenditions");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
        };
        return RenditionsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLink = (function () {
        function SharedLink(input) {
            if (input) {
                Object.assign(this, input);
                this.expiresAt = input.expiresAt ? DateAlfresco.parseDate(input.expiresAt) : undefined;
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.sharedByUser = input.sharedByUser ? new UserInfo(input.sharedByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
            }
        }
        return SharedLink;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkEntry = (function () {
        function SharedLinkEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SharedLink(input.entry) : undefined;
            }
        }
        return SharedLinkEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkPagingList = (function () {
        function SharedLinkPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SharedLinkEntry(item);
                    });
                }
            }
        }
        return SharedLinkPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkPaging = (function () {
        function SharedLinkPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SharedLinkPagingList(input.list) : undefined;
            }
        }
        return SharedLinkPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedlinksApi = (function (_super) {
        __extends(SharedlinksApi, _super);
        function SharedlinksApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SharedlinksApi.prototype.createSharedLink = function (sharedLinkBodyCreate, opts) {
            opts = opts || {};
            var postBody = sharedLinkBodyCreate;
            if (sharedLinkBodyCreate === undefined || sharedLinkBodyCreate === null) {
                throw new Error("Required param 'sharedLinkBodyCreate' in createSharedLink");
            }
            var pathParams = {};
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
        };
        SharedlinksApi.prototype.deleteSharedLink = function (sharedId) {
            var postBody = null;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in deleteSharedLink");
            }
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.emailSharedLink = function (sharedId, sharedLinkBodyEmail) {
            var postBody = sharedLinkBodyEmail;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in emailSharedLink");
            }
            if (sharedLinkBodyEmail === undefined || sharedLinkBodyEmail === null) {
                throw new Error("Required param 'sharedLinkBodyEmail' in emailSharedLink");
            }
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/email', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.getSharedLink = function (sharedId, opts) {
            opts = opts || {};
            var postBody = null;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in getSharedLink");
            }
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkEntry);
        };
        SharedlinksApi.prototype.getSharedLinkContent = function (sharedId, opts) {
            opts = opts || {};
            var postBody = null;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in getSharedLinkContent");
            }
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
            var postBody = null;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in getSharedLinkRendition");
            }
            if (renditionId === undefined || renditionId === null) {
                throw new Error("Required param 'renditionId' in getSharedLinkRendition");
            }
            var pathParams = {
                'sharedId': sharedId, 'renditionId': renditionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
        };
        SharedlinksApi.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            opts = opts || {};
            var postBody = null;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in getSharedLinkRenditionContent");
            }
            if (renditionId === undefined || renditionId === null) {
                throw new Error("Required param 'renditionId' in getSharedLinkRenditionContent");
            }
            var pathParams = {
                'sharedId': sharedId, 'renditionId': renditionId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SharedlinksApi.prototype.listSharedLinkRenditions = function (sharedId) {
            var postBody = null;
            if (sharedId === undefined || sharedId === null) {
                throw new Error("Required param 'sharedId' in listSharedLinkRenditions");
            }
            var pathParams = {
                'sharedId': sharedId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links/{sharedId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
        };
        SharedlinksApi.prototype.listSharedLinks = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/shared-links', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SharedLinkPaging);
        };
        return SharedlinksApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainer = (function () {
        function SiteContainer(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteContainer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainerEntry = (function () {
        function SiteContainerEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SiteContainer(input.entry) : undefined;
            }
        }
        return SiteContainerEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainerPagingList = (function () {
        function SiteContainerPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteContainerEntry(item);
                    });
                }
            }
        }
        return SiteContainerPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteContainerPaging = (function () {
        function SiteContainerPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteContainerPagingList(input.list) : undefined;
            }
        }
        return SiteContainerPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteMember = (function () {
        function SiteMember(input) {
            if (input) {
                Object.assign(this, input);
                this.person = input.person ? new Person(input.person) : undefined;
            }
        }
        return SiteMember;
    }());
    (function (SiteMember) {
        SiteMember.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteMember || (exports.SiteMember = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMemberEntry = (function () {
        function SiteMemberEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.SiteMember(input.entry) : undefined;
            }
        }
        return SiteMemberEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMemberPagingList = (function () {
        function SiteMemberPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteMemberEntry(item);
                    });
                }
            }
        }
        return SiteMemberPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMemberPaging = (function () {
        function SiteMemberPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteMemberPagingList(input.list) : undefined;
            }
        }
        return SiteMemberPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequest = (function () {
        function SiteMembershipRequest(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.site = input.site ? new exports.Site(input.site) : undefined;
            }
        }
        return SiteMembershipRequest;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestEntry = (function () {
        function SiteMembershipRequestEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SiteMembershipRequest(input.entry) : undefined;
            }
        }
        return SiteMembershipRequestEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestPagingList = (function () {
        function SiteMembershipRequestPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteMembershipRequestEntry(item);
                    });
                }
            }
        }
        return SiteMembershipRequestPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestPaging = (function () {
        function SiteMembershipRequestPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteMembershipRequestPagingList(input.list) : undefined;
            }
        }
        return SiteMembershipRequestPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPerson = (function () {
        function SiteMembershipRequestWithPerson(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.site = input.site ? new exports.Site(input.site) : undefined;
                this.person = input.person ? new Person(input.person) : undefined;
            }
        }
        return SiteMembershipRequestWithPerson;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPersonEntry = (function () {
        function SiteMembershipRequestWithPersonEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SiteMembershipRequestWithPerson(input.entry) : undefined;
            }
        }
        return SiteMembershipRequestWithPersonEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPersonPagingList = (function () {
        function SiteMembershipRequestWithPersonPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteMembershipRequestWithPersonEntry(item);
                    });
                }
            }
        }
        return SiteMembershipRequestWithPersonPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestWithPersonPaging = (function () {
        function SiteMembershipRequestWithPersonPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteMembershipRequestWithPersonPagingList(input.list) : undefined;
            }
        }
        return SiteMembershipRequestWithPersonPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteRole = (function () {
        function SiteRole(input) {
            if (input) {
                Object.assign(this, input);
                this.site = input.site ? new exports.Site(input.site) : undefined;
            }
        }
        return SiteRole;
    }());
    (function (SiteRole) {
        SiteRole.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteRole || (exports.SiteRole = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteRoleEntry = (function () {
        function SiteRoleEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.SiteRole(input.entry) : undefined;
            }
        }
        return SiteRoleEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteRolePagingList = (function () {
        function SiteRolePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new SiteRoleEntry(item);
                    });
                }
            }
        }
        return SiteRolePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteRolePaging = (function () {
        function SiteRolePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new SiteRolePagingList(input.list) : undefined;
            }
        }
        return SiteRolePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitesApi = (function (_super) {
        __extends(SitesApi, _super);
        function SitesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SitesApi.prototype.approveSiteMembershipRequest = function (siteId, inviteeId, opts) {
            opts = opts || {};
            var postBody = opts['siteMembershipApprovalBody'];
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in approveSiteMembershipRequest");
            }
            if (inviteeId === undefined || inviteeId === null) {
                throw new Error("Required param 'inviteeId' in approveSiteMembershipRequest");
            }
            var pathParams = {
                'siteId': siteId, 'inviteeId': inviteeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/approve', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.createSite = function (siteBodyCreate, opts) {
            opts = opts || {};
            var postBody = siteBodyCreate;
            if (siteBodyCreate === undefined || siteBodyCreate === null) {
                throw new Error("Required param 'siteBodyCreate' in createSite");
            }
            var pathParams = {};
            var queryParams = {
                'skipConfiguration': opts['skipConfiguration'],
                'skipAddToFavorites': opts['skipAddToFavorites'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        SitesApi.prototype.createSiteMembership = function (siteId, siteMembershipBodyCreate, opts) {
            opts = opts || {};
            var postBody = siteMembershipBodyCreate;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in createSiteMembership");
            }
            if (siteMembershipBodyCreate === undefined || siteMembershipBodyCreate === null) {
                throw new Error("Required param 'siteMembershipBodyCreate' in createSiteMembership");
            }
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
        };
        SitesApi.prototype.createSiteMembershipRequestForPerson = function (personId, siteMembershipRequestBodyCreate, opts) {
            opts = opts || {};
            var postBody = siteMembershipRequestBodyCreate;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in createSiteMembershipRequestForPerson");
            }
            if (siteMembershipRequestBodyCreate === undefined || siteMembershipRequestBodyCreate === null) {
                throw new Error("Required param 'siteMembershipRequestBodyCreate' in createSiteMembershipRequestForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
        };
        SitesApi.prototype.deleteSite = function (siteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in deleteSite");
            }
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'permanent': opts['permanent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.deleteSiteMembership = function (siteId, personId) {
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in deleteSiteMembership");
            }
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in deleteSiteMembership");
            }
            var pathParams = {
                'siteId': siteId, 'personId': personId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.deleteSiteMembershipForPerson = function (personId, siteId) {
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in deleteSiteMembershipForPerson");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in deleteSiteMembershipForPerson");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.deleteSiteMembershipRequestForPerson = function (personId, siteId) {
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in deleteSiteMembershipRequestForPerson");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in deleteSiteMembershipRequestForPerson");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.getSite = function (siteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getSite");
            }
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'relations': this.apiClient.buildCollectionParam(opts['relations'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        SitesApi.prototype.getSiteContainer = function (siteId, containerId, opts) {
            opts = opts || {};
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getSiteContainer");
            }
            if (containerId === undefined || containerId === null) {
                throw new Error("Required param 'containerId' in getSiteContainer");
            }
            var pathParams = {
                'siteId': siteId, 'containerId': containerId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/containers/{containerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerEntry);
        };
        SitesApi.prototype.getSiteMembership = function (siteId, personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getSiteMembership");
            }
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getSiteMembership");
            }
            var pathParams = {
                'siteId': siteId, 'personId': personId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
        };
        SitesApi.prototype.getSiteMembershipForPerson = function (personId, siteId) {
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getSiteMembershipForPerson");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getSiteMembershipForPerson");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/sites/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRoleEntry);
        };
        SitesApi.prototype.getSiteMembershipRequestForPerson = function (personId, siteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in getSiteMembershipRequestForPerson");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getSiteMembershipRequestForPerson");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
        };
        SitesApi.prototype.getSiteMembershipRequests = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestWithPersonPaging);
        };
        SitesApi.prototype.listSiteContainers = function (siteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in listSiteContainers");
            }
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/containers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteContainerPaging);
        };
        SitesApi.prototype.listSiteMembershipRequestsForPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listSiteMembershipRequestsForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestPaging);
        };
        SitesApi.prototype.listSiteMemberships = function (siteId, opts) {
            opts = opts || {};
            var postBody = null;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in listSiteMemberships");
            }
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberPaging);
        };
        SitesApi.prototype.listSiteMembershipsForPerson = function (personId, opts) {
            opts = opts || {};
            var postBody = null;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in listSiteMembershipsForPerson");
            }
            var pathParams = {
                'personId': personId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'relations': this.apiClient.buildCollectionParam(opts['relations'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteRolePaging);
        };
        SitesApi.prototype.listSites = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'relations': this.apiClient.buildCollectionParam(opts['relations'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SitePaging);
        };
        SitesApi.prototype.rejectSiteMembershipRequest = function (siteId, inviteeId, opts) {
            opts = opts || {};
            var postBody = opts['siteMembershipRejectionBody'];
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in rejectSiteMembershipRequest");
            }
            if (inviteeId === undefined || inviteeId === null) {
                throw new Error("Required param 'inviteeId' in rejectSiteMembershipRequest");
            }
            var pathParams = {
                'siteId': siteId, 'inviteeId': inviteeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/site-membership-requests/{inviteeId}/reject', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        SitesApi.prototype.updateSite = function (siteId, siteBodyUpdate, opts) {
            opts = opts || {};
            var postBody = siteBodyUpdate;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in updateSite");
            }
            if (siteBodyUpdate === undefined || siteBodyUpdate === null) {
                throw new Error("Required param 'siteBodyUpdate' in updateSite");
            }
            var pathParams = {
                'siteId': siteId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteEntry);
        };
        SitesApi.prototype.updateSiteMembership = function (siteId, personId, siteMembershipBodyUpdate, opts) {
            opts = opts || {};
            var postBody = siteMembershipBodyUpdate;
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in updateSiteMembership");
            }
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in updateSiteMembership");
            }
            if (siteMembershipBodyUpdate === undefined || siteMembershipBodyUpdate === null) {
                throw new Error("Required param 'siteMembershipBodyUpdate' in updateSiteMembership");
            }
            var pathParams = {
                'siteId': siteId, 'personId': personId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/sites/{siteId}/members/{personId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMemberEntry);
        };
        SitesApi.prototype.updateSiteMembershipRequestForPerson = function (personId, siteId, siteMembershipRequestBodyUpdate, opts) {
            opts = opts || {};
            var postBody = siteMembershipRequestBodyUpdate;
            if (personId === undefined || personId === null) {
                throw new Error("Required param 'personId' in updateSiteMembershipRequestForPerson");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in updateSiteMembershipRequestForPerson");
            }
            if (siteMembershipRequestBodyUpdate === undefined || siteMembershipRequestBodyUpdate === null) {
                throw new Error("Required param 'siteMembershipRequestBodyUpdate' in updateSiteMembershipRequestForPerson");
            }
            var pathParams = {
                'personId': personId, 'siteId': siteId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/people/{personId}/site-membership-requests/{siteId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SiteMembershipRequestEntry);
        };
        return SitesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Tag = (function () {
        function Tag(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Tag;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagEntry = (function () {
        function TagEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Tag(input.entry) : undefined;
            }
        }
        return TagEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagPagingList = (function () {
        function TagPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TagEntry(item);
                    });
                }
            }
        }
        return TagPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagPaging = (function () {
        function TagPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TagPagingList(input.list) : undefined;
            }
        }
        return TagPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagsApi = (function (_super) {
        __extends(TagsApi, _super);
        function TagsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TagsApi.prototype.createTagForNode = function (nodeId, tagBodyCreate, opts) {
            opts = opts || {};
            var postBody = tagBodyCreate;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in createTagForNode");
            }
            if (tagBodyCreate === undefined || tagBodyCreate === null) {
                throw new Error("Required param 'tagBodyCreate' in createTagForNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/tags', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
        };
        TagsApi.prototype.deleteTagFromNode = function (nodeId, tagId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteTagFromNode");
            }
            if (tagId === undefined || tagId === null) {
                throw new Error("Required param 'tagId' in deleteTagFromNode");
            }
            var pathParams = {
                'nodeId': nodeId, 'tagId': tagId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/tags/{tagId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TagsApi.prototype.getTag = function (tagId, opts) {
            opts = opts || {};
            var postBody = null;
            if (tagId === undefined || tagId === null) {
                throw new Error("Required param 'tagId' in getTag");
            }
            var pathParams = {
                'tagId': tagId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tags/{tagId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
        };
        TagsApi.prototype.listTags = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
        };
        TagsApi.prototype.listTagsForNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listTagsForNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagPaging);
        };
        TagsApi.prototype.updateTag = function (tagId, tagBodyUpdate, opts) {
            opts = opts || {};
            var postBody = tagBodyUpdate;
            if (tagId === undefined || tagId === null) {
                throw new Error("Required param 'tagId' in updateTag");
            }
            if (tagBodyUpdate === undefined || tagBodyUpdate === null) {
                throw new Error("Required param 'tagBodyUpdate' in updateTag");
            }
            var pathParams = {
                'tagId': tagId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tags/{tagId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TagEntry);
        };
        return TagsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNode = (function () {
        function DeletedNode(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.permissions = input.permissions ? new PermissionsInfo(input.permissions) : undefined;
                this.archivedByUser = input.archivedByUser ? new UserInfo(input.archivedByUser) : undefined;
                this.archivedAt = input.archivedAt ? DateAlfresco.parseDate(input.archivedAt) : undefined;
            }
        }
        return DeletedNode;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodeEntry = (function () {
        function DeletedNodeEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new DeletedNode(input.entry) : undefined;
            }
        }
        return DeletedNodeEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodesPagingList = (function () {
        function DeletedNodesPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new DeletedNodeEntry(item);
                    });
                }
            }
        }
        return DeletedNodesPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodesPaging = (function () {
        function DeletedNodesPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new DeletedNodesPagingList(input.list) : undefined;
            }
        }
        return DeletedNodesPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TrashcanApi = (function (_super) {
        __extends(TrashcanApi, _super);
        function TrashcanApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TrashcanApi.prototype.deleteDeletedNode = function (nodeId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteDeletedNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TrashcanApi.prototype.getArchivedNodeRendition = function (nodeId, renditionId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getArchivedNodeRendition");
            }
            if (renditionId === undefined || renditionId === null) {
                throw new Error("Required param 'renditionId' in getArchivedNodeRendition");
            }
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionEntry);
        };
        TrashcanApi.prototype.getArchivedNodeRenditionContent = function (nodeId, renditionId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getArchivedNodeRenditionContent");
            }
            if (renditionId === undefined || renditionId === null) {
                throw new Error("Required param 'renditionId' in getArchivedNodeRenditionContent");
            }
            var pathParams = {
                'nodeId': nodeId, 'renditionId': renditionId
            };
            var queryParams = {
                'attachment': opts['attachment'],
                'placeholder': opts['placeholder']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions/{renditionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TrashcanApi.prototype.getDeletedNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getDeletedNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodeEntry);
        };
        TrashcanApi.prototype.getDeletedNodeContent = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getDeletedNodeContent");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TrashcanApi.prototype.listDeletedNodeRenditions = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listDeletedNodeRenditions");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/renditions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RenditionPaging);
        };
        TrashcanApi.prototype.listDeletedNodes = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeletedNodesPaging);
        };
        TrashcanApi.prototype.restoreDeletedNode = function (nodeId, opts) {
            opts = opts || {};
            var postBody = opts['deletedNodeBodyRestore'];
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in restoreDeletedNode");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/deleted-nodes/{nodeId}/restore', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, NodeEntry);
        };
        return TrashcanApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Version = (function () {
        function Version(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
            }
        }
        return Version;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionEntry = (function () {
        function VersionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Version(input.entry) : undefined;
            }
        }
        return VersionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionPagingList = (function () {
        function VersionPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new VersionEntry(item);
                    });
                }
            }
        }
        return VersionPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionPaging = (function () {
        function VersionPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new VersionPagingList(input.list) : undefined;
            }
        }
        return VersionPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionsApi = (function (_super) {
        __extends(VersionsApi, _super);
        function VersionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VersionsApi.prototype.deleteVersion = function (nodeId, versionId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in deleteVersion");
            }
            if (versionId === undefined || versionId === null) {
                throw new Error("Required param 'versionId' in deleteVersion");
            }
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        VersionsApi.prototype.getVersion = function (nodeId, versionId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getVersion");
            }
            if (versionId === undefined || versionId === null) {
                throw new Error("Required param 'versionId' in getVersion");
            }
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, VersionEntry);
        };
        VersionsApi.prototype.getVersionContent = function (nodeId, versionId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in getVersionContent");
            }
            if (versionId === undefined || versionId === null) {
                throw new Error("Required param 'versionId' in getVersionContent");
            }
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince'], 'Range': opts['range']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        VersionsApi.prototype.listVersionHistory = function (nodeId, opts) {
            opts = opts || {};
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in listVersionHistory");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, VersionPaging);
        };
        VersionsApi.prototype.revertVersion = function (nodeId, versionId, revertBody, opts) {
            opts = opts || {};
            var postBody = revertBody;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in revertVersion");
            }
            if (versionId === undefined || versionId === null) {
                throw new Error("Required param 'versionId' in revertVersion");
            }
            if (revertBody === undefined || revertBody === null) {
                throw new Error("Required param 'revertBody' in revertVersion");
            }
            var pathParams = {
                'nodeId': nodeId, 'versionId': versionId
            };
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/nodes/{nodeId}/versions/{versionId}/revert', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, VersionEntry);
        };
        return VersionsApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var WebscriptApi = (function (_super) {
        __extends(WebscriptApi, _super);
        function WebscriptApi() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.allowedMethod = ['GET', 'POST', 'PUT', 'DELETE'];
            return _this;
        }
        WebscriptApi.prototype.executeWebScript = function (httpMethod, scriptPath, scriptArgs, contextRoot, servicePath, postBody) {
            contextRoot = contextRoot || 'alfresco';
            servicePath = servicePath || 'service';
            postBody = postBody || null;
            if (!httpMethod || this.allowedMethod.indexOf(httpMethod) === -1) {
                throw 'method allowed value  GET, POST, PUT and DELETE';
            }
            if (!scriptPath) {
                throw 'Missing param scriptPath in executeWebScript';
            }
            var pathParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', 'text/html'];
            return this.apiClient.callApi('/' + servicePath + '/' + scriptPath, httpMethod, pathParams, scriptArgs, headerParams, formParams, postBody, contentTypes, accepts, null, contextRoot);
        };
        return WebscriptApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassDescription = (function () {
        function ClassDescription(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassDescription;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassesApi = (function (_super) {
        __extends(ClassesApi, _super);
        function ClassesApi() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.path = '/api/classes';
            return _this;
        }
        ClassesApi.prototype.getClass = function (className, opts) {
            opts = opts || {};
            if (className === undefined || className === null) {
                throw "Missing param 'className' in getClass";
            }
            var postBody = null;
            var pathParams = {
                'className': className
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var contextRoot = this.apiClient.config.contextRoot + '/s';
            return this.apiClient.callApi(this.path + '/{className}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassDescription, contextRoot);
        };
        return ClassesApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UploadApi = (function (_super) {
        __extends(UploadApi, _super);
        function UploadApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UploadApi.prototype.uploadFile = function (fileDefinition, relativePath, rootFolderId, nodeBody, opts) {
            rootFolderId = rootFolderId || '-root-';
            opts = opts || {};
            var nodeBodyRequired = {
                'name': fileDefinition.name,
                'nodeType': 'cm:content',
                'relativePath': relativePath
            };
            nodeBody = Object.assign(nodeBodyRequired, nodeBody);
            var formParam = Object.assign({}, nodeBody.properties || {});
            formParam.filedata = fileDefinition;
            formParam.relativePath = relativePath;
            if (opts.name) {
                formParam.name = opts.name;
            }
            formParam = Object.assign(formParam, opts);
            return this.createNode(rootFolderId, nodeBody, opts, formParam);
        };
        return UploadApi;
    }(NodesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentApi = (function (_super) {
        __extends(ContentApi, _super);
        function ContentApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ContentApi.prototype.getDocumentThumbnailUrl = function (nodeId, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/renditions/doclib/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getDocumentPreviewUrl = function (nodeId, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/renditions/imgpreview/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getContentUrl = function (nodeId, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getRenditionUrl = function (nodeId, encoding, attachment, ticket) {
            return this.apiClient.basePath + '/nodes/' + nodeId +
                '/renditions/' + encoding + '/content' +
                '?attachment=' + (attachment ? 'true' : 'false') +
                this.apiClient.getAlfTicket(ticket);
        };
        ContentApi.prototype.getSharedLinkContentUrl = function (linkId, attachment) {
            return this.apiClient.basePath + '/shared-links/' + linkId +
                '/content' +
                '?attachment=' + (attachment ? 'true' : 'false');
        };
        ContentApi.prototype.getSharedLinkRenditionUrl = function (sharedId, renditionId, attachment) {
            return this.apiClient.basePath + '/shared-links/' + sharedId +
                '/renditions/' + renditionId + '/content' +
                '?attachment=' + (attachment ? 'true' : 'false');
        };
        return ContentApi;
    }(BaseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CONTENT_APIS = [ActionsApi, ActivitiesApi, AuditApi, CommentsApi, DownloadsApi, FavoritesApi, GroupsApi, NetworksApi, NodesApi, PeopleApi, PreferencesApi, ProbesApi, QueriesApi, RatingsApi, RenditionsApi, SharedlinksApi, SitesApi, TagsApi, TrashcanApi, VersionsApi, WebscriptApi, ClassesApi, CustomModelApi, UploadApi, ContentApi];

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActionBodyExec = (function () {
        function ActionBodyExec(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ActionBodyExec;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssociationBody = (function () {
        function AssociationBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AssociationBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditBodyUpdate = (function () {
        function AuditBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationBody = (function () {
        function ChildAssociationBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChildAssociationBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClientBody = (function () {
        function ClientBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClientBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentBody = (function () {
        function CommentBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CommentBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeletedNodeBodyRestore = (function () {
        function DeletedNodeBodyRestore(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DeletedNodeBodyRestore;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadBodyCreate = (function () {
        function DownloadBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DownloadBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ErrorError = (function () {
        function ErrorError(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ErrorError;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteBodyCreate = (function () {
        function FavoriteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FavoriteBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoriteSiteBodyCreate = (function () {
        function FavoriteSiteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FavoriteSiteBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupBodyCreate = (function () {
        function GroupBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupBodyUpdate = (function () {
        function GroupBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.GroupMembershipBodyCreate = (function () {
        function GroupMembershipBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupMembershipBodyCreate;
    }());
    (function (GroupMembershipBodyCreate) {
        GroupMembershipBodyCreate.MemberTypeEnum = {
            GROUP: 'GROUP',
            PERSON: 'PERSON'
        };
    })(exports.GroupMembershipBodyCreate || (exports.GroupMembershipBodyCreate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelError = (function () {
        function ModelError(input) {
            if (input) {
                Object.assign(this, input);
                this.error = input.error ? new ErrorError(input.error) : undefined;
            }
        }
        return ModelError;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyCopy = (function () {
        function NodeBodyCopy(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyCopy;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyCreateAssociation = (function () {
        function NodeBodyCreateAssociation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyCreateAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyCreate = (function () {
        function NodeBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
                this.association = input.association ? new NodeBodyCreateAssociation(input.association) : undefined;
                if (input.secondaryChildren) {
                    this.secondaryChildren = input.secondaryChildren.map(function (item) {
                        return new ChildAssociationBody(item);
                    });
                }
                if (input.targets) {
                    this.targets = input.targets.map(function (item) {
                        return new AssociationBody(item);
                    });
                }
            }
        }
        return NodeBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.NodeBodyLock = (function () {
        function NodeBodyLock(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyLock;
    }());
    (function (NodeBodyLock) {
        NodeBodyLock.TypeEnum = {
            ALLOWOWNERCHANGES: 'ALLOW_OWNER_CHANGES',
            FULL: 'FULL'
        };
        NodeBodyLock.LifetimeEnum = {
            PERSISTENT: 'PERSISTENT',
            EPHEMERAL: 'EPHEMERAL'
        };
    })(exports.NodeBodyLock || (exports.NodeBodyLock = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyMove = (function () {
        function NodeBodyMove(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NodeBodyMove;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PermissionsBodyUpdate = (function () {
        function PermissionsBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
                if (input.locallySet) {
                    this.locallySet = input.locallySet.map(function (item) {
                        return new exports.PermissionElement(item);
                    });
                }
            }
        }
        return PermissionsBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodeBodyUpdate = (function () {
        function NodeBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
                this.permissions = input.permissions ? new PermissionsBodyUpdate(input.permissions) : undefined;
            }
        }
        return NodeBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PasswordResetBody = (function () {
        function PasswordResetBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PasswordResetBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonBodyCreate = (function () {
        function PersonBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
                this.company = input.company ? new Company(input.company) : undefined;
            }
        }
        return PersonBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PersonBodyUpdate = (function () {
        function PersonBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
                this.company = input.company ? new Company(input.company) : undefined;
            }
        }
        return PersonBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RatingBody = (function () {
        function RatingBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RatingBody;
    }());
    (function (RatingBody) {
        RatingBody.IdEnum = {
            Likes: 'likes',
            FiveStar: 'fiveStar'
        };
    })(exports.RatingBody || (exports.RatingBody = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionBodyCreate = (function () {
        function RenditionBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RenditionBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RevertBody = (function () {
        function RevertBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RevertBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkBodyCreate = (function () {
        function SharedLinkBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
                this.expiresAt = input.expiresAt ? DateAlfresco.parseDate(input.expiresAt) : undefined;
            }
        }
        return SharedLinkBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedLinkBodyEmail = (function () {
        function SharedLinkBodyEmail(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SharedLinkBodyEmail;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteBody = (function () {
        function SiteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteBodyCreate;
    }());
    (function (SiteBodyCreate) {
        SiteBodyCreate.VisibilityEnum = {
            PUBLIC: 'PUBLIC',
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED'
        };
    })(exports.SiteBody || (exports.SiteBody = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteBodyUpdate = (function () {
        function SiteBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteBodyUpdate;
    }());
    (function (SiteBodyUpdate) {
        SiteBodyUpdate.VisibilityEnum = {
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED',
            PUBLIC: 'PUBLIC'
        };
    })(exports.SiteBodyUpdate || (exports.SiteBodyUpdate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipApprovalBody = (function () {
        function SiteMembershipApprovalBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipApprovalBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteMemberBody = (function () {
        function SiteMembershipBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipBodyCreate;
    }());
    (function (SiteMembershipBodyCreate) {
        SiteMembershipBodyCreate.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteMemberBody || (exports.SiteMemberBody = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.SiteMemberRoleBody = (function () {
        function SiteMembershipBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipBodyUpdate;
    }());
    (function (SiteMembershipBodyUpdate) {
        SiteMembershipBodyUpdate.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.SiteMemberRoleBody || (exports.SiteMemberRoleBody = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRejectionBody = (function () {
        function SiteMembershipRejectionBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipRejectionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestBodyCreate = (function () {
        function SiteMembershipRequestBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipRequestBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SiteMembershipRequestBodyUpdate = (function () {
        function SiteMembershipRequestBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SiteMembershipRequestBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagBody = (function () {
        function TagBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return TagBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassPropertyDescription = (function () {
        function ClassPropertyDescription(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassPropertyDescription;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EntitlementsInfo = (function () {
        function EntitlementsInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return EntitlementsInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LicenseInfo = (function () {
        function LicenseInfo(input) {
            if (input) {
                Object.assign(this, input);
                this.issuedAt = input.issuedAt ? DateAlfresco.parseDate(input.issuedAt) : undefined;
                this.expiresAt = input.expiresAt ? DateAlfresco.parseDate(input.expiresAt) : undefined;
                this.entitlements = input.entitlements ? new EntitlementsInfo(input.entitlements) : undefined;
            }
        }
        return LicenseInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModuleInfo = (function () {
        function ModuleInfo(input) {
            if (input) {
                Object.assign(this, input);
                this.installDate = input.installDate ? DateAlfresco.parseDate(input.installDate) : undefined;
            }
        }
        return ModuleInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var StatusInfo = (function () {
        function StatusInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return StatusInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionInfo = (function () {
        function VersionInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return VersionInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RepositoryInfo = (function () {
        function RepositoryInfo(input) {
            if (input) {
                Object.assign(this, input);
                this.version = input.version ? new VersionInfo(input.version) : undefined;
                this.status = input.status ? new StatusInfo(input.status) : undefined;
                this.license = input.license ? new LicenseInfo(input.license) : undefined;
                if (input.modules) {
                    this.modules = input.modules.map(function (item) {
                        return new ModuleInfo(item);
                    });
                }
            }
        }
        return RepositoryInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RepositoryEntry = (function () {
        function RepositoryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.repository = input.repository ? new RepositoryInfo(input.repository) : undefined;
            }
        }
        return RepositoryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DiscoveryEntry = (function () {
        function DiscoveryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RepositoryEntry(input.entry) : undefined;
            }
        }
        return DiscoveryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$1 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.discoveryClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DiscoveryApi = (function (_super) {
        __extends(DiscoveryApi, _super);
        function DiscoveryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DiscoveryApi.prototype.getRepositoryInformation = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = [];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/discovery', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DiscoveryEntry);
        };
        return DiscoveryApi;
    }(BaseApi$1));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DISCOVERY_APIS = { DiscoveryApi: DiscoveryApi };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuide = (function () {
        function ClassificationGuide(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuide;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuideEntry = (function () {
        function ClassificationGuideEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ClassificationGuide(input.entry) : undefined;
            }
        }
        return ClassificationGuideEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuides = (function () {
        function ClassificationGuides(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuides;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesEntry = (function () {
        function ClassificationGuidesEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ClassificationGuides(input.entry) : undefined;
            }
        }
        return ClassificationGuidesEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidePagingList = (function () {
        function ClassificationGuidePagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ClassificationGuidesEntry(item);
                    });
                }
            }
        }
        return ClassificationGuidePagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidePaging = (function () {
        function ClassificationGuidePaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ClassificationGuidePagingList(input.list) : undefined;
            }
        }
        return ClassificationGuidePaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationInformation = (function () {
        function ClassificationInformation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationInformation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarks = (function (_super) {
        __extends(SecurityMarks, _super);
        function SecurityMarks(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return SecurityMarks;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarkInformation = (function () {
        function SecurityMarkInformation(input) {
            if (input) {
                Object.assign(this, input);
                this.add = input.add ? new SecurityMarks(input.add) : undefined;
            }
        }
        return SecurityMarkInformation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Instruction = (function () {
        function Instruction(input) {
            if (input) {
                Object.assign(this, input);
                this.classificationInformation = input.classificationInformation ? new ClassificationInformation(input.classificationInformation) : undefined;
                this.securityMarkInformation = input.securityMarkInformation ? new SecurityMarkInformation(input.securityMarkInformation) : undefined;
            }
        }
        return Instruction;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var InstructionEntry = (function () {
        function InstructionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Instruction(input.entry) : undefined;
            }
        }
        return InstructionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuideInTopic = (function () {
        function ClassificationGuideInTopic(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuideInTopic;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Path = (function (_super) {
        __extends(Path, _super);
        function Path(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return Path;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Topic = (function () {
        function Topic(input) {
            if (input) {
                Object.assign(this, input);
                this.instruction = input.instruction ? new Instruction(input.instruction) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.path = input.path ? new Path(input.path) : undefined;
                this.classificationGuide = input.classificationGuide ? new ClassificationGuideInTopic(input.classificationGuide) : undefined;
            }
        }
        return Topic;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicEntry = (function () {
        function TopicEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Topic(input.entry) : undefined;
            }
        }
        return TopicEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicPagingList = (function () {
        function TopicPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TopicEntry(item);
                    });
                }
            }
        }
        return TopicPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SubtopicPaging = (function () {
        function SubtopicPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TopicPagingList(input.list) : undefined;
            }
        }
        return SubtopicPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicPaging = (function () {
        function TopicPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TopicPagingList(input.list) : undefined;
            }
        }
        return TopicPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$2 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.gsClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesApi = (function (_super) {
        __extends(ClassificationGuidesApi, _super);
        function ClassificationGuidesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassificationGuidesApi.prototype.combinedInstructions = function (opts) {
            opts = opts || {};
            var postBody = opts['instructions'];
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/combined-instructions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, InstructionEntry);
        };
        ClassificationGuidesApi.prototype.createClassificationGuide = function (classificationGuide) {
            var postBody = classificationGuide;
            if (classificationGuide === undefined || classificationGuide === null) {
                throw new Error("Required param 'classificationGuide' in createClassificationGuide");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
        };
        ClassificationGuidesApi.prototype.createSubtopic = function (topicId, topic, opts) {
            opts = opts || {};
            var postBody = topic;
            if (topicId === undefined || topicId === null) {
                throw new Error("Required param 'topicId' in createSubtopic");
            }
            if (topic === undefined || topic === null) {
                throw new Error("Required param 'topic' in createSubtopic");
            }
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}/subtopics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        ClassificationGuidesApi.prototype.createTopic = function (classificationGuideId, topic, opts) {
            opts = opts || {};
            var postBody = topic;
            if (classificationGuideId === undefined || classificationGuideId === null) {
                throw new Error("Required param 'classificationGuideId' in createTopic");
            }
            if (topic === undefined || topic === null) {
                throw new Error("Required param 'topic' in createTopic");
            }
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        ClassificationGuidesApi.prototype.deleteClassificationGuide = function (classificationGuideId) {
            var postBody = null;
            if (classificationGuideId === undefined || classificationGuideId === null) {
                throw new Error("Required param 'classificationGuideId' in deleteClassificationGuide");
            }
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ClassificationGuidesApi.prototype.deleteTopic = function (topicId) {
            var postBody = null;
            if (topicId === undefined || topicId === null) {
                throw new Error("Required param 'topicId' in deleteTopic");
            }
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ClassificationGuidesApi.prototype.listClassificationGuides = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuidePaging);
        };
        ClassificationGuidesApi.prototype.listSubtopics = function (topicId, opts) {
            opts = opts || {};
            var postBody = null;
            if (topicId === undefined || topicId === null) {
                throw new Error("Required param 'topicId' in listSubtopics");
            }
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'includeSource': opts['includeSource']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}/subtopics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubtopicPaging);
        };
        ClassificationGuidesApi.prototype.listTopics = function (classificationGuideId, opts) {
            opts = opts || {};
            var postBody = null;
            if (classificationGuideId === undefined || classificationGuideId === null) {
                throw new Error("Required param 'classificationGuideId' in listTopics");
            }
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'orderBy': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
                'where': opts['where'],
                'includeSource': opts['includeSource']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}/topics', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicPaging);
        };
        ClassificationGuidesApi.prototype.showClassificationGuideById = function (classificationGuideId) {
            var postBody = null;
            if (classificationGuideId === undefined || classificationGuideId === null) {
                throw new Error("Required param 'classificationGuideId' in showClassificationGuideById");
            }
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
        };
        ClassificationGuidesApi.prototype.showTopicById = function (topicId, opts) {
            opts = opts || {};
            var postBody = null;
            if (topicId === undefined || topicId === null) {
                throw new Error("Required param 'topicId' in showTopicById");
            }
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        ClassificationGuidesApi.prototype.updateClassificationGuide = function (classificationGuideId, classificationGuide) {
            var postBody = classificationGuide;
            if (classificationGuideId === undefined || classificationGuideId === null) {
                throw new Error("Required param 'classificationGuideId' in updateClassificationGuide");
            }
            if (classificationGuide === undefined || classificationGuide === null) {
                throw new Error("Required param 'classificationGuide' in updateClassificationGuide");
            }
            var pathParams = {
                'classificationGuideId': classificationGuideId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-guides/{classificationGuideId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationGuideEntry);
        };
        ClassificationGuidesApi.prototype.updateTopic = function (topicId, topic, opts) {
            opts = opts || {};
            var postBody = topic;
            if (topicId === undefined || topicId === null) {
                throw new Error("Required param 'topicId' in updateTopic");
            }
            if (topic === undefined || topic === null) {
                throw new Error("Required param 'topic' in updateTopic");
            }
            var pathParams = {
                'topicId': topicId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/topics/{topicId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TopicEntry);
        };
        return ClassificationGuidesApi;
    }(BaseApi$2));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReason = (function () {
        function ClassificationReason(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationReason;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonEntry = (function () {
        function ClassificationReasonEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ClassificationReason(input.entry) : undefined;
            }
        }
        return ClassificationReasonEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonsPagingList = (function () {
        function ClassificationReasonsPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ClassificationReasonEntry(item);
                    });
                }
            }
        }
        return ClassificationReasonsPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonsPaging = (function () {
        function ClassificationReasonsPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ClassificationReasonsPagingList(input.list) : undefined;
            }
        }
        return ClassificationReasonsPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonsApi = (function (_super) {
        __extends(ClassificationReasonsApi, _super);
        function ClassificationReasonsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassificationReasonsApi.prototype.createClassificationReason = function (classificationReason) {
            var postBody = classificationReason;
            if (classificationReason === undefined || classificationReason === null) {
                throw new Error("Required param 'classificationReason' in createClassificationReason");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonEntry);
        };
        ClassificationReasonsApi.prototype.deleteClassificationReason = function (classificationReasonId) {
            var postBody = null;
            if (classificationReasonId === undefined || classificationReasonId === null) {
                throw new Error("Required param 'classificationReasonId' in deleteClassificationReason");
            }
            var pathParams = {
                'classificationReasonId': classificationReasonId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons/{classificationReasonId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ClassificationReasonsApi.prototype.listClassificationReasons = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonsPaging);
        };
        ClassificationReasonsApi.prototype.showClassificationReasonById = function (classificationReasonId) {
            var postBody = null;
            if (classificationReasonId === undefined || classificationReasonId === null) {
                throw new Error("Required param 'classificationReasonId' in showClassificationReasonById");
            }
            var pathParams = {
                'classificationReasonId': classificationReasonId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons/{classificationReasonId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonEntry);
        };
        ClassificationReasonsApi.prototype.updateClassificationReason = function (classificationReasonId, classificationReason) {
            var postBody = classificationReason;
            if (classificationReasonId === undefined || classificationReasonId === null) {
                throw new Error("Required param 'classificationReasonId' in updateClassificationReason");
            }
            if (classificationReason === undefined || classificationReason === null) {
                throw new Error("Required param 'classificationReason' in updateClassificationReason");
            }
            var pathParams = {
                'classificationReasonId': classificationReasonId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/classification-reasons/{classificationReasonId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ClassificationReasonEntry);
        };
        return ClassificationReasonsApi;
    }(BaseApi$2));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemption = (function () {
        function DeclassificationExemption(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DeclassificationExemption;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionEntry = (function () {
        function DeclassificationExemptionEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new DeclassificationExemption(input.entry) : undefined;
            }
        }
        return DeclassificationExemptionEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionsPagingList = (function () {
        function DeclassificationExemptionsPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new DeclassificationExemptionEntry(item);
                    });
                }
            }
        }
        return DeclassificationExemptionsPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionsPaging = (function () {
        function DeclassificationExemptionsPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new DeclassificationExemptionsPagingList(input.list) : undefined;
            }
        }
        return DeclassificationExemptionsPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionsApi = (function (_super) {
        __extends(DeclassificationExemptionsApi, _super);
        function DeclassificationExemptionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DeclassificationExemptionsApi.prototype.createDeclassificationExemption = function (declassificationExemption) {
            var postBody = declassificationExemption;
            if (declassificationExemption === undefined || declassificationExemption === null) {
                throw new Error("Required param 'declassificationExemption' in createDeclassificationExemption");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
        };
        DeclassificationExemptionsApi.prototype.deleteDeclassificationExemption = function (declassificationExemptionId) {
            var postBody = null;
            if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
                throw new Error("Required param 'declassificationExemptionId' in deleteDeclassificationExemption");
            }
            var pathParams = {
                'declassificationExemptionId': declassificationExemptionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        DeclassificationExemptionsApi.prototype.listDeclassificationExemptions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionsPaging);
        };
        DeclassificationExemptionsApi.prototype.showDeclassificationExemptionById = function (declassificationExemptionId) {
            var postBody = null;
            if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
                throw new Error("Required param 'declassificationExemptionId' in showDeclassificationExemptionById");
            }
            var pathParams = {
                'declassificationExemptionId': declassificationExemptionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
        };
        DeclassificationExemptionsApi.prototype.updateDeclassificationExemption = function (declassificationExemptionId, declassificationExemption) {
            var postBody = declassificationExemption;
            if (declassificationExemptionId === undefined || declassificationExemptionId === null) {
                throw new Error("Required param 'declassificationExemptionId' in updateDeclassificationExemption");
            }
            if (declassificationExemption === undefined || declassificationExemption === null) {
                throw new Error("Required param 'declassificationExemption' in updateDeclassificationExemption");
            }
            var pathParams = {
                'declassificationExemptionId': declassificationExemptionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/declassification-exemptions/{declassificationExemptionId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DeclassificationExemptionEntry);
        };
        return DeclassificationExemptionsApi;
    }(BaseApi$2));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DefaultClassificationValuesApi = (function (_super) {
        __extends(DefaultClassificationValuesApi, _super);
        function DefaultClassificationValuesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DefaultClassificationValuesApi.prototype.calculateDefaultDeclassificationDate = function (nodeId) {
            var postBody = null;
            if (nodeId === undefined || nodeId === null) {
                throw new Error("Required param 'nodeId' in calculateDefaultDeclassificationDate");
            }
            var pathParams = {
                'nodeId': nodeId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/default-classification-values/{nodeId}/calculate-declassification-date', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DateAlfresco);
        };
        return DefaultClassificationValuesApi;
    }(BaseApi$2));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSetting = (function () {
        function SecurityControlSetting(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityControlSetting;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSettingEntry = (function () {
        function SecurityControlSettingEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new SecurityControlSetting(input.entry) : undefined;
            }
        }
        return SecurityControlSettingEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSettingsApi = (function (_super) {
        __extends(SecurityControlSettingsApi, _super);
        function SecurityControlSettingsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SecurityControlSettingsApi.prototype.getSecurityControlSetting = function (securityControlSettingKey) {
            var postBody = null;
            if (securityControlSettingKey === undefined || securityControlSettingKey === null) {
                throw new Error("Required param 'securityControlSettingKey' in getSecurityControlSetting");
            }
            var pathParams = {
                'securityControlSettingKey': securityControlSettingKey
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/security-control-settings/{securityControlSettingKey}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SecurityControlSettingEntry);
        };
        SecurityControlSettingsApi.prototype.updateSecurityControlSetting = function (securityControlSettingKey, securityControlSettingValue) {
            var postBody = securityControlSettingValue;
            if (securityControlSettingKey === undefined || securityControlSettingKey === null) {
                throw new Error("Required param 'securityControlSettingKey' in updateSecurityControlSetting");
            }
            if (securityControlSettingValue === undefined || securityControlSettingValue === null) {
                throw new Error("Required param 'securityControlSettingValue' in updateSecurityControlSetting");
            }
            var pathParams = {
                'securityControlSettingKey': securityControlSettingKey
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/security-control-settings/{securityControlSettingKey}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SecurityControlSettingEntry);
        };
        return SecurityControlSettingsApi;
    }(BaseApi$2));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GS_CLASSIFICATION_APIS = {
        ClassificationGuidesApi: ClassificationGuidesApi,
        ClassificationReasonsApi: ClassificationReasonsApi,
        DeclassificationExemptionsApi: DeclassificationExemptionsApi,
        DefaultClassificationValuesApi: DefaultClassificationValuesApi,
        SecurityControlSettingsApi: SecurityControlSettingsApi
    };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuideBody = (function () {
        function ClassificationGuideBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuideBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesBody = (function () {
        function ClassificationGuidesBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuidesBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationReasonBody = (function () {
        function ClassificationReasonBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationReasonBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DeclassificationExemptionBody = (function () {
        function DeclassificationExemptionBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DeclassificationExemptionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarksBody = (function (_super) {
        __extends(SecurityMarksBody, _super);
        function SecurityMarksBody(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return SecurityMarksBody;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarkInformationBody = (function () {
        function SecurityMarkInformationBody(input) {
            if (input) {
                Object.assign(this, input);
                this.add = input.add ? new SecurityMarksBody(input.add) : undefined;
            }
        }
        return SecurityMarkInformationBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var InstructionBody = (function () {
        function InstructionBody(input) {
            if (input) {
                Object.assign(this, input);
                this.classificationInformation = input.classificationInformation ? new ClassificationInformation(input.classificationInformation) : undefined;
                this.securityMarkInformation = input.securityMarkInformation ? new SecurityMarkInformationBody(input.securityMarkInformation) : undefined;
            }
        }
        return InstructionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityControlSettingBody = (function () {
        function SecurityControlSettingBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityControlSettingBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMark = (function () {
        function SecurityMark(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityMark;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SecurityMarkBody = (function () {
        function SecurityMarkBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SecurityMarkBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TopicBody = (function () {
        function TopicBody(input) {
            if (input) {
                Object.assign(this, input);
                this.instruction = input.instruction ? new InstructionBody(input.instruction) : undefined;
            }
        }
        return TopicBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassificationGuidesInTopic = (function () {
        function ClassificationGuidesInTopic(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ClassificationGuidesInTopic;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CombinedInstructionBody = (function () {
        function CombinedInstructionBody(input) {
            if (input) {
                Object.assign(this, input);
                this.classificationInformation = input.classificationInformation ? new ClassificationInformation(input.classificationInformation) : undefined;
                this.securityMarkInformation = input.securityMarkInformation ? new SecurityMarkInformationBody(input.securityMarkInformation) : undefined;
            }
        }
        return CombinedInstructionBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlan = (function () {
        function FilePlan(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return FilePlan;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlanEntry = (function () {
        function FilePlanEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new FilePlan(input.entry) : undefined;
            }
        }
        return FilePlanEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategory = (function () {
        function RecordCategory(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return RecordCategory;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryEntry = (function () {
        function RecordCategoryEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordCategory(input.entry) : undefined;
            }
        }
        return RecordCategoryEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryPagingList = (function () {
        function RecordCategoryPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RecordCategoryEntry(item);
                    });
                }
                this.source = input.source ? new FilePlan(input.source) : undefined;
            }
        }
        return RecordCategoryPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryPaging = (function () {
        function RecordCategoryPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RecordCategoryPagingList(input.list) : undefined;
            }
        }
        return RecordCategoryPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$3 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.gsClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlansApi = (function (_super) {
        __extends(FilePlansApi, _super);
        function FilePlansApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilePlansApi.prototype.createFilePlanCategories = function (filePlanId, nodeBodyCreate, opts) {
            opts = opts || {};
            var postBody = nodeBodyCreate;
            if (filePlanId === undefined || filePlanId === null) {
                throw new Error("Required param 'filePlanId' in createFilePlanCategories");
            }
            if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
                throw new Error("Required param 'nodeBodyCreate' in createFilePlanCategories");
            }
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
        };
        FilePlansApi.prototype.getFilePlan = function (filePlanId, opts) {
            opts = opts || {};
            var postBody = null;
            if (filePlanId === undefined || filePlanId === null) {
                throw new Error("Required param 'filePlanId' in getFilePlan");
            }
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FilePlanEntry);
        };
        FilePlansApi.prototype.getFilePlanCategories = function (filePlanId, opts) {
            opts = opts || {};
            var postBody = null;
            if (filePlanId === undefined || filePlanId === null) {
                throw new Error("Required param 'filePlanId' in getFilePlanCategories");
            }
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}/categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryPaging);
        };
        FilePlansApi.prototype.updateFilePlan = function (filePlanId, filePlanBodyUpdate, opts) {
            opts = opts || {};
            var postBody = filePlanBodyUpdate;
            if (filePlanId === undefined || filePlanId === null) {
                throw new Error("Required param 'filePlanId' in updateFilePlan");
            }
            if (filePlanBodyUpdate === undefined || filePlanBodyUpdate === null) {
                throw new Error("Required param 'filePlanBodyUpdate' in updateFilePlan");
            }
            var pathParams = {
                'filePlanId': filePlanId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/file-plans/{filePlanId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FilePlanEntry);
        };
        return FilePlansApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Record = (function () {
        function Record(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return Record;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordEntry = (function () {
        function RecordEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Record(input.entry) : undefined;
            }
        }
        return RecordEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilesApi = (function (_super) {
        __extends(FilesApi, _super);
        function FilesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FilesApi.prototype.declareRecord = function (fileId, opts) {
            opts = opts || {};
            var postBody = null;
            if (fileId === undefined || fileId === null) {
                throw new Error("Required param 'fileId' in declareRecord");
            }
            var pathParams = {
                'fileId': fileId
            };
            var queryParams = {
                'hideRecord': opts['hideRecord'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/files/{fileId}/declare', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        return FilesApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RMSite = (function () {
        function RMSite(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMSite;
    }());
    (function (RMSite) {
        RMSite.VisibilityEnum = {
            PRIVATE: 'PRIVATE',
            MODERATED: 'MODERATED',
            PUBLIC: 'PUBLIC'
        };
        RMSite.ComplianceEnum = {
            STANDARD: 'STANDARD',
            DOD5015: 'DOD5015'
        };
        RMSite.RoleEnum = {
            SiteConsumer: 'SiteConsumer',
            SiteCollaborator: 'SiteCollaborator',
            SiteContributor: 'SiteContributor',
            SiteManager: 'SiteManager'
        };
    })(exports.RMSite || (exports.RMSite = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMSiteEntry = (function () {
        function RMSiteEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new exports.RMSite(input.entry) : undefined;
            }
        }
        return RMSiteEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GsSitesApi = (function (_super) {
        __extends(GsSitesApi, _super);
        function GsSitesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GsSitesApi.prototype.createRMSite = function (siteBodyCreate, opts) {
            opts = opts || {};
            var postBody = siteBodyCreate;
            if (siteBodyCreate === undefined || siteBodyCreate === null) {
                throw new Error("Required param 'siteBodyCreate' in createRMSite");
            }
            var pathParams = {};
            var queryParams = {
                'skipAddToFavorites': opts['skipAddToFavorites']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
        };
        GsSitesApi.prototype.deleteRMSite = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites/rm', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        GsSitesApi.prototype.getRMSite = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites/rm', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
        };
        GsSitesApi.prototype.updateRMSite = function (siteBodyUpdate, opts) {
            opts = opts || {};
            var postBody = siteBodyUpdate;
            if (siteBodyUpdate === undefined || siteBodyUpdate === null) {
                throw new Error("Required param 'siteBodyUpdate' in updateRMSite");
            }
            var pathParams = {};
            var queryParams = {
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/gs-sites/rm', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RMSiteEntry);
        };
        return GsSitesApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChild = (function () {
        function RecordCategoryChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return RecordCategoryChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChildEntry = (function () {
        function RecordCategoryChildEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordCategoryChild(input.entry) : undefined;
            }
        }
        return RecordCategoryChildEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChildPagingList = (function () {
        function RecordCategoryChildPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RecordCategoryChildEntry(item);
                    });
                }
                this.source = input.source ? new RecordCategory(input.source) : undefined;
            }
        }
        return RecordCategoryChildPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoryChildPaging = (function () {
        function RecordCategoryChildPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RecordCategoryChildPagingList(input.list) : undefined;
            }
        }
        return RecordCategoryChildPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordCategoriesApi = (function (_super) {
        __extends(RecordCategoriesApi, _super);
        function RecordCategoriesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordCategoriesApi.prototype.createRecordCategoryChild = function (recordCategoryId, nodeBodyCreate, opts) {
            opts = opts || {};
            var postBody = nodeBodyCreate;
            if (recordCategoryId === undefined || recordCategoryId === null) {
                throw new Error("Required param 'recordCategoryId' in createRecordCategoryChild");
            }
            if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
                throw new Error("Required param 'nodeBodyCreate' in createRecordCategoryChild");
            }
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryChildEntry);
        };
        RecordCategoriesApi.prototype.deleteRecordCategory = function (recordCategoryId) {
            var postBody = null;
            if (recordCategoryId === undefined || recordCategoryId === null) {
                throw new Error("Required param 'recordCategoryId' in deleteRecordCategory");
            }
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordCategoriesApi.prototype.getRecordCategory = function (recordCategoryId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordCategoryId === undefined || recordCategoryId === null) {
                throw new Error("Required param 'recordCategoryId' in getRecordCategory");
            }
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
        };
        RecordCategoriesApi.prototype.listRecordCategoryChildren = function (recordCategoryId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordCategoryId === undefined || recordCategoryId === null) {
                throw new Error("Required param 'recordCategoryId' in listRecordCategoryChildren");
            }
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryChildPaging);
        };
        RecordCategoriesApi.prototype.updateRecordCategory = function (recordCategoryId, recordCategoryBodyUpdate, opts) {
            opts = opts || {};
            var postBody = recordCategoryBodyUpdate;
            if (recordCategoryId === undefined || recordCategoryId === null) {
                throw new Error("Required param 'recordCategoryId' in updateRecordCategory");
            }
            if (recordCategoryBodyUpdate === undefined || recordCategoryBodyUpdate === null) {
                throw new Error("Required param 'recordCategoryBodyUpdate' in updateRecordCategory");
            }
            var pathParams = {
                'recordCategoryId': recordCategoryId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-categories/{recordCategoryId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordCategoryEntry);
        };
        return RecordCategoriesApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolder = (function () {
        function RecordFolder(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return RecordFolder;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderChildAssociation = (function () {
        function RecordFolderChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return RecordFolderChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderChildAssociationEntry = (function () {
        function RecordFolderChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordFolderChildAssociation(input.entry) : undefined;
            }
        }
        return RecordFolderChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderAssociationPagingList = (function () {
        function RecordFolderAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new RecordFolderChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new RecordFolder(input.source) : undefined;
            }
        }
        return RecordFolderAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderAssociationPaging = (function () {
        function RecordFolderAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new RecordFolderAssociationPagingList(input.list) : undefined;
            }
        }
        return RecordFolderAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFolderEntry = (function () {
        function RecordFolderEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new RecordFolder(input.entry) : undefined;
            }
        }
        return RecordFolderEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordFoldersApi = (function (_super) {
        __extends(RecordFoldersApi, _super);
        function RecordFoldersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordFoldersApi.prototype.createRecordFolderChild = function (recordFolderId, recordBodyCreate, opts) {
            opts = opts || {};
            var postBody = recordBodyCreate;
            if (recordFolderId === undefined || recordFolderId === null) {
                throw new Error("Required param 'recordFolderId' in createRecordFolderChild");
            }
            if (recordBodyCreate === undefined || recordBodyCreate === null) {
                throw new Error("Required param 'recordBodyCreate' in createRecordFolderChild");
            }
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordFoldersApi.prototype.deleteRecordFolder = function (recordFolderId) {
            var postBody = null;
            if (recordFolderId === undefined || recordFolderId === null) {
                throw new Error("Required param 'recordFolderId' in deleteRecordFolder");
            }
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordFoldersApi.prototype.getRecordFolder = function (recordFolderId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordFolderId === undefined || recordFolderId === null) {
                throw new Error("Required param 'recordFolderId' in getRecordFolder");
            }
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderEntry);
        };
        RecordFoldersApi.prototype.listRecordFolderChildren = function (recordFolderId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordFolderId === undefined || recordFolderId === null) {
                throw new Error("Required param 'recordFolderId' in listRecordFolderChildren");
            }
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}/records', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderAssociationPaging);
        };
        RecordFoldersApi.prototype.updateRecordFolder = function (recordFolderId, recordFolderBodyUpdate, opts) {
            opts = opts || {};
            var postBody = recordFolderBodyUpdate;
            if (recordFolderId === undefined || recordFolderId === null) {
                throw new Error("Required param 'recordFolderId' in updateRecordFolder");
            }
            if (recordFolderBodyUpdate === undefined || recordFolderBodyUpdate === null) {
                throw new Error("Required param 'recordFolderBodyUpdate' in updateRecordFolder");
            }
            var pathParams = {
                'recordFolderId': recordFolderId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/record-folders/{recordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordFolderEntry);
        };
        return RecordFoldersApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RecordsApi = (function (_super) {
        __extends(RecordsApi, _super);
        function RecordsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordsApi.prototype.completeRecord = function (recordId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordId === undefined || recordId === null) {
                throw new Error("Required param 'recordId' in completeRecord");
            }
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}/complete', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        RecordsApi.prototype.deleteRecord = function (recordId) {
            var postBody = null;
            if (recordId === undefined || recordId === null) {
                throw new Error("Required param 'recordId' in deleteRecord");
            }
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordsApi.prototype.fileRecord = function (recordId, nodeBodyFile, opts) {
            opts = opts || {};
            var postBody = nodeBodyFile;
            if (recordId === undefined || recordId === null) {
                throw new Error("Required param 'recordId' in fileRecord");
            }
            if (nodeBodyFile === undefined || nodeBodyFile === null) {
                throw new Error("Required param 'nodeBodyFile' in fileRecord");
            }
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}/file', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        RecordsApi.prototype.getRecord = function (recordId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordId === undefined || recordId === null) {
                throw new Error("Required param 'recordId' in getRecord");
            }
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        RecordsApi.prototype.getRecordContent = function (recordId, opts) {
            opts = opts || {};
            var postBody = null;
            if (recordId === undefined || recordId === null) {
                throw new Error("Required param 'recordId' in getRecordContent");
            }
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'attachment': opts['attachment']
            };
            var headerParams = {
                'If-Modified-Since': opts['ifModifiedSince']
            };
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RecordsApi.prototype.updateRecord = function (recordId, recordBodyUpdate, opts) {
            opts = opts || {};
            var postBody = recordBodyUpdate;
            if (recordId === undefined || recordId === null) {
                throw new Error("Required param 'recordId' in updateRecord");
            }
            if (recordBodyUpdate === undefined || recordBodyUpdate === null) {
                throw new Error("Required param 'recordBodyUpdate' in updateRecord");
            }
            var pathParams = {
                'recordId': recordId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/records/{recordId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RecordEntry);
        };
        return RecordsApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainer = (function () {
        function TransferContainer(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
            }
        }
        return TransferContainer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerChildAssociation = (function () {
        function TransferContainerChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return TransferContainerChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerChildAssociationEntry = (function () {
        function TransferContainerChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new TransferContainerChildAssociation(input.entry) : undefined;
            }
        }
        return TransferContainerChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerAssociationPagingList = (function () {
        function TransferContainerAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TransferContainerChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new TransferContainer(input.source) : undefined;
            }
        }
        return TransferContainerAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerAssociationPaging = (function () {
        function TransferContainerAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TransferContainerAssociationPagingList(input.list) : undefined;
            }
        }
        return TransferContainerAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerEntry = (function () {
        function TransferContainerEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new TransferContainer(input.entry) : undefined;
            }
        }
        return TransferContainerEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainersApi = (function (_super) {
        __extends(TransferContainersApi, _super);
        function TransferContainersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransferContainersApi.prototype.getTransferContainer = function (transferContainerId, opts) {
            opts = opts || {};
            var postBody = null;
            if (transferContainerId === undefined || transferContainerId === null) {
                throw new Error("Required param 'transferContainerId' in getTransferContainer");
            }
            var pathParams = {
                'transferContainerId': transferContainerId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfer-containers/{transferContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerEntry);
        };
        TransferContainersApi.prototype.listTransfers = function (transferContainerId, opts) {
            opts = opts || {};
            var postBody = null;
            if (transferContainerId === undefined || transferContainerId === null) {
                throw new Error("Required param 'transferContainerId' in listTransfers");
            }
            var pathParams = {
                'transferContainerId': transferContainerId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfer-containers/{transferContainerId}/transfers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerAssociationPaging);
        };
        TransferContainersApi.prototype.updateTransferContainer = function (transferContainerId, nodeBodyUpdate, opts) {
            opts = opts || {};
            var postBody = nodeBodyUpdate;
            if (transferContainerId === undefined || transferContainerId === null) {
                throw new Error("Required param 'transferContainerId' in updateTransferContainer");
            }
            if (nodeBodyUpdate === undefined || nodeBodyUpdate === null) {
                throw new Error("Required param 'nodeBodyUpdate' in updateTransferContainer");
            }
            var pathParams = {
                'transferContainerId': transferContainerId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfer-containers/{transferContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferContainerEntry);
        };
        return TransferContainersApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Transfer = (function () {
        function Transfer(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
            }
        }
        return Transfer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferChildAssociation = (function () {
        function TransferChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return TransferChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferChildAssociationEntry = (function () {
        function TransferChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new TransferChildAssociation(input.entry) : undefined;
            }
        }
        return TransferChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferAssociationPagingList = (function () {
        function TransferAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new TransferChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new Transfer(input.source) : undefined;
            }
        }
        return TransferAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferAssociationPaging = (function () {
        function TransferAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new TransferAssociationPagingList(input.list) : undefined;
            }
        }
        return TransferAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferEntry = (function () {
        function TransferEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Transfer(input.entry) : undefined;
            }
        }
        return TransferEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransfersApi = (function (_super) {
        __extends(TransfersApi, _super);
        function TransfersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TransfersApi.prototype.getTransfer = function (transferId, opts) {
            opts = opts || {};
            var postBody = null;
            if (transferId === undefined || transferId === null) {
                throw new Error("Required param 'transferId' in getTransfer");
            }
            var pathParams = {
                'transferId': transferId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfers/{transferId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferEntry);
        };
        TransfersApi.prototype.listTransfersChildren = function (transferId, opts) {
            opts = opts || {};
            var postBody = null;
            if (transferId === undefined || transferId === null) {
                throw new Error("Required param 'transferId' in listTransfersChildren");
            }
            var pathParams = {
                'transferId': transferId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/transfers/{transferId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TransferAssociationPaging);
        };
        return TransfersApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainer = (function () {
        function UnfiledContainer(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledContainer;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerChildAssociation = (function () {
        function UnfiledContainerChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return UnfiledContainerChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerChildAssociationEntry = (function () {
        function UnfiledContainerChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledContainerChildAssociation(input.entry) : undefined;
            }
        }
        return UnfiledContainerChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerAssociationPagingList = (function () {
        function UnfiledContainerAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new UnfiledContainerChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new UnfiledContainer(input.source) : undefined;
            }
        }
        return UnfiledContainerAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerAssociationPaging = (function () {
        function UnfiledContainerAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new UnfiledContainerAssociationPagingList(input.list) : undefined;
            }
        }
        return UnfiledContainerAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerEntry = (function () {
        function UnfiledContainerEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledContainer(input.entry) : undefined;
            }
        }
        return UnfiledContainerEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainersApi = (function (_super) {
        __extends(UnfiledContainersApi, _super);
        function UnfiledContainersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnfiledContainersApi.prototype.createUnfiledContainerChildren = function (unfiledContainerId, nodeBodyCreate, opts) {
            opts = opts || {};
            var postBody = nodeBodyCreate;
            if (unfiledContainerId === undefined || unfiledContainerId === null) {
                throw new Error("Required param 'unfiledContainerId' in createUnfiledContainerChildren");
            }
            if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
                throw new Error("Required param 'nodeBodyCreate' in createUnfiledContainerChildren");
            }
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerAssociationPaging);
        };
        UnfiledContainersApi.prototype.getUnfiledContainer = function (unfiledContainerId, opts) {
            opts = opts || {};
            var postBody = null;
            if (unfiledContainerId === undefined || unfiledContainerId === null) {
                throw new Error("Required param 'unfiledContainerId' in getUnfiledContainer");
            }
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerEntry);
        };
        UnfiledContainersApi.prototype.listUnfiledContainerChildren = function (unfiledContainerId, opts) {
            opts = opts || {};
            var postBody = null;
            if (unfiledContainerId === undefined || unfiledContainerId === null) {
                throw new Error("Required param 'unfiledContainerId' in listUnfiledContainerChildren");
            }
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerAssociationPaging);
        };
        UnfiledContainersApi.prototype.updateUnfiledContainer = function (unfiledContainerId, unfiledContainerBodyUpdate, opts) {
            opts = opts || {};
            var postBody = unfiledContainerBodyUpdate;
            if (unfiledContainerId === undefined || unfiledContainerId === null) {
                throw new Error("Required param 'unfiledContainerId' in updateUnfiledContainer");
            }
            if (unfiledContainerBodyUpdate === undefined || unfiledContainerBodyUpdate === null) {
                throw new Error("Required param 'unfiledContainerBodyUpdate' in updateUnfiledContainer");
            }
            var pathParams = {
                'unfiledContainerId': unfiledContainerId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-containers/{unfiledContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledContainerEntry);
        };
        return UnfiledContainersApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolder = (function () {
        function UnfiledRecordFolder(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledRecordFolder;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderChildAssociation = (function () {
        function UnfiledRecordFolderChildAssociation(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.association = input.association ? new ChildAssociationInfo(input.association) : undefined;
            }
        }
        return UnfiledRecordFolderChildAssociation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderChildAssociationEntry = (function () {
        function UnfiledRecordFolderChildAssociationEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledRecordFolderChildAssociation(input.entry) : undefined;
            }
        }
        return UnfiledRecordFolderChildAssociationEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderAssociationPagingList = (function () {
        function UnfiledRecordFolderAssociationPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new UnfiledRecordFolderChildAssociationEntry(item);
                    });
                }
                this.source = input.source ? new UnfiledRecordFolder(input.source) : undefined;
            }
        }
        return UnfiledRecordFolderAssociationPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderAssociationPaging = (function () {
        function UnfiledRecordFolderAssociationPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new UnfiledRecordFolderAssociationPagingList(input.list) : undefined;
            }
        }
        return UnfiledRecordFolderAssociationPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderEntry = (function () {
        function UnfiledRecordFolderEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new UnfiledRecordFolder(input.entry) : undefined;
            }
        }
        return UnfiledRecordFolderEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFoldersApi = (function (_super) {
        __extends(UnfiledRecordFoldersApi, _super);
        function UnfiledRecordFoldersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UnfiledRecordFoldersApi.prototype.createUnfiledRecordFolderChildren = function (unfiledRecordFolderId, nodeBodyCreate, opts) {
            opts = opts || {};
            var postBody = nodeBodyCreate;
            if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
                throw new Error("Required param 'unfiledRecordFolderId' in createUnfiledRecordFolderChildren");
            }
            if (nodeBodyCreate === undefined || nodeBodyCreate === null) {
                throw new Error("Required param 'nodeBodyCreate' in createUnfiledRecordFolderChildren");
            }
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'autoRename': opts['autoRename'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json', 'multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderAssociationPaging);
        };
        UnfiledRecordFoldersApi.prototype.deleteUnfiledRecordFolder = function (unfiledRecordFolderId) {
            var postBody = null;
            if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
                throw new Error("Required param 'unfiledRecordFolderId' in deleteUnfiledRecordFolder");
            }
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UnfiledRecordFoldersApi.prototype.getUnfiledRecordFolder = function (unfiledRecordFolderId, opts) {
            opts = opts || {};
            var postBody = null;
            if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
                throw new Error("Required param 'unfiledRecordFolderId' in getUnfiledRecordFolder");
            }
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderEntry);
        };
        UnfiledRecordFoldersApi.prototype.listUnfiledRecordFolderChildren = function (unfiledRecordFolderId, opts) {
            opts = opts || {};
            var postBody = null;
            if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
                throw new Error("Required param 'unfiledRecordFolderId' in listUnfiledRecordFolderChildren");
            }
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'skipCount': opts['skipCount'],
                'maxItems': opts['maxItems'],
                'where': opts['where'],
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'relativePath': opts['relativePath'],
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}/children', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderAssociationPaging);
        };
        UnfiledRecordFoldersApi.prototype.updateUnfiledRecordFolder = function (unfiledRecordFolderId, unfiledRecordFolderBodyUpdate, opts) {
            opts = opts || {};
            var postBody = unfiledRecordFolderBodyUpdate;
            if (unfiledRecordFolderId === undefined || unfiledRecordFolderId === null) {
                throw new Error("Required param 'unfiledRecordFolderId' in updateUnfiledRecordFolder");
            }
            if (unfiledRecordFolderBodyUpdate === undefined || unfiledRecordFolderBodyUpdate === null) {
                throw new Error("Required param 'unfiledRecordFolderBodyUpdate' in updateUnfiledRecordFolder");
            }
            var pathParams = {
                'unfiledRecordFolderId': unfiledRecordFolderId
            };
            var queryParams = {
                'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),
                'includeSource': opts['includeSource'],
                'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/unfiled-record-folders/{unfiledRecordFolderId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UnfiledRecordFolderEntry);
        };
        return UnfiledRecordFoldersApi;
    }(BaseApi$3));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GS_CORE_APIS = {
        FilePlansApi: FilePlansApi,
        FilesApi: FilesApi,
        GsSitesApi: GsSitesApi,
        RecordCategoriesApi: RecordCategoriesApi,
        RecordFoldersApi: RecordFoldersApi,
        RecordsApi: RecordsApi,
        TransferContainersApi: TransferContainersApi,
        TransfersApi: TransfersApi,
        UnfiledContainersApi: UnfiledContainersApi,
        UnfiledRecordFoldersApi: UnfiledRecordFoldersApi
    };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlanBodyUpdate = (function () {
        function FilePlanBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FilePlanBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FilePlanComponentBodyUpdate = (function () {
        function FilePlanComponentBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FilePlanComponentBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMNodeBodyCreate = (function () {
        function RMNodeBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMNodeBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMNodeBodyCreateWithRelativePath = (function () {
        function RMNodeBodyCreateWithRelativePath(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMNodeBodyCreateWithRelativePath;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RMSiteBodyCreate = (function () {
        function RMSiteBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMSiteBodyCreate;
    }());
    (function (RMSiteBodyCreate) {
        RMSiteBodyCreate.ComplianceEnum = {
            STANDARD: 'STANDARD',
            DOD5015: 'DOD5015'
        };
    })(exports.RMSiteBodyCreate || (exports.RMSiteBodyCreate = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RMSiteBodyUpdate = (function () {
        function RMSiteBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RMSiteBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestBodyFile = (function () {
        function RequestBodyFile(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestBodyFile;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RootCategoryBodyCreate = (function () {
        function RootCategoryBodyCreate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RootCategoryBodyCreate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferChild = (function () {
        function TransferChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return TransferChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerBodyUpdate = (function () {
        function TransferContainerBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return TransferContainerBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TransferContainerChild = (function () {
        function TransferContainerChild(input) {
            if (input) {
                Object.assign(this, input);
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
            }
        }
        return TransferContainerChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledContainerChild = (function () {
        function UnfiledContainerChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledContainerChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordContainerBodyUpdate = (function () {
        function UnfiledRecordContainerBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UnfiledRecordContainerBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderBodyUpdate = (function () {
        function UnfiledRecordFolderBodyUpdate(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UnfiledRecordFolderBodyUpdate;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UnfiledRecordFolderChild = (function () {
        function UnfiledRecordFolderChild(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
            }
        }
        return UnfiledRecordFolderChild;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Ticket = (function () {
        function Ticket(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return Ticket;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TicketEntry = (function () {
        function TicketEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new Ticket(input.entry) : undefined;
            }
        }
        return TicketEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ValidTicket = (function () {
        function ValidTicket(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ValidTicket;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ValidTicketEntry = (function () {
        function ValidTicketEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ValidTicket(input.entry) : undefined;
            }
        }
        return ValidTicketEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$4 = (function () {
        function BaseApi(alfrescoApi) {
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.authClient;
            }
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuthenticationApi = (function (_super) {
        __extends(AuthenticationApi, _super);
        function AuthenticationApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AuthenticationApi.prototype.createTicket = function (ticketBodyCreate) {
            var postBody = ticketBodyCreate;
            if (ticketBodyCreate === undefined || ticketBodyCreate === null) {
                throw new Error("Required param 'ticketBodyCreate' in createTicket");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TicketEntry);
        };
        AuthenticationApi.prototype.getTicket = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets/-me-', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TicketEntry);
        };
        AuthenticationApi.prototype.deleteTicket = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets/-me-', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AuthenticationApi.prototype.validateTicket = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/tickets/-me-', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidTicketEntry);
        };
        return AuthenticationApi;
    }(BaseApi$4));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AUTH_APIS = { AuthenticationApi: AuthenticationApi };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TicketBody = (function () {
        function TicketBody(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return TicketBody;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$5 = (function () {
        function BaseApi(alfrescoApi) {
            if (alfrescoApi) {
                this.apiClient = alfrescoApi.processClient;
            }
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AboutApi = (function (_super) {
        __extends(AboutApi, _super);
        function AboutApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AboutApi.prototype.getAppVersion = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-version', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return AboutApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AccountRepresentation = (function () {
        function AccountRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AccountRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAccountRepresentation = (function () {
        function ResultListDataRepresentationAccountRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AccountRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAccountRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AccountIntegrationApi = (function (_super) {
        __extends(AccountIntegrationApi, _super);
        function AccountIntegrationApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AccountIntegrationApi.prototype.getAccounts = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/account/integration', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAccountRepresentation);
        };
        return AccountIntegrationApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointBasicAuthRepresentation = (function () {
        function EndpointBasicAuthRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return EndpointBasicAuthRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointRequestHeaderRepresentation = (function () {
        function EndpointRequestHeaderRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return EndpointRequestHeaderRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointConfigurationRepresentation = (function () {
        function EndpointConfigurationRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.requestHeaders) {
                    this.requestHeaders = input.requestHeaders.map(function (item) {
                        return new EndpointRequestHeaderRepresentation(item);
                    });
                }
            }
        }
        return EndpointConfigurationRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminEndpointsApi = (function (_super) {
        __extends(AdminEndpointsApi, _super);
        function AdminEndpointsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminEndpointsApi.prototype.createBasicAuthConfiguration = function (createRepresentation) {
            var postBody = createRepresentation;
            if (createRepresentation === undefined || createRepresentation === null) {
                throw new Error("Required param 'createRepresentation' in createBasicAuthConfiguration");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.createEndpointConfiguration = function (representation) {
            var postBody = representation;
            if (representation === undefined || representation === null) {
                throw new Error("Required param 'representation' in createEndpointConfiguration");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        AdminEndpointsApi.prototype.getBasicAuthConfiguration = function (basicAuthId, tenantId) {
            var postBody = null;
            if (basicAuthId === undefined || basicAuthId === null) {
                throw new Error("Required param 'basicAuthId' in getBasicAuthConfiguration");
            }
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getBasicAuthConfiguration");
            }
            var pathParams = {
                'basicAuthId': basicAuthId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.getBasicAuthConfigurations = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getBasicAuthConfigurations");
            }
            var pathParams = {};
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.getEndpointConfiguration = function (endpointConfigurationId, tenantId) {
            var postBody = null;
            if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
                throw new Error("Required param 'endpointConfigurationId' in getEndpointConfiguration");
            }
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getEndpointConfiguration");
            }
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        AdminEndpointsApi.prototype.getEndpointConfigurations = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getEndpointConfigurations");
            }
            var pathParams = {};
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        AdminEndpointsApi.prototype.removeBasicAuthConfiguration = function (basicAuthId, tenantId) {
            var postBody = null;
            if (basicAuthId === undefined || basicAuthId === null) {
                throw new Error("Required param 'basicAuthId' in removeBasicAuthonfiguration");
            }
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in removeBasicAuthonfiguration");
            }
            var pathParams = {
                'basicAuthId': basicAuthId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminEndpointsApi.prototype.removeEndpointConfiguration = function (endpointConfigurationId, tenantId) {
            var postBody = null;
            if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
                throw new Error("Required param 'endpointConfigurationId' in removeEndpointConfiguration");
            }
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in removeEndpointConfiguration");
            }
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {
                'tenantId': tenantId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminEndpointsApi.prototype.updateBasicAuthConfiguration = function (basicAuthId, createRepresentation) {
            var postBody = createRepresentation;
            if (basicAuthId === undefined || basicAuthId === null) {
                throw new Error("Required param 'basicAuthId' in updateBasicAuthConfiguration");
            }
            if (createRepresentation === undefined || createRepresentation === null) {
                throw new Error("Required param 'createRepresentation' in updateBasicAuthConfiguration");
            }
            var pathParams = {
                'basicAuthId': basicAuthId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/basic-auths/{basicAuthId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointBasicAuthRepresentation);
        };
        AdminEndpointsApi.prototype.updateEndpointConfiguration = function (endpointConfigurationId, representation) {
            var postBody = representation;
            if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
                throw new Error("Required param 'endpointConfigurationId' in updateEndpointConfiguration");
            }
            if (representation === undefined || representation === null) {
                throw new Error("Required param 'representation' in updateEndpointConfiguration");
            }
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/endpoints/{endpointConfigurationId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        return AdminEndpointsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AbstractGroupRepresentation = (function () {
        function AbstractGroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AbstractGroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupCapabilityRepresentation = (function () {
        function GroupCapabilityRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GroupCapabilityRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightAppRepresentation = (function () {
        function LightAppRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LightAppRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserRepresentationGroup = (function () {
        function UserRepresentationGroup(input) {
            if (input) {
                Object.assign(this, input);
                if (input.apps) {
                    this.apps = input.apps.map(function (item) {
                        return new LightAppRepresentation(item);
                    });
                }
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdate = input.lastUpdate ? DateAlfresco.parseDate(input.lastUpdate) : undefined;
                this.latestSyncTimeStamp = input.latestSyncTimeStamp ? DateAlfresco.parseDate(input.latestSyncTimeStamp) : undefined;
            }
        }
        return UserRepresentationGroup;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupRepresentation = (function () {
        function GroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.capabilities) {
                    this.capabilities = input.capabilities.map(function (item) {
                        return new GroupCapabilityRepresentation(item);
                    });
                }
                if (input.groups) {
                    this.groups = input.groups.map(function (item) {
                        return new GroupRepresentation(item);
                    });
                }
                this.lastSyncTimeStamp = input.lastSyncTimeStamp ? DateAlfresco.parseDate(input.lastSyncTimeStamp) : undefined;
                this.manager = input.manager ? new UserRepresentationGroup(input.manager) : undefined;
                if (input.users) {
                    this.users = input.users.map(function (item) {
                        return new UserRepresentationGroup(item);
                    });
                }
            }
        }
        return GroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightGroupRepresentation = (function () {
        function LightGroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.groups) {
                    this.groups = input.groups.map(function (item) {
                        return new LightGroupRepresentation(item);
                    });
                }
            }
        }
        return LightGroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightUserRepresentation = (function () {
        function LightUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LightUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationLightUserRepresentation = (function () {
        function ResultListDataRepresentationLightUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new LightUserRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationLightUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminGroupsApi = (function (_super) {
        __extends(AdminGroupsApi, _super);
        function AdminGroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminGroupsApi.prototype.activate = function (groupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in activate");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/action/activate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addAllUsersToGroup = function (groupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in addAllUsersToGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/add-all-users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addGroupCapabilities = function (groupId, addGroupCapabilitiesRepresentation) {
            var postBody = addGroupCapabilitiesRepresentation;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in addGroupCapabilities");
            }
            if (addGroupCapabilitiesRepresentation === undefined || addGroupCapabilitiesRepresentation === null) {
                throw new Error("Required param 'addGroupCapabilitiesRepresentation' in addGroupCapabilities");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/capabilities', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addGroupMember = function (groupId, userId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in addGroupMember");
            }
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in addGroupMember");
            }
            var pathParams = {
                'groupId': groupId, 'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/members/{userId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.addRelatedGroup = function (groupId, relatedGroupId, type) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in addRelatedGroup");
            }
            if (relatedGroupId === undefined || relatedGroupId === null) {
                throw new Error("Required param 'relatedGroupId' in addRelatedGroup");
            }
            if (type === undefined || type === null) {
                throw new Error("Required param 'type' in addRelatedGroup");
            }
            var pathParams = {
                'groupId': groupId, 'relatedGroupId': relatedGroupId
            };
            var queryParams = {
                'type': type
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.createNewGroup = function (groupRepresentation) {
            var postBody = groupRepresentation;
            if (groupRepresentation === undefined || groupRepresentation === null) {
                throw new Error("Required param 'groupRepresentation' in createNewGroup");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupRepresentation);
        };
        AdminGroupsApi.prototype.deleteGroupCapability = function (groupId, groupCapabilityId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in deleteGroupCapability");
            }
            if (groupCapabilityId === undefined || groupCapabilityId === null) {
                throw new Error("Required param 'groupCapabilityId' in deleteGroupCapability");
            }
            var pathParams = {
                'groupId': groupId, 'groupCapabilityId': groupCapabilityId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/capabilities/{groupCapabilityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.deleteGroupMember = function (groupId, userId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in deleteGroupMember");
            }
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in deleteGroupMember");
            }
            var pathParams = {
                'groupId': groupId, 'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/members/{userId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.deleteGroup = function (groupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in deleteGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.deleteRelatedGroup = function (groupId, relatedGroupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in deleteRelatedGroup");
            }
            if (relatedGroupId === undefined || relatedGroupId === null) {
                throw new Error("Required param 'relatedGroupId' in deleteRelatedGroup");
            }
            var pathParams = {
                'groupId': groupId, 'relatedGroupId': relatedGroupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups/{relatedGroupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.getCapabilities = function (groupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in getCapabilities");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/potential-capabilities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminGroupsApi.prototype.getGroupUsers = function (groupId, opts) {
            opts = opts || {};
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in getGroupUsers");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'filter': opts['filter'],
                'page': opts['page'],
                'pageSize': opts['pageSize']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
        };
        AdminGroupsApi.prototype.getGroup = function (groupId, opts) {
            opts = opts || {};
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in getGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {
                'includeAllUsers': opts['includeAllUsers'],
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AbstractGroupRepresentation);
        };
        AdminGroupsApi.prototype.getGroups = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId'],
                'functional': opts['functional'],
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightGroupRepresentation);
        };
        AdminGroupsApi.prototype.getRelatedGroups = function (groupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in getRelatedGroups");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}/related-groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightGroupRepresentation);
        };
        AdminGroupsApi.prototype.updateGroup = function (groupId, groupRepresentation) {
            var postBody = groupRepresentation;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in updateGroup");
            }
            if (groupRepresentation === undefined || groupRepresentation === null) {
                throw new Error("Required param 'groupRepresentation' in updateGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/groups/{groupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GroupRepresentation);
        };
        return AdminGroupsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ImageUploadRepresentation = (function () {
        function ImageUploadRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
            }
        }
        return ImageUploadRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LightTenantRepresentation = (function () {
        function LightTenantRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LightTenantRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TenantEvent = (function () {
        function TenantEvent(input) {
            if (input) {
                Object.assign(this, input);
                this.eventTime = input.eventTime ? DateAlfresco.parseDate(input.eventTime) : undefined;
            }
        }
        return TenantEvent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TenantRepresentation = (function () {
        function TenantRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdate = input.lastUpdate ? DateAlfresco.parseDate(input.lastUpdate) : undefined;
            }
        }
        return TenantRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminTenantsApi = (function (_super) {
        __extends(AdminTenantsApi, _super);
        function AdminTenantsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminTenantsApi.prototype.createTenant = function (createTenantRepresentation) {
            var postBody = createTenantRepresentation;
            if (createTenantRepresentation === undefined || createTenantRepresentation === null) {
                throw new Error("Required param 'createTenantRepresentation' in createTenant");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightTenantRepresentation);
        };
        AdminTenantsApi.prototype.deleteTenant = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in deleteTenant");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminTenantsApi.prototype.getTenantEvents = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getTenantEvents");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TenantEvent);
        };
        AdminTenantsApi.prototype.getTenantLogo = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getTenantLogo");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/logo', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminTenantsApi.prototype.getTenant = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getTenant");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TenantRepresentation);
        };
        AdminTenantsApi.prototype.getTenants = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, LightTenantRepresentation);
        };
        AdminTenantsApi.prototype.update = function (tenantId, createTenantRepresentation) {
            var postBody = createTenantRepresentation;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in update");
            }
            if (createTenantRepresentation === undefined || createTenantRepresentation === null) {
                throw new Error("Required param 'createTenantRepresentation' in update");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TenantRepresentation);
        };
        AdminTenantsApi.prototype.uploadTenantLogo = function (tenantId, file) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in uploadTenantLogo");
            }
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in uploadTenantLogo");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/tenants/{tenantId}/logo', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ImageUploadRepresentation);
        };
        return AdminTenantsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AbstractUserRepresentation = (function () {
        function AbstractUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AbstractUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAbstractUserRepresentation = (function () {
        function ResultListDataRepresentationAbstractUserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AbstractUserRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAbstractUserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserRepresentation = (function () {
        function UserRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.apps) {
                    this.apps = input.apps.map(function (item) {
                        return new LightAppRepresentation(item);
                    });
                }
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                if (input.groups) {
                    this.groups = input.groups.map(function (item) {
                        return new GroupRepresentation(item);
                    });
                }
                this.lastUpdate = input.lastUpdate ? DateAlfresco.parseDate(input.lastUpdate) : undefined;
                this.latestSyncTimeStamp = input.latestSyncTimeStamp ? DateAlfresco.parseDate(input.latestSyncTimeStamp) : undefined;
                this.primaryGroup = input.primaryGroup ? new GroupRepresentation(input.primaryGroup) : undefined;
            }
        }
        return UserRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminUsersApi = (function (_super) {
        __extends(AdminUsersApi, _super);
        function AdminUsersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminUsersApi.prototype.bulkUpdateUsers = function (update) {
            var postBody = update;
            if (update === undefined || update === null) {
                throw new Error("Required param 'update' in bulkUpdateUsers");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AdminUsersApi.prototype.createNewUser = function (userRepresentation) {
            var postBody = userRepresentation;
            if (userRepresentation === undefined || userRepresentation === null) {
                throw new Error("Required param 'userRepresentation' in createNewUser");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        AdminUsersApi.prototype.getUser = function (userId, opts) {
            opts = opts || {};
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in getUser");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AbstractUserRepresentation);
        };
        AdminUsersApi.prototype.getUsers = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'status': opts['status'],
                'accountType': opts['accountType'],
                'sort': opts['sort'],
                'company': opts['company'],
                'start': opts['start'],
                'page': opts['page'],
                'size': opts['size'],
                'groupId': opts['groupId'],
                'tenantId': opts['tenantId'],
                'summary': opts['summary']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAbstractUserRepresentation);
        };
        AdminUsersApi.prototype.updateUserDetails = function (userId, userRepresentation) {
            var postBody = userRepresentation;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in updateUserDetails");
            }
            if (userRepresentation === undefined || userRepresentation === null) {
                throw new Error("Required param 'userRepresentation' in updateUserDetails");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/admin/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return AdminUsersApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionRepresentation = (function () {
        function AppDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AppDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionUpdateResultRepresentation = (function () {
        function AppDefinitionUpdateResultRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.appDefinition = input.appDefinition ? new AppDefinitionRepresentation(input.appDefinition) : undefined;
            }
        }
        return AppDefinitionUpdateResultRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionsApi = (function (_super) {
        __extends(AppDefinitionsApi, _super);
        function AppDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AppDefinitionsApi.prototype.deleteAppDefinition = function (appDefinitionId) {
            var postBody = null;
            if (appDefinitionId === undefined || appDefinitionId === null) {
                throw new Error("Required param 'appDefinitionId' in deleteAppDefinition");
            }
            var pathParams = {
                'appDefinitionId': appDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{appDefinitionId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AppDefinitionsApi.prototype.exportAppDefinition = function (modelId) {
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in exportAppDefinition");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', 'application/zip'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/export', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        AppDefinitionsApi.prototype.getAppDefinition = function (modelId) {
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in getAppDefinition");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionRepresentation);
        };
        AppDefinitionsApi.prototype.importAndPublishApp = function (file) {
            var postBody = null;
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in importAndPublishApp");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/publish-app', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionUpdateResultRepresentation);
        };
        AppDefinitionsApi.prototype.importAppDefinition = function (file, opts) {
            opts = opts || {};
            var postBody = null;
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in importAppDefinition");
            }
            var pathParams = {};
            var queryParams = {
                'renewIdmEntries': opts['renewIdmEntries']
            };
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionRepresentation);
        };
        AppDefinitionsApi.prototype.publishAppDefinition = function (modelId, publishModel) {
            var postBody = publishModel;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in publishAppDefinition");
            }
            if (publishModel === undefined || publishModel === null) {
                throw new Error("Required param 'publishModel' in publishAppDefinition");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/publish', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionUpdateResultRepresentation);
        };
        AppDefinitionsApi.prototype.updateAppDefinition = function (modelId, updatedModel) {
            var postBody = updatedModel;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in updateAppDefinition");
            }
            if (updatedModel === undefined || updatedModel === null) {
                throw new Error("Required param 'updatedModel' in updateAppDefinition");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            if (!updatedModel['appDefinition']) {
                contentTypes = ['multipart/form-data'];
                var formParams = {
                    'file': updatedModel
                };
                return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
            else {
                var formParams = {};
                return this.apiClient.callApi('/api/enterprise/app-definitions/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
        };
        return AppDefinitionsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RestVariable = (function () {
        function RestVariable(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RestVariable;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskRepresentation = (function () {
        function TaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.assignee = input.assignee ? new LightUserRepresentation(input.assignee) : undefined;
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.dueDate = input.dueDate ? DateAlfresco.parseDate(input.dueDate) : undefined;
                this.endDate = input.endDate ? DateAlfresco.parseDate(input.endDate) : undefined;
                if (input.involvedGroups) {
                    this.involvedGroups = input.involvedGroups.map(function (item) {
                        return new LightGroupRepresentation(item);
                    });
                }
                if (input.involvedPeople) {
                    this.involvedPeople = input.involvedPeople.map(function (item) {
                        return new LightUserRepresentation(item);
                    });
                }
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new RestVariable(item);
                    });
                }
            }
        }
        TaskRepresentation.prototype.getFullName = function () {
            var fullName = '';
            if (this.assignee) {
                var firstName = this.assignee.firstName ? this.assignee.firstName : '';
                var lastName = this.assignee.lastName ? this.assignee.lastName : '';
                fullName = firstName + " " + lastName;
            }
            return fullName.trim();
        };
        TaskRepresentation.prototype.isCompleted = function () {
            return !!this.endDate;
        };
        return TaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationTaskRepresentation = (function () {
        function ResultListDataRepresentationTaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new TaskRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationTaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChecklistsApi = (function (_super) {
        __extends(ChecklistsApi, _super);
        function ChecklistsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ChecklistsApi.prototype.addSubtask = function (taskId, taskRepresentation) {
            var postBody = taskRepresentation;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in addSubtask");
            }
            if (taskRepresentation === undefined || taskRepresentation === null) {
                throw new Error("Required param 'taskRepresentation' in addSubtask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/checklist', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        ChecklistsApi.prototype.getChecklist = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getChecklist");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/checklist', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        ChecklistsApi.prototype.orderChecklist = function (taskId, orderRepresentation) {
            var postBody = orderRepresentation;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in orderChecklist");
            }
            if (orderRepresentation === undefined || orderRepresentation === null) {
                throw new Error("Required param 'orderRepresentation' in orderChecklist");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/checklist', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ChecklistsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentRepresentation = (function () {
        function CommentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.createdBy = input.createdBy ? new LightUserRepresentation(input.createdBy) : undefined;
            }
        }
        return CommentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationCommentRepresentation = (function () {
        function ResultListDataRepresentationCommentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new CommentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationCommentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivitiCommentsApi = (function (_super) {
        __extends(ActivitiCommentsApi, _super);
        function ActivitiCommentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActivitiCommentsApi.prototype.addProcessInstanceComment = function (commentRequest, processInstanceId) {
            var postBody = commentRequest;
            if (commentRequest === undefined || commentRequest === null) {
                throw new Error("Required param 'commentRequest' in addProcessInstanceComment");
            }
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in addProcessInstanceComment");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentRepresentation);
        };
        ActivitiCommentsApi.prototype.addTaskComment = function (commentRequest, taskId) {
            var postBody = commentRequest;
            if (commentRequest === undefined || commentRequest === null) {
                throw new Error("Required param 'commentRequest' in addTaskComment");
            }
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in addTaskComment");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, CommentRepresentation);
        };
        ActivitiCommentsApi.prototype.getProcessInstanceComments = function (processInstanceId, opts) {
            opts = opts || {};
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstanceComments");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {
                'latestFirst': opts['latestFirst']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);
        };
        ActivitiCommentsApi.prototype.getTaskComments = function (taskId, opts) {
            opts = opts || {};
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getTaskComments");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'latestFirst': opts['latestFirst']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/comments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationCommentRepresentation);
        };
        return ActivitiCommentsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RelatedContentRepresentation = (function () {
        function RelatedContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.createdBy = input.createdBy ? new LightUserRepresentation(input.createdBy) : undefined;
            }
        }
        return RelatedContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationRelatedContentRepresentation = (function () {
        function ResultListDataRepresentationRelatedContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new RelatedContentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationRelatedContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentApi$1 = (function (_super) {
        __extends(ContentApi, _super);
        function ContentApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ContentApi.prototype.createRelatedContentOnProcessInstance = function (processInstanceId, relatedContent, opts) {
            opts = opts || {};
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in createRelatedContentOnProcessInstance");
            }
            if (relatedContent === undefined || relatedContent === null) {
                throw new Error("Required param 'relatedContent' in createRelatedContentOnProcessInstance");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var accepts = ['application/json'];
            if (relatedContent instanceof RelatedContentRepresentation) {
                var postBody = relatedContent;
                var contentTypes = ['application/json'];
                return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
            else {
                var postBody = null;
                formParams = {
                    'file': relatedContent
                };
                var contentTypes = ['multipart/form-data'];
                return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/raw-content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
        };
        ContentApi.prototype.createRelatedContentOnTask = function (taskId, relatedContent, opts) {
            opts = opts || {};
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in createRelatedContentOnTask");
            }
            if (relatedContent === undefined || relatedContent === null) {
                throw new Error("Required param 'relatedContent' in createRelatedContentOnTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var accepts = ['application/json'];
            if (relatedContent instanceof RelatedContentRepresentation) {
                var postBody = relatedContent;
                var contentTypes = ['application/json'];
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
            else {
                var postBody = null;
                formParams = {
                    'file': relatedContent
                };
                var contentTypes = ['multipart/form-data'];
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/raw-content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
            }
        };
        ContentApi.prototype.createTemporaryRawRelatedContent = function (file) {
            var postBody = null;
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in createTemporaryRawRelatedContent");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content/raw', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        };
        ContentApi.prototype.createTemporaryRelatedContent = function (relatedContent) {
            var postBody = relatedContent;
            if (relatedContent === undefined || relatedContent === null) {
                throw new Error("Required param 'relatedContent' in createTemporaryRelatedContent");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        };
        ContentApi.prototype.deleteContent = function (contentId) {
            var postBody = null;
            if (contentId === undefined || contentId === null) {
                throw new Error("Required param 'contentId' in deleteContent");
            }
            var pathParams = {
                'contentId': contentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content/{contentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ContentApi.prototype.getContent = function (contentId) {
            var postBody = null;
            if (contentId === undefined || contentId === null) {
                throw new Error("Required param 'contentId' in getContent");
            }
            var pathParams = {
                'contentId': contentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/content/{contentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RelatedContentRepresentation);
        };
        ContentApi.prototype.getRawContentUrl = function (contentId) {
            return this.apiClient.basePath + "/api/enterprise/content/" + contentId + "/raw";
        };
        ContentApi.prototype.getRawContent = function (contentId, renditionType) {
            var postBody = null;
            if (contentId === undefined || contentId === null) {
                throw new Error("Required param 'contentId' in getRawContent");
            }
            var pathParams = {
                'contentId': contentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', '*/*'];
            if (renditionType) {
                return this.apiClient.callApi('/api/enterprise/content/{contentId}/rendition/{renditionType}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
            else {
                return this.apiClient.callApi('/api/enterprise/content/{contentId}/raw', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, undefined, undefined, 'blob');
            }
        };
        ContentApi.prototype.getRelatedContentForProcessInstance = function (processInstanceId, opts) {
            opts = opts || {};
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getRelatedContentForProcessInstance");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);
        };
        ContentApi.prototype.getRelatedContentForTask = function (taskId, opts) {
            opts = opts || {};
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getRelatedContentForTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'isRelatedContent': opts['isRelatedContent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRelatedContentRepresentation);
        };
        return ContentApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DataSourceConfigRepresentation = (function () {
        function DataSourceConfigRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return DataSourceConfigRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DataSourceRepresentation = (function () {
        function DataSourceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.config = input.config ? new DataSourceConfigRepresentation(input.config) : undefined;
            }
        }
        return DataSourceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationDataSourceRepresentation = (function () {
        function ResultListDataRepresentationDataSourceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new DataSourceRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationDataSourceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DataSourcesApi = (function (_super) {
        __extends(DataSourcesApi, _super);
        function DataSourcesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DataSourcesApi.prototype.getDataSources = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/data-sources', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationDataSourceRepresentation);
        };
        return DataSourcesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionAuditRepresentation = (function () {
        function DecisionAuditRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
            }
        }
        return DecisionAuditRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationDecisionAuditRepresentation = (function () {
        function ResultListDataRepresentationDecisionAuditRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new DecisionAuditRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationDecisionAuditRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionAuditsApi = (function (_super) {
        __extends(DecisionAuditsApi, _super);
        function DecisionAuditsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DecisionAuditsApi.prototype.getAuditTrail = function (auditTrailId) {
            var postBody = null;
            if (auditTrailId === undefined || auditTrailId === null) {
                throw new Error("Required param 'auditTrailId' in getAuditTrail");
            }
            var pathParams = {
                'auditTrailId': auditTrailId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/audits/{auditTrailId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, DecisionAuditRepresentation);
        };
        DecisionAuditsApi.prototype.getAuditTrails = function (decisionKey, dmnDeploymentId) {
            var postBody = null;
            if (decisionKey === undefined || decisionKey === null) {
                throw new Error("Required param 'decisionKey' in getAuditTrails");
            }
            if (dmnDeploymentId === undefined || dmnDeploymentId === null) {
                throw new Error("Required param 'dmnDeploymentId' in getAuditTrails");
            }
            var pathParams = {};
            var queryParams = {
                'decisionKey': decisionKey,
                'dmnDeploymentId': dmnDeploymentId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/audits', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationDecisionAuditRepresentation);
        };
        return DecisionAuditsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.JsonNode = (function () {
        function JsonNode(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return JsonNode;
    }());
    (function (JsonNode) {
        JsonNode.NodeTypeEnum = {
            ARRAY: 'ARRAY',
            BINARY: 'BINARY',
            BOOLEAN: 'BOOLEAN',
            MISSING: 'MISSING',
            NULL: 'NULL',
            NUMBER: 'NUMBER',
            OBJECT: 'OBJECT',
            POJO: 'POJO',
            STRING: 'STRING'
        };
    })(exports.JsonNode || (exports.JsonNode = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeDecisionTableRepresentation = (function () {
        function RuntimeDecisionTableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RuntimeDecisionTableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationRuntimeDecisionTableRepresentation = (function () {
        function ResultListDataRepresentationRuntimeDecisionTableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new RuntimeDecisionTableRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationRuntimeDecisionTableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionTablesApi = (function (_super) {
        __extends(DecisionTablesApi, _super);
        function DecisionTablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DecisionTablesApi.prototype.getDecisionTableEditorJson = function (decisionTableId) {
            var postBody = null;
            if (decisionTableId === undefined || decisionTableId === null) {
                throw new Error("Required param 'decisionTableId' in getDecisionTableEditorJson");
            }
            var pathParams = {
                'decisionTableId': decisionTableId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/decision-tables/{decisionTableId}/editorJson', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, exports.JsonNode);
        };
        DecisionTablesApi.prototype.getDecisionTable = function (decisionTableId) {
            var postBody = null;
            if (decisionTableId === undefined || decisionTableId === null) {
                throw new Error("Required param 'decisionTableId' in getDecisionTable");
            }
            var pathParams = {
                'decisionTableId': decisionTableId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/decision-tables/{decisionTableId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RuntimeDecisionTableRepresentation);
        };
        DecisionTablesApi.prototype.getDecisionTables = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'nameLike': opts['nameLike'],
                'keyLike': opts['keyLike'],
                'tenantIdLike': opts['tenantIdLike'],
                'deploymentId': opts['deploymentId'],
                'sort': opts['sort'],
                'order': opts['order'],
                'start': opts['start'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/decisions/decision-tables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);
        };
        return DecisionTablesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EndpointsApi = (function (_super) {
        __extends(EndpointsApi, _super);
        function EndpointsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EndpointsApi.prototype.getEndpointConfiguration = function (endpointConfigurationId) {
            var postBody = null;
            if (endpointConfigurationId === undefined || endpointConfigurationId === null) {
                throw new Error("Required param 'endpointConfigurationId' in getEndpointConfiguration");
            }
            var pathParams = {
                'endpointConfigurationId': endpointConfigurationId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/endpoints/{endpointConfigurationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        EndpointsApi.prototype.getEndpointConfigurations = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/endpoints', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, EndpointConfigurationRepresentation);
        };
        return EndpointsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ConditionRepresentation = (function () {
        function ConditionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.nextCondition = input.nextCondition ? new ConditionRepresentation(input.nextCondition) : undefined;
            }
        }
        return ConditionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var LayoutRepresentation = (function () {
        function LayoutRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return LayoutRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var OptionRepresentation = (function () {
        function OptionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return OptionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormFieldRepresentation = (function () {
        function FormFieldRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.layout = input.layout ? new LayoutRepresentation(input.layout) : undefined;
                if (input.options) {
                    this.options = input.options.map(function (item) {
                        return new OptionRepresentation(item);
                    });
                }
                this.visibilityCondition = input.visibilityCondition ? new ConditionRepresentation(input.visibilityCondition) : undefined;
            }
        }
        return FormFieldRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormJavascriptEventRepresentation = (function () {
        function FormJavascriptEventRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormJavascriptEventRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormOutcomeRepresentation = (function () {
        function FormOutcomeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormOutcomeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormTabRepresentation = (function () {
        function FormTabRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.visibilityCondition = input.visibilityCondition ? new ConditionRepresentation(input.visibilityCondition) : undefined;
            }
        }
        return FormTabRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormVariableRepresentation = (function () {
        function FormVariableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormVariableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormDefinitionRepresentation = (function () {
        function FormDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.fields) {
                    this.fields = input.fields.map(function (item) {
                        return new FormFieldRepresentation(item);
                    });
                }
                if (input.javascriptEvents) {
                    this.javascriptEvents = input.javascriptEvents.map(function (item) {
                        return new FormJavascriptEventRepresentation(item);
                    });
                }
                if (input.outcomes) {
                    this.outcomes = input.outcomes.map(function (item) {
                        return new FormOutcomeRepresentation(item);
                    });
                }
                if (input.tabs) {
                    this.tabs = input.tabs.map(function (item) {
                        return new FormTabRepresentation(item);
                    });
                }
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new FormVariableRepresentation(item);
                    });
                }
            }
        }
        return FormDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormRepresentation = (function () {
        function FormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.formDefinition = input.formDefinition ? new FormDefinitionRepresentation(input.formDefinition) : undefined;
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return FormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationFormRepresentation = (function () {
        function ResultListDataRepresentationFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new FormRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeFormRepresentation = (function () {
        function RuntimeFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RuntimeFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationRuntimeFormRepresentation = (function () {
        function ResultListDataRepresentationRuntimeFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new RuntimeFormRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationRuntimeFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ValidationErrorRepresentation = (function () {
        function ValidationErrorRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ValidationErrorRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormModelsApi = (function (_super) {
        __extends(FormModelsApi, _super);
        function FormModelsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FormModelsApi.prototype.getFormEditorJson = function (formId) {
            var postBody = null;
            if (formId === undefined || formId === null) {
                throw new Error("Required param 'formId' in getFormEditorJson");
            }
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/forms/{formId}/editorJson', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        FormModelsApi.prototype.getFormHistory = function (formId, formHistoryId) {
            var postBody = null;
            if (formId === undefined || formId === null) {
                throw new Error("Required param 'formId' in getFormHistory");
            }
            if (formHistoryId === undefined || formHistoryId === null) {
                throw new Error("Required param 'formHistoryId' in getFormHistory");
            }
            var pathParams = {
                'formId': formId, 'formHistoryId': formHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/history/{formHistoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        };
        FormModelsApi.prototype.getForm = function (formId) {
            var postBody = null;
            if (formId === undefined || formId === null) {
                throw new Error("Required param 'formId' in getForm");
            }
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        };
        FormModelsApi.prototype.getForms = function (input) {
            var postBody = null;
            var pathParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            if (input instanceof String) {
                var queryParams = {
                    'formId': this.apiClient.buildCollectionParam(input, 'multi')
                };
                return this.apiClient.callApi('/api/enterprise/editor/form-models/values', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
            }
            else if (input instanceof Object) {
                input = input || {};
                var queryParams = {
                    'nameLike': input['nameLike'],
                    'appId': input['appId'],
                    'tenantId': input['tenantId'],
                    'start': input['start'],
                    'sort': input['sort'],
                    'order': input['order'],
                    'size': input['size']
                };
                return this.apiClient.callApi('/api/enterprise/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);
            }
            else {
                var queryParams = {};
                return this.apiClient.callApi('/api/enterprise/editor/form-models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationFormRepresentation);
            }
        };
        FormModelsApi.prototype.saveForm = function (formId, saveRepresentation) {
            var postBody = saveRepresentation;
            if (formId === undefined || formId === null) {
                throw new Error("Required param 'formId' in saveForm");
            }
            if (saveRepresentation === undefined || saveRepresentation === null) {
                throw new Error("Required param 'saveRepresentation' in saveForm");
            }
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormRepresentation);
        };
        FormModelsApi.prototype.validateModel = function (formId, saveRepresentation) {
            var postBody = saveRepresentation;
            if (formId === undefined || formId === null) {
                throw new Error("Required param 'formId' in validateModel");
            }
            if (saveRepresentation === undefined || saveRepresentation === null) {
                throw new Error("Required param 'saveRepresentation' in validateModel");
            }
            var pathParams = {
                'formId': formId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/editor/form-models/{formId}/validate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidationErrorRepresentation);
        };
        return FormModelsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationLightGroupRepresentation = (function () {
        function ResultListDataRepresentationLightGroupRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new LightGroupRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationLightGroupRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ActivitiGroupsApi = (function (_super) {
        __extends(ActivitiGroupsApi, _super);
        function ActivitiGroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ActivitiGroupsApi.prototype.getGroups = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'groupId': opts['groupId'],
                'externalId': opts['externalId'],
                'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],
                'tenantId': opts['tenantId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightGroupRepresentation);
        };
        ActivitiGroupsApi.prototype.getUsersForGroup = function (groupId) {
            var postBody = null;
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in getUsersForGroup");
            }
            var pathParams = {
                'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/groups/{groupId}/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
        };
        return ActivitiGroupsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SyncLogEntryRepresentation = (function () {
        function SyncLogEntryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.timeStamp = input.timeStamp ? DateAlfresco.parseDate(input.timeStamp) : undefined;
            }
        }
        return SyncLogEntryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IDMSyncApi = (function (_super) {
        __extends(IDMSyncApi, _super);
        function IDMSyncApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IDMSyncApi.prototype.getLogFile = function (syncLogEntryId) {
            var postBody = null;
            if (syncLogEntryId === undefined || syncLogEntryId === null) {
                throw new Error("Required param 'syncLogEntryId' in getLogFile");
            }
            var pathParams = {
                'syncLogEntryId': syncLogEntryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/idm-sync-log-entries/{syncLogEntryId}/logfile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IDMSyncApi.prototype.getSyncLogEntries = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId'],
                'page': opts['page'],
                'start': opts['start'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/idm-sync-log-entries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SyncLogEntryRepresentation);
        };
        return IDMSyncApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoContentRepresentation = (function () {
        function AlfrescoContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AlfrescoContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoContentRepresentation = (function () {
        function ResultListDataRepresentationAlfrescoContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoContentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoNetworkRepresenation = (function () {
        function AlfrescoNetworkRepresenation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AlfrescoNetworkRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoNetworkRepresenation = (function () {
        function ResultListDataRepresentationAlfrescoNetworkRepresenation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoNetworkRepresenation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoNetworkRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoSiteRepresenation = (function () {
        function AlfrescoSiteRepresenation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AlfrescoSiteRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoSiteRepresenation = (function () {
        function ResultListDataRepresentationAlfrescoSiteRepresenation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoSiteRepresenation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoSiteRepresenation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoCloudApi = (function (_super) {
        __extends(IntegrationAlfrescoCloudApi, _super);
        function IntegrationAlfrescoCloudApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoCloudApi.prototype.confirmAuthorisation = function (code) {
            var postBody = null;
            if (code === undefined || code === null) {
                throw new Error("Required param 'code' in confirmAuthorisation");
            }
            var pathParams = {};
            var queryParams = {
                'code': code
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationAlfrescoCloudApi.prototype.getAllNetworks = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoNetworkRepresenation);
        };
        IntegrationAlfrescoCloudApi.prototype.getAllSites = function (networkId) {
            var postBody = null;
            if (networkId === undefined || networkId === null) {
                throw new Error("Required param 'networkId' in getAllSites");
            }
            var pathParams = {
                'networkId': networkId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoSiteRepresenation);
        };
        IntegrationAlfrescoCloudApi.prototype.getContentInFolderPath = function (networkId, opts) {
            opts = opts || {};
            var postBody = null;
            if (networkId === undefined || networkId === null) {
                throw new Error("Required param 'networkId' in getContentInFolderPath");
            }
            var pathParams = {
                'networkId': networkId
            };
            var queryParams = {
                'siteId': opts['siteId'],
                'path': opts['path']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoCloudApi.prototype.getContentInFolder = function (networkId, folderId) {
            var postBody = null;
            if (networkId === undefined || networkId === null) {
                throw new Error("Required param 'networkId' in getContentInFolder");
            }
            if (folderId === undefined || folderId === null) {
                throw new Error("Required param 'folderId' in getContentInFolder");
            }
            var pathParams = {
                'networkId': networkId, 'folderId': folderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/folders/{folderId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoCloudApi.prototype.getContentInSite = function (networkId, siteId) {
            var postBody = null;
            if (networkId === undefined || networkId === null) {
                throw new Error("Required param 'networkId' in getContentInSite");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getContentInSite");
            }
            var pathParams = {
                'networkId': networkId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco-cloud/networks/{networkId}/sites/{siteId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        return IntegrationAlfrescoCloudApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoEndpointRepresentation = (function () {
        function AlfrescoEndpointRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return AlfrescoEndpointRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAlfrescoEndpointRepresentation = (function () {
        function ResultListDataRepresentationAlfrescoEndpointRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AlfrescoEndpointRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAlfrescoEndpointRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoOnPremiseApi = (function (_super) {
        __extends(IntegrationAlfrescoOnPremiseApi, _super);
        function IntegrationAlfrescoOnPremiseApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoOnPremiseApi.prototype.getAllSites = function (repositoryId) {
            var postBody = null;
            if (repositoryId === undefined || repositoryId === null) {
                throw new Error("Required param 'repositoryId' in getAllSites");
            }
            var pathParams = {
                'repositoryId': repositoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/sites', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoSiteRepresenation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getContentInFolderPath = function (repositoryId, siteId, folderPath) {
            var postBody = null;
            if (repositoryId === undefined || repositoryId === null) {
                throw new Error("Required param 'repositoryId' in getContentInFolderPath");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getContentInFolderPath");
            }
            if (folderPath === undefined || folderPath === null) {
                throw new Error("Required param 'folderPath' in getContentInFolderPath");
            }
            var pathParams = {
                'repositoryId': repositoryId, 'siteId': siteId, 'folderPath': folderPath
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/rest/integration/alfresco/{repositoryId}/sites/{siteId}/folderpath/{folderPath}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getContentInFolder = function (repositoryId, folderId) {
            var postBody = null;
            if (repositoryId === undefined || repositoryId === null) {
                throw new Error("Required param 'repositoryId' in getContentInFolder");
            }
            if (folderId === undefined || folderId === null) {
                throw new Error("Required param 'folderId' in getContentInFolder");
            }
            var pathParams = {
                'repositoryId': repositoryId, 'folderId': folderId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/folders/{folderId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getContentInSite = function (repositoryId, siteId) {
            var postBody = null;
            if (repositoryId === undefined || repositoryId === null) {
                throw new Error("Required param 'repositoryId' in getContentInSite");
            }
            if (siteId === undefined || siteId === null) {
                throw new Error("Required param 'siteId' in getContentInSite");
            }
            var pathParams = {
                'repositoryId': repositoryId, 'siteId': siteId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/alfresco/{repositoryId}/sites/{siteId}/content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoContentRepresentation);
        };
        IntegrationAlfrescoOnPremiseApi.prototype.getRepositories = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'tenantId': opts['tenantId'],
                'includeAccounts': opts['includeAccounts']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile/accounts/alfresco', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAlfrescoEndpointRepresentation);
        };
        return IntegrationAlfrescoOnPremiseApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BoxContent = (function () {
        function BoxContent(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return BoxContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationBoxContent = (function () {
        function ResultListDataRepresentationBoxContent(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new BoxContent(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationBoxContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationBoxApi = (function (_super) {
        __extends(IntegrationBoxApi, _super);
        function IntegrationBoxApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationBoxApi.prototype.confirmAuthorisation = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/integration/box/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.createRepositoryAccount = function (userId, credentials) {
            var postBody = credentials;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in createRepositoryAccount");
            }
            if (credentials === undefined || credentials === null) {
                throw new Error("Required param 'credentials' in createRepositoryAccount");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.deleteRepositoryAccount = function (userId) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in deleteRepositoryAccount");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.getBoxPluginStatus = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.getFiles = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'parent': opts['parent']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/files', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationBoxContent);
        };
        IntegrationBoxApi.prototype.getRepositoryAccount = function (userId) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in getRepositoryAccount");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationBoxApi.prototype.updateRepositoryAccount = function (userId, credentials) {
            var postBody = credentials;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in updateRepositoryAccount");
            }
            if (credentials === undefined || credentials === null) {
                throw new Error("Required param 'credentials' in updateRepositoryAccount");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['*/*'];
            return this.apiClient.callApi('/api/enterprise/integration/box/{userId}/account', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return IntegrationBoxApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GoogleDriveContent = (function () {
        function GoogleDriveContent(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GoogleDriveContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationGoogleDriveContent = (function () {
        function ResultListDataRepresentationGoogleDriveContent(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new GoogleDriveContent(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationGoogleDriveContent;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationDriveApi = (function (_super) {
        __extends(IntegrationDriveApi, _super);
        function IntegrationDriveApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationDriveApi.prototype.confirmAuthorisation = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/integration/google-drive/confirm-auth-request', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        IntegrationDriveApi.prototype.getFiles = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'parent': opts['parent'],
                'currentFolderOnly': opts['currentFolderOnly']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/integration/google-drive/files', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationGoogleDriveContent);
        };
        return IntegrationDriveApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelRepresentation = (function () {
        function ModelRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return ModelRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.ObjectNode = (function () {
        function ObjectNode(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ObjectNode;
    }());
    (function (ObjectNode) {
        ObjectNode.NodeTypeEnum = {
            ARRAY: 'ARRAY',
            BINARY: 'BINARY',
            BOOLEAN: 'BOOLEAN',
            MISSING: 'MISSING',
            NULL: 'NULL',
            NUMBER: 'NUMBER',
            OBJECT: 'OBJECT',
            POJO: 'POJO',
            STRING: 'STRING'
        };
    })(exports.ObjectNode || (exports.ObjectNode = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationModelRepresentation = (function () {
        function ResultListDataRepresentationModelRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ModelRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationModelRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsApi = (function (_super) {
        __extends(ModelsApi, _super);
        function ModelsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsApi.prototype.createModel = function (modelRepresentation) {
            var postBody = modelRepresentation;
            if (modelRepresentation === undefined || modelRepresentation === null) {
                throw new Error("Required param 'modelRepresentation' in createModel");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.deleteModel = function (modelId, opts) {
            opts = opts || {};
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in deleteModel");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {
                'cascade': opts['cascade'],
                'deleteRuntimeApp': opts['deleteRuntimeApp']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelsApi.prototype.duplicateModel = function (modelId, modelRepresentation) {
            var postBody = modelRepresentation;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in duplicateModel");
            }
            if (modelRepresentation === undefined || modelRepresentation === null) {
                throw new Error("Required param 'modelRepresentation' in duplicateModel");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/clone', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.getModelJSON = function (modelId) {
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in getModelJSON");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, exports.ObjectNode);
        };
        ModelsApi.prototype.getModelThumbnail = function (modelId) {
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in getModelThumbnail");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['image/png'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/thumbnail', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelsApi.prototype.getModel = function (modelId, opts) {
            opts = opts || {};
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in getModel");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {
                'includePermissions': opts['includePermissions']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.getModelsToIncludeInAppDefinition = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models-for-app-definition', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
        };
        ModelsApi.prototype.getModels = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'filterText': opts['filterText'],
                'sort': opts['sort'],
                'modelType': opts['modelType'],
                'referenceId': opts['referenceId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
        };
        ModelsApi.prototype.importNewVersion = function (modelId, file) {
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in importNewVersion");
            }
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in importNewVersion");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/newversion', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.importProcessModel = function (file) {
            var postBody = null;
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in importProcessModel");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-models/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.saveModel = function (modelId, values) {
            var postBody = values;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in saveModel");
            }
            if (values === undefined || values === null) {
                throw new Error("Required param 'values' in saveModel");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/json', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.updateModel = function (modelId, updatedModel) {
            var postBody = updatedModel;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in updateModel");
            }
            if (updatedModel === undefined || updatedModel === null) {
                throw new Error("Required param 'updatedModel' in updateModel");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        ModelsApi.prototype.validateModel = function (modelId, opts) {
            opts = opts || {};
            var postBody = opts['values'];
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in validateModel");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/editor/validate', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ValidationErrorRepresentation);
        };
        return ModelsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsBpmnApi = (function (_super) {
        __extends(ModelsBpmnApi, _super);
        function ModelsBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsBpmnApi.prototype.getHistoricProcessModelBpmn20Xml = function (processModelId, processModelHistoryId) {
            var postBody = null;
            if (processModelId === undefined || processModelId === null) {
                throw new Error("Required param 'processModelId' in getHistoricProcessModelBpmn20Xml");
            }
            if (processModelHistoryId === undefined || processModelHistoryId === null) {
                throw new Error("Required param 'processModelHistoryId' in getHistoricProcessModelBpmn20Xml");
            }
            var pathParams = {
                'processModelId': processModelId, 'processModelHistoryId': processModelHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/xml'];
            return this.apiClient.callApi('/api/enterprise/models/{processModelId}/history/{processModelHistoryId}/bpmn20', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelsBpmnApi.prototype.getProcessModelBpmn20Xml = function (processModelId) {
            var postBody = null;
            if (processModelId === undefined || processModelId === null) {
                throw new Error("Required param 'processModelId' in getProcessModelBpmn20Xml");
            }
            var pathParams = {
                'processModelId': processModelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/xml'];
            return this.apiClient.callApi('/api/enterprise/models/{processModelId}/bpmn20', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ModelsBpmnApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsHistoryApi = (function (_super) {
        __extends(ModelsHistoryApi, _super);
        function ModelsHistoryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsHistoryApi.prototype.getModelHistoryCollection = function (modelId, opts) {
            opts = opts || {};
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in getModelHistoryCollection");
            }
            var pathParams = {
                'modelId': modelId
            };
            var queryParams = {
                'includeLatestVersion': opts['includeLatestVersion']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/history', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationModelRepresentation);
        };
        ModelsHistoryApi.prototype.getProcessModelHistory = function (modelId, modelHistoryId) {
            var postBody = null;
            if (modelId === undefined || modelId === null) {
                throw new Error("Required param 'modelId' in getProcessModelHistory");
            }
            if (modelHistoryId === undefined || modelHistoryId === null) {
                throw new Error("Required param 'modelHistoryId' in getProcessModelHistory");
            }
            var pathParams = {
                'modelId': modelId, 'modelHistoryId': modelHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/models/{modelId}/history/{modelHistoryId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ModelRepresentation);
        };
        return ModelsHistoryApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormValueRepresentation = (function () {
        function FormValueRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormValueRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IdentityLinkRepresentation = (function () {
        function IdentityLinkRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return IdentityLinkRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionMetaDataRepresentation = (function () {
        function ProcessDefinitionMetaDataRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessDefinitionMetaDataRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionRepresentation = (function () {
        function ProcessDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.metaDataValues) {
                    this.metaDataValues = input.metaDataValues.map(function (item) {
                        return new ProcessDefinitionMetaDataRepresentation(item);
                    });
                }
            }
        }
        return ProcessDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationProcessDefinitionRepresentation = (function () {
        function ResultListDataRepresentationProcessDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ProcessDefinitionRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationProcessDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionsApi = (function (_super) {
        __extends(ProcessDefinitionsApi, _super);
        function ProcessDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessDefinitionsApi.prototype.createIdentityLink = function (processDefinitionId, identityLinkRepresentation) {
            var postBody = identityLinkRepresentation;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in createIdentityLink");
            }
            if (identityLinkRepresentation === undefined || identityLinkRepresentation === null) {
                throw new Error("Required param 'identityLinkRepresentation' in createIdentityLink");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.deleteIdentityLink = function (processDefinitionId, family, identityId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in deleteIdentityLink");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in deleteIdentityLink");
            }
            if (identityId === undefined || identityId === null) {
                throw new Error("Required param 'identityId' in deleteIdentityLink");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessDefinitionsApi.prototype.getIdentityLinkType = function (processDefinitionId, family, identityId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in getIdentityLinkType");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in getIdentityLinkType");
            }
            if (identityId === undefined || identityId === null) {
                throw new Error("Required param 'identityId' in getIdentityLinkType");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId, 'family': family, 'identityId': identityId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.getIdentityLinksForFamily = function (processDefinitionId, family) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in getIdentityLinksForFamily");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in getIdentityLinksForFamily");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId, 'family': family
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.getIdentityLinks = function (processDefinitionId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in getIdentityLinks");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitionDecisionTables = function (processDefinitionId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in getProcessDefinitionDecisionTables");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/decision-tables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeDecisionTableRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitionForms = function (processDefinitionId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw new Error("Required param 'processDefinitionId' in getProcessDefinitionForms");
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/forms', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationRuntimeFormRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitionStartForm = function (processDefinitionId) {
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        ProcessDefinitionsApi.prototype.getProcessDefinitions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'latest': opts['latest'],
                'appDefinitionId': opts['appDefinitionId'],
                'deploymentId': opts['deploymentId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessDefinitionRepresentation);
        };
        ProcessDefinitionsApi.prototype.getRestFieldValues = function (processDefinitionId, field) {
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId,
                'field': field
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
        };
        ProcessDefinitionsApi.prototype.getRestTableFieldValues = function (processDefinitionId, field, column) {
            var postBody = null;
            var pathParams = {
                'processDefinitionId': processDefinitionId,
                'field': field,
                'column': column
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-definitions/{processDefinitionId}/start-form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
        };
        return ProcessDefinitionsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditCalculatedValueRepresentation = (function () {
        function AuditCalculatedValueRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditCalculatedValueRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditDecisionExpressionInfoRepresentation = (function () {
        function AuditDecisionExpressionInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditDecisionExpressionInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditDecisionRuleInfoRepresentation = (function () {
        function AuditDecisionRuleInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.expressions) {
                    this.expressions = input.expressions.map(function (item) {
                        return new AuditDecisionExpressionInfoRepresentation(item);
                    });
                }
            }
        }
        return AuditDecisionRuleInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditDecisionInfoRepresentation = (function () {
        function AuditDecisionInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.appliedRules) {
                    this.appliedRules = input.appliedRules.map(function (item) {
                        return new AuditDecisionRuleInfoRepresentation(item);
                    });
                }
                if (input.calculatedValues) {
                    this.calculatedValues = input.calculatedValues.map(function (item) {
                        return new AuditCalculatedValueRepresentation(item);
                    });
                }
            }
        }
        return AuditDecisionInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditLogFormDataRepresentation = (function () {
        function AuditLogFormDataRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AuditLogFormDataRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AuditLogEntryRepresentation = (function () {
        function AuditLogEntryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.formData) {
                    this.formData = input.formData.map(function (item) {
                        return new AuditLogFormDataRepresentation(item);
                    });
                }
            }
        }
        return AuditLogEntryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceAuditInfoRepresentation = (function () {
        function ProcessInstanceAuditInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.decisionInfo = input.decisionInfo ? new AuditDecisionInfoRepresentation(input.decisionInfo) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new AuditLogEntryRepresentation(item);
                    });
                }
            }
        }
        return ProcessInstanceAuditInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceRepresentation = (function () {
        function ProcessInstanceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.ended = input.ended ? DateAlfresco.parseDate(input.ended) : undefined;
                this.started = input.started ? DateAlfresco.parseDate(input.started) : undefined;
                this.startedBy = input.startedBy ? new LightUserRepresentation(input.startedBy) : undefined;
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new RestVariable(item);
                    });
                }
            }
        }
        return ProcessInstanceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceVariableRepresentation = (function () {
        function ProcessInstanceVariableRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessInstanceVariableRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NamedObject = (function () {
        function NamedObject(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return NamedObject;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessContentRepresentation = (function () {
        function ProcessContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.content) {
                    this.content = input.content.map(function (item) {
                        return new RelatedContentRepresentation(item);
                    });
                }
                this.field = input.field ? new NamedObject(input.field) : undefined;
            }
        }
        return ProcessContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationProcessContentRepresentation = (function () {
        function ResultListDataRepresentationProcessContentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ProcessContentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationProcessContentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationProcessInstanceRepresentation = (function () {
        function ResultListDataRepresentationProcessInstanceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new ProcessInstanceRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationProcessInstanceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesApi = (function (_super) {
        __extends(ProcessInstancesApi, _super);
        function ProcessInstancesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessInstancesApi.prototype.activateProcessInstance = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in activateProcessInstance");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/activate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.createIdentityLink = function (processInstanceId, identityLinkRepresentation) {
            var postBody = identityLinkRepresentation;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in createIdentityLink");
            }
            if (identityLinkRepresentation === undefined || identityLinkRepresentation === null) {
                throw new Error("Required param 'identityLinkRepresentation' in createIdentityLink");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.deleteIdentityLink = function (processInstanceId, family, identityId, type) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in deleteIdentityLink");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in deleteIdentityLink");
            }
            if (identityId === undefined || identityId === null) {
                throw new Error("Required param 'identityId' in deleteIdentityLink");
            }
            if (type === undefined || type === null) {
                throw new Error("Required param 'type' in deleteIdentityLink");
            }
            var pathParams = {
                'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.deleteProcessInstance = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in deleteProcessInstance");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.filterProcessInstances = function (filterRequest) {
            var postBody = filterRequest;
            if (filterRequest === undefined || filterRequest === null) {
                throw new Error("Required param 'filterRequest' in filterProcessInstances");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getHistoricProcessInstanceVariables = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getHistoricProcessInstanceVariables");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/historic-variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceVariableRepresentation);
        };
        ProcessInstancesApi.prototype.getHistoricProcessInstances = function (queryRequest) {
            var postBody = queryRequest;
            if (queryRequest === undefined || queryRequest === null) {
                throw new Error("Required param 'queryRequest' in getHistoricProcessInstances");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/historic-process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getIdentityLinkType = function (processInstanceId, family, identityId, type) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getIdentityLinkType");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in getIdentityLinkType");
            }
            if (identityId === undefined || identityId === null) {
                throw new Error("Required param 'identityId' in getIdentityLinkType");
            }
            if (type === undefined || type === null) {
                throw new Error("Required param 'type' in getIdentityLinkType");
            }
            var pathParams = {
                'processInstanceId': processInstanceId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.getIdentityLinksForFamily = function (processInstanceId, family) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getIdentityLinksForFamily");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in getIdentityLinksForFamily");
            }
            var pathParams = {
                'processInstanceId': processInstanceId, 'family': family
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.getIdentityLinks = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getIdentityLinks");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstanceContent");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/field-content', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessContentRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstanceDiagram = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstanceDiagram");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['image/png'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/diagram', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstancesApi.prototype.getProcessInstanceStartForm = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstanceStartForm");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/start-form', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstance = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstance");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessInstances = function (processInstancesQuery) {
            var postBody = processInstancesQuery;
            if (processInstancesQuery === undefined || processInstancesQuery === null) {
                throw new Error("Required param 'processInstancesQuery' in getProcessInstances");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.getTaskAuditLog = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getTaskAuditLog");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/audit-log', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceAuditInfoRepresentation);
        };
        ProcessInstancesApi.prototype.getProcessAuditPdf = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw "Missing param 'processId' in getProcessAuditPdf";
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var contextRoot = null;
            var responseType = null;
            return this.apiClient.callApi('/app/rest/process-instances/{processInstanceId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, null, contextRoot, responseType);
        };
        ProcessInstancesApi.prototype.startNewProcessInstance = function (startRequest) {
            var postBody = startRequest;
            if (startRequest === undefined || startRequest === null) {
                throw new Error("Required param 'startRequest' in startNewProcessInstance");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        ProcessInstancesApi.prototype.suspendProcessInstance = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in suspendProcessInstance");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/suspend', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceRepresentation);
        };
        return ProcessInstancesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceVariablesApi = (function (_super) {
        __extends(ProcessInstanceVariablesApi, _super);
        function ProcessInstanceVariablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessInstanceVariablesApi.prototype.createOrUpdateProcessInstanceVariables = function (processInstanceId, restVariables) {
            var postBody = restVariables;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in createOrUpdateProcessInstanceVariables");
            }
            if (restVariables === undefined || restVariables === null) {
                throw new Error("Required param 'restVariables' in createOrUpdateProcessInstanceVariables");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.createProcessInstanceVariables = function (processInstanceId, restVariables) {
            var postBody = restVariables;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in createProcessInstanceVariables");
            }
            if (restVariables === undefined || restVariables === null) {
                throw new Error("Required param 'restVariables' in createProcessInstanceVariables");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.deleteProcessInstanceVariable = function (processInstanceId, variableName) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in deleteProcessInstanceVariable");
            }
            if (variableName === undefined || variableName === null) {
                throw new Error("Required param 'variableName' in deleteProcessInstanceVariable");
            }
            var pathParams = {
                'processInstanceId': processInstanceId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.getProcessInstanceVariable = function (processInstanceId, variableName) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstanceVariable");
            }
            if (variableName === undefined || variableName === null) {
                throw new Error("Required param 'variableName' in getProcessInstanceVariable");
            }
            var pathParams = {
                'processInstanceId': processInstanceId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        ProcessInstanceVariablesApi.prototype.getProcessInstanceVariables = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in getProcessInstanceVariables");
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ProcessInstanceVariablesApi.prototype.updateProcessInstanceVariable = function (processInstanceId, variableName, restVariable) {
            var postBody = restVariable;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw new Error("Required param 'processInstanceId' in updateProcessInstanceVariable");
            }
            if (variableName === undefined || variableName === null) {
                throw new Error("Required param 'variableName' in updateProcessInstanceVariable");
            }
            if (restVariable === undefined || restVariable === null) {
                throw new Error("Required param 'restVariable' in updateProcessInstanceVariable");
            }
            var pathParams = {
                'processInstanceId': processInstanceId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-instances/{processInstanceId}/variables/{variableName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        return ProcessInstanceVariablesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopeRepresentation = (function () {
        function ProcessScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopesApi = (function (_super) {
        __extends(ProcessScopesApi, _super);
        function ProcessScopesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessScopesApi.prototype.getRuntimeProcessScopes = function (processScopesRequest) {
            var postBody = processScopesRequest;
            if (processScopesRequest === undefined || processScopesRequest === null) {
                throw new Error("Required param 'processScopesRequest' in getRuntimeProcessScopes");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-scopes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessScopeRepresentation);
        };
        return ProcessScopesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAppDefinitionRepresentation = (function () {
        function ResultListDataRepresentationAppDefinitionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AppDefinitionRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAppDefinitionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeAppDefinitionsApi = (function (_super) {
        __extends(RuntimeAppDefinitionsApi, _super);
        function RuntimeAppDefinitionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RuntimeAppDefinitionsApi.prototype.deployAppDefinitions = function (saveObject) {
            var postBody = saveObject;
            if (saveObject === undefined || saveObject === null) {
                throw new Error("Required param 'saveObject' in deployAppDefinitions");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-definitions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RuntimeAppDefinitionsApi.prototype.getAppDefinition = function (appDefinitionId) {
            var postBody = null;
            if (appDefinitionId === undefined || appDefinitionId === null) {
                throw new Error("Required param 'appDefinitionId' in getAppDefinition");
            }
            var pathParams = {
                'appDefinitionId': appDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-definitions/{appDefinitionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDefinitionRepresentation);
        };
        RuntimeAppDefinitionsApi.prototype.getAppDefinitions = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAppDefinitionRepresentation);
        };
        return RuntimeAppDefinitionsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDeploymentRepresentation = (function () {
        function AppDeploymentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.appDefinition = input.appDefinition ? new AppDefinitionRepresentation(input.appDefinition) : undefined;
                this.created = input.created ? DateAlfresco.parseDate(input.created) : undefined;
                this.createdBy = input.createdBy ? new LightUserRepresentation(input.createdBy) : undefined;
            }
        }
        return AppDeploymentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationAppDeploymentRepresentation = (function () {
        function ResultListDataRepresentationAppDeploymentRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new AppDeploymentRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationAppDeploymentRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeAppDeploymentsApi = (function (_super) {
        __extends(RuntimeAppDeploymentsApi, _super);
        function RuntimeAppDeploymentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RuntimeAppDeploymentsApi.prototype.deleteAppDeployment = function (appDeploymentId) {
            var postBody = null;
            if (appDeploymentId === undefined || appDeploymentId === null) {
                throw new Error("Required param 'appDeploymentId' in deleteAppDeployment");
            }
            var pathParams = {
                'appDeploymentId': appDeploymentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployments/{appDeploymentId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RuntimeAppDeploymentsApi.prototype.exportAppDefinition = function (deploymentId) {
            var postBody = null;
            if (deploymentId === undefined || deploymentId === null) {
                throw new Error("Required param 'deploymentId' in exportAppDefinition");
            }
            var pathParams = {
                'deploymentId': deploymentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/zip'];
            return this.apiClient.callApi('/api/enterprise/export-app-deployment/{deploymentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        RuntimeAppDeploymentsApi.prototype.getAppDefinitions = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'nameLike': opts['nameLike'],
                'tenantId': opts['tenantId'],
                'latest': opts['latest'],
                'start': opts['start'],
                'sort': opts['sort'],
                'order': opts['order'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationAppDeploymentRepresentation);
        };
        RuntimeAppDeploymentsApi.prototype.getAppDeployment = function (appDeploymentId) {
            var postBody = null;
            if (appDeploymentId === undefined || appDeploymentId === null) {
                throw new Error("Required param 'appDeploymentId' in getAppDeployment");
            }
            var pathParams = {
                'appDeploymentId': appDeploymentId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployments/{appDeploymentId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDeploymentRepresentation);
        };
        RuntimeAppDeploymentsApi.prototype.getRuntimeAppDeploymentByDeployment = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'deploymentId': opts['deploymentId'],
                'dmnDeploymentId': opts['dmnDeploymentId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/runtime-app-deployment', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, AppDeploymentRepresentation);
        };
        return RuntimeAppDeploymentsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ScriptFilesApi = (function (_super) {
        __extends(ScriptFilesApi, _super);
        function ScriptFilesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScriptFilesApi.prototype.getControllers = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/script-files/controllers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ScriptFilesApi.prototype.getLibraries = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['text/html'];
            return this.apiClient.callApi('/api/enterprise/script-files/libraries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ScriptFilesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SubmittedFormRepresentation = (function () {
        function SubmittedFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.form = input.form ? new FormDefinitionRepresentation(input.form) : undefined;
                this.submitted = input.submitted ? DateAlfresco.parseDate(input.submitted) : undefined;
                this.submittedBy = input.submittedBy ? new LightUserRepresentation(input.submittedBy) : undefined;
            }
        }
        return SubmittedFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationSubmittedFormRepresentation = (function () {
        function ResultListDataRepresentationSubmittedFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new SubmittedFormRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationSubmittedFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SubmittedFormsApi = (function (_super) {
        __extends(SubmittedFormsApi, _super);
        function SubmittedFormsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SubmittedFormsApi.prototype.getFormSubmittedFroms = function (formId, opts) {
            opts = opts || {};
            var postBody = null;
            if (formId === undefined || formId === null) {
                throw new Error("Required param 'formId' in getFormSubmittedFroms");
            }
            var pathParams = {
                'formId': formId
            };
            var queryParams = {
                'submittedBy': opts['submittedBy'],
                'start': opts['start'],
                'size': opts['size']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/form-submitted-forms/{formId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationSubmittedFormRepresentation);
        };
        SubmittedFormsApi.prototype.getProcessSubmittedFroms = function (processId) {
            var postBody = null;
            if (processId === undefined || processId === null) {
                throw new Error("Required param 'processId' in getProcessSubmittedFroms");
            }
            var pathParams = {
                'processId': processId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/process-submitted-forms/{processId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationSubmittedFormRepresentation);
        };
        SubmittedFormsApi.prototype.getSubmittedFrom = function (submittedFormId) {
            var postBody = null;
            if (submittedFormId === undefined || submittedFormId === null) {
                throw new Error("Required param 'submittedFormId' in getSubmittedFrom");
            }
            var pathParams = {
                'submittedFormId': submittedFormId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/submitted-forms/{submittedFormId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubmittedFormRepresentation);
        };
        SubmittedFormsApi.prototype.getTaskSubmittedFroms = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getTaskSubmittedFroms");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-submitted-form/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SubmittedFormRepresentation);
        };
        return SubmittedFormsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GlobalDateFormatRepresentation = (function () {
        function GlobalDateFormatRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GlobalDateFormatRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PasswordValidationConstraints = (function () {
        function PasswordValidationConstraints(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return PasswordValidationConstraints;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SystemPropertiesRepresentation = (function () {
        function SystemPropertiesRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SystemPropertiesRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SystemPropertiesApi = (function (_super) {
        __extends(SystemPropertiesApi, _super);
        function SystemPropertiesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SystemPropertiesApi.prototype.getGlobalDateFormat = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getGlobalDateFormat");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties/global-date-format/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, GlobalDateFormatRepresentation);
        };
        SystemPropertiesApi.prototype.getPasswordValidationConstraints = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in getPasswordValidationConstraints");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties/password-validation-constraints/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, PasswordValidationConstraints);
        };
        SystemPropertiesApi.prototype.getProperties = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, SystemPropertiesRepresentation);
        };
        SystemPropertiesApi.prototype.involvedUsersCanEditForms = function (tenantId) {
            var postBody = null;
            if (tenantId === undefined || tenantId === null) {
                throw new Error("Required param 'tenantId' in involvedUsersCanEditForms");
            }
            var pathParams = {
                'tenantId': tenantId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/system/properties/involved-users-can-edit-forms/{tenantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return SystemPropertiesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskActionsApi = (function (_super) {
        __extends(TaskActionsApi, _super);
        function TaskActionsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskActionsApi.prototype.assignTask = function (taskId, userIdentifier) {
            var postBody = userIdentifier;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in assignTask");
            }
            if (userIdentifier === undefined || userIdentifier === null) {
                throw new Error("Required param 'userIdentifier' in assignTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/assign', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        TaskActionsApi.prototype.attachForm = function (taskId, formIdentifier) {
            var postBody = formIdentifier;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in attachForm");
            }
            if (formIdentifier === undefined || formIdentifier === null) {
                throw new Error("Required param 'formIdentifier' in attachForm");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/attach-form', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.claimTask = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in claimTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/claim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.completeTask = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in completeTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/complete', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.delegateTask = function (taskId, userIdentifier) {
            var postBody = userIdentifier;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in delegateTask");
            }
            if (userIdentifier === undefined || userIdentifier === null) {
                throw new Error("Required param 'userIdentifier' in delegateTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/delegate', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.involveGroup = function (taskId, groupId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in involveGroup");
            }
            if (groupId === undefined || groupId === null) {
                throw new Error("Required param 'groupId' in involveGroup");
            }
            var pathParams = {
                'taskId': taskId, 'groupId': groupId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.involveUser = function (taskId, userIdentifier) {
            var postBody = userIdentifier;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in involveUser");
            }
            if (userIdentifier === undefined || userIdentifier === null) {
                throw new Error("Required param 'userIdentifier' in involveUser");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/involve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.removeForm = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in removeForm");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-form', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.removeInvolvedUser = function (taskId, identifier) {
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in removeInvolvedUser");
            }
            if (identifier === undefined || identifier === null) {
                throw new Error("Required param 'groupId' in identifier");
            }
            var pathParams = {
                'taskId': taskId, 'groupId': identifier
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            if (identifier instanceof String) {
                var postBody = null;
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/groups/{groupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
            else {
                var postBody = identifier;
                return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/remove-involved', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
            }
        };
        TaskActionsApi.prototype.resolveTask = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in resolveTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/resolve', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskActionsApi.prototype.unclaimTask = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in unclaimTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/action/unclaim', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return TaskActionsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskFormsApi = (function (_super) {
        __extends(TaskFormsApi, _super);
        function TaskFormsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskFormsApi.prototype.completeTaskForm = function (taskId, completeTaskFormRepresentation) {
            var postBody = completeTaskFormRepresentation;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in completeTaskForm");
            }
            if (completeTaskFormRepresentation === undefined || completeTaskFormRepresentation === null) {
                throw new Error("Required param 'completeTaskFormRepresentation' in completeTaskForm");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskFormsApi.prototype.getProcessInstanceVariables = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getProcessInstanceVariables");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ProcessInstanceVariableRepresentation);
        };
        TaskFormsApi.prototype.getRestFieldColumnValues = function (taskId, field, column) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw "Missing param 'taskId' in getRestFieldValues";
            }
            if (field === undefined || field === null) {
                throw "Missing param 'field' in getRestFieldValues";
            }
            if (column === undefined || column === null) {
                throw "Missing param 'column' in getRestFieldValues";
            }
            var pathParams = {
                'taskId': taskId,
                'field': field,
                'column': column
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/form-values/{field}/{column}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskFormsApi.prototype.getRestFieldValues = function (taskId, field) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getRestFieldValues");
            }
            if (field === undefined || field === null) {
                throw new Error("Required param 'field' in getRestFieldValues");
            }
            var pathParams = {
                'taskId': taskId, 'field': field
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/form-values/{field}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormValueRepresentation);
        };
        TaskFormsApi.prototype.getTaskForm = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getTaskForm");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, FormDefinitionRepresentation);
        };
        TaskFormsApi.prototype.saveTaskForm = function (taskId, saveTaskFormRepresentation) {
            var postBody = saveTaskFormRepresentation;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in saveTaskForm");
            }
            if (saveTaskFormRepresentation === undefined || saveTaskFormRepresentation === null) {
                throw new Error("Required param 'saveTaskFormRepresentation' in saveTaskForm");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/save-form', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskFormsApi.prototype.getTaskFormVariables = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw "Missing param 'taskId' in getTaskFormVariables";
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/task-forms/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return TaskFormsApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentAuditInfo = (function () {
        function CommentAuditInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CommentAuditInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskAuditInfoRepresentation = (function () {
        function TaskAuditInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.comments) {
                    this.comments = input.comments.map(function (item) {
                        return new CommentAuditInfo(item);
                    });
                }
                if (input.formData) {
                    this.formData = input.formData.map(function (item) {
                        return new AuditLogFormDataRepresentation(item);
                    });
                }
            }
        }
        return TaskAuditInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TasksApi = (function (_super) {
        __extends(TasksApi, _super);
        function TasksApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TasksApi.prototype.createIdentityLink = function (taskId, identityLinkRepresentation) {
            var postBody = identityLinkRepresentation;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in createIdentityLink");
            }
            if (identityLinkRepresentation === undefined || identityLinkRepresentation === null) {
                throw new Error("Required param 'identityLinkRepresentation' in createIdentityLink");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.createNewTask = function (taskRepresentation) {
            var postBody = taskRepresentation;
            if (taskRepresentation === undefined || taskRepresentation === null) {
                throw new Error("Required param 'taskRepresentation' in createNewTask");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        TasksApi.prototype.deleteIdentityLink = function (taskId, family, identityId, type) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in deleteIdentityLink");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in deleteIdentityLink");
            }
            if (identityId === undefined || identityId === null) {
                throw new Error("Required param 'identityId' in deleteIdentityLink");
            }
            if (type === undefined || type === null) {
                throw new Error("Required param 'type' in deleteIdentityLink");
            }
            var pathParams = {
                'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TasksApi.prototype.deleteTask = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in deleteTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TasksApi.prototype.filterTasks = function (tasksFilter) {
            var postBody = tasksFilter;
            if (tasksFilter === undefined || tasksFilter === null) {
                throw new Error("Required param 'tasksFilter' in filterTasks");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/filter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        TasksApi.prototype.getIdentityLinkType = function (taskId, family, identityId, type) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getIdentityLinkType");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in getIdentityLinkType");
            }
            if (identityId === undefined || identityId === null) {
                throw new Error("Required param 'identityId' in getIdentityLinkType");
            }
            if (type === undefined || type === null) {
                throw new Error("Required param 'type' in getIdentityLinkType");
            }
            var pathParams = {
                'taskId': taskId, 'family': family, 'identityId': identityId, 'type': type
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.getIdentityLinksForFamily = function (taskId, family) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getIdentityLinksForFamily");
            }
            if (family === undefined || family === null) {
                throw new Error("Required param 'family' in getIdentityLinksForFamily");
            }
            var pathParams = {
                'taskId': taskId, 'family': family
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks/{family}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.getIdentityLinks = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getIdentityLinks");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/identitylinks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, IdentityLinkRepresentation);
        };
        TasksApi.prototype.getTaskAuditLog = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getTaskAuditLog");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/audit', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskAuditInfoRepresentation);
        };
        TasksApi.prototype.getTask = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        TasksApi.prototype.listHistoricTasks = function (queryRequest) {
            var postBody = queryRequest;
            if (queryRequest === undefined || queryRequest === null) {
                throw new Error("Required param 'queryRequest' in listHistoricTasks");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/historic-tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        TasksApi.prototype.listTasks = function (tasksQuery) {
            var postBody = tasksQuery;
            if (tasksQuery === undefined || tasksQuery === null) {
                throw new Error("Required param 'tasksQuery' in listTasks");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/query', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationTaskRepresentation);
        };
        TasksApi.prototype.updateTask = function (taskId, updated) {
            var postBody = updated;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in updateTask");
            }
            if (updated === undefined || updated === null) {
                throw new Error("Required param 'updated' in updateTask");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, TaskRepresentation);
        };
        return TasksApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskVariablesApi = (function (_super) {
        __extends(TaskVariablesApi, _super);
        function TaskVariablesApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskVariablesApi.prototype.createTaskVariable = function (taskId, restVariables) {
            var postBody = restVariables;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in createTaskVariable");
            }
            if (restVariables === undefined || restVariables === null) {
                throw new Error("Required param 'restVariables' in createTaskVariable");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        TaskVariablesApi.prototype.deleteAllLocalTaskVariables = function (taskId) {
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in deleteAllLocalTaskVariables");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskVariablesApi.prototype.deleteVariable = function (taskId, variableName, opts) {
            opts = opts || {};
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in deleteVariable");
            }
            if (variableName === undefined || variableName === null) {
                throw new Error("Required param 'variableName' in deleteVariable");
            }
            var pathParams = {
                'taskId': taskId, 'variableName': variableName
            };
            var queryParams = {
                'scope': opts['scope']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TaskVariablesApi.prototype.getVariable = function (taskId, variableName, opts) {
            opts = opts || {};
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getVariable");
            }
            if (variableName === undefined || variableName === null) {
                throw new Error("Required param 'variableName' in getVariable");
            }
            var pathParams = {
                'taskId': taskId, 'variableName': variableName
            };
            var queryParams = {
                'scope': opts['scope']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        TaskVariablesApi.prototype.getVariables = function (taskId, opts) {
            opts = opts || {};
            var postBody = null;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in getVariables");
            }
            var pathParams = {
                'taskId': taskId
            };
            var queryParams = {
                'scope': opts['scope']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        TaskVariablesApi.prototype.updateVariable = function (taskId, variableName, restVariable) {
            var postBody = restVariable;
            if (taskId === undefined || taskId === null) {
                throw new Error("Required param 'taskId' in updateVariable");
            }
            if (variableName === undefined || variableName === null) {
                throw new Error("Required param 'variableName' in updateVariable");
            }
            if (restVariable === undefined || restVariable === null) {
                throw new Error("Required param 'restVariable' in updateVariable");
            }
            var pathParams = {
                'taskId': taskId, 'variableName': variableName
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/tasks/{taskId}/variables/{variableName}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, RestVariable);
        };
        return TaskVariablesApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceFilterRepresentation = (function () {
        function ProcessInstanceFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessInstanceFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserProcessInstanceFilterRepresentation = (function () {
        function UserProcessInstanceFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new ProcessInstanceFilterRepresentation(input.filter) : undefined;
            }
        }
        return UserProcessInstanceFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationUserProcessInstanceFilterRepresentation = (function () {
        function ResultListDataRepresentationUserProcessInstanceFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new UserProcessInstanceFilterRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.TaskFilterRepresentation = (function () {
        function TaskFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueAfter = input.dueAfter ? DateAlfresco.parseDate(input.dueAfter) : undefined;
                this.dueBefore = input.dueBefore ? DateAlfresco.parseDate(input.dueBefore) : undefined;
            }
        }
        return TaskFilterRepresentation;
    }());
    (function (TaskFilterRepresentation) {
        TaskFilterRepresentation.StateEnum = {
            Active: 'active',
            Completed: 'completed',
            All: 'all'
        };
    })(exports.TaskFilterRepresentation || (exports.TaskFilterRepresentation = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserTaskFilterRepresentation = (function () {
        function UserTaskFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new exports.TaskFilterRepresentation(input.filter) : undefined;
            }
        }
        return UserTaskFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationUserTaskFilterRepresentation = (function () {
        function ResultListDataRepresentationUserTaskFilterRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new UserTaskFilterRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationUserTaskFilterRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserFiltersApi = (function (_super) {
        __extends(UserFiltersApi, _super);
        function UserFiltersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserFiltersApi.prototype.createUserProcessInstanceFilter = function (userProcessInstanceFilterRepresentation) {
            var postBody = userProcessInstanceFilterRepresentation;
            if (userProcessInstanceFilterRepresentation === undefined || userProcessInstanceFilterRepresentation === null) {
                throw new Error("Required param 'userProcessInstanceFilterRepresentation' in createUserProcessInstanceFilter");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.createUserTaskFilter = function (userTaskFilterRepresentation) {
            var postBody = userTaskFilterRepresentation;
            if (userTaskFilterRepresentation === undefined || userTaskFilterRepresentation === null) {
                throw new Error("Required param 'userTaskFilterRepresentation' in createUserTaskFilter");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
        };
        UserFiltersApi.prototype.deleteUserProcessInstanceFilter = function (userFilterId) {
            var postBody = null;
            if (userFilterId === undefined || userFilterId === null) {
                throw new Error("Required param 'userFilterId' in deleteUserProcessInstanceFilter");
            }
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.deleteUserTaskFilter = function (userFilterId) {
            var postBody = null;
            if (userFilterId === undefined || userFilterId === null) {
                throw new Error("Required param 'userFilterId' in deleteUserTaskFilter");
            }
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.getUserProcessInstanceFilter = function (userFilterId) {
            var postBody = null;
            if (userFilterId === undefined || userFilterId === null) {
                throw new Error("Required param 'userFilterId' in getUserProcessInstanceFilter");
            }
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.getUserProcessInstanceFilters = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'appId': opts['appId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.getUserTaskFilter = function (userFilterId) {
            var postBody = null;
            if (userFilterId === undefined || userFilterId === null) {
                throw new Error("Required param 'userFilterId' in getUserTaskFilter");
            }
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
        };
        UserFiltersApi.prototype.getUserTaskFilters = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'appId': opts['appId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationUserTaskFilterRepresentation);
        };
        UserFiltersApi.prototype.orderUserProcessInstanceFilters = function (filterOrderRepresentation) {
            var postBody = filterOrderRepresentation;
            if (filterOrderRepresentation === undefined || filterOrderRepresentation === null) {
                throw new Error("Required param 'filterOrderRepresentation' in orderUserProcessInstanceFilters");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.orderUserTaskFilters = function (filterOrderRepresentation) {
            var postBody = filterOrderRepresentation;
            if (filterOrderRepresentation === undefined || filterOrderRepresentation === null) {
                throw new Error("Required param 'filterOrderRepresentation' in orderUserTaskFilters");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserFiltersApi.prototype.updateUserProcessInstanceFilter = function (userFilterId, userProcessInstanceFilterRepresentation) {
            var postBody = userProcessInstanceFilterRepresentation;
            if (userFilterId === undefined || userFilterId === null) {
                throw new Error("Required param 'userFilterId' in updateUserProcessInstanceFilter");
            }
            if (userProcessInstanceFilterRepresentation === undefined || userProcessInstanceFilterRepresentation === null) {
                throw new Error("Required param 'userProcessInstanceFilterRepresentation' in updateUserProcessInstanceFilter");
            }
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/processes/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserProcessInstanceFilterRepresentation);
        };
        UserFiltersApi.prototype.updateUserTaskFilter = function (userFilterId, userTaskFilterRepresentation) {
            var postBody = userTaskFilterRepresentation;
            if (userFilterId === undefined || userFilterId === null) {
                throw new Error("Required param 'userFilterId' in updateUserTaskFilter");
            }
            if (userTaskFilterRepresentation === undefined || userTaskFilterRepresentation === null) {
                throw new Error("Required param 'userTaskFilterRepresentation' in updateUserTaskFilter");
            }
            var pathParams = {
                'userFilterId': userFilterId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/filters/tasks/{userFilterId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserTaskFilterRepresentation);
        };
        return UserFiltersApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserProfileApi = (function (_super) {
        __extends(UserProfileApi, _super);
        function UserProfileApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserProfileApi.prototype.changePassword = function (changePasswordRepresentation) {
            var postBody = changePasswordRepresentation;
            if (changePasswordRepresentation === undefined || changePasswordRepresentation === null) {
                throw new Error("Required param 'changePasswordRepresentation' in changePassword");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile-password', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserProfileApi.prototype.getProfilePicture = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json', '*/*'];
            return this.apiClient.callApi('/api/enterprise/profile-picture', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UserProfileApi.prototype.getProfilePictureUrl = function () {
            return this.apiClient.basePath + '/app/rest/admin/profile-picture';
        };
        UserProfileApi.prototype.getProfile = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        UserProfileApi.prototype.updateProfile = function (userRepresentation) {
            var postBody = userRepresentation;
            if (userRepresentation === undefined || userRepresentation === null) {
                throw new Error("Required param 'userRepresentation' in updateProfile");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        UserProfileApi.prototype.uploadProfilePicture = function (file) {
            var postBody = null;
            if (file === undefined || file === null) {
                throw new Error("Required param 'file' in uploadProfilePicture");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {
                'file': file
            };
            var contentTypes = ['multipart/form-data'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/profile-picture', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ImageUploadRepresentation);
        };
        return UserProfileApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UsersApi = (function (_super) {
        __extends(UsersApi, _super);
        function UsersApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UsersApi.prototype.executeAction = function (userId, actionRequest) {
            var postBody = actionRequest;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in executeAction");
            }
            if (actionRequest === undefined || actionRequest === null) {
                throw new Error("Required param 'actionRequest' in executeAction");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users/{userId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UsersApi.prototype.getUserProfilePictureUrl = function (userId) {
            return this.apiClient.basePath + '/app/rest/users/' + userId + '/picture';
        };
        UsersApi.prototype.getUser = function (userId) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in getUser");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users/{userId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        UsersApi.prototype.getUsers = function (opts) {
            opts = opts || {};
            var postBody = null;
            var pathParams = {};
            var queryParams = {
                'filter': opts['filter'],
                'email': opts['email'],
                'externalId': opts['externalId'],
                'externalIdCaseInsensitive': opts['externalIdCaseInsensitive'],
                'excludeTaskId': opts['excludeTaskId'],
                'excludeProcessId': opts['excludeProcessId'],
                'groupId': opts['groupId'],
                'tenantId': opts['tenantId']
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultListDataRepresentationLightUserRepresentation);
        };
        UsersApi.prototype.requestPasswordReset = function (resetPassword) {
            var postBody = resetPassword;
            if (resetPassword === undefined || resetPassword === null) {
                throw new Error("Required param 'resetPassword' in requestPasswordReset");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/idm/passwords', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        UsersApi.prototype.updateUser = function (userId, userRequest) {
            var postBody = userRequest;
            if (userId === undefined || userId === null) {
                throw new Error("Required param 'userId' in updateUser");
            }
            if (userRequest === undefined || userRequest === null) {
                throw new Error("Required param 'userRequest' in updateUser");
            }
            var pathParams = {
                'userId': userId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/users/{userId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, UserRepresentation);
        };
        return UsersApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ReportApi = (function (_super) {
        __extends(ReportApi, _super);
        function ReportApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReportApi.prototype.createDefaultReports = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/default-reports', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getTasksByProcessDefinitionId = function (reportId, processDefinitionId) {
            var postBody = null;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in getTasksByProcessDefinitionId";
            }
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw "Missing param 'processDefinitionId' in getTasksByProcessDefinitionId";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {
                'processDefinitionId': processDefinitionId
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/report-params/{reportId}/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getReportsByParams = function (reportId, paramsQuery) {
            var postBody = paramsQuery;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in getReportsByParams";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/report-params/{reportId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getProcessDefinitions = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/process-definitions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getReportParams = function (reportId) {
            var postBody = null;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in getReportParams";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/report-params/{reportId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.getReportList = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.updateReport = function (reportId, name) {
            var postBody = {
                'name': name
            };
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in updateReport";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.exportToCsv = function (reportId, queryParams) {
            var postBody = queryParams;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in exportToCsv";
            }
            if (queryParams === undefined || queryParams === null) {
                throw "Missing param 'queryParams' in exportToCsv";
            }
            if (queryParams.reportName === undefined || queryParams.reportName === null) {
                throw "Missing param 'reportName' in exportToCsv";
            }
            var pathParams = {
                'reportId': reportId
            };
            var headerParams = {};
            var formParams = {};
            queryParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}/export-to-csv', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.saveReport = function (reportId, queryParams) {
            var postBody = queryParams;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in saveReport";
            }
            if (queryParams === undefined || queryParams === null) {
                throw "Missing param 'queryParams' in queryParams";
            }
            if (queryParams.reportName === undefined || queryParams.reportName === null) {
                throw "Missing param 'reportName' in exportToCsv";
            }
            queryParams.__reportName = queryParams.reportName;
            var pathParams = {
                'reportId': reportId
            };
            var headerParams = {};
            var formParams = {};
            queryParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ReportApi.prototype.deleteReport = function (reportId) {
            var postBody = null;
            if (reportId === undefined || reportId === null) {
                throw "Missing param 'reportId' in delete";
            }
            var pathParams = {
                'reportId': reportId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/reporting/reports/{reportId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ReportApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelJsonBpmnApi = (function (_super) {
        __extends(ModelJsonBpmnApi, _super);
        function ModelJsonBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelJsonBpmnApi.prototype.getHistoricEditorDisplayJsonClient = function (processModelId, processModelHistoryId) {
            var postBody = null;
            if (processModelId === undefined || processModelId === null) {
                throw "Missing param 'processModelId' in getHistoricEditorDisplayJsonClient";
            }
            if (processModelHistoryId === undefined || processModelHistoryId === null) {
                throw "Missing param 'processModelHistoryId' in getHistoricEditorDisplayJsonClient";
            }
            var pathParams = {
                'processModelId': processModelId,
                'processModelHistoryId': processModelHistoryId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/models/{processModelId}/history/{processModelHistoryId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelJsonBpmnApi.prototype.getEditorDisplayJsonClient = function (processModelId) {
            var postBody = null;
            if (processModelId === undefined || processModelId === null) {
                throw "Missing param 'processModelId' in getEditorDisplayJsonClient";
            }
            var pathParams = {
                'processModelId': processModelId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/models/{processModelId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelJsonBpmnApi.prototype.getModelJSON = function (processDefinitionId) {
            var postBody = null;
            if (processDefinitionId === undefined || processDefinitionId === null) {
                throw "Missing param 'processDefinitionId' in getProcessDefinitionModel";
            }
            var pathParams = {
                'processDefinitionId': processDefinitionId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/process-definitions/{processDefinitionId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        ModelJsonBpmnApi.prototype.getModelJSONForProcessDefinition = function (processInstanceId) {
            var postBody = null;
            if (processInstanceId === undefined || processInstanceId === null) {
                throw "Missing param 'processInstanceId' in getProcessInstancesModel";
            }
            var pathParams = {
                'processInstanceId': processInstanceId
            };
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/app/rest/process-instances/{processInstanceId}/model-json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return ModelJsonBpmnApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TemporaryApi = (function (_super) {
        __extends(TemporaryApi, _super);
        function TemporaryApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TemporaryApi.prototype.completeTasks = function (userId, processDefinitionKey) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw "Missing param 'userId' in completeTasks";
            }
            if (processDefinitionKey === undefined || processDefinitionKey === null) {
                throw "Missing param 'processDefinitionKey' in completeTasks";
            }
            var pathParams = {};
            var queryParams = {
                'userId': userId,
                'processDefinitionKey': processDefinitionKey
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/generate-report-data/complete-tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TemporaryApi.prototype.generateData = function (userId, processDefinitionKey) {
            var postBody = null;
            if (userId === undefined || userId === null) {
                throw "Missing param 'userId' in generateData";
            }
            if (processDefinitionKey === undefined || processDefinitionKey === null) {
                throw "Missing param 'processDefinitionKey' in generateData";
            }
            var pathParams = {};
            var queryParams = {
                'userId': userId,
                'processDefinitionKey': processDefinitionKey
            };
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/generate-report-data/start-process', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TemporaryApi.prototype.getHeaders = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/example-headers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        TemporaryApi.prototype.getOptions = function () {
            var postBody = null;
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/api/enterprise/temporary/example-options', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts);
        };
        return TemporaryApi;
    }(BaseApi$5));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var APS_APIS = [AboutApi, AccountIntegrationApi, AdminEndpointsApi, AdminGroupsApi, AdminTenantsApi, AdminUsersApi, AppDefinitionsApi, ChecklistsApi, ActivitiCommentsApi, ContentApi$1, DataSourcesApi, DecisionAuditsApi, DecisionTablesApi, EndpointsApi, FormModelsApi, ActivitiGroupsApi, IDMSyncApi, IntegrationAlfrescoCloudApi, IntegrationAlfrescoOnPremiseApi, IntegrationBoxApi, IntegrationDriveApi, ModelsApi, ModelJsonBpmnApi, ModelsBpmnApi, ModelsHistoryApi, ProcessDefinitionsApi, ProcessInstancesApi, ProcessInstanceVariablesApi, ProcessScopesApi, RuntimeAppDefinitionsApi, RuntimeAppDeploymentsApi, ScriptFilesApi, SubmittedFormsApi, SystemPropertiesApi, TaskActionsApi, TaskFormsApi, TasksApi, TaskVariablesApi, UserFiltersApi, UserProfileApi, UsersApi, ReportApi, TemporaryApi];

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AddGroupCapabilitiesRepresentation = (function () {
        function AddGroupCapabilitiesRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AddGroupCapabilitiesRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppModelDefinition = (function () {
        function AppModelDefinition(input) {
            if (input) {
                Object.assign(this, input);
                this.lastUpdated = input.lastUpdated ? DateAlfresco.parseDate(input.lastUpdated) : undefined;
            }
        }
        return AppModelDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PublishIdentityInfoRepresentation = (function () {
        function PublishIdentityInfoRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.group = input.group ? new LightGroupRepresentation(input.group) : undefined;
                this.person = input.person ? new LightUserRepresentation(input.person) : undefined;
            }
        }
        return PublishIdentityInfoRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinition = (function () {
        function AppDefinition(input) {
            if (input) {
                Object.assign(this, input);
                if (input.models) {
                    this.models = input.models.map(function (item) {
                        return new AppModelDefinition(item);
                    });
                }
                if (input.publishIdentityInfo) {
                    this.publishIdentityInfo = input.publishIdentityInfo.map(function (item) {
                        return new PublishIdentityInfoRepresentation(item);
                    });
                }
            }
        }
        return AppDefinition;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionPublishRepresentation = (function () {
        function AppDefinitionPublishRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AppDefinitionPublishRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppDefinitionSaveRepresentation = (function () {
        function AppDefinitionSaveRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.appDefinition = input.appDefinition ? new AppDefinitionRepresentation(input.appDefinition) : undefined;
            }
        }
        return AppDefinitionSaveRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AssigneeIdentifierRepresentation = (function () {
        function AssigneeIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return AssigneeIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BoxUserAccountCredentialsRepresentation = (function () {
        function BoxUserAccountCredentialsRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.expireDate = input.expireDate ? DateAlfresco.parseDate(input.expireDate) : undefined;
            }
        }
        return BoxUserAccountCredentialsRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BulkUserUpdateRepresentation = (function () {
        function BulkUserUpdateRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return BulkUserUpdateRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChangePasswordRepresentation = (function () {
        function ChangePasswordRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChangePasswordRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChecklistOrderRepresentation = (function () {
        function ChecklistOrderRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ChecklistOrderRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CompleteFormRepresentation = (function () {
        function CompleteFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CompleteFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CreateEndpointBasicAuthRepresentation = (function () {
        function CreateEndpointBasicAuthRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CreateEndpointBasicAuthRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CreateProcessInstanceRepresentation = (function () {
        function CreateProcessInstanceRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new RestVariable(item);
                    });
                }
            }
        }
        return CreateProcessInstanceRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CreateTenantRepresentation = (function () {
        function CreateTenantRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return CreateTenantRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DecisionTaskRepresentation = (function () {
        function DecisionTaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.decisionExecutionEnded = input.decisionExecutionEnded ? DateAlfresco.parseDate(input.decisionExecutionEnded) : undefined;
            }
        }
        return DecisionTaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EntityAttributeScopeRepresentation = (function () {
        function EntityAttributeScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return EntityAttributeScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EntityVariableScopeRepresentation = (function () {
        function EntityVariableScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.attributes) {
                    this.attributes = input.attributes.map(function (item) {
                        return new EntityAttributeScopeRepresentation(item);
                    });
                }
            }
        }
        return EntityVariableScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FieldValueInfo = (function () {
        function FieldValueInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FieldValueInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var File$1 = (function () {
        function File(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return File;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormIdentifierRepresentation = (function () {
        function FormIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return FormIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopeIdentifierRepresentation = (function () {
        function ProcessScopeIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessScopeIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormSaveRepresentation = (function () {
        function FormSaveRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.formRepresentation = input.formRepresentation ? new FormRepresentation(input.formRepresentation) : undefined;
                if (input.processScopeIdentifiers) {
                    this.processScopeIdentifiers = input.processScopeIdentifiers.map(function (item) {
                        return new ProcessScopeIdentifierRepresentation(item);
                    });
                }
            }
        }
        return FormSaveRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FormScopeRepresentation = (function () {
        function FormScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.fieldVariables) {
                    this.fieldVariables = input.fieldVariables.map(function (item) {
                        return new FormFieldRepresentation(item);
                    });
                }
                if (input.fields) {
                    this.fields = input.fields.map(function (item) {
                        return new FormFieldRepresentation(item);
                    });
                }
                if (input.outcomes) {
                    this.outcomes = input.outcomes.map(function (item) {
                        return new FormOutcomeRepresentation(item);
                    });
                }
            }
        }
        return FormScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.QueryVariable = (function () {
        function QueryVariable(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return QueryVariable;
    }());
    (function (QueryVariable) {
        QueryVariable.VariableOperationEnum = {
            EQUALS: 'EQUALS',
            NOTEQUALS: 'NOT_EQUALS',
            EQUALSIGNORECASE: 'EQUALS_IGNORE_CASE',
            NOTEQUALSIGNORECASE: 'NOT_EQUALS_IGNORE_CASE',
            LIKE: 'LIKE',
            LIKEIGNORECASE: 'LIKE_IGNORE_CASE',
            GREATERTHAN: 'GREATER_THAN',
            GREATERTHANOREQUALS: 'GREATER_THAN_OR_EQUALS',
            LESSTHAN: 'LESS_THAN',
            LESSTHANOREQUALS: 'LESS_THAN_OR_EQUALS'
        };
    })(exports.QueryVariable || (exports.QueryVariable = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var HistoricProcessInstanceQueryRepresentation = (function () {
        function HistoricProcessInstanceQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.finishedAfter = input.finishedAfter ? DateAlfresco.parseDate(input.finishedAfter) : undefined;
                this.finishedBefore = input.finishedBefore ? DateAlfresco.parseDate(input.finishedBefore) : undefined;
                this.startedAfter = input.startedAfter ? DateAlfresco.parseDate(input.startedAfter) : undefined;
                this.startedBefore = input.startedBefore ? DateAlfresco.parseDate(input.startedBefore) : undefined;
                if (input.variables) {
                    this.variables = input.variables.map(function (item) {
                        return new exports.QueryVariable(item);
                    });
                }
            }
        }
        return HistoricProcessInstanceQueryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var HistoricTaskInstanceQueryRepresentation = (function () {
        function HistoricTaskInstanceQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueDate = input.dueDate ? DateAlfresco.parseDate(input.dueDate) : undefined;
                this.dueDateAfter = input.dueDateAfter ? DateAlfresco.parseDate(input.dueDateAfter) : undefined;
                this.dueDateBefore = input.dueDateBefore ? DateAlfresco.parseDate(input.dueDateBefore) : undefined;
                if (input.processVariables) {
                    this.processVariables = input.processVariables.map(function (item) {
                        return new exports.QueryVariable(item);
                    });
                }
                this.taskCompletedAfter = input.taskCompletedAfter ? DateAlfresco.parseDate(input.taskCompletedAfter) : undefined;
                this.taskCompletedBefore = input.taskCompletedBefore ? DateAlfresco.parseDate(input.taskCompletedBefore) : undefined;
                this.taskCompletedOn = input.taskCompletedOn ? DateAlfresco.parseDate(input.taskCompletedOn) : undefined;
                this.taskCreatedAfter = input.taskCreatedAfter ? DateAlfresco.parseDate(input.taskCreatedAfter) : undefined;
                this.taskCreatedBefore = input.taskCreatedBefore ? DateAlfresco.parseDate(input.taskCreatedBefore) : undefined;
                this.taskCreatedOn = input.taskCreatedOn ? DateAlfresco.parseDate(input.taskCreatedOn) : undefined;
                if (input.taskVariables) {
                    this.taskVariables = input.taskVariables.map(function (item) {
                        return new exports.QueryVariable(item);
                    });
                }
            }
        }
        return HistoricTaskInstanceQueryRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceFilterRequestRepresentation = (function () {
        function ProcessInstanceFilterRequestRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new ProcessInstanceFilterRepresentation(input.filter) : undefined;
            }
        }
        return ProcessInstanceFilterRequestRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.ProcessFilterRequestRepresentation = (function () {
        function ProcessInstanceQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ProcessInstanceQueryRepresentation;
    }());
    (function (ProcessInstanceQueryRepresentation) {
        ProcessInstanceQueryRepresentation.SortEnum = {
            CreatedDesc: 'created-desc',
            CreatedAsc: 'created-asc',
            EndedDesc: 'ended-desc',
            EndedAsc: 'ended-asc'
        };
        ProcessInstanceQueryRepresentation.StateEnum = {
            Running: 'running',
            Completed: 'completed',
            All: 'all'
        };
    })(exports.ProcessFilterRequestRepresentation || (exports.ProcessFilterRequestRepresentation = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopesRequestRepresentation = (function () {
        function ProcessScopesRequestRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.identifiers) {
                    this.identifiers = input.identifiers.map(function (item) {
                        return new ProcessScopeIdentifierRepresentation(item);
                    });
                }
            }
        }
        return ProcessScopesRequestRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResetPasswordRepresentation = (function () {
        function ResetPasswordRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResetPasswordRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultListDataRepresentationDecisionTaskRepresentation = (function () {
        function ResultListDataRepresentationDecisionTaskRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.data) {
                    this.data = input.data.map(function (item) {
                        return new DecisionTaskRepresentation(item);
                    });
                }
            }
        }
        return ResultListDataRepresentationDecisionTaskRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RuntimeAppDefinitionSaveRepresentation = (function () {
        function RuntimeAppDefinitionSaveRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                if (input.appDefinitions) {
                    this.appDefinitions = input.appDefinitions.map(function (item) {
                        return new AppDefinitionRepresentation(item);
                    });
                }
            }
        }
        return RuntimeAppDefinitionSaveRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SaveFormRepresentation = (function () {
        function SaveFormRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SaveFormRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskFilterRequestRepresentation = (function () {
        function TaskFilterRequestRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.filter = input.filter ? new exports.TaskFilterRepresentation(input.filter) : undefined;
            }
        }
        return TaskFilterRequestRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.TaskQueryRequestRepresentation = (function () {
        function TaskQueryRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueAfter = input.dueAfter ? DateAlfresco.parseDate(input.dueAfter) : undefined;
                this.dueBefore = input.dueBefore ? DateAlfresco.parseDate(input.dueBefore) : undefined;
            }
        }
        return TaskQueryRepresentation;
    }());
    (function (TaskQueryRepresentation) {
        TaskQueryRepresentation.SortEnum = {
            CreatedDesc: 'created-desc',
            CreatedAsc: 'created-asc',
            DueDesc: 'due-desc',
            DueAsc: 'due-asc'
        };
        TaskQueryRepresentation.StateEnum = {
            Active: 'active',
            Completed: 'completed',
            All: 'all'
        };
    })(exports.TaskQueryRequestRepresentation || (exports.TaskQueryRequestRepresentation = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskUpdateRepresentation = (function () {
        function TaskUpdateRepresentation(input) {
            if (input) {
                Object.assign(this, input);
                this.dueDate = input.dueDate ? DateAlfresco.parseDate(input.dueDate) : undefined;
            }
        }
        return TaskUpdateRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserAccountCredentialsRepresentation = (function () {
        function UserAccountCredentialsRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserAccountCredentialsRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserActionRepresentation = (function () {
        function UserActionRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserActionRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserFilterOrderRepresentation = (function () {
        function UserFilterOrderRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserFilterOrderRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserIdentifierRepresentation = (function () {
        function UserIdentifierRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return UserIdentifierRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VariableMappingRepresentation = (function () {
        function VariableMappingRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return VariableMappingRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VariableScopeRepresentation = (function () {
        function VariableScopeRepresentation(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return VariableScopeRepresentation;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestDefaults = (function () {
        function RequestDefaults(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestDefaults;
    }());
    (function (RequestDefaults) {
        RequestDefaults.DefaultFTSOperatorEnum = {
            AND: 'AND',
            OR: 'OR'
        };
        RequestDefaults.DefaultFTSFieldOperatorEnum = {
            AND: 'AND',
            OR: 'OR'
        };
    })(exports.RequestDefaults || (exports.RequestDefaults = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestFacetField = (function () {
        function RequestFacetField(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFacetField;
    }());
    (function (RequestFacetField) {
        RequestFacetField.SortEnum = {
            COUNT: 'COUNT',
            INDEX: 'INDEX'
        };
        RequestFacetField.MethodEnum = {
            ENUM: 'ENUM',
            FC: 'FC'
        };
    })(exports.RequestFacetField || (exports.RequestFacetField = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetFields = (function () {
        function RequestFacetFields(input) {
            if (input) {
                Object.assign(this, input);
                if (input.facets) {
                    this.facets = input.facets.map(function (item) {
                        return new exports.RequestFacetField(item);
                    });
                }
            }
        }
        return RequestFacetFields;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetSet = (function () {
        function RequestFacetSet(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFacetSet;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetIntervalsIntervals = (function () {
        function RequestFacetIntervalsIntervals(input) {
            if (input) {
                Object.assign(this, input);
                if (input.sets) {
                    this.sets = input.sets.map(function (item) {
                        return new RequestFacetSet(item);
                    });
                }
            }
        }
        return RequestFacetIntervalsIntervals;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetIntervals = (function () {
        function RequestFacetIntervals(input) {
            if (input) {
                Object.assign(this, input);
                if (input.sets) {
                    this.sets = input.sets.map(function (item) {
                        return new RequestFacetSet(item);
                    });
                }
                if (input.intervals) {
                    this.intervals = input.intervals.map(function (item) {
                        return new RequestFacetIntervalsIntervals(item);
                    });
                }
            }
        }
        return RequestFacetIntervals;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetQueries = (function (_super) {
        __extends(RequestFacetQueries, _super);
        function RequestFacetQueries(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestFacetQueries;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFields = (function (_super) {
        __extends(RequestFields, _super);
        function RequestFields(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestFields;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFilterQueries = (function (_super) {
        __extends(RequestFilterQueries, _super);
        function RequestFilterQueries(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestFilterQueries;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestHighlightFields = (function () {
        function RequestHighlightFields(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestHighlightFields;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestHighlight = (function () {
        function RequestHighlight(input) {
            if (input) {
                Object.assign(this, input);
                if (input.fields) {
                    this.fields = input.fields.map(function (item) {
                        return new RequestHighlightFields(item);
                    });
                }
            }
        }
        return RequestHighlight;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestInclude = (function (_super) {
        __extends(RequestInclude, _super);
        function RequestInclude(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestInclude;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestLimits = (function () {
        function RequestLimits(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestLimits;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestLocalization = (function () {
        function RequestLocalization(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestLocalization;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestPagination = (function () {
        function RequestPagination(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestPagination;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestPivot = (function () {
        function RequestPivot(input) {
            if (input) {
                Object.assign(this, input);
                if (input.pivots) {
                    this.pivots = input.pivots.map(function (item) {
                        return new RequestPivot(item);
                    });
                }
            }
        }
        return RequestPivot;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestQuery = (function () {
        function RequestQuery(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestQuery;
    }());
    (function (RequestQuery) {
        RequestQuery.LanguageEnum = {
            Afts: 'afts',
            Lucene: 'lucene',
            Cmis: 'cmis'
        };
    })(exports.RequestQuery || (exports.RequestQuery = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestRange = (function () {
        function RequestRange(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestRange;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestScope = (function () {
        function RequestScope(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestScope;
    }());
    (function (RequestScope) {
        RequestScope.LocationsEnum = {
            Nodes: 'nodes',
            Versions: 'versions',
            DeletedNodes: 'deleted-nodes'
        };
    })(exports.RequestScope || (exports.RequestScope = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestSortDefinition = (function (_super) {
        __extends(RequestSortDefinition, _super);
        function RequestSortDefinition(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestSortDefinition;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestSpellcheck = (function () {
        function RequestSpellcheck(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestSpellcheck;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestStats = (function () {
        function RequestStats(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestStats;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestTemplates = (function (_super) {
        __extends(RequestTemplates, _super);
        function RequestTemplates(input) {
            var _this = _super.call(this) || this;
            if (input) {
                Object.assign(_this, input);
            }
            return _this;
        }
        return RequestTemplates;
    }(Array));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchRequest = (function () {
        function SearchRequest(input) {
            if (input) {
                Object.assign(this, input);
                this.query = input.query ? new exports.RequestQuery(input.query) : undefined;
                this.paging = input.paging ? new RequestPagination(input.paging) : undefined;
                this.include = input.include ? new RequestInclude(input.include) : undefined;
                this.fields = input.fields ? new RequestFields(input.fields) : undefined;
                this.sort = input.sort ? new RequestSortDefinition(input.sort) : undefined;
                this.templates = input.templates ? new RequestTemplates(input.templates) : undefined;
                this.defaults = input.defaults ? new exports.RequestDefaults(input.defaults) : undefined;
                this.localization = input.localization ? new RequestLocalization(input.localization) : undefined;
                this.filterQueries = input.filterQueries ? new RequestFilterQueries(input.filterQueries) : undefined;
                this.facetQueries = input.facetQueries ? new RequestFacetQueries(input.facetQueries) : undefined;
                this.facetFields = input.facetFields ? new RequestFacetFields(input.facetFields) : undefined;
                this.facetIntervals = input.facetIntervals ? new RequestFacetIntervals(input.facetIntervals) : undefined;
                if (input.pivots) {
                    this.pivots = input.pivots.map(function (item) {
                        return new RequestPivot(item);
                    });
                }
                if (input.stats) {
                    this.stats = input.stats.map(function (item) {
                        return new RequestStats(item);
                    });
                }
                this.spellcheck = input.spellcheck ? new RequestSpellcheck(input.spellcheck) : undefined;
                this.scope = input.scope ? new exports.RequestScope(input.scope) : undefined;
                this.limits = input.limits ? new RequestLimits(input.limits) : undefined;
                this.highlight = input.highlight ? new RequestHighlight(input.highlight) : undefined;
                if (input.ranges) {
                    this.ranges = input.ranges.map(function (item) {
                        return new RequestRange(item);
                    });
                }
            }
        }
        return SearchRequest;
    }());

    var d        = require('d')
      , callable = require('es5-ext/object/valid-callable')

      , apply = Function.prototype.apply, call = Function.prototype.call
      , create = Object.create, defineProperty = Object.defineProperty
      , defineProperties = Object.defineProperties
      , hasOwnProperty = Object.prototype.hasOwnProperty
      , descriptor = { configurable: true, enumerable: false, writable: true }

      , on, once, off, emit, methods, descriptors, base;

    on = function (type, listener) {
    	var data;

    	callable(listener);

    	if (!hasOwnProperty.call(this, '__ee__')) {
    		data = descriptor.value = create(null);
    		defineProperty(this, '__ee__', descriptor);
    		descriptor.value = null;
    	} else {
    		data = this.__ee__;
    	}
    	if (!data[type]) data[type] = listener;
    	else if (typeof data[type] === 'object') data[type].push(listener);
    	else data[type] = [data[type], listener];

    	return this;
    };

    once = function (type, listener) {
    	var once, self;

    	callable(listener);
    	self = this;
    	on.call(this, type, once = function () {
    		off.call(self, type, once);
    		apply.call(listener, this, arguments);
    	});

    	once.__eeOnceListener__ = listener;
    	return this;
    };

    off = function (type, listener) {
    	var data, listeners, candidate, i;

    	callable(listener);

    	if (!hasOwnProperty.call(this, '__ee__')) return this;
    	data = this.__ee__;
    	if (!data[type]) return this;
    	listeners = data[type];

    	if (typeof listeners === 'object') {
    		for (i = 0; (candidate = listeners[i]); ++i) {
    			if ((candidate === listener) ||
    					(candidate.__eeOnceListener__ === listener)) {
    				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
    				else listeners.splice(i, 1);
    			}
    		}
    	} else {
    		if ((listeners === listener) ||
    				(listeners.__eeOnceListener__ === listener)) {
    			delete data[type];
    		}
    	}

    	return this;
    };

    emit = function (type) {
    	var i, l, listener, listeners, args;

    	if (!hasOwnProperty.call(this, '__ee__')) return;
    	listeners = this.__ee__[type];
    	if (!listeners) return;

    	if (typeof listeners === 'object') {
    		l = arguments.length;
    		args = new Array(l - 1);
    		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

    		listeners = listeners.slice();
    		for (i = 0; (listener = listeners[i]); ++i) {
    			apply.call(listener, this, args);
    		}
    	} else {
    		switch (arguments.length) {
    		case 1:
    			call.call(listeners, this);
    			break;
    		case 2:
    			call.call(listeners, this, arguments[1]);
    			break;
    		case 3:
    			call.call(listeners, this, arguments[1], arguments[2]);
    			break;
    		default:
    			l = arguments.length;
    			args = new Array(l - 1);
    			for (i = 1; i < l; ++i) {
    				args[i - 1] = arguments[i];
    			}
    			apply.call(listeners, this, args);
    		}
    	}
    };

    methods = {
    	on: on,
    	once: once,
    	off: off,
    	emit: emit
    };

    descriptors = {
    	on: d(on),
    	once: d(once),
    	off: d(off),
    	emit: d(emit)
    };

    base = defineProperties({}, descriptors);

    module.exports = exports = function (o) {
    	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
    };
    exports.methods = methods;

    var _Emitter = /*#__PURE__*/Object.freeze({

    });

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Storage = (function () {
        function Storage() {
            if (this.supportsStorage()) {
                this._storage = window.localStorage;
            }
        }
        Storage.prototype.supportsStorage = function () {
            try {
                return 'sessionStorage' in window && window.sessionStorage !== null;
            }
            catch (e) {
                return false;
            }
        };
        Storage.prototype.setStorage = function (storage) {
            this._storage = storage;
        };
        Storage.prototype.setItem = function (key, value) {
            if (this.supportsStorage()) {
                this._storage.setItem(key, value);
            }
        };
        Storage.prototype.removeItem = function (key) {
            if (this.supportsStorage()) {
                this._storage.removeItem(key);
            }
        };
        Storage.prototype.getItem = function (key) {
            if (this.supportsStorage()) {
                return this._storage.getItem(key);
            }
        };
        return Storage;
    }());

    /**
     * Module dependencies.
     */

    const debug = require('debug')('superagent');
    const formidable = require('formidable');
    const FormData = require('form-data');
    const Response = require('./response');
    const parse = require('url').parse;
    const format = require('url').format;
    const resolve = require('url').resolve;
    let methods$1 = require('methods');
    const Stream = require('stream');
    const utils = require('../utils');
    const unzip = require('./unzip').unzip;
    const extend = require('extend');
    const mime = require('mime');
    const https = require('https');
    const http = require('http');
    const fs = require('fs');
    const qs = require('qs');
    const zlib = require('zlib');
    const util = require('util');
    const pkg = require('../../package.json');
    const RequestBase = require('../request-base');

    function request(method, url) {
      // callback
      if ('function' == typeof url) {
        return new exports.Request('GET', method).end(url);
      }

      // url first
      if (1 == arguments.length) {
        return new exports.Request('GET', method);
      }

      return new exports.Request(method, url);
    }
    exports = module.exports = request;

    /**
     * Expose `Request`.
     */

    exports.Request = Request;

    /**
     * Expose the agent function
     */

    exports.agent = require('./agent');

    /**
     * Noop.
     */

    function noop(){}
    /**
     * Expose `Response`.
     */

    exports.Response = Response;

    /**
     * Define "form" mime type.
     */

    mime.define({
      'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']
    }, true);

    /**
     * Protocol map.
     */

    exports.protocols = {
      'http:': http,
      'https:': https,
    };

    /**
     * Default serialization map.
     *
     *     superagent.serialize['application/xml'] = function(obj){
     *       return 'generated xml here';
     *     };
     *
     */

    exports.serialize = {
      'application/x-www-form-urlencoded': qs.stringify,
      'application/json': JSON.stringify,
    };

    /**
     * Default parsers.
     *
     *     superagent.parse['application/xml'] = function(res, fn){
     *       fn(null, res);
     *     };
     *
     */

    exports.parse = require('./parsers');

    /**
     * Initialize internal header tracking properties on a request instance.
     *
     * @param {Object} req the instance
     * @api private
     */
    function _initHeaders(req) {
      const ua = `node-superagent/${pkg.version}`;
      req._header = { // coerces header names to lowercase
        'user-agent': ua
      };
      req.header = { // preserves header name case
        'User-Agent': ua
      };
    }

    /**
     * Initialize a new `Request` with the given `method` and `url`.
     *
     * @param {String} method
     * @param {String|Object} url
     * @api public
     */

    function Request(method, url) {
      Stream.call(this);
      if ('string' != typeof url) url = format(url);
      this._agent = false;
      this._formData = null;
      this.method = method;
      this.url = url;
      _initHeaders(this);
      this.writable = true;
      this._redirects = 0;
      this.redirects(method === 'HEAD' ? 0 : 5);
      this.cookies = '';
      this.qs = {};
      this._query = [];
      this.qsRaw = this._query; // Unused, for backwards compatibility only
      this._redirectList = [];
      this._streamRequest = false;
      this.once('end', this.clearTimeout.bind(this));
    }

    /**
     * Inherit from `Stream` (which inherits from `EventEmitter`).
     * Mixin `RequestBase`.
     */
    util.inherits(Request, Stream);
    RequestBase(Request.prototype);

    /**
     * Queue the given `file` as an attachment to the specified `field`,
     * with optional `options` (or filename).
     *
     * ``` js
     * request.post('http://localhost/upload')
     *   .attach('field', Buffer.from('<b>Hello world</b>'), 'hello.html')
     *   .end(callback);
     * ```
     *
     * A filename may also be used:
     *
     * ``` js
     * request.post('http://localhost/upload')
     *   .attach('files', 'image.jpg')
     *   .end(callback);
     * ```
     *
     * @param {String} field
     * @param {String|fs.ReadStream|Buffer} file
     * @param {String|Object} options
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.attach = function(field, file, options){
      if (file) {
        if (this._data) {
          throw Error("superagent can't mix .send() and .attach()");
        }

        let o = options || {};
        if ('string' == typeof options) {
          o = { filename: options };
        }

        if ('string' == typeof file) {
          if (!o.filename) o.filename = file;
          debug('creating `fs.ReadStream` instance for file: %s', file);
          file = fs.createReadStream(file);
        } else if (!o.filename && file.path) {
          o.filename = file.path;
        }

        this._getFormData().append(field, file, o);
      }
      return this;
    };

    Request.prototype._getFormData = function() {
      if (!this._formData) {
        this._formData = new FormData();
        this._formData.on('error', err => {
          this.emit('error', err);
          this.abort();
        });
      }
      return this._formData;
    };

    /**
     * Gets/sets the `Agent` to use for this HTTP request. The default (if this
     * function is not called) is to opt out of connection pooling (`agent: false`).
     *
     * @param {http.Agent} agent
     * @return {http.Agent}
     * @api public
     */

    Request.prototype.agent = function(agent){
      if (!arguments.length) return this._agent;
      this._agent = agent;
      return this;
    };

    /**
     * Set _Content-Type_ response header passed through `mime.lookup()`.
     *
     * Examples:
     *
     *      request.post('/')
     *        .type('xml')
     *        .send(xmlstring)
     *        .end(callback);
     *
     *      request.post('/')
     *        .type('json')
     *        .send(jsonstring)
     *        .end(callback);
     *
     *      request.post('/')
     *        .type('application/json')
     *        .send(jsonstring)
     *        .end(callback);
     *
     * @param {String} type
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.type = function(type) {
      return this.set(
        'Content-Type',
        ~type.indexOf('/') ? type : mime.lookup(type)
      );
    };

    /**
     * Set _Accept_ response header passed through `mime.lookup()`.
     *
     * Examples:
     *
     *      superagent.types.json = 'application/json';
     *
     *      request.get('/agent')
     *        .accept('json')
     *        .end(callback);
     *
     *      request.get('/agent')
     *        .accept('application/json')
     *        .end(callback);
     *
     * @param {String} accept
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.accept = function(type){
      return this.set('Accept', ~type.indexOf('/')
        ? type
        : mime.lookup(type));
    };

    /**
     * Add query-string `val`.
     *
     * Examples:
     *
     *   request.get('/shoes')
     *     .query('size=10')
     *     .query({ color: 'blue' })
     *
     * @param {Object|String} val
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.query = function(val){
      if ('string' == typeof val) {
        this._query.push(val);
      } else {
        extend(this.qs, val);
      }
      return this;
    };

    /**
     * Write raw `data` / `encoding` to the socket.
     *
     * @param {Buffer|String} data
     * @param {String} encoding
     * @return {Boolean}
     * @api public
     */

    Request.prototype.write = function(data, encoding){
      const req = this.request();
      if (!this._streamRequest) {
        this._streamRequest = true;
      }
      return req.write(data, encoding);
    };

    /**
     * Pipe the request body to `stream`.
     *
     * @param {Stream} stream
     * @param {Object} options
     * @return {Stream}
     * @api public
     */

    Request.prototype.pipe = function(stream, options){
      this.piped = true; // HACK...
      this.buffer(false);
      this.end();
      return this._pipeContinue(stream, options);
    };

    Request.prototype._pipeContinue = function(stream, options){
      this.req.once('response', res => {
        // redirect
        const redirect = isRedirect(res.statusCode);
        if (redirect && this._redirects++ != this._maxRedirects) {
          return this._redirect(res)._pipeContinue(stream, options);
        }

        this.res = res;
        this._emitResponse();
        if (this._aborted) return;

        if (this._shouldUnzip(res)) {
          const unzipObj = zlib.createUnzip();
          unzipObj.on('error', err => {
            if (err && err.code === 'Z_BUF_ERROR') { // unexpected end of file is ignored by browsers and curl
              stream.emit('end');
              return;
            }
            stream.emit('error', err);
          });
          res.pipe(unzipObj).pipe(stream, options);
        } else {
          res.pipe(stream, options);
        }
        res.once('end', () => {
          this.emit('end');
        });
      });
      return stream;
    };

    /**
     * Enable / disable buffering.
     *
     * @return {Boolean} [val]
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.buffer = function(val){
      this._buffer = (false !== val);
      return this;
    };

    /**
     * Redirect to `url
     *
     * @param {IncomingMessage} res
     * @return {Request} for chaining
     * @api private
     */

    Request.prototype._redirect = function(res){
      let url = res.headers.location;
      if (!url) {
        return this.callback(new Error('No location header for redirect'), res);
      }

      debug('redirect %s -> %s', this.url, url);

      // location
      url = resolve(this.url, url);

      // ensure the response is being consumed
      // this is required for Node v0.10+
      res.resume();

      let headers = this.req._headers;

      const changesOrigin = parse(url).host !== parse(this.url).host;

      // implementation of 302 following defacto standard
      if (res.statusCode == 301 || res.statusCode == 302){
        // strip Content-* related fields
        // in case of POST etc
        headers = utils.cleanHeader(this.req._headers, changesOrigin);

        // force GET
        this.method = 'HEAD' == this.method
          ? 'HEAD'
          : 'GET';

        // clear data
        this._data = null;
      }
      // 303 is always GET
      if (res.statusCode == 303) {
        // strip Content-* related fields
        // in case of POST etc
        headers = utils.cleanHeader(this.req._headers, changesOrigin);

        // force method
        this.method = 'GET';

        // clear data
        this._data = null;
      }
      // 307 preserves method
      // 308 preserves method
      delete headers.host;

      delete this.req;
      delete this._formData;

      // remove all add header except User-Agent
      _initHeaders(this);

      // redirect
      this._endCalled = false;
      this.url = url;
      this.qs = {};
      this._query.length = 0;
      this.set(headers);
      this.emit('redirect', res);
      this._redirectList.push(this.url);
      this.end(this._callback);
      return this;
    };

    /**
     * Set Authorization field value with `user` and `pass`.
     *
     * Examples:
     *
     *   .auth('tobi', 'learnboost')
     *   .auth('tobi:learnboost')
     *   .auth('tobi')
     *   .auth(accessToken, { type: 'bearer' })
     *
     * @param {String} user
     * @param {String} [pass]
     * @param {Object} [options] options with authorization type 'basic' or 'bearer' ('basic' is default)
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.auth = function(user, pass, options){
      if (1 === arguments.length) pass = '';
      if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options
        options = pass;
        pass = '';
      }
      if (!options) {
        options = { type: 'basic' };
      }

      var encoder = function(string) {
        return new Buffer(string).toString('base64');
      };

      return this._auth(user, pass, options, encoder);
    };

    /**
     * Set the certificate authority option for https request.
     *
     * @param {Buffer | Array} cert
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.ca = function(cert){
      this._ca = cert;
      return this;
    };

    /**
     * Set the client certificate key option for https request.
     *
     * @param {Buffer | String} cert
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.key = function(cert){
      this._key = cert;
      return this;
    };

    /**
     * Set the key, certificate, and CA certs of the client in PFX or PKCS12 format.
     *
     * @param {Buffer | String} cert
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.pfx = function(cert) {
      if (typeof cert === 'object' && !Buffer.isBuffer(cert)) {
        this._pfx = cert.pfx;
        this._passphrase = cert.passphrase;
      } else {
        this._pfx = cert;
      }
      return this;
    };

    /**
     * Set the client certificate option for https request.
     *
     * @param {Buffer | String} cert
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype.cert = function(cert){
      this._cert = cert;
      return this;
    };

    /**
     * Return an http[s] request.
     *
     * @return {OutgoingMessage}
     * @api private
     */

    Request.prototype.request = function(){
      if (this.req) return this.req;

      const options = {};

      try {
        const query = qs.stringify(this.qs, {
          indices: false,
          strictNullHandling: true,
        });
        if (query) {
          this.qs = {};
          this._query.push(query);
        }
        this._finalizeQueryString();
      } catch (e) {
        return this.emit('error', e);
      }

      let url = this.url;
      const retries = this._retries;

      // default to http://
      if (0 != url.indexOf('http')) url = `http://${url}`;
      url = parse(url);

      // support unix sockets
      if (/^https?\+unix:/.test(url.protocol) === true) {
        // get the protocol
        url.protocol = `${url.protocol.split('+')[0]}:`;

        // get the socket, path
        const unixParts = url.path.match(/^([^/]+)(.+)$/);
        options.socketPath = unixParts[1].replace(/%2F/g, '/');
        url.path = unixParts[2];
      }

      // options
      options.method = this.method;
      options.port = url.port;
      options.path = url.path;
      options.host = url.hostname;
      options.ca = this._ca;
      options.key = this._key;
      options.pfx = this._pfx;
      options.cert = this._cert;
      options.passphrase = this._passphrase;
      options.agent = this._agent;

      // initiate request
      const mod = exports.protocols[url.protocol];

      // request
      const req = (this.req = mod.request(options));

      // set tcp no delay
      req.setNoDelay(true);

      if ('HEAD' != options.method) {
        req.setHeader('Accept-Encoding', 'gzip, deflate');
      }
      this.protocol = url.protocol;
      this.host = url.host;

      // expose events
      req.once('drain', () => { this.emit('drain'); });

      req.once('error', err => {
        // flag abortion here for out timeouts
        // because node will emit a faux-error "socket hang up"
        // when request is aborted before a connection is made
        if (this._aborted) return;
        // if not the same, we are in the **old** (cancelled) request,
        // so need to continue (same as for above)
        if (this._retries !== retries) return;
        // if we've received a response then we don't want to let
        // an error in the request blow up the response
        if (this.response) return;
        this.callback(err);
      });

      // auth
      if (url.auth) {
        const auth = url.auth.split(':');
        this.auth(auth[0], auth[1]);
      }
      if (this.username && this.password) {
        this.auth(this.username, this.password);
      }

      // add cookies
      if (this.cookies) req.setHeader('Cookie', this.cookies);

      for (const key in this.header) {
        if (this.header.hasOwnProperty(key))
          req.setHeader(key, this.header[key]);
      }

      return req;
    };

    /**
     * Invoke the callback with `err` and `res`
     * and handle arity check.
     *
     * @param {Error} err
     * @param {Response} res
     * @api private
     */

    Request.prototype.callback = function(err, res){
      if (this._shouldRetry(err, res)) {
        return this._retry();
      }

      // Avoid the error which is emitted from 'socket hang up' to cause the fn undefined error on JS runtime.
      const fn = this._callback || noop;
      this.clearTimeout();
      if (this.called) return console.warn('superagent: double callback bug');
      this.called = true;

      if (!err) {
        try {
          if (!this._isResponseOK(res)) {
            let msg = 'Unsuccessful HTTP response';
            if (res) {
              msg = http.STATUS_CODES[res.status] || msg;
            }
            err = new Error(msg);
            err.status = res ? res.status : undefined;
          }
        } catch (new_err) {
          err = new_err;
        }
      }
      // It's important that the callback is called outside try/catch
      // to avoid double callback
      if (!err) {
        return fn(null, res);
      }

      err.response = res;
      if (this._maxRetries) err.retries = this._retries - 1;

      // only emit error event if there is a listener
      // otherwise we assume the callback to `.end()` will get the error
      if (err && this.listeners('error').length > 0) {
        this.emit('error', err);
      }

      fn(err, res);
    };

    /**
     * Check if `obj` is a host object,
     *
     * @param {Object} obj
     * @return {Boolean}
     * @api private
     */
    Request.prototype._isHost = function _isHost(obj) {
      return Buffer.isBuffer(obj) || obj instanceof Stream || obj instanceof FormData;
    };

    /**
     * Initiate request, invoking callback `fn(err, res)`
     * with an instanceof `Response`.
     *
     * @param {Function} fn
     * @return {Request} for chaining
     * @api public
     */

    Request.prototype._emitResponse = function(body, files) {
      const response = new Response(this);
      this.response = response;
      response.redirects = this._redirectList;
      if (undefined !== body) {
        response.body = body;
      }
      response.files = files;
      this.emit('response', response);
      return response;
    };

    Request.prototype.end = function(fn) {
      this.request();
      debug('%s %s', this.method, this.url);

      if (this._endCalled) {
        console.warn(
          'Warning: .end() was called twice. This is not supported in superagent'
        );
      }
      this._endCalled = true;

      // store callback
      this._callback = fn || noop;

      return this._end();
    };

    Request.prototype._end = function() {
      let data = this._data;
      const req = this.req;
      let buffer = this._buffer;
      const method = this.method;

      this._setTimeouts();

      // body
      if ('HEAD' != method && !req._headerSent) {
        // serialize stuff
        if ('string' != typeof data) {
          let contentType = req.getHeader('Content-Type');
          // Parse out just the content type from the header (ignore the charset)
          if (contentType) contentType = contentType.split(';')[0];
          let serialize = exports.serialize[contentType];
          if (!serialize && isJSON(contentType)) {
            serialize = exports.serialize['application/json'];
          }
          if (serialize) data = serialize(data);
        }

        // content-length
        if (data && !req.getHeader('Content-Length')) {
          req.setHeader('Content-Length', Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data));
        }
      }

      // response
      req.once('response', res => {
        debug('%s %s -> %s', this.method, this.url, res.statusCode);

        if (this._responseTimeoutTimer) {
          clearTimeout(this._responseTimeoutTimer);
        }

        if (this.piped) {
          return;
        }

        const max = this._maxRedirects;
        const mime = utils.type(res.headers['content-type'] || '') || 'text/plain';
        const type = mime.split('/')[0];
        const multipart = 'multipart' == type;
        const redirect = isRedirect(res.statusCode);
        let parser = this._parser;
        const responseType = this._responseType;

        this.res = res;

        // redirect
        if (redirect && this._redirects++ != max) {
          return this._redirect(res);
        }

        if ('HEAD' == this.method) {
          this.emit('end');
          this.callback(null, this._emitResponse());
          return;
        }

        // zlib support
        if (this._shouldUnzip(res)) {
          unzip(req, res);
        }

        if (!parser) {
          if (responseType) {
            parser = exports.parse.image; // It's actually a generic Buffer
            buffer = true;
          } else if (multipart) {
            const form = new formidable.IncomingForm();
            parser = form.parse.bind(form);
            buffer = true;
          } else if (isImageOrVideo(mime)) {
            parser = exports.parse.image;
            buffer = true; // For backwards-compatibility buffering default is ad-hoc MIME-dependent
          } else if (exports.parse[mime]) {
            parser = exports.parse[mime];
          } else if ('text' == type) {
            parser = exports.parse.text;
            buffer = (buffer !== false);

            // everyone wants their own white-labeled json
          } else if (isJSON(mime)) {
            parser = exports.parse['application/json'];
            buffer = (buffer !== false);
          } else if (buffer) {
            parser = exports.parse.text;
          }
        }

        // by default only buffer text/*, json and messed up thing from hell
        if ((undefined === buffer && isText(mime)) || isJSON(mime)) {
          buffer = true;
        }

        let parserHandlesEnd = false;
        if (buffer) {
          // Protectiona against zip bombs and other nuisance
          let responseBytesLeft = this._maxResponseSize || 200000000;
          res.on('data', buf => {
            responseBytesLeft -= buf.byteLength || buf.length;
            if (responseBytesLeft < 0) {
              // This will propagate through error event
              const err = Error("Maximum response size reached");
              err.code = "ETOOLARGE";
              // Parsers aren't required to observe error event,
              // so would incorrectly report success
              parserHandlesEnd = false;
              // Will emit error event
              res.destroy(err);
            }
          });
        }

        if (parser) {
          try {
            // Unbuffered parsers are supposed to emit response early,
            // which is weird BTW, because response.body won't be there.
            parserHandlesEnd = buffer;

            parser(res, (err, obj, files) => {
              if (this.timedout) {
                // Timeout has already handled all callbacks
                return;
              }

              // Intentional (non-timeout) abort is supposed to preserve partial response,
              // even if it doesn't parse.
              if (err && !this._aborted) {
                return this.callback(err);
              }

              if (parserHandlesEnd) {
                this.emit('end');
                this.callback(null, this._emitResponse(obj, files));
              }
            });
          } catch (err) {
            this.callback(err);
            return;
          }
        }

        this.res = res;

        // unbuffered
        if (!buffer) {
          debug('unbuffered %s %s', this.method, this.url);
          this.callback(null, this._emitResponse());
          if (multipart) return; // allow multipart to handle end event
          res.once('end', () => {
            debug('end %s %s', this.method, this.url);
            this.emit('end');
          });
          return;
        }

        // terminating events
        res.once('error', err => {
          parserHandlesEnd = false;
          this.callback(err, null);
        });
        if (!parserHandlesEnd)
          res.once('end', () => {
            debug('end %s %s', this.method, this.url);
            // TODO: unless buffering emit earlier to stream
            this.emit('end');
            this.callback(null, this._emitResponse());
          });
      });

      this.emit('request', this);

      // if a FormData instance got created, then we send that as the request body
      const formData = this._formData;
      if (formData) {

        // set headers
        const headers = formData.getHeaders();
        for (const i in headers) {
          debug('setting FormData header: "%s: %s"', i, headers[i]);
          req.setHeader(i, headers[i]);
        }

        // attempt to get "Content-Length" header
        formData.getLength((err, length) => {
          // TODO: Add chunked encoding when no length (if err)

          debug('got FormData Content-Length: %s', length);
          if ('number' == typeof length) {
            req.setHeader('Content-Length', length);
          }

          const getProgressMonitor = () => {
            const lengthComputable = true;
            const total = req.getHeader('Content-Length');
            let loaded = 0;

            const progress = new Stream.Transform();
            progress._transform = (chunk, encoding, cb) => {
              loaded += chunk.length;
              this.emit('progress', {
                direction: 'upload',
                lengthComputable,
                loaded,
                total,
              });
              cb(null, chunk);
            };
            return progress;
          };
          formData.pipe(getProgressMonitor()).pipe(req);
        });
      } else {
        req.end(data);
      }

      return this;
    };

    /**
     * Check whether response has a non-0-sized gzip-encoded body
     */
    Request.prototype._shouldUnzip = res => {
      if (res.statusCode === 204 || res.statusCode === 304) {
        // These aren't supposed to have any body
        return false;
      }

      // header content is a string, and distinction between 0 and no information is crucial
      if ('0' === res.headers['content-length']) {
        // We know that the body is empty (unfortunately, this check does not cover chunked encoding)
        return false;
      }

      // console.log(res);
      return /^\s*(?:deflate|gzip)\s*$/.test(res.headers['content-encoding']);
    };

    // generate HTTP verb methods
    if (methods$1.indexOf('del') == -1) {
      // create a copy so we don't cause conflicts with
      // other packages using the methods package and
      // npm 3.x
      methods$1 = methods$1.slice(0);
      methods$1.push('del');
    }
    methods$1.forEach(method => {
      const name = method;
      method = 'del' == method ? 'delete' : method;

      method = method.toUpperCase();
      request[name] = (url, data, fn) => {
        const req = request(method, url);
        if ('function' == typeof data) (fn = data), (data = null);
        if (data) {
          if (method === 'GET' || method === 'HEAD') {
            req.query(data);
          } else {
            req.send(data);
          }
        }
        fn && req.end(fn);
        return req;
      };
    });

    /**
     * Check if `mime` is text and should be buffered.
     *
     * @param {String} mime
     * @return {Boolean}
     * @api public
     */

    function isText(mime) {
      const parts = mime.split('/');
      const type = parts[0];
      const subtype = parts[1];

      return 'text' == type || 'x-www-form-urlencoded' == subtype;
    }

    function isImageOrVideo(mime) {
      const type = mime.split('/')[0];

      return 'image' == type || 'video' == type;
    }

    /**
     * Check if `mime` is json or has +json structured syntax suffix.
     *
     * @param {String} mime
     * @return {Boolean}
     * @api private
     */

    function isJSON(mime) {
      // should match /json or +json
      // but not /json-seq
      return /[\/+]json($|[^-\w])/.test(mime);
    }

    /**
     * Check if we should follow the redirect `code`.
     *
     * @param {Number} code
     * @return {Boolean}
     * @api private
     */

    function isRedirect(code) {
      return ~[301, 302, 303, 305, 307, 308].indexOf(code);
    }

    var superagent_ = /*#__PURE__*/Object.freeze({

    });

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Authentication = (function () {
        function Authentication(input) {
            Object.assign(this, input);
        }
        return Authentication;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Emitter = _Emitter;
    var superagent = superagent_;
    var process = {};
    var AlfrescoApiClient = (function () {
        function AlfrescoApiClient(host) {
            this.basePath = '';
            this.authentications = new Authentication({
                'basicAuth': {}, type: 'basic'
            });
            this.defaultHeaders = {};
            this.timeout = undefined;
            this.on = Emitter.on;
            this.off = Emitter.off;
            this.once = Emitter.once;
            this.emit = Emitter.emit;
            this.storage = new Storage();
            this.host = host;
            this.on = (new Emitter()).on;
            this.off = (new Emitter()).off;
            this.once = (new Emitter()).once;
            this.emit = (new Emitter()).emit;
            Emitter.call(this);
        }
        AlfrescoApiClient.prototype.paramToString = function (param) {
            if (param === undefined || param === null) {
                return '';
            }
            if (param instanceof Date) {
                return param.toJSON();
            }
            return param.toString();
        };
        AlfrescoApiClient.prototype.buildUrl = function (path, pathParams) {
            if (!path.match(/^\//)) {
                path = '/' + path;
            }
            var url = this.basePath + path;
            var _this = this;
            url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
                var value;
                if (pathParams.hasOwnProperty(key)) {
                    value = _this.paramToString(pathParams[key]);
                }
                else {
                    value = fullMatch;
                }
                return encodeURIComponent(value);
            });
            return url;
        };
        AlfrescoApiClient.prototype.isJsonMime = function (contentType) {
            return Boolean(contentType !== null && contentType.match(/^application\/json(;.*)?$/i));
        };
        AlfrescoApiClient.prototype.jsonPreferredMime = function (contentTypes) {
            for (var i = 0; i < contentTypes.length; i++) {
                if (this.isJsonMime(contentTypes[i])) {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        };
        AlfrescoApiClient.prototype.isFileParam = function (param) {
            if (typeof Buffer === 'function' && (param instanceof Buffer || param.path)) {
                return true;
            }
            if (typeof Blob === 'function' && param instanceof Blob) {
                return true;
            }
            if (typeof File === 'function' && param instanceof File) {
                return true;
            }
            if (typeof File === 'object' && param instanceof File) {
                return true;
            }
            return false;
        };
        AlfrescoApiClient.prototype.normalizeParams = function (params) {
            var newParams = {};
            for (var key in params) {
                if (params.hasOwnProperty(key) && params[key] !== undefined && params[key] !== null) {
                    var value = params[key];
                    if (this.isFileParam(value) || Array.isArray(value)) {
                        newParams[key] = value;
                    }
                    else {
                        newParams[key] = this.paramToString(value);
                    }
                }
            }
            return newParams;
        };
        AlfrescoApiClient.prototype.buildCollectionParam = function (param, collectionFormat) {
            if (!param) {
                return null;
            }
            switch (collectionFormat) {
                case 'csv':
                    return param.map(this.paramToString).join(',');
                case 'ssv':
                    return param.map(this.paramToString).join(' ');
                case 'tsv':
                    return param.map(this.paramToString).join('\t');
                case 'pipes':
                    return param.map(this.paramToString).join('|');
                case 'multi':
                    return param.map(this.paramToString);
                default:
                    throw new Error('Unknown collection format: ' + collectionFormat);
            }
        };
        AlfrescoApiClient.prototype.isWithCredentials = function () {
            if (this.config) {
                return this.config.withCredentials;
            }
            else {
                return false;
            }
        };
        AlfrescoApiClient.prototype.applyAuthToRequest = function (request) {
            if (this.authentications) {
                switch (this.authentications.type) {
                    case 'basic':
                        var basicAuth = this.authentications.basicAuth;
                        if (basicAuth.username || basicAuth.password) {
                            request.auth(basicAuth.username ? encodeURI(basicAuth.username) : '', basicAuth.password ? encodeURI(basicAuth.password) : '');
                        }
                        break;
                    case 'activiti':
                        if (this.authentications.basicAuth.ticket) {
                            request.set({ 'Authorization': this.authentications.basicAuth.ticket });
                        }
                        break;
                    case 'oauth2':
                        var oauth2 = this.authentications.oauth2;
                        if (oauth2.accessToken) {
                            request.set({ 'Authorization': 'Bearer ' + oauth2.accessToken });
                        }
                        break;
                    default:
                        throw new Error('Unknown authentication type: ' + this.authentications.type);
                }
            }
        };
        AlfrescoApiClient.prototype.deserialize = function (response, returnType) {
            if (response === null) {
                return null;
            }
            var data = response.body;
            if (data === null) {
                data = response.text;
            }
            if (returnType) {
                if (Array.isArray(data)) {
                    data = data.map(function (element) {
                        return new returnType(element);
                    });
                }
                else {
                    data = new returnType(data);
                }
            }
            return data;
        };
        AlfrescoApiClient.prototype.basicAuth = function (username, password) {
            var str = username + ':' + password;
            var base64;
            if (typeof Buffer === 'function') {
                base64 = Buffer.from(str.toString(), 'binary').toString('base64');
            }
            else {
                base64 = btoa(str);
            }
            return 'Basic ' + base64;
        };
        AlfrescoApiClient.prototype.callApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType) {
            var url;
            if (contextRoot) {
                var basePath = this.host + "/" + contextRoot;
                url = this.buildUrlCustomBasePath(basePath, path, pathParams);
            }
            else {
                url = this.buildUrl(path, pathParams);
            }
            return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url);
        };
        AlfrescoApiClient.prototype.callCustomApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType) {
            var url = this.buildUrlCustomBasePath(path, '', pathParams);
            return this.callHostApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url);
        };
        AlfrescoApiClient.prototype.callHostApi = function (path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, returnType, contextRoot, responseType, url) {
            var _this_1 = this;
            var eventEmitter = {};
            Emitter(eventEmitter);
            var request = this.buildRequest(httpMethod, url, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, responseType, eventEmitter, returnType);
            if (returnType === 'Binary') {
                request = request.buffer(true).parse(superagent.parse['application/octet-stream']);
            }
            var promise = new Promise(function (resolve, reject) {
                request.end(function (error, response) {
                    if (error) {
                        _this_1.emit('error', error);
                        eventEmitter.emit('error', error);
                        if (error.status === 401) {
                            _this_1.emit('unauthorized');
                            eventEmitter.emit('unauthorized');
                        }
                        if (response && response.text) {
                            error = error || {};
                            reject(Object.assign(error, { message: response.text }));
                        }
                        else {
                            reject({ error: error });
                        }
                    }
                    else {
                        if (_this_1.isBpmRequest()) {
                            if (response.header && response.header.hasOwnProperty('set-cookie')) {
                                _this_1.authentications.cookie = response.header['set-cookie'];
                            }
                        }
                        var data = {};
                        if (response.type === 'text/html') {
                            data = _this_1.deserialize(response);
                        }
                        else {
                            data = _this_1.deserialize(response, returnType);
                        }
                        eventEmitter.emit('success', data);
                        resolve(data);
                    }
                }).on('abort', function () {
                    eventEmitter.emit('abort');
                });
            });
            promise.on = function () {
                eventEmitter.on.apply(eventEmitter, arguments);
                return this;
            };
            promise.once = function () {
                eventEmitter.once.apply(eventEmitter, arguments);
                return this;
            };
            promise.emit = function () {
                eventEmitter.emit.apply(eventEmitter, arguments);
                return this;
            };
            promise.off = function () {
                eventEmitter.off.apply(eventEmitter, arguments);
                return this;
            };
            promise.abort = function () {
                request.abort();
                return this;
            };
            return promise;
        };
        AlfrescoApiClient.prototype.isBpmRequest = function () {
            return this.className === 'ProcessAuth' || this.className === 'ProcessClient';
        };
        AlfrescoApiClient.prototype.isCsrfEnabled = function () {
            if (this.config) {
                return !this.config.disableCsrf;
            }
            else {
                return true;
            }
        };
        AlfrescoApiClient.prototype.setCsrfToken = function (request) {
            var token = this.createCSRFToken();
            request.set('X-CSRF-TOKEN', token);
            if (this.isNodeEnv()) {
                request.set('Cookie', 'CSRF-TOKEN=' + token + ';path=/');
            }
            try {
                document.cookie = 'CSRF-TOKEN=' + token + ';path=/';
            }
            catch (err) {
            }
        };
        AlfrescoApiClient.prototype.isNodeEnv = function () {
            return (typeof process !== 'undefined') && (process.release && process.release.name === 'node');
        };
        AlfrescoApiClient.prototype.createCSRFToken = function (a) {
            return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e16] + (1e16).toString()).replace(/[01]/g, this.createCSRFToken);
        };
        AlfrescoApiClient.prototype.progress = function (event, eventEmitter) {
            if (event.lengthComputable) {
                var percent = Math.round(event.loaded / event.total * 100);
                eventEmitter.emit('progress', {
                    total: event.total,
                    loaded: event.loaded,
                    percent: percent
                });
            }
        };
        AlfrescoApiClient.prototype.buildUrlCustomBasePath = function (basePath, path, pathParams) {
            if (path && path !== '' && !path.match(/^\//)) {
                path = '/' + path;
            }
            var url = basePath + path;
            var _this = this;
            url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
                var value;
                if (pathParams.hasOwnProperty(key)) {
                    value = _this.paramToString(pathParams[key]);
                }
                else {
                    value = fullMatch;
                }
                return encodeURIComponent(value);
            });
            return url;
        };
        AlfrescoApiClient.prototype.buildRequest = function (httpMethod, url, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, responseType, eventEmitter, returnType) {
            var _this_1 = this;
            var request = superagent(httpMethod, url);
            this.applyAuthToRequest(request);
            request.query(this.normalizeParams(queryParams));
            request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
            if (this.isBpmRequest() && this.isCsrfEnabled()) {
                this.setCsrfToken(request);
            }
            if (this.isWithCredentials()) {
                request.withCredentials();
            }
            if (this.isBpmRequest()) {
                request._withCredentials = true;
                if (this.authentications.cookie) {
                    if (this.isNodeEnv()) {
                        request.set('Cookie', this.authentications.cookie);
                    }
                }
            }
            request.timeout(this.timeout);
            var contentType = this.jsonPreferredMime(contentTypes);
            if (contentType && contentType !== 'multipart/form-data') {
                request.type(contentType);
            }
            else if (!request.header['Content-Type'] && contentType !== 'multipart/form-data') {
                request.type('application/json');
            }
            if (contentType === 'application/x-www-form-urlencoded') {
                request.send(this.normalizeParams(formParams)).on('progress', function (event) {
                    _this_1.progress(event, eventEmitter);
                });
            }
            else if (contentType === 'multipart/form-data') {
                var _formParams = this.normalizeParams(formParams);
                for (var key in _formParams) {
                    if (_formParams.hasOwnProperty(key)) {
                        if (this.isFileParam(_formParams[key])) {
                            request.attach(key, _formParams[key]).on('progress', function (event) {
                                _this_1.progress(event, eventEmitter);
                            });
                        }
                        else {
                            request.field(key, _formParams[key]).on('progress', function (event) {
                                _this_1.progress(event, eventEmitter);
                            });
                        }
                    }
                }
            }
            else if (bodyParam) {
                request.send(bodyParam).on('progress', function (event) {
                    _this_1.progress(event, eventEmitter);
                });
            }
            var accept = this.jsonPreferredMime(accepts);
            if (accept) {
                request.accept(accept);
            }
            if (returnType === 'Blob' || responseType === 'blob' || responseType === 'Blob') {
                request.responseType('blob');
            }
            else if (returnType === 'String') {
                request.responseType('string');
            }
            return request;
        };
        AlfrescoApiClient.prototype.getAlfTicket = function (ticket) {
            var alfTicketFragment = '';
            if (ticket) {
                alfTicketFragment = '&alf_ticket=' + ticket;
            }
            else if (this.config.ticketEcm) {
                alfTicketFragment = '&alf_ticket=' + this.config.ticketEcm;
            }
            return alfTicketFragment;
        };
        return AlfrescoApiClient;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentClient = (function (_super) {
        __extends(ContentClient, _super);
        function ContentClient(config, servicePath) {
            var _this = _super.call(this) || this;
            _this.className = 'ContentClient';
            _this.setConfig(config, servicePath);
            return _this;
        }
        ContentClient.prototype.setConfig = function (config, servicePath) {
            this.config = config;
            this.servicePath = servicePath;
            this.changeHost();
        };
        ContentClient.prototype.changeHost = function () {
            this.host = this.config.hostEcm;
            this.basePath = this.config.hostEcm + "/" + this.config.contextRoot + this.servicePath;
        };
        ContentClient.prototype.setAuthentications = function (authentications) {
            this.authentications = authentications;
        };
        return ContentClient;
    }(AlfrescoApiClient));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessClient = (function (_super) {
        __extends(ProcessClient, _super);
        function ProcessClient(config) {
            var _this = _super.call(this) || this;
            _this.className = 'ProcessClient';
            _this.setConfig(config);
            return _this;
        }
        ProcessClient.prototype.setConfig = function (config) {
            this.config = config;
            this.changeHost();
        };
        ProcessClient.prototype.changeHost = function () {
            this.host = this.config.hostBpm;
            this.basePath = this.config.hostBpm + "/" + this.config.contextRootBpm;
        };
        ProcessClient.prototype.setAuthentications = function (authentications) {
            this.authentications = authentications;
        };
        return ProcessClient;
    }(AlfrescoApiClient));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChangesApi = (function () {
        function ChangesApi() {
        }
        ChangesApi.prototype.init = function (alfrescoApi) {
            this.nodesApi = new NodesApi(alfrescoApi);
            this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
            this.renditionsApi = new RenditionsApi(alfrescoApi);
            this.sitesApi = new SitesApi(alfrescoApi);
            this.trashcanApi = new TrashcanApi(alfrescoApi);
        };
        ChangesApi.prototype.addAssoc = function (sourceId, assocTargetBody) {
            return this.nodesApi.createAssociation(sourceId, assocTargetBody);
        };
        ChangesApi.prototype.addNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.createNode(nodeId, nodeBody, opts);
        };
        ChangesApi.prototype.addSecondaryChildAssoc = function (parentId, assocChildBody, opts) {
            return this.nodesApi.createSecondaryChildAssociation(parentId, assocChildBody, opts);
        };
        ChangesApi.prototype.addSharedLink = function (sharedLinkBody, opts) {
            return this.sharedlinksApi.createSharedLink(sharedLinkBody, opts);
        };
        ChangesApi.prototype.copyNode = function (nodeId, copyBody, opts) {
            return this.nodesApi.copyNode(nodeId, copyBody, opts);
        };
        ChangesApi.prototype.createRendition = function (nodeId, renditionBody) {
            return this.renditionsApi.createRendition(nodeId, renditionBody);
        };
        ChangesApi.prototype.createSite = function (siteBody, opts) {
            return this.sitesApi.createSite(siteBody, opts);
        };
        ChangesApi.prototype.updateSite = function (siteId, siteBody, opts) {
            return this.sitesApi.updateSite(siteId, siteBody, opts);
        };
        ChangesApi.prototype.deleteNode = function (nodeId, opts) {
            return this.nodesApi.deleteNode(nodeId, opts);
        };
        ChangesApi.prototype.deleteSharedLink = function (sharedId) {
            return this.sharedlinksApi.deleteSharedLink(sharedId);
        };
        ChangesApi.prototype.deleteSite = function (siteId, opts) {
            return this.sitesApi.deleteSite(siteId, opts);
        };
        ChangesApi.prototype.emailSharedLink = function (sharedId, emailSharedLinkBody) {
            return this.sharedlinksApi.emailSharedLink(sharedId, emailSharedLinkBody);
        };
        ChangesApi.prototype.findSharedLinks = function (opts) {
            return this.sharedlinksApi.listSharedLinks(opts);
        };
        ChangesApi.prototype.getDeletedNode = function (nodeId, opts) {
            return this.trashcanApi.getDeletedNode(nodeId, opts);
        };
        ChangesApi.prototype.getDeletedNodes = function (opts) {
            return this.trashcanApi.listDeletedNodes(opts);
        };
        ChangesApi.prototype.getFileContent = function (nodeId, opts) {
            return this.nodesApi.getNodeContent(nodeId, opts);
        };
        ChangesApi.prototype.getNode = function (nodeId, opts) {
            return this.nodesApi.getNode(nodeId, opts);
        };
        ChangesApi.prototype.getNodeChildren = function (nodeId, opts) {
            return this.nodesApi.listNodeChildren(nodeId, opts);
        };
        ChangesApi.prototype.getRendition = function (nodeId, renditionId) {
            return this.renditionsApi.getRendition(nodeId, renditionId);
        };
        ChangesApi.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
            return this.renditionsApi.getRenditionContent(nodeId, renditionId);
        };
        ChangesApi.prototype.getRenditions = function (nodeId) {
            return this.renditionsApi.listRenditions(nodeId);
        };
        ChangesApi.prototype.getSharedLink = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLink(sharedId, opts);
        };
        ChangesApi.prototype.getSharedLinkContent = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLinkContent(sharedId, opts);
        };
        ChangesApi.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
        };
        ChangesApi.prototype.getSharedLinkRenditions = function (sharedId) {
            return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
        };
        ChangesApi.prototype.listParents = function (childId, opts) {
            return this.nodesApi.listParents(childId, opts);
        };
        ChangesApi.prototype.listSecondaryChildAssociations = function (parentId, opts) {
            return this.nodesApi.listSecondaryChildren(parentId, opts);
        };
        ChangesApi.prototype.listSourceNodeAssociations = function (targetId, opts) {
            return this.nodesApi.listSourceAssociations(targetId, opts);
        };
        ChangesApi.prototype.listTargetAssociations = function (sourceId, opts) {
            return this.nodesApi.listTargetAssociations(sourceId, opts);
        };
        ChangesApi.prototype.moveNode = function (nodeId, moveBody, opts) {
            return this.nodesApi.moveNode(nodeId, moveBody, opts);
        };
        ChangesApi.prototype.purgeDeletedNode = function (nodeId) {
            return this.trashcanApi.deleteDeletedNode(nodeId);
        };
        ChangesApi.prototype.removeAssoc = function (sourceId, targetId, opts) {
            return this.nodesApi.deleteAssociation(sourceId, targetId, opts);
        };
        ChangesApi.prototype.removeSecondaryChildAssoc = function (parentId, childId, opts) {
            return this.nodesApi.deleteSecondaryChildAssociation(parentId, childId, opts);
        };
        ChangesApi.prototype.restoreNode = function (nodeId) {
            return this.trashcanApi.restoreDeletedNode(nodeId);
        };
        ChangesApi.prototype.updateFileContent = function (nodeId, contentBody, opts) {
            return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
        };
        ChangesApi.prototype.updateNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.updateNode(nodeId, nodeBody, opts);
        };
        return ChangesApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ChildAssociationsApi = (function () {
        function ChildAssociationsApi() {
        }
        ChildAssociationsApi.prototype.init = function (alfrescoApi) {
            this.nodesApi = new NodesApi(alfrescoApi);
        };
        ChildAssociationsApi.prototype.addNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.createNode(nodeId, nodeBody, opts);
        };
        ChildAssociationsApi.prototype.addSecondaryChildAssoc = function (parentId, assocChildBody) {
            return this.nodesApi.createSecondaryChildAssociation(parentId, assocChildBody);
        };
        ChildAssociationsApi.prototype.deleteNode = function (nodeId, opts) {
            return this.nodesApi.deleteNode(nodeId, opts);
        };
        ChildAssociationsApi.prototype.getNodeChildren = function (nodeId, opts) {
            return this.nodesApi.listNodeChildren(nodeId, opts);
        };
        ChildAssociationsApi.prototype.listParents = function (childId, opts) {
            return this.nodesApi.listParents(childId, opts);
        };
        ChildAssociationsApi.prototype.listSecondaryChildAssociations = function (parentId, opts) {
            return this.nodesApi.listSecondaryChildren(parentId, opts);
        };
        ChildAssociationsApi.prototype.moveNode = function (nodeId, moveBody, opts) {
            return this.nodesApi.moveNode(nodeId, moveBody, opts);
        };
        ChildAssociationsApi.prototype.removeSecondaryChildAssoc = function (parentId, childId, opts) {
            return this.nodesApi.deleteSecondaryChildAssociation(parentId, childId, opts);
        };
        return ChildAssociationsApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentsApi$1 = (function () {
        function CommentsApi$$1() {
        }
        CommentsApi$$1.prototype.init = function (alfrescoApi) {
            this.commentsApi = new CommentsApi(alfrescoApi);
        };
        CommentsApi$$1.prototype.addComment = function (nodeId, commentBody, opts) {
            return this.commentsApi.createComment(nodeId, commentBody, opts);
        };
        CommentsApi$$1.prototype.getComments = function (nodeId, opts) {
            return this.commentsApi.listComments(nodeId, opts);
        };
        CommentsApi$$1.prototype.removeComment = function (nodeId, commentId) {
            return this.commentsApi.deleteComment(nodeId, commentId);
        };
        CommentsApi$$1.prototype.updateComment = function (nodeId, commentId, commentBody, opts) {
            return this.commentsApi.updateComment(nodeId, commentId, commentBody, opts);
        };
        return CommentsApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var FavoritesApi$1 = (function () {
        function FavoritesApi$$1() {
        }
        FavoritesApi$$1.prototype.init = function (alfrescoApi) {
            this.favoritesApi = new FavoritesApi(alfrescoApi);
        };
        FavoritesApi$$1.prototype.addFavorite = function (personId, favoriteBody) {
            return this.favoritesApi.createFavorite(personId, favoriteBody);
        };
        FavoritesApi$$1.prototype.getFavorite = function (personId, favoriteId, opts) {
            return this.favoritesApi.getFavorite(personId, favoriteId, opts);
        };
        FavoritesApi$$1.prototype.getFavorites = function (personId, opts) {
            return this.favoritesApi.listFavorites(personId, opts);
        };
        FavoritesApi$$1.prototype.removeFavoriteSite = function (personId, favoriteId) {
            return this.favoritesApi.deleteFavorite(personId, favoriteId);
        };
        return FavoritesApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NodesApi$1 = (function () {
        function NodesApi$$1() {
        }
        NodesApi$$1.prototype.init = function (alfrescoApi) {
            this.nodesApi = new NodesApi(alfrescoApi);
            this.trashcanApi = new TrashcanApi(alfrescoApi);
        };
        NodesApi$$1.prototype.addNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.createNode(nodeId, nodeBody, opts);
        };
        NodesApi$$1.prototype.copyNode = function (nodeId, copyBody, opts) {
            return this.nodesApi.copyNode(nodeId, copyBody, opts);
        };
        NodesApi$$1.prototype.deleteNode = function (nodeId, opts) {
            return this.nodesApi.deleteNode(nodeId, opts);
        };
        NodesApi$$1.prototype.getDeletedNode = function (nodeId, opts) {
            return this.trashcanApi.getDeletedNode(nodeId, opts);
        };
        NodesApi$$1.prototype.getDeletedNodes = function (opts) {
            return this.trashcanApi.listDeletedNodes(opts);
        };
        NodesApi$$1.prototype.getFileContent = function (nodeId, opts) {
            return this.nodesApi.getNodeContent(nodeId, opts);
        };
        NodesApi$$1.prototype.getNode = function (nodeId, opts) {
            return this.nodesApi.getNode(nodeId, opts);
        };
        NodesApi$$1.prototype.getNodeContent = function (nodeId, opts) {
            return this.nodesApi.getNodeContent(nodeId, opts);
        };
        NodesApi$$1.prototype.getNodeChildren = function (nodeId, opts) {
            return this.nodesApi.listNodeChildren(nodeId, opts);
        };
        NodesApi$$1.prototype.getParents = function (nodeId, opts) {
            return this.nodesApi.listParents(nodeId, opts);
        };
        NodesApi$$1.prototype.getSecondaryChildren = function (nodeId, opts) {
            return this.nodesApi.listSecondaryChildren(nodeId, opts);
        };
        NodesApi$$1.prototype.getSourceAssociations = function (nodeId, opts) {
            return this.nodesApi.listSourceAssociations(nodeId, opts);
        };
        NodesApi$$1.prototype.getTargetAssociations = function (nodeId, opts) {
            return this.nodesApi.listTargetAssociations(nodeId, opts);
        };
        NodesApi$$1.prototype.lockNode = function (nodeId, nodeBodyLock, opts) {
            return this.nodesApi.lockNode(nodeId, nodeBodyLock, opts);
        };
        NodesApi$$1.prototype.unlockNode = function (nodeId, opts) {
            return this.nodesApi.unlockNode(nodeId, opts);
        };
        NodesApi$$1.prototype.moveNode = function (nodeId, moveBody, opts) {
            return this.nodesApi.moveNode(nodeId, moveBody, opts);
        };
        NodesApi$$1.prototype.purgeDeletedNode = function (nodeId) {
            return this.trashcanApi.deleteDeletedNode(nodeId);
        };
        NodesApi$$1.prototype.restoreNode = function (nodeId) {
            return this.trashcanApi.restoreDeletedNode(nodeId);
        };
        NodesApi$$1.prototype.updateFileContent = function (nodeId, contentBody, opts) {
            return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
        };
        NodesApi$$1.prototype.updateNodeContent = function (nodeId, contentBody, opts) {
            return this.nodesApi.updateNodeContent(nodeId, contentBody, opts);
        };
        NodesApi$$1.prototype.updateNode = function (nodeId, nodeBody, opts) {
            return this.nodesApi.updateNode(nodeId, nodeBody, opts);
        };
        NodesApi$$1.prototype.getNodeInfo = function (nodeId, opts) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.getNode(nodeId, opts).then(function (nodeEntry) {
                    resolve(nodeEntry.entry);
                }, function (error) {
                    reject(error);
                });
            });
        };
        NodesApi$$1.prototype.deleteNodePermanent = function (nodeId) {
            return this.deleteNode(nodeId, { permanent: true });
        };
        NodesApi$$1.prototype.createFolder = function (name, relativePath, nodeId, opts) {
            nodeId = nodeId || '-root-';
            var nodeBody = {
                'name': name,
                'nodeType': 'cm:folder',
                'relativePath': relativePath
            };
            return this.addNode(nodeId, nodeBody, opts);
        };
        NodesApi$$1.prototype.createFolderAutoRename = function (name, relativePath, nodeId, opts) {
            var optAutoRename = { autoRename: true };
            opts = opts || {};
            opts = Object.assign(opts, optAutoRename);
            return this.createFolder(name, relativePath, nodeId, opts);
        };
        return NodesApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var NetworksApi$1 = (function () {
        function NetworksApi$$1() {
        }
        NetworksApi$$1.prototype.init = function (alfrescoApi) {
            this.networksApi = new NetworksApi(alfrescoApi);
        };
        NetworksApi$$1.prototype.getNetwork = function (networkId, opts) {
            return this.networksApi.getNetwork(networkId, opts);
        };
        NetworksApi$$1.prototype.getNetworkForPerson = function (personId, networkId, opts) {
            return this.networksApi.getNetworkForPerson(personId, networkId, opts);
        };
        NetworksApi$$1.prototype.listNetworksForPerson = function (personId, opts) {
            return this.networksApi.listNetworksForPerson(personId, opts);
        };
        return NetworksApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RatingsApi$1 = (function () {
        function RatingsApi$$1() {
        }
        RatingsApi$$1.prototype.init = function (alfrescoApi) {
            this.ratingsApi = new RatingsApi(alfrescoApi);
        };
        RatingsApi$$1.prototype.getRating = function (nodeId, ratingId, opts) {
            return this.ratingsApi.getRating(nodeId, ratingId, opts);
        };
        RatingsApi$$1.prototype.getRatings = function (nodeId, opts) {
            return this.ratingsApi.listRatings(nodeId, opts);
        };
        RatingsApi$$1.prototype.rate = function (nodeId, ratingBody) {
            return this.ratingsApi.createRating(nodeId, ratingBody);
        };
        RatingsApi$$1.prototype.removeRating = function (nodeId, ratingId) {
            return this.ratingsApi.deleteRating(nodeId, ratingId);
        };
        return RatingsApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var PeopleApi$1 = (function () {
        function PeopleApi$$1() {
        }
        PeopleApi$$1.prototype.init = function (alfrescoApi) {
            this.networksApi = new NetworksApi(alfrescoApi);
            this.peopleApiNew = new PeopleApi(alfrescoApi);
            this.favoritesApi = new FavoritesApi(alfrescoApi);
            this.sitesApi = new SitesApi(alfrescoApi);
            this.activitiesApi = new ActivitiesApi(alfrescoApi);
            this.preferencesApi = new PreferencesApi(alfrescoApi);
            this.groupsApi = new GroupsApi(alfrescoApi);
        };
        PeopleApi$$1.prototype.addFavorite = function (personId, favoriteBody) {
            return this.favoritesApi.createFavorite(personId, favoriteBody);
        };
        PeopleApi$$1.prototype.addSiteMembershipRequest = function (personId, siteMembershipBody) {
            return this.sitesApi.createSiteMembershipRequestForPerson(personId, siteMembershipBody);
        };
        PeopleApi$$1.prototype.deleteFavoriteSite = function (personId, siteId) {
            return this.favoritesApi.deleteSiteFavorite(personId, siteId);
        };
        PeopleApi$$1.prototype.favoriteSite = function (personId, favoriteSiteBody) {
            return this.favoritesApi.createSiteFavorite(personId, favoriteSiteBody);
        };
        PeopleApi$$1.prototype.getActivities = function (personId, opts) {
            return this.activitiesApi.listActivitiesForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.getFavorite = function (personId, favoriteId, opts) {
            return this.favoritesApi.getFavorite(personId, favoriteId, opts);
        };
        PeopleApi$$1.prototype.getFavoriteSite = function (personId, siteId, opts) {
            return this.favoritesApi.getFavoriteSite(personId, siteId, opts);
        };
        PeopleApi$$1.prototype.getFavoriteSites = function (personId, opts) {
            return this.favoritesApi.listFavoriteSitesForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.getFavorites = function (personId, opts) {
            return this.favoritesApi.listFavorites(personId, opts);
        };
        PeopleApi$$1.prototype.getPerson = function (personId, opts) {
            return this.peopleApiNew.getPerson(personId, opts);
        };
        PeopleApi$$1.prototype.getPersons = function (opts) {
            return this.peopleApiNew.listPeople(opts);
        };
        PeopleApi$$1.prototype.addPerson = function (person) {
            return this.peopleApiNew.createPerson(person);
        };
        PeopleApi$$1.prototype.updatePerson = function (personId, personBodyUpdate, opts) {
            return this.peopleApiNew.updatePerson(personId, personBodyUpdate, opts);
        };
        PeopleApi$$1.prototype.getPersonNetwork = function (personId, networkId, opts) {
            return this.networksApi.getNetworkForPerson(personId, networkId, opts);
        };
        PeopleApi$$1.prototype.getPersonNetworks = function (personId, opts) {
            return this.networksApi.listNetworksForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.getPreference = function (personId, preferenceName, opts) {
            return this.preferencesApi.getPreference(personId, preferenceName, opts);
        };
        PeopleApi$$1.prototype.getPreferences = function (personId, opts) {
            return this.preferencesApi.listPreferences(personId, opts);
        };
        PeopleApi$$1.prototype.getSiteMembership = function (personId, opts) {
            return this.sitesApi.listSiteMembershipsForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.getGroupsMembership = function (personId, opts) {
            return this.groupsApi.listGroupMembershipsForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.getSiteMembershipRequest = function (personId, siteId, opts) {
            return this.sitesApi.getSiteMembershipRequestForPerson(personId, siteId, opts);
        };
        PeopleApi$$1.prototype.getSiteMembershipRequests = function (personId, opts) {
            return this.sitesApi.listSiteMembershipRequestsForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.removeFavoriteSite = function (personId, favoriteId) {
            return this.favoritesApi.deleteSiteFavorite(personId, favoriteId);
        };
        PeopleApi$$1.prototype.listSiteMembershipsForPerson = function (personId, opts) {
            return this.sitesApi.listSiteMembershipsForPerson(personId, opts);
        };
        PeopleApi$$1.prototype.removeSiteMembershipRequest = function (personId, siteId) {
            return this.sitesApi.deleteSiteMembershipRequestForPerson(personId, siteId);
        };
        PeopleApi$$1.prototype.updateSiteMembershipRequest = function (personId, siteId, siteMembershipBody) {
            return this.sitesApi.updateSiteMembershipRequestForPerson(personId, siteId, siteMembershipBody);
        };
        return PeopleApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RenditionsApi$1 = (function () {
        function RenditionsApi$$1() {
        }
        RenditionsApi$$1.prototype.init = function (alfrescoApi) {
            this.renditionsApi = new RenditionsApi(alfrescoApi);
            this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
        };
        RenditionsApi$$1.prototype.createRendition = function (nodeId, renditionBody) {
            return this.renditionsApi.createRendition(nodeId, renditionBody);
        };
        RenditionsApi$$1.prototype.getRendition = function (nodeId, renditionId) {
            return this.renditionsApi.getRendition(nodeId, renditionId);
        };
        RenditionsApi$$1.prototype.getRenditionContent = function (nodeId, renditionId, opts) {
            return this.renditionsApi.getRenditionContent(nodeId, renditionId);
        };
        RenditionsApi$$1.prototype.getRenditions = function (nodeId) {
            return this.renditionsApi.listRenditions(nodeId);
        };
        RenditionsApi$$1.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
        };
        RenditionsApi$$1.prototype.getSharedLinkRenditions = function (sharedId) {
            return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
        };
        RenditionsApi$$1.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
            return this.sharedlinksApi.getSharedLinkRendition(sharedId, renditionId);
        };
        return RenditionsApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var QueriesApi$1 = (function (_super) {
        __extends(QueriesApi$$1, _super);
        function QueriesApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QueriesApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return QueriesApi$$1;
    }(QueriesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SharedlinksApi$1 = (function () {
        function SharedlinksApi$$1() {
        }
        SharedlinksApi$$1.prototype.init = function (alfrescoApi) {
            this.sharedlinksApi = new SharedlinksApi(alfrescoApi);
        };
        SharedlinksApi$$1.prototype.addSharedLink = function (sharedLinkBody, opts) {
            return this.sharedlinksApi.createSharedLink(sharedLinkBody, opts);
        };
        SharedlinksApi$$1.prototype.deleteSharedLink = function (sharedId) {
            return this.sharedlinksApi.deleteSharedLink(sharedId);
        };
        SharedlinksApi$$1.prototype.emailSharedLink = function (sharedId, emailSharedLinkBody) {
            return this.sharedlinksApi.emailSharedLink(sharedId, emailSharedLinkBody);
        };
        SharedlinksApi$$1.prototype.findSharedLinks = function (opts) {
            return this.sharedlinksApi.listSharedLinks(opts);
        };
        SharedlinksApi$$1.prototype.getSharedLink = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLink(sharedId, opts);
        };
        SharedlinksApi$$1.prototype.getSharedLinkContent = function (sharedId, opts) {
            return this.sharedlinksApi.getSharedLinkContent(sharedId, opts);
        };
        SharedlinksApi$$1.prototype.getSharedLinkRenditionContent = function (sharedId, renditionId, opts) {
            return this.sharedlinksApi.getSharedLinkRenditionContent(sharedId, renditionId, opts);
        };
        SharedlinksApi$$1.prototype.getSharedLinkRenditions = function (sharedId) {
            return this.sharedlinksApi.listSharedLinkRenditions(sharedId);
        };
        SharedlinksApi$$1.prototype.getSharedLinkRendition = function (sharedId, renditionId) {
            return this.sharedlinksApi.getSharedLinkRendition(sharedId, renditionId);
        };
        return SharedlinksApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SitesApi$1 = (function () {
        function SitesApi$$1() {
        }
        SitesApi$$1.prototype.init = function (alfrescoApi) {
            this.sitesApi = new SitesApi(alfrescoApi);
        };
        SitesApi$$1.prototype.addSiteMember = function (siteId, siteMemberBody) {
            return this.sitesApi.createSiteMembership(siteId, siteMemberBody);
        };
        SitesApi$$1.prototype.createSite = function (siteBody, opts) {
            return this.sitesApi.createSite(siteBody, opts);
        };
        SitesApi$$1.prototype.updateSite = function (siteId, siteBody, opts) {
            return this.sitesApi.updateSite(siteId, siteBody, opts);
        };
        SitesApi$$1.prototype.deleteSite = function (siteId, opts) {
            return this.sitesApi.deleteSite(siteId, opts);
        };
        SitesApi$$1.prototype.getSite = function (siteId, opts) {
            return this.sitesApi.getSite(siteId, opts);
        };
        SitesApi$$1.prototype.getSiteContainer = function (siteId, containerId, opts) {
            return this.sitesApi.getSiteContainer(siteId, containerId, opts);
        };
        SitesApi$$1.prototype.getSiteContainers = function (siteId, opts) {
            return this.sitesApi.listSiteContainers(siteId, opts);
        };
        SitesApi$$1.prototype.getSiteMember = function (siteId, personId, opts) {
            return this.sitesApi.getSiteMembership(siteId, personId, opts);
        };
        SitesApi$$1.prototype.getSiteMembers = function (siteId, opts) {
            return this.sitesApi.listSiteMemberships(siteId, opts);
        };
        SitesApi$$1.prototype.getSites = function (opts) {
            return this.sitesApi.listSites(opts);
        };
        SitesApi$$1.prototype.removeSiteMember = function (siteId, personId) {
            return this.sitesApi.deleteSiteMembership(siteId, personId);
        };
        SitesApi$$1.prototype.updateSiteMember = function (siteId, personId, siteMemberRoleBody) {
            return this.sitesApi.updateSiteMembership(siteId, personId, siteMemberRoleBody);
        };
        return SitesApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TagsApi$1 = (function () {
        function TagsApi$$1() {
        }
        TagsApi$$1.prototype.init = function (alfrescoApi) {
            this.tagsApi = new TagsApi(alfrescoApi);
        };
        TagsApi$$1.prototype.addTag = function (nodeId, tagBody) {
            return this.tagsApi.createTagForNode(nodeId, tagBody);
        };
        TagsApi$$1.prototype.getNodeTags = function (nodeId, opts) {
            return this.tagsApi.listTagsForNode(nodeId, opts);
        };
        TagsApi$$1.prototype.getTag = function (tagId, opts) {
            return this.tagsApi.getTag(tagId, opts);
        };
        TagsApi$$1.prototype.getTags = function (opts) {
            return this.tagsApi.listTags(opts);
        };
        TagsApi$$1.prototype.removeTag = function (nodeId, tagId) {
            return this.tagsApi.deleteTagFromNode(nodeId, tagId);
        };
        TagsApi$$1.prototype.updateTag = function (tagId, tagBody) {
            return this.tagsApi.updateTag(tagId, tagBody);
        };
        return TagsApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var WebscriptApi$1 = (function (_super) {
        __extends(WebscriptApi$$1, _super);
        function WebscriptApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WebscriptApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return WebscriptApi$$1;
    }(WebscriptApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var DownloadsApi$1 = (function (_super) {
        __extends(DownloadsApi$$1, _super);
        function DownloadsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DownloadsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return DownloadsApi$$1;
    }(DownloadsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var VersionsApi$1 = (function (_super) {
        __extends(VersionsApi$$1, _super);
        function VersionsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        VersionsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return VersionsApi$$1;
    }(VersionsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ClassesApi$1 = (function (_super) {
        __extends(ClassesApi$$1, _super);
        function ClassesApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClassesApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentPrivateClient;
        };
        return ClassesApi$$1;
    }(ClassesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupsApi$1 = (function () {
        function GroupsApi$$1() {
        }
        GroupsApi$$1.prototype.init = function (alfrescoApi) {
            this.groupsApi = new GroupsApi(alfrescoApi);
        };
        GroupsApi$$1.prototype.createGroup = function (groupBody, opts) {
            return this.groupsApi.createGroup(groupBody, opts);
        };
        GroupsApi$$1.prototype.getGroups = function (opts) {
            return this.groupsApi.listGroups(opts);
        };
        GroupsApi$$1.prototype.deleteGroup = function (groupId, opts) {
            return this.groupsApi.deleteGroup(groupId, opts);
        };
        GroupsApi$$1.prototype.getGroup = function (groupId, opts) {
            return this.groupsApi.getGroup(groupId, opts);
        };
        GroupsApi$$1.prototype.updateGroup = function (groupId, groupBody, opts) {
            return this.groupsApi.updateGroup(groupId, groupBody, opts);
        };
        GroupsApi$$1.prototype.getGroupMembers = function (groupId, opts) {
            return this.groupsApi.listGroupMemberships(groupId, opts);
        };
        GroupsApi$$1.prototype.addGroupMember = function (groupId, groupMemberBody, opts) {
            return this.groupsApi.createGroupMembership(groupId, groupMemberBody, opts);
        };
        GroupsApi$$1.prototype.deleteGroupMember = function (groupId, groupMemberId) {
            return this.groupsApi.deleteGroupMembership(groupId, groupMemberId);
        };
        return GroupsApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CustomModelApi$1 = (function (_super) {
        __extends(CustomModelApi$$1, _super);
        function CustomModelApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CustomModelApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentPrivateClient;
        };
        return CustomModelApi$$1;
    }(CustomModelApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CONTENT_LEGACY_APIS = {
        ChangesApi: ChangesApi,
        ChildAssociationsApi: ChildAssociationsApi,
        FavoritesApi: FavoritesApi$1,
        NetworksApi: NetworksApi$1,
        NodesApi: NodesApi$1,
        CommentsApi: CommentsApi$1,
        PeopleApi: PeopleApi$1,
        RatingsApi: RatingsApi$1,
        RenditionsApi: RenditionsApi$1,
        QueriesApi: QueriesApi$1,
        SharedlinksApi: SharedlinksApi$1,
        SitesApi: SitesApi$1,
        TagsApi: TagsApi$1,
        WebscriptApi: WebscriptApi$1,
        DownloadsApi: DownloadsApi$1,
        VersionsApi: VersionsApi$1,
        ClassesApi: ClassesApi$1,
        GroupsApi: GroupsApi$1,
        CustomModelApi: CustomModelApi$1
    };
    (function (Core) {
        var ChangesApi$$1 = (function (_super) {
            __extends(ChangesApi$$1, _super);
            function ChangesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ChangesApi$$1;
        }(ChangesApi));
        Core.ChangesApi = ChangesApi$$1;
        var ChildAssociationsApi$$1 = (function (_super) {
            __extends(ChildAssociationsApi$$1, _super);
            function ChildAssociationsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ChildAssociationsApi$$1;
        }(ChildAssociationsApi));
        Core.ChildAssociationsApi = ChildAssociationsApi$$1;
        var FavoritesApi$$1 = (function (_super) {
            __extends(FavoritesApi$$1, _super);
            function FavoritesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return FavoritesApi$$1;
        }(FavoritesApi$1));
        Core.FavoritesApi = FavoritesApi$$1;
        var NetworksApi$$1 = (function (_super) {
            __extends(NetworksApi$$1, _super);
            function NetworksApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NetworksApi$$1;
        }(NetworksApi$1));
        Core.NetworksApi = NetworksApi$$1;
        var NodesApi$$1 = (function (_super) {
            __extends(NodesApi$$1, _super);
            function NodesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return NodesApi$$1;
        }(NodesApi$1));
        Core.NodesApi = NodesApi$$1;
        var CommentsApi$$1 = (function (_super) {
            __extends(CommentsApi$$1, _super);
            function CommentsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CommentsApi$$1;
        }(CommentsApi$1));
        Core.CommentsApi = CommentsApi$$1;
        var PeopleApi$$1 = (function (_super) {
            __extends(PeopleApi$$1, _super);
            function PeopleApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return PeopleApi$$1;
        }(PeopleApi$1));
        Core.PeopleApi = PeopleApi$$1;
        var RatingsApi$$1 = (function (_super) {
            __extends(RatingsApi$$1, _super);
            function RatingsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RatingsApi$$1;
        }(RatingsApi$1));
        Core.RatingsApi = RatingsApi$$1;
        var RenditionsApi$$1 = (function (_super) {
            __extends(RenditionsApi$$1, _super);
            function RenditionsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return RenditionsApi$$1;
        }(RenditionsApi$1));
        Core.RenditionsApi = RenditionsApi$$1;
        var QueriesApi$$1 = (function (_super) {
            __extends(QueriesApi$$1, _super);
            function QueriesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return QueriesApi$$1;
        }(QueriesApi$1));
        Core.QueriesApi = QueriesApi$$1;
        var SharedlinksApi$$1 = (function (_super) {
            __extends(SharedlinksApi$$1, _super);
            function SharedlinksApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SharedlinksApi$$1;
        }(SharedlinksApi$1));
        Core.SharedlinksApi = SharedlinksApi$$1;
        var SitesApi$$1 = (function (_super) {
            __extends(SitesApi$$1, _super);
            function SitesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SitesApi$$1;
        }(SitesApi$1));
        Core.SitesApi = SitesApi$$1;
        var TagsApi$$1 = (function (_super) {
            __extends(TagsApi$$1, _super);
            function TagsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TagsApi$$1;
        }(TagsApi$1));
        Core.TagsApi = TagsApi$$1;
        var WebscriptApi$$1 = (function (_super) {
            __extends(WebscriptApi$$1, _super);
            function WebscriptApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return WebscriptApi$$1;
        }(WebscriptApi$1));
        Core.WebscriptApi = WebscriptApi$$1;
        var DownloadsApi$$1 = (function (_super) {
            __extends(DownloadsApi$$1, _super);
            function DownloadsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return DownloadsApi$$1;
        }(DownloadsApi$1));
        Core.DownloadsApi = DownloadsApi$$1;
        var VersionsApi$$1 = (function (_super) {
            __extends(VersionsApi$$1, _super);
            function VersionsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return VersionsApi$$1;
        }(VersionsApi$1));
        Core.VersionsApi = VersionsApi$$1;
        var ClassesApi$$1 = (function (_super) {
            __extends(ClassesApi$$1, _super);
            function ClassesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ClassesApi$$1;
        }(ClassesApi$1));
        Core.ClassesApi = ClassesApi$$1;
        var GroupsApi$$1 = (function (_super) {
            __extends(GroupsApi$$1, _super);
            function GroupsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GroupsApi$$1;
        }(GroupsApi$1));
        Core.GroupsApi = GroupsApi$$1;
        var CustomModelApi$$1 = (function (_super) {
            __extends(CustomModelApi$$1, _super);
            function CustomModelApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CustomModelApi$$1;
        }(CustomModelApi$1));
        Core.CustomModelApi = CustomModelApi$$1;
    })(exports.Core || (exports.Core = {}));

    var AboutApi$1 = (function (_super) {
        __extends(AboutApi$$1, _super);
        function AboutApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AboutApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AboutApi$$1;
    }(AboutApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoApiActiviti = (function () {
        function AlfrescoApiActiviti() {
        }
        AlfrescoApiActiviti.prototype.init = function (alfrescoApi) {
            this.integrationAlfrescoCloudApi = new IntegrationAlfrescoCloudApi(alfrescoApi);
            this.IntegrationAlfrescoOnPremiseApi = new IntegrationAlfrescoOnPremiseApi(alfrescoApi);
        };
        AlfrescoApiActiviti.prototype.confirmAuthorisation = function (code) {
            return this.integrationAlfrescoCloudApi.confirmAuthorisation(code);
        };
        AlfrescoApiActiviti.prototype.getAllNetworks = function () {
            return this.integrationAlfrescoCloudApi.getAllNetworks();
        };
        AlfrescoApiActiviti.prototype.getAllSites = function (networkId) {
            return this.integrationAlfrescoCloudApi.getAllSites(networkId);
        };
        AlfrescoApiActiviti.prototype.getAllSitesByRepositoryId = function (repositoryId) {
            return this.IntegrationAlfrescoOnPremiseApi.getAllSites(repositoryId);
        };
        AlfrescoApiActiviti.prototype.getContentInFolder = function (networkId, folderId) {
            return this.integrationAlfrescoCloudApi.getContentInFolder(networkId, folderId);
        };
        AlfrescoApiActiviti.prototype.getContentInFolderByRepositoryId = function (repositoryId, folderId) {
            return this.IntegrationAlfrescoOnPremiseApi.getContentInFolder(repositoryId, folderId);
        };
        AlfrescoApiActiviti.prototype.getContentInSite = function (networkId, siteId) {
            return this.integrationAlfrescoCloudApi.getContentInSite(networkId, siteId);
        };
        AlfrescoApiActiviti.prototype.getContentInSiteByRepositoryId = function (repositoryId, siteId) {
            return this.IntegrationAlfrescoOnPremiseApi.getContentInSite(repositoryId, siteId);
        };
        AlfrescoApiActiviti.prototype.getRepositories = function (opts) {
            return this.IntegrationAlfrescoOnPremiseApi.getRepositories(opts);
        };
        return AlfrescoApiActiviti;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminEndpointsApi$1 = (function (_super) {
        __extends(AdminEndpointsApi$$1, _super);
        function AdminEndpointsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminEndpointsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        AdminEndpointsApi$$1.prototype.removeBasicAuthonfiguration = function (basicAuthId, tenantId) {
            return this.removeBasicAuthConfiguration(basicAuthId, tenantId);
        };
        return AdminEndpointsApi$$1;
    }(AdminEndpointsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminGroupsApi$1 = (function (_super) {
        __extends(AdminGroupsApi$$1, _super);
        function AdminGroupsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminGroupsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AdminGroupsApi$$1;
    }(AdminGroupsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminTenantsApi$1 = (function (_super) {
        __extends(AdminTenantsApi$$1, _super);
        function AdminTenantsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminTenantsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AdminTenantsApi$$1;
    }(AdminTenantsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AdminUsersApi$1 = (function (_super) {
        __extends(AdminUsersApi$$1, _super);
        function AdminUsersApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdminUsersApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return AdminUsersApi$$1;
    }(AdminUsersApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppsApi = (function () {
        function AppsApi() {
        }
        AppsApi.prototype.init = function (alfrescoApi) {
            this.runtimeAppDefinitionsApi = new RuntimeAppDefinitionsApi(alfrescoApi);
            this.appDefinitionsApi = new AppDefinitionsApi(alfrescoApi);
        };
        AppsApi.prototype.deployAppDefinitions = function (saveObject) {
            return this.runtimeAppDefinitionsApi.deployAppDefinitions(saveObject);
        };
        AppsApi.prototype.exportAppDefinition = function (modelId) {
            return this.appDefinitionsApi.exportAppDefinition(modelId);
        };
        AppsApi.prototype.getAppDefinitions = function () {
            return this.runtimeAppDefinitionsApi.getAppDefinitions();
        };
        AppsApi.prototype.importAppDefinition = function (file) {
            return this.appDefinitionsApi.importAppDefinition(file);
        };
        AppsApi.prototype.importNewAppDefinition = function (modelId, file) {
            return this.appDefinitionsApi.updateAppDefinition(modelId, file);
        };
        AppsApi.prototype.publishAppDefinition = function (modelId, publishModel) {
            return this.appDefinitionsApi.publishAppDefinition(modelId, publishModel);
        };
        AppsApi.prototype.updateAppDefinition = function (modelId, updatedModel) {
            return this.appDefinitionsApi.updateAppDefinition(modelId, updatedModel);
        };
        return AppsApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppsDefinitionApi = (function () {
        function AppsDefinitionApi() {
        }
        AppsDefinitionApi.prototype.init = function (alfrescoApi) {
            this.appDefinitionsApi = new AppDefinitionsApi(alfrescoApi);
        };
        AppsDefinitionApi.prototype.exportAppDefinition = function (modelId) {
            return this.appDefinitionsApi.exportAppDefinition(modelId);
        };
        AppsDefinitionApi.prototype.importAppDefinition = function (file, opts) {
            return this.appDefinitionsApi.importAppDefinition(file, opts);
        };
        AppsDefinitionApi.prototype.importNewAppDefinition = function (modelId, file) {
            return this.appDefinitionsApi.updateAppDefinition(modelId, file);
        };
        AppsDefinitionApi.prototype.publishAppDefinition = function (modelId, publishModel) {
            return this.appDefinitionsApi.publishAppDefinition(modelId, publishModel);
        };
        return AppsDefinitionApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AppsRuntimeApi = (function () {
        function AppsRuntimeApi() {
        }
        AppsRuntimeApi.prototype.init = function (alfrescoApi) {
            this.runtimeAppDefinitionsApi = new RuntimeAppDefinitionsApi(alfrescoApi);
        };
        AppsRuntimeApi.prototype.deployAppDefinitions = function (saveObject) {
            return this.runtimeAppDefinitionsApi.deployAppDefinitions(saveObject);
        };
        AppsRuntimeApi.prototype.getAppDefinitions = function () {
            return this.runtimeAppDefinitionsApi.getAppDefinitions();
        };
        return AppsRuntimeApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var CommentsApi$2 = (function (_super) {
        __extends(CommentsApi, _super);
        function CommentsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CommentsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return CommentsApi;
    }(ActivitiCommentsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentApi$2 = (function () {
        function ContentApi$$1() {
        }
        ContentApi$$1.prototype.init = function (alfrescoApi) {
            this.contentApi = new ContentApi$1(alfrescoApi);
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
        };
        ContentApi$$1.prototype.createRelatedContentOnProcessInstancePostBody = function (processInstanceId, relatedContent, opts) {
            return this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, relatedContent, opts);
        };
        ContentApi$$1.prototype.createRelatedContentOnProcessInstance = function (processInstanceId, file, opts) {
            return this.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file, opts);
        };
        ContentApi$$1.prototype.createRelatedContentOnTaskPostBody = function (taskId, relatedContent, opts) {
            return this.contentApi.createRelatedContentOnTask(taskId, relatedContent, opts);
        };
        ContentApi$$1.prototype.createRelatedContentOnTask = function (taskId, file, opts) {
            return this.contentApi.createRelatedContentOnTask(taskId, file, opts);
        };
        ContentApi$$1.prototype.createTemporaryRawRelatedContent = function (file) {
            return this.contentApi.createTemporaryRawRelatedContent(file);
        };
        ContentApi$$1.prototype.createTemporaryRelatedContent = function (relatedContent) {
            return this.contentApi.createTemporaryRelatedContent(relatedContent);
        };
        ContentApi$$1.prototype.deleteContent = function (contentId) {
            return this.contentApi.deleteContent(contentId);
        };
        ContentApi$$1.prototype.getContent = function (contentId) {
            return this.contentApi.getContent(contentId);
        };
        ContentApi$$1.prototype.getProcessInstanceContent = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceContent(processInstanceId);
        };
        ContentApi$$1.prototype.getRawContent = function (contentId) {
            return this.contentApi.getRawContent(contentId);
        };
        ContentApi$$1.prototype.getContentPreview = function (contentId) {
            return this.contentApi.getRawContent(contentId, 'preview');
        };
        ContentApi$$1.prototype.getRawContentUrl = function (contentId) {
            return this.contentApi.getRawContentUrl(contentId);
        };
        ContentApi$$1.prototype.getContentThumbnail = function (contentId) {
            return this.contentApi.getRawContent(contentId, 'thumbnail');
        };
        ContentApi$$1.prototype.getRelatedContentForProcessInstance = function (processInstanceId, isRelated) {
            return this.contentApi.getRelatedContentForProcessInstance(processInstanceId, { isRelatedContent: isRelated });
        };
        ContentApi$$1.prototype.getRelatedContentForTask = function (taskId, isRelated) {
            return this.contentApi.getRelatedContentForTask(taskId, { isRelatedContent: isRelated });
        };
        return ContentApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ContentRenditionApi = (function () {
        function ContentRenditionApi() {
        }
        ContentRenditionApi.prototype.init = function (alfrescoApi) {
            this.contentApi = new ContentApi$1(alfrescoApi);
        };
        ContentRenditionApi.prototype.getRawContent = function (contentId, renditionType) {
            return this.contentApi.getRawContent(contentId, renditionType);
        };
        return ContentRenditionApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var EditorApi = (function () {
        function EditorApi() {
        }
        EditorApi.prototype.init = function (alfrescoApi) {
            this.formModelsApi = new FormModelsApi(alfrescoApi);
        };
        EditorApi.prototype.getFormHistory = function (formId, formHistoryId) {
            return this.formModelsApi.getFormHistory(formId, formHistoryId);
        };
        EditorApi.prototype.getForm = function (formId) {
            return this.formModelsApi.getForm(formId);
        };
        EditorApi.prototype.getForms = function (input) {
            return this.formModelsApi.getForms(input);
        };
        EditorApi.prototype.saveForm = function (formId, saveRepresentation) {
            return this.formModelsApi.saveForm(formId, saveRepresentation);
        };
        EditorApi.prototype.validateModel = function (formId, saveRepresentation) {
            return this.formModelsApi.validateModel(formId, saveRepresentation);
        };
        return EditorApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GroupsApi$2 = (function (_super) {
        __extends(GroupsApi, _super);
        function GroupsApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupsApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return GroupsApi;
    }(ActivitiGroupsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IDMSyncApi$1 = (function (_super) {
        __extends(IDMSyncApi$$1, _super);
        function IDMSyncApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IDMSyncApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IDMSyncApi$$1;
    }(IDMSyncApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAccountApi = (function (_super) {
        __extends(IntegrationAccountApi, _super);
        function IntegrationAccountApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAccountApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationAccountApi;
    }(AccountIntegrationApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoCloudApi$1 = (function (_super) {
        __extends(IntegrationAlfrescoCloudApi$$1, _super);
        function IntegrationAlfrescoCloudApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoCloudApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationAlfrescoCloudApi$$1;
    }(IntegrationAlfrescoCloudApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationAlfrescoOnPremiseApi$1 = (function (_super) {
        __extends(IntegrationAlfrescoOnPremiseApi$$1, _super);
        function IntegrationAlfrescoOnPremiseApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationAlfrescoOnPremiseApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationAlfrescoOnPremiseApi$$1;
    }(IntegrationAlfrescoOnPremiseApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationBoxApi$1 = (function (_super) {
        __extends(IntegrationBoxApi$$1, _super);
        function IntegrationBoxApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationBoxApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationBoxApi$$1;
    }(IntegrationBoxApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var IntegrationDriveApi$1 = (function (_super) {
        __extends(IntegrationDriveApi$$1, _super);
        function IntegrationDriveApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegrationDriveApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return IntegrationDriveApi$$1;
    }(IntegrationDriveApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelBpmnApi = (function (_super) {
        __extends(ModelBpmnApi, _super);
        function ModelBpmnApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelBpmnApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelBpmnApi;
    }(ModelsBpmnApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelJsonBpmnApi$1 = (function (_super) {
        __extends(ModelJsonBpmnApi$$1, _super);
        function ModelJsonBpmnApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelJsonBpmnApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelJsonBpmnApi$$1;
    }(ModelJsonBpmnApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsApi$1 = (function (_super) {
        __extends(ModelsApi$$1, _super);
        function ModelsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelsApi$$1;
    }(ModelsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ModelsHistoryApi$1 = (function (_super) {
        __extends(ModelsHistoryApi$$1, _super);
        function ModelsHistoryApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ModelsHistoryApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ModelsHistoryApi$$1;
    }(ModelsHistoryApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessApi = (function () {
        function ProcessApi() {
        }
        ProcessApi.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
            this.processDefinitionsApi = new ProcessDefinitionsApi(alfrescoApi);
        };
        ProcessApi.prototype.deleteProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.deleteProcessInstance(processInstanceId);
        };
        ProcessApi.prototype.filterProcessInstances = function (filterRequest) {
            return this.processInstancesApi.filterProcessInstances(filterRequest);
        };
        ProcessApi.prototype.getProcessDefinitionStartForm = function (processDefinitionId) {
            return this.processDefinitionsApi.getProcessDefinitionStartForm(processDefinitionId);
        };
        ProcessApi.prototype.getProcessDefinitions = function (opts) {
            return this.processDefinitionsApi.getProcessDefinitions(opts);
        };
        ProcessApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceContent(processInstanceId);
        };
        ProcessApi.prototype.getProcessInstanceStartForm = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceStartForm(processInstanceId);
        };
        ProcessApi.prototype.getProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstance(processInstanceId);
        };
        ProcessApi.prototype.getProcessInstances = function (processInstancesQuery) {
            return this.processInstancesApi.getProcessInstances(processInstancesQuery);
        };
        ProcessApi.prototype.getProcessAuditJson = function (processInstanceId) {
            return this.processInstancesApi.getTaskAuditLog(processInstanceId);
        };
        ProcessApi.prototype.getProcessAuditPdf = function (processInstanceId) {
            return this.processInstancesApi.getProcessAuditPdf(processInstanceId);
        };
        ProcessApi.prototype.getRestFieldValues = function (processDefinitionId, field) {
            return this.processDefinitionsApi.getRestFieldValues(processDefinitionId, field);
        };
        ProcessApi.prototype.getRestTableFieldValues = function (processDefinitionId, field, column) {
            return this.processDefinitionsApi.getRestTableFieldValues(processDefinitionId, field, column);
        };
        ProcessApi.prototype.startNewProcessInstance = function (startRequest) {
            return this.processInstancesApi.startNewProcessInstance(startRequest);
        };
        return ProcessApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionsApi$1 = (function (_super) {
        __extends(ProcessDefinitionsApi$$1, _super);
        function ProcessDefinitionsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessDefinitionsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProcessDefinitionsApi$$1;
    }(ProcessDefinitionsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessDefinitionsFormApi = (function () {
        function ProcessDefinitionsFormApi() {
        }
        ProcessDefinitionsFormApi.prototype.init = function (alfrescoApi) {
            this.processDefinitionsApi = new ProcessDefinitionsApi(alfrescoApi);
        };
        ProcessDefinitionsFormApi.prototype.getProcessDefinitionStartForm = function (processDefinitionId) {
            return this.processDefinitionsApi.getProcessDefinitionStartForm(processDefinitionId);
        };
        ProcessDefinitionsFormApi.prototype.getRestFieldValues = function (processDefinitionId, field) {
            return this.processDefinitionsApi.getRestFieldValues(processDefinitionId, field);
        };
        ProcessDefinitionsFormApi.prototype.getRestTableFieldValues = function (processDefinitionId, field, column) {
            return this.processDefinitionsApi.getRestTableFieldValues(processDefinitionId, field, column);
        };
        return ProcessDefinitionsFormApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesApi$1 = (function () {
        function ProcessInstancesApi$$1() {
        }
        ProcessInstancesApi$$1.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
            this.activitiCommentsApi = new ActivitiCommentsApi(alfrescoApi);
        };
        ProcessInstancesApi$$1.prototype.addProcessInstanceComment = function (commentRequest, processInstanceId) {
            return this.activitiCommentsApi.addProcessInstanceComment(commentRequest, processInstanceId);
        };
        ProcessInstancesApi$$1.prototype.deleteProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.deleteProcessInstance(processInstanceId);
        };
        ProcessInstancesApi$$1.prototype.getProcessInstanceComments = function (processInstanceId, opts) {
            return this.activitiCommentsApi.getProcessInstanceComments(processInstanceId, opts);
        };
        ProcessInstancesApi$$1.prototype.getProcessInstanceStartForm = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceStartForm(processInstanceId);
        };
        ProcessInstancesApi$$1.prototype.getProcessInstance = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstance(processInstanceId);
        };
        return ProcessInstancesApi$$1;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesInformationApi = (function () {
        function ProcessInstancesInformationApi() {
        }
        ProcessInstancesInformationApi.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
        };
        ProcessInstancesInformationApi.prototype.getProcessInstanceContent = function (processInstanceId) {
            return this.processInstancesApi.getProcessInstanceContent(processInstanceId);
        };
        ProcessInstancesInformationApi.prototype.startNewProcessInstance = function (startRequest) {
            return this.processInstancesApi.startNewProcessInstance(startRequest);
        };
        return ProcessInstancesInformationApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstancesListingApi = (function () {
        function ProcessInstancesListingApi() {
        }
        ProcessInstancesListingApi.prototype.init = function (alfrescoApi) {
            this.processInstancesApi = new ProcessInstancesApi(alfrescoApi);
        };
        ProcessInstancesListingApi.prototype.filterProcessInstances = function (filterRequest) {
            return this.processInstancesApi.filterProcessInstances(filterRequest);
        };
        ProcessInstancesListingApi.prototype.getProcessInstances = function (processInstancesQuery) {
            return this.processInstancesApi.getProcessInstances(processInstancesQuery);
        };
        return ProcessInstancesListingApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessInstanceVariablesApi$1 = (function (_super) {
        __extends(ProcessInstanceVariablesApi$$1, _super);
        function ProcessInstanceVariablesApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessInstanceVariablesApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProcessInstanceVariablesApi$$1;
    }(ProcessInstanceVariablesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProcessScopeApi = (function (_super) {
        __extends(ProcessScopeApi, _super);
        function ProcessScopeApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProcessScopeApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProcessScopeApi;
    }(ProcessScopesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ProfileApi = (function (_super) {
        __extends(ProfileApi, _super);
        function ProfileApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ProfileApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ProfileApi;
    }(UserProfileApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ScriptFileApi = (function (_super) {
        __extends(ScriptFileApi, _super);
        function ScriptFileApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ScriptFileApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ScriptFileApi;
    }(ScriptFilesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SystemPropertiesApi$1 = (function (_super) {
        __extends(SystemPropertiesApi$$1, _super);
        function SystemPropertiesApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SystemPropertiesApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return SystemPropertiesApi$$1;
    }(SystemPropertiesApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskApi = (function () {
        function TaskApi() {
        }
        TaskApi.prototype.init = function (alfrescoApi) {
            this.taskactionsApi = new TaskActionsApi(alfrescoApi);
            this.activitiCommentsApi = new ActivitiCommentsApi(alfrescoApi);
            this.checklistsApi = new ChecklistsApi(alfrescoApi);
            this.taskFormsApi = new TaskFormsApi(alfrescoApi);
            this.tasksApi = new TasksApi(alfrescoApi);
            this.contentApi = new ContentApi$1(alfrescoApi);
        };
        TaskApi.prototype.addSubtask = function (taskId, taskRepresentation) {
            return this.checklistsApi.addSubtask(taskId, taskRepresentation);
        };
        TaskApi.prototype.addTaskComment = function (commentRequest, taskId) {
            return this.activitiCommentsApi.addTaskComment(commentRequest, taskId);
        };
        TaskApi.prototype.assignTask = function (taskId, userIdentifier) {
            return this.taskactionsApi.assignTask(taskId, userIdentifier);
        };
        TaskApi.prototype.attachForm = function (taskId, formIdentifier) {
            return this.taskactionsApi.attachForm(taskId, formIdentifier);
        };
        TaskApi.prototype.claimTask = function (taskId) {
            return this.taskactionsApi.claimTask(taskId);
        };
        TaskApi.prototype.completeTaskForm = function (taskId, completeTaskFormRepresentation) {
            return this.taskFormsApi.completeTaskForm(taskId, completeTaskFormRepresentation);
        };
        TaskApi.prototype.completeTask = function (taskId) {
            return this.taskactionsApi.completeTask(taskId);
        };
        TaskApi.prototype.createNewTask = function (taskRepresentation) {
            return this.tasksApi.createNewTask(taskRepresentation);
        };
        TaskApi.prototype.createRelatedContentOnTask = function (taskId, relatedContent, opts) {
            return this.contentApi.createRelatedContentOnTask(taskId, relatedContent, opts);
        };
        TaskApi.prototype.deleteTask = function (taskId) {
            return this.tasksApi.deleteTask(taskId);
        };
        TaskApi.prototype.filterTasks = function (tasksFilter) {
            return this.tasksApi.filterTasks(tasksFilter);
        };
        TaskApi.prototype.getChecklist = function (taskId) {
            return this.checklistsApi.getChecklist(taskId);
        };
        TaskApi.prototype.getTaskAuditLog = function (taskId) {
            return this.tasksApi.getTaskAuditLog(taskId);
        };
        TaskApi.prototype.getTaskAuditJson = function (taskId) {
            return this.tasksApi.getTaskAuditLog(taskId);
        };
        TaskApi.prototype.getTaskAuditPdf = function (taskId) {
            return this.tasksApi.getTaskAuditLog(taskId);
        };
        TaskApi.prototype.getRelatedContentForTask = function (taskId, opts) {
            return this.contentApi.getRelatedContentForTask(taskId, opts);
        };
        TaskApi.prototype.getRestFieldValuesColumn = function (taskId, field, column) {
            return this.taskFormsApi.getRestFieldColumnValues(taskId, field, column);
        };
        TaskApi.prototype.getRestFieldValues = function (taskId, field) {
            return this.taskFormsApi.getRestFieldValues(taskId, field);
        };
        TaskApi.prototype.getTaskComments = function (taskId, opts) {
            return this.activitiCommentsApi.getTaskComments(taskId, opts);
        };
        TaskApi.prototype.getTaskForm = function (taskId) {
            return this.taskFormsApi.getTaskForm(taskId);
        };
        TaskApi.prototype.getTask = function (taskId) {
            return this.tasksApi.getTask(taskId);
        };
        TaskApi.prototype.involveUser = function (taskId, userIdentifier) {
            return this.taskactionsApi.involveUser(taskId, userIdentifier);
        };
        TaskApi.prototype.listTasks = function (tasksQuery) {
            return this.tasksApi.listTasks(tasksQuery);
        };
        TaskApi.prototype.orderChecklist = function (taskId, orderRepresentation) {
            return this.checklistsApi.orderChecklist(taskId, orderRepresentation);
        };
        TaskApi.prototype.removeForm = function (taskId) {
            return this.taskactionsApi.removeForm(taskId);
        };
        TaskApi.prototype.removeInvolvedUser = function (taskId, groupId) {
            return this.taskactionsApi.removeInvolvedUser(taskId, groupId);
        };
        TaskApi.prototype.saveTaskForm = function (taskId, saveTaskFormRepresentation) {
            return this.taskFormsApi.saveTaskForm(taskId, saveTaskFormRepresentation);
        };
        TaskApi.prototype.unclaimTask = function (taskId) {
            return this.taskactionsApi.unclaimTask(taskId);
        };
        TaskApi.prototype.updateTask = function (taskId, updated) {
            return this.tasksApi.updateTask(taskId, updated);
        };
        return TaskApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskActionsApi$1 = (function (_super) {
        __extends(TaskActionsApi$$1, _super);
        function TaskActionsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskActionsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TaskActionsApi$$1;
    }(TaskActionsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskCheckListApi = (function (_super) {
        __extends(TaskCheckListApi, _super);
        function TaskCheckListApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskCheckListApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TaskCheckListApi;
    }(ChecklistsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TaskFormsApi$1 = (function (_super) {
        __extends(TaskFormsApi$$1, _super);
        function TaskFormsApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TaskFormsApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TaskFormsApi$$1;
    }(TaskFormsApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var TemporaryApi$1 = (function (_super) {
        __extends(TemporaryApi$$1, _super);
        function TemporaryApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TemporaryApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return TemporaryApi$$1;
    }(TemporaryApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserApi = (function (_super) {
        __extends(UserApi, _super);
        function UserApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserApi.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return UserApi;
    }(UsersApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UserFiltersApi$1 = (function (_super) {
        __extends(UserFiltersApi$$1, _super);
        function UserFiltersApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UserFiltersApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return UserFiltersApi$$1;
    }(UserFiltersApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var UsersWorkflowApi = (function () {
        function UsersWorkflowApi() {
        }
        UsersWorkflowApi.prototype.init = function (alfrescoApi) {
            this.usersApi = new UsersApi(alfrescoApi);
        };
        UsersWorkflowApi.prototype.getUsers = function (opts) {
            return this.usersApi.getUsers(opts);
        };
        return UsersWorkflowApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ReportApi$1 = (function (_super) {
        __extends(ReportApi$$1, _super);
        function ReportApi$$1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ReportApi$$1.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.processClient;
        };
        return ReportApi$$1;
    }(ReportApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var APS_LEGACY_APIS = {
        AlfrescoApi: AlfrescoApiActiviti,
        AboutApi: AboutApi$1,
        AdminEndpointsApi: AdminEndpointsApi$1,
        AdminGroupsApi: AdminGroupsApi$1,
        AdminTenantsApi: AdminTenantsApi$1,
        AdminUsersApi: AdminUsersApi$1,
        AppsApi: AppsApi,
        AppsDefinitionApi: AppsDefinitionApi,
        AppsRuntimeApi: AppsRuntimeApi,
        CommentsApi: CommentsApi$2,
        ContentApi: ContentApi$2,
        ContentRenditionApi: ContentRenditionApi,
        EditorApi: EditorApi,
        GroupsApi: GroupsApi$2,
        IDMSyncApi: IDMSyncApi$1,
        IntegrationAccountApi: IntegrationAccountApi,
        IntegrationAlfrescoCloudApi: IntegrationAlfrescoCloudApi$1,
        IntegrationAlfrescoOnPremiseApi: IntegrationAlfrescoOnPremiseApi$1,
        IntegrationBoxApi: IntegrationBoxApi$1,
        IntegrationDriveApi: IntegrationDriveApi$1,
        ModelBpmnApi: ModelBpmnApi,
        ModelJsonBpmnApi: ModelJsonBpmnApi$1,
        ModelsApi: ModelsApi$1,
        ModelsHistoryApi: ModelsHistoryApi$1,
        ProcessApi: ProcessApi,
        ProcessDefinitionsApi: ProcessDefinitionsApi$1,
        ProcessDefinitionsFormApi: ProcessDefinitionsFormApi,
        ProcessInstancesApi: ProcessInstancesApi$1,
        ProcessInstancesInformationApi: ProcessInstancesInformationApi,
        ProcessInstancesListingApi: ProcessInstancesListingApi,
        ProcessInstanceVariablesApi: ProcessInstanceVariablesApi$1,
        ProcessScopeApi: ProcessScopeApi,
        ProfileApi: ProfileApi,
        ScriptFileApi: ScriptFileApi,
        SystemPropertiesApi: SystemPropertiesApi$1,
        TaskApi: TaskApi,
        TaskActionsApi: TaskActionsApi$1,
        TaskCheckListApi: TaskCheckListApi,
        TaskFormsApi: TaskFormsApi$1,
        TemporaryApi: TemporaryApi$1,
        UserApi: UserApi,
        UserFiltersApi: UserFiltersApi$1,
        UsersWorkflowApi: UsersWorkflowApi,
        ReportApi: ReportApi$1
    };
    (function (Activiti) {
        var AlfrescoApi = (function (_super) {
            __extends(AlfrescoApi, _super);
            function AlfrescoApi() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AlfrescoApi;
        }(AlfrescoApiActiviti));
        Activiti.AlfrescoApi = AlfrescoApi;
        var AboutApi$$1 = (function (_super) {
            __extends(AboutApi$$1, _super);
            function AboutApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AboutApi$$1;
        }(AboutApi$1));
        Activiti.AboutApi = AboutApi$$1;
        var AdminEndpointsApi$$1 = (function (_super) {
            __extends(AdminEndpointsApi$$1, _super);
            function AdminEndpointsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminEndpointsApi$$1;
        }(AdminEndpointsApi$1));
        Activiti.AdminEndpointsApi = AdminEndpointsApi$$1;
        var AdminGroupsApi$$1 = (function (_super) {
            __extends(AdminGroupsApi$$1, _super);
            function AdminGroupsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminGroupsApi$$1;
        }(AdminGroupsApi$1));
        Activiti.AdminGroupsApi = AdminGroupsApi$$1;
        var AdminTenantsApi$$1 = (function (_super) {
            __extends(AdminTenantsApi$$1, _super);
            function AdminTenantsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminTenantsApi$$1;
        }(AdminTenantsApi$1));
        Activiti.AdminTenantsApi = AdminTenantsApi$$1;
        var AdminUsersApi$$1 = (function (_super) {
            __extends(AdminUsersApi$$1, _super);
            function AdminUsersApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AdminUsersApi$$1;
        }(AdminUsersApi$1));
        Activiti.AdminUsersApi = AdminUsersApi$$1;
        var AppsApi$$1 = (function (_super) {
            __extends(AppsApi$$1, _super);
            function AppsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AppsApi$$1;
        }(AppsApi));
        Activiti.AppsApi = AppsApi$$1;
        var AppsDefinitionApi$$1 = (function (_super) {
            __extends(AppsDefinitionApi$$1, _super);
            function AppsDefinitionApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AppsDefinitionApi$$1;
        }(AppsDefinitionApi));
        Activiti.AppsDefinitionApi = AppsDefinitionApi$$1;
        var AppsRuntimeApi$$1 = (function (_super) {
            __extends(AppsRuntimeApi$$1, _super);
            function AppsRuntimeApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return AppsRuntimeApi$$1;
        }(AppsRuntimeApi));
        Activiti.AppsRuntimeApi = AppsRuntimeApi$$1;
        var CommentsApi$$1 = (function (_super) {
            __extends(CommentsApi$$1, _super);
            function CommentsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return CommentsApi$$1;
        }(CommentsApi$2));
        Activiti.CommentsApi = CommentsApi$$1;
        var ContentApi$$1 = (function (_super) {
            __extends(ContentApi$$1, _super);
            function ContentApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ContentApi$$1;
        }(ContentApi$2));
        Activiti.ContentApi = ContentApi$$1;
        var ContentRenditionApi$$1 = (function (_super) {
            __extends(ContentRenditionApi$$1, _super);
            function ContentRenditionApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ContentRenditionApi$$1;
        }(ContentRenditionApi));
        Activiti.ContentRenditionApi = ContentRenditionApi$$1;
        var EditorApi$$1 = (function (_super) {
            __extends(EditorApi$$1, _super);
            function EditorApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return EditorApi$$1;
        }(EditorApi));
        Activiti.EditorApi = EditorApi$$1;
        var GroupsApi$$1 = (function (_super) {
            __extends(GroupsApi$$1, _super);
            function GroupsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return GroupsApi$$1;
        }(GroupsApi$2));
        Activiti.GroupsApi = GroupsApi$$1;
        var IDMSyncApi$$1 = (function (_super) {
            __extends(IDMSyncApi$$1, _super);
            function IDMSyncApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IDMSyncApi$$1;
        }(IDMSyncApi$1));
        Activiti.IDMSyncApi = IDMSyncApi$$1;
        var IntegrationAccountApi$$1 = (function (_super) {
            __extends(IntegrationAccountApi$$1, _super);
            function IntegrationAccountApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationAccountApi$$1;
        }(IntegrationAccountApi));
        Activiti.IntegrationAccountApi = IntegrationAccountApi$$1;
        var IntegrationAlfrescoCloudApi$$1 = (function (_super) {
            __extends(IntegrationAlfrescoCloudApi$$1, _super);
            function IntegrationAlfrescoCloudApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationAlfrescoCloudApi$$1;
        }(IntegrationAlfrescoCloudApi$1));
        Activiti.IntegrationAlfrescoCloudApi = IntegrationAlfrescoCloudApi$$1;
        var IntegrationAlfrescoOnPremiseApi$$1 = (function (_super) {
            __extends(IntegrationAlfrescoOnPremiseApi$$1, _super);
            function IntegrationAlfrescoOnPremiseApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationAlfrescoOnPremiseApi$$1;
        }(IntegrationAlfrescoOnPremiseApi$1));
        Activiti.IntegrationAlfrescoOnPremiseApi = IntegrationAlfrescoOnPremiseApi$$1;
        var IntegrationBoxApi$$1 = (function (_super) {
            __extends(IntegrationBoxApi$$1, _super);
            function IntegrationBoxApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationBoxApi$$1;
        }(IntegrationBoxApi$1));
        Activiti.IntegrationBoxApi = IntegrationBoxApi$$1;
        var IntegrationDriveApi$$1 = (function (_super) {
            __extends(IntegrationDriveApi$$1, _super);
            function IntegrationDriveApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return IntegrationDriveApi$$1;
        }(IntegrationDriveApi$1));
        Activiti.IntegrationDriveApi = IntegrationDriveApi$$1;
        var ModelBpmnApi$$1 = (function (_super) {
            __extends(ModelBpmnApi$$1, _super);
            function ModelBpmnApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelBpmnApi$$1;
        }(ModelBpmnApi));
        Activiti.ModelBpmnApi = ModelBpmnApi$$1;
        var ModelJsonBpmnApi$$1 = (function (_super) {
            __extends(ModelJsonBpmnApi$$1, _super);
            function ModelJsonBpmnApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelJsonBpmnApi$$1;
        }(ModelJsonBpmnApi$1));
        Activiti.ModelJsonBpmnApi = ModelJsonBpmnApi$$1;
        var ModelsApi$$1 = (function (_super) {
            __extends(ModelsApi$$1, _super);
            function ModelsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelsApi$$1;
        }(ModelsApi$1));
        Activiti.ModelsApi = ModelsApi$$1;
        var ModelsHistoryApi$$1 = (function (_super) {
            __extends(ModelsHistoryApi$$1, _super);
            function ModelsHistoryApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ModelsHistoryApi$$1;
        }(ModelsHistoryApi$1));
        Activiti.ModelsHistoryApi = ModelsHistoryApi$$1;
        var ProcessApi$$1 = (function (_super) {
            __extends(ProcessApi$$1, _super);
            function ProcessApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessApi$$1;
        }(ProcessApi));
        Activiti.ProcessApi = ProcessApi$$1;
        var ProcessDefinitionsApi$$1 = (function (_super) {
            __extends(ProcessDefinitionsApi$$1, _super);
            function ProcessDefinitionsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessDefinitionsApi$$1;
        }(ProcessDefinitionsApi$1));
        Activiti.ProcessDefinitionsApi = ProcessDefinitionsApi$$1;
        var ProcessDefinitionsFormApi$$1 = (function (_super) {
            __extends(ProcessDefinitionsFormApi$$1, _super);
            function ProcessDefinitionsFormApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessDefinitionsFormApi$$1;
        }(ProcessDefinitionsFormApi));
        Activiti.ProcessDefinitionsFormApi = ProcessDefinitionsFormApi$$1;
        var ProcessInstancesApi$$1 = (function (_super) {
            __extends(ProcessInstancesApi$$1, _super);
            function ProcessInstancesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstancesApi$$1;
        }(ProcessInstancesApi$1));
        Activiti.ProcessInstancesApi = ProcessInstancesApi$$1;
        var ProcessInstancesInformationApi$$1 = (function (_super) {
            __extends(ProcessInstancesInformationApi$$1, _super);
            function ProcessInstancesInformationApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstancesInformationApi$$1;
        }(ProcessInstancesInformationApi));
        Activiti.ProcessInstancesInformationApi = ProcessInstancesInformationApi$$1;
        var ProcessInstancesListingApi$$1 = (function (_super) {
            __extends(ProcessInstancesListingApi$$1, _super);
            function ProcessInstancesListingApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstancesListingApi$$1;
        }(ProcessInstancesListingApi));
        Activiti.ProcessInstancesListingApi = ProcessInstancesListingApi$$1;
        var ProcessInstanceVariablesApi$$1 = (function (_super) {
            __extends(ProcessInstanceVariablesApi$$1, _super);
            function ProcessInstanceVariablesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessInstanceVariablesApi$$1;
        }(ProcessInstanceVariablesApi$1));
        Activiti.ProcessInstanceVariablesApi = ProcessInstanceVariablesApi$$1;
        var ProcessScopeApi$$1 = (function (_super) {
            __extends(ProcessScopeApi$$1, _super);
            function ProcessScopeApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProcessScopeApi$$1;
        }(ProcessScopeApi));
        Activiti.ProcessScopeApi = ProcessScopeApi$$1;
        var ProfileApi$$1 = (function (_super) {
            __extends(ProfileApi$$1, _super);
            function ProfileApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ProfileApi$$1;
        }(ProfileApi));
        Activiti.ProfileApi = ProfileApi$$1;
        var ScriptFileApi$$1 = (function (_super) {
            __extends(ScriptFileApi$$1, _super);
            function ScriptFileApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ScriptFileApi$$1;
        }(ScriptFileApi));
        Activiti.ScriptFileApi = ScriptFileApi$$1;
        var SystemPropertiesApi$$1 = (function (_super) {
            __extends(SystemPropertiesApi$$1, _super);
            function SystemPropertiesApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return SystemPropertiesApi$$1;
        }(SystemPropertiesApi$1));
        Activiti.SystemPropertiesApi = SystemPropertiesApi$$1;
        var TaskApi$$1 = (function (_super) {
            __extends(TaskApi$$1, _super);
            function TaskApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskApi$$1;
        }(TaskApi));
        Activiti.TaskApi = TaskApi$$1;
        var TaskActionsApi$$1 = (function (_super) {
            __extends(TaskActionsApi$$1, _super);
            function TaskActionsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskActionsApi$$1;
        }(TaskActionsApi$1));
        Activiti.TaskActionsApi = TaskActionsApi$$1;
        var TaskCheckListApi$$1 = (function (_super) {
            __extends(TaskCheckListApi$$1, _super);
            function TaskCheckListApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskCheckListApi$$1;
        }(TaskCheckListApi));
        Activiti.TaskCheckListApi = TaskCheckListApi$$1;
        var TaskFormsApi$$1 = (function (_super) {
            __extends(TaskFormsApi$$1, _super);
            function TaskFormsApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TaskFormsApi$$1;
        }(TaskFormsApi$1));
        Activiti.TaskFormsApi = TaskFormsApi$$1;
        var TemporaryApi$$1 = (function (_super) {
            __extends(TemporaryApi$$1, _super);
            function TemporaryApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return TemporaryApi$$1;
        }(TemporaryApi$1));
        Activiti.TemporaryApi = TemporaryApi$$1;
        var UserApi$$1 = (function (_super) {
            __extends(UserApi$$1, _super);
            function UserApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UserApi$$1;
        }(UserApi));
        Activiti.UserApi = UserApi$$1;
        var UserFiltersApi$$1 = (function (_super) {
            __extends(UserFiltersApi$$1, _super);
            function UserFiltersApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UserFiltersApi$$1;
        }(UserFiltersApi$1));
        Activiti.UserFiltersApi = UserFiltersApi$$1;
        var UsersWorkflowApi$$1 = (function (_super) {
            __extends(UsersWorkflowApi$$1, _super);
            function UsersWorkflowApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return UsersWorkflowApi$$1;
        }(UsersWorkflowApi));
        Activiti.UsersWorkflowApi = UsersWorkflowApi$$1;
        var ReportApi$$1 = (function (_super) {
            __extends(ReportApi$$1, _super);
            function ReportApi$$1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ReportApi$$1;
        }(ReportApi$1));
        Activiti.ReportApi = ReportApi$$1;
    })(exports.Activiti || (exports.Activiti = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericBucketBucketInfo = (function () {
        function GenericBucketBucketInfo(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GenericBucketBucketInfo;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericMetric = (function () {
        function GenericMetric(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return GenericMetric;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericBucket = (function () {
        function GenericBucket(input) {
            if (input) {
                Object.assign(this, input);
                if (input.metrics) {
                    this.metrics = input.metrics.map(function (item) {
                        return new GenericMetric(item);
                    });
                }
                this.bucketInfo = input.bucketInfo ? new GenericBucketBucketInfo(input.bucketInfo) : undefined;
            }
        }
        return GenericBucket;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var GenericFacetResponse = (function () {
        function GenericFacetResponse(input) {
            if (input) {
                Object.assign(this, input);
                if (input.buckets) {
                    this.buckets = input.buckets.map(function (item) {
                        return new GenericBucket(item);
                    });
                }
            }
        }
        return GenericFacetResponse;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResponseConsistency = (function () {
        function ResponseConsistency(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResponseConsistency;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultBucketsBuckets = (function () {
        function ResultBucketsBuckets(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResultBucketsBuckets;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultBuckets = (function () {
        function ResultBuckets(input) {
            if (input) {
                Object.assign(this, input);
                if (input.buckets) {
                    this.buckets = input.buckets.map(function (item) {
                        return new ResultBucketsBuckets(item);
                    });
                }
            }
        }
        return ResultBuckets;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetContextFacetQueries = (function () {
        function ResultSetContextFacetQueries(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResultSetContextFacetQueries;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.ResultSetContextSpellcheck = (function () {
        function ResultSetContextSpellcheck(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return ResultSetContextSpellcheck;
    }());
    (function (ResultSetContextSpellcheck) {
        ResultSetContextSpellcheck.TypeEnum = {
            SearchInsteadFor: 'searchInsteadFor',
            DidYouMean: 'didYouMean'
        };
    })(exports.ResultSetContextSpellcheck || (exports.ResultSetContextSpellcheck = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetContext = (function () {
        function ResultSetContext(input) {
            if (input) {
                Object.assign(this, input);
                this.consistency = input.consistency ? new ResponseConsistency(input.consistency) : undefined;
                this.request = input.request ? new SearchRequest(input.request) : undefined;
                if (input.facetQueries) {
                    this.facetQueries = input.facetQueries.map(function (item) {
                        return new ResultSetContextFacetQueries(item);
                    });
                }
                if (input.facetsFields) {
                    this.facetsFields = input.facetsFields.map(function (item) {
                        return new ResultBuckets(item);
                    });
                }
                if (input.facets) {
                    this.facets = input.facets.map(function (item) {
                        return new GenericFacetResponse(item);
                    });
                }
                if (input.spellcheck) {
                    this.spellcheck = input.spellcheck.map(function (item) {
                        return new exports.ResultSetContextSpellcheck(item);
                    });
                }
            }
        }
        return ResultSetContext;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchEntryHighlight = (function () {
        function SearchEntryHighlight(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return SearchEntryHighlight;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchEntry = (function () {
        function SearchEntry(input) {
            if (input) {
                Object.assign(this, input);
                if (input.highlight) {
                    this.highlight = input.highlight.map(function (item) {
                        return new SearchEntryHighlight(item);
                    });
                }
            }
        }
        return SearchEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultNode = (function () {
        function ResultNode(input) {
            if (input) {
                Object.assign(this, input);
                this.modifiedAt = input.modifiedAt ? DateAlfresco.parseDate(input.modifiedAt) : undefined;
                this.modifiedByUser = input.modifiedByUser ? new UserInfo(input.modifiedByUser) : undefined;
                this.createdAt = input.createdAt ? DateAlfresco.parseDate(input.createdAt) : undefined;
                this.createdByUser = input.createdByUser ? new UserInfo(input.createdByUser) : undefined;
                this.content = input.content ? new ContentInfo(input.content) : undefined;
                this.path = input.path ? new PathInfo(input.path) : undefined;
                this.search = input.search ? new SearchEntry(input.search) : undefined;
                this.archivedByUser = input.archivedByUser ? new UserInfo(input.archivedByUser) : undefined;
                this.archivedAt = input.archivedAt ? DateAlfresco.parseDate(input.archivedAt) : undefined;
            }
        }
        return ResultNode;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetRowEntry = (function () {
        function ResultSetRowEntry(input) {
            if (input) {
                Object.assign(this, input);
                this.entry = input.entry ? new ResultNode(input.entry) : undefined;
            }
        }
        return ResultSetRowEntry;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetPagingList = (function () {
        function ResultSetPagingList(input) {
            if (input) {
                Object.assign(this, input);
                this.pagination = input.pagination ? new Pagination(input.pagination) : undefined;
                this.context = input.context ? new ResultSetContext(input.context) : undefined;
                if (input.entries) {
                    this.entries = input.entries.map(function (item) {
                        return new ResultSetRowEntry(item);
                    });
                }
            }
        }
        return ResultSetPagingList;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var ResultSetPaging = (function () {
        function ResultSetPaging(input) {
            if (input) {
                Object.assign(this, input);
                this.list = input.list ? new ResultSetPagingList(input.list) : undefined;
            }
        }
        return ResultSetPaging;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var BaseApi$6 = (function () {
        function BaseApi(alfrescoApi) {
            this.apiClient = alfrescoApi.searchClient;
        }
        BaseApi.prototype.errorMessage = function (param, methodName) {
            return "Missing param " + param + " in " + methodName;
        };
        return BaseApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SearchApi = (function (_super) {
        __extends(SearchApi, _super);
        function SearchApi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SearchApi.prototype.search = function (queryBody) {
            var postBody = queryBody;
            if (queryBody === undefined || queryBody === null) {
                throw new Error("Required param 'queryBody' in search");
            }
            var pathParams = {};
            var queryParams = {};
            var headerParams = {};
            var formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            return this.apiClient.callApi('/search', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, ResultSetPaging);
        };
        return SearchApi;
    }(BaseApi$6));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var SEARCH_APIS = { SearchApi: SearchApi };

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFacetQueriesInner = (function () {
        function RequestFacetQueriesInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFacetQueriesInner;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestFilterQueriesInner = (function () {
        function RequestFilterQueriesInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestFilterQueriesInner;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    exports.RequestSortDefinitionInner = (function () {
        function RequestSortDefinitionInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestSortDefinitionInner;
    }());
    (function (RequestSortDefinitionInner) {
        RequestSortDefinitionInner.TypeEnum = {
            FIELD: 'FIELD',
            DOCUMENT: 'DOCUMENT',
            SCORE: 'SCORE'
        };
    })(exports.RequestSortDefinitionInner || (exports.RequestSortDefinitionInner = {}));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var RequestTemplatesInner = (function () {
        function RequestTemplatesInner(input) {
            if (input) {
                Object.assign(this, input);
            }
        }
        return RequestTemplatesInner;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoUpload = (function (_super) {
        __extends(AlfrescoUpload, _super);
        function AlfrescoUpload() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AlfrescoUpload.prototype.init = function (alfrescoApi) {
            this.apiClient = alfrescoApi.contentClient;
        };
        return AlfrescoUpload;
    }(UploadApi));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Emitter$1 = _Emitter;
    var ContentAuth = (function (_super) {
        __extends(ContentAuth, _super);
        function ContentAuth(config, alfrescoApi) {
            var _this = _super.call(this) || this;
            _this.className = 'ContentAuth';
            _this.setConfig(config);
            _this.authApi = new AuthenticationApi(alfrescoApi);
            Emitter$1.call(_this);
            return _this;
        }
        ContentAuth.prototype.setConfig = function (config) {
            this.config = config;
            this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
            if (this.config.domainPrefix) {
                this.ticketStorageLabel = this.config.domainPrefix.concat('-ticket-ECM');
            }
            else {
                this.ticketStorageLabel = 'ticket-ECM';
            }
            if (this.config.ticketEcm) {
                this.setTicket(config.ticketEcm);
            }
            else if (this.storage.getItem(this.ticketStorageLabel)) {
                this.setTicket(this.storage.getItem(this.ticketStorageLabel));
            }
        };
        ContentAuth.prototype.changeHost = function () {
            this.basePath = this.config.hostEcm + '/' + this.config.contextRoot + '/api/-default-/public/authentication/versions/1';
            this.ticket = undefined;
        };
        ContentAuth.prototype.saveUsername = function (username) {
            if (this.storage.supportsStorage()) {
                this.storage.setItem('ACS_USERNAME', username);
            }
        };
        ContentAuth.prototype.login = function (username, password) {
            var _this = this;
            this.authentications.basicAuth.username = username;
            this.authentications.basicAuth.password = password;
            var loginRequest = {};
            loginRequest.userId = this.authentications.basicAuth.username;
            loginRequest.password = this.authentications.basicAuth.password;
            var promise = new Promise(function (resolve, reject) {
                _this.authApi.createTicket(loginRequest)
                    .then(function (data) {
                    _this.saveUsername(username);
                    _this.setTicket(data.entry.id);
                    promise.emit('success');
                    resolve(data.entry.id);
                })
                    .catch(function (error) {
                    _this.saveUsername('');
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    else if (error.status === 403) {
                        promise.emit('forbidden');
                    }
                    else {
                        promise.emit('error');
                    }
                    reject(error);
                });
            });
            Emitter$1(promise);
            return promise;
        };
        ContentAuth.prototype.validateTicket = function () {
            var _this = this;
            this.setTicket(this.config.ticketEcm);
            var promise = new Promise(function (resolve, reject) {
                _this.authApi.validateTicket().then(function (data) {
                    _this.setTicket(data.entry.id);
                    promise.emit('success');
                    resolve(data.entry.id);
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter$1(promise);
            return promise;
        };
        ContentAuth.prototype.logout = function () {
            var _this = this;
            this.saveUsername('');
            var promise = new Promise(function (resolve, reject) {
                _this.authApi.deleteTicket().then(function () {
                    promise.emit('logout');
                    _this.invalidateSession();
                    resolve('logout');
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter$1(promise);
            return promise;
        };
        ContentAuth.prototype.setTicket = function (ticket) {
            this.authentications.basicAuth.username = 'ROLE_TICKET';
            this.authentications.basicAuth.password = ticket;
            this.config.ticketEcm = ticket;
            this.storage.setItem(this.ticketStorageLabel, ticket);
            this.ticket = ticket;
        };
        ContentAuth.prototype.getTicket = function () {
            return this.ticket;
        };
        ContentAuth.prototype.invalidateSession = function () {
            this.storage.removeItem(this.ticketStorageLabel);
            this.authentications.basicAuth.username = null;
            this.authentications.basicAuth.password = null;
            this.config.ticketEcm = null;
            this.ticket = null;
        };
        ContentAuth.prototype.isLoggedIn = function () {
            return !!this.ticket;
        };
        ContentAuth.prototype.getAuthentication = function () {
            return this.authentications;
        };
        ContentAuth.authentications = new Authentication({
            'basicAuth': { ticket: '' }, type: 'basic'
        });
        return ContentAuth;
    }(AlfrescoApiClient));
    Emitter$1(ContentAuth.prototype);

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Emitter$2 = _Emitter;
    var ProcessAuth = (function (_super) {
        __extends(ProcessAuth, _super);
        function ProcessAuth(config) {
            var _this = _super.call(this) || this;
            _this.authentications = new Authentication({
                'basicAuth': { ticket: '' }, type: 'activiti'
            });
            _this.className = 'ProcessAuth';
            _this.setConfig(config);
            Emitter$2.call(_this);
            return _this;
        }
        ProcessAuth.prototype.setConfig = function (config) {
            this.config = config;
            this.ticket = undefined;
            this.basePath = config.hostBpm + '/' + this.config.contextRootBpm;
            if (this.config.ticketBpm) {
                this.setTicket(config.ticketBpm);
            }
            else if (this.storage.getItem('ticket-BPM')) {
                this.setTicket(this.storage.getItem('ticket-BPM'));
            }
        };
        ProcessAuth.prototype.changeHost = function () {
            this.basePath = this.config.hostBpm + '/' + this.config.contextRootBpm;
            this.ticket = undefined;
        };
        ProcessAuth.prototype.changeCsrfConfig = function (disableCsrf) {
            this.config.disableCsrf = disableCsrf;
        };
        ProcessAuth.prototype.saveUsername = function (username) {
            if (this.storage.supportsStorage()) {
                this.storage.setItem('APS_USERNAME', username);
            }
        };
        ProcessAuth.prototype.login = function (username, password) {
            var _this = this;
            this.authentications.basicAuth.username = username;
            this.authentications.basicAuth.password = password;
            var postBody = {}, pathParams = {}, queryParams = {};
            var headerParams = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache'
            };
            var formParams = {
                j_username: this.authentications.basicAuth.username,
                j_password: this.authentications.basicAuth.password,
                _spring_security_remember_me: true,
                submit: 'Login'
            };
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            var promise = new Promise(function (resolve, reject) {
                _this.callApi('/app/authentication', 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
                    _this.saveUsername(username);
                    var ticket = _this.basicAuth(_this.authentications.basicAuth.username, _this.authentications.basicAuth.password);
                    _this.setTicket(ticket);
                    promise.emit('success');
                    resolve(ticket);
                }, function (error) {
                    _this.saveUsername('');
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    else if (error.status === 403) {
                        promise.emit('forbidden');
                    }
                    else {
                        promise.emit('error');
                    }
                    reject(error);
                });
            });
            Emitter$2(promise);
            return promise;
        };
        ProcessAuth.prototype.logout = function () {
            var _this = this;
            this.saveUsername('');
            var postBody = {}, pathParams = {}, queryParams = {}, headerParams = {}, formParams = {};
            var contentTypes = ['application/json'];
            var accepts = ['application/json'];
            var promise = new Promise(function (resolve, reject) {
                _this.callApi('/app/logout', 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function () {
                    _this.invalidateSession();
                    promise.emit('logout');
                    resolve('logout');
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter$2(promise);
            return promise;
        };
        ProcessAuth.prototype.setTicket = function (ticket) {
            this.authentications.basicAuth.ticket = ticket;
            this.authentications.basicAuth.password = null;
            this.config.ticketBpm = ticket;
            this.storage.setItem('ticket-BPM', ticket);
            this.ticket = ticket;
        };
        ProcessAuth.prototype.invalidateSession = function () {
            this.storage.removeItem('ticket-BPM');
            this.authentications.basicAuth.ticket = null;
            this.authentications.basicAuth.password = null;
            this.authentications.basicAuth.username = null;
            this.config.ticketBpm = null;
            this.ticket = null;
        };
        ProcessAuth.prototype.getTicket = function () {
            return this.ticket;
        };
        ProcessAuth.prototype.isLoggedIn = function () {
            return !!this.ticket;
        };
        ProcessAuth.prototype.getAuthentication = function () {
            return this.authentications;
        };
        return ProcessAuth;
    }(AlfrescoApiClient));
    Emitter$2(ProcessAuth.prototype);

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Emitter$3 = _Emitter;
    var Oauth2Auth = (function (_super) {
        __extends(Oauth2Auth, _super);
        function Oauth2Auth(config) {
            var _this = _super.call(this) || this;
            _this.authentications = new Authentication({
                'oauth2': { accessToken: '' }, type: 'oauth2', 'basicAuth': {}
            });
            _this.className = 'Oauth2Auth';
            _this.setConfig(config);
            Emitter$3.call(_this);
            return _this;
        }
        Oauth2Auth.getInstance = function (config) {
            if (!Oauth2Auth.instance) {
                Oauth2Auth.instance = new Oauth2Auth(config);
            }
            else {
                Oauth2Auth.instance.setConfig(config);
            }
            return Oauth2Auth.instance;
        };
        Oauth2Auth.prototype.setConfig = function (config) {
            this.config = config;
            if (this.config.oauth2) {
                if (this.config.oauth2.host === undefined || this.config.oauth2.host === null) {
                    throw 'Missing the required oauth2 host parameter';
                }
                if (this.config.oauth2.clientId === undefined || this.config.oauth2.clientId === null) {
                    throw 'Missing the required oauth2 clientId parameter';
                }
                if (this.config.oauth2.scope === undefined || this.config.oauth2.scope === null) {
                    throw 'Missing the required oauth2 scope parameter';
                }
                if (this.config.oauth2.secret === undefined || this.config.oauth2.secret === null) {
                    this.config.oauth2.secret = '';
                }
                if ((this.config.oauth2.redirectUri === undefined || this.config.oauth2.redirectUri === null) && this.config.oauth2.implicitFlow) {
                    throw 'Missing redirectUri required parameter';
                }
                if (!this.config.oauth2.refreshTokenTimeout) {
                    this.config.oauth2.refreshTokenTimeout = 40000;
                }
                if (!this.config.oauth2.redirectSilentIframeUri) {
                    var context_1 = '';
                    if (typeof window !== 'undefined') {
                        context_1 = window.location.origin;
                    }
                    this.config.oauth2.redirectSilentIframeUri = context_1 + '/assets/silent-refresh.html';
                }
                this.basePath = this.config.oauth2.host;
                this.host = this.config.oauth2.host;
                this.initOauth();
            }
        };
        Oauth2Auth.prototype.initOauth = function () {
            var _this = this;
            if (!this.config.oauth2.implicitFlow && this.isValidAccessToken()) {
                var accessToken = this.storage.getItem('access_token');
                this.setToken(accessToken, null);
            }
            return Promise.resolve()
                .then(function () {
                return _this.discoveryUrls();
            })
                .then(function () {
                if (_this.config.oauth2.implicitFlow) {
                    return _this.loadJwks();
                }
            })
                .then(function () {
                if (_this.config.oauth2.implicitFlow) {
                    return _this.checkFragment();
                }
            });
        };
        Oauth2Auth.prototype.discoveryUrls = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var discoveryStore = _this.storage.getItem('discovery');
                if (discoveryStore) {
                    _this.discovery = JSON.parse(discoveryStore);
                }
                if (!_this.discovery) {
                    var postBody = {}, pathParams = {}, queryParams = {}, formParams = {}, headerParams = {};
                    var contentTypes = ['application/json'];
                    var accepts = ['application/json'];
                    var url = '.well-known/openid-configuration';
                    _this.callApi(url, 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (discovery) {
                        _this.discovery = {};
                        _this.discovery.loginUrl = discovery.authorization_endpoint;
                        _this.discovery.logoutUrl = discovery.end_session_endpoint;
                        _this.discovery.grantTypesSupported = discovery.grant_types_supported;
                        _this.discovery.issuer = discovery.issuer;
                        _this.discovery.tokenEndpoint = discovery.token_endpoint;
                        _this.discovery.userinfoEndpoint = discovery.userinfo_endpoint;
                        _this.discovery.jwksUri = discovery.jwks_uri;
                        _this.discovery.sessionCheckIFrameUrl = discovery.check_session_iframe;
                        _this.emit('discovery', _this.discovery);
                        _this.storage.setItem('discovery', JSON.stringify(_this.discovery));
                        resolve(discovery);
                    }, function (error) {
                        _this.emit('error', error);
                        _this.storage.removeItem('discovery');
                        reject(error.error);
                    });
                }
                else {
                    _this.emit('discovery', _this.discovery);
                    _this.storage.setItem('discovery', JSON.stringify(_this.discovery));
                    resolve(_this.discovery);
                }
            });
        };
        Oauth2Auth.prototype.loadJwks = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var jwksStore = _this.storage.getItem('jwks');
                if (jwksStore) {
                    _this.jwks = JSON.parse(jwksStore);
                }
                if (_this.discovery.jwksUri) {
                    if (!_this.jwks) {
                        var postBody = {}, pathParams = {}, queryParams = {}, formParams = {}, headerParams = {};
                        var contentTypes = ['application/json'];
                        var accepts = ['application/json'];
                        _this.callCustomApi(_this.discovery.jwksUri, 'GET', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (jwks) {
                            _this.jwks = jwks;
                            _this.emit('jwks', jwks);
                            _this.storage.setItem('jwks', JSON.stringify(jwks));
                            resolve(jwks);
                        }, function (error) {
                            reject(error.error);
                        });
                    }
                    else {
                        _this.emit('jwks', _this.jwks);
                        resolve(_this.jwks);
                    }
                }
                else {
                    reject('jwks error');
                }
            });
        };
        Oauth2Auth.prototype.checkFragment = function (externalHash) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.hashFragmentParams = _this.getHashFragmentParams(externalHash);
                if (externalHash === undefined && _this.isValidAccessToken()) {
                    var accessToken = _this.storage.getItem('access_token');
                    _this.setToken(accessToken, null);
                    _this.silentRefresh();
                    resolve(accessToken);
                }
                if (_this.hashFragmentParams) {
                    var accessToken_1 = _this.hashFragmentParams.access_token;
                    var idToken_1 = _this.hashFragmentParams.id_token;
                    var sessionState = _this.hashFragmentParams.session_state;
                    var expiresIn_1 = _this.hashFragmentParams.expires_in;
                    if (!sessionState) {
                        reject('session state not present');
                    }
                    _this.processJWTToken(idToken_1).then(function (jwt) {
                        if (jwt) {
                            _this.storeIdToken(idToken_1, jwt.payload.exp);
                            _this.storeAccessToken(accessToken_1, expiresIn_1);
                            _this.authentications.basicAuth.username = jwt.payload.preferred_username;
                            _this.saveUsername(jwt.payload.preferred_username);
                            _this.silentRefresh();
                            resolve(accessToken_1);
                        }
                    }, function (error) {
                        reject('Validation JWT error' + error);
                    });
                }
                else {
                    if (_this.config.oauth2.silentLogin) {
                        _this.implicitLogin();
                    }
                }
            });
        };
        Oauth2Auth.prototype.padBase64 = function (base64data) {
            while (base64data.length % 4 !== 0) {
                base64data += '=';
            }
            return base64data;
        };
        Oauth2Auth.prototype.processJWTToken = function (jwt) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (jwt) {
                    var jwtArray = jwt.split('.');
                    var headerBase64 = _this.padBase64(jwtArray[0]);
                    var headerJson = _this.b64DecodeUnicode(headerBase64);
                    var header = JSON.parse(headerJson);
                    var payloadBase64 = _this.padBase64(jwtArray[1]);
                    var payloadJson = _this.b64DecodeUnicode(payloadBase64);
                    var payload = JSON.parse(payloadJson);
                    var savedNonce = _this.storage.getItem('nonce');
                    if (!payload.sub) {
                        reject('Missing sub in JWT');
                    }
                    if (payload.nonce !== savedNonce) {
                        reject('Failing nonce JWT is not corrisponding' + payload.nonce);
                    }
                    if (_this.jwks) {
                        resolve({
                            idToken: jwt,
                            payload: payload,
                            header: header
                        });
                    }
                }
            });
        };
        Oauth2Auth.prototype.b64DecodeUnicode = function (b64string) {
            var base64 = b64string.replace(/\-/g, '+').replace(/\_/g, '/');
            return decodeURIComponent(atob(base64)
                .split('')
                .map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            })
                .join(''));
        };
        Oauth2Auth.prototype.storeIdToken = function (idToken, exp) {
            this.storage.setItem('id_token', idToken);
            this.storage.setItem('id_token_expires_at', Number(exp * 1000).toString());
            this.storage.setItem('id_token_stored_at', Date.now().toString());
        };
        Oauth2Auth.prototype.storeAccessToken = function (accessToken, expiresIn, refreshToken) {
            this.storage.setItem('access_token', accessToken);
            var expiresInMilliSeconds = expiresIn * 1000;
            var now = new Date();
            var expiresAt = now.getTime() + expiresInMilliSeconds;
            this.storage.setItem('access_token_expires_in', expiresAt);
            this.storage.setItem('access_token_stored_at', Date.now().toString());
            this.setToken(accessToken, refreshToken);
        };
        Oauth2Auth.prototype.saveUsername = function (username) {
            if (this.storage.supportsStorage()) {
                this.storage.setItem('USERNAME', username);
            }
        };
        Oauth2Auth.prototype.implicitLogin = function () {
            var _this = this;
            if (!this.isValidToken() || !this.isValidAccessToken()) {
                if (this.discovery && this.discovery.loginUrl) {
                    this.redirectLogin();
                }
                else {
                    this.on('discovery', function () {
                        _this.redirectLogin();
                    });
                }
            }
            else {
                var accessToken = this.storage.getItem('access_token');
                this.setToken(accessToken, null);
            }
        };
        Oauth2Auth.prototype.isValidToken = function () {
            var validToken = false;
            if (this.getIdToken()) {
                var expiresAt = this.storage.getItem('id_token_expires_at'), now = new Date();
                if (expiresAt && parseInt(expiresAt, 10) >= now.getTime()) {
                    validToken = true;
                }
            }
            return validToken;
        };
        Oauth2Auth.prototype.isValidAccessToken = function () {
            var validAccessToken = false;
            if (this.getAccessToken()) {
                var expiresAt = this.storage.getItem('access_token_expires_in');
                var now = new Date();
                if (expiresAt && parseInt(expiresAt, 10) >= now.getTime()) {
                    validAccessToken = true;
                }
            }
            return validAccessToken;
        };
        Oauth2Auth.prototype.getIdToken = function () {
            return this.storage.getItem('id_token');
        };
        Oauth2Auth.prototype.getAccessToken = function () {
            return this.storage.getItem('access_token');
        };
        Oauth2Auth.prototype.redirectLogin = function () {
            if (this.config.oauth2.implicitFlow && typeof window !== 'undefined') {
                var href = this.composeImplicitLoginUrl();
                window.location.href = href;
                this.emit('implicit_redirect', href);
            }
        };
        Oauth2Auth.prototype.genNonce = function () {
            var text = '';
            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            for (var i = 0; i < 40; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return text;
        };
        Oauth2Auth.prototype.composeImplicitLoginUrl = function () {
            var nonce = this.genNonce();
            this.storage.setItem('nonce', nonce);
            var separation = this.discovery.loginUrl.indexOf('?') > -1 ? '&' : '?';
            return this.discovery.loginUrl +
                separation +
                'client_id=' +
                encodeURIComponent(this.config.oauth2.clientId) +
                '&redirect_uri=' +
                encodeURIComponent(this.config.oauth2.redirectUri) +
                '&scope=' +
                encodeURIComponent(this.config.oauth2.scope) +
                '&response_type=' +
                encodeURIComponent('id_token token') +
                '&nonce=' +
                encodeURIComponent(nonce);
        };
        Oauth2Auth.prototype.composeIframeLoginUrl = function () {
            var nonce = this.genNonce();
            this.storage.setItem('nonce', nonce);
            var separation = this.discovery.loginUrl.indexOf('?') > -1 ? '&' : '?';
            return this.discovery.loginUrl +
                separation +
                'client_id=' +
                encodeURIComponent(this.config.oauth2.clientId) +
                '&redirect_uri=' +
                encodeURIComponent(this.config.oauth2.redirectSilentIframeUri) +
                '&scope=' +
                encodeURIComponent(this.config.oauth2.scope) +
                '&response_type=' +
                encodeURIComponent('id_token token') +
                '&nonce=' +
                encodeURIComponent(nonce) +
                '&prompt=none';
        };
        Oauth2Auth.prototype.hasHashCharacter = function (hash) {
            return hash.indexOf('#') === 0;
        };
        Oauth2Auth.prototype.startWithHashRoute = function (hash) {
            return hash.startsWith('#/');
        };
        Oauth2Auth.prototype.getHashFragmentParams = function (externalHash) {
            var hashFragmentParams = null;
            if (typeof window !== 'undefined') {
                var hash = void 0;
                if (!externalHash) {
                    hash = decodeURIComponent(window.location.hash);
                    if (!this.startWithHashRoute(hash)) {
                        window.location.hash = '';
                    }
                }
                else {
                    hash = decodeURIComponent(externalHash);
                    this.removeHashFromSilentIframe();
                    this.destroyIframe();
                }
                if (this.hasHashCharacter(hash) && !this.startWithHashRoute(hash)) {
                    var questionMarkPosition = hash.indexOf('?');
                    if (questionMarkPosition > -1) {
                        hash = hash.substr(questionMarkPosition + 1);
                    }
                    else {
                        hash = hash.substr(1);
                    }
                    hashFragmentParams = this.parseQueryString(hash);
                }
            }
            return hashFragmentParams;
        };
        Oauth2Auth.prototype.parseQueryString = function (queryString) {
            var data = {};
            var pairs, pair, separatorIndex, escapedKey, escapedValue, key, value;
            if (queryString !== null) {
                pairs = queryString.split('&');
                for (var i = 0; i < pairs.length; i++) {
                    pair = pairs[i];
                    separatorIndex = pair.indexOf('=');
                    if (separatorIndex === -1) {
                        escapedKey = pair;
                        escapedValue = null;
                    }
                    else {
                        escapedKey = pair.substr(0, separatorIndex);
                        escapedValue = pair.substr(separatorIndex + 1);
                    }
                    key = decodeURIComponent(escapedKey);
                    value = decodeURIComponent(escapedValue);
                    if (key.substr(0, 1) === '/') {
                        key = key.substr(1);
                    }
                    data[key] = value;
                }
            }
            return data;
        };
        Oauth2Auth.prototype.silentRefresh = function () {
            var _this = this;
            if (typeof document === 'undefined') {
                return;
            }
            setTimeout(function () {
                _this.destroyIframe();
                _this.createIframe();
            }, this.config.oauth2.refreshTokenTimeout);
        };
        Oauth2Auth.prototype.removeHashFromSilentIframe = function () {
            var iframe = document.getElementById('silent_refresh_token_iframe');
            if (iframe && iframe.contentWindow.location.hash) {
                iframe.contentWindow.location.hash = '';
            }
        };
        Oauth2Auth.prototype.createIframe = function () {
            var _this = this;
            var iframe = document.createElement('iframe');
            iframe.id = 'silent_refresh_token_iframe';
            var loginUrl = this.composeIframeLoginUrl();
            iframe.setAttribute('src', loginUrl);
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            this.iFameHashListner = function () {
                var silentRefreshTokenIframe = document.getElementById('silent_refresh_token_iframe');
                var hash = silentRefreshTokenIframe.contentWindow.location.hash;
                _this.checkFragment(hash);
            };
            iframe.addEventListener('load', this.iFameHashListner);
        };
        Oauth2Auth.prototype.destroyIframe = function () {
            var iframe = document.getElementById('silent_refresh_token_iframe');
            if (iframe) {
                iframe.removeEventListener('load', this.iFameHashListner);
                document.body.removeChild(iframe);
            }
        };
        Oauth2Auth.prototype.login = function (username, password) {
            var _this = this;
            var promise = new Promise(function (resolve, reject) {
                if (_this.discovery) {
                    _this.grantPasswordLogin(username, password, resolve, reject);
                }
                else {
                    _this.on('discovery', function () {
                        _this.grantPasswordLogin(username, password, resolve, reject);
                    });
                }
            });
            return promise;
        };
        Oauth2Auth.prototype.grantPasswordLogin = function (username, password, resolve, reject) {
            var _this = this;
            var postBody = {}, pathParams = {}, queryParams = {};
            var headerParams = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };
            var formParams = {
                username: username,
                password: password,
                grant_type: 'password',
                client_id: this.config.oauth2.clientId
            };
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            var promise = this.callCustomApi(this.discovery.tokenEndpoint, 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
                _this.saveUsername(username);
                _this.storeAccessToken(data.access_token, data.expires_in, data.refresh_token);
                _this.silentRefresh();
                resolve(data);
            }, function (error) {
                if (error.error && error.error.status === 401) {
                    _this.emit('unauthorized');
                }
                _this.emit('error');
                reject(error.error);
            });
            Emitter$3(promise);
        };
        Oauth2Auth.prototype.refreshToken = function () {
            var _this = this;
            var postBody = {}, pathParams = {}, queryParams = {}, formParams = {};
            var auth = 'Basic ' + btoa(this.config.oauth2.clientId + ':' + this.config.oauth2.secret);
            var headerParams = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Cache-Control': 'no-cache',
                'Authorization': auth
            };
            queryParams = {
                refresh_token: this.authentications.oauth2.refreshToken,
                grant_type: 'refresh_token'
            };
            var contentTypes = ['application/x-www-form-urlencoded'];
            var accepts = ['application/json'];
            var promise = new Promise(function (resolve, reject) {
                _this.callCustomApi(_this.discovery.tokenEndpoint, 'POST', pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts).then(function (data) {
                    _this.setToken(data.access_token, data.refresh_token);
                    resolve(data);
                }, function (error) {
                    if (error.error.status === 401) {
                        _this.emit('unauthorized');
                    }
                    _this.emit('error');
                    reject(error.error);
                });
            });
            Emitter$3(promise);
            return promise;
        };
        Oauth2Auth.prototype.setToken = function (token, refreshToken) {
            this.authentications.oauth2.accessToken = token;
            this.authentications.oauth2.refreshToken = refreshToken;
            this.authentications.basicAuth.password = null;
            this.token = token;
            this.emit('token_issued');
        };
        Oauth2Auth.prototype.getToken = function () {
            return this.token;
        };
        Oauth2Auth.prototype.getAuthentication = function () {
            return this.authentications;
        };
        Oauth2Auth.prototype.changeHost = function (host) {
            this.config.hostOauth2 = host;
        };
        Oauth2Auth.prototype.isLoggedIn = function () {
            return !!this.authentications.oauth2.accessToken;
        };
        Oauth2Auth.prototype.logOut = function () {
            var _this = this;
            var id_token = this.getIdToken();
            this.invalidateSession();
            this.setToken(null, null);
            var separation = this.discovery.logoutUrl.indexOf('?') > -1 ? '&' : '?';
            var redirectLogout = this.config.oauth2.redirectUriLogout || this.config.oauth2.redirectUri;
            var logoutUrl = this.discovery.logoutUrl +
                separation +
                'post_logout_redirect_uri=' +
                encodeURIComponent(redirectLogout) +
                '&id_token_hint=' +
                encodeURIComponent(id_token);
            var returnPromise = Promise.resolve().then(function () {
                if (_this.config.oauth2.implicitFlow && typeof window !== 'undefined') {
                    window.location.href = logoutUrl;
                }
            });
            return returnPromise;
        };
        Oauth2Auth.prototype.invalidateSession = function () {
            this.storage.removeItem('access_token');
            this.storage.removeItem('access_token_expires_in');
            this.storage.removeItem('access_token_stored_at');
            this.storage.removeItem('id_token');
            this.storage.removeItem('id_token');
            this.storage.removeItem('id_token_claims_obj');
            this.storage.removeItem('id_token_expires_at');
            this.storage.removeItem('id_token_stored_at');
            this.storage.removeItem('nonce');
            this.storage.removeItem('jwks');
            this.storage.removeItem('discovery');
        };
        Oauth2Auth.instance = null;
        return Oauth2Auth;
    }(AlfrescoApiClient));

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Oauth2Config = (function () {
        function Oauth2Config(input) {
            Object.assign(this, input);
        }
        return Oauth2Config;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoApiConfig = (function () {
        function AlfrescoApiConfig(input) {
            this.hostEcm = 'http://127.0.0.1:8080';
            this.hostBpm = 'http://127.0.0.1:9999';
            this.authType = 'BASIC';
            this.contextRoot = 'alfresco';
            this.contextRootBpm = 'activiti-app';
            this.domainPrefix = '';
            this.provider = 'ECM';
            this.disableCsrf = false;
            this.withCredentials = false;
            Object.assign(this, input);
            this.hostEcm = input.hostEcm ? input.hostEcm : 'http://127.0.0.1:8080';
            this.hostBpm = input.hostBpm ? input.hostBpm : 'http://127.0.0.1:9999';
            this.authType = input.authType ? input.authType : 'BASIC';
            this.contextRoot = input.contextRoot ? input.contextRoot : 'alfresco';
            this.contextRootBpm = input.contextRootBpm ? input.contextRootBpm : 'activiti-app';
            this.provider = input.provider ? input.provider : 'ECM';
            this.disableCsrf = input.disableCsrf ? input.disableCsrf : false;
            this.domainPrefix = input.domainPrefix ? input.domainPrefix : '';
            this.withCredentials = input.withCredentials ? input.withCredentials : false;
            this.oauth2 = input.oauth2 ? new Oauth2Config(input.oauth2) : undefined;
        }
        return AlfrescoApiConfig;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var Emitter$4 = _Emitter;
    var AlfrescoApi = (function () {
        function AlfrescoApi(config) {
            this.on = Emitter$4.on;
            this.off = Emitter$4.off;
            this.once = Emitter$4.once;
            this.emit = Emitter$4.emit;
            this.on = (new Emitter$4()).on;
            this.off = (new Emitter$4()).off;
            this.once = (new Emitter$4()).once;
            this.emit = (new Emitter$4()).emit;
            Emitter$4.call(this);
            if (config) {
                this.setConfig(config);
            }
        }
        AlfrescoApi.prototype.setConfig = function (config) {
            if (!config) {
                config = {};
            }
            this.storage = new Storage();
            this.config = new AlfrescoApiConfig(config);
            this.clientsFactory();
            this.processClient = new ProcessClient(this.config);
            this.errorListeners();
            if (this.isOauthConfiguration()) {
                this.oauth2Auth = Oauth2Auth.getInstance(this.config);
                this.exchangeTokenForAlfTicket();
                this.setAuthenticationClientECMBPM(this.oauth2Auth.getAuthentication(), this.oauth2Auth.getAuthentication());
            }
            else {
                if (!this.processAuth) {
                    this.processAuth = new ProcessAuth(this.config);
                }
                else {
                    this.processAuth.setConfig(this.config);
                }
                if (!this.contentAuth) {
                    this.contentAuth = new ContentAuth(this.config, this);
                }
                else {
                    this.contentAuth.setConfig(config);
                }
                this.setAuthenticationClientECMBPM(this.contentAuth.getAuthentication(), this.processAuth.getAuthentication());
            }
            return config;
        };
        AlfrescoApi.prototype.clientsFactory = function () {
            if (!this.contentPrivateClient) {
                this.contentPrivateClient = new ContentClient(this.config, '/api/-default-/private/alfresco/versions/1');
            }
            else {
                this.contentPrivateClient.setConfig(this.config, '/api/-default-/private/alfresco/versions/1');
            }
            if (!this.contentClient) {
                this.contentClient = new ContentClient(this.config, '/api/-default-/public/alfresco/versions/1');
            }
            else {
                this.contentClient.setConfig(this.config, '/api/-default-/public/alfresco/versions/1');
            }
            if (!this.authClient) {
                this.authClient = new ContentClient(this.config, '/api/-default-/public/authentication/versions/1');
            }
            else {
                this.authClient.setConfig(this.config, '/api/-default-/public/authentication/versions/1');
            }
            if (!this.searchClient) {
                this.searchClient = new ContentClient(this.config, '/api/-default-/public/search/versions/1');
            }
            else {
                this.searchClient.setConfig(this.config, '/api/-default-/public/search/versions/1');
            }
            if (!this.discoveryClient) {
                this.discoveryClient = new ContentClient(this.config, '/api');
            }
            else {
                this.discoveryClient.setConfig(this.config, '/api');
            }
            if (!this.gsClient) {
                this.gsClient = new ContentClient(this.config, '/api/-default-/public/gs/versions/1');
            }
            else {
                this.gsClient.setConfig(this.config, '/api/-default-/public/gs/versions/1');
            }
            if (!this.processClient) {
                this.processClient = new ProcessClient(this.config);
            }
            else {
                this.processClient.setConfig(this.config);
            }
        };
        AlfrescoApi.prototype.exchangeTokenForAlfTicket = function () {
            var _this = this;
            this.oauth2Auth.once('token_issued', function () {
                if (_this.config.provider === 'ALL' || _this.config.provider === 'ECM') {
                    var authContentApi = new AuthenticationApi(_this);
                    authContentApi.getTicket().then(function (ticketEntry) {
                        _this.oauth2Auth.config.ticketEcm = ticketEntry.entry.id;
                        _this.emit('ticket_exchanged');
                    });
                }
            });
        };
        AlfrescoApi.prototype.errorListeners = function () {
            var _this = this;
            this.contentClient.off('error', function () {
            });
            this.authClient.off('error', function () {
            });
            this.contentPrivateClient.off('error', function () {
            });
            this.processClient.off('error', function () {
            });
            this.searchClient.off('error', function () {
            });
            this.discoveryClient.off('error', function () {
            });
            this.gsClient.off('error', function () {
            });
            this.contentClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.authClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.contentPrivateClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.processClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.searchClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.discoveryClient.on('error', function (error) {
                _this.errorHandler(error);
            });
            this.gsClient.on('error', function (error) {
                _this.errorHandler(error);
            });
        };
        AlfrescoApi.prototype.errorHandler = function (error) {
            if (error.status === 401) {
                this.invalidateSession();
            }
            this.emit('error', error);
        };
        AlfrescoApi.prototype.changeWithCredentialsConfig = function (withCredentials) {
            this.config.withCredentials = withCredentials;
        };
        AlfrescoApi.prototype.changeCsrfConfig = function (disableCsrf) {
            this.config.disableCsrf = disableCsrf;
            this.processAuth.changeCsrfConfig(disableCsrf);
        };
        AlfrescoApi.prototype.changeEcmHost = function (hostEcm) {
            this.config.hostEcm = hostEcm;
            this.contentAuth.changeHost();
            this.contentClient.changeHost();
            this.authClient.changeHost();
        };
        AlfrescoApi.prototype.changeBpmHost = function (hostBpm) {
            this.config.hostBpm = hostBpm;
            this.processAuth.changeHost();
            this.processClient.changeHost();
        };
        AlfrescoApi.prototype.login = function (username, password) {
            var _this = this;
            if (username) {
                username = username.trim();
            }
            if (this.isOauthConfiguration()) {
                var oauth2AuthPromise = void 0;
                oauth2AuthPromise = this.oauth2Auth.login(username, password);
                oauth2AuthPromise.then(function (accessToken) {
                    _this.config.accessToken = accessToken;
                }, function () {
                    console.log('login OAUTH error');
                });
                return oauth2AuthPromise;
            }
            else {
                if (this.isBpmConfiguration()) {
                    var processPromise = this.processAuth.login(username, password);
                    processPromise.then(function (ticketBpm) {
                        _this.config.ticketBpm = ticketBpm;
                    }, function () {
                        console.log('login BPM error');
                    });
                    return processPromise;
                }
                else if (this.isEcmConfiguration()) {
                    var contentPromise = this.contentAuth.login(username, password);
                    contentPromise.then(function (ticketEcm) {
                        _this.setAuthenticationClientECMBPM(_this.contentAuth.getAuthentication(), null);
                        _this.config.ticketEcm = ticketEcm;
                    }, function () {
                        console.log('login ECM error');
                    });
                    return contentPromise;
                }
                else if (this.isEcmBpmConfiguration()) {
                    var contentProcessPromise = this._loginBPMECM(username, password);
                    contentProcessPromise.then(function (data) {
                        _this.config.ticketEcm = data[0];
                        _this.config.ticketBpm = data[1];
                    });
                    return contentProcessPromise;
                }
            }
        };
        AlfrescoApi.prototype.implicitLogin = function () {
            var _this = this;
            if (!this.isOauthConfiguration()) {
                return Promise.reject('Missing the required oauth2 configuration');
            }
            return new Promise(function () {
                _this.oauth2Auth.implicitLogin();
            });
        };
        AlfrescoApi.prototype.setAuthenticationClientECMBPM = function (authECM, authBPM) {
            this.contentClient.setAuthentications(authECM);
            this.authClient.setAuthentications(authECM);
            this.searchClient.setAuthentications(authECM);
            this.contentPrivateClient.setAuthentications(authECM);
            this.processClient.setAuthentications(authBPM);
            this.searchClient.setAuthentications(authECM);
            this.discoveryClient.setAuthentications(authECM);
            this.gsClient.setAuthentications(authECM);
        };
        AlfrescoApi.prototype.loginTicket = function (ticketEcm, ticketBpm) {
            this.config.ticketEcm = ticketEcm;
            this.config.ticketBpm = ticketBpm;
            return this.contentAuth.validateTicket();
        };
        AlfrescoApi.prototype._loginBPMECM = function (username, password) {
            var _this = this;
            var contentPromise = this.contentAuth.login(username, password);
            var processPromise = this.processAuth.login(username, password);
            var promise = new Promise(function (resolve, reject) {
                Promise.all([contentPromise, processPromise]).then(function (data) {
                    promise.emit('success');
                    resolve(data);
                }, function (error) {
                    _this.contentAuth.invalidateSession();
                    _this.processAuth.invalidateSession();
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter$4(promise);
            return promise;
        };
        AlfrescoApi.prototype.logout = function () {
            var _this = this;
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.logOut();
            }
            else {
                if (this.isBpmConfiguration()) {
                    return this.processAuth.logout();
                }
                else if (this.isEcmConfiguration()) {
                    var contentPromise = this.contentAuth.logout();
                    contentPromise.then(function () {
                        _this.config.ticket = undefined;
                    }, function () {
                    });
                    return contentPromise;
                }
                else if (this.isEcmBpmConfiguration()) {
                    return this._logoutBPMECM();
                }
            }
        };
        AlfrescoApi.prototype._logoutBPMECM = function () {
            var _this = this;
            var contentPromise = this.contentAuth.logout();
            var processPromise = this.processAuth.logout();
            var promise = new Promise(function (resolve, reject) {
                Promise.all([contentPromise, processPromise]).then(function (data) {
                    _this.config.ticket = undefined;
                    promise.emit('logout');
                    resolve('logout');
                }, function (error) {
                    if (error.status === 401) {
                        promise.emit('unauthorized');
                    }
                    promise.emit('error');
                    reject(error);
                });
            });
            Emitter$4(promise);
            return promise;
        };
        AlfrescoApi.prototype.isLoggedIn = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.isLoggedIn();
            }
            else {
                if (this.isBpmConfiguration()) {
                    return this.processAuth.isLoggedIn();
                }
                else if (this.isEcmConfiguration()) {
                    return this.contentAuth.isLoggedIn();
                }
                else if (this.isEcmBpmConfiguration()) {
                    return this.contentAuth.isLoggedIn() && this.processAuth.isLoggedIn();
                }
            }
        };
        AlfrescoApi.prototype.isBpmLoggedIn = function () {
            if (this.isBpmConfiguration() || this.isEcmBpmConfiguration()) {
                if (this.isOauthConfiguration()) {
                    return this.oauth2Auth.isLoggedIn();
                }
                else {
                    return this.processAuth.isLoggedIn();
                }
            }
            return false;
        };
        AlfrescoApi.prototype.isEcmLoggedIn = function () {
            if (this.isEcmConfiguration() || this.isEcmBpmConfiguration()) {
                if (this.isOauthConfiguration()) {
                    return this.oauth2Auth.isLoggedIn();
                }
                else {
                    return this.contentAuth.isLoggedIn();
                }
            }
            return false;
        };
        AlfrescoApi.prototype.getBpmUsername = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.storage.getItem('USERNAME');
            }
            else {
                return this.processAuth.storage.getItem('APS_USERNAME');
            }
        };
        AlfrescoApi.prototype.getEcmUsername = function () {
            if (this.isOauthConfiguration()) {
                return this.oauth2Auth.storage.getItem('USERNAME');
            }
            else {
                return this.contentAuth.storage.getItem('ACS_USERNAME');
            }
        };
        AlfrescoApi.prototype.refreshToken = function () {
            if (!this.isOauthConfiguration()) {
                return Promise.reject('Missing the required oauth2 configuration');
            }
            if (this.config.oauth2.implicitFlow) {
                return Promise.reject('Manual refresh token not possible in implicit flow');
            }
            return this.oauth2Auth.refreshToken();
        };
        AlfrescoApi.prototype.getTicketAuth = function () {
            return this.oauth2Auth && this.oauth2Auth.getToken();
        };
        AlfrescoApi.prototype.setTicket = function (ticketEcm, TicketBpm) {
            if (this.contentAuth) {
                this.contentAuth.setTicket(ticketEcm);
            }
            if (this.processAuth) {
                this.processAuth.setTicket(TicketBpm);
            }
        };
        AlfrescoApi.prototype.invalidateSession = function () {
            if (this.oauth2Auth) {
                this.oauth2Auth.invalidateSession();
            }
            else {
                this.contentAuth.invalidateSession();
                this.processAuth.invalidateSession();
            }
        };
        AlfrescoApi.prototype.getTicketBpm = function () {
            return this.processAuth && this.processAuth.getTicket();
        };
        AlfrescoApi.prototype.getTicketEcm = function () {
            return this.contentAuth && this.contentAuth.getTicket();
        };
        AlfrescoApi.prototype.getTicket = function () {
            return [this.contentAuth.getTicket(), this.processAuth.getTicket()];
        };
        AlfrescoApi.prototype.isBpmConfiguration = function () {
            return this.config.provider && this.config.provider.toUpperCase() === 'BPM';
        };
        AlfrescoApi.prototype.isEcmConfiguration = function () {
            return this.config.provider && this.config.provider.toUpperCase() === 'ECM';
        };
        AlfrescoApi.prototype.isOauthConfiguration = function () {
            return this.config.authType === 'OAUTH';
        };
        AlfrescoApi.prototype.isEcmBpmConfiguration = function () {
            return this.config.provider && this.config.provider.toUpperCase() === 'ALL';
        };
        return AlfrescoApi;
    }());

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
    var AlfrescoApiCompatibility = (function (_super) {
        __extends(AlfrescoApiCompatibility, _super);
        function AlfrescoApiCompatibility(config) {
            var _this = _super.call(this, config) || this;
            _this.core = {};
            _this.activiti = {};
            _this.auth = {};
            _this.search = {};
            _this.gsCore = {};
            _this.gsClassification = {};
            _this.discovery = {};
            _this.initObjects();
            return _this;
        }
        AlfrescoApiCompatibility.prototype.configureJsApi = function (config) {
            this.setConfig(config);
        };
        AlfrescoApiCompatibility.prototype.initObjects = function () {
            this._instantiateOldObjects(CONTENT_LEGACY_APIS, this.core);
            this._instantiateOldObjects(APS_LEGACY_APIS, this.activiti);
            this._instantiateNewObjects(AUTH_APIS, this.auth);
            this._instantiateNewObjects(SEARCH_APIS, this.search);
            this._instantiateNewObjects(DISCOVERY_APIS, this.discovery);
            this._instantiateNewObjects(GS_CORE_APIS, this.gsCore);
            this._instantiateNewObjects(GS_CLASSIFICATION_APIS, this.gsClassification);
            this.nodes = this.node = this.core.nodesApi;
            this.content = new ContentApi(this);
            this.upload = new AlfrescoUpload(this);
            this.webScript = this.core.webscriptApi;
            this.bpmClient = this.processClient;
            this.ecmClient = this.contentClient;
        };
        AlfrescoApiCompatibility.prototype._instantiateOldObjects = function (module, moduleCopy) {
            var _this = this;
            var classArray = Object.keys(module);
            classArray.forEach(function (currentClass) {
                moduleCopy[currentClass] = module[currentClass];
                var obj = _this._stringToObject(currentClass, module);
                var nameObj = _this._lowerFirst(currentClass);
                obj.init(_this);
                moduleCopy[nameObj] = obj;
            });
        };
        AlfrescoApiCompatibility.prototype._stringToObject = function (nameClass, module) {
            try {
                if (typeof module[nameClass] === 'function') {
                    return new module[nameClass]();
                }
            }
            catch (error) {
                console.log(nameClass + '  ' + error);
            }
        };
        AlfrescoApiCompatibility.prototype._instantiateNewObjects = function (module, moduleCopy) {
            var _this = this;
            var classArray = Object.keys(module);
            classArray.forEach(function (currentClass) {
                moduleCopy[currentClass] = module[currentClass];
                var nameObj = _this._lowerFirst(currentClass);
                moduleCopy[nameObj] = new module[currentClass](_this);
            });
        };
        AlfrescoApiCompatibility.prototype._lowerFirst = function (text) {
            return text.charAt(0).toLowerCase() + text.slice(1);
        };
        return AlfrescoApiCompatibility;
    }(AlfrescoApi));

    /*!
     * @license
     * Copyright 2018 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /*!
    * @license
    * Copyright 2018 Alfresco Software, Ltd.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

    exports.CONTENT_APIS = CONTENT_APIS;
    exports.ActionsApi = ActionsApi;
    exports.ActivitiesApi = ActivitiesApi;
    exports.AuditApi = AuditApi;
    exports.CommentsApi = CommentsApi;
    exports.DownloadsApi = DownloadsApi;
    exports.FavoritesApi = FavoritesApi;
    exports.GroupsApi = GroupsApi;
    exports.NetworksApi = NetworksApi;
    exports.NodesApi = NodesApi;
    exports.PeopleApi = PeopleApi;
    exports.PreferencesApi = PreferencesApi;
    exports.ProbesApi = ProbesApi;
    exports.QueriesApi = QueriesApi;
    exports.RatingsApi = RatingsApi;
    exports.RenditionsApi = RenditionsApi;
    exports.SharedlinksApi = SharedlinksApi;
    exports.SitesApi = SitesApi;
    exports.TagsApi = TagsApi;
    exports.TrashcanApi = TrashcanApi;
    exports.VersionsApi = VersionsApi;
    exports.WebscriptApi = WebscriptApi;
    exports.ClassesApi = ClassesApi;
    exports.UploadApi = UploadApi;
    exports.ContentApi = ContentApi;
    exports.ActionBodyExec = ActionBodyExec;
    exports.ActionDefinition = ActionDefinition;
    exports.ActionDefinitionEntry = ActionDefinitionEntry;
    exports.ActionDefinitionList = ActionDefinitionList;
    exports.ActionDefinitionListList = ActionDefinitionListList;
    exports.ActionExecResult = ActionExecResult;
    exports.ActionExecResultEntry = ActionExecResultEntry;
    exports.ActionParameterDefinition = ActionParameterDefinition;
    exports.Activity = Activity;
    exports.ActivityEntry = ActivityEntry;
    exports.ActivityPaging = ActivityPaging;
    exports.ActivityPagingList = ActivityPagingList;
    exports.Association = Association;
    exports.AssociationBody = AssociationBody;
    exports.AssociationEntry = AssociationEntry;
    exports.AssociationInfo = AssociationInfo;
    exports.AuditApp = AuditApp;
    exports.AuditAppEntry = AuditAppEntry;
    exports.AuditAppPaging = AuditAppPaging;
    exports.AuditAppPagingList = AuditAppPagingList;
    exports.AuditBodyUpdate = AuditBodyUpdate;
    exports.AuditEntry = AuditEntry;
    exports.AuditEntryEntry = AuditEntryEntry;
    exports.AuditEntryPaging = AuditEntryPaging;
    exports.AuditEntryPagingList = AuditEntryPagingList;
    exports.Capabilities = Capabilities;
    exports.ChildAssociation = ChildAssociation;
    exports.ChildAssociationBody = ChildAssociationBody;
    exports.ChildAssociationEntry = ChildAssociationEntry;
    exports.ChildAssociationInfo = ChildAssociationInfo;
    exports.ClientBody = ClientBody;
    exports.Comment = Comment;
    exports.CommentBody = CommentBody;
    exports.CommentEntry = CommentEntry;
    exports.CommentPaging = CommentPaging;
    exports.CommentPagingList = CommentPagingList;
    exports.Company = Company;
    exports.ContentInfo = ContentInfo;
    exports.DeletedNodeBodyRestore = DeletedNodeBodyRestore;
    exports.DeletedNodeEntry = DeletedNodeEntry;
    exports.DeletedNodesPaging = DeletedNodesPaging;
    exports.DeletedNodesPagingList = DeletedNodesPagingList;
    exports.DownloadBodyCreate = DownloadBodyCreate;
    exports.DownloadEntry = DownloadEntry;
    exports.ErrorError = ErrorError;
    exports.Favorite = Favorite;
    exports.FavoriteBodyCreate = FavoriteBodyCreate;
    exports.FavoriteEntry = FavoriteEntry;
    exports.FavoritePaging = FavoritePaging;
    exports.FavoritePagingList = FavoritePagingList;
    exports.FavoriteSite = FavoriteSite;
    exports.FavoriteSiteBodyCreate = FavoriteSiteBodyCreate;
    exports.FavoriteSiteEntry = FavoriteSiteEntry;
    exports.Group = Group;
    exports.GroupBodyCreate = GroupBodyCreate;
    exports.GroupBodyUpdate = GroupBodyUpdate;
    exports.GroupEntry = GroupEntry;
    exports.GroupMemberEntry = GroupMemberEntry;
    exports.GroupMemberPaging = GroupMemberPaging;
    exports.GroupMemberPagingList = GroupMemberPagingList;
    exports.GroupPaging = GroupPaging;
    exports.GroupPagingList = GroupPagingList;
    exports.ModelError = ModelError;
    exports.NetworkQuota = NetworkQuota;
    exports.Node = Node;
    exports.NodeAssociationEntry = NodeAssociationEntry;
    exports.NodeAssociationPaging = NodeAssociationPaging;
    exports.NodeAssociationPagingList = NodeAssociationPagingList;
    exports.NodeBodyCopy = NodeBodyCopy;
    exports.NodeBodyCreate = NodeBodyCreate;
    exports.NodeBodyCreateAssociation = NodeBodyCreateAssociation;
    exports.NodeBodyMove = NodeBodyMove;
    exports.NodeBodyUpdate = NodeBodyUpdate;
    exports.NodeChildAssociationEntry = NodeChildAssociationEntry;
    exports.NodeChildAssociationPaging = NodeChildAssociationPaging;
    exports.NodeChildAssociationPagingList = NodeChildAssociationPagingList;
    exports.NodeEntry = NodeEntry;
    exports.NodePaging = NodePaging;
    exports.NodePagingList = NodePagingList;
    exports.Pagination = Pagination;
    exports.PasswordResetBody = PasswordResetBody;
    exports.PathElement = PathElement;
    exports.PathInfo = PathInfo;
    exports.PermissionsBodyUpdate = PermissionsBodyUpdate;
    exports.PermissionsInfo = PermissionsInfo;
    exports.Person = Person;
    exports.PersonBodyCreate = PersonBodyCreate;
    exports.PersonBodyUpdate = PersonBodyUpdate;
    exports.PersonEntry = PersonEntry;
    exports.PersonNetworkEntry = PersonNetworkEntry;
    exports.PersonNetworkPaging = PersonNetworkPaging;
    exports.PersonNetworkPagingList = PersonNetworkPagingList;
    exports.PersonPaging = PersonPaging;
    exports.PersonPagingList = PersonPagingList;
    exports.Preference = Preference;
    exports.PreferenceEntry = PreferenceEntry;
    exports.PreferencePaging = PreferencePaging;
    exports.PreferencePagingList = PreferencePagingList;
    exports.ProbeEntry = ProbeEntry;
    exports.ProbeEntryEntry = ProbeEntryEntry;
    exports.Rating = Rating;
    exports.RatingAggregate = RatingAggregate;
    exports.RatingEntry = RatingEntry;
    exports.RatingPaging = RatingPaging;
    exports.RatingPagingList = RatingPagingList;
    exports.RenditionBodyCreate = RenditionBodyCreate;
    exports.RenditionEntry = RenditionEntry;
    exports.RenditionPaging = RenditionPaging;
    exports.RenditionPagingList = RenditionPagingList;
    exports.RevertBody = RevertBody;
    exports.SharedLink = SharedLink;
    exports.SharedLinkBodyCreate = SharedLinkBodyCreate;
    exports.SharedLinkBodyEmail = SharedLinkBodyEmail;
    exports.SharedLinkEntry = SharedLinkEntry;
    exports.SharedLinkPaging = SharedLinkPaging;
    exports.SharedLinkPagingList = SharedLinkPagingList;
    exports.SiteBodyCreate = exports.SiteBody;
    exports.SiteContainer = SiteContainer;
    exports.SiteContainerEntry = SiteContainerEntry;
    exports.SiteContainerPaging = SiteContainerPaging;
    exports.SiteContainerPagingList = SiteContainerPagingList;
    exports.SiteEntry = SiteEntry;
    exports.SiteMemberEntry = SiteMemberEntry;
    exports.SiteMemberPaging = SiteMemberPaging;
    exports.SiteMemberPagingList = SiteMemberPagingList;
    exports.SiteMembershipApprovalBody = SiteMembershipApprovalBody;
    exports.SiteMembershipBodyCreate = exports.SiteMemberBody;
    exports.SiteMembershipBodyUpdate = exports.SiteMemberRoleBody;
    exports.SiteMembershipRejectionBody = SiteMembershipRejectionBody;
    exports.SiteMembershipRequest = SiteMembershipRequest;
    exports.SiteMembershipRequestBodyCreate = SiteMembershipRequestBodyCreate;
    exports.SiteMembershipRequestBodyUpdate = SiteMembershipRequestBodyUpdate;
    exports.SiteMembershipRequestEntry = SiteMembershipRequestEntry;
    exports.SiteMembershipRequestPaging = SiteMembershipRequestPaging;
    exports.SiteMembershipRequestPagingList = SiteMembershipRequestPagingList;
    exports.SiteMembershipRequestWithPerson = SiteMembershipRequestWithPerson;
    exports.SiteMembershipRequestWithPersonEntry = SiteMembershipRequestWithPersonEntry;
    exports.SiteMembershipRequestWithPersonPaging = SiteMembershipRequestWithPersonPaging;
    exports.SiteMembershipRequestWithPersonPagingList = SiteMembershipRequestWithPersonPagingList;
    exports.SitePaging = SitePaging;
    exports.SitePagingList = SitePagingList;
    exports.SiteRoleEntry = SiteRoleEntry;
    exports.SiteRolePaging = SiteRolePaging;
    exports.SiteRolePagingList = SiteRolePagingList;
    exports.Tag = Tag;
    exports.TagBody = TagBody;
    exports.TagEntry = TagEntry;
    exports.TagPaging = TagPaging;
    exports.TagPagingList = TagPagingList;
    exports.UserInfo = UserInfo;
    exports.Version = Version;
    exports.VersionEntry = VersionEntry;
    exports.VersionPaging = VersionPaging;
    exports.VersionPagingList = VersionPagingList;
    exports.DeletedNode = DeletedNode;
    exports.NodeAssociation = NodeAssociation;
    exports.NodeChildAssociation = NodeChildAssociation;
    exports.DateAlfresco = DateAlfresco;
    exports.ClassDescription = ClassDescription;
    exports.ClassPropertyDescription = ClassPropertyDescription;
    exports.DISCOVERY_APIS = DISCOVERY_APIS;
    exports.DiscoveryApi = DiscoveryApi;
    exports.DiscoveryEntry = DiscoveryEntry;
    exports.EntitlementsInfo = EntitlementsInfo;
    exports.LicenseInfo = LicenseInfo;
    exports.ModuleInfo = ModuleInfo;
    exports.RepositoryEntry = RepositoryEntry;
    exports.RepositoryInfo = RepositoryInfo;
    exports.StatusInfo = StatusInfo;
    exports.VersionInfo = VersionInfo;
    exports.GS_CLASSIFICATION_APIS = GS_CLASSIFICATION_APIS;
    exports.ClassificationGuidesApi = ClassificationGuidesApi;
    exports.ClassificationReasonsApi = ClassificationReasonsApi;
    exports.DeclassificationExemptionsApi = DeclassificationExemptionsApi;
    exports.DefaultClassificationValuesApi = DefaultClassificationValuesApi;
    exports.SecurityControlSettingsApi = SecurityControlSettingsApi;
    exports.ClassificationGuideBody = ClassificationGuideBody;
    exports.ClassificationGuideEntry = ClassificationGuideEntry;
    exports.ClassificationGuidePaging = ClassificationGuidePaging;
    exports.ClassificationGuidePagingList = ClassificationGuidePagingList;
    exports.ClassificationGuidesBody = ClassificationGuidesBody;
    exports.ClassificationGuidesEntry = ClassificationGuidesEntry;
    exports.ClassificationInformation = ClassificationInformation;
    exports.ClassificationReason = ClassificationReason;
    exports.ClassificationReasonBody = ClassificationReasonBody;
    exports.ClassificationReasonEntry = ClassificationReasonEntry;
    exports.ClassificationReasonsPaging = ClassificationReasonsPaging;
    exports.ClassificationReasonsPagingList = ClassificationReasonsPagingList;
    exports.DeclassificationExemption = DeclassificationExemption;
    exports.DeclassificationExemptionBody = DeclassificationExemptionBody;
    exports.DeclassificationExemptionEntry = DeclassificationExemptionEntry;
    exports.DeclassificationExemptionsPaging = DeclassificationExemptionsPaging;
    exports.DeclassificationExemptionsPagingList = DeclassificationExemptionsPagingList;
    exports.Instruction = Instruction;
    exports.InstructionBody = InstructionBody;
    exports.InstructionEntry = InstructionEntry;
    exports.Path = Path;
    exports.SecurityControlSetting = SecurityControlSetting;
    exports.SecurityControlSettingBody = SecurityControlSettingBody;
    exports.SecurityControlSettingEntry = SecurityControlSettingEntry;
    exports.SecurityMark = SecurityMark;
    exports.SecurityMarkBody = SecurityMarkBody;
    exports.SecurityMarkInformation = SecurityMarkInformation;
    exports.SecurityMarkInformationBody = SecurityMarkInformationBody;
    exports.SecurityMarks = SecurityMarks;
    exports.SecurityMarksBody = SecurityMarksBody;
    exports.SubtopicPaging = SubtopicPaging;
    exports.Topic = Topic;
    exports.TopicBody = TopicBody;
    exports.TopicEntry = TopicEntry;
    exports.TopicPaging = TopicPaging;
    exports.TopicPagingList = TopicPagingList;
    exports.ClassificationGuideInTopic = ClassificationGuideInTopic;
    exports.ClassificationGuidesInTopic = ClassificationGuidesInTopic;
    exports.CombinedInstructionBody = CombinedInstructionBody;
    exports.ClassificationGuide = ClassificationGuide;
    exports.ClassificationGuides = ClassificationGuides;
    exports.GS_CORE_APIS = GS_CORE_APIS;
    exports.FilePlansApi = FilePlansApi;
    exports.FilesApi = FilesApi;
    exports.GsSitesApi = GsSitesApi;
    exports.RecordCategoriesApi = RecordCategoriesApi;
    exports.RecordFoldersApi = RecordFoldersApi;
    exports.RecordsApi = RecordsApi;
    exports.TransferContainersApi = TransferContainersApi;
    exports.TransfersApi = TransfersApi;
    exports.UnfiledContainersApi = UnfiledContainersApi;
    exports.UnfiledRecordFoldersApi = UnfiledRecordFoldersApi;
    exports.FilePlan = FilePlan;
    exports.FilePlanBodyUpdate = FilePlanBodyUpdate;
    exports.FilePlanComponentBodyUpdate = FilePlanComponentBodyUpdate;
    exports.FilePlanEntry = FilePlanEntry;
    exports.RMNodeBodyCreate = RMNodeBodyCreate;
    exports.RMNodeBodyCreateWithRelativePath = RMNodeBodyCreateWithRelativePath;
    exports.RMSiteBodyUpdate = RMSiteBodyUpdate;
    exports.RMSiteEntry = RMSiteEntry;
    exports.Record = Record;
    exports.RecordCategory = RecordCategory;
    exports.RecordCategoryChild = RecordCategoryChild;
    exports.RecordCategoryChildEntry = RecordCategoryChildEntry;
    exports.RecordCategoryChildPaging = RecordCategoryChildPaging;
    exports.RecordCategoryChildPagingList = RecordCategoryChildPagingList;
    exports.RecordCategoryEntry = RecordCategoryEntry;
    exports.RecordCategoryPaging = RecordCategoryPaging;
    exports.RecordCategoryPagingList = RecordCategoryPagingList;
    exports.RecordEntry = RecordEntry;
    exports.RecordFolder = RecordFolder;
    exports.RecordFolderAssociationPaging = RecordFolderAssociationPaging;
    exports.RecordFolderAssociationPagingList = RecordFolderAssociationPagingList;
    exports.RecordFolderChildAssociationEntry = RecordFolderChildAssociationEntry;
    exports.RecordFolderEntry = RecordFolderEntry;
    exports.RequestBodyFile = RequestBodyFile;
    exports.RootCategoryBodyCreate = RootCategoryBodyCreate;
    exports.Transfer = Transfer;
    exports.TransferAssociationPaging = TransferAssociationPaging;
    exports.TransferAssociationPagingList = TransferAssociationPagingList;
    exports.TransferChild = TransferChild;
    exports.TransferChildAssociationEntry = TransferChildAssociationEntry;
    exports.TransferContainer = TransferContainer;
    exports.TransferContainerAssociationPaging = TransferContainerAssociationPaging;
    exports.TransferContainerAssociationPagingList = TransferContainerAssociationPagingList;
    exports.TransferContainerBodyUpdate = TransferContainerBodyUpdate;
    exports.TransferContainerChild = TransferContainerChild;
    exports.TransferContainerChildAssociationEntry = TransferContainerChildAssociationEntry;
    exports.TransferContainerEntry = TransferContainerEntry;
    exports.TransferEntry = TransferEntry;
    exports.UnfiledContainer = UnfiledContainer;
    exports.UnfiledContainerAssociationPaging = UnfiledContainerAssociationPaging;
    exports.UnfiledContainerAssociationPagingList = UnfiledContainerAssociationPagingList;
    exports.UnfiledContainerChild = UnfiledContainerChild;
    exports.UnfiledContainerChildAssociationEntry = UnfiledContainerChildAssociationEntry;
    exports.UnfiledContainerEntry = UnfiledContainerEntry;
    exports.UnfiledRecordContainerBodyUpdate = UnfiledRecordContainerBodyUpdate;
    exports.UnfiledRecordFolder = UnfiledRecordFolder;
    exports.UnfiledRecordFolderAssociationPaging = UnfiledRecordFolderAssociationPaging;
    exports.UnfiledRecordFolderAssociationPagingList = UnfiledRecordFolderAssociationPagingList;
    exports.UnfiledRecordFolderBodyUpdate = UnfiledRecordFolderBodyUpdate;
    exports.UnfiledRecordFolderChild = UnfiledRecordFolderChild;
    exports.UnfiledRecordFolderChildAssociationEntry = UnfiledRecordFolderChildAssociationEntry;
    exports.UnfiledRecordFolderEntry = UnfiledRecordFolderEntry;
    exports.RecordFolderChildAssociation = RecordFolderChildAssociation;
    exports.TransferChildAssociation = TransferChildAssociation;
    exports.TransferContainerChildAssociation = TransferContainerChildAssociation;
    exports.UnfiledContainerChildAssociation = UnfiledContainerChildAssociation;
    exports.UnfiledRecordFolderChildAssociation = UnfiledRecordFolderChildAssociation;
    exports.AUTH_APIS = AUTH_APIS;
    exports.AuthenticationApi = AuthenticationApi;
    exports.Ticket = Ticket;
    exports.TicketBody = TicketBody;
    exports.TicketEntry = TicketEntry;
    exports.ValidTicket = ValidTicket;
    exports.ValidTicketEntry = ValidTicketEntry;
    exports.APS_APIS = APS_APIS;
    exports.AboutApi = AboutApi;
    exports.AccountIntegrationApi = AccountIntegrationApi;
    exports.AdminEndpointsApi = AdminEndpointsApi;
    exports.AdminGroupsApi = AdminGroupsApi;
    exports.AdminTenantsApi = AdminTenantsApi;
    exports.AdminUsersApi = AdminUsersApi;
    exports.AppDefinitionsApi = AppDefinitionsApi;
    exports.ChecklistsApi = ChecklistsApi;
    exports.ActivitiCommentsApi = ActivitiCommentsApi;
    exports.DataSourcesApi = DataSourcesApi;
    exports.DecisionAuditsApi = DecisionAuditsApi;
    exports.DecisionTablesApi = DecisionTablesApi;
    exports.EndpointsApi = EndpointsApi;
    exports.FormModelsApi = FormModelsApi;
    exports.ActivitiGroupsApi = ActivitiGroupsApi;
    exports.IDMSyncApi = IDMSyncApi;
    exports.IntegrationAlfrescoCloudApi = IntegrationAlfrescoCloudApi;
    exports.IntegrationAlfrescoOnPremiseApi = IntegrationAlfrescoOnPremiseApi;
    exports.IntegrationBoxApi = IntegrationBoxApi;
    exports.IntegrationDriveApi = IntegrationDriveApi;
    exports.ModelsApi = ModelsApi;
    exports.ModelsBpmnApi = ModelsBpmnApi;
    exports.ModelsHistoryApi = ModelsHistoryApi;
    exports.ProcessDefinitionsApi = ProcessDefinitionsApi;
    exports.ProcessInstancesApi = ProcessInstancesApi;
    exports.ProcessInstanceVariablesApi = ProcessInstanceVariablesApi;
    exports.ProcessScopesApi = ProcessScopesApi;
    exports.RuntimeAppDefinitionsApi = RuntimeAppDefinitionsApi;
    exports.RuntimeAppDeploymentsApi = RuntimeAppDeploymentsApi;
    exports.ScriptFilesApi = ScriptFilesApi;
    exports.SubmittedFormsApi = SubmittedFormsApi;
    exports.SystemPropertiesApi = SystemPropertiesApi;
    exports.TaskActionsApi = TaskActionsApi;
    exports.TaskFormsApi = TaskFormsApi;
    exports.TasksApi = TasksApi;
    exports.TaskVariablesApi = TaskVariablesApi;
    exports.UserFiltersApi = UserFiltersApi;
    exports.UserProfileApi = UserProfileApi;
    exports.UsersApi = UsersApi;
    exports.ReportApi = ReportApi;
    exports.ModelJsonBpmnApi = ModelJsonBpmnApi;
    exports.TemporaryApi = TemporaryApi;
    exports.AbstractGroupRepresentation = AbstractGroupRepresentation;
    exports.AbstractUserRepresentation = AbstractUserRepresentation;
    exports.AccountRepresentation = AccountRepresentation;
    exports.AddGroupCapabilitiesRepresentation = AddGroupCapabilitiesRepresentation;
    exports.AlfrescoContentRepresentation = AlfrescoContentRepresentation;
    exports.AlfrescoEndpointRepresentation = AlfrescoEndpointRepresentation;
    exports.AlfrescoNetworkRepresenation = AlfrescoNetworkRepresenation;
    exports.AlfrescoSiteRepresenation = AlfrescoSiteRepresenation;
    exports.AppDefinition = AppDefinition;
    exports.AppDefinitionPublishRepresentation = AppDefinitionPublishRepresentation;
    exports.AppDefinitionRepresentation = AppDefinitionRepresentation;
    exports.AppDefinitionSaveRepresentation = AppDefinitionSaveRepresentation;
    exports.AppDefinitionUpdateResultRepresentation = AppDefinitionUpdateResultRepresentation;
    exports.AppDeploymentRepresentation = AppDeploymentRepresentation;
    exports.AppModelDefinition = AppModelDefinition;
    exports.AssigneeIdentifierRepresentation = AssigneeIdentifierRepresentation;
    exports.AuditCalculatedValueRepresentation = AuditCalculatedValueRepresentation;
    exports.AuditDecisionExpressionInfoRepresentation = AuditDecisionExpressionInfoRepresentation;
    exports.AuditDecisionInfoRepresentation = AuditDecisionInfoRepresentation;
    exports.AuditDecisionRuleInfoRepresentation = AuditDecisionRuleInfoRepresentation;
    exports.AuditLogEntryRepresentation = AuditLogEntryRepresentation;
    exports.AuditLogFormDataRepresentation = AuditLogFormDataRepresentation;
    exports.BoxContent = BoxContent;
    exports.BoxUserAccountCredentialsRepresentation = BoxUserAccountCredentialsRepresentation;
    exports.BulkUserUpdateRepresentation = BulkUserUpdateRepresentation;
    exports.ChangePasswordRepresentation = ChangePasswordRepresentation;
    exports.ChecklistOrderRepresentation = ChecklistOrderRepresentation;
    exports.CommentAuditInfo = CommentAuditInfo;
    exports.CommentRepresentation = CommentRepresentation;
    exports.CompleteFormRepresentation = CompleteFormRepresentation;
    exports.ConditionRepresentation = ConditionRepresentation;
    exports.CreateEndpointBasicAuthRepresentation = CreateEndpointBasicAuthRepresentation;
    exports.CreateProcessInstanceRepresentation = CreateProcessInstanceRepresentation;
    exports.CreateTenantRepresentation = CreateTenantRepresentation;
    exports.DataSourceConfigRepresentation = DataSourceConfigRepresentation;
    exports.DataSourceRepresentation = DataSourceRepresentation;
    exports.DecisionAuditRepresentation = DecisionAuditRepresentation;
    exports.DecisionTaskRepresentation = DecisionTaskRepresentation;
    exports.EndpointBasicAuthRepresentation = EndpointBasicAuthRepresentation;
    exports.EndpointConfigurationRepresentation = EndpointConfigurationRepresentation;
    exports.EndpointRequestHeaderRepresentation = EndpointRequestHeaderRepresentation;
    exports.EntityAttributeScopeRepresentation = EntityAttributeScopeRepresentation;
    exports.EntityVariableScopeRepresentation = EntityVariableScopeRepresentation;
    exports.FieldValueInfo = FieldValueInfo;
    exports.File = File$1;
    exports.FormDefinitionRepresentation = FormDefinitionRepresentation;
    exports.FormFieldRepresentation = FormFieldRepresentation;
    exports.FormIdentifierRepresentation = FormIdentifierRepresentation;
    exports.FormJavascriptEventRepresentation = FormJavascriptEventRepresentation;
    exports.FormOutcomeRepresentation = FormOutcomeRepresentation;
    exports.FormRepresentation = FormRepresentation;
    exports.FormSaveRepresentation = FormSaveRepresentation;
    exports.FormScopeRepresentation = FormScopeRepresentation;
    exports.FormTabRepresentation = FormTabRepresentation;
    exports.FormValueRepresentation = FormValueRepresentation;
    exports.FormVariableRepresentation = FormVariableRepresentation;
    exports.GlobalDateFormatRepresentation = GlobalDateFormatRepresentation;
    exports.GoogleDriveContent = GoogleDriveContent;
    exports.GroupCapabilityRepresentation = GroupCapabilityRepresentation;
    exports.GroupRepresentation = GroupRepresentation;
    exports.HistoricProcessInstanceQueryRepresentation = HistoricProcessInstanceQueryRepresentation;
    exports.HistoricTaskInstanceQueryRepresentation = HistoricTaskInstanceQueryRepresentation;
    exports.IdentityLinkRepresentation = IdentityLinkRepresentation;
    exports.ImageUploadRepresentation = ImageUploadRepresentation;
    exports.LayoutRepresentation = LayoutRepresentation;
    exports.LightAppRepresentation = LightAppRepresentation;
    exports.LightGroupRepresentation = LightGroupRepresentation;
    exports.LightTenantRepresentation = LightTenantRepresentation;
    exports.LightUserRepresentation = LightUserRepresentation;
    exports.ModelRepresentation = ModelRepresentation;
    exports.NamedObject = NamedObject;
    exports.OptionRepresentation = OptionRepresentation;
    exports.PasswordValidationConstraints = PasswordValidationConstraints;
    exports.ProcessContentRepresentation = ProcessContentRepresentation;
    exports.ProcessDefinitionMetaDataRepresentation = ProcessDefinitionMetaDataRepresentation;
    exports.ProcessDefinitionRepresentation = ProcessDefinitionRepresentation;
    exports.ProcessInstanceAuditInfoRepresentation = ProcessInstanceAuditInfoRepresentation;
    exports.ProcessInstanceFilterRepresentation = ProcessInstanceFilterRepresentation;
    exports.ProcessInstanceFilterRequestRepresentation = ProcessInstanceFilterRequestRepresentation;
    exports.ProcessInstanceQueryRepresentation = exports.ProcessFilterRequestRepresentation;
    exports.ProcessInstanceRepresentation = ProcessInstanceRepresentation;
    exports.ProcessInstanceVariableRepresentation = ProcessInstanceVariableRepresentation;
    exports.ProcessScopeIdentifierRepresentation = ProcessScopeIdentifierRepresentation;
    exports.ProcessScopeRepresentation = ProcessScopeRepresentation;
    exports.ProcessScopesRequestRepresentation = ProcessScopesRequestRepresentation;
    exports.PublishIdentityInfoRepresentation = PublishIdentityInfoRepresentation;
    exports.RelatedContentRepresentation = RelatedContentRepresentation;
    exports.ResetPasswordRepresentation = ResetPasswordRepresentation;
    exports.RestVariable = RestVariable;
    exports.ResultListDataRepresentationAbstractUserRepresentation = ResultListDataRepresentationAbstractUserRepresentation;
    exports.ResultListDataRepresentationAccountRepresentation = ResultListDataRepresentationAccountRepresentation;
    exports.ResultListDataRepresentationAlfrescoContentRepresentation = ResultListDataRepresentationAlfrescoContentRepresentation;
    exports.ResultListDataRepresentationAlfrescoEndpointRepresentation = ResultListDataRepresentationAlfrescoEndpointRepresentation;
    exports.ResultListDataRepresentationAlfrescoNetworkRepresenation = ResultListDataRepresentationAlfrescoNetworkRepresenation;
    exports.ResultListDataRepresentationAlfrescoSiteRepresenation = ResultListDataRepresentationAlfrescoSiteRepresenation;
    exports.ResultListDataRepresentationAppDefinitionRepresentation = ResultListDataRepresentationAppDefinitionRepresentation;
    exports.ResultListDataRepresentationAppDeploymentRepresentation = ResultListDataRepresentationAppDeploymentRepresentation;
    exports.ResultListDataRepresentationBoxContent = ResultListDataRepresentationBoxContent;
    exports.ResultListDataRepresentationCommentRepresentation = ResultListDataRepresentationCommentRepresentation;
    exports.ResultListDataRepresentationDataSourceRepresentation = ResultListDataRepresentationDataSourceRepresentation;
    exports.ResultListDataRepresentationDecisionAuditRepresentation = ResultListDataRepresentationDecisionAuditRepresentation;
    exports.ResultListDataRepresentationDecisionTaskRepresentation = ResultListDataRepresentationDecisionTaskRepresentation;
    exports.ResultListDataRepresentationFormRepresentation = ResultListDataRepresentationFormRepresentation;
    exports.ResultListDataRepresentationGoogleDriveContent = ResultListDataRepresentationGoogleDriveContent;
    exports.ResultListDataRepresentationLightGroupRepresentation = ResultListDataRepresentationLightGroupRepresentation;
    exports.ResultListDataRepresentationLightUserRepresentation = ResultListDataRepresentationLightUserRepresentation;
    exports.ResultListDataRepresentationModelRepresentation = ResultListDataRepresentationModelRepresentation;
    exports.ResultListDataRepresentationProcessContentRepresentation = ResultListDataRepresentationProcessContentRepresentation;
    exports.ResultListDataRepresentationProcessDefinitionRepresentation = ResultListDataRepresentationProcessDefinitionRepresentation;
    exports.ResultListDataRepresentationProcessInstanceRepresentation = ResultListDataRepresentationProcessInstanceRepresentation;
    exports.ResultListDataRepresentationRelatedContentRepresentation = ResultListDataRepresentationRelatedContentRepresentation;
    exports.ResultListDataRepresentationRuntimeDecisionTableRepresentation = ResultListDataRepresentationRuntimeDecisionTableRepresentation;
    exports.ResultListDataRepresentationRuntimeFormRepresentation = ResultListDataRepresentationRuntimeFormRepresentation;
    exports.ResultListDataRepresentationSubmittedFormRepresentation = ResultListDataRepresentationSubmittedFormRepresentation;
    exports.ResultListDataRepresentationTaskRepresentation = ResultListDataRepresentationTaskRepresentation;
    exports.ResultListDataRepresentationUserProcessInstanceFilterRepresentation = ResultListDataRepresentationUserProcessInstanceFilterRepresentation;
    exports.ResultListDataRepresentationUserTaskFilterRepresentation = ResultListDataRepresentationUserTaskFilterRepresentation;
    exports.RuntimeAppDefinitionSaveRepresentation = RuntimeAppDefinitionSaveRepresentation;
    exports.RuntimeDecisionTableRepresentation = RuntimeDecisionTableRepresentation;
    exports.RuntimeFormRepresentation = RuntimeFormRepresentation;
    exports.SaveFormRepresentation = SaveFormRepresentation;
    exports.SubmittedFormRepresentation = SubmittedFormRepresentation;
    exports.SyncLogEntryRepresentation = SyncLogEntryRepresentation;
    exports.SystemPropertiesRepresentation = SystemPropertiesRepresentation;
    exports.TaskAuditInfoRepresentation = TaskAuditInfoRepresentation;
    exports.TaskFilterRequestRepresentation = TaskFilterRequestRepresentation;
    exports.TaskQueryRepresentation = exports.TaskQueryRequestRepresentation;
    exports.TaskRepresentation = TaskRepresentation;
    exports.TaskUpdateRepresentation = TaskUpdateRepresentation;
    exports.TenantEvent = TenantEvent;
    exports.TenantRepresentation = TenantRepresentation;
    exports.UserAccountCredentialsRepresentation = UserAccountCredentialsRepresentation;
    exports.UserActionRepresentation = UserActionRepresentation;
    exports.UserFilterOrderRepresentation = UserFilterOrderRepresentation;
    exports.UserIdentifierRepresentation = UserIdentifierRepresentation;
    exports.UserProcessInstanceFilterRepresentation = UserProcessInstanceFilterRepresentation;
    exports.UserRepresentation = UserRepresentation;
    exports.UserTaskFilterRepresentation = UserTaskFilterRepresentation;
    exports.ValidationErrorRepresentation = ValidationErrorRepresentation;
    exports.VariableMappingRepresentation = VariableMappingRepresentation;
    exports.VariableScopeRepresentation = VariableScopeRepresentation;
    exports.AlfrescoUpload = AlfrescoUpload;
    exports.ContentAuth = ContentAuth;
    exports.ProcessAuth = ProcessAuth;
    exports.Oauth2Auth = Oauth2Auth;
    exports.ContentClient = ContentClient;
    exports.ProcessClient = ProcessClient;
    exports.Storage = Storage;
    exports.AlfrescoApi = AlfrescoApi;
    exports.AlfrescoApiCompatibility = AlfrescoApiCompatibility;
    exports.AlfrescoApiClient = AlfrescoApiClient;
    exports.AlfrescoApiConfig = AlfrescoApiConfig;
    exports.AssocChildBody = ChildAssociationBody;
    exports.AssocTargetBody = AssociationBody;
    exports.FavoriteBody = FavoriteBodyCreate;
    exports.QueryBody = SearchRequest;
    exports.PathInfoEntity = PathInfo;
    exports.MinimalNodeEntity = NodeEntry;
    exports.DeletedNodeEntity = DeletedNodeEntry;
    exports.MinimalNode = Node;
    exports.MinimalNodeEntryEntity = Node;
    exports.PathElementEntity = PathElement;
    exports.GroupsPaging = GroupPaging;
    exports.EcmClient = ContentClient;
    exports.BpmClient = ProcessClient;
    exports.SharedLinkBody = SharedLinkBodyCreate;
    exports.EmailSharedLinkBody = SharedLinkBodyEmail;
    exports.RenditionBody = RenditionBodyCreate;
    exports.SiteMembershipRequestBody = SiteMembershipRequestBodyCreate;
    exports.FavoriteSiteBody = FavoriteSiteBodyCreate;
    exports.SiteMembershipBody = SiteMembershipRequestBodyUpdate;
    exports.NodeBody = NodeBodyCreate;
    exports.CopyBody = NodeBodyCopy;
    exports.MoveBody = NodeBodyMove;
    exports.GroupBody = GroupBodyCreate;
    exports.CONTENT_LEGACY_APIS = CONTENT_LEGACY_APIS;
    exports.APS_LEGACY_APIS = APS_LEGACY_APIS;
    exports.SEARCH_APIS = SEARCH_APIS;
    exports.SearchApi = SearchApi;
    exports.GenericBucket = GenericBucket;
    exports.GenericBucketBucketInfo = GenericBucketBucketInfo;
    exports.GenericFacetResponse = GenericFacetResponse;
    exports.GenericMetric = GenericMetric;
    exports.RequestFacetFields = RequestFacetFields;
    exports.RequestFacetIntervals = RequestFacetIntervals;
    exports.RequestFacetIntervalsIntervals = RequestFacetIntervalsIntervals;
    exports.RequestFacetQueries = RequestFacetQueries;
    exports.RequestFacetQueriesInner = RequestFacetQueriesInner;
    exports.RequestFacetSet = RequestFacetSet;
    exports.RequestFields = RequestFields;
    exports.RequestFilterQueries = RequestFilterQueries;
    exports.RequestFilterQueriesInner = RequestFilterQueriesInner;
    exports.RequestHighlight = RequestHighlight;
    exports.RequestHighlightFields = RequestHighlightFields;
    exports.RequestInclude = RequestInclude;
    exports.RequestLimits = RequestLimits;
    exports.RequestLocalization = RequestLocalization;
    exports.RequestPagination = RequestPagination;
    exports.RequestPivot = RequestPivot;
    exports.RequestRange = RequestRange;
    exports.RequestSortDefinition = RequestSortDefinition;
    exports.RequestSpellcheck = RequestSpellcheck;
    exports.RequestStats = RequestStats;
    exports.RequestTemplates = RequestTemplates;
    exports.RequestTemplatesInner = RequestTemplatesInner;
    exports.ResponseConsistency = ResponseConsistency;
    exports.ResultBuckets = ResultBuckets;
    exports.ResultBucketsBuckets = ResultBucketsBuckets;
    exports.ResultSetContext = ResultSetContext;
    exports.ResultSetContextFacetQueries = ResultSetContextFacetQueries;
    exports.ResultSetPaging = ResultSetPaging;
    exports.ResultSetPagingList = ResultSetPagingList;
    exports.ResultSetRowEntry = ResultSetRowEntry;
    exports.SearchEntry = SearchEntry;
    exports.SearchEntryHighlight = SearchEntryHighlight;
    exports.SearchRequest = SearchRequest;
    exports.ResultNode = ResultNode;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=alfresco-js-api.umd.js.map

