/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { RuleRef, RuleContext, RuleEvaluator } from '../config/rule.extensions';
import { ExtensionConfig } from '../config/extension.config';
import { ExtensionLoaderService } from './extension-loader.service';
export declare class RuleService {
    protected loader: ExtensionLoaderService;
    context: RuleContext;
    rules: Array<RuleRef>;
    evaluators: {
        [key: string]: RuleEvaluator;
    };
    constructor(loader: ExtensionLoaderService);
    setup(config: ExtensionConfig): void;
    /**
     * Adds one or more new rule evaluators to the existing set.
     * @param values The new evaluators to add
     */
    setEvaluators(values: {
        [key: string]: RuleEvaluator;
    }): void;
    /**
     * Retrieves a rule using its ID value.
     * @param id The ID value to look for
     * @returns The rule or null if not found
     */
    getRuleById(id: string): RuleRef;
    /**
     * Retrieves a RuleEvaluator function using its key name.
     * @param key Key name to look for
     * @returns RuleEvaluator or null if not found
     */
    getEvaluator(key: string): RuleEvaluator;
    /**
     * Evaluates a rule.
     * @param ruleId ID of the rule to evaluate
     * @param context (optional) Custom rule execution context.
     * @returns True if the rule passed, false otherwise
     */
    evaluateRule(ruleId: string, context?: RuleContext): boolean;
}
