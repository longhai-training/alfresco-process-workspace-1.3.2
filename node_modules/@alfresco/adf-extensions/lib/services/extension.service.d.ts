/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Type } from '@angular/core';
import { RuleEvaluator, RuleRef, RuleContext } from '../config/rule.extensions';
import { ExtensionConfig } from '../config/extension.config';
import { ExtensionLoaderService } from './extension-loader.service';
import { RouteRef } from '../config/routing.extensions';
import { ActionRef } from '../config/action.extensions';
import { ComponentRegisterService } from './component-register.service';
import { RuleService } from './rule.service';
import { ExtensionElement } from '../config/extension-element';
export declare class ExtensionService {
    protected loader: ExtensionLoaderService;
    protected componentRegister: ComponentRegisterService;
    protected ruleService: RuleService;
    protected config: ExtensionConfig;
    configPath: string;
    pluginsPath: string;
    routes: Array<RouteRef>;
    actions: Array<ActionRef>;
    features: Array<any>;
    authGuards: {
        [key: string]: Type<{}>;
    };
    constructor(loader: ExtensionLoaderService, componentRegister: ComponentRegisterService, ruleService: RuleService);
    /**
     * Loads and registers an extension config file and plugins (specified by path properties).
     * @returns The loaded config data
     */
    load(): Promise<ExtensionConfig>;
    /**
     * Registers extensions from a config object.
     * @param config Object with config data
     */
    setup(config: ExtensionConfig): void;
    /**
     * Gets features by key.
     * @param key Key string, using dot notation
     * @returns Features array found by key
     */
    getFeature(key: string): any[];
    getElements<T extends ExtensionElement>(key: string, fallback?: Array<T>): Array<T>;
    /**
     * Adds one or more new rule evaluators to the existing set.
     * @param values The new evaluators to add
     */
    setEvaluators(values: {
        [key: string]: RuleEvaluator;
    }): void;
    /**
     * Adds one or more new auth guards to the existing set.
     * @param values The new auth guards to add
     */
    setAuthGuards(values: {
        [key: string]: Type<{}>;
    }): void;
    /**
     * Adds one or more new components to the existing set.
     * @param values The new components to add
     */
    setComponents(values: {
        [key: string]: Type<{}>;
    }): void;
    /**
     * Retrieves a route using its ID value.
     * @param id The ID value to look for
     * @returns The route or null if not found
     */
    getRouteById(id: string): RouteRef;
    /**
     * Retrieves one or more auth guards using an array of ID values.
     * @param ids Array of ID value to look for
     * @returns Array of auth guards or empty array if none were found
     */
    getAuthGuards(ids: string[]): Array<Type<{}>>;
    /**
     * Retrieves an action using its ID value.
     * @param id The ID value to look for
     * @returns Action or null if not found
     */
    getActionById(id: string): ActionRef;
    /**
     * Retrieves a RuleEvaluator function using its key name.
     * @param key Key name to look for
     * @returns RuleEvaluator or null if not found
     */
    getEvaluator(key: string): RuleEvaluator;
    /**
     * Evaluates a rule.
     * @param ruleId ID of the rule to evaluate
     * @param context (optional) Custom rule execution context.
     * @returns True if the rule passed, false otherwise
     */
    evaluateRule(ruleId: string, context?: RuleContext): boolean;
    /**
     * Retrieves a registered extension component using its ID value.
     * @param id The ID value to look for
     * @returns The component or null if not found
     */
    getComponentById<T>(id: string): Type<T>;
    /**
     * Retrieves a rule using its ID value.
     * @param id The ID value to look for
     * @returns The rule or null if not found
     */
    getRuleById(id: string): RuleRef;
    /**
     * Runs a lightweight expression stored in a string.
     * @param value String containing the expression or literal value
     * @param context Parameter object for the expression with details of app state
     * @returns Result of evaluated expression, if found, or the literal value otherwise
     */
    runExpression(value: string, context?: any): any;
}
