/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { ActionRef, ContentActionRef } from '../config/action.extensions';
import { ExtensionElement } from '../config/extension-element';
import { ExtensionConfig, ExtensionRef } from '../config/extension.config';
import { RouteRef } from '../config/routing.extensions';
import { RuleRef } from '../config/rule.extensions';
export declare class ExtensionLoaderService {
    private http;
    constructor(http: HttpClient);
    load(configPath: string, pluginsPath: string): Promise<ExtensionConfig>;
    protected getMetadata(config: ExtensionConfig): ExtensionRef;
    protected loadConfig(url: string, order: number): Promise<{
        order: number;
        config: ExtensionConfig;
    }>;
    /**
     * Retrieves configuration elements.
     * Filters element by **enabled** and **order** attributes.
     * Example:
     *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
     */
    getElements<T extends ExtensionElement>(config: ExtensionConfig, key: string, fallback?: Array<T>): Array<T>;
    getContentActions(config: ExtensionConfig, key: string): Array<ContentActionRef>;
    getRules(config: ExtensionConfig): Array<RuleRef>;
    getRoutes(config: ExtensionConfig): Array<RouteRef>;
    getActions(config: ExtensionConfig): Array<ActionRef>;
    getFeatures(config: ExtensionConfig): any;
    protected setActionDefaults(action: ContentActionRef): ContentActionRef;
}
