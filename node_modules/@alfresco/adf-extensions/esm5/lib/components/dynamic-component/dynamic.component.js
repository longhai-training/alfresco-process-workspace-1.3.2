/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';
import { ExtensionService } from '../../services/extension.service';
// cSpell:words lifecycle
var DynamicExtensionComponent = /** @class */ (function () {
    function DynamicExtensionComponent(extensions, componentFactoryResolver) {
        this.extensions = extensions;
        this.componentFactoryResolver = componentFactoryResolver;
        this.loaded = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicExtensionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        if (changes.data) {
            this.data = changes.data.currentValue;
        }
        this.updateInstance();
        this.proxy('ngOnChanges', changes);
    };
    /**
     * @private
     * @return {?}
     */
    DynamicExtensionComponent.prototype.loadComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentType = this.extensions.getComponentById(this.id);
        if (componentType) {
            /** @type {?} */
            var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            if (factory) {
                this.content.clear();
                this.componentRef = this.content.createComponent(factory, 0);
            }
        }
    };
    /**
     * @return {?}
     */
    DynamicExtensionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.componentCreated()) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DynamicExtensionComponent.prototype.updateInstance = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.componentCreated()) {
            this.componentRef.instance.data = this.data;
        }
    };
    /**
     * @private
     * @param {?} lifecycleMethod
     * @param {...?} args
     * @return {?}
     */
    DynamicExtensionComponent.prototype.proxy = /**
     * @private
     * @param {?} lifecycleMethod
     * @param {...?} args
     * @return {?}
     */
    function (lifecycleMethod) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.componentCreated() && this.lifecycleHookIsImplemented(lifecycleMethod)) {
            this.componentRef.instance[lifecycleMethod].apply(this.componentRef.instance, args);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DynamicExtensionComponent.prototype.componentCreated = /**
     * @private
     * @return {?}
     */
    function () {
        return !!this.componentRef && !!this.componentRef.instance;
    };
    /**
     * @private
     * @param {?} lifecycleMethod
     * @return {?}
     */
    DynamicExtensionComponent.prototype.lifecycleHookIsImplemented = /**
     * @private
     * @param {?} lifecycleMethod
     * @return {?}
     */
    function (lifecycleMethod) {
        return !!this.componentRef.instance[lifecycleMethod];
    };
    DynamicExtensionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-dynamic-component',
                    template: "<div #content></div>"
                }] }
    ];
    /** @nocollapse */
    DynamicExtensionComponent.ctorParameters = function () { return [
        { type: ExtensionService },
        { type: ComponentFactoryResolver }
    ]; };
    DynamicExtensionComponent.propDecorators = {
        content: [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] }],
        id: [{ type: Input }],
        data: [{ type: Input }]
    };
    return DynamicExtensionComponent;
}());
export { DynamicExtensionComponent };
if (false) {
    /** @type {?} */
    DynamicExtensionComponent.prototype.content;
    /**
     * Unique ID string for the component to show.
     * @type {?}
     */
    DynamicExtensionComponent.prototype.id;
    /**
     * Data for the dynamically-loaded component instance.
     * @type {?}
     */
    DynamicExtensionComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.loaded;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.extensions;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWV4dGVuc2lvbnMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9keW5hbWljLWNvbXBvbmVudC9keW5hbWljLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFFTCx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULGdCQUFnQixFQUluQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7QUFJcEU7SUFpQkksbUNBQW9CLFVBQTRCLEVBQVUsd0JBQWtEO1FBQXhGLGVBQVUsR0FBVixVQUFVLENBQWtCO1FBQVUsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUZwRyxXQUFNLEdBQVksS0FBSyxDQUFDO0lBRStFLENBQUM7Ozs7O0lBRWhILCtDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUN0QjtRQUVELElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7SUFFTyxpREFBYTs7OztJQUFyQjs7WUFDVSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBcUIsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNuRixJQUFJLGFBQWEsRUFBRTs7Z0JBQ1QsT0FBTyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FDakUsYUFBYSxDQUNoQjtZQUNELElBQUksT0FBTyxFQUFFO2dCQUNULElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsK0NBQVc7OztJQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxrREFBYzs7OztJQUF0QjtRQUNJLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDL0M7SUFDTCxDQUFDOzs7Ozs7O0lBRU8seUNBQUs7Ozs7OztJQUFiLFVBQWMsZUFBZTtRQUFFLGNBQU87YUFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1lBQVAsNkJBQU87O1FBQ2xDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQzdFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN2RjtJQUNMLENBQUM7Ozs7O0lBRU8sb0RBQWdCOzs7O0lBQXhCO1FBQ0ksT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFDaEUsQ0FBQzs7Ozs7O0lBRU8sOERBQTBCOzs7OztJQUFsQyxVQUFtQyxlQUF1QjtRQUN0RCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6RCxDQUFDOztnQkF2RUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ25DOzs7O2dCQVBRLGdCQUFnQjtnQkFQckIsd0JBQXdCOzs7MEJBZ0J2QixTQUFTLFNBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFO3FCQUkvQyxLQUFLO3VCQUdMLEtBQUs7O0lBNERWLGdDQUFDO0NBQUEsQUF4RUQsSUF3RUM7U0FwRVkseUJBQXlCOzs7SUFDbEMsNENBQzBCOzs7OztJQUcxQix1Q0FBb0I7Ozs7O0lBR3BCLHlDQUFtQjs7Ozs7SUFFbkIsaURBQXVEOzs7OztJQUN2RCwyQ0FBZ0M7Ozs7O0lBRXBCLCtDQUFvQzs7Ozs7SUFBRSw2REFBMEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBJbnB1dCxcbiAgICBDb21wb25lbnRSZWYsXG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIFZpZXdDaGlsZCxcbiAgICBWaWV3Q29udGFpbmVyUmVmLFxuICAgIE9uRGVzdHJveSxcbiAgICBPbkNoYW5nZXMsXG4gICAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEV4dGVuc2lvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9leHRlbnNpb24uc2VydmljZSc7XG5pbXBvcnQgeyBFeHRlbnNpb25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb21wb25lbnQtcmVnaXN0ZXIuc2VydmljZSc7XG5cbi8vIGNTcGVsbDp3b3JkcyBsaWZlY3ljbGVcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWR5bmFtaWMtY29tcG9uZW50JyxcbiAgICB0ZW1wbGF0ZTogYDxkaXYgI2NvbnRlbnQ+PC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRXh0ZW5zaW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIEBWaWV3Q2hpbGQoJ2NvbnRlbnQnLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcbiAgICBjb250ZW50OiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gICAgLyoqIFVuaXF1ZSBJRCBzdHJpbmcgZm9yIHRoZSBjb21wb25lbnQgdG8gc2hvdy4gKi9cbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xuXG4gICAgLyoqIERhdGEgZm9yIHRoZSBkeW5hbWljYWxseS1sb2FkZWQgY29tcG9uZW50IGluc3RhbmNlLiAqL1xuICAgIEBJbnB1dCgpIGRhdGE6IGFueTtcblxuICAgIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8RXh0ZW5zaW9uQ29tcG9uZW50PjtcbiAgICBwcml2YXRlIGxvYWRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBleHRlbnNpb25zOiBFeHRlbnNpb25TZXJ2aWNlLCBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7fVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRDb21wb25lbnQoKTtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwZGF0ZUluc3RhbmNlKCk7XG4gICAgICAgIHRoaXMucHJveHkoJ25nT25DaGFuZ2VzJywgY2hhbmdlcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkQ29tcG9uZW50KCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnRUeXBlID0gdGhpcy5leHRlbnNpb25zLmdldENvbXBvbmVudEJ5SWQ8RXh0ZW5zaW9uQ29tcG9uZW50Pih0aGlzLmlkKTtcbiAgICAgICAgaWYgKGNvbXBvbmVudFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShcbiAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMuY29udGVudC5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50Q3JlYXRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUluc3RhbmNlKCkge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRDcmVhdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHByb3h5KGxpZmVjeWNsZU1ldGhvZCwgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRDcmVhdGVkKCkgJiYgdGhpcy5saWZlY3ljbGVIb29rSXNJbXBsZW1lbnRlZChsaWZlY3ljbGVNZXRob2QpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZVtsaWZlY3ljbGVNZXRob2RdLmFwcGx5KHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY29tcG9uZW50Q3JlYXRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5jb21wb25lbnRSZWYgICYmICEhdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsaWZlY3ljbGVIb29rSXNJbXBsZW1lbnRlZChsaWZlY3ljbGVNZXRob2Q6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZVtsaWZlY3ljbGVNZXRob2RdO1xuICAgIH1cbn1cbiJdfQ==