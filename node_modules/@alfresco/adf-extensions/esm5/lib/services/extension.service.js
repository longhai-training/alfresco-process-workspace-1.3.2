/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { ExtensionLoaderService } from './extension-loader.service';
import * as core from '../evaluators/core.evaluators';
import { ComponentRegisterService } from './component-register.service';
import { RuleService } from './rule.service';
import * as i0 from "@angular/core";
import * as i1 from "./extension-loader.service";
import * as i2 from "./component-register.service";
import * as i3 from "./rule.service";
var ExtensionService = /** @class */ (function () {
    function ExtensionService(loader, componentRegister, ruleService) {
        this.loader = loader;
        this.componentRegister = componentRegister;
        this.ruleService = ruleService;
        this.config = null;
        this.configPath = 'assets/app.extensions.json';
        this.pluginsPath = 'assets/plugins';
        this.routes = [];
        this.actions = [];
        this.features = [];
        this.authGuards = {};
    }
    /**
     * Loads and registers an extension config file and plugins (specified by path properties).
     * @returns The loaded config data
     */
    /**
     * Loads and registers an extension config file and plugins (specified by path properties).
     * @return {?} The loaded config data
     */
    ExtensionService.prototype.load = /**
     * Loads and registers an extension config file and plugins (specified by path properties).
     * @return {?} The loaded config data
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var config;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loader.load(this.configPath, this.pluginsPath)];
                    case 1:
                        config = _a.sent();
                        this.setup(config);
                        return [2 /*return*/, config];
                }
            });
        });
    };
    /**
     * Registers extensions from a config object.
     * @param config Object with config data
     */
    /**
     * Registers extensions from a config object.
     * @param {?} config Object with config data
     * @return {?}
     */
    ExtensionService.prototype.setup = /**
     * Registers extensions from a config object.
     * @param {?} config Object with config data
     * @return {?}
     */
    function (config) {
        if (!config) {
            console.warn('Extension configuration not found');
            return;
        }
        this.config = config;
        this.setEvaluators({
            'core.every': core.every,
            'core.some': core.some,
            'core.not': core.not
        });
        this.actions = this.loader.getActions(config);
        this.routes = this.loader.getRoutes(config);
        this.features = this.loader.getFeatures(config);
        this.ruleService.setup(config);
    };
    /**
     * Gets features by key.
     * @param key Key string, using dot notation
     * @returns Features array found by key
     */
    /**
     * Gets features by key.
     * @param {?} key Key string, using dot notation
     * @return {?} Features array found by key
     */
    ExtensionService.prototype.getFeature = /**
     * Gets features by key.
     * @param {?} key Key string, using dot notation
     * @return {?} Features array found by key
     */
    function (key) {
        /** @type {?} */
        var properties = Array.isArray(key) ? [key] : key.split('.');
        return properties.reduce((/**
         * @param {?} prev
         * @param {?} curr
         * @return {?}
         */
        function (prev, curr) { return prev && prev[curr]; }), this.features) || [];
    };
    /**
     * @template T
     * @param {?} key
     * @param {?=} fallback
     * @return {?}
     */
    ExtensionService.prototype.getElements = /**
     * @template T
     * @param {?} key
     * @param {?=} fallback
     * @return {?}
     */
    function (key, fallback) {
        if (fallback === void 0) { fallback = []; }
        return this.loader.getElements(this.config, key, fallback);
    };
    /**
     * Adds one or more new rule evaluators to the existing set.
     * @param values The new evaluators to add
     */
    /**
     * Adds one or more new rule evaluators to the existing set.
     * @param {?} values The new evaluators to add
     * @return {?}
     */
    ExtensionService.prototype.setEvaluators = /**
     * Adds one or more new rule evaluators to the existing set.
     * @param {?} values The new evaluators to add
     * @return {?}
     */
    function (values) {
        this.ruleService.setEvaluators(values);
    };
    /**
     * Adds one or more new auth guards to the existing set.
     * @param values The new auth guards to add
     */
    /**
     * Adds one or more new auth guards to the existing set.
     * @param {?} values The new auth guards to add
     * @return {?}
     */
    ExtensionService.prototype.setAuthGuards = /**
     * Adds one or more new auth guards to the existing set.
     * @param {?} values The new auth guards to add
     * @return {?}
     */
    function (values) {
        if (values) {
            this.authGuards = Object.assign({}, this.authGuards, values);
        }
    };
    /**
     * Adds one or more new components to the existing set.
     * @param values The new components to add
     */
    /**
     * Adds one or more new components to the existing set.
     * @param {?} values The new components to add
     * @return {?}
     */
    ExtensionService.prototype.setComponents = /**
     * Adds one or more new components to the existing set.
     * @param {?} values The new components to add
     * @return {?}
     */
    function (values) {
        this.componentRegister.setComponents(values);
    };
    /**
     * Retrieves a route using its ID value.
     * @param id The ID value to look for
     * @returns The route or null if not found
     */
    /**
     * Retrieves a route using its ID value.
     * @param {?} id The ID value to look for
     * @return {?} The route or null if not found
     */
    ExtensionService.prototype.getRouteById = /**
     * Retrieves a route using its ID value.
     * @param {?} id The ID value to look for
     * @return {?} The route or null if not found
     */
    function (id) {
        return this.routes.find((/**
         * @param {?} route
         * @return {?}
         */
        function (route) { return route.id === id; }));
    };
    /**
     * Retrieves one or more auth guards using an array of ID values.
     * @param ids Array of ID value to look for
     * @returns Array of auth guards or empty array if none were found
     */
    /**
     * Retrieves one or more auth guards using an array of ID values.
     * @param {?} ids Array of ID value to look for
     * @return {?} Array of auth guards or empty array if none were found
     */
    ExtensionService.prototype.getAuthGuards = /**
     * Retrieves one or more auth guards using an array of ID values.
     * @param {?} ids Array of ID value to look for
     * @return {?} Array of auth guards or empty array if none were found
     */
    function (ids) {
        var _this = this;
        return (ids || [])
            .map((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.authGuards[id]; }))
            .filter((/**
         * @param {?} guard
         * @return {?}
         */
        function (guard) { return guard; }));
    };
    /**
     * Retrieves an action using its ID value.
     * @param id The ID value to look for
     * @returns Action or null if not found
     */
    /**
     * Retrieves an action using its ID value.
     * @param {?} id The ID value to look for
     * @return {?} Action or null if not found
     */
    ExtensionService.prototype.getActionById = /**
     * Retrieves an action using its ID value.
     * @param {?} id The ID value to look for
     * @return {?} Action or null if not found
     */
    function (id) {
        return this.actions.find((/**
         * @param {?} action
         * @return {?}
         */
        function (action) { return action.id === id; }));
    };
    /**
     * Retrieves a RuleEvaluator function using its key name.
     * @param key Key name to look for
     * @returns RuleEvaluator or null if not found
     */
    /**
     * Retrieves a RuleEvaluator function using its key name.
     * @param {?} key Key name to look for
     * @return {?} RuleEvaluator or null if not found
     */
    ExtensionService.prototype.getEvaluator = /**
     * Retrieves a RuleEvaluator function using its key name.
     * @param {?} key Key name to look for
     * @return {?} RuleEvaluator or null if not found
     */
    function (key) {
        return this.ruleService.getEvaluator(key);
    };
    /**
     * Evaluates a rule.
     * @param ruleId ID of the rule to evaluate
     * @param context (optional) Custom rule execution context.
     * @returns True if the rule passed, false otherwise
     */
    /**
     * Evaluates a rule.
     * @param {?} ruleId ID of the rule to evaluate
     * @param {?=} context (optional) Custom rule execution context.
     * @return {?} True if the rule passed, false otherwise
     */
    ExtensionService.prototype.evaluateRule = /**
     * Evaluates a rule.
     * @param {?} ruleId ID of the rule to evaluate
     * @param {?=} context (optional) Custom rule execution context.
     * @return {?} True if the rule passed, false otherwise
     */
    function (ruleId, context) {
        return this.ruleService.evaluateRule(ruleId, context);
    };
    /**
     * Retrieves a registered extension component using its ID value.
     * @param id The ID value to look for
     * @returns The component or null if not found
     */
    /**
     * Retrieves a registered extension component using its ID value.
     * @template T
     * @param {?} id The ID value to look for
     * @return {?} The component or null if not found
     */
    ExtensionService.prototype.getComponentById = /**
     * Retrieves a registered extension component using its ID value.
     * @template T
     * @param {?} id The ID value to look for
     * @return {?} The component or null if not found
     */
    function (id) {
        return this.componentRegister.getComponentById(id);
    };
    /**
     * Retrieves a rule using its ID value.
     * @param id The ID value to look for
     * @returns The rule or null if not found
     */
    /**
     * Retrieves a rule using its ID value.
     * @param {?} id The ID value to look for
     * @return {?} The rule or null if not found
     */
    ExtensionService.prototype.getRuleById = /**
     * Retrieves a rule using its ID value.
     * @param {?} id The ID value to look for
     * @return {?} The rule or null if not found
     */
    function (id) {
        return this.ruleService.getRuleById(id);
    };
    /**
     * Runs a lightweight expression stored in a string.
     * @param value String containing the expression or literal value
     * @param context Parameter object for the expression with details of app state
     * @returns Result of evaluated expression, if found, or the literal value otherwise
     */
    /**
     * Runs a lightweight expression stored in a string.
     * @param {?} value String containing the expression or literal value
     * @param {?=} context Parameter object for the expression with details of app state
     * @return {?} Result of evaluated expression, if found, or the literal value otherwise
     */
    ExtensionService.prototype.runExpression = /**
     * Runs a lightweight expression stored in a string.
     * @param {?} value String containing the expression or literal value
     * @param {?=} context Parameter object for the expression with details of app state
     * @return {?} Result of evaluated expression, if found, or the literal value otherwise
     */
    function (value, context) {
        /** @type {?} */
        var pattern = new RegExp(/\$\((.*\)?)\)/g);
        /** @type {?} */
        var matches = pattern.exec(value);
        if (matches && matches.length > 1) {
            /** @type {?} */
            var expression = matches[1];
            /** @type {?} */
            var fn = new Function('context', "return " + expression);
            /** @type {?} */
            var result = fn(context);
            return result;
        }
        return value;
    };
    ExtensionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ExtensionService.ctorParameters = function () { return [
        { type: ExtensionLoaderService },
        { type: ComponentRegisterService },
        { type: RuleService }
    ]; };
    /** @nocollapse */ ExtensionService.ngInjectableDef = i0.defineInjectable({ factory: function ExtensionService_Factory() { return new ExtensionService(i0.inject(i1.ExtensionLoaderService), i0.inject(i2.ComponentRegisterService), i0.inject(i3.RuleService)); }, token: ExtensionService, providedIn: "root" });
    return ExtensionService;
}());
export { ExtensionService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ExtensionService.prototype.config;
    /** @type {?} */
    ExtensionService.prototype.configPath;
    /** @type {?} */
    ExtensionService.prototype.pluginsPath;
    /** @type {?} */
    ExtensionService.prototype.routes;
    /** @type {?} */
    ExtensionService.prototype.actions;
    /** @type {?} */
    ExtensionService.prototype.features;
    /** @type {?} */
    ExtensionService.prototype.authGuards;
    /**
     * @type {?}
     * @protected
     */
    ExtensionService.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    ExtensionService.prototype.componentRegister;
    /**
     * @type {?}
     * @protected
     */
    ExtensionService.prototype.ruleService;
}
//# sourceMappingURL=data:application/json;base64,