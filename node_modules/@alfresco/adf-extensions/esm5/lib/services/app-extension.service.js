/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { ExtensionService } from '../services/extension.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./extension.service";
var AppExtensionService = /** @class */ (function () {
    function AppExtensionService(extensionService) {
        this.extensionService = extensionService;
        this._references = new BehaviorSubject([]);
        this.references$ = this._references.asObservable();
    }
    /**
     * @return {?}
     */
    AppExtensionService.prototype.load = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var config;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.extensionService.load()];
                    case 1:
                        config = _a.sent();
                        this.setup(config);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} config
     * @return {?}
     */
    AppExtensionService.prototype.setup = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (!config) {
            return;
        }
        /** @type {?} */
        var references = (config.$references || [])
            .filter((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return typeof entry === 'object'; }))
            .map((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return (/** @type {?} */ (entry)); }));
        this._references.next(references);
    };
    /**
     * Provides a collection of document list columns for the particular preset.
     * The result is filtered by the **disabled** state.
     * @param key Preset key.
     */
    /**
     * Provides a collection of document list columns for the particular preset.
     * The result is filtered by the **disabled** state.
     * @param {?} key Preset key.
     * @return {?}
     */
    AppExtensionService.prototype.getDocumentListPreset = /**
     * Provides a collection of document list columns for the particular preset.
     * The result is filtered by the **disabled** state.
     * @param {?} key Preset key.
     * @return {?}
     */
    function (key) {
        return this.extensionService
            .getElements("features.documentList." + key)
            .filter((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return !entry.disabled; }));
    };
    /**
     * Provides a list of the Viewer content extensions,
     * filtered by **disabled** state and **rules**.
     */
    /**
     * Provides a list of the Viewer content extensions,
     * filtered by **disabled** state and **rules**.
     * @return {?}
     */
    AppExtensionService.prototype.getViewerExtensions = /**
     * Provides a list of the Viewer content extensions,
     * filtered by **disabled** state and **rules**.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.extensionService
            .getElements('features.viewer.content')
            .filter((/**
         * @param {?} extension
         * @return {?}
         */
        function (extension) { return !_this.isViewerExtensionDisabled(extension); }));
    };
    /**
     * @protected
     * @param {?} extension
     * @return {?}
     */
    AppExtensionService.prototype.isViewerExtensionDisabled = /**
     * @protected
     * @param {?} extension
     * @return {?}
     */
    function (extension) {
        if (extension) {
            if (extension.disabled) {
                return true;
            }
            if (extension.rules && extension.rules.disabled) {
                return this.extensionService.evaluateRule(extension.rules.disabled);
            }
        }
        return false;
    };
    AppExtensionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AppExtensionService.ctorParameters = function () { return [
        { type: ExtensionService }
    ]; };
    /** @nocollapse */ AppExtensionService.ngInjectableDef = i0.defineInjectable({ factory: function AppExtensionService_Factory() { return new AppExtensionService(i0.inject(i1.ExtensionService)); }, token: AppExtensionService, providedIn: "root" });
    return AppExtensionService;
}());
export { AppExtensionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AppExtensionService.prototype._references;
    /** @type {?} */
    AppExtensionService.prototype.references$;
    /**
     * @type {?}
     * @protected
     */
    AppExtensionService.prototype.extensionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1leHRlbnNpb25zLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2FwcC1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFJbkQ7SUFRSSw2QkFBc0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFKaEQsZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsRUFBRSxDQUFDLENBQUM7UUFLMUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFFSyxrQ0FBSTs7O0lBQVY7Ozs7OzRCQUNtQixxQkFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUE7O3dCQUEzQyxNQUFNLEdBQUcsU0FBa0M7d0JBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7O0tBQ3RCOzs7OztJQUVELG1DQUFLOzs7O0lBQUwsVUFBTSxNQUF1QjtRQUN6QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsT0FBTztTQUNWOztZQUVLLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO2FBQ3hDLE1BQU07Ozs7UUFBQyxVQUFDLEtBQUssSUFBSyxPQUFBLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBekIsQ0FBeUIsRUFBQzthQUM1QyxHQUFHOzs7O1FBQUMsVUFBQyxLQUFLLFdBQUssbUJBQWUsS0FBSyxFQUFBLEdBQUEsRUFBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILG1EQUFxQjs7Ozs7O0lBQXJCLFVBQXNCLEdBQVc7UUFDN0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3pCLFdBQVcsQ0FDViwyQkFBeUIsR0FBSyxDQUMvQjthQUNBLE1BQU07Ozs7UUFBQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBZixDQUFlLEVBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSCxpREFBbUI7Ozs7O0lBQW5CO1FBQUEsaUJBSUM7UUFIRyxPQUFPLElBQUksQ0FBQyxnQkFBZ0I7YUFDdkIsV0FBVyxDQUFxQix5QkFBeUIsQ0FBQzthQUMxRCxNQUFNOzs7O1FBQUMsVUFBQyxTQUFTLElBQUssT0FBQSxDQUFDLEtBQUksQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsRUFBMUMsQ0FBMEMsRUFBQyxDQUFDO0lBQzNFLENBQUM7Ozs7OztJQUVTLHVEQUF5Qjs7Ozs7SUFBbkMsVUFBb0MsU0FBNkI7UUFDN0QsSUFBSSxTQUFTLEVBQUU7WUFDYixJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFFRCxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQy9DLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3JFO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOztnQkEvREosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFQUSxnQkFBZ0I7Ozs4QkFuQnpCO0NBd0ZDLEFBaEVELElBZ0VDO1NBN0RZLG1CQUFtQjs7Ozs7O0lBQzVCLDBDQUE4RDs7SUFFOUQsMENBQXdDOzs7OztJQUU1QiwrQ0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFeHRlbnNpb25Db25maWcsIEV4dGVuc2lvblJlZiB9IGZyb20gJy4uL2NvbmZpZy9leHRlbnNpb24uY29uZmlnJztcbmltcG9ydCB7IEV4dGVuc2lvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9leHRlbnNpb24uc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFZpZXdlckV4dGVuc2lvblJlZiB9IGZyb20gJy4uL2NvbmZpZy92aWV3ZXIuZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RQcmVzZXRSZWYgfSBmcm9tICcuLi9jb25maWcvZG9jdW1lbnQtbGlzdC5leHRlbnNpb25zJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBcHBFeHRlbnNpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9yZWZlcmVuY2VzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFeHRlbnNpb25SZWZbXT4oW10pO1xuXG4gICAgcmVmZXJlbmNlcyQ6IE9ic2VydmFibGU8RXh0ZW5zaW9uUmVmW10+O1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGV4dGVuc2lvblNlcnZpY2U6IEV4dGVuc2lvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzJCA9IHRoaXMuX3JlZmVyZW5jZXMuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZCgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gYXdhaXQgdGhpcy5leHRlbnNpb25TZXJ2aWNlLmxvYWQoKTtcbiAgICAgICAgdGhpcy5zZXR1cChjb25maWcpO1xuICAgIH1cblxuICAgIHNldHVwKGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnKSB7XG4gICAgICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWZlcmVuY2VzID0gKGNvbmZpZy4kcmVmZXJlbmNlcyB8fCBbXSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGVudHJ5KSA9PiB0eXBlb2YgZW50cnkgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgLm1hcCgoZW50cnkpID0+IDxFeHRlbnNpb25SZWY+IGVudHJ5KTtcbiAgICAgICAgdGhpcy5fcmVmZXJlbmNlcy5uZXh0KHJlZmVyZW5jZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgY29sbGVjdGlvbiBvZiBkb2N1bWVudCBsaXN0IGNvbHVtbnMgZm9yIHRoZSBwYXJ0aWN1bGFyIHByZXNldC5cbiAgICAgKiBUaGUgcmVzdWx0IGlzIGZpbHRlcmVkIGJ5IHRoZSAqKmRpc2FibGVkKiogc3RhdGUuXG4gICAgICogQHBhcmFtIGtleSBQcmVzZXQga2V5LlxuICAgICAqL1xuICAgIGdldERvY3VtZW50TGlzdFByZXNldChrZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25TZXJ2aWNlXG4gICAgICAgICAgLmdldEVsZW1lbnRzPERvY3VtZW50TGlzdFByZXNldFJlZj4oXG4gICAgICAgICAgICBgZmVhdHVyZXMuZG9jdW1lbnRMaXN0LiR7a2V5fWBcbiAgICAgICAgICApXG4gICAgICAgICAgLmZpbHRlcigoZW50cnkpID0+ICFlbnRyeS5kaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgYSBsaXN0IG9mIHRoZSBWaWV3ZXIgY29udGVudCBleHRlbnNpb25zLFxuICAgICAqIGZpbHRlcmVkIGJ5ICoqZGlzYWJsZWQqKiBzdGF0ZSBhbmQgKipydWxlcyoqLlxuICAgICAqL1xuICAgIGdldFZpZXdlckV4dGVuc2lvbnMoKTogVmlld2VyRXh0ZW5zaW9uUmVmW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5leHRlbnNpb25TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0RWxlbWVudHM8Vmlld2VyRXh0ZW5zaW9uUmVmPignZmVhdHVyZXMudmlld2VyLmNvbnRlbnQnKVxuICAgICAgICAgICAgLmZpbHRlcigoZXh0ZW5zaW9uKSA9PiAhdGhpcy5pc1ZpZXdlckV4dGVuc2lvbkRpc2FibGVkKGV4dGVuc2lvbikpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBpc1ZpZXdlckV4dGVuc2lvbkRpc2FibGVkKGV4dGVuc2lvbjogVmlld2VyRXh0ZW5zaW9uUmVmKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChleHRlbnNpb24pIHtcbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXh0ZW5zaW9uLnJ1bGVzICYmIGV4dGVuc2lvbi5ydWxlcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uU2VydmljZS5ldmFsdWF0ZVJ1bGUoZXh0ZW5zaW9uLnJ1bGVzLmRpc2FibGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIl19