/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentActionType } from './action.extensions';
/**
 * @param {?} target
 * @param {?} key
 * @return {?}
 */
export function getValue(target, key) {
    if (!target) {
        return undefined;
    }
    /** @type {?} */
    var keys = key.split('.');
    key = '';
    do {
        key += keys.shift();
        /** @type {?} */
        var value = target[key];
        if (value !== undefined &&
            (typeof value === 'object' || !keys.length)) {
            target = value;
            key = '';
        }
        else if (!keys.length) {
            target = undefined;
        }
        else {
            key += '.';
        }
    } while (keys.length);
    return target;
}
/**
 * @param {?} entry
 * @return {?}
 */
export function filterEnabled(entry) {
    return !entry.disabled;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function sortByOrder(a, b) {
    /** @type {?} */
    var left = a.order === undefined ? Number.MAX_SAFE_INTEGER : a.order;
    /** @type {?} */
    var right = b.order === undefined ? Number.MAX_SAFE_INTEGER : b.order;
    return left - right;
}
/**
 * @param {?} acc
 * @param {?} el
 * @param {?} i
 * @param {?} arr
 * @return {?}
 */
export function reduceSeparators(acc, el, i, arr) {
    // remove leading separator
    if (i === 0) {
        if (arr[i].type === ContentActionType.separator) {
            return acc;
        }
    }
    // remove duplicate separators
    if (i > 0) {
        /** @type {?} */
        var prev = arr[i - 1];
        if (prev.type === ContentActionType.separator &&
            el.type === ContentActionType.separator) {
            return acc;
        }
        // remove trailing separator
        if (i === arr.length - 1) {
            if (el.type === ContentActionType.separator) {
                return acc;
            }
        }
    }
    return acc.concat(el);
}
/**
 * @param {?} acc
 * @param {?} el
 * @return {?}
 */
export function reduceEmptyMenus(acc, el) {
    if (el.type === ContentActionType.menu) {
        if ((el.children || []).length === 0) {
            return acc;
        }
    }
    return acc.concat(el);
}
/**
 * @param {...?} objects
 * @return {?}
 */
export function mergeObjects() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    /** @type {?} */
    var result = {};
    objects.forEach((/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        Object.keys(source).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) {
            if (!prop.startsWith('$')) {
                if (prop in result && Array.isArray(result[prop])) {
                    // result[prop] = result[prop].concat(source[prop]);
                    result[prop] = mergeArrays(result[prop], source[prop]);
                }
                else if (prop in result && typeof result[prop] === 'object') {
                    result[prop] = mergeObjects(result[prop], source[prop]);
                }
                else {
                    result[prop] = source[prop];
                }
            }
        }));
    }));
    return result;
}
/**
 * @param {?} left
 * @param {?} right
 * @return {?}
 */
export function mergeArrays(left, right) {
    /** @type {?} */
    var result = [];
    /** @type {?} */
    var map = {};
    (left || []).forEach((/**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        /** @type {?} */
        var element = entry;
        if (element && element.hasOwnProperty('id')) {
            map[element.id] = element;
        }
        else {
            result.push(element);
        }
    }));
    (right || []).forEach((/**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        /** @type {?} */
        var element = entry;
        if (element && element.hasOwnProperty('id') && map[element.id]) {
            /** @type {?} */
            var merged = mergeObjects(map[element.id], element);
            map[element.id] = merged;
        }
        else {
            result.push(element);
        }
    }));
    return Object.keys(map).map((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return map[key]; })).concat(result);
}
//# sourceMappingURL=data:application/json;base64,