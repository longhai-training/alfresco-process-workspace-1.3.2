/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @param {?} context
 * @param {...?} args
 * @return {?}
 */
export function not(context) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (!args || args.length === 0) {
        return false;
    }
    return args
        .every((/**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        /** @type {?} */
        var evaluator = context.getEvaluator(arg.value);
        if (!evaluator) {
            console.warn('evaluator not found: ' + arg.value);
            return false;
        }
        return !evaluator.apply(void 0, tslib_1.__spread([context], (arg.parameters || [])));
    }));
}
/**
 * @param {?} context
 * @param {...?} args
 * @return {?}
 */
export function every(context) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (!args || args.length === 0) {
        return false;
    }
    return args
        .every((/**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        /** @type {?} */
        var evaluator = context.getEvaluator(arg.value);
        if (!evaluator) {
            console.warn('evaluator not found: ' + arg.value);
            return false;
        }
        return evaluator.apply(void 0, tslib_1.__spread([context], (arg.parameters || [])));
    }));
}
/**
 * @param {?} context
 * @param {...?} args
 * @return {?}
 */
export function some(context) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (!args || args.length === 0) {
        return false;
    }
    return args
        .some((/**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        /** @type {?} */
        var evaluator = context.getEvaluator(arg.value);
        if (!evaluator) {
            console.warn('evaluator not found: ' + arg.value);
            return false;
        }
        return evaluator.apply(void 0, tslib_1.__spread([context], (arg.parameters || [])));
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5ldmFsdWF0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1leHRlbnNpb25zLyIsInNvdXJjZXMiOlsibGliL2V2YWx1YXRvcnMvY29yZS5ldmFsdWF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBb0I7SUFBRSxjQUF3QjtTQUF4QixVQUF3QixFQUF4QixxQkFBd0IsRUFBeEIsSUFBd0I7UUFBeEIsNkJBQXdCOztJQUM5RCxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxJQUFJO1NBQ04sS0FBSzs7OztJQUFDLFVBQUMsR0FBRzs7WUFDRCxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRCxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELE9BQU8sQ0FBQyxTQUFTLGlDQUFDLE9BQU8sR0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUMxRCxDQUFDLEVBQUMsQ0FBQztBQUNYLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUMsT0FBb0I7SUFBRSxjQUF3QjtTQUF4QixVQUF3QixFQUF4QixxQkFBd0IsRUFBeEIsSUFBd0I7UUFBeEIsNkJBQXdCOztJQUNoRSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBRUQsT0FBTyxJQUFJO1NBQ04sS0FBSzs7OztJQUFDLFVBQUMsR0FBRzs7WUFDRCxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRCxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELE9BQU8sU0FBUyxpQ0FBQyxPQUFPLEdBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxHQUFFO0lBQ3pELENBQUMsRUFBQyxDQUFDO0FBQ1gsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLElBQUksQ0FBQyxPQUFvQjtJQUFFLGNBQXdCO1NBQXhCLFVBQXdCLEVBQXhCLHFCQUF3QixFQUF4QixJQUF3QjtRQUF4Qiw2QkFBd0I7O0lBQy9ELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDNUIsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxPQUFPLElBQUk7U0FDTixJQUFJOzs7O0lBQUMsVUFBQyxHQUFHOztZQUNBLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDakQsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xELE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxTQUFTLGlDQUFDLE9BQU8sR0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLEdBQUU7SUFDekQsQ0FBQyxFQUFDLENBQUM7QUFDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUnVsZUNvbnRleHQsIFJ1bGVQYXJhbWV0ZXIgfSBmcm9tICcuLi9jb25maWcvcnVsZS5leHRlbnNpb25zJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdChjb250ZXh0OiBSdWxlQ29udGV4dCwgLi4uYXJnczogUnVsZVBhcmFtZXRlcltdKTogYm9vbGVhbiB7XG4gICAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJnc1xuICAgICAgICAuZXZlcnkoKGFyZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXZhbHVhdG9yID0gY29udGV4dC5nZXRFdmFsdWF0b3IoYXJnLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICghZXZhbHVhdG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdldmFsdWF0b3Igbm90IGZvdW5kOiAnICsgYXJnLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gIWV2YWx1YXRvcihjb250ZXh0LCAuLi4oYXJnLnBhcmFtZXRlcnMgfHwgW10pKTtcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmVyeShjb250ZXh0OiBSdWxlQ29udGV4dCwgLi4uYXJnczogUnVsZVBhcmFtZXRlcltdKTogYm9vbGVhbiB7XG4gICAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJnc1xuICAgICAgICAuZXZlcnkoKGFyZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXZhbHVhdG9yID0gY29udGV4dC5nZXRFdmFsdWF0b3IoYXJnLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICghZXZhbHVhdG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdldmFsdWF0b3Igbm90IGZvdW5kOiAnICsgYXJnLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZhbHVhdG9yKGNvbnRleHQsIC4uLihhcmcucGFyYW1ldGVycyB8fCBbXSkpO1xuICAgICAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvbWUoY29udGV4dDogUnVsZUNvbnRleHQsIC4uLmFyZ3M6IFJ1bGVQYXJhbWV0ZXJbXSk6IGJvb2xlYW4ge1xuICAgIGlmICghYXJncyB8fCBhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3NcbiAgICAgICAgLnNvbWUoKGFyZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXZhbHVhdG9yID0gY29udGV4dC5nZXRFdmFsdWF0b3IoYXJnLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICghZXZhbHVhdG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdldmFsdWF0b3Igbm90IGZvdW5kOiAnICsgYXJnLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZhbHVhdG9yKGNvbnRleHQsIC4uLihhcmcucGFyYW1ldGVycyB8fCBbXSkpO1xuICAgICAgICB9KTtcbn1cbiJdfQ==