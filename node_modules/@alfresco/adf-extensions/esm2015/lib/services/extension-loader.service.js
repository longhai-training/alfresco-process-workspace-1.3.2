/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ContentActionType } from '../config/action.extensions';
import { filterEnabled, getValue, mergeObjects, sortByOrder } from '../config/extension-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ExtensionLoaderService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} configPath
     * @param {?} pluginsPath
     * @return {?}
     */
    load(configPath, pluginsPath) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this.loadConfig(configPath, 0).then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    /** @type {?} */
                    let config = result.config;
                    /** @type {?} */
                    const override = sessionStorage.getItem('app.extension.config');
                    if (override) {
                        config = JSON.parse(override);
                    }
                    if (config.$references && config.$references.length > 0) {
                        /** @type {?} */
                        const plugins = config.$references.map((/**
                         * @param {?} name
                         * @param {?} idx
                         * @return {?}
                         */
                        (name, idx) => this.loadConfig(`${pluginsPath}/${name}`, idx)));
                        Promise.all(plugins).then((/**
                         * @param {?} results
                         * @return {?}
                         */
                        (results) => {
                            /** @type {?} */
                            const configs = results
                                .filter((/**
                             * @param {?} entry
                             * @return {?}
                             */
                            (entry) => entry))
                                .sort(sortByOrder)
                                .map((/**
                             * @param {?} entry
                             * @return {?}
                             */
                            (entry) => entry.config));
                            if (configs.length > 0) {
                                config = mergeObjects(config, ...configs);
                            }
                            config = Object.assign({}, config, this.getMetadata(result.config), { $references: configs.map((/**
                                 * @param {?} ext
                                 * @return {?}
                                 */
                                (ext) => this.getMetadata(ext))) });
                            resolve(config);
                        }));
                    }
                    else {
                        resolve(config);
                    }
                }
            }));
        }));
    }
    /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    getMetadata(config) {
        /** @type {?} */
        const result = {};
        Object
            .keys(config)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        (key) => key.startsWith('$')))
            .forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            result[key] = config[key];
        }));
        return result;
    }
    /**
     * @protected
     * @param {?} url
     * @param {?} order
     * @return {?}
     */
    loadConfig(url, order) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            this.http.get(url).subscribe((/**
             * @param {?} config
             * @return {?}
             */
            (config) => {
                resolve({
                    order,
                    config
                });
            }), (/**
             * @return {?}
             */
            () => {
                resolve(null);
            }));
        }));
    }
    /**
     * Retrieves configuration elements.
     * Filters element by **enabled** and **order** attributes.
     * Example:
     *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
     * @template T
     * @param {?} config
     * @param {?} key
     * @param {?=} fallback
     * @return {?}
     */
    getElements(config, key, fallback = []) {
        /** @type {?} */
        const values = getValue(config, key) || fallback || [];
        return values.filter(filterEnabled).sort(sortByOrder);
    }
    /**
     * @param {?} config
     * @param {?} key
     * @return {?}
     */
    getContentActions(config, key) {
        return this.getElements(config, key).map(this.setActionDefaults);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getRules(config) {
        if (config && config.rules) {
            return config.rules;
        }
        return [];
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getRoutes(config) {
        if (config) {
            return config.routes || [];
        }
        return [];
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getActions(config) {
        if (config) {
            return config.actions || [];
        }
        return [];
    }
    /**
     * @param {?} config
     * @return {?}
     */
    getFeatures(config) {
        if (config) {
            return config.features || [];
        }
        return [];
    }
    /**
     * @protected
     * @param {?} action
     * @return {?}
     */
    setActionDefaults(action) {
        if (action) {
            action.type = action.type || ContentActionType.default;
            action.icon = action.icon || 'extension';
        }
        return action;
    }
}
ExtensionLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ExtensionLoaderService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ ExtensionLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function ExtensionLoaderService_Factory() { return new ExtensionLoaderService(i0.inject(i1.HttpClient)); }, token: ExtensionLoaderService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExtensionLoaderService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLWxvYWRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1leHRlbnNpb25zLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2V4dGVuc2lvbi1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQStCLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFN0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFRL0YsTUFBTSxPQUFPLHNCQUFzQjs7OztJQUMvQixZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3BDLENBQUM7Ozs7OztJQUVELElBQUksQ0FBQyxVQUFrQixFQUFFLFdBQW1CO1FBQ3hDLE9BQU8sSUFBSSxPQUFPOzs7O1FBQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJOzs7O1lBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxNQUFNLEVBQUU7O3dCQUNKLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTTs7MEJBRXBCLFFBQVEsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDO29CQUMvRCxJQUFJLFFBQVEsRUFBRTt3QkFDVixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDakM7b0JBRUQsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMs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QUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLE1BQXVCO1FBQzVCLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDeEIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxNQUF1QjtRQUM3QixJQUFJLE1BQU0sRUFBRTtZQUNSLE9BQU8sTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7U0FDOUI7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLE1BQXVCO1FBQzlCLElBQUksTUFBTSxFQUFFO1lBQ1IsT0FBTyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUMvQjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsTUFBdUI7UUFDL0IsSUFBSSxNQUFNLEVBQUU7WUFDUixPQUFPLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFUyxpQkFBaUIsQ0FBQyxNQUF3QjtRQUNoRCxJQUFJLE1BQU0sRUFBRTtZQUNSLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7WUFDdkQsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQztTQUM1QztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7OztZQXpJSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFYUSxVQUFVOzs7Ozs7OztJQWFILHNDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25SZWYsIENvbnRlbnRBY3Rpb25SZWYsIENvbnRlbnRBY3Rpb25UeXBlIH0gZnJvbSAnLi4vY29uZmlnL2FjdGlvbi5leHRlbnNpb25zJztcbmltcG9ydCB7IEV4dGVuc2lvbkVsZW1lbnQgfSBmcm9tICcuLi9jb25maWcvZXh0ZW5zaW9uLWVsZW1lbnQnO1xuaW1wb3J0IHsgZmlsdGVyRW5hYmxlZCwgZ2V0VmFsdWUsIG1lcmdlT2JqZWN0cywgc29ydEJ5T3JkZXIgfSBmcm9tICcuLi9jb25maWcvZXh0ZW5zaW9uLXV0aWxzJztcbmltcG9ydCB7IEV4dGVuc2lvbkNvbmZpZywgRXh0ZW5zaW9uUmVmIH0gZnJvbSAnLi4vY29uZmlnL2V4dGVuc2lvbi5jb25maWcnO1xuaW1wb3J0IHsgUm91dGVSZWYgfSBmcm9tICcuLi9jb25maWcvcm91dGluZy5leHRlbnNpb25zJztcbmltcG9ydCB7IFJ1bGVSZWYgfSBmcm9tICcuLi9jb25maWcvcnVsZS5leHRlbnNpb25zJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRlbnNpb25Mb2FkZXJTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICB9XG5cbiAgICBsb2FkKGNvbmZpZ1BhdGg6IHN0cmluZywgcGx1Z2luc1BhdGg6IHN0cmluZyk6IFByb21pc2U8RXh0ZW5zaW9uQ29uZmlnPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxhbnk+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvYWRDb25maWcoY29uZmlnUGF0aCwgMCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gcmVzdWx0LmNvbmZpZztcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdmVycmlkZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2FwcC5leHRlbnNpb24uY29uZmlnJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gSlNPTi5wYXJzZShvdmVycmlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLiRyZWZlcmVuY2VzICYmIGNvbmZpZy4kcmVmZXJlbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbHVnaW5zID0gY29uZmlnLiRyZWZlcmVuY2VzLm1hcCgobmFtZSwgaWR4KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZENvbmZpZyhgJHtwbHVnaW5zUGF0aH0vJHtuYW1lfWAsIGlkeClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKHBsdWdpbnMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWdzID0gcmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zb3J0KHNvcnRCeU9yZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChlbnRyeSkgPT4gZW50cnkuY29uZmlnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VPYmplY3RzKGNvbmZpZywgLi4uY29uZmlncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2V0TWV0YWRhdGEocmVzdWx0LmNvbmZpZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZWZlcmVuY2VzOiBjb25maWdzLm1hcCgoZXh0KSA9PiB0aGlzLmdldE1ldGFkYXRhKGV4dCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRNZXRhZGF0YShjb25maWc6IEV4dGVuc2lvbkNvbmZpZyk6IEV4dGVuc2lvblJlZiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG5cbiAgICAgICAgT2JqZWN0XG4gICAgICAgICAgICAua2V5cyhjb25maWcpXG4gICAgICAgICAgICAuZmlsdGVyKChrZXkpID0+IGtleS5zdGFydHNXaXRoKCckJykpXG4gICAgICAgICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBjb25maWdba2V5XTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGxvYWRDb25maWcoXG4gICAgICAgIHVybDogc3RyaW5nLFxuICAgICAgICBvcmRlcjogbnVtYmVyXG4gICAgKTogUHJvbWlzZTx7IG9yZGVyOiBudW1iZXI7IGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnIH0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmh0dHAuZ2V0PEV4dGVuc2lvbkNvbmZpZz4odXJsKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBjb25maWd1cmF0aW9uIGVsZW1lbnRzLlxuICAgICAqIEZpbHRlcnMgZWxlbWVudCBieSAqKmVuYWJsZWQqKiBhbmQgKipvcmRlcioqIGF0dHJpYnV0ZXMuXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgYGdldEVsZW1lbnRzPFZpZXdlckV4dGVuc2lvblJlZj4oY29uZmlnLCAnZmVhdHVyZXMudmlld2VyLmNvbnRlbnQnKWBcbiAgICAgKi9cbiAgICBnZXRFbGVtZW50czxUIGV4dGVuZHMgRXh0ZW5zaW9uRWxlbWVudD4oXG4gICAgICAgIGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnLFxuICAgICAgICBrZXk6IHN0cmluZyxcbiAgICAgICAgZmFsbGJhY2s6IEFycmF5PFQ+ID0gW11cbiAgICApOiBBcnJheTxUPiB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGdldFZhbHVlKGNvbmZpZywga2V5KSB8fCBmYWxsYmFjayB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5maWx0ZXIoZmlsdGVyRW5hYmxlZCkuc29ydChzb3J0QnlPcmRlcik7XG4gICAgfVxuXG4gICAgZ2V0Q29udGVudEFjdGlvbnMoXG4gICAgICAgIGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnLFxuICAgICAgICBrZXk6IHN0cmluZ1xuICAgICk6IEFycmF5PENvbnRlbnRBY3Rpb25SZWY+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHMoY29uZmlnLCBrZXkpLm1hcCh0aGlzLnNldEFjdGlvbkRlZmF1bHRzKTtcbiAgICB9XG5cbiAgICBnZXRSdWxlcyhjb25maWc6IEV4dGVuc2lvbkNvbmZpZyk6IEFycmF5PFJ1bGVSZWY+IHtcbiAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcucnVsZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25maWcucnVsZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGdldFJvdXRlcyhjb25maWc6IEV4dGVuc2lvbkNvbmZpZyk6IEFycmF5PFJvdXRlUmVmPiB7XG4gICAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25maWcucm91dGVzIHx8IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBnZXRBY3Rpb25zKGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnKTogQXJyYXk8QWN0aW9uUmVmPiB7XG4gICAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25maWcuYWN0aW9ucyB8fCBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgZ2V0RmVhdHVyZXMoY29uZmlnOiBFeHRlbnNpb25Db25maWcpOiBhbnkge1xuICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnLmZlYXR1cmVzIHx8IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2V0QWN0aW9uRGVmYXVsdHMoYWN0aW9uOiBDb250ZW50QWN0aW9uUmVmKTogQ29udGVudEFjdGlvblJlZiB7XG4gICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGFjdGlvbi50eXBlID0gYWN0aW9uLnR5cGUgfHwgQ29udGVudEFjdGlvblR5cGUuZGVmYXVsdDtcbiAgICAgICAgICAgIGFjdGlvbi5pY29uID0gYWN0aW9uLmljb24gfHwgJ2V4dGVuc2lvbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59XG4iXX0=