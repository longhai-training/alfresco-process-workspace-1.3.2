/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { ExtensionService } from '../services/extension.service';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./extension.service";
export class AppExtensionService {
    /**
     * @param {?} extensionService
     */
    constructor(extensionService) {
        this.extensionService = extensionService;
        this._references = new BehaviorSubject([]);
        this.references$ = this._references.asObservable();
    }
    /**
     * @return {?}
     */
    load() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const config = yield this.extensionService.load();
            this.setup(config);
        });
    }
    /**
     * @param {?} config
     * @return {?}
     */
    setup(config) {
        if (!config) {
            return;
        }
        /** @type {?} */
        const references = (config.$references || [])
            .filter((/**
         * @param {?} entry
         * @return {?}
         */
        (entry) => typeof entry === 'object'))
            .map((/**
         * @param {?} entry
         * @return {?}
         */
        (entry) => (/** @type {?} */ (entry))));
        this._references.next(references);
    }
    /**
     * Provides a collection of document list columns for the particular preset.
     * The result is filtered by the **disabled** state.
     * @param {?} key Preset key.
     * @return {?}
     */
    getDocumentListPreset(key) {
        return this.extensionService
            .getElements(`features.documentList.${key}`)
            .filter((/**
         * @param {?} entry
         * @return {?}
         */
        (entry) => !entry.disabled));
    }
    /**
     * Provides a list of the Viewer content extensions,
     * filtered by **disabled** state and **rules**.
     * @return {?}
     */
    getViewerExtensions() {
        return this.extensionService
            .getElements('features.viewer.content')
            .filter((/**
         * @param {?} extension
         * @return {?}
         */
        (extension) => !this.isViewerExtensionDisabled(extension)));
    }
    /**
     * @protected
     * @param {?} extension
     * @return {?}
     */
    isViewerExtensionDisabled(extension) {
        if (extension) {
            if (extension.disabled) {
                return true;
            }
            if (extension.rules && extension.rules.disabled) {
                return this.extensionService.evaluateRule(extension.rules.disabled);
            }
        }
        return false;
    }
}
AppExtensionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AppExtensionService.ctorParameters = () => [
    { type: ExtensionService }
];
/** @nocollapse */ AppExtensionService.ngInjectableDef = i0.defineInjectable({ factory: function AppExtensionService_Factory() { return new AppExtensionService(i0.inject(i1.ExtensionService)); }, token: AppExtensionService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AppExtensionService.prototype._references;
    /** @type {?} */
    AppExtensionService.prototype.references$;
    /**
     * @type {?}
     * @protected
     */
    AppExtensionService.prototype.extensionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWV4dGVuc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1leHRlbnNpb25zLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2FwcC1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7QUFPbkQsTUFBTSxPQUFPLG1CQUFtQjs7OztJQUs1QixZQUFzQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUpoRCxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFpQixFQUFFLENBQUMsQ0FBQztRQUsxRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkQsQ0FBQzs7OztJQUVLLElBQUk7OztrQkFDQSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1lBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkIsQ0FBQztLQUFBOzs7OztJQUVELEtBQUssQ0FBQyxNQUF1QjtRQUN6QixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsT0FBTztTQUNWOztjQUVLLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO2FBQ3hDLE1BQU07Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFDO2FBQzVDLEdBQUc7Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsbUJBQWUsS0FBSyxFQUFBLEVBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7OztJQU9ELHFCQUFxQixDQUFDLEdBQVc7UUFDN0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3pCLFdBQVcsQ0FDVix5QkFBeUIsR0FBRyxFQUFFLENBQy9CO2FBQ0EsTUFBTTs7OztRQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUMsQ0FBQztJQUMxQyxDQUFDOzs7Ozs7SUFNRCxtQkFBbUI7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0I7YUFDdkIsV0FBVyxDQUFxQix5QkFBeUIsQ0FBQzthQUMxRCxNQUFNOzs7O1FBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUM7SUFDM0UsQ0FBQzs7Ozs7O0lBRVMseUJBQXlCLENBQUMsU0FBNkI7UUFDN0QsSUFBSSxTQUFTLEVBQUU7WUFDYixJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFFRCxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQy9DLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3JFO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7WUEvREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBUFEsZ0JBQWdCOzs7Ozs7OztJQVNyQiwwQ0FBOEQ7O0lBRTlELDBDQUF3Qzs7Ozs7SUFFNUIsK0NBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uQ29uZmlnLCBFeHRlbnNpb25SZWYgfSBmcm9tICcuLi9jb25maWcvZXh0ZW5zaW9uLmNvbmZpZyc7XG5pbXBvcnQgeyBFeHRlbnNpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZXh0ZW5zaW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBWaWV3ZXJFeHRlbnNpb25SZWYgfSBmcm9tICcuLi9jb25maWcvdmlld2VyLmV4dGVuc2lvbnMnO1xuaW1wb3J0IHsgRG9jdW1lbnRMaXN0UHJlc2V0UmVmIH0gZnJvbSAnLi4vY29uZmlnL2RvY3VtZW50LWxpc3QuZXh0ZW5zaW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXBwRXh0ZW5zaW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfcmVmZXJlbmNlcyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RXh0ZW5zaW9uUmVmW10+KFtdKTtcblxuICAgIHJlZmVyZW5jZXMkOiBPYnNlcnZhYmxlPEV4dGVuc2lvblJlZltdPjtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBleHRlbnNpb25TZXJ2aWNlOiBFeHRlbnNpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlcyQgPSB0aGlzLl9yZWZlcmVuY2VzLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWQoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IHRoaXMuZXh0ZW5zaW9uU2VydmljZS5sb2FkKCk7XG4gICAgICAgIHRoaXMuc2V0dXAoY29uZmlnKTtcbiAgICB9XG5cbiAgICBzZXR1cChjb25maWc6IEV4dGVuc2lvbkNvbmZpZykge1xuICAgICAgICBpZiAoIWNvbmZpZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVmZXJlbmNlcyA9IChjb25maWcuJHJlZmVyZW5jZXMgfHwgW10pXG4gICAgICAgICAgICAuZmlsdGVyKChlbnRyeSkgPT4gdHlwZW9mIGVudHJ5ID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIC5tYXAoKGVudHJ5KSA9PiA8RXh0ZW5zaW9uUmVmPiBlbnRyeSk7XG4gICAgICAgIHRoaXMuX3JlZmVyZW5jZXMubmV4dChyZWZlcmVuY2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgZG9jdW1lbnQgbGlzdCBjb2x1bW5zIGZvciB0aGUgcGFydGljdWxhciBwcmVzZXQuXG4gICAgICogVGhlIHJlc3VsdCBpcyBmaWx0ZXJlZCBieSB0aGUgKipkaXNhYmxlZCoqIHN0YXRlLlxuICAgICAqIEBwYXJhbSBrZXkgUHJlc2V0IGtleS5cbiAgICAgKi9cbiAgICBnZXREb2N1bWVudExpc3RQcmVzZXQoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uU2VydmljZVxuICAgICAgICAgIC5nZXRFbGVtZW50czxEb2N1bWVudExpc3RQcmVzZXRSZWY+KFxuICAgICAgICAgICAgYGZlYXR1cmVzLmRvY3VtZW50TGlzdC4ke2tleX1gXG4gICAgICAgICAgKVxuICAgICAgICAgIC5maWx0ZXIoKGVudHJ5KSA9PiAhZW50cnkuZGlzYWJsZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgbGlzdCBvZiB0aGUgVmlld2VyIGNvbnRlbnQgZXh0ZW5zaW9ucyxcbiAgICAgKiBmaWx0ZXJlZCBieSAqKmRpc2FibGVkKiogc3RhdGUgYW5kICoqcnVsZXMqKi5cbiAgICAgKi9cbiAgICBnZXRWaWV3ZXJFeHRlbnNpb25zKCk6IFZpZXdlckV4dGVuc2lvblJlZltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uU2VydmljZVxuICAgICAgICAgICAgLmdldEVsZW1lbnRzPFZpZXdlckV4dGVuc2lvblJlZj4oJ2ZlYXR1cmVzLnZpZXdlci5jb250ZW50JylcbiAgICAgICAgICAgIC5maWx0ZXIoKGV4dGVuc2lvbikgPT4gIXRoaXMuaXNWaWV3ZXJFeHRlbnNpb25EaXNhYmxlZChleHRlbnNpb24pKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaXNWaWV3ZXJFeHRlbnNpb25EaXNhYmxlZChleHRlbnNpb246IFZpZXdlckV4dGVuc2lvblJlZik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgaWYgKGV4dGVuc2lvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV4dGVuc2lvbi5ydWxlcyAmJiBleHRlbnNpb24ucnVsZXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvblNlcnZpY2UuZXZhbHVhdGVSdWxlKGV4dGVuc2lvbi5ydWxlcy5kaXNhYmxlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==