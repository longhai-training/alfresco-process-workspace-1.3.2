/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function ExtensionComponent() { }
if (false) {
    /** @type {?} */
    ExtensionComponent.prototype.data;
}
export class ComponentRegisterService {
    constructor() {
        this.components = {};
    }
    /**
     * @param {?} values
     * @return {?}
     */
    setComponents(values) {
        if (values) {
            this.components = Object.assign({}, this.components, values);
        }
    }
    /**
     * @template T
     * @param {?} id
     * @return {?}
     */
    getComponentById(id) {
        return (/** @type {?} */ (this.components[id]));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasComponentById(id) {
        return !!this.getComponentById(id);
    }
}
ComponentRegisterService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ ComponentRegisterService.ngInjectableDef = i0.defineInjectable({ factory: function ComponentRegisterService_Factory() { return new ComponentRegisterService(); }, token: ComponentRegisterService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ComponentRegisterService.prototype.components;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LXJlZ2lzdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWV4dGVuc2lvbnMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY29tcG9uZW50LXJlZ2lzdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFFakQsd0NBRUM7OztJQURHLGtDQUFVOztBQUlkLE1BQU0sT0FBTyx3QkFBd0I7SUFEckM7UUFFSSxlQUFVLEdBQWdDLEVBQUUsQ0FBQztLQWVoRDs7Ozs7SUFiRyxhQUFhLENBQUMsTUFBbUM7UUFDN0MsSUFBSSxNQUFNLEVBQUU7WUFDUixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDaEU7SUFDTCxDQUFDOzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBSSxFQUFVO1FBQzFCLE9BQU8sbUJBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBQSxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBVTtRQUN2QixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7O1lBaEJKLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7O0lBRTlCLDhDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBFeHRlbnNpb25Db21wb25lbnQge1xuICAgIGRhdGE6IGFueTtcbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRSZWdpc3RlclNlcnZpY2Uge1xuICAgIGNvbXBvbmVudHM6IHsgW2tleTogc3RyaW5nXTogVHlwZTx7fT4gfSA9IHt9O1xuXG4gICAgc2V0Q29tcG9uZW50cyh2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogVHlwZTx7fT4gfSkge1xuICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbXBvbmVudHMsIHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDb21wb25lbnRCeUlkPFQ+KGlkOiBzdHJpbmcpOiBUeXBlPFQ+IHtcbiAgICAgICAgcmV0dXJuIDxUeXBlPFQ+PiB0aGlzLmNvbXBvbmVudHNbaWRdO1xuICAgIH1cblxuICAgIGhhc0NvbXBvbmVudEJ5SWQoaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmdldENvbXBvbmVudEJ5SWQoaWQpO1xuICAgIH1cbn1cbiJdfQ==