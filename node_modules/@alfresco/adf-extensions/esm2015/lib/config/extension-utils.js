/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentActionType } from './action.extensions';
/**
 * @param {?} target
 * @param {?} key
 * @return {?}
 */
export function getValue(target, key) {
    if (!target) {
        return undefined;
    }
    /** @type {?} */
    const keys = key.split('.');
    key = '';
    do {
        key += keys.shift();
        /** @type {?} */
        const value = target[key];
        if (value !== undefined &&
            (typeof value === 'object' || !keys.length)) {
            target = value;
            key = '';
        }
        else if (!keys.length) {
            target = undefined;
        }
        else {
            key += '.';
        }
    } while (keys.length);
    return target;
}
/**
 * @param {?} entry
 * @return {?}
 */
export function filterEnabled(entry) {
    return !entry.disabled;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function sortByOrder(a, b) {
    /** @type {?} */
    const left = a.order === undefined ? Number.MAX_SAFE_INTEGER : a.order;
    /** @type {?} */
    const right = b.order === undefined ? Number.MAX_SAFE_INTEGER : b.order;
    return left - right;
}
/**
 * @param {?} acc
 * @param {?} el
 * @param {?} i
 * @param {?} arr
 * @return {?}
 */
export function reduceSeparators(acc, el, i, arr) {
    // remove leading separator
    if (i === 0) {
        if (arr[i].type === ContentActionType.separator) {
            return acc;
        }
    }
    // remove duplicate separators
    if (i > 0) {
        /** @type {?} */
        const prev = arr[i - 1];
        if (prev.type === ContentActionType.separator &&
            el.type === ContentActionType.separator) {
            return acc;
        }
        // remove trailing separator
        if (i === arr.length - 1) {
            if (el.type === ContentActionType.separator) {
                return acc;
            }
        }
    }
    return acc.concat(el);
}
/**
 * @param {?} acc
 * @param {?} el
 * @return {?}
 */
export function reduceEmptyMenus(acc, el) {
    if (el.type === ContentActionType.menu) {
        if ((el.children || []).length === 0) {
            return acc;
        }
    }
    return acc.concat(el);
}
/**
 * @param {...?} objects
 * @return {?}
 */
export function mergeObjects(...objects) {
    /** @type {?} */
    const result = {};
    objects.forEach((/**
     * @param {?} source
     * @return {?}
     */
    (source) => {
        Object.keys(source).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        (prop) => {
            if (!prop.startsWith('$')) {
                if (prop in result && Array.isArray(result[prop])) {
                    // result[prop] = result[prop].concat(source[prop]);
                    result[prop] = mergeArrays(result[prop], source[prop]);
                }
                else if (prop in result && typeof result[prop] === 'object') {
                    result[prop] = mergeObjects(result[prop], source[prop]);
                }
                else {
                    result[prop] = source[prop];
                }
            }
        }));
    }));
    return result;
}
/**
 * @param {?} left
 * @param {?} right
 * @return {?}
 */
export function mergeArrays(left, right) {
    /** @type {?} */
    const result = [];
    /** @type {?} */
    const map = {};
    (left || []).forEach((/**
     * @param {?} entry
     * @return {?}
     */
    (entry) => {
        /** @type {?} */
        const element = entry;
        if (element && element.hasOwnProperty('id')) {
            map[element.id] = element;
        }
        else {
            result.push(element);
        }
    }));
    (right || []).forEach((/**
     * @param {?} entry
     * @return {?}
     */
    (entry) => {
        /** @type {?} */
        const element = entry;
        if (element && element.hasOwnProperty('id') && map[element.id]) {
            /** @type {?} */
            const merged = mergeObjects(map[element.id], element);
            map[element.id] = merged;
        }
        else {
            result.push(element);
        }
    }));
    return Object.keys(map).map((/**
     * @param {?} key
     * @return {?}
     */
    (key) => map[key])).concat(result);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1leHRlbnNpb25zLyIsInNvdXJjZXMiOlsibGliL2NvbmZpZy9leHRlbnNpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFvQixpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7Ozs7QUFFMUUsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFXLEVBQUUsR0FBVztJQUM3QyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1QsT0FBTyxTQUFTLENBQUM7S0FDcEI7O1VBRUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzNCLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFFVCxHQUFHO1FBQ0MsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Y0FDZCxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUN6QixJQUNJLEtBQUssS0FBSyxTQUFTO1lBQ25CLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUM3QztZQUNFLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDZixHQUFHLEdBQUcsRUFBRSxDQUFDO1NBQ1o7YUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNyQixNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3RCO2FBQU07WUFDSCxHQUFHLElBQUksR0FBRyxDQUFDO1NBQ2Q7S0FDSixRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFFdEIsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQTZCO0lBQ3ZELE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0FBQzNCLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3ZC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RyxDQUFDLENBQUMsR0FBRzs7OztJQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbnRlbnRBY3Rpb25SZWYsIENvbnRlbnRBY3Rpb25UeXBlIH0gZnJvbSAnLi9hY3Rpb24uZXh0ZW5zaW9ucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZSh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5cyA9IGtleS5zcGxpdCgnLicpO1xuICAgIGtleSA9ICcnO1xuXG4gICAgZG8ge1xuICAgICAgICBrZXkgKz0ga2V5cy5zaGlmdCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCAha2V5cy5sZW5ndGgpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdmFsdWU7XG4gICAgICAgICAgICBrZXkgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmICgha2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleSArPSAnLic7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChrZXlzLmxlbmd0aCk7XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyRW5hYmxlZChlbnRyeTogeyBkaXNhYmxlZD86IGJvb2xlYW4gfSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhZW50cnkuZGlzYWJsZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnlPcmRlcihcbiAgICBhOiB7IG9yZGVyPzogbnVtYmVyIHwgdW5kZWZpbmVkIH0sXG4gICAgYjogeyBvcmRlcj86IG51bWJlciB8IHVuZGVmaW5lZCB9XG4pIHtcbiAgICBjb25zdCBsZWZ0ID0gYS5vcmRlciA9PT0gdW5kZWZpbmVkID8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgOiBhLm9yZGVyO1xuICAgIGNvbnN0IHJpZ2h0ID0gYi5vcmRlciA9PT0gdW5kZWZpbmVkID8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgOiBiLm9yZGVyO1xuICAgIHJldHVybiBsZWZ0IC0gcmlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VTZXBhcmF0b3JzKFxuICAgIGFjYzogQ29udGVudEFjdGlvblJlZltdLFxuICAgIGVsOiBDb250ZW50QWN0aW9uUmVmLFxuICAgIGk6IG51bWJlcixcbiAgICBhcnI6IENvbnRlbnRBY3Rpb25SZWZbXVxuKTogQ29udGVudEFjdGlvblJlZltdIHtcbiAgICAvLyByZW1vdmUgbGVhZGluZyBzZXBhcmF0b3JcbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICBpZiAoYXJyW2ldLnR5cGUgPT09IENvbnRlbnRBY3Rpb25UeXBlLnNlcGFyYXRvcikge1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyByZW1vdmUgZHVwbGljYXRlIHNlcGFyYXRvcnNcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgY29uc3QgcHJldiA9IGFycltpIC0gMV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHByZXYudHlwZSA9PT0gQ29udGVudEFjdGlvblR5cGUuc2VwYXJhdG9yICYmXG4gICAgICAgICAgICBlbC50eXBlID09PSBDb250ZW50QWN0aW9uVHlwZS5zZXBhcmF0b3JcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlcGFyYXRvclxuICAgICAgICBpZiAoaSA9PT0gYXJyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGlmIChlbC50eXBlID09PSBDb250ZW50QWN0aW9uVHlwZS5zZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlRW1wdHlNZW51cyhcbiAgICBhY2M6IENvbnRlbnRBY3Rpb25SZWZbXSxcbiAgICBlbDogQ29udGVudEFjdGlvblJlZlxuKTogQ29udGVudEFjdGlvblJlZltdIHtcbiAgICBpZiAoZWwudHlwZSA9PT0gQ29udGVudEFjdGlvblR5cGUubWVudSkge1xuICAgICAgICBpZiAoKGVsLmNoaWxkcmVuIHx8IFtdKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPYmplY3RzKC4uLm9iamVjdHMpOiBhbnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgb2JqZWN0cy5mb3JFYWNoKChzb3VyY2UpID0+IHtcbiAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXByb3Auc3RhcnRzV2l0aCgnJCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgaW4gcmVzdWx0ICYmIEFycmF5LmlzQXJyYXkocmVzdWx0W3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXN1bHRbcHJvcF0gPSByZXN1bHRbcHJvcF0uY29uY2F0KHNvdXJjZVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IG1lcmdlQXJyYXlzKHJlc3VsdFtwcm9wXSwgc291cmNlW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3AgaW4gcmVzdWx0ICYmIHR5cGVvZiByZXN1bHRbcHJvcF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IG1lcmdlT2JqZWN0cyhyZXN1bHRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBcnJheXMobGVmdDogYW55W10sIHJpZ2h0OiBhbnlbXSk6IGFueVtdIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBtYXAgPSB7fTtcblxuICAgIChsZWZ0IHx8IFtdKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZW50cnk7XG4gICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcbiAgICAgICAgICAgIG1hcFtlbGVtZW50LmlkXSA9IGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgKHJpZ2h0IHx8IFtdKS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZW50cnk7XG4gICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgbWFwW2VsZW1lbnQuaWRdKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZU9iamVjdHMobWFwW2VsZW1lbnQuaWRdLCBlbGVtZW50KTtcbiAgICAgICAgICAgIG1hcFtlbGVtZW50LmlkXSA9IG1lcmdlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoKGtleSkgPT4gbWFwW2tleV0pLmNvbmNhdChyZXN1bHQpO1xufVxuIl19