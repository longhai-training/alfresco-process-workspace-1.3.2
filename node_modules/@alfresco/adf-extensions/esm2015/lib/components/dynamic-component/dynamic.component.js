/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';
import { ExtensionService } from '../../services/extension.service';
// cSpell:words lifecycle
export class DynamicExtensionComponent {
    /**
     * @param {?} extensions
     * @param {?} componentFactoryResolver
     */
    constructor(extensions, componentFactoryResolver) {
        this.extensions = extensions;
        this.componentFactoryResolver = componentFactoryResolver;
        this.loaded = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        if (changes.data) {
            this.data = changes.data.currentValue;
        }
        this.updateInstance();
        this.proxy('ngOnChanges', changes);
    }
    /**
     * @private
     * @return {?}
     */
    loadComponent() {
        /** @type {?} */
        const componentType = this.extensions.getComponentById(this.id);
        if (componentType) {
            /** @type {?} */
            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            if (factory) {
                this.content.clear();
                this.componentRef = this.content.createComponent(factory, 0);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentCreated()) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateInstance() {
        if (this.componentCreated()) {
            this.componentRef.instance.data = this.data;
        }
    }
    /**
     * @private
     * @param {?} lifecycleMethod
     * @param {...?} args
     * @return {?}
     */
    proxy(lifecycleMethod, ...args) {
        if (this.componentCreated() && this.lifecycleHookIsImplemented(lifecycleMethod)) {
            this.componentRef.instance[lifecycleMethod].apply(this.componentRef.instance, args);
        }
    }
    /**
     * @private
     * @return {?}
     */
    componentCreated() {
        return !!this.componentRef && !!this.componentRef.instance;
    }
    /**
     * @private
     * @param {?} lifecycleMethod
     * @return {?}
     */
    lifecycleHookIsImplemented(lifecycleMethod) {
        return !!this.componentRef.instance[lifecycleMethod];
    }
}
DynamicExtensionComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-dynamic-component',
                template: `<div #content></div>`
            }] }
];
/** @nocollapse */
DynamicExtensionComponent.ctorParameters = () => [
    { type: ExtensionService },
    { type: ComponentFactoryResolver }
];
DynamicExtensionComponent.propDecorators = {
    content: [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] }],
    id: [{ type: Input }],
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicExtensionComponent.prototype.content;
    /**
     * Unique ID string for the component to show.
     * @type {?}
     */
    DynamicExtensionComponent.prototype.id;
    /**
     * Data for the dynamically-loaded component instance.
     * @type {?}
     */
    DynamicExtensionComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.loaded;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.extensions;
    /**
     * @type {?}
     * @private
     */
    DynamicExtensionComponent.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWV4dGVuc2lvbnMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9keW5hbWljLWNvbXBvbmVudC9keW5hbWljLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUNULEtBQUssRUFFTCx3QkFBd0IsRUFDeEIsU0FBUyxFQUNULGdCQUFnQixFQUluQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7QUFRcEUsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7SUFhbEMsWUFBb0IsVUFBNEIsRUFBVSx3QkFBa0Q7UUFBeEYsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFBVSw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBRnBHLFdBQU0sR0FBWSxLQUFLLENBQUM7SUFFK0UsQ0FBQzs7Ozs7SUFFaEgsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7OztJQUVPLGFBQWE7O2NBQ1gsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQXFCLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkYsSUFBSSxhQUFhLEVBQUU7O2tCQUNULE9BQU8sR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQ2pFLGFBQWEsQ0FDaEI7WUFDRCxJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNoRTtTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7OztJQUVPLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMvQztJQUNMLENBQUM7Ozs7Ozs7SUFFTyxLQUFLLENBQUMsZUFBZSxFQUFFLEdBQUcsSUFBSTtRQUNsQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUM3RSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDdkY7SUFDTCxDQUFDOzs7OztJQUVPLGdCQUFnQjtRQUNwQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUNoRSxDQUFDOzs7Ozs7SUFFTywwQkFBMEIsQ0FBQyxlQUF1QjtRQUN0RCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7WUF2RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLFFBQVEsRUFBRSxzQkFBc0I7YUFDbkM7Ozs7WUFQUSxnQkFBZ0I7WUFQckIsd0JBQXdCOzs7c0JBZ0J2QixTQUFTLFNBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFO2lCQUkvQyxLQUFLO21CQUdMLEtBQUs7Ozs7SUFQTiw0Q0FDMEI7Ozs7O0lBRzFCLHVDQUFvQjs7Ozs7SUFHcEIseUNBQW1COzs7OztJQUVuQixpREFBdUQ7Ozs7O0lBQ3ZELDJDQUFnQzs7Ozs7SUFFcEIsK0NBQW9DOzs7OztJQUFFLDZEQUEwRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIElucHV0LFxuICAgIENvbXBvbmVudFJlZixcbiAgICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgVmlld0NoaWxkLFxuICAgIFZpZXdDb250YWluZXJSZWYsXG4gICAgT25EZXN0cm95LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2V4dGVuc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEV4dGVuc2lvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvbXBvbmVudC1yZWdpc3Rlci5zZXJ2aWNlJztcblxuLy8gY1NwZWxsOndvcmRzIGxpZmVjeWNsZVxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtZHluYW1pYy1jb21wb25lbnQnLFxuICAgIHRlbXBsYXRlOiBgPGRpdiAjY29udGVudD48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNFeHRlbnNpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgQFZpZXdDaGlsZCgnY29udGVudCcsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KVxuICAgIGNvbnRlbnQ6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgICAvKiogVW5pcXVlIElEIHN0cmluZyBmb3IgdGhlIGNvbXBvbmVudCB0byBzaG93LiAqL1xuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmc7XG5cbiAgICAvKiogRGF0YSBmb3IgdGhlIGR5bmFtaWNhbGx5LWxvYWRlZCBjb21wb25lbnQgaW5zdGFuY2UuICovXG4gICAgQElucHV0KCkgZGF0YTogYW55O1xuXG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxFeHRlbnNpb25Db21wb25lbnQ+O1xuICAgIHByaXZhdGUgbG9hZGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGV4dGVuc2lvbnM6IEV4dGVuc2lvblNlcnZpY2UsIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpIHt9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmICghdGhpcy5sb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZENvbXBvbmVudCgpO1xuICAgICAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYW5nZXMuZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXBkYXRlSW5zdGFuY2UoKTtcbiAgICAgICAgdGhpcy5wcm94eSgnbmdPbkNoYW5nZXMnLCBjaGFuZ2VzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRDb21wb25lbnQoKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFR5cGUgPSB0aGlzLmV4dGVuc2lvbnMuZ2V0Q29tcG9uZW50QnlJZDxFeHRlbnNpb25Db21wb25lbnQ+KHRoaXMuaWQpO1xuICAgICAgICBpZiAoY29tcG9uZW50VHlwZSkge1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoZmFjdG9yeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250ZW50LmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRDcmVhdGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlSW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudENyZWF0ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcHJveHkobGlmZWN5Y2xlTWV0aG9kLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudENyZWF0ZWQoKSAmJiB0aGlzLmxpZmVjeWNsZUhvb2tJc0ltcGxlbWVudGVkKGxpZmVjeWNsZU1ldGhvZCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlW2xpZmVjeWNsZU1ldGhvZF0uYXBwbHkodGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21wb25lbnRDcmVhdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmNvbXBvbmVudFJlZiAgJiYgISF0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxpZmVjeWNsZUhvb2tJc0ltcGxlbWVudGVkKGxpZmVjeWNsZU1ldGhvZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlW2xpZmVjeWNsZU1ldGhvZF07XG4gICAgfVxufVxuIl19