(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@alfresco/adf-extensions', ['exports', '@angular/common/http', '@angular/core', 'rxjs'], factory) :
    (factory((global.alfresco = global.alfresco || {}, global.alfresco['adf-extensions'] = {}),global.ng.common.http,global.ng.core,global.rxjs));
}(this, (function (exports,i1,i0,rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @enum {string} */
    var ContentActionType = {
        default: 'default',
        button: 'button',
        separator: 'separator',
        menu: 'menu',
        custom: 'custom',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function getValue(target, key) {
        if (!target) {
            return undefined;
        }
        /** @type {?} */
        var keys = key.split('.');
        key = '';
        do {
            key += keys.shift();
            /** @type {?} */
            var value = target[key];
            if (value !== undefined &&
                (typeof value === 'object' || !keys.length)) {
                target = value;
                key = '';
            }
            else if (!keys.length) {
                target = undefined;
            }
            else {
                key += '.';
            }
        } while (keys.length);
        return target;
    }
    /**
     * @param {?} entry
     * @return {?}
     */
    function filterEnabled(entry) {
        return !entry.disabled;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function sortByOrder(a, b) {
        /** @type {?} */
        var left = a.order === undefined ? Number.MAX_SAFE_INTEGER : a.order;
        /** @type {?} */
        var right = b.order === undefined ? Number.MAX_SAFE_INTEGER : b.order;
        return left - right;
    }
    /**
     * @param {?} acc
     * @param {?} el
     * @param {?} i
     * @param {?} arr
     * @return {?}
     */
    function reduceSeparators(acc, el, i, arr) {
        // remove leading separator
        if (i === 0) {
            if (arr[i].type === ContentActionType.separator) {
                return acc;
            }
        }
        // remove duplicate separators
        if (i > 0) {
            /** @type {?} */
            var prev = arr[i - 1];
            if (prev.type === ContentActionType.separator &&
                el.type === ContentActionType.separator) {
                return acc;
            }
            // remove trailing separator
            if (i === arr.length - 1) {
                if (el.type === ContentActionType.separator) {
                    return acc;
                }
            }
        }
        return acc.concat(el);
    }
    /**
     * @param {?} acc
     * @param {?} el
     * @return {?}
     */
    function reduceEmptyMenus(acc, el) {
        if (el.type === ContentActionType.menu) {
            if ((el.children || []).length === 0) {
                return acc;
            }
        }
        return acc.concat(el);
    }
    /**
     * @param {...?} objects
     * @return {?}
     */
    function mergeObjects() {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        /** @type {?} */
        var result = {};
        objects.forEach(( /**
         * @param {?} source
         * @return {?}
         */function (source) {
            Object.keys(source).forEach(( /**
             * @param {?} prop
             * @return {?}
             */function (prop) {
                if (!prop.startsWith('$')) {
                    if (prop in result && Array.isArray(result[prop])) {
                        // result[prop] = result[prop].concat(source[prop]);
                        result[prop] = mergeArrays(result[prop], source[prop]);
                    }
                    else if (prop in result && typeof result[prop] === 'object') {
                        result[prop] = mergeObjects(result[prop], source[prop]);
                    }
                    else {
                        result[prop] = source[prop];
                    }
                }
            }));
        }));
        return result;
    }
    /**
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    function mergeArrays(left, right) {
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var map = {};
        (left || []).forEach(( /**
         * @param {?} entry
         * @return {?}
         */function (entry) {
            /** @type {?} */
            var element = entry;
            if (element && element.hasOwnProperty('id')) {
                map[element.id] = element;
            }
            else {
                result.push(element);
            }
        }));
        (right || []).forEach(( /**
         * @param {?} entry
         * @return {?}
         */function (entry) {
            /** @type {?} */
            var element = entry;
            if (element && element.hasOwnProperty('id') && map[element.id]) {
                /** @type {?} */
                var merged = mergeObjects(map[element.id], element);
                map[element.id] = merged;
            }
            else {
                result.push(element);
            }
        }));
        return Object.keys(map).map(( /**
         * @param {?} key
         * @return {?}
         */function (key) { return map[key]; })).concat(result);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtensionLoaderService = /** @class */ (function () {
        function ExtensionLoaderService(http) {
            this.http = http;
        }
        /**
         * @param {?} configPath
         * @param {?} pluginsPath
         * @return {?}
         */
        ExtensionLoaderService.prototype.load = /**
         * @param {?} configPath
         * @param {?} pluginsPath
         * @return {?}
         */
            function (configPath, pluginsPath) {
                var _this = this;
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    _this.loadConfig(configPath, 0).then(( /**
                     * @param {?} result
                     * @return {?}
                     */function (result) {
                        if (result) {
                            /** @type {?} */
                            var config_1 = result.config;
                            /** @type {?} */
                            var override = sessionStorage.getItem('app.extension.config');
                            if (override) {
                                config_1 = JSON.parse(override);
                            }
                            if (config_1.$references && config_1.$references.length > 0) {
                                /** @type {?} */
                                var plugins = config_1.$references.map(( /**
                                 * @param {?} name
                                 * @param {?} idx
                                 * @return {?}
                                 */function (name, idx) {
                                    return _this.loadConfig(pluginsPath + "/" + name, idx);
                                }));
                                Promise.all(plugins).then(( /**
                                 * @param {?} results
                                 * @return {?}
                                 */function (results) {
                                    /** @type {?} */
                                    var configs = results
                                        .filter(( /**
                                 * @param {?} entry
                                 * @return {?}
                                 */function (entry) { return entry; }))
                                        .sort(sortByOrder)
                                        .map(( /**
                                 * @param {?} entry
                                 * @return {?}
                                 */function (entry) { return entry.config; }));
                                    if (configs.length > 0) {
                                        config_1 = mergeObjects.apply(void 0, __spread([config_1], configs));
                                    }
                                    config_1 = __assign({}, config_1, _this.getMetadata(result.config), { $references: configs.map(( /**
                                             * @param {?} ext
                                             * @return {?}
                                             */function (ext) { return _this.getMetadata(ext); })) });
                                    resolve(config_1);
                                }));
                            }
                            else {
                                resolve(config_1);
                            }
                        }
                    }));
                }));
            };
        /**
         * @protected
         * @param {?} config
         * @return {?}
         */
        ExtensionLoaderService.prototype.getMetadata = /**
         * @protected
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var result = {};
                Object
                    .keys(config)
                    .filter(( /**
             * @param {?} key
             * @return {?}
             */function (key) { return key.startsWith('$'); }))
                    .forEach(( /**
             * @param {?} key
             * @return {?}
             */function (key) {
                    result[key] = config[key];
                }));
                return result;
            };
        /**
         * @protected
         * @param {?} url
         * @param {?} order
         * @return {?}
         */
        ExtensionLoaderService.prototype.loadConfig = /**
         * @protected
         * @param {?} url
         * @param {?} order
         * @return {?}
         */
            function (url, order) {
                var _this = this;
                return new Promise(( /**
                 * @param {?} resolve
                 * @return {?}
                 */function (resolve) {
                    _this.http.get(url).subscribe(( /**
                     * @param {?} config
                     * @return {?}
                     */function (config) {
                        resolve({
                            order: order,
                            config: config
                        });
                    }), ( /**
                     * @return {?}
                     */function () {
                        resolve(null);
                    }));
                }));
            };
        /**
         * Retrieves configuration elements.
         * Filters element by **enabled** and **order** attributes.
         * Example:
         *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
         */
        /**
         * Retrieves configuration elements.
         * Filters element by **enabled** and **order** attributes.
         * Example:
         *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
         * @template T
         * @param {?} config
         * @param {?} key
         * @param {?=} fallback
         * @return {?}
         */
        ExtensionLoaderService.prototype.getElements = /**
         * Retrieves configuration elements.
         * Filters element by **enabled** and **order** attributes.
         * Example:
         *  `getElements<ViewerExtensionRef>(config, 'features.viewer.content')`
         * @template T
         * @param {?} config
         * @param {?} key
         * @param {?=} fallback
         * @return {?}
         */
            function (config, key, fallback) {
                if (fallback === void 0) {
                    fallback = [];
                }
                /** @type {?} */
                var values = getValue(config, key) || fallback || [];
                return values.filter(filterEnabled).sort(sortByOrder);
            };
        /**
         * @param {?} config
         * @param {?} key
         * @return {?}
         */
        ExtensionLoaderService.prototype.getContentActions = /**
         * @param {?} config
         * @param {?} key
         * @return {?}
         */
            function (config, key) {
                return this.getElements(config, key).map(this.setActionDefaults);
            };
        /**
         * @param {?} config
         * @return {?}
         */
        ExtensionLoaderService.prototype.getRules = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (config && config.rules) {
                    return config.rules;
                }
                return [];
            };
        /**
         * @param {?} config
         * @return {?}
         */
        ExtensionLoaderService.prototype.getRoutes = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (config) {
                    return config.routes || [];
                }
                return [];
            };
        /**
         * @param {?} config
         * @return {?}
         */
        ExtensionLoaderService.prototype.getActions = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (config) {
                    return config.actions || [];
                }
                return [];
            };
        /**
         * @param {?} config
         * @return {?}
         */
        ExtensionLoaderService.prototype.getFeatures = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (config) {
                    return config.features || [];
                }
                return [];
            };
        /**
         * @protected
         * @param {?} action
         * @return {?}
         */
        ExtensionLoaderService.prototype.setActionDefaults = /**
         * @protected
         * @param {?} action
         * @return {?}
         */
            function (action) {
                if (action) {
                    action.type = action.type || ContentActionType.default;
                    action.icon = action.icon || 'extension';
                }
                return action;
            };
        ExtensionLoaderService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ExtensionLoaderService.ctorParameters = function () {
            return [
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ ExtensionLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function ExtensionLoaderService_Factory() { return new ExtensionLoaderService(i0.inject(i1.HttpClient)); }, token: ExtensionLoaderService, providedIn: "root" });
        return ExtensionLoaderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {?} context
     * @param {...?} args
     * @return {?}
     */
    function not(context) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!args || args.length === 0) {
            return false;
        }
        return args
            .every(( /**
     * @param {?} arg
     * @return {?}
     */function (arg) {
            /** @type {?} */
            var evaluator = context.getEvaluator(arg.value);
            if (!evaluator) {
                console.warn('evaluator not found: ' + arg.value);
                return false;
            }
            return !evaluator.apply(void 0, __spread([context], (arg.parameters || [])));
        }));
    }
    /**
     * @param {?} context
     * @param {...?} args
     * @return {?}
     */
    function every(context) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!args || args.length === 0) {
            return false;
        }
        return args
            .every(( /**
     * @param {?} arg
     * @return {?}
     */function (arg) {
            /** @type {?} */
            var evaluator = context.getEvaluator(arg.value);
            if (!evaluator) {
                console.warn('evaluator not found: ' + arg.value);
                return false;
            }
            return evaluator.apply(void 0, __spread([context], (arg.parameters || [])));
        }));
    }
    /**
     * @param {?} context
     * @param {...?} args
     * @return {?}
     */
    function some(context) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!args || args.length === 0) {
            return false;
        }
        return args
            .some(( /**
     * @param {?} arg
     * @return {?}
     */function (arg) {
            /** @type {?} */
            var evaluator = context.getEvaluator(arg.value);
            if (!evaluator) {
                console.warn('evaluator not found: ' + arg.value);
                return false;
            }
            return evaluator.apply(void 0, __spread([context], (arg.parameters || [])));
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ComponentRegisterService = /** @class */ (function () {
        function ComponentRegisterService() {
            this.components = {};
        }
        /**
         * @param {?} values
         * @return {?}
         */
        ComponentRegisterService.prototype.setComponents = /**
         * @param {?} values
         * @return {?}
         */
            function (values) {
                if (values) {
                    this.components = Object.assign({}, this.components, values);
                }
            };
        /**
         * @template T
         * @param {?} id
         * @return {?}
         */
        ComponentRegisterService.prototype.getComponentById = /**
         * @template T
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return ( /** @type {?} */(this.components[id]));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ComponentRegisterService.prototype.hasComponentById = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return !!this.getComponentById(id);
            };
        ComponentRegisterService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ ComponentRegisterService.ngInjectableDef = i0.defineInjectable({ factory: function ComponentRegisterService_Factory() { return new ComponentRegisterService(); }, token: ComponentRegisterService, providedIn: "root" });
        return ComponentRegisterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RuleService = /** @class */ (function () {
        function RuleService(loader) {
            this.loader = loader;
            this.context = null;
            this.rules = [];
            this.evaluators = {};
        }
        /**
         * @param {?} config
         * @return {?}
         */
        RuleService.prototype.setup = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                this.rules = this.loader.getRules(config);
            };
        /**
         * Adds one or more new rule evaluators to the existing set.
         * @param values The new evaluators to add
         */
        /**
         * Adds one or more new rule evaluators to the existing set.
         * @param {?} values The new evaluators to add
         * @return {?}
         */
        RuleService.prototype.setEvaluators = /**
         * Adds one or more new rule evaluators to the existing set.
         * @param {?} values The new evaluators to add
         * @return {?}
         */
            function (values) {
                if (values) {
                    this.evaluators = Object.assign({}, this.evaluators, values);
                }
            };
        /**
         * Retrieves a rule using its ID value.
         * @param id The ID value to look for
         * @returns The rule or null if not found
         */
        /**
         * Retrieves a rule using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} The rule or null if not found
         */
        RuleService.prototype.getRuleById = /**
         * Retrieves a rule using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} The rule or null if not found
         */
            function (id) {
                return this.rules.find(( /**
                 * @param {?} ref
                 * @return {?}
                 */function (ref) { return ref.id === id; }));
            };
        /**
         * Retrieves a RuleEvaluator function using its key name.
         * @param key Key name to look for
         * @returns RuleEvaluator or null if not found
         */
        /**
         * Retrieves a RuleEvaluator function using its key name.
         * @param {?} key Key name to look for
         * @return {?} RuleEvaluator or null if not found
         */
        RuleService.prototype.getEvaluator = /**
         * Retrieves a RuleEvaluator function using its key name.
         * @param {?} key Key name to look for
         * @return {?} RuleEvaluator or null if not found
         */
            function (key) {
                if (key && key.startsWith('!')) {
                    /** @type {?} */
                    var fn_1 = this.evaluators[key.substring(1)];
                    return ( /**
                     * @param {?} context
                     * @param {...?} args
                     * @return {?}
                     */function (context) {
                        var args = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            args[_i - 1] = arguments[_i];
                        }
                        return !fn_1.apply(void 0, __spread([context], args));
                    });
                }
                return this.evaluators[key];
            };
        /**
         * Evaluates a rule.
         * @param ruleId ID of the rule to evaluate
         * @param context (optional) Custom rule execution context.
         * @returns True if the rule passed, false otherwise
         */
        /**
         * Evaluates a rule.
         * @param {?} ruleId ID of the rule to evaluate
         * @param {?=} context (optional) Custom rule execution context.
         * @return {?} True if the rule passed, false otherwise
         */
        RuleService.prototype.evaluateRule = /**
         * Evaluates a rule.
         * @param {?} ruleId ID of the rule to evaluate
         * @param {?=} context (optional) Custom rule execution context.
         * @return {?} True if the rule passed, false otherwise
         */
            function (ruleId, context) {
                /** @type {?} */
                var ruleRef = this.getRuleById(ruleId);
                context = context || this.context;
                if (ruleRef) {
                    /** @type {?} */
                    var evaluator = this.getEvaluator(ruleRef.type);
                    if (evaluator) {
                        return evaluator.apply(void 0, __spread([context], ruleRef.parameters));
                    }
                }
                else {
                    /** @type {?} */
                    var evaluator = this.getEvaluator(ruleId);
                    if (evaluator) {
                        return evaluator(context);
                    }
                }
                return false;
            };
        RuleService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        RuleService.ctorParameters = function () {
            return [
                { type: ExtensionLoaderService }
            ];
        };
        /** @nocollapse */ RuleService.ngInjectableDef = i0.defineInjectable({ factory: function RuleService_Factory() { return new RuleService(i0.inject(ExtensionLoaderService)); }, token: RuleService, providedIn: "root" });
        return RuleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtensionService = /** @class */ (function () {
        function ExtensionService(loader, componentRegister, ruleService) {
            this.loader = loader;
            this.componentRegister = componentRegister;
            this.ruleService = ruleService;
            this.config = null;
            this.configPath = 'assets/app.extensions.json';
            this.pluginsPath = 'assets/plugins';
            this.routes = [];
            this.actions = [];
            this.features = [];
            this.authGuards = {};
        }
        /**
         * Loads and registers an extension config file and plugins (specified by path properties).
         * @returns The loaded config data
         */
        /**
         * Loads and registers an extension config file and plugins (specified by path properties).
         * @return {?} The loaded config data
         */
        ExtensionService.prototype.load = /**
         * Loads and registers an extension config file and plugins (specified by path properties).
         * @return {?} The loaded config data
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var config;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.loader.load(this.configPath, this.pluginsPath)];
                            case 1:
                                config = _a.sent();
                                this.setup(config);
                                return [2 /*return*/, config];
                        }
                    });
                });
            };
        /**
         * Registers extensions from a config object.
         * @param config Object with config data
         */
        /**
         * Registers extensions from a config object.
         * @param {?} config Object with config data
         * @return {?}
         */
        ExtensionService.prototype.setup = /**
         * Registers extensions from a config object.
         * @param {?} config Object with config data
         * @return {?}
         */
            function (config) {
                if (!config) {
                    console.warn('Extension configuration not found');
                    return;
                }
                this.config = config;
                this.setEvaluators({
                    'core.every': every,
                    'core.some': some,
                    'core.not': not
                });
                this.actions = this.loader.getActions(config);
                this.routes = this.loader.getRoutes(config);
                this.features = this.loader.getFeatures(config);
                this.ruleService.setup(config);
            };
        /**
         * Gets features by key.
         * @param key Key string, using dot notation
         * @returns Features array found by key
         */
        /**
         * Gets features by key.
         * @param {?} key Key string, using dot notation
         * @return {?} Features array found by key
         */
        ExtensionService.prototype.getFeature = /**
         * Gets features by key.
         * @param {?} key Key string, using dot notation
         * @return {?} Features array found by key
         */
            function (key) {
                /** @type {?} */
                var properties = Array.isArray(key) ? [key] : key.split('.');
                return properties.reduce(( /**
                 * @param {?} prev
                 * @param {?} curr
                 * @return {?}
                 */function (prev, curr) { return prev && prev[curr]; }), this.features) || [];
            };
        /**
         * @template T
         * @param {?} key
         * @param {?=} fallback
         * @return {?}
         */
        ExtensionService.prototype.getElements = /**
         * @template T
         * @param {?} key
         * @param {?=} fallback
         * @return {?}
         */
            function (key, fallback) {
                if (fallback === void 0) {
                    fallback = [];
                }
                return this.loader.getElements(this.config, key, fallback);
            };
        /**
         * Adds one or more new rule evaluators to the existing set.
         * @param values The new evaluators to add
         */
        /**
         * Adds one or more new rule evaluators to the existing set.
         * @param {?} values The new evaluators to add
         * @return {?}
         */
        ExtensionService.prototype.setEvaluators = /**
         * Adds one or more new rule evaluators to the existing set.
         * @param {?} values The new evaluators to add
         * @return {?}
         */
            function (values) {
                this.ruleService.setEvaluators(values);
            };
        /**
         * Adds one or more new auth guards to the existing set.
         * @param values The new auth guards to add
         */
        /**
         * Adds one or more new auth guards to the existing set.
         * @param {?} values The new auth guards to add
         * @return {?}
         */
        ExtensionService.prototype.setAuthGuards = /**
         * Adds one or more new auth guards to the existing set.
         * @param {?} values The new auth guards to add
         * @return {?}
         */
            function (values) {
                if (values) {
                    this.authGuards = Object.assign({}, this.authGuards, values);
                }
            };
        /**
         * Adds one or more new components to the existing set.
         * @param values The new components to add
         */
        /**
         * Adds one or more new components to the existing set.
         * @param {?} values The new components to add
         * @return {?}
         */
        ExtensionService.prototype.setComponents = /**
         * Adds one or more new components to the existing set.
         * @param {?} values The new components to add
         * @return {?}
         */
            function (values) {
                this.componentRegister.setComponents(values);
            };
        /**
         * Retrieves a route using its ID value.
         * @param id The ID value to look for
         * @returns The route or null if not found
         */
        /**
         * Retrieves a route using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} The route or null if not found
         */
        ExtensionService.prototype.getRouteById = /**
         * Retrieves a route using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} The route or null if not found
         */
            function (id) {
                return this.routes.find(( /**
                 * @param {?} route
                 * @return {?}
                 */function (route) { return route.id === id; }));
            };
        /**
         * Retrieves one or more auth guards using an array of ID values.
         * @param ids Array of ID value to look for
         * @returns Array of auth guards or empty array if none were found
         */
        /**
         * Retrieves one or more auth guards using an array of ID values.
         * @param {?} ids Array of ID value to look for
         * @return {?} Array of auth guards or empty array if none were found
         */
        ExtensionService.prototype.getAuthGuards = /**
         * Retrieves one or more auth guards using an array of ID values.
         * @param {?} ids Array of ID value to look for
         * @return {?} Array of auth guards or empty array if none were found
         */
            function (ids) {
                var _this = this;
                return (ids || [])
                    .map(( /**
             * @param {?} id
             * @return {?}
             */function (id) { return _this.authGuards[id]; }))
                    .filter(( /**
             * @param {?} guard
             * @return {?}
             */function (guard) { return guard; }));
            };
        /**
         * Retrieves an action using its ID value.
         * @param id The ID value to look for
         * @returns Action or null if not found
         */
        /**
         * Retrieves an action using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} Action or null if not found
         */
        ExtensionService.prototype.getActionById = /**
         * Retrieves an action using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} Action or null if not found
         */
            function (id) {
                return this.actions.find(( /**
                 * @param {?} action
                 * @return {?}
                 */function (action) { return action.id === id; }));
            };
        /**
         * Retrieves a RuleEvaluator function using its key name.
         * @param key Key name to look for
         * @returns RuleEvaluator or null if not found
         */
        /**
         * Retrieves a RuleEvaluator function using its key name.
         * @param {?} key Key name to look for
         * @return {?} RuleEvaluator or null if not found
         */
        ExtensionService.prototype.getEvaluator = /**
         * Retrieves a RuleEvaluator function using its key name.
         * @param {?} key Key name to look for
         * @return {?} RuleEvaluator or null if not found
         */
            function (key) {
                return this.ruleService.getEvaluator(key);
            };
        /**
         * Evaluates a rule.
         * @param ruleId ID of the rule to evaluate
         * @param context (optional) Custom rule execution context.
         * @returns True if the rule passed, false otherwise
         */
        /**
         * Evaluates a rule.
         * @param {?} ruleId ID of the rule to evaluate
         * @param {?=} context (optional) Custom rule execution context.
         * @return {?} True if the rule passed, false otherwise
         */
        ExtensionService.prototype.evaluateRule = /**
         * Evaluates a rule.
         * @param {?} ruleId ID of the rule to evaluate
         * @param {?=} context (optional) Custom rule execution context.
         * @return {?} True if the rule passed, false otherwise
         */
            function (ruleId, context) {
                return this.ruleService.evaluateRule(ruleId, context);
            };
        /**
         * Retrieves a registered extension component using its ID value.
         * @param id The ID value to look for
         * @returns The component or null if not found
         */
        /**
         * Retrieves a registered extension component using its ID value.
         * @template T
         * @param {?} id The ID value to look for
         * @return {?} The component or null if not found
         */
        ExtensionService.prototype.getComponentById = /**
         * Retrieves a registered extension component using its ID value.
         * @template T
         * @param {?} id The ID value to look for
         * @return {?} The component or null if not found
         */
            function (id) {
                return this.componentRegister.getComponentById(id);
            };
        /**
         * Retrieves a rule using its ID value.
         * @param id The ID value to look for
         * @returns The rule or null if not found
         */
        /**
         * Retrieves a rule using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} The rule or null if not found
         */
        ExtensionService.prototype.getRuleById = /**
         * Retrieves a rule using its ID value.
         * @param {?} id The ID value to look for
         * @return {?} The rule or null if not found
         */
            function (id) {
                return this.ruleService.getRuleById(id);
            };
        /**
         * Runs a lightweight expression stored in a string.
         * @param value String containing the expression or literal value
         * @param context Parameter object for the expression with details of app state
         * @returns Result of evaluated expression, if found, or the literal value otherwise
         */
        /**
         * Runs a lightweight expression stored in a string.
         * @param {?} value String containing the expression or literal value
         * @param {?=} context Parameter object for the expression with details of app state
         * @return {?} Result of evaluated expression, if found, or the literal value otherwise
         */
        ExtensionService.prototype.runExpression = /**
         * Runs a lightweight expression stored in a string.
         * @param {?} value String containing the expression or literal value
         * @param {?=} context Parameter object for the expression with details of app state
         * @return {?} Result of evaluated expression, if found, or the literal value otherwise
         */
            function (value, context) {
                /** @type {?} */
                var pattern = new RegExp(/\$\((.*\)?)\)/g);
                /** @type {?} */
                var matches = pattern.exec(value);
                if (matches && matches.length > 1) {
                    /** @type {?} */
                    var expression = matches[1];
                    /** @type {?} */
                    var fn = new Function('context', "return " + expression);
                    /** @type {?} */
                    var result = fn(context);
                    return result;
                }
                return value;
            };
        ExtensionService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ExtensionService.ctorParameters = function () {
            return [
                { type: ExtensionLoaderService },
                { type: ComponentRegisterService },
                { type: RuleService }
            ];
        };
        /** @nocollapse */ ExtensionService.ngInjectableDef = i0.defineInjectable({ factory: function ExtensionService_Factory() { return new ExtensionService(i0.inject(ExtensionLoaderService), i0.inject(ComponentRegisterService), i0.inject(RuleService)); }, token: ExtensionService, providedIn: "root" });
        return ExtensionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // cSpell:words lifecycle
    var DynamicExtensionComponent = /** @class */ (function () {
        function DynamicExtensionComponent(extensions, componentFactoryResolver) {
            this.extensions = extensions;
            this.componentFactoryResolver = componentFactoryResolver;
            this.loaded = false;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicExtensionComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.loaded) {
                    this.loadComponent();
                    this.loaded = true;
                }
                if (changes.data) {
                    this.data = changes.data.currentValue;
                }
                this.updateInstance();
                this.proxy('ngOnChanges', changes);
            };
        /**
         * @private
         * @return {?}
         */
        DynamicExtensionComponent.prototype.loadComponent = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var componentType = this.extensions.getComponentById(this.id);
                if (componentType) {
                    /** @type {?} */
                    var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    if (factory) {
                        this.content.clear();
                        this.componentRef = this.content.createComponent(factory, 0);
                    }
                }
            };
        /**
         * @return {?}
         */
        DynamicExtensionComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.componentCreated()) {
                    this.componentRef.destroy();
                    this.componentRef = null;
                }
            };
        /**
         * @private
         * @return {?}
         */
        DynamicExtensionComponent.prototype.updateInstance = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.componentCreated()) {
                    this.componentRef.instance.data = this.data;
                }
            };
        /**
         * @private
         * @param {?} lifecycleMethod
         * @param {...?} args
         * @return {?}
         */
        DynamicExtensionComponent.prototype.proxy = /**
         * @private
         * @param {?} lifecycleMethod
         * @param {...?} args
         * @return {?}
         */
            function (lifecycleMethod) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (this.componentCreated() && this.lifecycleHookIsImplemented(lifecycleMethod)) {
                    this.componentRef.instance[lifecycleMethod].apply(this.componentRef.instance, args);
                }
            };
        /**
         * @private
         * @return {?}
         */
        DynamicExtensionComponent.prototype.componentCreated = /**
         * @private
         * @return {?}
         */
            function () {
                return !!this.componentRef && !!this.componentRef.instance;
            };
        /**
         * @private
         * @param {?} lifecycleMethod
         * @return {?}
         */
        DynamicExtensionComponent.prototype.lifecycleHookIsImplemented = /**
         * @private
         * @param {?} lifecycleMethod
         * @return {?}
         */
            function (lifecycleMethod) {
                return !!this.componentRef.instance[lifecycleMethod];
            };
        DynamicExtensionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-dynamic-component',
                        template: "<div #content></div>"
                    }] }
        ];
        /** @nocollapse */
        DynamicExtensionComponent.ctorParameters = function () {
            return [
                { type: ExtensionService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        DynamicExtensionComponent.propDecorators = {
            content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef },] }],
            id: [{ type: i0.Input }],
            data: [{ type: i0.Input }]
        };
        return DynamicExtensionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicTabComponent = /** @class */ (function () {
        function DynamicTabComponent(extensions, componentFactoryResolver) {
            this.extensions = extensions;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        /**
         * @return {?}
         */
        DynamicTabComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var componentType = this.extensions.getComponentById(this.id);
                if (componentType) {
                    /** @type {?} */
                    var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    if (factory) {
                        this.content.clear();
                        this.componentRef = this.content.createComponent(factory, 0);
                        this.updateInstance();
                    }
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicTabComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.node) {
                    this.updateInstance();
                }
            };
        /**
         * @return {?}
         */
        DynamicTabComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.componentRef) {
                    this.componentRef.destroy();
                    this.componentRef = null;
                }
            };
        /**
         * @private
         * @return {?}
         */
        DynamicTabComponent.prototype.updateInstance = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.componentRef && this.componentRef.instance) {
                    this.componentRef.instance.node = this.node;
                }
            };
        DynamicTabComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-dynamic-tab',
                        template: "<div #content></div>"
                    }] }
        ];
        /** @nocollapse */
        DynamicTabComponent.ctorParameters = function () {
            return [
                { type: ExtensionService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        DynamicTabComponent.propDecorators = {
            content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef },] }],
            id: [{ type: i0.Input }],
            node: [{ type: i0.Input }]
        };
        return DynamicTabComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DynamicColumnComponent = /** @class */ (function () {
        function DynamicColumnComponent(extensions, componentFactoryResolver) {
            this.extensions = extensions;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        /**
         * @return {?}
         */
        DynamicColumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var componentType = this.extensions.getComponentById(this.id);
                if (componentType) {
                    /** @type {?} */
                    var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    if (factory) {
                        this.content.clear();
                        this.componentRef = this.content.createComponent(factory, 0);
                        this.updateInstance();
                    }
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicColumnComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.node) {
                    this.updateInstance();
                }
            };
        /**
         * @return {?}
         */
        DynamicColumnComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.componentRef) {
                    this.componentRef.destroy();
                    this.componentRef = null;
                }
            };
        /**
         * @private
         * @return {?}
         */
        DynamicColumnComponent.prototype.updateInstance = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.componentRef && this.componentRef.instance) {
                    this.componentRef.instance.context = this.context;
                }
            };
        DynamicColumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-dynamic-column',
                        template: "\n    <ng-container #content></ng-container>\n  ",
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        host: { class: 'adf-dynamic-column' },
                        styles: ["\n      .adf-dynamic-column {\n        display: flex;\n        align-items: center;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        DynamicColumnComponent.ctorParameters = function () {
            return [
                { type: ExtensionService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        DynamicColumnComponent.propDecorators = {
            content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef },] }],
            id: [{ type: i0.Input }],
            context: [{ type: i0.Input }]
        };
        return DynamicColumnComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PreviewExtensionComponent = /** @class */ (function () {
        function PreviewExtensionComponent(extensionService, componentFactoryResolver) {
            this.extensionService = extensionService;
            this.componentFactoryResolver = componentFactoryResolver;
        }
        /**
         * @return {?}
         */
        PreviewExtensionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.id) {
                    return;
                }
                /** @type {?} */
                var componentType = this.extensionService.getComponentById(this.id);
                if (componentType) {
                    /** @type {?} */
                    var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    if (factory) {
                        this.content.clear();
                        this.componentRef = this.content.createComponent(factory, 0);
                        this.updateInstance();
                    }
                }
            };
        /**
         * @return {?}
         */
        PreviewExtensionComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.updateInstance();
            };
        /**
         * @return {?}
         */
        PreviewExtensionComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.componentRef) {
                    this.componentRef.destroy();
                    this.componentRef = null;
                }
            };
        /**
         * @private
         * @return {?}
         */
        PreviewExtensionComponent.prototype.updateInstance = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.componentRef && this.componentRef.instance) {
                    /** @type {?} */
                    var instance = this.componentRef.instance;
                    instance.node = this.node;
                    instance.url = this.url;
                    instance.extension = this.extension;
                }
            };
        PreviewExtensionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'adf-preview-extension',
                        template: "\n    <div #content></div>\n  "
                    }] }
        ];
        /** @nocollapse */
        PreviewExtensionComponent.ctorParameters = function () {
            return [
                { type: ExtensionService },
                { type: i0.ComponentFactoryResolver }
            ];
        };
        PreviewExtensionComponent.propDecorators = {
            content: [{ type: i0.ViewChild, args: ['content', { read: i0.ViewContainerRef },] }],
            id: [{ type: i0.Input }],
            url: [{ type: i0.Input }],
            extension: [{ type: i0.Input }],
            node: [{ type: i0.Input }]
        };
        return PreviewExtensionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppExtensionService = /** @class */ (function () {
        function AppExtensionService(extensionService) {
            this.extensionService = extensionService;
            this._references = new rxjs.BehaviorSubject([]);
            this.references$ = this._references.asObservable();
        }
        /**
         * @return {?}
         */
        AppExtensionService.prototype.load = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var config;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.extensionService.load()];
                            case 1:
                                config = _a.sent();
                                this.setup(config);
                                return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @param {?} config
         * @return {?}
         */
        AppExtensionService.prototype.setup = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (!config) {
                    return;
                }
                /** @type {?} */
                var references = (config.$references || [])
                    .filter(( /**
             * @param {?} entry
             * @return {?}
             */function (entry) { return typeof entry === 'object'; }))
                    .map(( /**
             * @param {?} entry
             * @return {?}
             */function (entry) { return ( /** @type {?} */(entry)); }));
                this._references.next(references);
            };
        /**
         * Provides a collection of document list columns for the particular preset.
         * The result is filtered by the **disabled** state.
         * @param key Preset key.
         */
        /**
         * Provides a collection of document list columns for the particular preset.
         * The result is filtered by the **disabled** state.
         * @param {?} key Preset key.
         * @return {?}
         */
        AppExtensionService.prototype.getDocumentListPreset = /**
         * Provides a collection of document list columns for the particular preset.
         * The result is filtered by the **disabled** state.
         * @param {?} key Preset key.
         * @return {?}
         */
            function (key) {
                return this.extensionService
                    .getElements("features.documentList." + key)
                    .filter(( /**
             * @param {?} entry
             * @return {?}
             */function (entry) { return !entry.disabled; }));
            };
        /**
         * Provides a list of the Viewer content extensions,
         * filtered by **disabled** state and **rules**.
         */
        /**
         * Provides a list of the Viewer content extensions,
         * filtered by **disabled** state and **rules**.
         * @return {?}
         */
        AppExtensionService.prototype.getViewerExtensions = /**
         * Provides a list of the Viewer content extensions,
         * filtered by **disabled** state and **rules**.
         * @return {?}
         */
            function () {
                var _this = this;
                return this.extensionService
                    .getElements('features.viewer.content')
                    .filter(( /**
             * @param {?} extension
             * @return {?}
             */function (extension) { return !_this.isViewerExtensionDisabled(extension); }));
            };
        /**
         * @protected
         * @param {?} extension
         * @return {?}
         */
        AppExtensionService.prototype.isViewerExtensionDisabled = /**
         * @protected
         * @param {?} extension
         * @return {?}
         */
            function (extension) {
                if (extension) {
                    if (extension.disabled) {
                        return true;
                    }
                    if (extension.rules && extension.rules.disabled) {
                        return this.extensionService.evaluateRule(extension.rules.disabled);
                    }
                }
                return false;
            };
        AppExtensionService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        AppExtensionService.ctorParameters = function () {
            return [
                { type: ExtensionService }
            ];
        };
        /** @nocollapse */ AppExtensionService.ngInjectableDef = i0.defineInjectable({ factory: function AppExtensionService_Factory() { return new AppExtensionService(i0.inject(ExtensionService)); }, token: AppExtensionService, providedIn: "root" });
        return AppExtensionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*!
     * @license
     * Copyright 2019 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @param {?} appExtensionService
     * @return {?}
     */
    function setupExtensions(appExtensionService) {
        return ( /**
         * @return {?}
         */function () { return appExtensionService.load(); });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtensionsModule = /** @class */ (function () {
        function ExtensionsModule() {
        }
        /**
         * @return {?}
         */
        ExtensionsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ExtensionsModule,
                    providers: [
                        {
                            provide: i0.APP_INITIALIZER,
                            useFactory: setupExtensions,
                            deps: [AppExtensionService],
                            multi: true
                        }
                    ]
                };
            };
        /**
         * @return {?}
         */
        ExtensionsModule.forChild = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ExtensionsModule
                };
            };
        ExtensionsModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            DynamicExtensionComponent,
                            DynamicTabComponent,
                            DynamicColumnComponent,
                            PreviewExtensionComponent
                        ],
                        exports: [
                            DynamicExtensionComponent,
                            DynamicTabComponent,
                            DynamicColumnComponent,
                            PreviewExtensionComponent
                        ]
                    },] }
        ];
        return ExtensionsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RuleRef = /** @class */ (function () {
        function RuleRef() {
        }
        return RuleRef;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ExtensionsModule = ExtensionsModule;
    exports.ContentActionType = ContentActionType;
    exports.getValue = getValue;
    exports.filterEnabled = filterEnabled;
    exports.sortByOrder = sortByOrder;
    exports.reduceSeparators = reduceSeparators;
    exports.reduceEmptyMenus = reduceEmptyMenus;
    exports.mergeObjects = mergeObjects;
    exports.mergeArrays = mergeArrays;
    exports.RuleRef = RuleRef;
    exports.ExtensionLoaderService = ExtensionLoaderService;
    exports.ExtensionService = ExtensionService;
    exports.ComponentRegisterService = ComponentRegisterService;
    exports.AppExtensionService = AppExtensionService;
    exports.PreviewExtensionComponent = PreviewExtensionComponent;
    exports.DynamicColumnComponent = DynamicColumnComponent;
    exports.DynamicExtensionComponent = DynamicExtensionComponent;
    exports.DynamicTabComponent = DynamicTabComponent;
    exports.ɵa = RuleService;
    exports.ɵb = setupExtensions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=adf-extensions.umd.js.map