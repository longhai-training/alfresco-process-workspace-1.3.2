import { AlfrescoApiCompatibility, AlfrescoApiConfig } from '@alfresco/js-api';
import { AlfrescoApiService, AppConfigValues, AppConfigService } from '@alfresco/adf-core';
import { __awaiter, __generator, __extends, __assign } from 'tslib';
import { browser, protractor, element, by, Key } from 'protractor';
import { NgModule, Injectable, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /**
     * @param {?=} length
     * @return {?}
     */
    StringUtil.generatePasswordString = /**
     * @param {?=} length
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 8; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possibleUpperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        /** @type {?} */
        var possibleLowerCase = 'abcdefghijklmnopqrstuvwxyz';
        /** @type {?} */
        var lowerCaseLimit = Math.floor(length / 2);
        for (var i = 0; i < lowerCaseLimit; i++) {
            text += possibleLowerCase.charAt(Math.floor(Math.random() * possibleLowerCase.length));
        }
        for (var i = 0; i < length - lowerCaseLimit; i++) {
            text += possibleUpperCase.charAt(Math.floor(Math.random() * possibleUpperCase.length));
        }
        return text;
    };
    /**
     * Generates a random string.
     *
     * @param length If this parameter is not provided the length is set to 8 by default.
     * @method generateRandomString
     */
    /**
     * Generates a random string.
     *
     * \@method generateRandomString
     * @param {?=} length If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    StringUtil.generateRandomString = /**
     * Generates a random string.
     *
     * \@method generateRandomString
     * @param {?=} length If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 8; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    /**
     * Generates a random email address following the format: abcdef@activiti.test.com
     *
     * @param domain
     * @param length
     * @method generateRandomEmail
     */
    /**
     * Generates a random email address following the format: abcdef\@activiti.test.com
     *
     * \@method generateRandomEmail
     * @param {?} domain
     * @param {?=} length
     * @return {?}
     */
    StringUtil.generateRandomEmail = /**
     * Generates a random email address following the format: abcdef\@activiti.test.com
     *
     * \@method generateRandomEmail
     * @param {?} domain
     * @param {?=} length
     * @return {?}
     */
    function (domain, length) {
        if (length === void 0) { length = 5; }
        /** @type {?} */
        var email = '';
        /** @type {?} */
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < length; i++) {
            email += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        email += domain;
        return email.toLowerCase();
    };
    /**
     * Generates a random string - digits only.
     *
     * @param length {int} If this parameter is not provided the length is set to 8 by default.
     * @method generateRandomString
     */
    /**
     * Generates a random string - digits only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    StringUtil.generateRandomStringDigits = /**
     * Generates a random string - digits only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 8; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = '0123456789';
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    /**
     * Generates a random string - non-latin characters only.
     *
     * @param length {int} If this parameter is not provided the length is set to 3 by default.
     * @method generateRandomString
     */
    /**
     * Generates a random string - non-latin characters only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 3 by default.
     * @return {?}
     */
    StringUtil.generateRandomStringNonLatin = /**
     * Generates a random string - non-latin characters only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 3 by default.
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 3; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = '密码你好𠮷';
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    return StringUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserModel = /** @class */ (function () {
    function UserModel(details) {
        this.firstName = StringUtil.generateRandomString();
        this.lastName = StringUtil.generateRandomString() + 'LastName';
        this.password = StringUtil.generateRandomString();
        this.email = StringUtil.generateRandomEmail('@alfresco.com');
        this.username = StringUtil.generateRandomString().toLowerCase();
        Object.assign(this, details);
    }
    Object.defineProperty(UserModel.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.email;
        },
        enumerable: true,
        configurable: true
    });
    return UserModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IdentityService = /** @class */ (function () {
    function IdentityService(api) {
        this.api = api;
    }
    /**
     * @param {?=} user
     * @return {?}
     */
    IdentityService.prototype.createIdentityUser = /**
     * @param {?=} user
     * @return {?}
     */
    function (user) {
        if (user === void 0) { user = new UserModel(); }
        return __awaiter(this, void 0, void 0, function () {
            var userIdentity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createUser(user)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.getUserInfoByUsername(user.username)];
                    case 2:
                        userIdentity = _a.sent();
                        return [4 /*yield*/, this.resetPassword(userIdentity.id, user.password)];
                    case 3:
                        _a.sent();
                        user.idIdentityService = userIdentity.id;
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @param {?} user
     * @return {?}
     */
    IdentityService.prototype.createIdentityUserAndSyncECMBPM = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var createUser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.api.config.provider === 'ECM' || this.api.config.provider === 'ALL')) return [3 /*break*/, 2];
                        createUser = (/** @type {?} */ ({
                            firstName: user.firstName,
                            lastName: user.lastName,
                            password: user.password,
                            email: user.email,
                            id: user.email
                        }));
                        return [4 /*yield*/, this.api.apiService.core.peopleApi.addPerson(createUser)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(this.api.config.provider === 'BPM' || this.api.config.provider === 'ALL')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.api.apiService.activiti.adminUsersApi.createNewUser({
                                email: user.email,
                                firstName: user.firstName,
                                lastName: user.lastName,
                                password: user.password,
                                type: 'enterprise',
                                tenantId: 1,
                                company: null
                            })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.createIdentityUser(user)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} userId
     * @return {?}
     */
    IdentityService.prototype.deleteIdentityUser = /**
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteUser(userId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} user
     * @return {?}
     */
    IdentityService.prototype.createUser = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/users';
                        method = 'POST';
                        queryParams = {};
                        postBody = {
                            'username': user.username,
                            'firstName': user.firstName,
                            'lastName': user.lastName,
                            'enabled': true,
                            'email': user.email
                        };
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} userId
     * @return {?}
     */
    IdentityService.prototype.deleteUser = /**
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/users/" + userId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} username
     * @return {?}
     */
    IdentityService.prototype.getUserInfoByUsername = /**
     * @param {?} username
     * @return {?}
     */
    function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/users";
                        method = 'GET';
                        queryParams = { 'username': username };
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data[0]];
                }
            });
        });
    };
    /**
     * @param {?} id
     * @param {?} password
     * @return {?}
     */
    IdentityService.prototype.resetPassword = /**
     * @param {?} id
     * @param {?} password
     * @return {?}
     */
    function (id, password) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/users/" + id + "/reset-password";
                        method = 'PUT';
                        queryParams = {};
                        postBody = { 'type': 'password', 'value': password, 'temporary': false };
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} userId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    IdentityService.prototype.assignRole = /**
     * @param {?} userId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    function (userId, roleId, roleName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/users/" + userId + "/role-mappings/realm";
                        method = 'POST';
                        queryParams = {};
                        postBody = [{ 'id': roleId, 'name': roleName }];
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} userId
     * @param {?} clientId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    IdentityService.prototype.deleteClientRole = /**
     * @param {?} userId
     * @param {?} clientId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    function (userId, clientId, roleId, roleName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/users/" + userId + "/role-mappings/clients/" + clientId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = [{
                                'id': roleId,
                                'name': roleName,
                                'composite': false,
                                'clientRole': true,
                                'containerId': clientId
                            }];
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return IdentityService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GroupIdentityService = /** @class */ (function () {
    function GroupIdentityService(api) {
        this.api = api;
    }
    /**
     * @param {?=} groupName
     * @return {?}
     */
    GroupIdentityService.prototype.createIdentityGroup = /**
     * @param {?=} groupName
     * @return {?}
     */
    function (groupName) {
        if (groupName === void 0) { groupName = StringUtil.generateRandomString(5); }
        return __awaiter(this, void 0, void 0, function () {
            var group;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createGroup(groupName)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.getGroupInfoByGroupName(groupName)];
                    case 2:
                        group = _a.sent();
                        return [2 /*return*/, group];
                }
            });
        });
    };
    /**
     * @param {?} groupId
     * @return {?}
     */
    GroupIdentityService.prototype.deleteIdentityGroup = /**
     * @param {?} groupId
     * @return {?}
     */
    function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteGroup(groupId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} groupName
     * @return {?}
     */
    GroupIdentityService.prototype.createGroup = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/groups';
                        method = 'POST';
                        queryParams = {};
                        postBody = {
                            'name': groupName + 'TestGroup'
                        };
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} groupId
     * @return {?}
     */
    GroupIdentityService.prototype.deleteGroup = /**
     * @param {?} groupId
     * @return {?}
     */
    function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/groups/" + groupId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} groupName
     * @return {?}
     */
    GroupIdentityService.prototype.getGroupInfoByGroupName = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/groups";
                        method = 'GET';
                        queryParams = { 'search': groupName };
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data[0]];
                }
            });
        });
    };
    /**
     * @param {?} groupId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    GroupIdentityService.prototype.assignRole = /**
     * @param {?} groupId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    function (groupId, roleId, roleName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/groups/" + groupId + "/role-mappings/realm";
                        method = 'POST';
                        queryParams = {};
                        postBody = [{ 'id': roleId, 'name': roleName }];
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Add client roles.
     * @param groupId ID of the target group
     * @param clientId ID of the client
     * @param roleId ID of the clientRole
     * @param roleName of the clientRole
     */
    /**
     * Add client roles.
     * @param {?} groupId ID of the target group
     * @param {?} clientId ID of the client
     * @param {?} roleId ID of the clientRole
     * @param {?} roleName of the clientRole
     * @return {?}
     */
    GroupIdentityService.prototype.addClientRole = /**
     * Add client roles.
     * @param {?} groupId ID of the target group
     * @param {?} clientId ID of the client
     * @param {?} roleId ID of the clientRole
     * @param {?} roleName of the clientRole
     * @return {?}
     */
    function (groupId, clientId, roleId, roleName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/groups/" + groupId + "/role-mappings/clients/" + clientId;
                        method = 'POST';
                        queryParams = {};
                        postBody = [{
                                'id': roleId,
                                'name': roleName,
                                'composite': false,
                                'clientRole': true,
                                'containerId': clientId
                            }];
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Gets the client ID using the app name.
     * @param applicationName Name of the app
     * @returns client ID string
     */
    /**
     * Gets the client ID using the app name.
     * @param {?} applicationName Name of the app
     * @return {?} client ID string
     */
    GroupIdentityService.prototype.getClientIdByApplicationName = /**
     * Gets the client ID using the app name.
     * @param {?} applicationName Name of the app
     * @return {?} client ID string
     */
    function (applicationName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/clients";
                        method = 'GET';
                        queryParams = { clientId: applicationName };
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data[0].id];
                }
            });
        });
    };
    return GroupIdentityService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var RolesService = /** @class */ (function () {
    function RolesService(api) {
        this.api = api;
    }
    /**
     * @param {?} roleName
     * @return {?}
     */
    RolesService.prototype.getRoleIdByRoleName = /**
     * @param {?} roleName
     * @return {?}
     */
    function (roleName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, roleId, queryParams, postBody, data, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/roles";
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        for (key in data) {
                            if (data[key].name === roleName) {
                                roleId = data[key].id;
                            }
                        }
                        return [2 /*return*/, roleId];
                }
            });
        });
    };
    /**
     * @param {?} groupId
     * @param {?} clientId
     * @param {?} clientRoleName
     * @return {?}
     */
    RolesService.prototype.getClientRoleIdByRoleName = /**
     * @param {?} groupId
     * @param {?} clientId
     * @param {?} clientRoleName
     * @return {?}
     */
    function (groupId, clientId, clientRoleName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, clientRoleId, queryParams, postBody, data, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/groups/" + groupId + "/role-mappings/clients/" + clientId + "/available";
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        for (key in data) {
                            if (data[key].name === clientRoleName) {
                                clientRoleId = data[key].id;
                            }
                        }
                        return [2 /*return*/, clientRoleId];
                }
            });
        });
    };
    return RolesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TasksService = /** @class */ (function () {
    function TasksService(api) {
        this.api = api;
    }
    /**
     * @param {?} taskName
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    TasksService.prototype.createStandaloneTask = /**
     * @param {?} taskName
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    function (taskName, appName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks';
                        method = 'POST';
                        queryParams = {};
                        postBody = __assign({ 'name': taskName, 'payloadType': 'CreateTaskPayload' }, options);
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.completeTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks/' + taskId + '/complete';
                        method = 'POST';
                        queryParams = {};
                        postBody = { 'payloadType': 'CompleteTaskPayload' };
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.claimTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks/' + taskId + '/claim';
                        method = 'POST';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.deleteTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks/' + taskId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.createAndCompleteTask = /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    function (taskName, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var task;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createStandaloneTask(taskName, appName)];
                    case 1:
                        task = _a.sent();
                        return [4 /*yield*/, this.claimTask(task.entry.id, appName)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.completeTask(task.entry.id, appName)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, task];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.getTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/tasks/' + taskId;
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.getTaskId = /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    function (taskName, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/tasks';
                        method = 'GET';
                        queryParams = { name: taskName };
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.list.entries[0].entry.id];
                }
            });
        });
    };
    /**
     * @param {?} parentTaskId
     * @param {?} appName
     * @param {?} name
     * @return {?}
     */
    TasksService.prototype.createStandaloneSubtask = /**
     * @param {?} parentTaskId
     * @param {?} appName
     * @param {?} name
     * @return {?}
     */
    function (parentTaskId, appName, name) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks';
                        method = 'POST';
                        queryParams = {};
                        postBody = { 'name': name, 'parentTaskId': parentTaskId, 'payloadType': 'CreateTaskPayload' };
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return TasksService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var QueryService = /** @class */ (function () {
    function QueryService(api) {
        this.api = api;
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    QueryService.prototype.getProcessInstanceTasks = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/process-instances/' + processInstanceId + '/tasks';
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    QueryService.prototype.getProcessInstanceSubProcesses = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/process-instances/' + processInstanceId + '/subprocesses';
                        method = 'GET';
                        queryParams = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, {})];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return QueryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApiService = /** @class */ (function () {
    function ApiService(clientId, host, hostSso, provider) {
        this.config = {
            provider: provider,
            hostBpm: host,
            hostEcm: host,
            authType: 'OAUTH',
            oauth2: {
                host: hostSso,
                clientId: clientId,
                scope: 'openid',
                secret: '',
                implicitFlow: false,
                silentLogin: false,
                redirectUri: '/',
                redirectUriLogout: '/logout'
            }
        };
        this.apiService = new AlfrescoApiCompatibility(this.config);
    }
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    ApiService.prototype.login = /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.apiService.login(username, password)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} path
     * @param {?} method
     * @param {?} queryParams
     * @param {?} postBody
     * @return {?}
     */
    ApiService.prototype.performBpmOperation = /**
     * @param {?} path
     * @param {?} method
     * @param {?} queryParams
     * @param {?} postBody
     * @return {?}
     */
    function (path, method, queryParams, postBody) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, pathParams, formParams, contentTypes, accepts, headerParams;
            return __generator(this, function (_a) {
                uri = this.config.hostBpm + path;
                pathParams = {};
                formParams = {};
                contentTypes = ['application/json'];
                accepts = ['application/json'];
                headerParams = {
                    'Authorization': 'bearer ' + this.apiService.oauth2Auth.token
                };
                return [2 /*return*/, this.apiService.processClient.callCustomApi(uri, method, pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, Object)
                        .catch((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        throw (error);
                    }))];
            });
        });
    };
    /**
     * @param {?} path
     * @param {?} method
     * @param {?} queryParams
     * @param {?} postBody
     * @return {?}
     */
    ApiService.prototype.performIdentityOperation = /**
     * @param {?} path
     * @param {?} method
     * @param {?} queryParams
     * @param {?} postBody
     * @return {?}
     */
    function (path, method, queryParams, postBody) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, pathParams, formParams, contentTypes, accepts, headerParams;
            return __generator(this, function (_a) {
                uri = this.config.oauth2.host.replace('/realms', '/admin/realms') + path;
                pathParams = {};
                formParams = {};
                contentTypes = ['application/json'];
                accepts = ['application/json'];
                headerParams = {
                    'Authorization': 'bearer ' + this.apiService.oauth2Auth.token
                };
                return [2 /*return*/, this.apiService.processClient.callCustomApi(uri, method, pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, Object)
                        .catch((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        throw (error);
                    }))];
            });
        });
    };
    return ApiService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var until = protractor.ExpectedConditions;
/** @type {?} */
var DEFAULT_TIMEOUT = global['TestConfig'] ? global['TestConfig'].main.timeout : 40000;
var BrowserVisibility = /** @class */ (function () {
    function BrowserVisibility() {
    }
    /*
     * Wait for element is visible
     */
    /*
         * Wait for element is visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsVisible = /*
         * Wait for element is visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        /** @type {?} */
        var isDisplayed = false;
        return browser.wait((/**
         * @return {?}
         */
        function () {
            browser.waitForAngularEnabled();
            elementToCheck.isDisplayed().then((/**
             * @return {?}
             */
            function () {
                isDisplayed = true;
            }), (/**
             * @return {?}
             */
            function () {
                isDisplayed = false;
            }));
            return isDisplayed;
        }), waitTimeout, 'Element is not visible ' + elementToCheck.locator());
    };
    /*
     * Wait for element to be clickable
     */
    /*
         * Wait for element to be clickable
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsClickable = /*
         * Wait for element to be clickable
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        /** @type {?} */
        var isDisplayed = false;
        return browser.wait((/**
         * @return {?}
         */
        function () {
            browser.waitForAngularEnabled();
            elementToCheck.isDisplayed().then((/**
             * @return {?}
             */
            function () {
                isDisplayed = true;
            }), (/**
             * @return {?}
             */
            function () {
                isDisplayed = false;
            }));
            return isDisplayed;
        }), waitTimeout, 'Element is not visible ' + elementToCheck.locator());
    };
    /*
   * Wait for element to not be visible
   */
    /*
       * Wait for element to not be visible
       */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsStale = /*
       * Wait for element to not be visible
       */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        return browser.wait(until.stalenessOf(elementToCheck), waitTimeout, 'Element is not in stale ' + elementToCheck.locator());
    };
    /*
     * Wait for element to not be visible
     */
    /*
         * Wait for element to not be visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsNotVisible = /*
         * Wait for element to not be visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        /** @type {?} */
        var isPresent = false;
        return browser.wait((/**
         * @return {?}
         */
        function () {
            browser.waitForAngularEnabled();
            elementToCheck.isPresent().then((/**
             * @param {?} present
             * @return {?}
             */
            function (present) {
                isPresent = !present;
            }));
            return isPresent;
        }), waitTimeout, 'Element is Visible and it should not' + elementToCheck.locator());
    };
    /*
     * Wait for element to have value
     */
    /*
         * Wait for element to have value
         */
    /**
     * @param {?} elementToCheck
     * @param {?} elementValue
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementHasValue = /*
         * Wait for element to have value
         */
    /**
     * @param {?} elementToCheck
     * @param {?} elementValue
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, elementValue, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        browser.waitForAngularEnabled();
        browser.wait(until.textToBePresentInElementValue(elementToCheck, elementValue), waitTimeout, 'Element doesn\'t have a value ' + elementToCheck.locator());
    };
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsOnPage = /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        return browser.wait(browser.wait(until.visibilityOf(elementToCheck)), waitTimeout);
    };
    /*
     * Wait for element to not be visible
     */
    /*
         * Wait for element to not be visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsNotOnPage = /*
         * Wait for element to not be visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        return browser.wait(until.not(until.visibilityOf(elementToCheck)), waitTimeout, 'Element is not in the page ' + elementToCheck.locator());
    };
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsPresent = /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        browser.waitForAngularEnabled();
        return browser.wait(until.presenceOf(elementToCheck), waitTimeout, 'Element is not present ' + elementToCheck.locator());
    };
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    BrowserVisibility.waitUntilElementIsNotPresent = /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    function (elementToCheck, waitTimeout) {
        if (waitTimeout === void 0) { waitTimeout = DEFAULT_TIMEOUT; }
        return browser.wait(until.not(until.presenceOf(elementToCheck)), waitTimeout, 'Element is not in the page ' + elementToCheck.locator());
    };
    return BrowserVisibility;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HeaderPage = /** @class */ (function () {
    function HeaderPage() {
        this.checkBox = element(by.cssContainingText('.mat-checkbox-label', 'Show menu button'));
        this.headerColor = element(by.css('option[value="primary"]'));
        this.titleInput = element(by.css('input[name="title"]'));
        this.iconInput = element(by.css('input[placeholder="URL path"]'));
        this.hexColorInput = element(by.css('input[placeholder="hex color code"]'));
        this.logoHyperlinkInput = element(by.css('input[placeholder="Redirect URL"]'));
        this.logoTooltipInput = element(by.css('input[placeholder="Tooltip text"]'));
        this.positionStart = element.all(by.css('mat-radio-button[value="start"]')).first();
        this.positionEnd = element.all(by.css('mat-radio-button[value="end"]')).first();
        this.sideBarPositionRight = element(by.css('mat-sidenav.mat-drawer.mat-sidenav.mat-drawer-end'));
        this.sideBarPositionLeft = element(by.css('mat-sidenav.mat-drawer.mat-sidenav'));
    }
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkShowMenuCheckBoxIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.checkBox);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkChooseHeaderColourIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.headerColor);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkChangeTitleIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.titleInput);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkChangeUrlPathIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.iconInput);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.clickShowMenuButton = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var checkBox = element.all(by.css('mat-checkbox'));
        BrowserVisibility.waitUntilElementIsVisible(checkBox);
        return checkBox.get(0).click();
    };
    /**
     * @param {?} color
     * @return {?}
     */
    HeaderPage.prototype.changeHeaderColor = /**
     * @param {?} color
     * @return {?}
     */
    function (color) {
        /** @type {?} */
        var headerColor = element(by.css('option[value="' + color + '"]'));
        return headerColor.click();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    HeaderPage.prototype.checkAppTitle = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var title = element(by.cssContainingText('.adf-app-title', name));
        return BrowserVisibility.waitUntilElementIsVisible(title);
    };
    /**
     * @param {?} title
     * @return {?}
     */
    HeaderPage.prototype.addTitle = /**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        BrowserVisibility.waitUntilElementIsVisible(this.titleInput);
        this.titleInput.click();
        this.titleInput.sendKeys(title);
        this.titleInput.sendKeys(protractor.Key.ENTER);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    HeaderPage.prototype.checkIconIsDisplayed = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var icon = element(by.css('img[src="' + url + '"]'));
        BrowserVisibility.waitUntilElementIsVisible(icon);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    HeaderPage.prototype.addIcon = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        BrowserVisibility.waitUntilElementIsVisible(this.iconInput);
        this.iconInput.click();
        this.iconInput.sendKeys(url);
        this.iconInput.sendKeys(protractor.Key.ENTER);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkHexColorInputIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.hexColorInput);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkLogoHyperlinkInputIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.logoHyperlinkInput);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkLogoTooltipInputIsDisplayed = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.logoTooltipInput);
    };
    /**
     * @param {?} hexCode
     * @return {?}
     */
    HeaderPage.prototype.addHexCodeColor = /**
     * @param {?} hexCode
     * @return {?}
     */
    function (hexCode) {
        BrowserVisibility.waitUntilElementIsVisible(this.hexColorInput);
        this.hexColorInput.click();
        this.hexColorInput.sendKeys(hexCode);
        return this.hexColorInput.sendKeys(protractor.Key.ENTER);
    };
    /**
     * @param {?} hyperlink
     * @return {?}
     */
    HeaderPage.prototype.addLogoHyperlink = /**
     * @param {?} hyperlink
     * @return {?}
     */
    function (hyperlink) {
        BrowserVisibility.waitUntilElementIsVisible(this.logoHyperlinkInput);
        BrowserVisibility.waitUntilElementIsClickable(this.logoHyperlinkInput);
        this.logoHyperlinkInput.click();
        this.logoHyperlinkInput.sendKeys(hyperlink);
        return this.logoHyperlinkInput.sendKeys(protractor.Key.ENTER);
    };
    /**
     * @param {?} tooltip
     * @return {?}
     */
    HeaderPage.prototype.addLogoTooltip = /**
     * @param {?} tooltip
     * @return {?}
     */
    function (tooltip) {
        BrowserVisibility.waitUntilElementIsVisible(this.logoTooltipInput);
        this.logoTooltipInput.click();
        this.logoTooltipInput.sendKeys(tooltip);
        return this.logoTooltipInput.sendKeys(protractor.Key.ENTER);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.sideBarPositionStart = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.positionStart);
        return this.positionStart.click();
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.sideBarPositionEnd = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.positionEnd);
        return this.positionEnd.click();
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkSidebarPositionStart = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.sideBarPositionLeft);
    };
    /**
     * @return {?}
     */
    HeaderPage.prototype.checkSidebarPositionEnd = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.sideBarPositionRight);
    };
    return HeaderPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TabsPage = /** @class */ (function () {
    function TabsPage() {
    }
    /**
     * @param {?} tabTitle
     * @return {?}
     */
    TabsPage.prototype.clickTabByTitle = /**
     * @param {?} tabTitle
     * @return {?}
     */
    function (tabTitle) {
        /** @type {?} */
        var tab = element(by.cssContainingText("div[id*='mat-tab-label']", tabTitle));
        BrowserVisibility.waitUntilElementIsVisible(tab);
        tab.click();
    };
    /**
     * @param {?} tabTitle
     * @return {?}
     */
    TabsPage.prototype.checkTabIsSelectedByTitle = /**
     * @param {?} tabTitle
     * @return {?}
     */
    function (tabTitle) {
        /** @type {?} */
        var tab = element(by.cssContainingText("div[id*='mat-tab-label']", tabTitle));
        tab.getAttribute('aria-selected').then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            expect(result).toBe('true');
        }));
    };
    return TabsPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserInfoPage = /** @class */ (function () {
    function UserInfoPage() {
        this.dialog = element.all(by.css('mat-card[class*="adf-userinfo-card"]')).first();
        this.userImage = element(by.css('div[id="user-initial-image"]'));
        this.userInfoEcmHeaderTitle = element(by.css('div[id="ecm-username"]'));
        this.userInfoEcmTitle = element(by.css('mat-card-content span[id="ecm-full-name"]'));
        this.ecmEmail = element(by.css('span[id="ecm-email"]'));
        this.ecmJobTitle = element(by.css('span[id="ecm-job-title"]'));
        this.userInfoProcessHeaderTitle = element(by.css('div[id="bpm-username"]'));
        this.userInfoProcessTitle = element(by.css('mat-card-content span[id="bpm-full-name"]'));
        this.processEmail = element(by.css('span[id="bpm-email"]'));
        this.processTenant = element(by.css('span[class="detail-profile"]'));
        this.apsImage = element(by.css('img[id="bpm-user-detail-image"]'));
        this.acsImage = element(by.css('img[id="ecm-user-detail-image"]'));
        this.initialImage = element.all(by.css('div[id="user-initials-image"]')).first();
        this.userInfoSsoHeaderTitle = this.dialog.element(by.css('div[id="identity-username"]'));
        this.userInfoSsoTitle = element(by.css('.adf-userinfo__detail-title'));
        this.ssoEmail = element(by.id('identity-email'));
        this.userProfileButton = element(by.css('button[data-automation-id="adf-user-profile"]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    UserInfoPage.prototype.dialogIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).dialog);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    UserInfoPage.prototype.dialogIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).dialog);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.clickUserProfile = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.userProfileButton);
        this.userProfileButton.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    UserInfoPage.prototype.clickOnContentServicesTab = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var tabsPage = new TabsPage();
        tabsPage.clickTabByTitle('Content Services');
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    UserInfoPage.prototype.checkProcessServicesTabIsSelected = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var tabsPage = new TabsPage;
        tabsPage.checkTabIsSelectedByTitle('Process Services');
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    UserInfoPage.prototype.clickOnProcessServicesTab = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var tabsPage = new TabsPage;
        tabsPage.clickTabByTitle('Process Services');
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    UserInfoPage.prototype.userImageIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).userImage);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getContentHeaderTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.dialog);
        BrowserVisibility.waitUntilElementIsVisible(this.userInfoEcmHeaderTitle);
        return this.userInfoEcmHeaderTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getContentTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.userInfoEcmTitle);
        return this.userInfoEcmTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getContentEmail = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.ecmEmail);
        return this.ecmEmail.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getContentJobTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.ecmJobTitle);
        return this.ecmJobTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getProcessHeaderTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.userInfoProcessHeaderTitle);
        return this.userInfoProcessHeaderTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getProcessTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.userInfoProcessTitle);
        return this.userInfoProcessTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getProcessEmail = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.processEmail);
        return this.processEmail.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getProcessTenant = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.processTenant);
        return this.processTenant.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getSsoHeaderTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.userInfoSsoHeaderTitle);
        return this.userInfoSsoHeaderTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getSsoTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.userInfoSsoTitle);
        return this.userInfoSsoTitle.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.getSsoEmail = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.ssoEmail);
        return this.ssoEmail.getText();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.closeUserProfile = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.dialog);
        browser.actions().sendKeys(protractor.Key.ESCAPE).perform();
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.checkACSProfileImage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.acsImage);
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.checkAPSProfileImage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.apsImage);
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.checkInitialImage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.initialImage);
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.initialImageNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.initialImage);
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.ACSProfileImageNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.acsImage);
    };
    /**
     * @return {?}
     */
    UserInfoPage.prototype.APSProfileImageNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.apsImage);
    };
    return UserInfoPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormControllersPage = /** @class */ (function () {
    function FormControllersPage() {
    }
    /**
     * @param {?} toggle
     * @return {?}
     */
    FormControllersPage.prototype.enableToggle = /**
     * @param {?} toggle
     * @return {?}
     */
    function (toggle) {
        BrowserVisibility.waitUntilElementIsVisible(toggle);
        toggle.getAttribute('class').then((/**
         * @param {?} check
         * @return {?}
         */
        function (check) {
            if (check.indexOf('mat-checked') < 0) {
                BrowserVisibility.waitUntilElementIsClickable(toggle.all(by.css('div')).first());
                toggle.all(by.css('div')).first().click();
            }
        }));
    };
    /**
     * @param {?} toggle
     * @return {?}
     */
    FormControllersPage.prototype.disableToggle = /**
     * @param {?} toggle
     * @return {?}
     */
    function (toggle) {
        BrowserVisibility.waitUntilElementIsVisible(toggle);
        toggle.getAttribute('class').then((/**
         * @param {?} check
         * @return {?}
         */
        function (check) {
            if (check.indexOf('mat-checked') >= 0) {
                BrowserVisibility.waitUntilElementIsClickable(toggle.all(by.css('div')).first());
                toggle.all(by.css('div')).first().click();
            }
        }));
    };
    return FormControllersPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LocalStorageUtil = /** @class */ (function () {
    function LocalStorageUtil() {
    }
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    LocalStorageUtil.setConfigField = /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, browser.executeScript('window.adf.setConfigField(`' + field + '`, `' + value + '`);')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    LocalStorageUtil.setStorageItem = /**
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, browser.executeScript('window.adf.setStorageItem(`' + field + '`, `' + value + '`);')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    LocalStorageUtil.clearStorage = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, browser.executeScript('window.adf.clearStorage();')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    LocalStorageUtil.apiReset = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, browser.executeScript("window.adf.apiReset();")];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return LocalStorageUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginPage = /** @class */ (function () {
    function LoginPage() {
        this.loginURL = browser.baseUrl + '/login';
        this.formControllersPage = new FormControllersPage();
        this.txtUsername = element(by.css('input[id="username"]'));
        this.txtPassword = element(by.css('input[id="password"]'));
        this.logoImg = element(by.css('img[id="adf-login-img-logo"]'));
        this.successRouteTxt = element(by.css('input[data-automation-id="adf-success-route"]'));
        this.logoTxt = element(by.css('input[data-automation-id="adf-url-logo"]'));
        this.usernameTooltip = element(by.css('span[data-automation-id="username-error"]'));
        this.passwordTooltip = element(by.css('span[data-automation-id="password-required"]'));
        this.loginTooltip = element(by.css('span[class="adf-login-error-message"]'));
        this.usernameInactive = element(by.css('input[id="username"][aria-invalid="false"]'));
        this.passwordInactive = element(by.css('input[id="password"][aria-invalid="false"]'));
        this.adfLogo = element(by.css('img[class="adf-img-logo ng-star-inserted"]'));
        this.usernameHighlighted = element(by.css('input[id="username"][aria-invalid="true"]'));
        this.passwordHighlighted = element(by.css('input[id="password"][aria-invalid="true"]'));
        this.signInButton = element(by.id('login-button'));
        this.showPasswordElement = element(by.css('mat-icon[data-automation-id="show_password"]'));
        this.hidePasswordElement = element(by.css('mat-icon[data-automation-id="hide_password"]'));
        this.rememberMe = element(by.css('mat-checkbox[id="adf-login-remember"]'));
        this.needHelp = element(by.css('div[id="adf-login-action-left"]'));
        this.register = element(by.css('div[id="adf-login-action-right"]'));
        this.footerSwitch = element(by.id('switch4'));
        this.rememberMeSwitch = element(by.id('adf-toggle-show-rememberme'));
        this.successRouteSwitch = element(by.id('adf-toggle-show-successRoute'));
        this.logoSwitch = element(by.id('adf-toggle-logo'));
        this.header = element(by.id('adf-header'));
        this.settingsIcon = element(by.cssContainingText('a[data-automation-id="settings"] mat-icon', 'settings'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    LoginPage.prototype.goToLoginPage = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        browser.waitForAngularEnabled(true);
        browser.driver.get((/** @type {?} */ (this)).loginURL);
        (/** @type {?} */ (this)).waitForElements();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    LoginPage.prototype.waitForElements = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).txtUsername);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).txtPassword);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} username
     * @return {?}
     */
    LoginPage.prototype.enterUsername = /**
     * @param {?} username
     * @return {?}
     */
    function (username) {
        BrowserVisibility.waitUntilElementIsVisible(this.txtUsername);
        this.txtUsername.sendKeys('');
        this.txtUsername.clear();
        return this.txtUsername.sendKeys(username);
    };
    /**
     * @param {?} password
     * @return {?}
     */
    LoginPage.prototype.enterPassword = /**
     * @param {?} password
     * @return {?}
     */
    function (password) {
        BrowserVisibility.waitUntilElementIsVisible(this.txtPassword);
        this.txtPassword.clear();
        return this.txtPassword.sendKeys(password);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    LoginPage.prototype.clearUsername = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).txtUsername);
        (/** @type {?} */ (this)).txtUsername.click();
        (/** @type {?} */ (this)).txtUsername.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            for (var i = value.length; i >= 0; i--) {
                (/** @type {?} */ (_this)).txtUsername.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.clearPassword = /**
     * @return {?}
     */
    function () {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible(this.txtPassword);
        this.txtPassword.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            for (var i = value.length; i >= 0; i--) {
                _this.txtPassword.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.getUsernameTooltip = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.usernameTooltip);
        return this.usernameTooltip.getText();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.getPasswordTooltip = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.passwordTooltip);
        return this.passwordTooltip.getText();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.getLoginError = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.loginTooltip);
        return this.loginTooltip.getText();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkLoginImgURL = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.logoImg);
        return this.logoImg.getAttribute('src');
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkUsernameInactive = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.usernameInactive);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkPasswordInactive = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.passwordInactive);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkUsernameHighlighted = /**
     * @return {?}
     */
    function () {
        this.adfLogo.click();
        BrowserVisibility.waitUntilElementIsVisible(this.usernameHighlighted);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkPasswordHighlighted = /**
     * @return {?}
     */
    function () {
        this.adfLogo.click();
        BrowserVisibility.waitUntilElementIsVisible(this.passwordHighlighted);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkUsernameTooltipIsNotVisible = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.usernameTooltip);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkPasswordTooltipIsNotVisible = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.passwordTooltip);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.getSignInButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.signInButton);
        return this.signInButton.isEnabled();
    };
    /**
     * @param {?} userModel
     * @return {?}
     */
    LoginPage.prototype.loginToProcessServicesUsingUserModel = /**
     * @param {?} userModel
     * @return {?}
     */
    function (userModel) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.goToLoginPage();
                        return [4 /*yield*/, LocalStorageUtil.clearStorage()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, LocalStorageUtil.setStorageItem('providers', 'BPM')];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, LocalStorageUtil.apiReset()];
                    case 3:
                        _a.sent();
                        this.login(userModel.email, userModel.password);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} userModel
     * @return {?}
     */
    LoginPage.prototype.loginToContentServicesUsingUserModel = /**
     * @param {?} userModel
     * @return {?}
     */
    function (userModel) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.goToLoginPage();
                        return [4 /*yield*/, LocalStorageUtil.clearStorage()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, LocalStorageUtil.setStorageItem('providers', 'ECM')];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, LocalStorageUtil.apiReset()];
                    case 3:
                        _a.sent();
                        this.login(userModel.getId(), userModel.getPassword());
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    LoginPage.prototype.loginToContentServices = /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.goToLoginPage();
                        return [4 /*yield*/, LocalStorageUtil.clearStorage()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, LocalStorageUtil.setStorageItem('providers', 'ECM')];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, LocalStorageUtil.apiReset()];
                    case 3:
                        _a.sent();
                        this.waitForElements();
                        this.login(username, password);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.clickSignInButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.signInButton);
        this.signInButton.click();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.clickSettingsIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.settingsIcon);
        this.settingsIcon.click();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.showPassword = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.showPasswordElement);
        this.showPasswordElement.click();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.hidePassword = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.hidePasswordElement);
        this.hidePasswordElement.click();
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.getShownPassword = /**
     * @return {?}
     */
    function () {
        return this.txtPassword.getAttribute('value');
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkPasswordIsHidden = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.txtPassword);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkRememberIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.rememberMe);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkRememberIsNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.rememberMe);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkNeedHelpIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.needHelp);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkNeedHelpIsNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.needHelp);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkRegisterDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.register);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.checkRegisterIsNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.register);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.enableFooter = /**
     * @return {?}
     */
    function () {
        this.formControllersPage.enableToggle(this.footerSwitch);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.disableFooter = /**
     * @return {?}
     */
    function () {
        this.formControllersPage.disableToggle(this.footerSwitch);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.disableRememberMe = /**
     * @return {?}
     */
    function () {
        this.formControllersPage.disableToggle(this.rememberMeSwitch);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.enableSuccessRouteSwitch = /**
     * @return {?}
     */
    function () {
        this.formControllersPage.enableToggle(this.successRouteSwitch);
    };
    /**
     * @return {?}
     */
    LoginPage.prototype.enableLogoSwitch = /**
     * @return {?}
     */
    function () {
        this.formControllersPage.enableToggle(this.logoSwitch);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    LoginPage.prototype.enterSuccessRoute = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        BrowserVisibility.waitUntilElementIsVisible(this.successRouteTxt);
        this.successRouteTxt.sendKeys('');
        this.successRouteTxt.clear();
        return this.successRouteTxt.sendKeys(route);
    };
    /**
     * @param {?} logo
     * @return {?}
     */
    LoginPage.prototype.enterLogo = /**
     * @param {?} logo
     * @return {?}
     */
    function (logo) {
        BrowserVisibility.waitUntilElementIsVisible(this.logoTxt);
        this.logoTxt.sendKeys('');
        this.logoTxt.clear();
        return this.logoTxt.sendKeys(logo);
    };
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    LoginPage.prototype.login = /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    function (username, password) {
        this.waitForElements();
        this.enterUsername(username);
        this.enterPassword(password);
        this.clickSignInButton();
        return BrowserVisibility.waitUntilElementIsVisible(this.header);
    };
    return LoginPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SettingsPage = /** @class */ (function () {
    function SettingsPage() {
        this.settingsURL = browser.baseUrl + '/settings';
        this.providerDropdown = element(by.css('mat-select[id="adf-provider-selector"] div[class="mat-select-arrow-wrapper"]'));
        this.ecmAndBpm = {
            option: element(by.xpath('//SPAN[@class="mat-option-text"][contains(text(),"ALL")]')),
            text: 'ALL'
        };
        this.bpm = {
            option: element(by.xpath('//SPAN[@class="mat-option-text"][contains(text(),"BPM") and not (contains(text(),"and"))]')),
            text: 'BPM'
        };
        this.ecm = {
            option: element(by.xpath('//SPAN[@class="mat-option-text"][contains(text(),"ECM") and not (contains(text(),"and"))]')),
            text: 'ECM'
        };
        this.oauth = {
            option: element(by.xpath('//SPAN[@class="mat-option-text"][contains(text(),"OAUTH")]')),
            text: 'OAUTH'
        };
        this.selectedOption = element(by.css('span[class*="mat-select-value-text"]'));
        this.ecmText = element(by.css('input[data-automation-id*="ecmHost"]'));
        this.bpmText = element(by.css('input[data-automation-id*="bpmHost"]'));
        this.clientIdText = element(by.css('input[id="clientId"]'));
        this.authHostText = element(by.css('input[id="oauthHost"]'));
        this.logoutUrlText = element(by.css('input[id="logout-url"]'));
        this.basicAuthRadioButton = element(by.cssContainingText('mat-radio-button[id*="mat-radio"]', 'Basic Authentication'));
        this.identityHostText = element(by.css('input[id="identityHost"]'));
        this.ssoRadioButton = element(by.cssContainingText('[id*="mat-radio"]', 'SSO'));
        this.silentLoginToggleLabel = element(by.css('mat-slide-toggle[name="silentLogin"] label'));
        this.silentLoginToggleElement = element(by.css('mat-slide-toggle[name="silentLogin"]'));
        this.implicitFlowLabel = element(by.css('mat-slide-toggle[name="implicitFlow"] label'));
        this.implicitFlowElement = element(by.css('mat-slide-toggle[name="implicitFlow"]'));
        this.applyButton = element(by.css('button[data-automation-id*="host-button"]'));
        this.backButton = element(by.cssContainingText('button span[class="mat-button-wrapper"]', 'Back'));
        this.validationMessage = element(by.cssContainingText('mat-error', 'This field is required'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    SettingsPage.prototype.goToSettingsPage = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        browser.waitForAngularEnabled(true);
        browser.driver.get((/** @type {?} */ (this)).settingsURL);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).providerDropdown);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} option
     * @param {?} selected
     * @return {?}
     */
    SettingsPage.prototype.setProvider = /**
     * @param {?} option
     * @param {?} selected
     * @return {?}
     */
    function (option, selected) {
        BrowserVisibility.waitUntilElementIsVisible(this.providerDropdown);
        this.providerDropdown.click();
        BrowserVisibility.waitUntilElementIsVisible(option);
        option.click();
        return expect(this.selectedOption.getText()).toEqual(selected);
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getSelectedOptionText = /**
     * @return {?}
     */
    function () {
        return this.selectedOption.getText();
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getBpmHostUrl = /**
     * @return {?}
     */
    function () {
        return this.bpmText.getAttribute('value');
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getEcmHostUrl = /**
     * @return {?}
     */
    function () {
        return this.ecmText.getAttribute('value');
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getBpmOption = /**
     * @return {?}
     */
    function () {
        return this.bpm.option;
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getEcmOption = /**
     * @return {?}
     */
    function () {
        return this.ecm.option;
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getEcmAndBpmOption = /**
     * @return {?}
     */
    function () {
        return this.ecmAndBpm.option;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    SettingsPage.prototype.setProviderEcmBpm = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).goToSettingsPage();
        (/** @type {?} */ (this)).setProvider((/** @type {?} */ (this)).ecmAndBpm.option, (/** @type {?} */ (this)).ecmAndBpm.text);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).bpmText);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).ecmText);
        (/** @type {?} */ (this)).clickApply();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    SettingsPage.prototype.setProviderBpm = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).goToSettingsPage();
        (/** @type {?} */ (this)).setProvider((/** @type {?} */ (this)).bpm.option, (/** @type {?} */ (this)).bpm.text);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).bpmText);
        (/** @type {?} */ (this)).clickApply();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    SettingsPage.prototype.setProviderEcm = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).goToSettingsPage();
        (/** @type {?} */ (this)).setProvider((/** @type {?} */ (this)).ecm.option, (/** @type {?} */ (this)).ecm.text);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).ecmText);
        expect((/** @type {?} */ (this)).bpmText.isPresent()).toBeFalsy();
        (/** @type {?} */ (this)).clickApply();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    SettingsPage.prototype.setProviderOauth = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).goToSettingsPage();
        (/** @type {?} */ (this)).setProvider((/** @type {?} */ (this)).oauth.option, (/** @type {?} */ (this)).oauth.text);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).bpmText);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).ecmText);
        expect((/** @type {?} */ (this)).authHostText.isPresent()).toBeTruthy();
        (/** @type {?} */ (this)).clickApply();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.clickBackButton = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        BrowserVisibility.waitUntilElementIsVisible(this.backButton);
                        return [4 /*yield*/, this.backButton.click()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.clickSsoRadioButton = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        BrowserVisibility.waitUntilElementIsVisible(this.ssoRadioButton);
                        return [4 /*yield*/, this.ssoRadioButton.click()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} contentServiceURL
     * @param {?} authHost
     * @param {?} identityHost
     * @param {?=} silentLogin
     * @param {?=} implicitFlow
     * @param {?=} clientId
     * @param {?=} logoutUr
     * @return {?}
     */
    SettingsPage.prototype.setProviderEcmSso = /**
     * @param {?} contentServiceURL
     * @param {?} authHost
     * @param {?} identityHost
     * @param {?=} silentLogin
     * @param {?=} implicitFlow
     * @param {?=} clientId
     * @param {?=} logoutUr
     * @return {?}
     */
    function (contentServiceURL, authHost, identityHost, silentLogin, implicitFlow, clientId, logoutUr) {
        if (silentLogin === void 0) { silentLogin = true; }
        if (implicitFlow === void 0) { implicitFlow = true; }
        if (logoutUr === void 0) { logoutUr = '/logout'; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.goToSettingsPage();
                        this.setProvider(this.ecm.option, this.ecm.text);
                        BrowserVisibility.waitUntilElementIsNotOnPage(this.bpmText);
                        BrowserVisibility.waitUntilElementIsVisible(this.ecmText);
                        return [4 /*yield*/, this.clickSsoRadioButton()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.setClientId(clientId)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.setContentServicesURL(contentServiceURL)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.setAuthHost(authHost)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.setIdentityHost(identityHost)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.setSilentLogin(silentLogin)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.setImplicitFlow(implicitFlow)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.setLogoutUrl(logoutUr)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.clickApply()];
                    case 9:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} processServiceURL
     * @param {?} authHost
     * @param {?} identityHost
     * @param {?=} silentLogin
     * @param {?=} implicitFlow
     * @return {?}
     */
    SettingsPage.prototype.setProviderBpmSso = /**
     * @param {?} processServiceURL
     * @param {?} authHost
     * @param {?} identityHost
     * @param {?=} silentLogin
     * @param {?=} implicitFlow
     * @return {?}
     */
    function (processServiceURL, authHost, identityHost, silentLogin, implicitFlow) {
        if (silentLogin === void 0) { silentLogin = true; }
        if (implicitFlow === void 0) { implicitFlow = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.goToSettingsPage();
                        this.setProvider(this.bpm.option, this.bpm.text);
                        BrowserVisibility.waitUntilElementIsVisible(this.bpmText);
                        BrowserVisibility.waitUntilElementIsNotOnPage(this.ecmText);
                        return [4 /*yield*/, this.clickSsoRadioButton()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.setClientId()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.setProcessServicesURL(processServiceURL)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.setAuthHost(authHost)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.setIdentityHost(identityHost)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.setSilentLogin(silentLogin)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.setImplicitFlow(implicitFlow)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.clickApply()];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} logoutUrl
     * @return {?}
     */
    SettingsPage.prototype.setLogoutUrl = /**
     * @param {?} logoutUrl
     * @return {?}
     */
    function (logoutUrl) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                BrowserVisibility.waitUntilElementIsPresent(this.logoutUrlText);
                this.logoutUrlText.clear();
                this.logoutUrlText.sendKeys(logoutUrl);
                return [2 /*return*/];
            });
        });
    };
    /**
     * @param {?} processServiceURL
     * @return {?}
     */
    SettingsPage.prototype.setProcessServicesURL = /**
     * @param {?} processServiceURL
     * @return {?}
     */
    function (processServiceURL) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                BrowserVisibility.waitUntilElementIsVisible(this.bpmText);
                this.bpmText.clear();
                this.bpmText.sendKeys(processServiceURL);
                return [2 /*return*/];
            });
        });
    };
    /**
     * @param {?=} clientId
     * @return {?}
     */
    SettingsPage.prototype.setClientId = /**
     * @param {?=} clientId
     * @return {?}
     */
    function (clientId) {
        if (clientId === void 0) { clientId = browser.params.config.oauth2.clientId; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                BrowserVisibility.waitUntilElementIsVisible(this.clientIdText);
                this.clientIdText.clear();
                this.clientIdText.sendKeys(clientId);
                return [2 /*return*/];
            });
        });
    };
    /**
     * @param {?} contentServiceURL
     * @return {?}
     */
    SettingsPage.prototype.setContentServicesURL = /**
     * @param {?} contentServiceURL
     * @return {?}
     */
    function (contentServiceURL) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                BrowserVisibility.waitUntilElementIsClickable(this.ecmText);
                this.ecmText.clear();
                this.ecmText.sendKeys(contentServiceURL);
                return [2 /*return*/];
            });
        });
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.clearContentServicesURL = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.ecmText);
        this.ecmText.clear();
        this.ecmText.sendKeys('a');
        this.ecmText.sendKeys(protractor.Key.BACK_SPACE);
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.clearProcessServicesURL = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.bpmText);
        this.bpmText.clear();
        this.bpmText.sendKeys('a');
        this.bpmText.sendKeys(protractor.Key.BACK_SPACE);
    };
    /**
     * @param {?} authHostURL
     * @return {?}
     */
    SettingsPage.prototype.setAuthHost = /**
     * @param {?} authHostURL
     * @return {?}
     */
    function (authHostURL) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        BrowserVisibility.waitUntilElementIsVisible(this.authHostText);
                        return [4 /*yield*/, this.authHostText.clear()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.authHostText.sendKeys(authHostURL)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} identityHost
     * @return {?}
     */
    SettingsPage.prototype.setIdentityHost = /**
     * @param {?} identityHost
     * @return {?}
     */
    function (identityHost) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        BrowserVisibility.waitUntilElementIsVisible(this.identityHostText);
                        return [4 /*yield*/, this.identityHostText.clear()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.identityHostText.sendKeys(identityHost)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.clickApply = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        BrowserVisibility.waitUntilElementIsVisible(this.applyButton);
                        return [4 /*yield*/, this.applyButton.click()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} enableToggle
     * @return {?}
     */
    SettingsPage.prototype.setSilentLogin = /**
     * @param {?} enableToggle
     * @return {?}
     */
    function (enableToggle) {
        return __awaiter(this, void 0, void 0, function () {
            var isChecked;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, BrowserVisibility.waitUntilElementIsVisible(this.silentLoginToggleElement)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.silentLoginToggleElement.getAttribute('class')];
                    case 2:
                        isChecked = (_a.sent()).includes('mat-checked');
                        if (isChecked && !enableToggle || !isChecked && enableToggle) {
                            return [2 /*return*/, this.silentLoginToggleLabel.click()];
                        }
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    /**
     * @param {?} enableToggle
     * @return {?}
     */
    SettingsPage.prototype.setImplicitFlow = /**
     * @param {?} enableToggle
     * @return {?}
     */
    function (enableToggle) {
        return __awaiter(this, void 0, void 0, function () {
            var isChecked;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, BrowserVisibility.waitUntilElementIsVisible(this.implicitFlowElement)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.implicitFlowElement.getAttribute('class')];
                    case 2:
                        isChecked = (_a.sent()).includes('mat-checked');
                        if (isChecked && !enableToggle || !isChecked && enableToggle) {
                            return [2 /*return*/, this.implicitFlowLabel.click()];
                        }
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    SettingsPage.prototype.checkApplyButtonIsDisabled = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).applyButton.getAttribute('disabled'));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.checkProviderDropdownIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.providerDropdown);
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.checkValidationMessageIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.validationMessage);
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.checkProviderOptions = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.providerDropdown);
        this.providerDropdown.click();
        BrowserVisibility.waitUntilElementIsVisible(this.ecmAndBpm.option);
        BrowserVisibility.waitUntilElementIsVisible(this.ecm.option);
        BrowserVisibility.waitUntilElementIsVisible(this.bpm.option);
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getBasicAuthRadioButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.basicAuthRadioButton);
        return this.basicAuthRadioButton;
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getSsoRadioButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.ssoRadioButton);
        return this.ssoRadioButton;
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getBackButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.backButton);
        return this.backButton;
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.getApplyButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.applyButton);
        return this.applyButton;
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.checkBasicAuthRadioIsSelected = /**
     * @return {?}
     */
    function () {
        expect(this.getBasicAuthRadioButton().getAttribute('class')).toContain('mat-radio-checked');
    };
    /**
     * @return {?}
     */
    SettingsPage.prototype.checkSsoRadioIsNotSelected = /**
     * @return {?}
     */
    function () {
        expect(this.getSsoRadioButton().getAttribute('class')).not.toContain('mat-radio-checked');
    };
    return SettingsPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginSSOPage = /** @class */ (function () {
    function LoginSSOPage() {
        this.ssoButton = element(by.css("[data-automation-id=\"login-button-sso\"]"));
        this.usernameField = element(by.id('username'));
        this.passwordField = element(by.id('password'));
        this.loginButton = element(by.css('input[class="submit"]'));
        this.header = element(by.id('adf-header'));
        this.loginError = element(by.css("div[data-automation-id=\"login-error\"]"));
    }
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    LoginSSOPage.prototype.loginSSOIdentityService = /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    function (username, password) {
        browser.ignoreSynchronization = true;
        BrowserVisibility.waitUntilElementIsVisible(this.usernameField);
        this.enterUsername(username);
        this.enterPassword(password);
        this.clickLoginButton();
        browser.actions().sendKeys(protractor.Key.ENTER).perform();
        return BrowserVisibility.waitUntilElementIsVisible(this.header);
    };
    /**
     * @return {?}
     */
    LoginSSOPage.prototype.clickOnSSOButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.ssoButton);
        this.ssoButton.click();
    };
    /**
     * @param {?} username
     * @return {?}
     */
    LoginSSOPage.prototype.enterUsername = /**
     * @param {?} username
     * @return {?}
     */
    function (username) {
        BrowserVisibility.waitUntilElementIsVisible(this.usernameField);
        this.usernameField.clear();
        this.usernameField.sendKeys(username);
    };
    /**
     * @param {?} password
     * @return {?}
     */
    LoginSSOPage.prototype.enterPassword = /**
     * @param {?} password
     * @return {?}
     */
    function (password) {
        BrowserVisibility.waitUntilElementIsVisible(this.passwordField);
        this.passwordField.clear();
        this.passwordField.sendKeys(password);
    };
    /**
     * @return {?}
     */
    LoginSSOPage.prototype.clickLoginButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.loginButton);
        return this.loginButton.click();
    };
    /**
     * @return {?}
     */
    LoginSSOPage.prototype.checkLoginErrorIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.loginError);
    };
    /**
     * @return {?}
     */
    LoginSSOPage.prototype.getLoginErrorMessage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.loginError);
        return this.loginError.getText();
    };
    return LoginSSOPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataTableComponentPage = /** @class */ (function () {
    function DataTableComponentPage(rootElement) {
        if (rootElement === void 0) { rootElement = element.all(by.css('adf-datatable')).first(); }
        this.rows = by.css("adf-datatable div[class*='adf-datatable-body'] div[class*='adf-datatable-row']");
        this.rootElement = rootElement;
        this.list = this.rootElement.all(by.css("div[class*='adf-datatable-body'] div[class*='adf-datatable-row']"));
        this.contents = this.rootElement.all(by.css('div[class="adf-datatable-body"] span'));
        this.tableBody = this.rootElement.all(by.css("div[class='adf-datatable-body']")).first();
        this.spinner = this.rootElement.element(by.css('mat-progress-spinner'));
        this.allColumns = this.rootElement.all(by.css('div[data-automation-id*="auto_id_entry."]'));
        this.selectedRowNumber = this.rootElement.element(by.css("div[class*='is-selected'] div[data-automation-id*='text_']"));
        this.allSelectedRows = this.rootElement.all(by.css("div[class*='is-selected']"));
        this.selectAll = this.rootElement.element(by.css("div[class*='adf-datatable-header'] mat-checkbox"));
        this.copyColumnTooltip = this.rootElement.element(by.css("adf-copy-content-tooltip span"));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkAllRowsButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkAllRows = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).selectAll).then((/**
         * @return {?}
         */
        function () {
            (/** @type {?} */ (_this)).selectAll.click();
            BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (_this)).selectAll.element(by.css('input[aria-checked="true"]')));
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.uncheckAllRows = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).selectAll).then((/**
         * @return {?}
         */
        function () {
            (/** @type {?} */ (_this)).selectAll.click();
            BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (_this)).selectAll.element(by.css('input[aria-checked="true"]')));
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.clickCheckbox = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var checkbox = this.getRowCheckbox(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsClickable(checkbox);
        checkbox.click();
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.checkRowIsNotChecked = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.getRowCheckbox(columnName, columnValue).element(by.css('input[aria-checked="true"]')));
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.checkRowIsChecked = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var rowCheckbox = this.getRowCheckbox(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(rowCheckbox.element(by.css('input[aria-checked="true"]')));
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.getRowCheckbox = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        return this.getRow(columnName, columnValue)
            .element(by.css('mat-checkbox'));
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.checkNoRowIsSelected = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.selectedRowNumber);
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.getNumberOfSelectedRows = /**
     * @return {?}
     */
    function () {
        return this.allSelectedRows.count();
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.selectRowWithKeyboard = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = this.getRow(columnName, columnValue);
        browser.actions().sendKeys(protractor.Key.COMMAND).click(row).perform();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.selectRow = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).getRow(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        BrowserVisibility.waitUntilElementIsClickable(row);
        row.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkRowIsSelected = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var selectedRow = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue).element(by.xpath("ancestor::div[contains(@class, 'is-selected')]"));
        BrowserVisibility.waitUntilElementIsVisible(selectedRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkRowIsNotSelected = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var selectedRow = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue).element(by.xpath("ancestor::div[contains(@class, 'is-selected')]"));
        BrowserVisibility.waitUntilElementIsNotOnPage(selectedRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} identifyingColumn
     * @param {?} identifyingValue
     * @param {?} columnName
     * @return {?}
     */
    DataTableComponentPage.prototype.getColumnValueForRow = /**
     * @param {?} identifyingColumn
     * @param {?} identifyingValue
     * @param {?} columnName
     * @return {?}
     */
    function (identifyingColumn, identifyingValue, columnName) {
        /** @type {?} */
        var row = this.getRow(identifyingColumn, identifyingValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        /** @type {?} */
        var rowColumn = row.element(by.css("div[title=\"" + columnName + "\"] span"));
        BrowserVisibility.waitUntilElementIsVisible(rowColumn);
        return rowColumn.getText();
    };
    /**
     * Check the list is sorted.
     *
     * @param sortOrder: 'true' if the list is expected to be sorted ascendant and 'false' for descendant
     * @param locator: locator for column
     * @return 'true' if the list is sorted as expected and 'false' if it isn't
     */
    /**
     * Check the list is sorted.
     *
     * @param {?} sortOrder
     * @param {?} locator
     * @return {?} 'true' if the list is sorted as expected and 'false' if it isn't
     */
    DataTableComponentPage.prototype.checkListIsSorted = /**
     * Check the list is sorted.
     *
     * @param {?} sortOrder
     * @param {?} locator
     * @return {?} 'true' if the list is sorted as expected and 'false' if it isn't
     */
    function (sortOrder, locator) {
        /** @type {?} */
        var deferred = protractor.promise.defer();
        /** @type {?} */
        var column = element.all(by.css("div[title='" + locator + "'] span"));
        BrowserVisibility.waitUntilElementIsVisible(column.first());
        /** @type {?} */
        var initialList = [];
        column.each((/**
         * @param {?} currentElement
         * @return {?}
         */
        function (currentElement) {
            currentElement.getText().then((/**
             * @param {?} text
             * @return {?}
             */
            function (text) {
                initialList.push(text);
            }));
        })).then((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var sortedList = initialList;
            sortedList = sortedList.sort();
            if (sortOrder === false) {
                sortedList = sortedList.reverse();
            }
            deferred.fulfill(initialList.toString() === sortedList.toString());
        }));
        return deferred.promise;
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.rightClickOnRow = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = this.getRow(columnName, columnValue);
        browser.actions().click(row, protractor.Button.RIGHT).perform();
        BrowserVisibility.waitUntilElementIsVisible(element(by.id('adf-context-menu-content')));
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.getTooltip = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        return this.getCellElementByValue(columnName, columnValue).getAttribute('title');
    };
    /**
     * @param {?} filename
     * @return {?}
     */
    DataTableComponentPage.prototype.getFileHyperlink = /**
     * @param {?} filename
     * @return {?}
     */
    function (filename) {
        return element(by.cssContainingText('adf-name-column[class*="adf-datatable-link"] span', filename));
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.numberOfRows = /**
     * @return {?}
     */
    function () {
        return this.rootElement.all(this.rows).count();
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DataTableComponentPage.prototype.getAllRowsColumnValues = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return __awaiter(this, void 0, void 0, function () {
            var columnLocator, initialList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        columnLocator = by.css("adf-datatable div[class*='adf-datatable-body'] div[class*='adf-datatable-row'] div[title='" + column + "'] span");
                        BrowserVisibility.waitUntilElementIsVisible(element.all(columnLocator).first());
                        return [4 /*yield*/, element.all(columnLocator).getText()];
                    case 1:
                        initialList = _a.sent();
                        return [2 /*return*/, initialList.filter((/**
                             * @param {?} el
                             * @return {?}
                             */
                            function (el) { return el; }))];
                }
            });
        });
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.getRowsWithSameColumnValues = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        return __awaiter(this, void 0, void 0, function () {
            var columnLocator;
            return __generator(this, function (_a) {
                columnLocator = by.css("div[title='" + columnName + "'] div[data-automation-id=\"text_" + columnValue + "\"] span");
                BrowserVisibility.waitUntilElementIsVisible(this.rootElement.all(columnLocator).first());
                return [2 /*return*/, this.rootElement.all(columnLocator).getText()];
            });
        });
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.doubleClickRow = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).getRow(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        BrowserVisibility.waitUntilElementIsClickable(row);
        row.click();
        (/** @type {?} */ (this)).checkRowIsSelected(columnName, columnValue);
        browser.actions().sendKeys(protractor.Key.ENTER).perform();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.waitForTableBody = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.tableBody);
    };
    /**
     * @param {?} detail
     * @return {?}
     */
    DataTableComponentPage.prototype.getFirstElementDetail = /**
     * @param {?} detail
     * @return {?}
     */
    function (detail) {
        /** @type {?} */
        var firstNode = element.all(by.css("adf-datatable div[title=\"" + detail + "\"] span")).first();
        return firstNode.getText();
    };
    /**
     * @param {?} detail
     * @return {?}
     */
    DataTableComponentPage.prototype.geCellElementDetail = /**
     * @param {?} detail
     * @return {?}
     */
    function (detail) {
        return element.all(by.css("adf-datatable div[title=\"" + detail + "\"] span"));
    };
    /**
     * @param {?} sortOrder
     * @param {?} column
     * @return {?}
     */
    DataTableComponentPage.prototype.sortByColumn = /**
     * @param {?} sortOrder
     * @param {?} column
     * @return {?}
     */
    function (sortOrder, column) {
        /** @type {?} */
        var locator = by.css("div[data-automation-id=\"auto_id_" + column + "\"]");
        BrowserVisibility.waitUntilElementIsVisible(element(locator));
        return element(locator).getAttribute('class').then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (sortOrder === true) {
                if (!result.includes('sorted-asc')) {
                    if (result.includes('sorted-desc') || result.includes('sortable')) {
                        element(locator).click();
                    }
                }
            }
            else {
                if (result.includes('sorted-asc')) {
                    element(locator).click();
                }
                else if (result.includes('sortable')) {
                    element(locator).click();
                    element(locator).click();
                }
            }
            return Promise.resolve();
        }));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkContentIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkContentIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsNotOnPage(row);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.getRow = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var row = this.rootElement.all(by.css("div[title=\"" + columnName + "\"] div[data-automation-id=\"text_" + columnValue + "\"]")).first()
            .element(by.xpath("ancestor::div[contains(@class, 'adf-datatable-row')]"));
        BrowserVisibility.waitUntilElementIsVisible(row);
        return row;
    };
    /**
     * @param {?} position
     * @return {?}
     */
    DataTableComponentPage.prototype.contentInPosition = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        BrowserVisibility.waitUntilElementIsVisible(this.contents);
        return this.contents.get(position - 1).getText();
    };
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    DataTableComponentPage.prototype.getCellElementByValue = /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    function (columnName, columnValue) {
        return this.rootElement.all(by.css("div[title=\"" + columnName + "\"] div[data-automation-id=\"text_" + columnValue + "\"] span")).first();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkSpinnerIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsPresent((/** @type {?} */ (this)).spinner);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkSpinnerIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).spinner);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.tableIsLoaded = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).rootElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} column
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkColumnIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} column
     * @return {THIS}
     */
    function (column) {
        BrowserVisibility.waitUntilElementIsVisible(element(by.css("div[data-automation-id=\"auto_id_entry." + column + "\"]")));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.getNumberOfColumns = /**
     * @return {?}
     */
    function () {
        return this.allColumns.count();
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.getNumberOfRows = /**
     * @return {?}
     */
    function () {
        return this.list.count();
    };
    /**
     * @param {?} rowNumber
     * @param {?} columnName
     * @return {?}
     */
    DataTableComponentPage.prototype.getCellByRowNumberAndColumnName = /**
     * @param {?} rowNumber
     * @param {?} columnName
     * @return {?}
     */
    function (rowNumber, columnName) {
        return this.list.get(rowNumber).element(by.css("div[title=\"" + columnName + "\"] span"));
    };
    /**
     * @param {?} rowColumn
     * @param {?} rowContent
     * @param {?} columnName
     * @return {?}
     */
    DataTableComponentPage.prototype.getCellByRowContentAndColumn = /**
     * @param {?} rowColumn
     * @param {?} rowContent
     * @param {?} columnName
     * @return {?}
     */
    function (rowColumn, rowContent, columnName) {
        return this.getRow(rowColumn, rowContent).element(by.css("div[title='" + columnName + "']"));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    DataTableComponentPage.prototype.selectRowByContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        /** @type {?} */
        var row = this.getCellByContent(content);
        return row.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} folderName
     * @return {THIS}
     */
    DataTableComponentPage.prototype.checkRowByContentIsSelected = /**
     * @template THIS
     * @this {THIS}
     * @param {?} folderName
     * @return {THIS}
     */
    function (folderName) {
        /** @type {?} */
        var selectedRow = (/** @type {?} */ (this)).getCellByContent(folderName).element(by.xpath("ancestor::div[contains(@class, 'is-selected')]"));
        BrowserVisibility.waitUntilElementIsVisible(selectedRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    DataTableComponentPage.prototype.getCellByContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        /** @type {?} */
        var cell = this.rootElement.element(by.cssContainingText("div[class*='adf-datatable-row'] div[class*='adf-name-location-cell-name']", content));
        BrowserVisibility.waitUntilElementIsVisible(cell);
        return cell;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    DataTableComponentPage.prototype.clickRowByContent = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var resultElement = this.rootElement.all(by.css("div[data-automation-id='" + name + "']")).first();
        BrowserVisibility.waitUntilElementIsVisible(resultElement);
        BrowserVisibility.waitUntilElementIsClickable(resultElement);
        resultElement.click();
    };
    /**
     * @return {?}
     */
    DataTableComponentPage.prototype.getCopyContentTooltip = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.copyColumnTooltip);
        return this.copyColumnTooltip.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DataTableComponentPage.prototype.copyContentTooltipIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotPresent((/** @type {?} */ (this)).copyColumnTooltip);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.mouseOverColumn = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var column = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        (/** @type {?} */ (this)).mouseOverElement(column);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} elem
     * @return {THIS}
     */
    DataTableComponentPage.prototype.mouseOverElement = /**
     * @template THIS
     * @this {THIS}
     * @param {?} elem
     * @return {THIS}
     */
    function (elem) {
        BrowserVisibility.waitUntilElementIsVisible(elem);
        browser.actions().mouseMove(elem).perform();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    DataTableComponentPage.prototype.clickColumn = /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    function (columnName, columnValue) {
        /** @type {?} */
        var column = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        (/** @type {?} */ (this)).clickElement(column);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} elem
     * @return {THIS}
     */
    DataTableComponentPage.prototype.clickElement = /**
     * @template THIS
     * @this {THIS}
     * @param {?} elem
     * @return {THIS}
     */
    function (elem) {
        BrowserVisibility.waitUntilElementIsVisible(elem);
        BrowserVisibility.waitUntilElementIsClickable(elem);
        elem.click();
        return (/** @type {?} */ (this));
    };
    return DataTableComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PaginationPage = /** @class */ (function () {
    function PaginationPage() {
        this.itemsPerPageDropdown = element(by.css('div[class*="adf-pagination__perpage-block"] button'));
        this.pageSelectorDropDown = element(by.css('div[class*="adf-pagination__page-selector"]'));
        this.pageSelectorArrow = element(by.css('button[data-automation-id="page-selector"]'));
        this.itemsPerPage = element(by.css('span[class="adf-pagination__max-items"]'));
        this.currentPage = element(by.css('span[class="adf-pagination__current-page"]'));
        this.totalPages = element(by.css('span[class="adf-pagination__total-pages"]'));
        this.paginationRange = element(by.css('span[class="adf-pagination__range"]'));
        this.nextPageButton = element(by.css('button[class*="adf-pagination__next-button"]'));
        this.nextButtonDisabled = element(by.css('button[class*="adf-pagination__next-button"][disabled]'));
        this.previousButtonDisabled = element(by.css('button[class*="adf-pagination__previous-button"][disabled]'));
        this.pageDropDown = element(by.css('div[class*="adf-pagination__actualinfo-block"] button'));
        this.pageDropDownOptions = by.css('div[class*="mat-menu-content"] button');
        this.paginationSection = element(by.css('adf-pagination'));
        this.paginationSectionEmpty = element(by.css('adf-pagination[class*="adf-pagination__empty"]'));
        this.totalFiles = element(by.css('span[class="adf-pagination__range"]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} numberOfItem
     * @return {THIS}
     */
    PaginationPage.prototype.selectItemsPerPage = /**
     * @template THIS
     * @this {THIS}
     * @param {?} numberOfItem
     * @return {THIS}
     */
    function (numberOfItem) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).itemsPerPageDropdown);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).itemsPerPageDropdown);
        browser.actions().mouseMove((/** @type {?} */ (this)).itemsPerPageDropdown).perform();
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).itemsPerPageDropdown);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).itemsPerPageDropdown);
        (/** @type {?} */ (this)).itemsPerPageDropdown.click();
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).pageSelectorDropDown);
        /** @type {?} */
        var itemsPerPage = element.all(by.cssContainingText('.mat-menu-item', numberOfItem)).first();
        BrowserVisibility.waitUntilElementIsClickable(itemsPerPage);
        BrowserVisibility.waitUntilElementIsVisible(itemsPerPage);
        itemsPerPage.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.checkPageSelectorIsNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.pageSelectorArrow);
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.checkPageSelectorIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.pageSelectorArrow);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    PaginationPage.prototype.checkPaginationIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsOnPage((/** @type {?} */ (this)).paginationSectionEmpty);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.getCurrentItemsPerPage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.itemsPerPage);
        return this.itemsPerPage.getText();
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.getCurrentPage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.paginationSection);
        BrowserVisibility.waitUntilElementIsVisible(this.currentPage);
        return this.currentPage.getText();
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.getTotalPages = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.totalPages);
        return this.totalPages.getText();
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.getPaginationRange = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.paginationRange);
        return this.paginationRange.getText();
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.clickOnNextPage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.nextPageButton);
        BrowserVisibility.waitUntilElementIsClickable(this.nextPageButton);
        browser.actions().mouseMove(this.nextPageButton).perform();
        BrowserVisibility.waitUntilElementIsVisible(this.nextPageButton);
        BrowserVisibility.waitUntilElementIsClickable(this.nextPageButton);
        return this.nextPageButton.click();
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.clickOnPageDropdown = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.pageDropDown);
        BrowserVisibility.waitUntilElementIsClickable(this.pageDropDown);
        return this.pageDropDown.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} numberOfItemPerPage
     * @return {THIS}
     */
    PaginationPage.prototype.clickOnPageDropdownOption = /**
     * @template THIS
     * @this {THIS}
     * @param {?} numberOfItemPerPage
     * @return {THIS}
     */
    function (numberOfItemPerPage) {
        BrowserVisibility.waitUntilElementIsVisible(element.all((/** @type {?} */ (this)).pageDropDownOptions).first());
        /** @type {?} */
        var option = element(by.cssContainingText('div[class*="mat-menu-content"] button', numberOfItemPerPage));
        BrowserVisibility.waitUntilElementIsVisible(option);
        option.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.getPageDropdownOptions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var deferred = protractor.promise.defer();
        BrowserVisibility.waitUntilElementIsVisible(element.all(this.pageDropDownOptions).first());
        /** @type {?} */
        var initialList = [];
        element.all(this.pageDropDownOptions).each((/**
         * @param {?} currentOption
         * @return {?}
         */
        function (currentOption) {
            currentOption.getText().then((/**
             * @param {?} text
             * @return {?}
             */
            function (text) {
                if (text !== '') {
                    initialList.push(text);
                }
            }));
        })).then((/**
         * @return {?}
         */
        function () {
            deferred.fulfill(initialList);
        }));
        return deferred.promise;
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.checkNextPageButtonIsDisabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.nextButtonDisabled);
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.checkPreviousPageButtonIsDisabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.previousButtonDisabled);
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.checkNextPageButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.nextButtonDisabled);
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.checkPreviousPageButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.previousButtonDisabled);
    };
    /**
     * @return {?}
     */
    PaginationPage.prototype.getTotalNumberOfFiles = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.totalFiles);
        /** @type {?} */
        var numberOfFiles = this.totalFiles.getText().then((/**
         * @param {?} totalNumber
         * @return {?}
         */
        function (totalNumber) {
            /** @type {?} */
            var totalNumberOfFiles = totalNumber.split('of ')[1];
            return totalNumberOfFiles;
        }));
        return numberOfFiles;
    };
    return PaginationPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErrorPage = /** @class */ (function () {
    function ErrorPage() {
        this.errorPageCode = element(by.css('adf-error-content .adf-error-content-code'));
        this.errorPageTitle = element(by.css('adf-error-content .adf-error-content-title'));
        this.errorPageDescription = element(by.css('adf-error-content .adf-error-content-description'));
        this.backButton = element(by.id('adf-return-button'));
        this.secondButton = element(by.id('adf-secondary-button'));
    }
    /**
     * @return {?}
     */
    ErrorPage.prototype.clickBackButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.backButton);
        this.backButton.click();
    };
    /**
     * @return {?}
     */
    ErrorPage.prototype.clickSecondButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.secondButton);
        this.secondButton.click();
    };
    /**
     * @return {?}
     */
    ErrorPage.prototype.checkErrorCode = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageCode);
    };
    /**
     * @return {?}
     */
    ErrorPage.prototype.getErrorCode = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageCode);
        return this.errorPageCode.getText();
    };
    /**
     * @return {?}
     */
    ErrorPage.prototype.getErrorTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageTitle);
        return this.errorPageTitle.getText();
    };
    /**
     * @return {?}
     */
    ErrorPage.prototype.getErrorDescription = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageDescription);
        return this.errorPageDescription.getText();
    };
    return ErrorPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Tagged template to convert a sting to an `ElementFinder`.
 * \@example ```const item = byCss`.adf-breadcrumb-item-current`;``` / ```const item = byCss`${variable}`;```
 * @param {?} literals
 * @param {...?} placeholders
 * @return {?} Instance of `ElementFinder` type.
 */
function byCss(literals) {
    var placeholders = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        placeholders[_i - 1] = arguments[_i];
    }
    /** @type {?} */
    var selector = literals[0] || placeholders[0];
    return browser.element(by.css(selector));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DocumentListPage = /** @class */ (function () {
    function DocumentListPage(rootElement) {
        if (rootElement === void 0) { rootElement = element.all(by.css('adf-document-list')).first(); }
        this.actionMenu = element(by.css('div[role="menu"]'));
        this.optionButton = by.css('button[data-automation-id*="action_menu_"]');
        this.rootElement = rootElement;
        this.dataTable = new DataTableComponentPage(this.rootElement);
        this.tableBody = rootElement.all(by.css('div[class="adf-datatable-body"]')).first();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} content
     * @return {THIS}
     */
    DocumentListPage.prototype.checkLockedIcon = /**
     * @template THIS
     * @this {THIS}
     * @param {?} content
     * @return {THIS}
     */
    function (content) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).dataTable.getRow('Display name', content);
        /** @type {?} */
        var lockIcon = row.element(by.cssContainingText('div[title="Lock"] mat-icon', 'lock'));
        BrowserVisibility.waitUntilElementIsVisible(lockIcon);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} content
     * @return {THIS}
     */
    DocumentListPage.prototype.checkUnlockedIcon = /**
     * @template THIS
     * @this {THIS}
     * @param {?} content
     * @return {THIS}
     */
    function (content) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).dataTable.getRow('Display name', content);
        /** @type {?} */
        var lockIcon = row.element(by.cssContainingText('div[title="Lock"] mat-icon', 'lock_open'));
        BrowserVisibility.waitUntilElementIsVisible(lockIcon);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    DocumentListPage.prototype.waitForTableBody = /**
     * @return {?}
     */
    function () {
        return BrowserVisibility.waitUntilElementIsVisible(this.tableBody);
    };
    /**
     * @param {?} nodeName
     * @return {?}
     */
    DocumentListPage.prototype.getTooltip = /**
     * @param {?} nodeName
     * @return {?}
     */
    function (nodeName) {
        return this.dataTable.getTooltip('Display name', nodeName);
    };
    /**
     * @param {?} nodeName
     * @return {?}
     */
    DocumentListPage.prototype.selectRow = /**
     * @param {?} nodeName
     * @return {?}
     */
    function (nodeName) {
        return this.dataTable.selectRow('Display name', nodeName);
    };
    /**
     * @param {?} nodeName
     * @return {?}
     */
    DocumentListPage.prototype.rightClickOnRow = /**
     * @param {?} nodeName
     * @return {?}
     */
    function (nodeName) {
        return this.dataTable.rightClickOnRow('Display name', nodeName);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} content
     * @return {THIS}
     */
    DocumentListPage.prototype.clickOnActionMenu = /**
     * @template THIS
     * @this {THIS}
     * @param {?} content
     * @return {THIS}
     */
    function (content) {
        /** @type {?} */
        var row = (/** @type {?} */ (this)).dataTable.getRow('Display name', content);
        row.element((/** @type {?} */ (this)).optionButton).click();
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).actionMenu);
        browser.sleep(500);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    DocumentListPage.prototype.checkActionMenuIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).actionMenu);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    DocumentListPage.prototype.dataTablePage = /**
     * @return {?}
     */
    function () {
        return new DataTableComponentPage(this.rootElement);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DocumentListPage.prototype.getAllRowsColumnValues = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return this.dataTable.getAllRowsColumnValues(column);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} nodeName
     * @return {THIS}
     */
    DocumentListPage.prototype.doubleClickRow = /**
     * @template THIS
     * @this {THIS}
     * @param {?} nodeName
     * @return {THIS}
     */
    function (nodeName) {
        (/** @type {?} */ (this)).dataTable.doubleClickRow('Display name', nodeName);
        return (/** @type {?} */ (this));
    };
    return DocumentListPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ExampleAction = /** @class */ (function () {
    function ExampleAction() {
    }
    return ExampleAction;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ContentNodeSelectorDialogPage = /** @class */ (function () {
    function ContentNodeSelectorDialogPage() {
        this.dialog = element(by.css("adf-content-node-selector"));
        this.header = this.dialog.element(by.css("header[data-automation-id='content-node-selector-title']"));
        this.searchInputElement = this.dialog.element(by.css("input[data-automation-id='content-node-selector-search-input']"));
        this.searchLabel = this.searchInputElement.element(by.xpath("ancestor::div[@class='mat-form-field-infix']/span/label"));
        this.siteListDropdown = this.dialog.element(by.css("mat-select[data-automation-id='site-my-files-option']"));
        this.cancelButton = element(by.css("button[data-automation-id='content-node-selector-actions-cancel']"));
        this.moveCopyButton = element(by.css("button[data-automation-id='content-node-selector-actions-choose']"));
        this.contentList = new DocumentListPage(this.dialog);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ContentNodeSelectorDialogPage.prototype.checkDialogIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).dialog);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ContentNodeSelectorDialogPage.prototype.checkDialogIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).dialog);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.getDialogHeaderText = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.header);
        return this.header.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ContentNodeSelectorDialogPage.prototype.checkSearchInputIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).searchInputElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.getSearchLabel = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.searchLabel);
        return this.searchLabel.getText();
    };
    /**
     * @param {?} siteName
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.checkSelectedSiteIsDisplayed = /**
     * @param {?} siteName
     * @return {?}
     */
    function (siteName) {
        BrowserVisibility.waitUntilElementIsVisible(this.siteListDropdown.element(by.cssContainingText('.mat-select-value-text span', siteName)));
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.checkCancelButtonIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.cancelButton);
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.clickCancelButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.cancelButton);
        return this.cancelButton.click();
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.checkMoveCopyButtonIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.moveCopyButton);
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.getMoveCopyButtonText = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.moveCopyButton);
        return this.moveCopyButton.getText();
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.clickMoveCopyButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.moveCopyButton);
        return this.moveCopyButton.click();
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.numberOfResultsDisplayed = /**
     * @return {?}
     */
    function () {
        return this.contentList.dataTablePage().numberOfRows();
    };
    /**
     * @param {?} text
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.typeIntoNodeSelectorSearchField = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        BrowserVisibility.waitUntilElementIsVisible(this.searchInputElement);
        this.searchInputElement.sendKeys(text);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.clickContentNodeSelectorResult = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.contentList.dataTablePage().clickRowByContent(name);
    };
    /**
     * @return {?}
     */
    ContentNodeSelectorDialogPage.prototype.contentListPage = /**
     * @return {?}
     */
    function () {
        return this.contentList;
    };
    return ContentNodeSelectorDialogPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormFieldsPage = /** @class */ (function () {
    function FormFieldsPage() {
        this.formContent = element(by.css('adf-form'));
        this.refreshButton = element(by.css('div[class*="form-reload-button"] mat-icon'));
        this.saveButton = element(by.cssContainingText('mat-card-actions[class*="adf-for"] span', 'SAVE'));
        this.valueLocator = by.css('input');
        this.labelLocator = by.css('label');
        this.noFormMessage = element(by.css('span[id*="no-form-message"]'));
        this.completedTaskNoFormMessage = element(by.css('div[id*="completed-form-message"] p'));
        this.attachFormButton = element(by.id('adf-no-form-attach-form-button'));
        this.selectFormDropDownArrow = element.all(by.css('adf-attach-form div[class*="mat-select-arrow"]')).first();
        this.selectFormContent = element(by.css('div[class*="mat-select-panel"]'));
        this.completeButton = element(by.id('adf-form-complete'));
        this.errorMessage = by.css('.adf-error-text-container .adf-error-text');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    FormFieldsPage.prototype.setFieldValue = /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (locator, field, value) {
        /** @type {?} */
        var fieldElement = element(locator(field));
        BrowserVisibility.waitUntilElementIsVisible(fieldElement);
        fieldElement.clear().sendKeys(value);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormFieldsPage.prototype.checkWidgetIsVisible = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        /** @type {?} */
        var fieldElement = element.all(by.css("adf-form-field div[id='field-" + fieldId + "-container']")).first();
        BrowserVisibility.waitUntilElementIsVisible(fieldElement);
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormFieldsPage.prototype.checkWidgetIsHidden = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        /** @type {?} */
        var hiddenElement = element(by.css("adf-form-field div[id='field-" + fieldId + "-container'][hidden]"));
        BrowserVisibility.waitUntilElementIsVisible(hiddenElement);
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormFieldsPage.prototype.getWidget = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        /** @type {?} */
        var widget = element(by.css("adf-form-field div[id='field-" + fieldId + "-container']"));
        BrowserVisibility.waitUntilElementIsVisible(widget);
        return widget;
    };
    /**
     * @param {?} fieldId
     * @param {?} valueLocatorParam
     * @return {?}
     */
    FormFieldsPage.prototype.getFieldValue = /**
     * @param {?} fieldId
     * @param {?} valueLocatorParam
     * @return {?}
     */
    function (fieldId, valueLocatorParam) {
        /** @type {?} */
        var value = this.getWidget(fieldId).element(valueLocatorParam || this.valueLocator);
        BrowserVisibility.waitUntilElementIsVisible(value);
        return value.getAttribute('value');
    };
    /**
     * @param {?} fieldId
     * @param {?} labelLocatorParam
     * @return {?}
     */
    FormFieldsPage.prototype.getFieldLabel = /**
     * @param {?} fieldId
     * @param {?} labelLocatorParam
     * @return {?}
     */
    function (fieldId, labelLocatorParam) {
        /** @type {?} */
        var label = this.getWidget(fieldId).all(labelLocatorParam || this.labelLocator).first();
        BrowserVisibility.waitUntilElementIsVisible(label);
        return label.getText();
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormFieldsPage.prototype.getFieldErrorMessage = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        /** @type {?} */
        var error = this.getWidget(fieldId).element(this.errorMessage);
        return error.getText();
    };
    /**
     * @param {?} fieldId
     * @param {?} labelLocatorParam
     * @return {?}
     */
    FormFieldsPage.prototype.getFieldText = /**
     * @param {?} fieldId
     * @param {?} labelLocatorParam
     * @return {?}
     */
    function (fieldId, labelLocatorParam) {
        /** @type {?} */
        var label = this.getWidget(fieldId).element(labelLocatorParam || this.labelLocator);
        BrowserVisibility.waitUntilElementIsVisible(label);
        return label.getText();
    };
    /**
     * @param {?} fieldId
     * @param {?=} locator
     * @return {?}
     */
    FormFieldsPage.prototype.getFieldPlaceHolder = /**
     * @param {?} fieldId
     * @param {?=} locator
     * @return {?}
     */
    function (fieldId, locator) {
        if (locator === void 0) { locator = 'input'; }
        /** @type {?} */
        var placeHolderLocator = element(by.css(locator + "#" + fieldId)).getAttribute('placeholder');
        BrowserVisibility.waitUntilElementIsVisible(placeHolderLocator);
        return placeHolderLocator;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @param {?} field
     * @param {?} val
     * @return {THIS}
     */
    FormFieldsPage.prototype.checkFieldValue = /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @param {?} field
     * @param {?} val
     * @return {THIS}
     */
    function (locator, field, val) {
        BrowserVisibility.waitUntilElementHasValue(element(locator(field)), val);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FormFieldsPage.prototype.refreshForm = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).refreshButton);
        (/** @type {?} */ (this)).refreshButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FormFieldsPage.prototype.saveForm = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).saveButton);
        (/** @type {?} */ (this)).saveButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FormFieldsPage.prototype.noFormIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).formContent);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FormFieldsPage.prototype.checkFormIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).formContent);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    FormFieldsPage.prototype.getNoFormMessage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.noFormMessage);
        return this.noFormMessage.getText();
    };
    /**
     * @return {?}
     */
    FormFieldsPage.prototype.getCompletedTaskNoFormMessage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.completedTaskNoFormMessage);
        return this.completedTaskNoFormMessage.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FormFieldsPage.prototype.clickOnAttachFormButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).attachFormButton);
        (/** @type {?} */ (this)).attachFormButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} formName
     * @return {THIS}
     */
    FormFieldsPage.prototype.selectForm = /**
     * @template THIS
     * @this {THIS}
     * @param {?} formName
     * @return {THIS}
     */
    function (formName) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectFormDropDownArrow);
        (/** @type {?} */ (this)).selectFormDropDownArrow.click();
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectFormContent);
        (/** @type {?} */ (this)).selectFormFromDropDown(formName);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} formName
     * @return {?}
     */
    FormFieldsPage.prototype.selectFormFromDropDown = /**
     * @param {?} formName
     * @return {?}
     */
    function (formName) {
        /** @type {?} */
        var formNameElement = element(by.cssContainingText('span', formName));
        BrowserVisibility.waitUntilElementIsVisible(formNameElement);
        formNameElement.click();
    };
    /**
     * @param {?} fieldId
     * @return {?}
     */
    FormFieldsPage.prototype.checkWidgetIsReadOnlyMode = /**
     * @param {?} fieldId
     * @return {?}
     */
    function (fieldId) {
        /** @type {?} */
        var widget = element(by.css("adf-form-field div[id='field-" + fieldId + "-container']"));
        /** @type {?} */
        var widgetReadOnly = widget.element(by.css('div[class*="adf-readonly"]'));
        BrowserVisibility.waitUntilElementIsVisible(widgetReadOnly);
        return widgetReadOnly;
    };
    /**
     * @return {?}
     */
    FormFieldsPage.prototype.completeForm = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.completeButton);
        return this.completeButton.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fieldId
     * @param {?} value
     * @return {THIS}
     */
    FormFieldsPage.prototype.setValueInInputById = /**
     * @template THIS
     * @this {THIS}
     * @param {?} fieldId
     * @param {?} value
     * @return {THIS}
     */
    function (fieldId, value) {
        /** @type {?} */
        var input = element(by.id(fieldId));
        BrowserVisibility.waitUntilElementIsVisible(input);
        input.clear().sendKeys(value);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    FormFieldsPage.prototype.isCompleteFormButtonDisabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.completeButton);
        return this.completeButton.getAttribute('disabled');
    };
    return FormFieldsPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StartTasksCloudPage = /** @class */ (function () {
    function StartTasksCloudPage() {
        this.name = element(by.css('input[id="name_id"]'));
        this.dueDate = element(by.css('input[id="date_id"]'));
        this.description = element(by.css('textarea[id="description_id"]'));
        this.priority = element(by.css('input[formcontrolname="priority"]'));
        this.startButton = element(by.css('button[id="button-start"]'));
        this.startButtonEnabled = element(by.css('button[id="button-start"]:not(disabled)'));
        this.cancelButton = element(by.css('button[id="button-cancel"]'));
        this.form = element.all(by.css('adf-cloud-start-task form')).first();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.checkFormIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).form);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} userName
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.addName = /**
     * @template THIS
     * @this {THIS}
     * @param {?} userName
     * @return {THIS}
     */
    function (userName) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).name);
        (/** @type {?} */ (this)).name.clear();
        (/** @type {?} */ (this)).name.sendKeys(userName);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} userDescription
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.addDescription = /**
     * @template THIS
     * @this {THIS}
     * @param {?} userDescription
     * @return {THIS}
     */
    function (userDescription) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).description);
        (/** @type {?} */ (this)).description.sendKeys(userDescription);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} userPriority
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.addPriority = /**
     * @template THIS
     * @this {THIS}
     * @param {?} userPriority
     * @return {THIS}
     */
    function (userPriority) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).priority);
        (/** @type {?} */ (this)).priority.sendKeys(userPriority);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} date
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.addDueDate = /**
     * @template THIS
     * @this {THIS}
     * @param {?} date
     * @return {THIS}
     */
    function (date) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).dueDate);
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).dueDate);
        (/** @type {?} */ (this)).dueDate.sendKeys(date);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    StartTasksCloudPage.prototype.clickStartButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.startButton);
        BrowserVisibility.waitUntilElementIsClickable(this.startButton);
        return this.startButton.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.checkStartButtonIsEnabled = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).startButtonEnabled);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.checkStartButtonIsDisabled = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).startButton.getAttribute('disabled'));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    StartTasksCloudPage.prototype.clickCancelButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.cancelButton);
        BrowserVisibility.waitUntilElementIsClickable(this.cancelButton);
        return this.cancelButton.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.blur = /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @return {THIS}
     */
    function (locator) {
        locator.click();
        locator.sendKeys(Key.TAB);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @param {?=} elementRef
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.checkValidationErrorIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @param {?=} elementRef
     * @return {THIS}
     */
    function (error, elementRef) {
        if (elementRef === void 0) { elementRef = 'mat-error'; }
        /** @type {?} */
        var errorElement = element(by.cssContainingText(elementRef, error));
        BrowserVisibility.waitUntilElementIsVisible(errorElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.validateAssignee = /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    function (error) {
        (/** @type {?} */ (this)).checkValidationErrorIsDisplayed(error, '.adf-start-task-cloud-error');
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    StartTasksCloudPage.prototype.validateDate = /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    function (error) {
        (/** @type {?} */ (this)).checkValidationErrorIsDisplayed(error, '.adf-error-text');
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} locator
     * @return {?}
     */
    StartTasksCloudPage.prototype.clearField = /**
     * @param {?} locator
     * @return {?}
     */
    function (locator) {
        BrowserVisibility.waitUntilElementIsVisible(locator);
        BrowserVisibility.waitUntilElementIsClickable(locator);
        locator.getAttribute('value').then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            for (var i = result.length; i >= 0; i--) {
                locator.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    };
    return StartTasksCloudPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskHeaderCloudPage = /** @class */ (function () {
    function TaskHeaderCloudPage() {
        this.assigneeField = element(by.css('span[data-automation-id*="assignee"] span'));
        this.statusField = element(by.css('span[data-automation-id*="status"] span'));
        this.priorityField = element(by.css('span[data-automation-id*="priority"] span'));
        this.dueDateField = element.all(by.css('span[data-automation-id*="dueDate"] span')).first();
        this.categoryField = element(by.css('span[data-automation-id*="category"] span'));
        this.createdField = element(by.css('span[data-automation-id="card-dateitem-created"] span'));
        this.parentNameField = element(by.css('span[data-automation-id*="parentName"] span'));
        this.parentTaskIdField = element(by.css('span[data-automation-id*="parentTaskId"] span'));
        this.endDateField = element.all(by.css('span[data-automation-id*="endDate"] span')).first();
        this.idField = element.all(by.css('span[data-automation-id*="id"] span')).first();
        this.descriptionField = element(by.css('span[data-automation-id*="description"] span'));
        this.taskPropertyList = element(by.css('adf-cloud-task-header adf-card-view div[class="adf-property-list"]'));
    }
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getAssignee = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.assigneeField);
        return this.assigneeField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getStatus = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.statusField);
        return this.statusField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getPriority = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.priorityField);
        return this.priorityField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getCategory = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.categoryField);
        return this.categoryField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getParentName = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.parentNameField);
        return this.parentNameField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getParentTaskId = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.parentTaskIdField);
        return this.parentTaskIdField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getEndDate = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.endDateField);
        return this.endDateField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getCreated = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.createdField);
        return this.createdField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getId = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.idField);
        return this.idField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getDescription = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.descriptionField);
        return this.descriptionField.getText();
    };
    /**
     * @return {?}
     */
    TaskHeaderCloudPage.prototype.getDueDate = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.dueDateField);
        return this.dueDateField.getText();
    };
    return TaskHeaderCloudPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessHeaderCloudPage = /** @class */ (function () {
    function ProcessHeaderCloudPage() {
        this.idField = element.all(by.css('span[data-automation-id*="id"] span')).first();
        this.nameField = element.all(by.css('span[data-automation-id*="name"] span')).first();
        this.statusField = element(by.css('span[data-automation-id*="status"] span'));
        this.initiatorField = element(by.css('span[data-automation-id*="initiator"] span'));
        this.startDateField = element.all(by.css('span[data-automation-id*="startDate"] span')).first();
        this.lastModifiedField = element.all(by.css('span[data-automation-id*="lastModified"] span')).first();
        this.parentIdField = element(by.css('span[data-automation-id*="parentId"] span'));
        this.businessKeyField = element.all(by.css('span[data-automation-id*="businessKey"] span')).first();
    }
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getId = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.idField);
        return this.idField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getName = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.nameField);
        return this.nameField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getStatus = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.statusField);
        return this.statusField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getInitiator = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.initiatorField);
        return this.initiatorField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getStartDate = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.startDateField);
        return this.startDateField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getLastModified = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.lastModifiedField);
        return this.lastModifiedField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getParentId = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.parentIdField);
        return this.parentIdField.getText();
    };
    /**
     * @return {?}
     */
    ProcessHeaderCloudPage.prototype.getBusinessKey = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.businessKeyField);
        return this.businessKeyField.getText();
    };
    return ProcessHeaderCloudPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditProcessFilterDialogPage = /** @class */ (function () {
    function EditProcessFilterDialogPage() {
        this.componentElement = element(by.css('adf-cloud-process-filter-dialog-cloud'));
        this.title = element(by.id('adf-process-filter-dialog-title'));
        this.filterNameInput = element(by.id('adf-filter-name-id'));
        this.saveButtonLocator = by.id('adf-save-button-id');
        this.cancelButtonLocator = by.id('adf-cancel-button-id');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterDialogPage.prototype.clickOnSaveButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var saveButton = (/** @type {?} */ (this)).componentElement.element((/** @type {?} */ (this)).saveButtonLocator);
        BrowserVisibility.waitUntilElementIsVisible(saveButton);
        saveButton.click();
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).componentElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterDialogPage.prototype.checkSaveButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.componentElement.element(this.saveButtonLocator));
        return this.componentElement.element(this.saveButtonLocator).isEnabled();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterDialogPage.prototype.clickOnCancelButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var cancelButton = (/** @type {?} */ (this)).componentElement.element((/** @type {?} */ (this)).cancelButtonLocator);
        BrowserVisibility.waitUntilElementIsVisible(cancelButton);
        cancelButton.click();
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).componentElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterDialogPage.prototype.checkCancelButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.componentElement.element(this.cancelButtonLocator));
        return this.componentElement.element(this.cancelButtonLocator).isEnabled();
    };
    /**
     * @return {?}
     */
    EditProcessFilterDialogPage.prototype.getFilterName = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filterNameInput);
        return this.filterNameInput.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} filterName
     * @return {THIS}
     */
    EditProcessFilterDialogPage.prototype.setFilterName = /**
     * @template THIS
     * @this {THIS}
     * @param {?} filterName
     * @return {THIS}
     */
    function (filterName) {
        (/** @type {?} */ (this)).clearFilterName();
        (/** @type {?} */ (this)).filterNameInput.sendKeys(filterName);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterDialogPage.prototype.clearFilterName = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filterNameInput);
        (/** @type {?} */ (this)).filterNameInput.click();
        (/** @type {?} */ (this)).filterNameInput.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            for (var i = value.length; i >= 0; i--) {
                (/** @type {?} */ (_this)).filterNameInput.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterDialogPage.prototype.getTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.title);
        return this.title.getText();
    };
    return EditProcessFilterDialogPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditProcessFilterCloudComponentPage = /** @class */ (function () {
    function EditProcessFilterCloudComponentPage() {
        this.customiseFilter = element(by.id('adf-edit-process-filter-title-id'));
        this.selectedOption = element.all(by.css('mat-option[class*="mat-selected"]')).first();
        this.saveButton = element(by.css('button[data-automation-id="adf-filter-action-save"]'));
        this.saveAsButton = element(by.css('button[data-automation-id="adf-filter-action-saveAs"]'));
        this.deleteButton = element(by.css('button[data-automation-id="adf-filter-action-delete"]'));
        this.editProcessFilterDialogPage = new EditProcessFilterDialogPage();
    }
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.editProcessFilterDialog = /**
     * @return {?}
     */
    function () {
        return this.editProcessFilterDialogPage;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.clickCustomiseFilterHeader = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).customiseFilter);
        (/** @type {?} */ (this)).customiseFilter.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.checkCustomiseFilterHeaderIsExpanded = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var expansionPanelExtended = element.all(by.css('mat-expansion-panel-header[class*="mat-expanded"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(expansionPanelExtended);
        /** @type {?} */
        var content = element.all(by.css('div[class*="mat-expansion-panel-content "][style*="visible"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(content);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.setStatusFilterDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('status');
        /** @type {?} */
        var statusElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(statusElement);
        BrowserVisibility.waitUntilElementIsVisible(statusElement);
        statusElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.getStateFilterDropDownValue = /**
     * @return {?}
     */
    function () {
        return element(by.css("mat-form-field[data-automation-id='status'] span")).getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.setSortFilterDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('sort');
        /** @type {?} */
        var sortElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(sortElement);
        BrowserVisibility.waitUntilElementIsVisible(sortElement);
        sortElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.getSortFilterDropDownValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sortLocator = element.all(by.css("mat-form-field[data-automation-id='sort'] span")).first();
        BrowserVisibility.waitUntilElementIsVisible(sortLocator);
        return sortLocator.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.setOrderFilterDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('order');
        /** @type {?} */
        var orderElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(orderElement);
        BrowserVisibility.waitUntilElementIsVisible(orderElement);
        orderElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.getOrderFilterDropDownValue = /**
     * @return {?}
     */
    function () {
        return element(by.css("mat-form-field[data-automation-id='order'] span")).getText();
    };
    /**
     * @param {?} option
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.clickOnDropDownArrow = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var dropDownArrow = element.all(by.css("mat-form-field[data-automation-id='" + option + "'] div[class='mat-select-arrow-wrapper']")).first();
        BrowserVisibility.waitUntilElementIsVisible(dropDownArrow);
        BrowserVisibility.waitUntilElementIsClickable(dropDownArrow);
        dropDownArrow.click();
        BrowserVisibility.waitUntilElementIsVisible(this.selectedOption);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.setAppNameDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('appName');
        /** @type {?} */
        var appNameElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(appNameElement);
        BrowserVisibility.waitUntilElementIsVisible(appNameElement);
        appNameElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.checkAppNamesAreUnique = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var appNameList, appTextList, uniqueArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appNameList = element.all(by.css('mat-option[data-automation-id="adf-cloud-edit-process-property-optionsappName"] span'));
                        return [4 /*yield*/, appNameList.getText()];
                    case 1:
                        appTextList = _a.sent();
                        uniqueArray = appTextList.filter((/**
                         * @param {?} appName
                         * @return {?}
                         */
                        function (appName) {
                            /** @type {?} */
                            var sameAppNameArray = appTextList.filter((/**
                             * @param {?} eachApp
                             * @return {?}
                             */
                            function (eachApp) { return eachApp === appName; }));
                            return sameAppNameArray.length === 1;
                        }));
                        return [2 /*return*/, uniqueArray.length === appTextList.length];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.getNumberOfAppNameOptions = /**
     * @return {?}
     */
    function () {
        this.clickOnDropDownArrow('appName');
        /** @type {?} */
        var dropdownOptions = element.all(by.css('.mat-select-panel mat-option'));
        return dropdownOptions.count();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.setProcessInstanceId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('processInstanceId', option);
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.getProcessInstanceId = /**
     * @return {?}
     */
    function () {
        return this.getProperty('processInstanceId');
    };
    /**
     * @param {?} property
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.getProperty = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        /** @type {?} */
        var locator = element.all(by.css('input[data-automation-id="adf-cloud-edit-process-property-' + property + '"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(locator);
        return locator.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} property
     * @param {?} option
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.setProperty = /**
     * @template THIS
     * @this {THIS}
     * @param {?} property
     * @param {?} option
     * @return {THIS}
     */
    function (property, option) {
        /** @type {?} */
        var locator = element.all(by.css('input[data-automation-id="adf-cloud-edit-process-property-' + property + '"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.clear();
        locator.sendKeys(option);
        locator.sendKeys(protractor.Key.ENTER);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.checkSaveButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.checkSaveAsButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveAsButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.checkDeleteButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.checkSaveButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.saveButton.isEnabled();
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.checkSaveAsButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.saveAsButton);
        return this.saveAsButton.isEnabled();
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.checkDeleteButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.deleteButton);
        return this.deleteButton.isEnabled();
    };
    /**
     * @return {?}
     */
    EditProcessFilterCloudComponentPage.prototype.clickSaveAsButton = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disabledButton = element(by.css(("button[data-automation-id='adf-filter-action-saveAs'][disabled]")));
        BrowserVisibility.waitUntilElementIsClickable(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsVisible(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsNotVisible(disabledButton);
        this.saveAsButton.click();
        return this.editProcessFilterDialogPage;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.clickDeleteButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        (/** @type {?} */ (this)).deleteButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditProcessFilterCloudComponentPage.prototype.clickSaveButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var disabledButton = element(by.css(("button[id='adf-save-as-id'][disabled]")));
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).saveButton);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        BrowserVisibility.waitUntilElementIsNotVisible(disabledButton);
        (/** @type {?} */ (this)).saveButton.click();
        return (/** @type {?} */ (this));
    };
    return EditProcessFilterCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTaskFilterDialogPage = /** @class */ (function () {
    function EditTaskFilterDialogPage() {
        this.componentElement = element(by.css('adf-cloud-task-filter-dialog'));
        this.title = element(by.id('adf-task-filter-dialog-title'));
        this.filterNameInput = element(by.id('adf-filter-name-id'));
        this.saveButtonLocator = by.id('adf-save-button-id');
        this.cancelButtonLocator = by.id('adf-cancel-button-id');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterDialogPage.prototype.clickOnSaveButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var saveButton = (/** @type {?} */ (this)).componentElement.element((/** @type {?} */ (this)).saveButtonLocator);
        BrowserVisibility.waitUntilElementIsVisible(saveButton);
        saveButton.click();
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).componentElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterDialogPage.prototype.checkSaveButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.componentElement.element(this.saveButtonLocator));
        return this.componentElement.element(this.saveButtonLocator).isEnabled();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterDialogPage.prototype.clickOnCancelButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        /** @type {?} */
        var cancelButton = (/** @type {?} */ (this)).componentElement.element((/** @type {?} */ (this)).cancelButtonLocator);
        BrowserVisibility.waitUntilElementIsVisible(cancelButton);
        cancelButton.click();
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).componentElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterDialogPage.prototype.checkCancelButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.componentElement.element(this.cancelButtonLocator));
        return this.componentElement.element(this.cancelButtonLocator).isEnabled();
    };
    /**
     * @return {?}
     */
    EditTaskFilterDialogPage.prototype.getFilterName = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filterNameInput);
        return this.filterNameInput.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} filterName
     * @return {THIS}
     */
    EditTaskFilterDialogPage.prototype.setFilterName = /**
     * @template THIS
     * @this {THIS}
     * @param {?} filterName
     * @return {THIS}
     */
    function (filterName) {
        (/** @type {?} */ (this)).clearFilterName();
        (/** @type {?} */ (this)).filterNameInput.sendKeys(filterName);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterDialogPage.prototype.clearFilterName = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filterNameInput);
        (/** @type {?} */ (this)).filterNameInput.click();
        (/** @type {?} */ (this)).filterNameInput.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            for (var i = value.length; i >= 0; i--) {
                (/** @type {?} */ (_this)).filterNameInput.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterDialogPage.prototype.getTitle = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.title);
        return this.title.getText();
    };
    return EditTaskFilterDialogPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditTaskFilterCloudComponentPage = /** @class */ (function () {
    function EditTaskFilterCloudComponentPage() {
        this.customiseFilter = element(by.id('adf-edit-task-filter-title-id'));
        this.selectedOption = element.all(by.css('mat-option[class*="mat-selected"]')).first();
        this.assignee = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-assignee"]'));
        this.priority = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-priority"]'));
        this.taskName = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-taskName"]'));
        this.id = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-taskId"]'));
        this.processDefinitionId = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-processDefinitionId"]'));
        this.processInstanceId = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-processInstanceId"]'));
        this.lastModifiedFrom = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-lastModifiedFrom"]'));
        this.lastModifiedTo = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-lastModifiedTo"]'));
        this.parentTaskId = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-parentTaskId"]'));
        this.owner = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-owner"]'));
        this.saveButton = element(by.css('[data-automation-id="adf-filter-action-save"]'));
        this.saveAsButton = element(by.css('[data-automation-id="adf-filter-action-saveAs"]'));
        this.deleteButton = element(by.css('[data-automation-id="adf-filter-action-delete"]'));
        this.editTaskFilterDialogPage = new EditTaskFilterDialogPage();
    }
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.editTaskFilterDialog = /**
     * @return {?}
     */
    function () {
        return this.editTaskFilterDialogPage;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.clickCustomiseFilterHeader = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).customiseFilter);
        (/** @type {?} */ (this)).customiseFilter.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setStatusFilterDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('status');
        /** @type {?} */
        var statusElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsVisible(statusElement);
        BrowserVisibility.waitUntilElementIsClickable(statusElement);
        statusElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getStatusFilterDropDownValue = /**
     * @return {?}
     */
    function () {
        return element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-status'] span")).first().getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setSortFilterDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('sort');
        /** @type {?} */
        var sortElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(sortElement);
        BrowserVisibility.waitUntilElementIsVisible(sortElement);
        sortElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getSortFilterDropDownValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elementSort = element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-sort'] span")).first();
        BrowserVisibility.waitUntilElementIsVisible(elementSort);
        return elementSort.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setOrderFilterDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('order');
        /** @type {?} */
        var orderElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(orderElement);
        BrowserVisibility.waitUntilElementIsVisible(orderElement);
        orderElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getOrderFilterDropDownValue = /**
     * @return {?}
     */
    function () {
        return element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-order'] span")).first().getText();
    };
    /**
     * @param {?} option
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.clickOnDropDownArrow = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var dropDownArrow = element.all(by.css("mat-form-field[data-automation-id='" + option + "'] div[class*='arrow']")).first();
        BrowserVisibility.waitUntilElementIsVisible(dropDownArrow);
        dropDownArrow.click();
        BrowserVisibility.waitUntilElementIsVisible(this.selectedOption);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setAssignee = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('assignee', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getAssignee = /**
     * @return {?}
     */
    function () {
        return this.assignee.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setPriority = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('priority', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getPriority = /**
     * @return {?}
     */
    function () {
        return this.priority.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setParentTaskId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('parentTaskId', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getParentTaskId = /**
     * @return {?}
     */
    function () {
        return this.parentTaskId.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setOwner = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('owner', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getOwner = /**
     * @return {?}
     */
    function () {
        return this.owner.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setLastModifiedFrom = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).lastModifiedFrom);
        return (/** @type {?} */ (this)).setProperty('lastModifiedFrom', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getLastModifiedFrom = /**
     * @return {?}
     */
    function () {
        return this.lastModifiedFrom.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setLastModifiedTo = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).lastModifiedTo);
        return (/** @type {?} */ (this)).setProperty('lastModifiedTo', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getLastModifiedTo = /**
     * @return {?}
     */
    function () {
        return this.lastModifiedTo.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.checkSaveButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.checkSaveAsButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveAsButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.checkDeleteButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.checkSaveButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.saveButton.isEnabled();
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.checkSaveAsButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.saveAsButton.isEnabled();
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.checkDeleteButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.deleteButton.isEnabled();
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.clickSaveAsButton = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disabledButton = element(by.css(("button[data-automation-id='adf-filter-action-saveAs'][disabled]")));
        BrowserVisibility.waitUntilElementIsClickable(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsVisible(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsNotVisible(disabledButton);
        this.saveAsButton.click();
        return this.editTaskFilterDialogPage;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.clickDeleteButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        (/** @type {?} */ (this)).deleteButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.clickSaveButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        (/** @type {?} */ (this)).saveButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.clearAssignee = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).assignee);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} locator
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.clearField = /**
     * @param {?} locator
     * @return {?}
     */
    function (locator) {
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.getAttribute('value').then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            for (var i = result.length; i >= 0; i--) {
                locator.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setAppNameDropDown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('appName');
        /** @type {?} */
        var appNameElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(appNameElement);
        BrowserVisibility.waitUntilElementIsVisible(appNameElement);
        appNameElement.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getAppNameDropDownValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var locator = element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-appName'] span")).first();
        BrowserVisibility.waitUntilElementIsVisible(locator);
        return locator.getText();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('taskId', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getId = /**
     * @return {?}
     */
    function () {
        return this.id.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setTaskName = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('taskName', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getTaskName = /**
     * @return {?}
     */
    function () {
        return this.taskName.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setProcessDefinitionId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('processDefinitionId', option);
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getProcessDefinitionId = /**
     * @return {?}
     */
    function () {
        return this.processDefinitionId.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setProcessInstanceId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    function (option) {
        return (/** @type {?} */ (this)).setProperty('processInstanceId', option);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} property
     * @param {?} option
     * @return {THIS}
     */
    EditTaskFilterCloudComponentPage.prototype.setProperty = /**
     * @template THIS
     * @this {THIS}
     * @param {?} property
     * @param {?} option
     * @return {THIS}
     */
    function (property, option) {
        /** @type {?} */
        var locator = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-' + property + '"]'));
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.clear();
        locator.sendKeys(option);
        locator.sendKeys(protractor.Key.ENTER);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    EditTaskFilterCloudComponentPage.prototype.getProcessInstanceId = /**
     * @return {?}
     */
    function () {
        return this.processInstanceId.getAttribute('value');
    };
    return EditTaskFilterCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GroupCloudComponentPage = /** @class */ (function () {
    function GroupCloudComponentPage() {
        this.groupCloudSearch = element(by.css('input[data-automation-id="adf-cloud-group-search-input"]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.searchGroups = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).groupCloudSearch);
        browser.sleep(1000);
        (/** @type {?} */ (this)).groupCloudSearch.clear().then((/**
         * @return {?}
         */
        function () {
            for (var i = 0; i < name.length; i++) {
                (/** @type {?} */ (_this)).groupCloudSearch.sendKeys(name[i]);
            }
            (/** @type {?} */ (_this)).groupCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
            (/** @type {?} */ (_this)).groupCloudSearch.sendKeys(name[name.length - 1]);
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.searchGroupsToExisting = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).groupCloudSearch);
        for (var i = 0; i < name.length; i++) {
            (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[i]);
        }
        (/** @type {?} */ (this)).groupCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
        (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[name.length - 1]);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    GroupCloudComponentPage.prototype.getGroupsFieldContent = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.groupCloudSearch);
        return this.groupCloudSearch.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.selectGroupFromList = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsVisible(groupRow);
        browser.sleep(1000);
        groupRow.click();
        BrowserVisibility.waitUntilElementIsNotVisible(groupRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.checkGroupIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsVisible(groupRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.checkGroupIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsNotVisible(groupRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} group
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.checkSelectedGroup = /**
     * @template THIS
     * @this {THIS}
     * @param {?} group
     * @return {THIS}
     */
    function (group) {
        BrowserVisibility.waitUntilElementIsVisible(element(by.cssContainingText('mat-chip[data-automation-id*="adf-cloud-group-chip-"]', group)));
        return (/** @type {?} */ (this));
    };
    return GroupCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PeopleCloudComponentPage = /** @class */ (function () {
    function PeopleCloudComponentPage() {
        this.peopleCloudSearch = element(by.css('input[data-automation-id="adf-people-cloud-search-input"]'));
        this.assigneeField = element(by.css('input[data-automation-id="adf-people-cloud-search-input"]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.searchAssigneeAndSelect = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).peopleCloudSearch);
        (/** @type {?} */ (this)).peopleCloudSearch.clear();
        (/** @type {?} */ (this)).peopleCloudSearch.sendKeys(name);
        (/** @type {?} */ (this)).selectAssigneeFromList(name);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.searchAssignee = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).peopleCloudSearch);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).peopleCloudSearch);
        browser.sleep(1000);
        (/** @type {?} */ (this)).peopleCloudSearch.clear().then((/**
         * @return {?}
         */
        function () {
            for (var i = 0; i < name.length; i++) {
                (/** @type {?} */ (_this)).peopleCloudSearch.sendKeys(name[i]);
            }
            (/** @type {?} */ (_this)).peopleCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
            (/** @type {?} */ (_this)).peopleCloudSearch.sendKeys(name[name.length - 1]);
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.searchAssigneeToExisting = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).peopleCloudSearch);
        for (var i = 0; i < name.length; i++) {
            (/** @type {?} */ (this)).peopleCloudSearch.sendKeys(name[i]);
        }
        (/** @type {?} */ (this)).peopleCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
        (/** @type {?} */ (this)).peopleCloudSearch.sendKeys(name[name.length - 1]);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.selectAssigneeFromList = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var assigneeRow = element(by.cssContainingText('mat-option span.adf-people-label-name', name));
        BrowserVisibility.waitUntilElementIsVisible(assigneeRow);
        browser.sleep(1000);
        assigneeRow.click();
        BrowserVisibility.waitUntilElementIsNotVisible(assigneeRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    PeopleCloudComponentPage.prototype.getAssignee = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.peopleCloudSearch);
        return this.peopleCloudSearch.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.checkUserIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var assigneeRow = element(by.cssContainingText('mat-option span.adf-people-label-name', name));
        BrowserVisibility.waitUntilElementIsVisible(assigneeRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.checkUserIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var assigneeRow = element(by.cssContainingText('mat-option span.adf-people-label-name', name));
        BrowserVisibility.waitUntilElementIsNotVisible(assigneeRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} person
     * @return {THIS}
     */
    PeopleCloudComponentPage.prototype.checkSelectedPeople = /**
     * @template THIS
     * @this {THIS}
     * @param {?} person
     * @return {THIS}
     */
    function (person) {
        BrowserVisibility.waitUntilElementIsVisible(element(by.cssContainingText('mat-chip-list mat-chip', person)));
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    PeopleCloudComponentPage.prototype.getAssigneeFieldContent = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.assigneeField);
        browser.sleep(1000);
        return this.assigneeField.getAttribute('value');
    };
    return PeopleCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessFiltersCloudComponentPage = /** @class */ (function () {
    function ProcessFiltersCloudComponentPage(filter) {
        this.filterIcon = by.xpath("ancestor::div[@class='mat-list-item-content']/mat-icon");
        this.filter = filter;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ProcessFiltersCloudComponentPage.prototype.checkProcessFilterIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filter);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.getProcessFilterIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        /** @type {?} */
        var icon = this.filter.element(this.filterIcon);
        BrowserVisibility.waitUntilElementIsVisible(icon);
        return icon.getText();
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.checkProcessFilterHasNoIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        BrowserVisibility.waitUntilElementIsNotOnPage(this.filter.element(this.filterIcon));
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.clickProcessFilter = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        BrowserVisibility.waitUntilElementIsClickable(this.filter);
        return this.filter.click();
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.checkProcessFilterNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.filter);
        return this.filter;
    };
    return ProcessFiltersCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessListCloudComponentPage = /** @class */ (function () {
    function ProcessListCloudComponentPage() {
        this.columns = {
            id: 'Id',
            name: 'Name'
        };
        this.processList = element(by.css('adf-cloud-process-list'));
        this.noProcessFound = element.all(by.css("div[class='adf-empty-content__title']")).first();
        this.dataTable = new DataTableComponentPage(this.processList);
    }
    /**
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.getDataTable = /**
     * @return {?}
     */
    function () {
        return this.dataTable;
    };
    /**
     * @param {?} processName
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.selectRow = /**
     * @param {?} processName
     * @return {?}
     */
    function (processName) {
        return this.dataTable.selectRow(this.columns.name, processName);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.selectRowById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.selectRow(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkRowIsSelectedById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.checkRowIsSelected(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkRowIsNotSelectedById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.checkRowIsNotSelected(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkRowIsCheckedById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.checkRowIsChecked(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkRowIsNotCheckedById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.checkRowIsNotChecked(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkCheckboxById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.clickCheckbox(this.columns.id, processId);
    };
    /**
     * @param {?} processName
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkContentIsDisplayedByName = /**
     * @param {?} processName
     * @return {?}
     */
    function (processName) {
        return this.dataTable.checkContentIsDisplayed(this.columns.name, processName);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkContentIsDisplayedById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.checkContentIsDisplayed(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.checkContentIsNotDisplayedById = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.checkContentIsNotDisplayed(this.columns.id, processId);
    };
    /**
     * @param {?} processId
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.selectRowWithKeyboard = /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.dataTable.selectRowWithKeyboard(this.columns.id, processId);
    };
    /**
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.getAllRowsNameColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(this.columns.name);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ProcessListCloudComponentPage.prototype.checkProcessListIsLoaded = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).processList);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.getNoProcessFoundMessage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.noProcessFound);
        return this.noProcessFound.getText();
    };
    /**
     * @param {?} column
     * @return {?}
     */
    ProcessListCloudComponentPage.prototype.getAllRowsByColumn = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return this.dataTable.getAllRowsColumnValues(column);
    };
    return ProcessListCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskFiltersCloudComponentPage = /** @class */ (function () {
    function TaskFiltersCloudComponentPage(filter) {
        this.taskIcon = by.xpath("ancestor::div[@class='mat-list-item-content']/mat-icon");
        this.filter = filter;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TaskFiltersCloudComponentPage.prototype.checkTaskFilterIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filter);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    TaskFiltersCloudComponentPage.prototype.getTaskFilterIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        /** @type {?} */
        var icon = this.filter.element(this.taskIcon);
        BrowserVisibility.waitUntilElementIsVisible(icon);
        return icon.getText();
    };
    /**
     * @return {?}
     */
    TaskFiltersCloudComponentPage.prototype.checkTaskFilterHasNoIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        BrowserVisibility.waitUntilElementIsNotOnPage(this.filter.element(this.taskIcon));
    };
    /**
     * @return {?}
     */
    TaskFiltersCloudComponentPage.prototype.clickTaskFilter = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        return this.filter.click();
    };
    /**
     * @return {?}
     */
    TaskFiltersCloudComponentPage.prototype.checkTaskFilterNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.filter);
        return this.filter;
    };
    return TaskFiltersCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var column = {
    id: 'Id',
    name: 'Name',
    processInstanceId: 'ProcessInstanceId',
    processDefinitionId: 'ProcessDefinitionId',
    assignee: 'Assignee',
    parentTaskId: 'ParentTaskId',
    priority: 'Priority',
    standAlone: 'StandAlone',
    owner: 'Owner'
};
var TaskListCloudComponentPage = /** @class */ (function () {
    function TaskListCloudComponentPage() {
        this.taskList = element(by.css('adf-cloud-task-list'));
        this.noTasksFound = element.all(by.css("div[class='adf-empty-content__title']")).first();
        this.dataTable = new DataTableComponentPage(this.taskList);
    }
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getDataTable = /**
     * @return {?}
     */
    function () {
        return this.dataTable;
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.clickCheckbox = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.clickCheckbox(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkRowIsNotChecked = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkRowIsNotChecked(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkRowIsChecked = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkRowIsChecked(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getRowsWithSameName = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.getRowsWithSameColumnValues(column.name, taskName);
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getRowsWithSameId = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.dataTable.getRowsWithSameColumnValues('Id', taskId);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkRowIsSelected = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkRowIsSelected(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkRowIsNotSelected = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkRowIsNotSelected(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.selectRowWithKeyboard = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.selectRowWithKeyboard(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.selectRow = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.selectRow(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getRow = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.getCellElementByValue(column.name, taskName);
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkContentIsDisplayedById = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.dataTable.checkContentIsDisplayed(column.id, taskId);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkContentIsDisplayedByProcessInstanceId = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkContentIsDisplayed(column.processInstanceId, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkContentIsDisplayedByName = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkContentIsDisplayed(column.name, taskName);
    };
    /**
     * @param {?} taskName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.checkContentIsNotDisplayedByName = /**
     * @param {?} taskName
     * @return {?}
     */
    function (taskName) {
        return this.dataTable.checkContentIsNotDisplayed(column.name, taskName);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TaskListCloudComponentPage.prototype.checkTaskListIsLoaded = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).taskList);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getNoTasksFoundMessage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.noTasksFound);
        return this.noTasksFound.getText();
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsNameColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.name);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByIdColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.id);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByProcessDefIdColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.processDefinitionId);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByProcessInstanceIdColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.processInstanceId);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByAssigneeColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.assignee);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByParentTaskIdColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.parentTaskId);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByPriorityColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.priority);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByStandAloneColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.standAlone);
    };
    /**
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getAllRowsByOwnerColumn = /**
     * @return {?}
     */
    function () {
        return this.dataTable.getAllRowsColumnValues(column.owner);
    };
    /**
     * @param {?} rowName
     * @return {?}
     */
    TaskListCloudComponentPage.prototype.getIdCellValue = /**
     * @param {?} rowName
     * @return {?}
     */
    function (rowName) {
        /** @type {?} */
        var locator = new DataTableComponentPage().getCellByRowContentAndColumn(column.name, rowName, column.id);
        BrowserVisibility.waitUntilElementIsVisible(locator);
        return locator.getText();
    };
    return TaskListCloudComponentPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StartProcessCloudPage = /** @class */ (function () {
    function StartProcessCloudPage() {
        this.defaultProcessName = element(by.css('input[id="processName"]'));
        this.processNameInput = element(by.id('processName'));
        this.selectProcessDropdownArrow = element(by.css('button[id="adf-select-process-dropdown"]'));
        this.cancelProcessButton = element(by.id('cancel_process'));
        this.formStartProcessButton = element(by.css('button[data-automation-id="adf-form-start process"]'));
        this.startProcessButton = element(by.css('button[data-automation-id="btn-start"]'));
        this.noProcess = element(by.id('no-process-message'));
        this.processDefinition = element(by.css('input[id="processDefinitionName"]'));
        this.processDefinitionOptionsPanel = element(by.css('div[class*="processDefinitionOptions"]'));
    }
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.checkNoProcessMessage = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.noProcess);
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.pressDownArrowAndEnter = /**
     * @return {?}
     */
    function () {
        this.processDefinition.sendKeys(protractor.Key.ARROW_DOWN);
        return browser.actions().sendKeys(protractor.Key.ENTER).perform();
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.checkNoProcessDefinitionOptionIsDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.processDefinitionOptionsPanel);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    StartProcessCloudPage.prototype.enterProcessName = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        BrowserVisibility.waitUntilElementIsVisible(this.processNameInput);
        this.clearProcessName();
        this.processNameInput.sendKeys(name);
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.clearProcessName = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.processNameInput);
        this.processNameInput.clear();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    StartProcessCloudPage.prototype.selectFromProcessDropdown = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        (/** @type {?} */ (this)).clickProcessDropdownArrow();
        return (/** @type {?} */ (this)).selectOption(name);
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.clickProcessDropdownArrow = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.selectProcessDropdownArrow);
        BrowserVisibility.waitUntilElementIsClickable(this.selectProcessDropdownArrow);
        this.selectProcessDropdownArrow.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    StartProcessCloudPage.prototype.checkOptionIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var selectProcessDropdown = element(by.cssContainingText('.mat-option-text', name));
        BrowserVisibility.waitUntilElementIsVisible(selectProcessDropdown);
        BrowserVisibility.waitUntilElementIsClickable(selectProcessDropdown);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    StartProcessCloudPage.prototype.selectOption = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var selectProcessDropdown = element(by.cssContainingText('.mat-option-text', name));
        BrowserVisibility.waitUntilElementIsVisible(selectProcessDropdown);
        BrowserVisibility.waitUntilElementIsClickable(selectProcessDropdown);
        selectProcessDropdown.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.clickCancelProcessButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.cancelProcessButton);
        this.cancelProcessButton.click();
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.checkStartProcessButtonIsEnabled = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsClickable(this.startProcessButton);
        expect(this.startProcessButton.isEnabled()).toBe(true);
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.checkStartProcessButtonIsDisabled = /**
     * @return {?}
     */
    function () {
        expect(this.startProcessButton.isEnabled()).toBe(false);
    };
    /**
     * @return {?}
     */
    StartProcessCloudPage.prototype.clickStartProcessButton = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsClickable(this.startProcessButton);
        return this.startProcessButton.click();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @param {?=} elementRef
     * @return {THIS}
     */
    StartProcessCloudPage.prototype.checkValidationErrorIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @param {?=} elementRef
     * @return {THIS}
     */
    function (error, elementRef) {
        if (elementRef === void 0) { elementRef = 'mat-error'; }
        /** @type {?} */
        var errorElement = element(by.cssContainingText(elementRef, error));
        BrowserVisibility.waitUntilElementIsVisible(errorElement);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @return {THIS}
     */
    StartProcessCloudPage.prototype.blur = /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @return {THIS}
     */
    function (locator) {
        locator.click();
        locator.sendKeys(Key.TAB);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} locator
     * @return {?}
     */
    StartProcessCloudPage.prototype.clearField = /**
     * @param {?} locator
     * @return {?}
     */
    function (locator) {
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.getAttribute('value').then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            for (var i = result.length; i >= 0; i--) {
                locator.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    };
    return StartProcessCloudPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskFormCloudComponent = /** @class */ (function () {
    function TaskFormCloudComponent() {
        this.cancelButton = element(by.css("button[id='adf-cloud-cancel-task']"));
        this.completeButton = element(by.css('button[adf-cloud-complete-task]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TaskFormCloudComponent.prototype.checkCompleteButtonIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).completeButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TaskFormCloudComponent.prototype.checkCompleteButtonIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).completeButton);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TaskFormCloudComponent.prototype.clickCompleteButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).completeButton);
        (/** @type {?} */ (this)).completeButton.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    TaskFormCloudComponent.prototype.clickCancelButton = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).cancelButton);
        (/** @type {?} */ (this)).cancelButton.click();
        return (/** @type {?} */ (this));
    };
    return TaskFormCloudComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TestingAlfrescoApiService = /** @class */ (function (_super) {
    __extends(TestingAlfrescoApiService, _super);
    function TestingAlfrescoApiService(appConfig) {
        var _this = _super.call(this, null) || this;
        _this.appConfig = appConfig;
        _this.config = {};
        /** @type {?} */
        var oauth = Object.assign({}, _this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        _this.config = new AlfrescoApiConfig({
            provider: _this.appConfig.get(AppConfigValues.PROVIDERS),
            hostEcm: _this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: _this.appConfig.get(AppConfigValues.BPMHOST),
            authType: _this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: _this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: _this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: _this.appConfig.get(AppConfigValues.DISABLECSRF),
            withCredentials: _this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false),
            oauth2: oauth
        });
        return _this;
    }
    /**
     * @return {?}
     */
    TestingAlfrescoApiService.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(this.config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(this.config);
        }
        return this.alfrescoApi;
    };
    return TestingAlfrescoApiService;
}(AlfrescoApiService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TestingAppConfigService = /** @class */ (function (_super) {
    __extends(TestingAppConfigService, _super);
    function TestingAppConfigService(config) {
        var _this = _super.call(this, null) || this;
        _this.config = {};
        _this.config = config;
        return _this;
    }
    /**
     * @return {?}
     */
    TestingAppConfigService.prototype.getLocationHostname = /**
     * @return {?}
     */
    function () {
        return '';
    };
    /**
     * @param {?=} prefix
     * @return {?}
     */
    TestingAppConfigService.prototype.getLocationPort = /**
     * @param {?=} prefix
     * @return {?}
     */
    function (prefix) {
        if (prefix === void 0) { prefix = ''; }
        return '';
    };
    /**
     * @return {?}
     */
    TestingAppConfigService.prototype.getLocationProtocol = /**
     * @return {?}
     */
    function () {
        return '';
    };
    return TestingAppConfigService;
}(AppConfigService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ProcessDefinitionsService = /** @class */ (function () {
    function ProcessDefinitionsService(api) {
        this.api = api;
    }
    /**
     * @param {?} appName
     * @return {?}
     */
    ProcessDefinitionsService.prototype.getProcessDefinitions = /**
     * @param {?} appName
     * @return {?}
     */
    function (appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, data, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-definitions';
                        method = 'GET';
                        queryParams = {};
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, {})];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1.status === 404) {
                            // tslint:disable-next-line:no-console
                            console.log(appName + " not present");
                        }
                        else if (error_1.status === 403) {
                            // tslint:disable-next-line:no-console
                            console.log("Access to the requested resource has been denied " + appName);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return ProcessDefinitionsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ProcessInstancesService = /** @class */ (function () {
    function ProcessInstancesService(api) {
        this.api = api;
    }
    /**
     * @param {?} processDefKey
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    ProcessInstancesService.prototype.createProcessInstance = /**
     * @param {?} processDefKey
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    function (processDefKey, appName, options) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances';
                        method = 'POST';
                        queryParams = {};
                        postBody = __assign({ 'processDefinitionKey': processDefKey, 'payloadType': 'StartProcessPayload' }, options);
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    ProcessInstancesService.prototype.suspendProcessInstance = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId + '/suspend';
                        method = 'POST';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    ProcessInstancesService.prototype.deleteProcessInstance = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    ProcessInstancesService.prototype.completeProcessInstance = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return __awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId + '/complete';
                        method = 'POST';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ProcessInstancesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AppListCloudPage = /** @class */ (function () {
    function AppListCloudPage() {
        this.apsAppsContainer = element(by.css('adf-cloud-app-list'));
    }
    /**
     * @return {?}
     */
    AppListCloudPage.prototype.checkApsContainer = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.apsAppsContainer);
    };
    /**
     * @param {?} applicationName
     * @return {?}
     */
    AppListCloudPage.prototype.goToApp = /**
     * @param {?} applicationName
     * @return {?}
     */
    function (applicationName) {
        /** @type {?} */
        var app = element(by.css('mat-card[title="' + applicationName + '"]'));
        BrowserVisibility.waitUntilElementIsVisible(app);
        app.click();
    };
    /**
     * @param {?} applicationName
     * @return {?}
     */
    AppListCloudPage.prototype.checkAppIsNotDisplayed = /**
     * @param {?} applicationName
     * @return {?}
     */
    function (applicationName) {
        /** @type {?} */
        var app = element(by.css('mat-card[title="' + applicationName + '"]'));
        return BrowserVisibility.waitUntilElementIsNotOnPage(app);
    };
    /**
     * @param {?} applicationName
     * @return {?}
     */
    AppListCloudPage.prototype.checkAppIsDisplayed = /**
     * @param {?} applicationName
     * @return {?}
     */
    function (applicationName) {
        /** @type {?} */
        var app = element(by.css('mat-card[title="' + applicationName + '"]'));
        return BrowserVisibility.waitUntilElementIsVisible(app);
    };
    return AppListCloudPage;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TestingModule = /** @class */ (function () {
    function TestingModule() {
    }
    TestingModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: []
                },] }
    ];
    return TestingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TestingService = /** @class */ (function () {
    function TestingService() {
    }
    TestingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TestingService.ctorParameters = function () { return []; };
    /** @nocollapse */ TestingService.ngInjectableDef = defineInjectable({ factory: function TestingService_Factory() { return new TestingService(); }, token: TestingService, providedIn: "root" });
    return TestingService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { IdentityService, GroupIdentityService, RolesService, TasksService, QueryService, ApiService, HeaderPage, UserInfoPage, LoginPage, SettingsPage, FormControllersPage, LoginSSOPage, DataTableComponentPage, PaginationPage, ErrorPage, UserModel, BrowserVisibility, StringUtil, byCss, LocalStorageUtil, TabsPage, DocumentListPage, ExampleAction, ContentNodeSelectorDialogPage, FormFieldsPage, StartTasksCloudPage, TaskHeaderCloudPage, ProcessHeaderCloudPage, EditProcessFilterCloudComponentPage, EditTaskFilterCloudComponentPage, GroupCloudComponentPage, PeopleCloudComponentPage, ProcessFiltersCloudComponentPage, ProcessListCloudComponentPage, TaskFiltersCloudComponentPage, TaskListCloudComponentPage, StartProcessCloudPage, TaskFormCloudComponent, EditProcessFilterDialogPage, EditTaskFilterDialogPage, TestingAlfrescoApiService, TestingAppConfigService, ProcessDefinitionsService, ProcessInstancesService, AppListCloudPage, TestingModule, TestingService };

//# sourceMappingURL=adf-testing.js.map