/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EditTaskFilterDialogPage } from './dialog/edit-task-filter-dialog.page';
export declare class EditTaskFilterCloudComponentPage {
    customiseFilter: import("protractor/built/element").ElementFinder;
    selectedOption: import("protractor/built/element").ElementFinder;
    assignee: import("protractor/built/element").ElementFinder;
    priority: import("protractor/built/element").ElementFinder;
    taskName: import("protractor/built/element").ElementFinder;
    id: import("protractor/built/element").ElementFinder;
    processDefinitionId: import("protractor/built/element").ElementFinder;
    processInstanceId: import("protractor/built/element").ElementFinder;
    lastModifiedFrom: import("protractor/built/element").ElementFinder;
    lastModifiedTo: import("protractor/built/element").ElementFinder;
    parentTaskId: import("protractor/built/element").ElementFinder;
    owner: import("protractor/built/element").ElementFinder;
    saveButton: import("protractor/built/element").ElementFinder;
    saveAsButton: import("protractor/built/element").ElementFinder;
    deleteButton: import("protractor/built/element").ElementFinder;
    editTaskFilterDialogPage: EditTaskFilterDialogPage;
    editTaskFilterDialog(): EditTaskFilterDialogPage;
    clickCustomiseFilterHeader(): this;
    setStatusFilterDropDown(option: any): this;
    getStatusFilterDropDownValue(): import("selenium-webdriver").promise.Promise<string>;
    setSortFilterDropDown(option: any): this;
    getSortFilterDropDownValue(): import("selenium-webdriver").promise.Promise<string>;
    setOrderFilterDropDown(option: any): this;
    getOrderFilterDropDownValue(): import("selenium-webdriver").promise.Promise<string>;
    clickOnDropDownArrow(option: any): void;
    setAssignee(option: any): this;
    getAssignee(): import("selenium-webdriver").promise.Promise<string>;
    setPriority(option: any): this;
    getPriority(): import("selenium-webdriver").promise.Promise<string>;
    setParentTaskId(option: any): this;
    getParentTaskId(): import("selenium-webdriver").promise.Promise<string>;
    setOwner(option: any): this;
    getOwner(): import("selenium-webdriver").promise.Promise<string>;
    setLastModifiedFrom(option: any): this;
    getLastModifiedFrom(): import("selenium-webdriver").promise.Promise<string>;
    setLastModifiedTo(option: any): this;
    getLastModifiedTo(): import("selenium-webdriver").promise.Promise<string>;
    checkSaveButtonIsDisplayed(): this;
    checkSaveAsButtonIsDisplayed(): this;
    checkDeleteButtonIsDisplayed(): this;
    checkSaveButtonIsEnabled(): import("selenium-webdriver").promise.Promise<boolean>;
    checkSaveAsButtonIsEnabled(): import("selenium-webdriver").promise.Promise<boolean>;
    checkDeleteButtonIsEnabled(): import("selenium-webdriver").promise.Promise<boolean>;
    clickSaveAsButton(): EditTaskFilterDialogPage;
    clickDeleteButton(): this;
    clickSaveButton(): this;
    clearAssignee(): this;
    clearField(locator: any): void;
    setAppNameDropDown(option: any): this;
    getAppNameDropDownValue(): import("selenium-webdriver").promise.Promise<string>;
    setId(option: any): this;
    getId(): import("selenium-webdriver").promise.Promise<string>;
    setTaskName(option: any): this;
    getTaskName(): import("selenium-webdriver").promise.Promise<string>;
    setProcessDefinitionId(option: any): this;
    getProcessDefinitionId(): import("selenium-webdriver").promise.Promise<string>;
    setProcessInstanceId(option: any): this;
    setProperty(property: any, option: any): this;
    getProcessInstanceId(): import("selenium-webdriver").promise.Promise<string>;
}
