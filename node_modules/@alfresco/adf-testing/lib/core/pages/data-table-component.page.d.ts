/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ElementFinder, ElementArrayFinder } from 'protractor/built/element';
export declare class DataTableComponentPage {
    rootElement: ElementFinder;
    list: ElementArrayFinder;
    contents: any;
    tableBody: any;
    spinner: any;
    rows: import("selenium-webdriver").By;
    allColumns: any;
    selectedRowNumber: any;
    allSelectedRows: any;
    selectAll: any;
    copyColumnTooltip: any;
    constructor(rootElement?: ElementFinder);
    checkAllRowsButtonIsDisplayed(): this;
    checkAllRows(): this;
    uncheckAllRows(): this;
    clickCheckbox(columnName: any, columnValue: any): void;
    checkRowIsNotChecked(columnName: any, columnValue: any): void;
    checkRowIsChecked(columnName: any, columnValue: any): void;
    getRowCheckbox(columnName: any, columnValue: any): ElementFinder;
    checkNoRowIsSelected(): void;
    getNumberOfSelectedRows(): any;
    selectRowWithKeyboard(columnName: any, columnValue: any): void;
    selectRow(columnName: any, columnValue: any): this;
    checkRowIsSelected(columnName: any, columnValue: any): this;
    checkRowIsNotSelected(columnName: any, columnValue: any): this;
    getColumnValueForRow(identifyingColumn: any, identifyingValue: any, columnName: any): import("selenium-webdriver").promise.Promise<string>;
    /**
     * Check the list is sorted.
     *
     * @param sortOrder: 'true' if the list is expected to be sorted ascendant and 'false' for descendant
     * @param locator: locator for column
     * @return 'true' if the list is sorted as expected and 'false' if it isn't
     */
    checkListIsSorted(sortOrder: any, locator: any): import("selenium-webdriver").promise.Promise<{}>;
    rightClickOnRow(columnName: any, columnValue: any): void;
    getTooltip(columnName: any, columnValue: any): import("selenium-webdriver").promise.Promise<string>;
    getFileHyperlink(filename: any): ElementFinder;
    numberOfRows(): import("selenium-webdriver").promise.Promise<number>;
    getAllRowsColumnValues(column: any): Promise<any>;
    getRowsWithSameColumnValues(columnName: any, columnValue: any): Promise<string>;
    doubleClickRow(columnName: any, columnValue: any): this;
    waitForTableBody(): void;
    getFirstElementDetail(detail: any): import("selenium-webdriver").promise.Promise<string>;
    geCellElementDetail(detail: any): ElementArrayFinder;
    sortByColumn(sortOrder: any, column: any): import("selenium-webdriver").promise.Promise<void>;
    checkContentIsDisplayed(columnName: any, columnValue: any): this;
    checkContentIsNotDisplayed(columnName: any, columnValue: any): this;
    getRow(columnName: any, columnValue: any): ElementFinder;
    contentInPosition(position: any): any;
    getCellElementByValue(columnName: any, columnValue: any): ElementFinder;
    checkSpinnerIsDisplayed(): this;
    checkSpinnerIsNotDisplayed(): this;
    tableIsLoaded(): this;
    checkColumnIsDisplayed(column: any): this;
    getNumberOfColumns(): any;
    getNumberOfRows(): import("selenium-webdriver").promise.Promise<number>;
    getCellByRowNumberAndColumnName(rowNumber: any, columnName: any): ElementFinder;
    getCellByRowContentAndColumn(rowColumn: any, rowContent: any, columnName: any): ElementFinder;
    selectRowByContent(content: any): import("selenium-webdriver").promise.Promise<void>;
    checkRowByContentIsSelected(folderName: any): this;
    getCellByContent(content: any): ElementFinder;
    clickRowByContent(name: any): void;
    getCopyContentTooltip(): any;
    copyContentTooltipIsNotDisplayed(): this;
    mouseOverColumn(columnName: any, columnValue: any): this;
    mouseOverElement(elem: any): this;
    clickColumn(columnName: any, columnValue: any): this;
    clickElement(elem: any): this;
}
