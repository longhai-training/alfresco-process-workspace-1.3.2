/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var QueryService = /** @class */ (function () {
    function QueryService(api) {
        this.api = api;
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    QueryService.prototype.getProcessInstanceTasks = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/process-instances/' + processInstanceId + '/tasks';
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    QueryService.prototype.getProcessInstanceSubProcesses = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/process-instances/' + processInstanceId + '/subprocesses';
                        method = 'GET';
                        queryParams = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, {})];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return QueryService;
}());
export { QueryService };
if (false) {
    /** @type {?} */
    QueryService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2FjdGlvbnMvaWRlbnRpdHkvcXVlcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7SUFJSSxzQkFBWSxHQUFlO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7Ozs7OztJQUVLLDhDQUF1Qjs7Ozs7SUFBN0IsVUFBOEIsaUJBQWlCLEVBQUUsT0FBTzs7Ozs7O3dCQUM5QyxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRyw4QkFBOEIsR0FBRyxpQkFBaUIsR0FBRyxRQUFRO3dCQUNwRixNQUFNLEdBQUcsS0FBSzt3QkFFZCxXQUFXLEdBQUcsRUFBRTt3QkFBRSxRQUFRLEdBQUcsRUFBRTt3QkFFeEIscUJBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsRUFBQTs7d0JBQTlFLElBQUksR0FBRyxTQUF1RTt3QkFDcEYsc0JBQU8sSUFBSSxFQUFDOzs7O0tBQ2Y7Ozs7OztJQUVLLHFEQUE4Qjs7Ozs7SUFBcEMsVUFBcUMsaUJBQWlCLEVBQUUsT0FBTzs7Ozs7O3dCQUNyRCxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRyw4QkFBOEIsR0FBRyxpQkFBaUIsR0FBRyxlQUFlO3dCQUMzRixNQUFNLEdBQUcsS0FBSzt3QkFFZCxXQUFXLEdBQUcsRUFBRTt3QkFFVCxxQkFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxFQUFBOzt3QkFBeEUsSUFBSSxHQUFHLFNBQWlFO3dCQUM5RSxzQkFBTyxJQUFJLEVBQUM7Ozs7S0FDZjtJQUVMLG1CQUFDO0FBQUQsQ0FBQyxBQTVCRCxJQTRCQzs7OztJQTFCRywyQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgUXVlcnlTZXJ2aWNlIHtcblxuICAgIGFwaTogQXBpU2VydmljZTtcblxuICAgIGNvbnN0cnVjdG9yKGFwaTogQXBpU2VydmljZSkge1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQcm9jZXNzSW5zdGFuY2VUYXNrcyhwcm9jZXNzSW5zdGFuY2VJZCwgYXBwTmFtZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gJy8nICsgYXBwTmFtZSArICcvcXVlcnkvdjEvcHJvY2Vzcy1pbnN0YW5jZXMvJyArIHByb2Nlc3NJbnN0YW5jZUlkICsgJy90YXNrcyc7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge30sIHBvc3RCb2R5ID0ge307XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuYXBpLnBlcmZvcm1CcG1PcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywgcG9zdEJvZHkpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQcm9jZXNzSW5zdGFuY2VTdWJQcm9jZXNzZXMocHJvY2Vzc0luc3RhbmNlSWQsIGFwcE5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvJyArIGFwcE5hbWUgKyAnL3F1ZXJ5L3YxL3Byb2Nlc3MtaW5zdGFuY2VzLycgKyBwcm9jZXNzSW5zdGFuY2VJZCArICcvc3VicHJvY2Vzc2VzJztcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0dFVCc7XG5cbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7fTtcblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkucGVyZm9ybUJwbU9wZXJhdGlvbihwYXRoLCBtZXRob2QsIHF1ZXJ5UGFyYW1zLCB7fSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxufVxuIl19