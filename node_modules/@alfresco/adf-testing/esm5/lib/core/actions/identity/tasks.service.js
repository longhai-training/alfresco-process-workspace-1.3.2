/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var TasksService = /** @class */ (function () {
    function TasksService(api) {
        this.api = api;
    }
    /**
     * @param {?} taskName
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    TasksService.prototype.createStandaloneTask = /**
     * @param {?} taskName
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    function (taskName, appName, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks';
                        method = 'POST';
                        queryParams = {};
                        postBody = tslib_1.__assign({ 'name': taskName, 'payloadType': 'CreateTaskPayload' }, options);
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.completeTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks/' + taskId + '/complete';
                        method = 'POST';
                        queryParams = {};
                        postBody = { 'payloadType': 'CompleteTaskPayload' };
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.claimTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks/' + taskId + '/claim';
                        method = 'POST';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.deleteTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks/' + taskId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.createAndCompleteTask = /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    function (taskName, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var task;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createStandaloneTask(taskName, appName)];
                    case 1:
                        task = _a.sent();
                        return [4 /*yield*/, this.claimTask(task.entry.id, appName)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.completeTask(task.entry.id, appName)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, task];
                }
            });
        });
    };
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.getTask = /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    function (taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/tasks/' + taskId;
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    TasksService.prototype.getTaskId = /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    function (taskName, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/query/v1/tasks';
                        method = 'GET';
                        queryParams = { name: taskName };
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.list.entries[0].entry.id];
                }
            });
        });
    };
    /**
     * @param {?} parentTaskId
     * @param {?} appName
     * @param {?} name
     * @return {?}
     */
    TasksService.prototype.createStandaloneSubtask = /**
     * @param {?} parentTaskId
     * @param {?} appName
     * @param {?} name
     * @return {?}
     */
    function (parentTaskId, appName, name) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/tasks';
                        method = 'POST';
                        queryParams = {};
                        postBody = { 'name': name, 'parentTaskId': parentTaskId, 'payloadType': 'CreateTaskPayload' };
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return TasksService;
}());
export { TasksService };
if (false) {
    /** @type {?} */
    TasksService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,