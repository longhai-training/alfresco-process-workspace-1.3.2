/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var RolesService = /** @class */ (function () {
    function RolesService(api) {
        this.api = api;
    }
    /**
     * @param {?} roleName
     * @return {?}
     */
    RolesService.prototype.getRoleIdByRoleName = /**
     * @param {?} roleName
     * @return {?}
     */
    function (roleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, roleId, queryParams, postBody, data, key;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/roles";
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        for (key in data) {
                            if (data[key].name === roleName) {
                                roleId = data[key].id;
                            }
                        }
                        return [2 /*return*/, roleId];
                }
            });
        });
    };
    /**
     * @param {?} groupId
     * @param {?} clientId
     * @param {?} clientRoleName
     * @return {?}
     */
    RolesService.prototype.getClientRoleIdByRoleName = /**
     * @param {?} groupId
     * @param {?} clientId
     * @param {?} clientRoleName
     * @return {?}
     */
    function (groupId, clientId, clientRoleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, clientRoleId, queryParams, postBody, data, key;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = "/groups/" + groupId + "/role-mappings/clients/" + clientId + "/available";
                        method = 'GET';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performIdentityOperation(path, method, queryParams, postBody)];
                    case 1:
                        data = _a.sent();
                        for (key in data) {
                            if (data[key].name === clientRoleName) {
                                clientRoleId = data[key].id;
                            }
                        }
                        return [2 /*return*/, clientRoleId];
                }
            });
        });
    };
    return RolesService;
}());
export { RolesService };
if (false) {
    /** @type {?} */
    RolesService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2FjdGlvbnMvaWRlbnRpdHkvcm9sZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7SUFJSSxzQkFBWSxHQUFlO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBRUssMENBQW1COzs7O0lBQXpCLFVBQTBCLFFBQVE7Ozs7Ozt3QkFDeEIsSUFBSSxHQUFHLFFBQVE7d0JBQ2YsTUFBTSxHQUFHLEtBQUs7d0JBRWQsV0FBVyxHQUFHLEVBQUU7d0JBQUUsUUFBUSxHQUFHLEVBQUU7d0JBRXhCLHFCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQUE7O3dCQUFuRixJQUFJLEdBQUcsU0FBNEU7d0JBQ3pGLEtBQVcsR0FBRyxJQUFJLElBQUksRUFBRTs0QkFDcEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQ0FDN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7NkJBQ3pCO3lCQUNKO3dCQUNELHNCQUFPLE1BQU0sRUFBQzs7OztLQUNqQjs7Ozs7OztJQUVLLGdEQUF5Qjs7Ozs7O0lBQS9CLFVBQWdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYzs7Ozs7O3dCQUN2RCxJQUFJLEdBQUcsYUFBVyxPQUFPLCtCQUEwQixRQUFRLGVBQVk7d0JBQ3ZFLE1BQU0sR0FBRyxLQUFLO3dCQUVkLFdBQVcsR0FBRyxFQUFFO3dCQUFFLFFBQVEsR0FBRyxFQUFFO3dCQUV4QixxQkFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUFBOzt3QkFBbkYsSUFBSSxHQUFHLFNBQTRFO3dCQUN6RixLQUFXLEdBQUcsSUFBSSxJQUFJLEVBQUU7NEJBQ3BCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxjQUFjLEVBQUU7Z0NBQ25DLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDOzZCQUMvQjt5QkFDSjt3QkFDRCxzQkFBTyxZQUFZLEVBQUM7Ozs7S0FDdkI7SUFFTCxtQkFBQztBQUFELENBQUMsQUF0Q0QsSUFzQ0M7Ozs7SUFwQ0csMkJBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFJvbGVzU2VydmljZSB7XG5cbiAgICBhcGk6IEFwaVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGk6IEFwaVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Um9sZUlkQnlSb2xlTmFtZShyb2xlTmFtZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gYC9yb2xlc2A7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICBsZXQgcm9sZUlkO1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHt9O1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtSWRlbnRpdHlPcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywgcG9zdEJvZHkpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtrZXldLm5hbWUgPT09IHJvbGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcm9sZUlkID0gZGF0YVtrZXldLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb2xlSWQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2xpZW50Um9sZUlkQnlSb2xlTmFtZShncm91cElkLCBjbGllbnRJZCwgY2xpZW50Um9sZU5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvZ3JvdXBzLyR7Z3JvdXBJZH0vcm9sZS1tYXBwaW5ncy9jbGllbnRzLyR7Y2xpZW50SWR9L2F2YWlsYWJsZWA7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuICAgICAgICBsZXQgY2xpZW50Um9sZUlkO1xuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHt9O1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtSWRlbnRpdHlPcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywgcG9zdEJvZHkpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtrZXldLm5hbWUgPT09IGNsaWVudFJvbGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50Um9sZUlkID0gZGF0YVtrZXldLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGllbnRSb2xlSWQ7XG4gICAgfVxuXG59XG4iXX0=