/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /**
     * @param {?=} length
     * @return {?}
     */
    StringUtil.generatePasswordString = /**
     * @param {?=} length
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 8; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possibleUpperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        /** @type {?} */
        var possibleLowerCase = 'abcdefghijklmnopqrstuvwxyz';
        /** @type {?} */
        var lowerCaseLimit = Math.floor(length / 2);
        for (var i = 0; i < lowerCaseLimit; i++) {
            text += possibleLowerCase.charAt(Math.floor(Math.random() * possibleLowerCase.length));
        }
        for (var i = 0; i < length - lowerCaseLimit; i++) {
            text += possibleUpperCase.charAt(Math.floor(Math.random() * possibleUpperCase.length));
        }
        return text;
    };
    /**
     * Generates a random string.
     *
     * @param length If this parameter is not provided the length is set to 8 by default.
     * @method generateRandomString
     */
    /**
     * Generates a random string.
     *
     * \@method generateRandomString
     * @param {?=} length If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    StringUtil.generateRandomString = /**
     * Generates a random string.
     *
     * \@method generateRandomString
     * @param {?=} length If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 8; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    /**
     * Generates a random email address following the format: abcdef@activiti.test.com
     *
     * @param domain
     * @param length
     * @method generateRandomEmail
     */
    /**
     * Generates a random email address following the format: abcdef\@activiti.test.com
     *
     * \@method generateRandomEmail
     * @param {?} domain
     * @param {?=} length
     * @return {?}
     */
    StringUtil.generateRandomEmail = /**
     * Generates a random email address following the format: abcdef\@activiti.test.com
     *
     * \@method generateRandomEmail
     * @param {?} domain
     * @param {?=} length
     * @return {?}
     */
    function (domain, length) {
        if (length === void 0) { length = 5; }
        /** @type {?} */
        var email = '';
        /** @type {?} */
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < length; i++) {
            email += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        email += domain;
        return email.toLowerCase();
    };
    /**
     * Generates a random string - digits only.
     *
     * @param length {int} If this parameter is not provided the length is set to 8 by default.
     * @method generateRandomString
     */
    /**
     * Generates a random string - digits only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    StringUtil.generateRandomStringDigits = /**
     * Generates a random string - digits only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 8 by default.
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 8; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = '0123456789';
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    /**
     * Generates a random string - non-latin characters only.
     *
     * @param length {int} If this parameter is not provided the length is set to 3 by default.
     * @method generateRandomString
     */
    /**
     * Generates a random string - non-latin characters only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 3 by default.
     * @return {?}
     */
    StringUtil.generateRandomStringNonLatin = /**
     * Generates a random string - non-latin characters only.
     *
     * \@method generateRandomString
     * @param {?=} length {int} If this parameter is not provided the length is set to 3 by default.
     * @return {?}
     */
    function (length) {
        if (length === void 0) { length = 3; }
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = '密码你好𠮷';
        for (var i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    return StringUtil;
}());
export { StringUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLnV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXRlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvY29yZS91dGlscy9zdHJpbmcudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQTtJQUFBO0lBd0ZBLENBQUM7Ozs7O0lBdEZVLGlDQUFzQjs7OztJQUE3QixVQUE4QixNQUFrQjtRQUFsQix1QkFBQSxFQUFBLFVBQWtCOztZQUN4QyxJQUFJLEdBQUcsRUFBRTs7WUFDUCxpQkFBaUIsR0FBRyw0QkFBNEI7O1lBQ2hELGlCQUFpQixHQUFHLDRCQUE0Qjs7WUFDaEQsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUU3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMxRjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlDLElBQUksSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMxRjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSSwrQkFBb0I7Ozs7Ozs7SUFBM0IsVUFBNEIsTUFBa0I7UUFBbEIsdUJBQUEsRUFBQSxVQUFrQjs7WUFDdEMsSUFBSSxHQUFHLEVBQUU7O1lBQ1AsUUFBUSxHQUFHLGdFQUFnRTtRQUVqRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLElBQUksSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7T0FNRzs7Ozs7Ozs7O0lBQ0ksOEJBQW1COzs7Ozs7OztJQUExQixVQUEyQixNQUFjLEVBQUUsTUFBa0I7UUFBbEIsdUJBQUEsRUFBQSxVQUFrQjs7WUFDckQsS0FBSyxHQUFHLEVBQUU7O1lBQ1IsUUFBUSxHQUFHLGdFQUFnRTtRQUVqRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLEtBQUssSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsS0FBSyxJQUFJLE1BQU0sQ0FBQztRQUNoQixPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0kscUNBQTBCOzs7Ozs7O0lBQWpDLFVBQWtDLE1BQWtCO1FBQWxCLHVCQUFBLEVBQUEsVUFBa0I7O1lBQzVDLElBQUksR0FBRyxFQUFFOztZQUNQLFFBQVEsR0FBRyxZQUFZO1FBRTdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsSUFBSSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDeEU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0ksdUNBQTRCOzs7Ozs7O0lBQW5DLFVBQW9DLE1BQWtCO1FBQWxCLHVCQUFBLEVBQUEsVUFBa0I7O1lBQzlDLElBQUksR0FBRyxFQUFFOztZQUNQLFFBQVEsR0FBRyxRQUFRO1FBRXpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0IsSUFBSSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDeEU7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQUFDLEFBeEZELElBd0ZDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNsYXNzIFN0cmluZ1V0aWwge1xuXG4gICAgc3RhdGljIGdlbmVyYXRlUGFzc3dvcmRTdHJpbmcobGVuZ3RoOiBudW1iZXIgPSA4KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRleHQgPSAnJztcbiAgICAgICAgY29uc3QgcG9zc2libGVVcHBlckNhc2UgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICAgICAgICBjb25zdCBwb3NzaWJsZUxvd2VyQ2FzZSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eic7XG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUxpbWl0ID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvd2VyQ2FzZUxpbWl0OyBpKyspIHtcbiAgICAgICAgICAgIHRleHQgKz0gcG9zc2libGVMb3dlckNhc2UuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlTG93ZXJDYXNlLmxlbmd0aCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGggLSBsb3dlckNhc2VMaW1pdDsgaSsrKSB7XG4gICAgICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlVXBwZXJDYXNlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZVVwcGVyQ2FzZS5sZW5ndGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHJhbmRvbSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIElmIHRoaXMgcGFyYW1ldGVyIGlzIG5vdCBwcm92aWRlZCB0aGUgbGVuZ3RoIGlzIHNldCB0byA4IGJ5IGRlZmF1bHQuXG4gICAgICogQG1ldGhvZCBnZW5lcmF0ZVJhbmRvbVN0cmluZ1xuICAgICAqL1xuICAgIHN0YXRpYyBnZW5lcmF0ZVJhbmRvbVN0cmluZyhsZW5ndGg6IG51bWJlciA9IDgpOiBzdHJpbmcge1xuICAgICAgICBsZXQgdGV4dCA9ICcnO1xuICAgICAgICBjb25zdCBwb3NzaWJsZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSByYW5kb20gZW1haWwgYWRkcmVzcyBmb2xsb3dpbmcgdGhlIGZvcm1hdDogYWJjZGVmQGFjdGl2aXRpLnRlc3QuY29tXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9tYWluXG4gICAgICogQHBhcmFtIGxlbmd0aFxuICAgICAqIEBtZXRob2QgZ2VuZXJhdGVSYW5kb21FbWFpbFxuICAgICAqL1xuICAgIHN0YXRpYyBnZW5lcmF0ZVJhbmRvbUVtYWlsKGRvbWFpbjogc3RyaW5nLCBsZW5ndGg6IG51bWJlciA9IDUpOiBzdHJpbmcge1xuICAgICAgICBsZXQgZW1haWwgPSAnJztcbiAgICAgICAgY29uc3QgcG9zc2libGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGVtYWlsICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtYWlsICs9IGRvbWFpbjtcbiAgICAgICAgcmV0dXJuIGVtYWlsLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgcmFuZG9tIHN0cmluZyAtIGRpZ2l0cyBvbmx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGxlbmd0aCB7aW50fSBJZiB0aGlzIHBhcmFtZXRlciBpcyBub3QgcHJvdmlkZWQgdGhlIGxlbmd0aCBpcyBzZXQgdG8gOCBieSBkZWZhdWx0LlxuICAgICAqIEBtZXRob2QgZ2VuZXJhdGVSYW5kb21TdHJpbmdcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2VuZXJhdGVSYW5kb21TdHJpbmdEaWdpdHMobGVuZ3RoOiBudW1iZXIgPSA4KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRleHQgPSAnJztcbiAgICAgICAgY29uc3QgcG9zc2libGUgPSAnMDEyMzQ1Njc4OSc7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSByYW5kb20gc3RyaW5nIC0gbm9uLWxhdGluIGNoYXJhY3RlcnMgb25seS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsZW5ndGgge2ludH0gSWYgdGhpcyBwYXJhbWV0ZXIgaXMgbm90IHByb3ZpZGVkIHRoZSBsZW5ndGggaXMgc2V0IHRvIDMgYnkgZGVmYXVsdC5cbiAgICAgKiBAbWV0aG9kIGdlbmVyYXRlUmFuZG9tU3RyaW5nXG4gICAgICovXG4gICAgc3RhdGljIGdlbmVyYXRlUmFuZG9tU3RyaW5nTm9uTGF0aW4obGVuZ3RoOiBudW1iZXIgPSAzKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IHRleHQgPSAnJztcbiAgICAgICAgY29uc3QgcG9zc2libGUgPSAn5a+G56CB5L2g5aW98KCutyc7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG59XG4iXX0=