/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by } from 'protractor';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
var ProcessFiltersCloudComponentPage = /** @class */ (function () {
    function ProcessFiltersCloudComponentPage(filter) {
        this.filterIcon = by.xpath("ancestor::div[@class='mat-list-item-content']/mat-icon");
        this.filter = filter;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    ProcessFiltersCloudComponentPage.prototype.checkProcessFilterIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filter);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.getProcessFilterIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        /** @type {?} */
        var icon = this.filter.element(this.filterIcon);
        BrowserVisibility.waitUntilElementIsVisible(icon);
        return icon.getText();
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.checkProcessFilterHasNoIcon = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        BrowserVisibility.waitUntilElementIsNotOnPage(this.filter.element(this.filterIcon));
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.clickProcessFilter = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        BrowserVisibility.waitUntilElementIsClickable(this.filter);
        return this.filter.click();
    };
    /**
     * @return {?}
     */
    ProcessFiltersCloudComponentPage.prototype.checkProcessFilterNotDisplayed = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsNotVisible(this.filter);
        return this.filter;
    };
    return ProcessFiltersCloudComponentPage;
}());
export { ProcessFiltersCloudComponentPage };
if (false) {
    /** @type {?} */
    ProcessFiltersCloudComponentPage.prototype.filter;
    /** @type {?} */
    ProcessFiltersCloudComponentPage.prototype.filterIcon;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1maWx0ZXJzLWNsb3VkLWNvbXBvbmVudC5wYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi10ZXN0aW5nLyIsInNvdXJjZXMiOlsibGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvcGFnZXMvcHJvY2Vzcy1maWx0ZXJzLWNsb3VkLWNvbXBvbmVudC5wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDaEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFeEU7SUFLSSwwQ0FBWSxNQUFNO1FBRmxCLGVBQVUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7UUFHNUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQzs7Ozs7O0lBRUQsd0VBQTZCOzs7OztJQUE3QjtRQUNJLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDaEIsQ0FBQzs7OztJQUVELCtEQUFvQjs7O0lBQXBCO1FBQ0ksaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztZQUNuRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNqRCxpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsc0VBQTJCOzs7SUFBM0I7UUFDSSxpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekQsaUJBQWlCLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7OztJQUVELDZEQUFrQjs7O0lBQWxCO1FBQ0ksaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELGlCQUFpQixDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELHlFQUE4Qjs7O0lBQTlCO1FBQ0ksaUJBQWlCLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUwsdUNBQUM7QUFBRCxDQUFDLEFBckNELElBcUNDOzs7O0lBbkNHLGtEQUFPOztJQUNQLHNEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGJ5IH0gZnJvbSAncHJvdHJhY3Rvcic7XG5pbXBvcnQgeyBCcm93c2VyVmlzaWJpbGl0eSB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMvYnJvd3Nlci12aXNpYmlsaXR5JztcblxuZXhwb3J0IGNsYXNzIFByb2Nlc3NGaWx0ZXJzQ2xvdWRDb21wb25lbnRQYWdlIHtcblxuICAgIGZpbHRlcjtcbiAgICBmaWx0ZXJJY29uID0gYnkueHBhdGgoXCJhbmNlc3Rvcjo6ZGl2W0BjbGFzcz0nbWF0LWxpc3QtaXRlbS1jb250ZW50J10vbWF0LWljb25cIik7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXIpIHtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgY2hlY2tQcm9jZXNzRmlsdGVySXNEaXNwbGF5ZWQoKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRQcm9jZXNzRmlsdGVySWNvbigpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmZpbHRlcik7XG4gICAgICAgIGNvbnN0IGljb24gPSB0aGlzLmZpbHRlci5lbGVtZW50KHRoaXMuZmlsdGVySWNvbik7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUoaWNvbik7XG4gICAgICAgIHJldHVybiBpY29uLmdldFRleHQoKTtcbiAgICB9XG5cbiAgICBjaGVja1Byb2Nlc3NGaWx0ZXJIYXNOb0ljb24oKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNOb3RPblBhZ2UodGhpcy5maWx0ZXIuZWxlbWVudCh0aGlzLmZpbHRlckljb24pKTtcbiAgICB9XG5cbiAgICBjbGlja1Byb2Nlc3NGaWx0ZXIoKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNDbGlja2FibGUodGhpcy5maWx0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIuY2xpY2soKTtcbiAgICB9XG5cbiAgICBjaGVja1Byb2Nlc3NGaWx0ZXJOb3REaXNwbGF5ZWQoKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc05vdFZpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXI7XG4gICAgfVxuXG59XG4iXX0=