/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { browser, by, element, protractor } from 'protractor';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
var GroupCloudComponentPage = /** @class */ (function () {
    function GroupCloudComponentPage() {
        this.groupCloudSearch = element(by.css('input[data-automation-id="adf-cloud-group-search-input"]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.searchGroups = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        var _this = this;
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).groupCloudSearch);
        browser.sleep(1000);
        (/** @type {?} */ (this)).groupCloudSearch.clear().then((/**
         * @return {?}
         */
        function () {
            for (var i = 0; i < name.length; i++) {
                (/** @type {?} */ (_this)).groupCloudSearch.sendKeys(name[i]);
            }
            (/** @type {?} */ (_this)).groupCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
            (/** @type {?} */ (_this)).groupCloudSearch.sendKeys(name[name.length - 1]);
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.searchGroupsToExisting = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).groupCloudSearch);
        for (var i = 0; i < name.length; i++) {
            (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[i]);
        }
        (/** @type {?} */ (this)).groupCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
        (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[name.length - 1]);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    GroupCloudComponentPage.prototype.getGroupsFieldContent = /**
     * @return {?}
     */
    function () {
        BrowserVisibility.waitUntilElementIsVisible(this.groupCloudSearch);
        return this.groupCloudSearch.getAttribute('value');
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.selectGroupFromList = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsVisible(groupRow);
        browser.sleep(1000);
        groupRow.click();
        BrowserVisibility.waitUntilElementIsNotVisible(groupRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.checkGroupIsDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsVisible(groupRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.checkGroupIsNotDisplayed = /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    function (name) {
        /** @type {?} */
        var groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsNotVisible(groupRow);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} group
     * @return {THIS}
     */
    GroupCloudComponentPage.prototype.checkSelectedGroup = /**
     * @template THIS
     * @this {THIS}
     * @param {?} group
     * @return {THIS}
     */
    function (group) {
        BrowserVisibility.waitUntilElementIsVisible(element(by.cssContainingText('mat-chip[data-automation-id*="adf-cloud-group-chip-"]', group)));
        return (/** @type {?} */ (this));
    };
    return GroupCloudComponentPage;
}());
export { GroupCloudComponentPage };
if (false) {
    /** @type {?} */
    GroupCloudComponentPage.prototype.groupCloudSearch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtY2xvdWQtY29tcG9uZW50LnBhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXRlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9wYWdlcy9ncm91cC1jbG91ZC1jb21wb25lbnQucGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXhFO0lBQUE7UUFFSSxxQkFBZ0IsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQywwREFBMEQsQ0FBQyxDQUFDLENBQUM7SUF5RG5HLENBQUM7Ozs7Ozs7SUF2REcsOENBQVk7Ozs7OztJQUFaLFVBQWEsSUFBSTtRQUFqQixpQkFXQztRQVZHLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbkUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJOzs7UUFBQztZQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbEMsbUJBQUEsS0FBSSxFQUFBLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsbUJBQUEsS0FBSSxFQUFBLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFD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QztBQUFELENBQUMsQUEzREQsSUEyREM7Ozs7SUF6REcsbURBQStGIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgYnJvd3NlciwgYnksIGVsZW1lbnQsIHByb3RyYWN0b3IgfSBmcm9tICdwcm90cmFjdG9yJztcbmltcG9ydCB7IEJyb3dzZXJWaXNpYmlsaXR5IH0gZnJvbSAnLi4vLi4vY29yZS91dGlscy9icm93c2VyLXZpc2liaWxpdHknO1xuXG5leHBvcnQgY2xhc3MgR3JvdXBDbG91ZENvbXBvbmVudFBhZ2Uge1xuXG4gICAgZ3JvdXBDbG91ZFNlYXJjaCA9IGVsZW1lbnQoYnkuY3NzKCdpbnB1dFtkYXRhLWF1dG9tYXRpb24taWQ9XCJhZGYtY2xvdWQtZ3JvdXAtc2VhcmNoLWlucHV0XCJdJykpO1xuXG4gICAgc2VhcmNoR3JvdXBzKG5hbWUpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmdyb3VwQ2xvdWRTZWFyY2gpO1xuICAgICAgICBicm93c2VyLnNsZWVwKDEwMDApO1xuICAgICAgICB0aGlzLmdyb3VwQ2xvdWRTZWFyY2guY2xlYXIoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5zZW5kS2V5cyhuYW1lW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5CQUNLX1NQQUNFKTtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5zZW5kS2V5cyhuYW1lW25hbWUubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2VhcmNoR3JvdXBzVG9FeGlzdGluZyhuYW1lKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5ncm91cENsb3VkU2VhcmNoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwQ2xvdWRTZWFyY2guc2VuZEtleXMobmFtZVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncm91cENsb3VkU2VhcmNoLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpO1xuICAgICAgICB0aGlzLmdyb3VwQ2xvdWRTZWFyY2guc2VuZEtleXMobmFtZVtuYW1lLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0R3JvdXBzRmllbGRDb250ZW50KCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuZ3JvdXBDbG91ZFNlYXJjaCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3VwQ2xvdWRTZWFyY2guZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuXG4gICAgfVxuXG4gICAgc2VsZWN0R3JvdXBGcm9tTGlzdChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwUm93ID0gZWxlbWVudC5hbGwoYnkuY3NzQ29udGFpbmluZ1RleHQoJ21hdC1vcHRpb24gc3BhbicsIG5hbWUpKS5maXJzdCgpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKGdyb3VwUm93KTtcbiAgICAgICAgYnJvd3Nlci5zbGVlcCgxMDAwKTtcbiAgICAgICAgZ3JvdXBSb3cuY2xpY2soKTtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzTm90VmlzaWJsZShncm91cFJvdyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNoZWNrR3JvdXBJc0Rpc3BsYXllZChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwUm93ID0gZWxlbWVudC5hbGwoYnkuY3NzQ29udGFpbmluZ1RleHQoJ21hdC1vcHRpb24gc3BhbicsIG5hbWUpKS5maXJzdCgpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKGdyb3VwUm93KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2hlY2tHcm91cElzTm90RGlzcGxheWVkKG5hbWUpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBSb3cgPSBlbGVtZW50LmFsbChieS5jc3NDb250YWluaW5nVGV4dCgnbWF0LW9wdGlvbiBzcGFuJywgbmFtZSkpLmZpcnN0KCk7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc05vdFZpc2libGUoZ3JvdXBSb3cpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjaGVja1NlbGVjdGVkR3JvdXAoZ3JvdXApIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZShlbGVtZW50KGJ5LmNzc0NvbnRhaW5pbmdUZXh0KCdtYXQtY2hpcFtkYXRhLWF1dG9tYXRpb24taWQqPVwiYWRmLWNsb3VkLWdyb3VwLWNoaXAtXCJdJywgZ3JvdXApKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxufVxuIl19