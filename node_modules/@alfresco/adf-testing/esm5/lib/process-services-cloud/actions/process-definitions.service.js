/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ProcessDefinitionsService = /** @class */ (function () {
    function ProcessDefinitionsService(api) {
        this.api = api;
    }
    /**
     * @param {?} appName
     * @return {?}
     */
    ProcessDefinitionsService.prototype.getProcessDefinitions = /**
     * @param {?} appName
     * @return {?}
     */
    function (appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, data, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-definitions';
                        method = 'GET';
                        queryParams = {};
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, {})];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1.status === 404) {
                            // tslint:disable-next-line:no-console
                            console.log(appName + " not present");
                        }
                        else if (error_1.status === 403) {
                            // tslint:disable-next-line:no-console
                            console.log("Access to the requested resource has been denied " + appName);
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return ProcessDefinitionsService;
}());
export { ProcessDefinitionsService };
if (false) {
    /** @type {?} */
    ProcessDefinitionsService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1kZWZpbml0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi10ZXN0aW5nLyIsInNvdXJjZXMiOlsibGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvYWN0aW9ucy9wcm9jZXNzLWRlZmluaXRpb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBO0lBSUksbUNBQVksR0FBZTtRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVLLHlEQUFxQjs7OztJQUEzQixVQUE0QixPQUFPOzs7Ozs7d0JBQ3pCLElBQUksR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLDRCQUE0Qjt3QkFDbkQsTUFBTSxHQUFHLEtBQUs7d0JBRWQsV0FBVyxHQUFHLEVBQUU7Ozs7d0JBR0wscUJBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBQTs7d0JBQXhFLElBQUksR0FBRyxTQUFpRTt3QkFDOUUsc0JBQU8sSUFBSSxFQUFDOzs7d0JBRVosSUFBSSxPQUFLLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTs0QkFDdEIsc0NBQXNDOzRCQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFJLE9BQU8saUJBQWMsQ0FBQyxDQUFDO3lCQUN6Qzs2QkFBTSxJQUFJLE9BQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFOzRCQUM3QixzQ0FBc0M7NEJBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0RBQW9ELE9BQVMsQ0FBQyxDQUFDO3lCQUM5RTs7Ozs7O0tBRVI7SUFDTCxnQ0FBQztBQUFELENBQUMsQUEzQkQsSUEyQkM7Ozs7SUF6Qkcsd0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvYWN0aW9ucy9hcGkuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzRGVmaW5pdGlvbnNTZXJ2aWNlIHtcblxuICAgIGFwaTogQXBpU2VydmljZTtcblxuICAgIGNvbnN0cnVjdG9yKGFwaTogQXBpU2VydmljZSkge1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQcm9jZXNzRGVmaW5pdGlvbnMoYXBwTmFtZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gJy8nICsgYXBwTmFtZSArICcvcmIvdjEvcHJvY2Vzcy1kZWZpbml0aW9ucyc7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge307XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtQnBtT3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHt9KTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHthcHBOYW1lfSBub3QgcHJlc2VudGApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5zdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEFjY2VzcyB0byB0aGUgcmVxdWVzdGVkIHJlc291cmNlIGhhcyBiZWVuIGRlbmllZCAke2FwcE5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=