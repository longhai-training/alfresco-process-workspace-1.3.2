/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ProcessInstancesService = /** @class */ (function () {
    function ProcessInstancesService(api) {
        this.api = api;
    }
    /**
     * @param {?} processDefKey
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    ProcessInstancesService.prototype.createProcessInstance = /**
     * @param {?} processDefKey
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    function (processDefKey, appName, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances';
                        method = 'POST';
                        queryParams = {};
                        postBody = tslib_1.__assign({ 'processDefinitionKey': processDefKey, 'payloadType': 'StartProcessPayload' }, options);
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    ProcessInstancesService.prototype.suspendProcessInstance = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId + '/suspend';
                        method = 'POST';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    ProcessInstancesService.prototype.deleteProcessInstance = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId;
                        method = 'DELETE';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    ProcessInstancesService.prototype.completeProcessInstance = /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    function (processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var path, method, queryParams, postBody;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId + '/complete';
                        method = 'POST';
                        queryParams = {};
                        postBody = {};
                        return [4 /*yield*/, this.api.performBpmOperation(path, method, queryParams, postBody)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ProcessInstancesService;
}());
export { ProcessInstancesService };
if (false) {
    /** @type {?} */
    ProcessInstancesService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pbnN0YW5jZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL2FjdGlvbnMvcHJvY2Vzcy1pbnN0YW5jZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkE7SUFJSSxpQ0FBWSxHQUFlO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7Ozs7Ozs7SUFFSyx1REFBcUI7Ozs7OztJQUEzQixVQUE0QixhQUFhLEVBQUUsT0FBTyxFQUFFLE9BQWE7Ozs7Ozt3QkFDdkQsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsMEJBQTBCO3dCQUNqRCxNQUFNLEdBQUcsTUFBTTt3QkFFZixXQUFXLEdBQUcsRUFBRTt3QkFBRSxRQUFRLHNCQUM1QixzQkFBc0IsRUFBRSxhQUFhLEVBQ3JDLGFBQWEsRUFBRSxxQkFBcUIsSUFDakMsT0FBTyxDQUNiO3dCQUVNLHFCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQUE7NEJBQTlFLHNCQUFPLFNBQXVFLEVBQUM7Ozs7S0FDbEY7Ozs7OztJQUVLLHdEQUFzQjs7Ozs7SUFBNUIsVUFBNkIsaUJBQWlCLEVBQUUsT0FBTzs7Ozs7O3dCQUM3QyxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRywyQkFBMkIsR0FBRyxpQkFBaUIsR0FBRyxVQUFVO3dCQUNuRixNQUFNLEdBQUcsTUFBTTt3QkFFZixXQUFXLEdBQUcsRUFBRTt3QkFBRSxRQUFRLEdBQUcsRUFBRTt3QkFFOUIscUJBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsRUFBQTs0QkFBOUUsc0JBQU8sU0FBdUUsRUFBQzs7OztLQUNsRjs7Ozs7O0lBRUssdURBQXFCOzs7OztJQUEzQixVQUE0QixpQkFBaUIsRUFBRSxPQUFPOzs7Ozs7d0JBQzVDLElBQUksR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLDJCQUEyQixHQUFHLGlCQUFpQjt3QkFDdEUsTUFBTSxHQUFHLFFBQVE7d0JBRWpCLFdBQVcsR0FBRyxFQUFFO3dCQUFFLFFBQVEsR0FBRyxFQUFFO3dCQUU5QixxQkFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUFBOzRCQUE5RSxzQkFBTyxTQUF1RSxFQUFDOzs7O0tBQ2xGOzs7Ozs7SUFFSyx5REFBdUI7Ozs7O0lBQTdCLFVBQThCLGlCQUFpQixFQUFFLE9BQU87Ozs7Ozt3QkFDOUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsMkJBQTJCLEdBQUcsaUJBQWlCLEdBQUcsV0FBVzt3QkFFcEYsTUFBTSxHQUFHLE1BQU07d0JBRWYsV0FBVyxHQUFHLEVBQUU7d0JBQUUsUUFBUSxHQUFHLEVBQUU7d0JBRTlCLHFCQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLEVBQUE7NEJBQTlFLHNCQUFPLFNBQXVFLEVBQUM7Ozs7S0FDbEY7SUFDTCw4QkFBQztBQUFELENBQUMsQUFoREQsSUFnREM7Ozs7SUE5Q0csc0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvYWN0aW9ucy9hcGkuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzSW5zdGFuY2VzU2VydmljZSB7XG5cbiAgICBhcGk6IEFwaVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGk6IEFwaVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlUHJvY2Vzc0luc3RhbmNlKHByb2Nlc3NEZWZLZXksIGFwcE5hbWUsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvJyArIGFwcE5hbWUgKyAnL3JiL3YxL3Byb2Nlc3MtaW5zdGFuY2VzJztcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge30sIHBvc3RCb2R5ID0ge1xuICAgICAgICAgICAgJ3Byb2Nlc3NEZWZpbml0aW9uS2V5JzogcHJvY2Vzc0RlZktleSxcbiAgICAgICAgICAgICdwYXlsb2FkVHlwZSc6ICdTdGFydFByb2Nlc3NQYXlsb2FkJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hcGkucGVyZm9ybUJwbU9wZXJhdGlvbihwYXRoLCBtZXRob2QsIHF1ZXJ5UGFyYW1zLCBwb3N0Qm9keSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3VzcGVuZFByb2Nlc3NJbnN0YW5jZShwcm9jZXNzSW5zdGFuY2VJZCwgYXBwTmFtZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gJy8nICsgYXBwTmFtZSArICcvcmIvdjEvcHJvY2Vzcy1pbnN0YW5jZXMvJyArIHByb2Nlc3NJbnN0YW5jZUlkICsgJy9zdXNwZW5kJztcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge30sIHBvc3RCb2R5ID0ge307XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYXBpLnBlcmZvcm1CcG1PcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywgcG9zdEJvZHkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZVByb2Nlc3NJbnN0YW5jZShwcm9jZXNzSW5zdGFuY2VJZCwgYXBwTmFtZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gJy8nICsgYXBwTmFtZSArICcvcmIvdjEvcHJvY2Vzcy1pbnN0YW5jZXMvJyArIHByb2Nlc3NJbnN0YW5jZUlkO1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnREVMRVRFJztcblxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHt9O1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtQnBtT3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHBvc3RCb2R5KTtcbiAgICB9XG5cbiAgICBhc3luYyBjb21wbGV0ZVByb2Nlc3NJbnN0YW5jZShwcm9jZXNzSW5zdGFuY2VJZCwgYXBwTmFtZSkge1xuICAgICAgICBjb25zdCBwYXRoID0gJy8nICsgYXBwTmFtZSArICcvcmIvdjEvcHJvY2Vzcy1pbnN0YW5jZXMvJyArIHByb2Nlc3NJbnN0YW5jZUlkICsgJy9jb21wbGV0ZSc7XG5cbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ1BPU1QnO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge30sIHBvc3RCb2R5ID0ge307XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYXBpLnBlcmZvcm1CcG1PcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywgcG9zdEJvZHkpO1xuICAgIH1cbn1cbiJdfQ==