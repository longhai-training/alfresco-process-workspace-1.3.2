/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiCompatibility, AlfrescoApiConfig } from '@alfresco/js-api';
import { AlfrescoApiService, AppConfigValues } from '@alfresco/adf-core';
var TestingAlfrescoApiService = /** @class */ (function (_super) {
    tslib_1.__extends(TestingAlfrescoApiService, _super);
    function TestingAlfrescoApiService(appConfig) {
        var _this = _super.call(this, null) || this;
        _this.appConfig = appConfig;
        _this.config = {};
        /** @type {?} */
        var oauth = Object.assign({}, _this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        _this.config = new AlfrescoApiConfig({
            provider: _this.appConfig.get(AppConfigValues.PROVIDERS),
            hostEcm: _this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: _this.appConfig.get(AppConfigValues.BPMHOST),
            authType: _this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: _this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: _this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: _this.appConfig.get(AppConfigValues.DISABLECSRF),
            withCredentials: _this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false),
            oauth2: oauth
        });
        return _this;
    }
    /**
     * @return {?}
     */
    TestingAlfrescoApiService.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(this.config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(this.config);
        }
        return this.alfrescoApi;
    };
    return TestingAlfrescoApiService;
}(AlfrescoApiService));
export { TestingAlfrescoApiService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TestingAlfrescoApiService.prototype.alfrescoApi;
    /** @type {?} */
    TestingAlfrescoApiService.prototype.config;
    /** @type {?} */
    TestingAlfrescoApiService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy1hbGZyZXNjby1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL2FjdGlvbnMvdGVzdGluZy1hbGZyZXNjby1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUUzRjtJQUErQyxxREFBa0I7SUFPN0QsbUNBQW1CLFNBQTJCO1FBQTlDLFlBQ0ksa0JBQU0sSUFBSSxDQUFDLFNBYWQ7UUFka0IsZUFBUyxHQUFULFNBQVMsQ0FBa0I7UUFIOUMsWUFBTSxHQUFHLEVBQ1IsQ0FBQzs7WUFJUSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sZUFBZSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRixLQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUM7WUFDaEMsUUFBUSxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxTQUFTLENBQUM7WUFDL0QsT0FBTyxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDNUQsT0FBTyxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDNUQsUUFBUSxFQUFFLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO1lBQ3ZFLGNBQWMsRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQzFFLFdBQVcsRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQ3ZFLFdBQVcsRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBVSxlQUFlLENBQUMsV0FBVyxDQUFDO1lBQ3JFLGVBQWUsRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBVSxlQUFlLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDO1lBQzFGLE1BQU0sRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQzs7SUFDUCxDQUFDOzs7O0lBRUQsK0NBQVc7OztJQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBQ0wsZ0NBQUM7QUFBRCxDQUFDLEFBL0JELENBQStDLGtCQUFrQixHQStCaEU7Ozs7Ozs7SUE3QkcsZ0RBQWdEOztJQUVoRCwyQ0FDRTs7SUFFVSw4Q0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHksIEFsZnJlc2NvQXBpQ29uZmlnIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UsIEFwcENvbmZpZ1ZhbHVlcywgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBUZXN0aW5nQWxmcmVzY29BcGlTZXJ2aWNlIGV4dGVuZHMgQWxmcmVzY29BcGlTZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBhbGZyZXNjb0FwaTogQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5O1xuXG4gICAgY29uZmlnID0ge1xuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKG51bGwpO1xuICAgICAgICBjb25zdCBvYXV0aCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuYXBwQ29uZmlnLmdldDxhbnk+KEFwcENvbmZpZ1ZhbHVlcy5PQVVUSENPTkZJRywgbnVsbCkpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IG5ldyBBbGZyZXNjb0FwaUNvbmZpZyh7XG4gICAgICAgICAgICBwcm92aWRlcjogdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oQXBwQ29uZmlnVmFsdWVzLlBST1ZJREVSUyksXG4gICAgICAgICAgICBob3N0RWNtOiB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPihBcHBDb25maWdWYWx1ZXMuRUNNSE9TVCksXG4gICAgICAgICAgICBob3N0QnBtOiB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPihBcHBDb25maWdWYWx1ZXMuQlBNSE9TVCksXG4gICAgICAgICAgICBhdXRoVHlwZTogdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oQXBwQ29uZmlnVmFsdWVzLkFVVEhUWVBFLCAnQkFTSUMnKSxcbiAgICAgICAgICAgIGNvbnRleHRSb290QnBtOiB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPihBcHBDb25maWdWYWx1ZXMuQ09OVEVYVFJPT1RCUE0pLFxuICAgICAgICAgICAgY29udGV4dFJvb3Q6IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5DT05URVhUUk9PVEVDTSksXG4gICAgICAgICAgICBkaXNhYmxlQ3NyZjogdGhpcy5hcHBDb25maWcuZ2V0PGJvb2xlYW4+KEFwcENvbmZpZ1ZhbHVlcy5ESVNBQkxFQ1NSRiksXG4gICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuYXBwQ29uZmlnLmdldDxib29sZWFuPihBcHBDb25maWdWYWx1ZXMuQVVUSF9XSVRIX0NSRURFTlRJQUxTLCBmYWxzZSksXG4gICAgICAgICAgICBvYXV0aDI6IG9hdXRoXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEluc3RhbmNlKCk6IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eSB7XG4gICAgICAgIGlmICh0aGlzLmFsZnJlc2NvQXBpKSB7XG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpLmNvbmZpZ3VyZUpzQXBpKHRoaXMuY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGkgPSBuZXcgQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5KHRoaXMuY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hbGZyZXNjb0FwaTtcbiAgICB9XG59XG4iXX0=