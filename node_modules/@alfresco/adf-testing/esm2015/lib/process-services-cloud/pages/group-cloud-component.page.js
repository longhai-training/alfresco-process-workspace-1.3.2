/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { browser, by, element, protractor } from 'protractor';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
export class GroupCloudComponentPage {
    constructor() {
        this.groupCloudSearch = element(by.css('input[data-automation-id="adf-cloud-group-search-input"]'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    searchGroups(name) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).groupCloudSearch);
        browser.sleep(1000);
        (/** @type {?} */ (this)).groupCloudSearch.clear().then((/**
         * @return {?}
         */
        () => {
            for (let i = 0; i < name.length; i++) {
                (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[i]);
            }
            (/** @type {?} */ (this)).groupCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
            (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[name.length - 1]);
        }));
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    searchGroupsToExisting(name) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).groupCloudSearch);
        for (let i = 0; i < name.length; i++) {
            (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[i]);
        }
        (/** @type {?} */ (this)).groupCloudSearch.sendKeys(protractor.Key.BACK_SPACE);
        (/** @type {?} */ (this)).groupCloudSearch.sendKeys(name[name.length - 1]);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getGroupsFieldContent() {
        BrowserVisibility.waitUntilElementIsVisible(this.groupCloudSearch);
        return this.groupCloudSearch.getAttribute('value');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    selectGroupFromList(name) {
        /** @type {?} */
        const groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsVisible(groupRow);
        browser.sleep(1000);
        groupRow.click();
        BrowserVisibility.waitUntilElementIsNotVisible(groupRow);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    checkGroupIsDisplayed(name) {
        /** @type {?} */
        const groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsVisible(groupRow);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    checkGroupIsNotDisplayed(name) {
        /** @type {?} */
        const groupRow = element.all(by.cssContainingText('mat-option span', name)).first();
        BrowserVisibility.waitUntilElementIsNotVisible(groupRow);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} group
     * @return {THIS}
     */
    checkSelectedGroup(group) {
        BrowserVisibility.waitUntilElementIsVisible(element(by.cssContainingText('mat-chip[data-automation-id*="adf-cloud-group-chip-"]', group)));
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    GroupCloudComponentPage.prototype.groupCloudSearch;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtY2xvdWQtY29tcG9uZW50LnBhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXRlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvcHJvY2Vzcy1zZXJ2aWNlcy1jbG91ZC9wYWdlcy9ncm91cC1jbG91ZC1jb21wb25lbnQucGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXhFLE1BQU0sT0FBTyx1QkFBdUI7SUFBcEM7UUFFSSxxQkFBZ0IsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQywwREFBMEQsQ0FBQyxDQUFDLENBQUM7SUF5RG5HLENBQUM7Ozs7Ozs7SUF2REcsWUFBWSxDQUFDLElBQUk7UUFDYixpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsbUJBQUEsSUFBSSxFQUFBLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSTs7O1FBQUMsR0FBRyxFQUFFO1lBQ3BDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNsQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0M7WUFDRCxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FB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MjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBicm93c2VyLCBieSwgZWxlbWVudCwgcHJvdHJhY3RvciB9IGZyb20gJ3Byb3RyYWN0b3InO1xuaW1wb3J0IHsgQnJvd3NlclZpc2liaWxpdHkgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL2Jyb3dzZXItdmlzaWJpbGl0eSc7XG5cbmV4cG9ydCBjbGFzcyBHcm91cENsb3VkQ29tcG9uZW50UGFnZSB7XG5cbiAgICBncm91cENsb3VkU2VhcmNoID0gZWxlbWVudChieS5jc3MoJ2lucHV0W2RhdGEtYXV0b21hdGlvbi1pZD1cImFkZi1jbG91ZC1ncm91cC1zZWFyY2gtaW5wdXRcIl0nKSk7XG5cbiAgICBzZWFyY2hHcm91cHMobmFtZSkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuZ3JvdXBDbG91ZFNlYXJjaCk7XG4gICAgICAgIGJyb3dzZXIuc2xlZXAoMTAwMCk7XG4gICAgICAgIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5jbGVhcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cENsb3VkU2VhcmNoLnNlbmRLZXlzKG5hbWVbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ncm91cENsb3VkU2VhcmNoLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpO1xuICAgICAgICAgICAgdGhpcy5ncm91cENsb3VkU2VhcmNoLnNlbmRLZXlzKG5hbWVbbmFtZS5sZW5ndGggLSAxXSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZWFyY2hHcm91cHNUb0V4aXN0aW5nKG5hbWUpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmdyb3VwQ2xvdWRTZWFyY2gpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5zZW5kS2V5cyhuYW1lW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdyb3VwQ2xvdWRTZWFyY2guc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICAgIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5zZW5kS2V5cyhuYW1lW25hbWUubGVuZ3RoIC0gMV0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRHcm91cHNGaWVsZENvbnRlbnQoKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5ncm91cENsb3VkU2VhcmNoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBDbG91ZFNlYXJjaC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG5cbiAgICB9XG5cbiAgICBzZWxlY3RHcm91cEZyb21MaXN0KG5hbWUpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBSb3cgPSBlbGVtZW50LmFsbChieS5jc3NDb250YWluaW5nVGV4dCgnbWF0LW9wdGlvbiBzcGFuJywgbmFtZSkpLmZpcnN0KCk7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUoZ3JvdXBSb3cpO1xuICAgICAgICBicm93c2VyLnNsZWVwKDEwMDApO1xuICAgICAgICBncm91cFJvdy5jbGljaygpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNOb3RWaXNpYmxlKGdyb3VwUm93KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2hlY2tHcm91cElzRGlzcGxheWVkKG5hbWUpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBSb3cgPSBlbGVtZW50LmFsbChieS5jc3NDb250YWluaW5nVGV4dCgnbWF0LW9wdGlvbiBzcGFuJywgbmFtZSkpLmZpcnN0KCk7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUoZ3JvdXBSb3cpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjaGVja0dyb3VwSXNOb3REaXNwbGF5ZWQobmFtZSkge1xuICAgICAgICBjb25zdCBncm91cFJvdyA9IGVsZW1lbnQuYWxsKGJ5LmNzc0NvbnRhaW5pbmdUZXh0KCdtYXQtb3B0aW9uIHNwYW4nLCBuYW1lKSkuZmlyc3QoKTtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzTm90VmlzaWJsZShncm91cFJvdyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNoZWNrU2VsZWN0ZWRHcm91cChncm91cCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKGVsZW1lbnQoYnkuY3NzQ29udGFpbmluZ1RleHQoJ21hdC1jaGlwW2RhdGEtYXV0b21hdGlvbi1pZCo9XCJhZGYtY2xvdWQtZ3JvdXAtY2hpcC1cIl0nLCBncm91cCkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG59XG4iXX0=