/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by, element, protractor } from 'protractor';
import { BrowserVisibility } from '../../../core/utils/browser-visibility';
export class EditTaskFilterDialogPage {
    constructor() {
        this.componentElement = element(by.css('adf-cloud-task-filter-dialog'));
        this.title = element(by.id('adf-task-filter-dialog-title'));
        this.filterNameInput = element(by.id('adf-filter-name-id'));
        this.saveButtonLocator = by.id('adf-save-button-id');
        this.cancelButtonLocator = by.id('adf-cancel-button-id');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickOnSaveButton() {
        /** @type {?} */
        const saveButton = (/** @type {?} */ (this)).componentElement.element((/** @type {?} */ (this)).saveButtonLocator);
        BrowserVisibility.waitUntilElementIsVisible(saveButton);
        saveButton.click();
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).componentElement);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    checkSaveButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.componentElement.element(this.saveButtonLocator));
        return this.componentElement.element(this.saveButtonLocator).isEnabled();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickOnCancelButton() {
        /** @type {?} */
        const cancelButton = (/** @type {?} */ (this)).componentElement.element((/** @type {?} */ (this)).cancelButtonLocator);
        BrowserVisibility.waitUntilElementIsVisible(cancelButton);
        cancelButton.click();
        BrowserVisibility.waitUntilElementIsNotVisible((/** @type {?} */ (this)).componentElement);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    checkCancelButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.componentElement.element(this.cancelButtonLocator));
        return this.componentElement.element(this.cancelButtonLocator).isEnabled();
    }
    /**
     * @return {?}
     */
    getFilterName() {
        BrowserVisibility.waitUntilElementIsVisible(this.filterNameInput);
        return this.filterNameInput.getAttribute('value');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} filterName
     * @return {THIS}
     */
    setFilterName(filterName) {
        (/** @type {?} */ (this)).clearFilterName();
        (/** @type {?} */ (this)).filterNameInput.sendKeys(filterName);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clearFilterName() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filterNameInput);
        (/** @type {?} */ (this)).filterNameInput.click();
        (/** @type {?} */ (this)).filterNameInput.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            for (let i = value.length; i >= 0; i--) {
                (/** @type {?} */ (this)).filterNameInput.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getTitle() {
        BrowserVisibility.waitUntilElementIsVisible(this.title);
        return this.title.getText();
    }
}
if (false) {
    /** @type {?} */
    EditTaskFilterDialogPage.prototype.componentElement;
    /** @type {?} */
    EditTaskFilterDialogPage.prototype.title;
    /** @type {?} */
    EditTaskFilterDialogPage.prototype.filterNameInput;
    /** @type {?} */
    EditTaskFilterDialogPage.prototype.saveButtonLocator;
    /** @type {?} */
    EditTaskFilterDialogPage.prototype.cancelButtonLocator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC10YXNrLWZpbHRlci1kaWFsb2cucGFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL3BhZ2VzL2RpYWxvZy9lZGl0LXRhc2stZmlsdGVyLWRpYWxvZy5wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUUzRSxNQUFNLE9BQU8sd0JBQXdCO0lBQXJDO1FBRUkscUJBQWdCLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO1FBQ25FLFVBQUssR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7UUFDdkQsb0JBQWUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7UUFDdkQsc0JBQWlCLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2hELHdCQUFtQixHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQXVEeEQsQ0FBQzs7Ozs7O0lBckRHLGlCQUFpQjs7Y0FDUCxVQUFVLEdBQUcsbUJBQUEsSUFBSSxFQUFBLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLGlCQUFpQixDQUFDO1FBQ3hFLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQixpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDaEIsQ0FBQzs7OztJQUVELHdCQUF3QjtRQUNwQixpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDbkcsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzdFLENBQUM7Ozs7OztJQUVELG1CQUFtQjs7Y0FDVCxZQUFZLEdBQUcsbUJBQUEsSUFBSSxFQUFBLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLG1CQUFtQixDQUFDO1FBQzVFLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFELFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNyQixpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDaEIsQ0FBQzs7OztJQUVELDBCQUEwQjtRQUN0QixpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDckcsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9FLENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1QsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7OztJQUVELGFBQWEsQ0FBQyxVQUFVO1FBQ3BCLG1CQUFBLElBQUksRUFBQSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLG1CQUFBLElBQUksRUFBQSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxlQUFlO1FBQ1gsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbEUsbUJBQUEsSUFBSSxFQUFBLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzdCLG1CQUFBLElBQUksRUFBQSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSTs7OztRQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDdEQsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BDLG1CQUFBLElBQUksRUFBQSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUM1RDtRQUNMLENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztDQUVKOzs7SUEzREcsb0RBQW1FOztJQUNuRSx5Q0FBdUQ7O0lBQ3ZELG1EQUF1RDs7SUFDdkQscURBQWdEOztJQUNoRCx1REFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBieSwgZWxlbWVudCwgcHJvdHJhY3RvciB9IGZyb20gJ3Byb3RyYWN0b3InO1xuaW1wb3J0IHsgQnJvd3NlclZpc2liaWxpdHkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWxzL2Jyb3dzZXItdmlzaWJpbGl0eSc7XG5cbmV4cG9ydCBjbGFzcyBFZGl0VGFza0ZpbHRlckRpYWxvZ1BhZ2Uge1xuXG4gICAgY29tcG9uZW50RWxlbWVudCA9IGVsZW1lbnQoYnkuY3NzKCdhZGYtY2xvdWQtdGFzay1maWx0ZXItZGlhbG9nJykpO1xuICAgIHRpdGxlID0gZWxlbWVudChieS5pZCgnYWRmLXRhc2stZmlsdGVyLWRpYWxvZy10aXRsZScpKTtcbiAgICBmaWx0ZXJOYW1lSW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdhZGYtZmlsdGVyLW5hbWUtaWQnKSk7XG4gICAgc2F2ZUJ1dHRvbkxvY2F0b3IgPSBieS5pZCgnYWRmLXNhdmUtYnV0dG9uLWlkJyk7XG4gICAgY2FuY2VsQnV0dG9uTG9jYXRvciA9IGJ5LmlkKCdhZGYtY2FuY2VsLWJ1dHRvbi1pZCcpO1xuXG4gICAgY2xpY2tPblNhdmVCdXR0b24oKSB7XG4gICAgICAgIGNvbnN0IHNhdmVCdXR0b24gPSB0aGlzLmNvbXBvbmVudEVsZW1lbnQuZWxlbWVudCh0aGlzLnNhdmVCdXR0b25Mb2NhdG9yKTtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZShzYXZlQnV0dG9uKTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5jbGljaygpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNOb3RWaXNpYmxlKHRoaXMuY29tcG9uZW50RWxlbWVudCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNoZWNrU2F2ZUJ1dHRvbklzRW5hYmxlZCgpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmNvbXBvbmVudEVsZW1lbnQuZWxlbWVudCh0aGlzLnNhdmVCdXR0b25Mb2NhdG9yKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEVsZW1lbnQuZWxlbWVudCh0aGlzLnNhdmVCdXR0b25Mb2NhdG9yKS5pc0VuYWJsZWQoKTtcbiAgICB9XG5cbiAgICBjbGlja09uQ2FuY2VsQnV0dG9uKCkge1xuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSB0aGlzLmNvbXBvbmVudEVsZW1lbnQuZWxlbWVudCh0aGlzLmNhbmNlbEJ1dHRvbkxvY2F0b3IpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKGNhbmNlbEJ1dHRvbik7XG4gICAgICAgIGNhbmNlbEJ1dHRvbi5jbGljaygpO1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNOb3RWaXNpYmxlKHRoaXMuY29tcG9uZW50RWxlbWVudCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNoZWNrQ2FuY2VsQnV0dG9uSXNFbmFibGVkKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuY29tcG9uZW50RWxlbWVudC5lbGVtZW50KHRoaXMuY2FuY2VsQnV0dG9uTG9jYXRvcikpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRFbGVtZW50LmVsZW1lbnQodGhpcy5jYW5jZWxCdXR0b25Mb2NhdG9yKS5pc0VuYWJsZWQoKTtcbiAgICB9XG5cbiAgICBnZXRGaWx0ZXJOYW1lKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuZmlsdGVyTmFtZUlucHV0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyTmFtZUlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICB9XG5cbiAgICBzZXRGaWx0ZXJOYW1lKGZpbHRlck5hbWUpIHtcbiAgICAgICAgdGhpcy5jbGVhckZpbHRlck5hbWUoKTtcbiAgICAgICAgdGhpcy5maWx0ZXJOYW1lSW5wdXQuc2VuZEtleXMoZmlsdGVyTmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNsZWFyRmlsdGVyTmFtZSgpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmZpbHRlck5hbWVJbnB1dCk7XG4gICAgICAgIHRoaXMuZmlsdGVyTmFtZUlucHV0LmNsaWNrKCk7XG4gICAgICAgIHRoaXMuZmlsdGVyTmFtZUlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHZhbHVlLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlck5hbWVJbnB1dC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5CQUNLX1NQQUNFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFRpdGxlKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMudGl0bGUpO1xuICAgICAgICByZXR1cm4gdGhpcy50aXRsZS5nZXRUZXh0KCk7XG4gICAgfVxuXG59XG4iXX0=