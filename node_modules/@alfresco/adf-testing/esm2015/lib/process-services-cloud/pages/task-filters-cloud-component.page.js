/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by } from 'protractor';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
export class TaskFiltersCloudComponentPage {
    /**
     * @param {?} filter
     */
    constructor(filter) {
        this.taskIcon = by.xpath("ancestor::div[@class='mat-list-item-content']/mat-icon");
        this.filter = filter;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkTaskFilterIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).filter);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getTaskFilterIcon() {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        /** @type {?} */
        const icon = this.filter.element(this.taskIcon);
        BrowserVisibility.waitUntilElementIsVisible(icon);
        return icon.getText();
    }
    /**
     * @return {?}
     */
    checkTaskFilterHasNoIcon() {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        BrowserVisibility.waitUntilElementIsNotOnPage(this.filter.element(this.taskIcon));
    }
    /**
     * @return {?}
     */
    clickTaskFilter() {
        BrowserVisibility.waitUntilElementIsVisible(this.filter);
        return this.filter.click();
    }
    /**
     * @return {?}
     */
    checkTaskFilterNotDisplayed() {
        BrowserVisibility.waitUntilElementIsNotVisible(this.filter);
        return this.filter;
    }
}
if (false) {
    /** @type {?} */
    TaskFiltersCloudComponentPage.prototype.filter;
    /** @type {?} */
    TaskFiltersCloudComponentPage.prototype.taskIcon;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1maWx0ZXJzLWNsb3VkLWNvbXBvbmVudC5wYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi10ZXN0aW5nLyIsInNvdXJjZXMiOlsibGliL3Byb2Nlc3Mtc2VydmljZXMtY2xvdWQvcGFnZXMvdGFzay1maWx0ZXJzLWNsb3VkLWNvbXBvbmVudC5wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDaEMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFeEUsTUFBTSxPQUFPLDZCQUE2Qjs7OztJQUt0QyxZQUFZLE1BQU07UUFGbEIsYUFBUSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztRQUcxRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFFRCwwQkFBMEI7UUFDdEIsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekQsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNoQixDQUFDOzs7O0lBRUQsaUJBQWlCO1FBQ2IsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztjQUNuRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvQyxpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsd0JBQXdCO1FBQ3BCLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RCxpQkFBaUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELDJCQUEyQjtRQUN2QixpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Q0FFSjs7O0lBbENHLCtDQUFPOztJQUNQLGlEQUE4RSIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGJ5IH0gZnJvbSAncHJvdHJhY3Rvcic7XG5pbXBvcnQgeyBCcm93c2VyVmlzaWJpbGl0eSB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMvYnJvd3Nlci12aXNpYmlsaXR5JztcblxuZXhwb3J0IGNsYXNzIFRhc2tGaWx0ZXJzQ2xvdWRDb21wb25lbnRQYWdlIHtcblxuICAgIGZpbHRlcjtcbiAgICB0YXNrSWNvbiA9IGJ5LnhwYXRoKFwiYW5jZXN0b3I6OmRpdltAY2xhc3M9J21hdC1saXN0LWl0ZW0tY29udGVudCddL21hdC1pY29uXCIpO1xuXG4gICAgY29uc3RydWN0b3IoZmlsdGVyKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGNoZWNrVGFza0ZpbHRlcklzRGlzcGxheWVkKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuZmlsdGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0VGFza0ZpbHRlckljb24oKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICBjb25zdCBpY29uID0gdGhpcy5maWx0ZXIuZWxlbWVudCh0aGlzLnRhc2tJY29uKTtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZShpY29uKTtcbiAgICAgICAgcmV0dXJuIGljb24uZ2V0VGV4dCgpO1xuICAgIH1cblxuICAgIGNoZWNrVGFza0ZpbHRlckhhc05vSWNvbigpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmZpbHRlcik7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc05vdE9uUGFnZSh0aGlzLmZpbHRlci5lbGVtZW50KHRoaXMudGFza0ljb24pKTtcbiAgICB9XG5cbiAgICBjbGlja1Rhc2tGaWx0ZXIoKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIuY2xpY2soKTtcbiAgICB9XG5cbiAgICBjaGVja1Rhc2tGaWx0ZXJOb3REaXNwbGF5ZWQoKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc05vdFZpc2libGUodGhpcy5maWx0ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXI7XG4gICAgfVxuXG59XG4iXX0=