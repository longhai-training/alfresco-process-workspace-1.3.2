/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BrowserVisibility } from '../../core/utils/browser-visibility';
import { DataTableComponentPage } from '../../core/pages/data-table-component.page';
import { element, by } from 'protractor';
/** @type {?} */
const column = {
    id: 'Id',
    name: 'Name',
    processInstanceId: 'ProcessInstanceId',
    processDefinitionId: 'ProcessDefinitionId',
    assignee: 'Assignee',
    parentTaskId: 'ParentTaskId',
    priority: 'Priority',
    standAlone: 'StandAlone',
    owner: 'Owner'
};
export class TaskListCloudComponentPage {
    constructor() {
        this.taskList = element(by.css('adf-cloud-task-list'));
        this.noTasksFound = element.all(by.css("div[class='adf-empty-content__title']")).first();
        this.dataTable = new DataTableComponentPage(this.taskList);
    }
    /**
     * @return {?}
     */
    getDataTable() {
        return this.dataTable;
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    clickCheckbox(taskName) {
        return this.dataTable.clickCheckbox(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkRowIsNotChecked(taskName) {
        return this.dataTable.checkRowIsNotChecked(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkRowIsChecked(taskName) {
        return this.dataTable.checkRowIsChecked(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    getRowsWithSameName(taskName) {
        return this.dataTable.getRowsWithSameColumnValues(column.name, taskName);
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    getRowsWithSameId(taskId) {
        return this.dataTable.getRowsWithSameColumnValues('Id', taskId);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkRowIsSelected(taskName) {
        return this.dataTable.checkRowIsSelected(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkRowIsNotSelected(taskName) {
        return this.dataTable.checkRowIsNotSelected(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    selectRowWithKeyboard(taskName) {
        return this.dataTable.selectRowWithKeyboard(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    selectRow(taskName) {
        return this.dataTable.selectRow(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    getRow(taskName) {
        return this.dataTable.getCellElementByValue(column.name, taskName);
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    checkContentIsDisplayedById(taskId) {
        return this.dataTable.checkContentIsDisplayed(column.id, taskId);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkContentIsDisplayedByProcessInstanceId(taskName) {
        return this.dataTable.checkContentIsDisplayed(column.processInstanceId, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkContentIsDisplayedByName(taskName) {
        return this.dataTable.checkContentIsDisplayed(column.name, taskName);
    }
    /**
     * @param {?} taskName
     * @return {?}
     */
    checkContentIsNotDisplayedByName(taskName) {
        return this.dataTable.checkContentIsNotDisplayed(column.name, taskName);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkTaskListIsLoaded() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).taskList);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getNoTasksFoundMessage() {
        BrowserVisibility.waitUntilElementIsVisible(this.noTasksFound);
        return this.noTasksFound.getText();
    }
    /**
     * @return {?}
     */
    getAllRowsNameColumn() {
        return this.dataTable.getAllRowsColumnValues(column.name);
    }
    /**
     * @return {?}
     */
    getAllRowsByIdColumn() {
        return this.dataTable.getAllRowsColumnValues(column.id);
    }
    /**
     * @return {?}
     */
    getAllRowsByProcessDefIdColumn() {
        return this.dataTable.getAllRowsColumnValues(column.processDefinitionId);
    }
    /**
     * @return {?}
     */
    getAllRowsByProcessInstanceIdColumn() {
        return this.dataTable.getAllRowsColumnValues(column.processInstanceId);
    }
    /**
     * @return {?}
     */
    getAllRowsByAssigneeColumn() {
        return this.dataTable.getAllRowsColumnValues(column.assignee);
    }
    /**
     * @return {?}
     */
    getAllRowsByParentTaskIdColumn() {
        return this.dataTable.getAllRowsColumnValues(column.parentTaskId);
    }
    /**
     * @return {?}
     */
    getAllRowsByPriorityColumn() {
        return this.dataTable.getAllRowsColumnValues(column.priority);
    }
    /**
     * @return {?}
     */
    getAllRowsByStandAloneColumn() {
        return this.dataTable.getAllRowsColumnValues(column.standAlone);
    }
    /**
     * @return {?}
     */
    getAllRowsByOwnerColumn() {
        return this.dataTable.getAllRowsColumnValues(column.owner);
    }
    /**
     * @param {?} rowName
     * @return {?}
     */
    getIdCellValue(rowName) {
        /** @type {?} */
        const locator = new DataTableComponentPage().getCellByRowContentAndColumn(column.name, rowName, column.id);
        BrowserVisibility.waitUntilElementIsVisible(locator);
        return locator.getText();
    }
}
if (false) {
    /** @type {?} */
    TaskListCloudComponentPage.prototype.taskList;
    /** @type {?} */
    TaskListCloudComponentPage.prototype.noTasksFound;
    /** @type {?} */
    TaskListCloudComponentPage.prototype.dataTable;
}
//# sourceMappingURL=data:application/json;base64,