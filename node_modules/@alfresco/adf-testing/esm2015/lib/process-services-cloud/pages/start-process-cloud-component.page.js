/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by, element, Key, protractor, browser } from 'protractor';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
export class StartProcessCloudPage {
    constructor() {
        this.defaultProcessName = element(by.css('input[id="processName"]'));
        this.processNameInput = element(by.id('processName'));
        this.selectProcessDropdownArrow = element(by.css('button[id="adf-select-process-dropdown"]'));
        this.cancelProcessButton = element(by.id('cancel_process'));
        this.formStartProcessButton = element(by.css('button[data-automation-id="adf-form-start process"]'));
        this.startProcessButton = element(by.css('button[data-automation-id="btn-start"]'));
        this.noProcess = element(by.id('no-process-message'));
        this.processDefinition = element(by.css('input[id="processDefinitionName"]'));
        this.processDefinitionOptionsPanel = element(by.css('div[class*="processDefinitionOptions"]'));
    }
    /**
     * @return {?}
     */
    checkNoProcessMessage() {
        BrowserVisibility.waitUntilElementIsVisible(this.noProcess);
    }
    /**
     * @return {?}
     */
    pressDownArrowAndEnter() {
        this.processDefinition.sendKeys(protractor.Key.ARROW_DOWN);
        return browser.actions().sendKeys(protractor.Key.ENTER).perform();
    }
    /**
     * @return {?}
     */
    checkNoProcessDefinitionOptionIsDisplayed() {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.processDefinitionOptionsPanel);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    enterProcessName(name) {
        BrowserVisibility.waitUntilElementIsVisible(this.processNameInput);
        this.clearProcessName();
        this.processNameInput.sendKeys(name);
    }
    /**
     * @return {?}
     */
    clearProcessName() {
        BrowserVisibility.waitUntilElementIsVisible(this.processNameInput);
        this.processNameInput.clear();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    selectFromProcessDropdown(name) {
        (/** @type {?} */ (this)).clickProcessDropdownArrow();
        return (/** @type {?} */ (this)).selectOption(name);
    }
    /**
     * @return {?}
     */
    clickProcessDropdownArrow() {
        BrowserVisibility.waitUntilElementIsVisible(this.selectProcessDropdownArrow);
        BrowserVisibility.waitUntilElementIsClickable(this.selectProcessDropdownArrow);
        this.selectProcessDropdownArrow.click();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    checkOptionIsDisplayed(name) {
        /** @type {?} */
        const selectProcessDropdown = element(by.cssContainingText('.mat-option-text', name));
        BrowserVisibility.waitUntilElementIsVisible(selectProcessDropdown);
        BrowserVisibility.waitUntilElementIsClickable(selectProcessDropdown);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} name
     * @return {THIS}
     */
    selectOption(name) {
        /** @type {?} */
        const selectProcessDropdown = element(by.cssContainingText('.mat-option-text', name));
        BrowserVisibility.waitUntilElementIsVisible(selectProcessDropdown);
        BrowserVisibility.waitUntilElementIsClickable(selectProcessDropdown);
        selectProcessDropdown.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clickCancelProcessButton() {
        BrowserVisibility.waitUntilElementIsVisible(this.cancelProcessButton);
        this.cancelProcessButton.click();
    }
    /**
     * @return {?}
     */
    checkStartProcessButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsClickable(this.startProcessButton);
        expect(this.startProcessButton.isEnabled()).toBe(true);
    }
    /**
     * @return {?}
     */
    checkStartProcessButtonIsDisabled() {
        expect(this.startProcessButton.isEnabled()).toBe(false);
    }
    /**
     * @return {?}
     */
    clickStartProcessButton() {
        BrowserVisibility.waitUntilElementIsClickable(this.startProcessButton);
        return this.startProcessButton.click();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @param {?=} elementRef
     * @return {THIS}
     */
    checkValidationErrorIsDisplayed(error, elementRef = 'mat-error') {
        /** @type {?} */
        const errorElement = element(by.cssContainingText(elementRef, error));
        BrowserVisibility.waitUntilElementIsVisible(errorElement);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @return {THIS}
     */
    blur(locator) {
        locator.click();
        locator.sendKeys(Key.TAB);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} locator
     * @return {?}
     */
    clearField(locator) {
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.getAttribute('value').then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            for (let i = result.length; i >= 0; i--) {
                locator.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    }
}
if (false) {
    /** @type {?} */
    StartProcessCloudPage.prototype.defaultProcessName;
    /** @type {?} */
    StartProcessCloudPage.prototype.processNameInput;
    /** @type {?} */
    StartProcessCloudPage.prototype.selectProcessDropdownArrow;
    /** @type {?} */
    StartProcessCloudPage.prototype.cancelProcessButton;
    /** @type {?} */
    StartProcessCloudPage.prototype.formStartProcessButton;
    /** @type {?} */
    StartProcessCloudPage.prototype.startProcessButton;
    /** @type {?} */
    StartProcessCloudPage.prototype.noProcess;
    /** @type {?} */
    StartProcessCloudPage.prototype.processDefinition;
    /** @type {?} */
    StartProcessCloudPage.prototype.processDefinitionOptionsPanel;
}
//# sourceMappingURL=data:application/json;base64,