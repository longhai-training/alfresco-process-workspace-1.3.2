/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { element, by, Key, protractor } from 'protractor';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
export class StartTasksCloudPage {
    constructor() {
        this.name = element(by.css('input[id="name_id"]'));
        this.dueDate = element(by.css('input[id="date_id"]'));
        this.description = element(by.css('textarea[id="description_id"]'));
        this.priority = element(by.css('input[formcontrolname="priority"]'));
        this.startButton = element(by.css('button[id="button-start"]'));
        this.startButtonEnabled = element(by.css('button[id="button-start"]:not(disabled)'));
        this.cancelButton = element(by.css('button[id="button-cancel"]'));
        this.form = element.all(by.css('adf-cloud-start-task form')).first();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkFormIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).form);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} userName
     * @return {THIS}
     */
    addName(userName) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).name);
        (/** @type {?} */ (this)).name.clear();
        (/** @type {?} */ (this)).name.sendKeys(userName);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} userDescription
     * @return {THIS}
     */
    addDescription(userDescription) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).description);
        (/** @type {?} */ (this)).description.sendKeys(userDescription);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} userPriority
     * @return {THIS}
     */
    addPriority(userPriority) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).priority);
        (/** @type {?} */ (this)).priority.sendKeys(userPriority);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} date
     * @return {THIS}
     */
    addDueDate(date) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).dueDate);
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).dueDate);
        (/** @type {?} */ (this)).dueDate.sendKeys(date);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clickStartButton() {
        BrowserVisibility.waitUntilElementIsVisible(this.startButton);
        BrowserVisibility.waitUntilElementIsClickable(this.startButton);
        return this.startButton.click();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkStartButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).startButtonEnabled);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkStartButtonIsDisabled() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).startButton.getAttribute('disabled'));
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clickCancelButton() {
        BrowserVisibility.waitUntilElementIsVisible(this.cancelButton);
        BrowserVisibility.waitUntilElementIsClickable(this.cancelButton);
        return this.cancelButton.click();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @return {THIS}
     */
    blur(locator) {
        locator.click();
        locator.sendKeys(Key.TAB);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @param {?=} elementRef
     * @return {THIS}
     */
    checkValidationErrorIsDisplayed(error, elementRef = 'mat-error') {
        /** @type {?} */
        const errorElement = element(by.cssContainingText(elementRef, error));
        BrowserVisibility.waitUntilElementIsVisible(errorElement);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    validateAssignee(error) {
        (/** @type {?} */ (this)).checkValidationErrorIsDisplayed(error, '.adf-start-task-cloud-error');
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    validateDate(error) {
        (/** @type {?} */ (this)).checkValidationErrorIsDisplayed(error, '.adf-error-text');
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} locator
     * @return {?}
     */
    clearField(locator) {
        BrowserVisibility.waitUntilElementIsVisible(locator);
        BrowserVisibility.waitUntilElementIsClickable(locator);
        locator.getAttribute('value').then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            for (let i = result.length; i >= 0; i--) {
                locator.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    }
}
if (false) {
    /** @type {?} */
    StartTasksCloudPage.prototype.name;
    /** @type {?} */
    StartTasksCloudPage.prototype.dueDate;
    /** @type {?} */
    StartTasksCloudPage.prototype.description;
    /** @type {?} */
    StartTasksCloudPage.prototype.priority;
    /** @type {?} */
    StartTasksCloudPage.prototype.startButton;
    /** @type {?} */
    StartTasksCloudPage.prototype.startButtonEnabled;
    /** @type {?} */
    StartTasksCloudPage.prototype.cancelButton;
    /** @type {?} */
    StartTasksCloudPage.prototype.form;
}
//# sourceMappingURL=data:application/json;base64,