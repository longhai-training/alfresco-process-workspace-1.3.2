/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by, element, protractor } from 'protractor';
import { EditTaskFilterDialogPage } from './dialog/edit-task-filter-dialog.page';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
export class EditTaskFilterCloudComponentPage {
    constructor() {
        this.customiseFilter = element(by.id('adf-edit-task-filter-title-id'));
        this.selectedOption = element.all(by.css('mat-option[class*="mat-selected"]')).first();
        this.assignee = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-assignee"]'));
        this.priority = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-priority"]'));
        this.taskName = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-taskName"]'));
        this.id = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-taskId"]'));
        this.processDefinitionId = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-processDefinitionId"]'));
        this.processInstanceId = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-processInstanceId"]'));
        this.lastModifiedFrom = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-lastModifiedFrom"]'));
        this.lastModifiedTo = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-lastModifiedTo"]'));
        this.parentTaskId = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-parentTaskId"]'));
        this.owner = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-owner"]'));
        this.saveButton = element(by.css('[data-automation-id="adf-filter-action-save"]'));
        this.saveAsButton = element(by.css('[data-automation-id="adf-filter-action-saveAs"]'));
        this.deleteButton = element(by.css('[data-automation-id="adf-filter-action-delete"]'));
        this.editTaskFilterDialogPage = new EditTaskFilterDialogPage();
    }
    /**
     * @return {?}
     */
    editTaskFilterDialog() {
        return this.editTaskFilterDialogPage;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickCustomiseFilterHeader() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).customiseFilter);
        (/** @type {?} */ (this)).customiseFilter.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setStatusFilterDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('status');
        /** @type {?} */
        const statusElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsVisible(statusElement);
        BrowserVisibility.waitUntilElementIsClickable(statusElement);
        statusElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getStatusFilterDropDownValue() {
        return element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-status'] span")).first().getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setSortFilterDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('sort');
        /** @type {?} */
        const sortElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(sortElement);
        BrowserVisibility.waitUntilElementIsVisible(sortElement);
        sortElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getSortFilterDropDownValue() {
        /** @type {?} */
        const elementSort = element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-sort'] span")).first();
        BrowserVisibility.waitUntilElementIsVisible(elementSort);
        return elementSort.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setOrderFilterDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('order');
        /** @type {?} */
        const orderElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(orderElement);
        BrowserVisibility.waitUntilElementIsVisible(orderElement);
        orderElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getOrderFilterDropDownValue() {
        return element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-order'] span")).first().getText();
    }
    /**
     * @param {?} option
     * @return {?}
     */
    clickOnDropDownArrow(option) {
        /** @type {?} */
        const dropDownArrow = element.all(by.css("mat-form-field[data-automation-id='" + option + "'] div[class*='arrow']")).first();
        BrowserVisibility.waitUntilElementIsVisible(dropDownArrow);
        dropDownArrow.click();
        BrowserVisibility.waitUntilElementIsVisible(this.selectedOption);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setAssignee(option) {
        return (/** @type {?} */ (this)).setProperty('assignee', option);
    }
    /**
     * @return {?}
     */
    getAssignee() {
        return this.assignee.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setPriority(option) {
        return (/** @type {?} */ (this)).setProperty('priority', option);
    }
    /**
     * @return {?}
     */
    getPriority() {
        return this.priority.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setParentTaskId(option) {
        return (/** @type {?} */ (this)).setProperty('parentTaskId', option);
    }
    /**
     * @return {?}
     */
    getParentTaskId() {
        return this.parentTaskId.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setOwner(option) {
        return (/** @type {?} */ (this)).setProperty('owner', option);
    }
    /**
     * @return {?}
     */
    getOwner() {
        return this.owner.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setLastModifiedFrom(option) {
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).lastModifiedFrom);
        return (/** @type {?} */ (this)).setProperty('lastModifiedFrom', option);
    }
    /**
     * @return {?}
     */
    getLastModifiedFrom() {
        return this.lastModifiedFrom.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setLastModifiedTo(option) {
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).lastModifiedTo);
        return (/** @type {?} */ (this)).setProperty('lastModifiedTo', option);
    }
    /**
     * @return {?}
     */
    getLastModifiedTo() {
        return this.lastModifiedTo.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkSaveButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkSaveAsButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveAsButton);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkDeleteButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    checkSaveButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.saveButton.isEnabled();
    }
    /**
     * @return {?}
     */
    checkSaveAsButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.saveAsButton.isEnabled();
    }
    /**
     * @return {?}
     */
    checkDeleteButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.deleteButton.isEnabled();
    }
    /**
     * @return {?}
     */
    clickSaveAsButton() {
        /** @type {?} */
        const disabledButton = element(by.css(("button[data-automation-id='adf-filter-action-saveAs'][disabled]")));
        BrowserVisibility.waitUntilElementIsClickable(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsVisible(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsNotVisible(disabledButton);
        this.saveAsButton.click();
        return this.editTaskFilterDialogPage;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickDeleteButton() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        (/** @type {?} */ (this)).deleteButton.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickSaveButton() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        (/** @type {?} */ (this)).saveButton.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clearAssignee() {
        (/** @type {?} */ (this)).clearField((/** @type {?} */ (this)).assignee);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} locator
     * @return {?}
     */
    clearField(locator) {
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.getAttribute('value').then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            for (let i = result.length; i >= 0; i--) {
                locator.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setAppNameDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('appName');
        /** @type {?} */
        const appNameElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(appNameElement);
        BrowserVisibility.waitUntilElementIsVisible(appNameElement);
        appNameElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getAppNameDropDownValue() {
        /** @type {?} */
        const locator = element.all(by.css("mat-select[data-automation-id='adf-cloud-edit-task-property-appName'] span")).first();
        BrowserVisibility.waitUntilElementIsVisible(locator);
        return locator.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setId(option) {
        return (/** @type {?} */ (this)).setProperty('taskId', option);
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id.getAttribute('value');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setTaskName(option) {
        return (/** @type {?} */ (this)).setProperty('taskName', option);
    }
    /**
     * @return {?}
     */
    getTaskName() {
        return this.taskName.getAttribute('value');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setProcessDefinitionId(option) {
        return (/** @type {?} */ (this)).setProperty('processDefinitionId', option);
    }
    /**
     * @return {?}
     */
    getProcessDefinitionId() {
        return this.processDefinitionId.getAttribute('value');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setProcessInstanceId(option) {
        return (/** @type {?} */ (this)).setProperty('processInstanceId', option);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} property
     * @param {?} option
     * @return {THIS}
     */
    setProperty(property, option) {
        /** @type {?} */
        const locator = element(by.css('input[data-automation-id="adf-cloud-edit-task-property-' + property + '"]'));
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.clear();
        locator.sendKeys(option);
        locator.sendKeys(protractor.Key.ENTER);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getProcessInstanceId() {
        return this.processInstanceId.getAttribute('value');
    }
}
if (false) {
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.customiseFilter;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.selectedOption;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.assignee;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.priority;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.taskName;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.id;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.processDefinitionId;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.processInstanceId;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.lastModifiedFrom;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.lastModifiedTo;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.parentTaskId;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.owner;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.saveButton;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.saveAsButton;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.deleteButton;
    /** @type {?} */
    EditTaskFilterCloudComponentPage.prototype.editTaskFilterDialogPage;
}
//# sourceMappingURL=data:application/json;base64,