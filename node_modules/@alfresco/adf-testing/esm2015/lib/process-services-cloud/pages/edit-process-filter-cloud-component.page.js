/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by, element, protractor } from 'protractor';
import { EditProcessFilterDialogPage } from './dialog/edit-process-filter-dialog.page';
import { BrowserVisibility } from '../../core/utils/browser-visibility';
export class EditProcessFilterCloudComponentPage {
    constructor() {
        this.customiseFilter = element(by.id('adf-edit-process-filter-title-id'));
        this.selectedOption = element.all(by.css('mat-option[class*="mat-selected"]')).first();
        this.saveButton = element(by.css('button[data-automation-id="adf-filter-action-save"]'));
        this.saveAsButton = element(by.css('button[data-automation-id="adf-filter-action-saveAs"]'));
        this.deleteButton = element(by.css('button[data-automation-id="adf-filter-action-delete"]'));
        this.editProcessFilterDialogPage = new EditProcessFilterDialogPage();
    }
    /**
     * @return {?}
     */
    editProcessFilterDialog() {
        return this.editProcessFilterDialogPage;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickCustomiseFilterHeader() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).customiseFilter);
        (/** @type {?} */ (this)).customiseFilter.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkCustomiseFilterHeaderIsExpanded() {
        /** @type {?} */
        const expansionPanelExtended = element.all(by.css('mat-expansion-panel-header[class*="mat-expanded"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(expansionPanelExtended);
        /** @type {?} */
        const content = element.all(by.css('div[class*="mat-expansion-panel-content "][style*="visible"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(content);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setStatusFilterDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('status');
        /** @type {?} */
        const statusElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(statusElement);
        BrowserVisibility.waitUntilElementIsVisible(statusElement);
        statusElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getStateFilterDropDownValue() {
        return element(by.css("mat-form-field[data-automation-id='status'] span")).getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setSortFilterDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('sort');
        /** @type {?} */
        const sortElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(sortElement);
        BrowserVisibility.waitUntilElementIsVisible(sortElement);
        sortElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getSortFilterDropDownValue() {
        /** @type {?} */
        const sortLocator = element.all(by.css("mat-form-field[data-automation-id='sort'] span")).first();
        BrowserVisibility.waitUntilElementIsVisible(sortLocator);
        return sortLocator.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setOrderFilterDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('order');
        /** @type {?} */
        const orderElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(orderElement);
        BrowserVisibility.waitUntilElementIsVisible(orderElement);
        orderElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getOrderFilterDropDownValue() {
        return element(by.css("mat-form-field[data-automation-id='order'] span")).getText();
    }
    /**
     * @param {?} option
     * @return {?}
     */
    clickOnDropDownArrow(option) {
        /** @type {?} */
        const dropDownArrow = element.all(by.css("mat-form-field[data-automation-id='" + option + "'] div[class='mat-select-arrow-wrapper']")).first();
        BrowserVisibility.waitUntilElementIsVisible(dropDownArrow);
        BrowserVisibility.waitUntilElementIsClickable(dropDownArrow);
        dropDownArrow.click();
        BrowserVisibility.waitUntilElementIsVisible(this.selectedOption);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setAppNameDropDown(option) {
        (/** @type {?} */ (this)).clickOnDropDownArrow('appName');
        /** @type {?} */
        const appNameElement = element.all(by.cssContainingText('mat-option span', option)).first();
        BrowserVisibility.waitUntilElementIsClickable(appNameElement);
        BrowserVisibility.waitUntilElementIsVisible(appNameElement);
        appNameElement.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    checkAppNamesAreUnique() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const appNameList = element.all(by.css('mat-option[data-automation-id="adf-cloud-edit-process-property-optionsappName"] span'));
            /** @type {?} */
            const appTextList = yield appNameList.getText();
            /** @type {?} */
            const uniqueArray = appTextList.filter((/**
             * @param {?} appName
             * @return {?}
             */
            (appName) => {
                /** @type {?} */
                const sameAppNameArray = appTextList.filter((/**
                 * @param {?} eachApp
                 * @return {?}
                 */
                (eachApp) => eachApp === appName));
                return sameAppNameArray.length === 1;
            }));
            return uniqueArray.length === appTextList.length;
        });
    }
    /**
     * @return {?}
     */
    getNumberOfAppNameOptions() {
        this.clickOnDropDownArrow('appName');
        /** @type {?} */
        const dropdownOptions = element.all(by.css('.mat-select-panel mat-option'));
        return dropdownOptions.count();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} option
     * @return {THIS}
     */
    setProcessInstanceId(option) {
        return (/** @type {?} */ (this)).setProperty('processInstanceId', option);
    }
    /**
     * @return {?}
     */
    getProcessInstanceId() {
        return this.getProperty('processInstanceId');
    }
    /**
     * @param {?} property
     * @return {?}
     */
    getProperty(property) {
        /** @type {?} */
        const locator = element.all(by.css('input[data-automation-id="adf-cloud-edit-process-property-' + property + '"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(locator);
        return locator.getAttribute('value');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} property
     * @param {?} option
     * @return {THIS}
     */
    setProperty(property, option) {
        /** @type {?} */
        const locator = element.all(by.css('input[data-automation-id="adf-cloud-edit-process-property-' + property + '"]')).first();
        BrowserVisibility.waitUntilElementIsVisible(locator);
        locator.clear();
        locator.sendKeys(option);
        locator.sendKeys(protractor.Key.ENTER);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkSaveButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkSaveAsButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveAsButton);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkDeleteButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    checkSaveButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.saveButton);
        return this.saveButton.isEnabled();
    }
    /**
     * @return {?}
     */
    checkSaveAsButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.saveAsButton);
        return this.saveAsButton.isEnabled();
    }
    /**
     * @return {?}
     */
    checkDeleteButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.deleteButton);
        return this.deleteButton.isEnabled();
    }
    /**
     * @return {?}
     */
    clickSaveAsButton() {
        /** @type {?} */
        const disabledButton = element(by.css(("button[data-automation-id='adf-filter-action-saveAs'][disabled]")));
        BrowserVisibility.waitUntilElementIsClickable(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsVisible(this.saveAsButton);
        BrowserVisibility.waitUntilElementIsNotVisible(disabledButton);
        this.saveAsButton.click();
        return this.editProcessFilterDialogPage;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickDeleteButton() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).deleteButton);
        (/** @type {?} */ (this)).deleteButton.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickSaveButton() {
        /** @type {?} */
        const disabledButton = element(by.css(("button[id='adf-save-as-id'][disabled]")));
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).saveButton);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        BrowserVisibility.waitUntilElementIsNotVisible(disabledButton);
        (/** @type {?} */ (this)).saveButton.click();
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    EditProcessFilterCloudComponentPage.prototype.customiseFilter;
    /** @type {?} */
    EditProcessFilterCloudComponentPage.prototype.selectedOption;
    /** @type {?} */
    EditProcessFilterCloudComponentPage.prototype.saveButton;
    /** @type {?} */
    EditProcessFilterCloudComponentPage.prototype.saveAsButton;
    /** @type {?} */
    EditProcessFilterCloudComponentPage.prototype.deleteButton;
    /** @type {?} */
    EditProcessFilterCloudComponentPage.prototype.editProcessFilterDialogPage;
}
//# sourceMappingURL=data:application/json;base64,