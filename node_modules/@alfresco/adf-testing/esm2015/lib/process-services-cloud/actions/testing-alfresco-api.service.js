/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiCompatibility, AlfrescoApiConfig } from '@alfresco/js-api';
import { AlfrescoApiService, AppConfigValues } from '@alfresco/adf-core';
export class TestingAlfrescoApiService extends AlfrescoApiService {
    /**
     * @param {?} appConfig
     */
    constructor(appConfig) {
        super(null);
        this.appConfig = appConfig;
        this.config = {};
        /** @type {?} */
        const oauth = Object.assign({}, this.appConfig.get(AppConfigValues.OAUTHCONFIG, null));
        this.config = new AlfrescoApiConfig({
            provider: this.appConfig.get(AppConfigValues.PROVIDERS),
            hostEcm: this.appConfig.get(AppConfigValues.ECMHOST),
            hostBpm: this.appConfig.get(AppConfigValues.BPMHOST),
            authType: this.appConfig.get(AppConfigValues.AUTHTYPE, 'BASIC'),
            contextRootBpm: this.appConfig.get(AppConfigValues.CONTEXTROOTBPM),
            contextRoot: this.appConfig.get(AppConfigValues.CONTEXTROOTECM),
            disableCsrf: this.appConfig.get(AppConfigValues.DISABLECSRF),
            withCredentials: this.appConfig.get(AppConfigValues.AUTH_WITH_CREDENTIALS, false),
            oauth2: oauth
        });
    }
    /**
     * @return {?}
     */
    getInstance() {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(this.config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(this.config);
        }
        return this.alfrescoApi;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TestingAlfrescoApiService.prototype.alfrescoApi;
    /** @type {?} */
    TestingAlfrescoApiService.prototype.config;
    /** @type {?} */
    TestingAlfrescoApiService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy1hbGZyZXNjby1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL2FjdGlvbnMvdGVzdGluZy1hbGZyZXNjby1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFvQixNQUFNLG9CQUFvQixDQUFDO0FBRTNGLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxrQkFBa0I7Ozs7SUFPN0QsWUFBbUIsU0FBMkI7UUFDMUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBREcsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFIOUMsV0FBTSxHQUFHLEVBQ1IsQ0FBQzs7Y0FJUSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQU0sZUFBZSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksaUJBQWlCLENBQUM7WUFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxTQUFTLENBQUM7WUFDL0QsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDNUQsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDNUQsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO1lBQ3ZFLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQzFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBUyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQ3ZFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBVSxlQUFlLENBQUMsV0FBVyxDQUFDO1lBQ3JFLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBVSxlQUFlLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDO1lBQzFGLE1BQU0sRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRTtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0NBQ0o7Ozs7OztJQTdCRyxnREFBZ0Q7O0lBRWhELDJDQUNFOztJQUVVLDhDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eSwgQWxmcmVzY29BcGlDb25maWcgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgQXBwQ29uZmlnVmFsdWVzLCBBcHBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuZXhwb3J0IGNsYXNzIFRlc3RpbmdBbGZyZXNjb0FwaVNlcnZpY2UgZXh0ZW5kcyBBbGZyZXNjb0FwaVNlcnZpY2Uge1xuXG4gICAgcHJvdGVjdGVkIGFsZnJlc2NvQXBpOiBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHk7XG5cbiAgICBjb25maWcgPSB7XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBhcHBDb25maWc6IEFwcENvbmZpZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIobnVsbCk7XG4gICAgICAgIGNvbnN0IG9hdXRoID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5hcHBDb25maWcuZ2V0PGFueT4oQXBwQ29uZmlnVmFsdWVzLk9BVVRIQ09ORklHLCBudWxsKSk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gbmV3IEFsZnJlc2NvQXBpQ29uZmlnKHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPihBcHBDb25maWdWYWx1ZXMuUFJPVklERVJTKSxcbiAgICAgICAgICAgIGhvc3RFY206IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5FQ01IT1NUKSxcbiAgICAgICAgICAgIGhvc3RCcG06IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5CUE1IT1NUKSxcbiAgICAgICAgICAgIGF1dGhUeXBlOiB0aGlzLmFwcENvbmZpZy5nZXQ8c3RyaW5nPihBcHBDb25maWdWYWx1ZXMuQVVUSFRZUEUsICdCQVNJQycpLFxuICAgICAgICAgICAgY29udGV4dFJvb3RCcG06IHRoaXMuYXBwQ29uZmlnLmdldDxzdHJpbmc+KEFwcENvbmZpZ1ZhbHVlcy5DT05URVhUUk9PVEJQTSksXG4gICAgICAgICAgICBjb250ZXh0Um9vdDogdGhpcy5hcHBDb25maWcuZ2V0PHN0cmluZz4oQXBwQ29uZmlnVmFsdWVzLkNPTlRFWFRST09URUNNKSxcbiAgICAgICAgICAgIGRpc2FibGVDc3JmOiB0aGlzLmFwcENvbmZpZy5nZXQ8Ym9vbGVhbj4oQXBwQ29uZmlnVmFsdWVzLkRJU0FCTEVDU1JGKSxcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5hcHBDb25maWcuZ2V0PGJvb2xlYW4+KEFwcENvbmZpZ1ZhbHVlcy5BVVRIX1dJVEhfQ1JFREVOVElBTFMsIGZhbHNlKSxcbiAgICAgICAgICAgIG9hdXRoMjogb2F1dGhcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0SW5zdGFuY2UoKTogQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5IHtcbiAgICAgICAgaWYgKHRoaXMuYWxmcmVzY29BcGkpIHtcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGkuY29uZmlndXJlSnNBcGkodGhpcy5jb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaSA9IG5ldyBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHkodGhpcy5jb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvQXBpO1xuICAgIH1cbn1cbiJdfQ==