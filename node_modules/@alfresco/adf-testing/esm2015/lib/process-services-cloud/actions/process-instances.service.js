/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class ProcessInstancesService {
    /**
     * @param {?} api
     */
    constructor(api) {
        this.api = api;
    }
    /**
     * @param {?} processDefKey
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    createProcessInstance(processDefKey, appName, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/process-instances';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = Object.assign({ 'processDefinitionKey': processDefKey, 'payloadType': 'StartProcessPayload' }, options);
            return yield this.api.performBpmOperation(path, method, queryParams, postBody);
        });
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    suspendProcessInstance(processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId + '/suspend';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            return yield this.api.performBpmOperation(path, method, queryParams, postBody);
        });
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    deleteProcessInstance(processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId;
            /** @type {?} */
            const method = 'DELETE';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            return yield this.api.performBpmOperation(path, method, queryParams, postBody);
        });
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    completeProcessInstance(processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/process-instances/' + processInstanceId + '/complete';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            return yield this.api.performBpmOperation(path, method, queryParams, postBody);
        });
    }
}
if (false) {
    /** @type {?} */
    ProcessInstancesService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pbnN0YW5jZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9wcm9jZXNzLXNlcnZpY2VzLWNsb3VkL2FjdGlvbnMvcHJvY2Vzcy1pbnN0YW5jZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsTUFBTSxPQUFPLHVCQUF1Qjs7OztJQUloQyxZQUFZLEdBQWU7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDbkIsQ0FBQzs7Ozs7OztJQUVLLHFCQUFxQixDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsT0FBYTs7O2tCQUN2RCxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRywwQkFBMEI7O2tCQUNqRCxNQUFNLEdBQUcsTUFBTTs7a0JBRWYsV0FBVyxHQUFHLEVBQUU7O2tCQUFFLFFBQVEsbUJBQzVCLHNCQUFzQixFQUFFLGFBQWEsRUFDckMsYUFBYSxFQUFFLHFCQUFxQixJQUNqQyxPQUFPLENBQ2I7WUFFRCxPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNuRixDQUFDO0tBQUE7Ozs7OztJQUVLLHNCQUFzQixDQUFDLGlCQUFpQixFQUFFLE9BQU87OztrQkFDN0MsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsMkJBQTJCLEdBQUcsaUJBQWlCLEdBQUcsVUFBVTs7a0JBQ25GLE1BQU0sR0FBRyxNQUFNOztrQkFFZixXQUFXLEdBQUcsRUFBRTs7a0JBQUUsUUFBUSxHQUFHLEVBQUU7WUFFckMsT0FBTyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkYsQ0FBQztLQUFBOzs7Ozs7SUFFSyxxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPOzs7a0JBQzVDLElBQUksR0FBRyxHQUFHLEdBQUcsT0FBTyxHQUFHLDJCQUEyQixHQUFHLGlCQUFpQjs7a0JBQ3RFLE1BQU0sR0FBRyxRQUFROztrQkFFakIsV0FBVyxHQUFHLEVBQUU7O2tCQUFFLFFBQVEsR0FBRyxFQUFFO1lBRXJDLE9BQU8sTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ25GLENBQUM7S0FBQTs7Ozs7O0lBRUssdUJBQXVCLENBQUMsaUJBQWlCLEVBQUUsT0FBTzs7O2tCQUM5QyxJQUFJLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRywyQkFBMkIsR0FBRyxpQkFBaUIsR0FBRyxXQUFXOztrQkFFcEYsTUFBTSxHQUFHLE1BQU07O2tCQUVmLFdBQVcsR0FBRyxFQUFFOztrQkFBRSxRQUFRLEdBQUcsRUFBRTtZQUVyQyxPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNuRixDQUFDO0tBQUE7Q0FDSjs7O0lBOUNHLHNDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb3JlL2FjdGlvbnMvYXBpLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0luc3RhbmNlc1NlcnZpY2Uge1xuXG4gICAgYXBpOiBBcGlTZXJ2aWNlO1xuXG4gICAgY29uc3RydWN0b3IoYXBpOiBBcGlTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZVByb2Nlc3NJbnN0YW5jZShwcm9jZXNzRGVmS2V5LCBhcHBOYW1lLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnLycgKyBhcHBOYW1lICsgJy9yYi92MS9wcm9jZXNzLWluc3RhbmNlcyc7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcblxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHtcbiAgICAgICAgICAgICdwcm9jZXNzRGVmaW5pdGlvbktleSc6IHByb2Nlc3NEZWZLZXksXG4gICAgICAgICAgICAncGF5bG9hZFR5cGUnOiAnU3RhcnRQcm9jZXNzUGF5bG9hZCcsXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYXBpLnBlcmZvcm1CcG1PcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywgcG9zdEJvZHkpO1xuICAgIH1cblxuICAgIGFzeW5jIHN1c3BlbmRQcm9jZXNzSW5zdGFuY2UocHJvY2Vzc0luc3RhbmNlSWQsIGFwcE5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvJyArIGFwcE5hbWUgKyAnL3JiL3YxL3Byb2Nlc3MtaW5zdGFuY2VzLycgKyBwcm9jZXNzSW5zdGFuY2VJZCArICcvc3VzcGVuZCc7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcblxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHt9O1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtQnBtT3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHBvc3RCb2R5KTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVQcm9jZXNzSW5zdGFuY2UocHJvY2Vzc0luc3RhbmNlSWQsIGFwcE5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvJyArIGFwcE5hbWUgKyAnL3JiL3YxL3Byb2Nlc3MtaW5zdGFuY2VzLycgKyBwcm9jZXNzSW5zdGFuY2VJZDtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ0RFTEVURSc7XG5cbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7fSwgcG9zdEJvZHkgPSB7fTtcblxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hcGkucGVyZm9ybUJwbU9wZXJhdGlvbihwYXRoLCBtZXRob2QsIHF1ZXJ5UGFyYW1zLCBwb3N0Qm9keSk7XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcGxldGVQcm9jZXNzSW5zdGFuY2UocHJvY2Vzc0luc3RhbmNlSWQsIGFwcE5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvJyArIGFwcE5hbWUgKyAnL3JiL3YxL3Byb2Nlc3MtaW5zdGFuY2VzLycgKyBwcm9jZXNzSW5zdGFuY2VJZCArICcvY29tcGxldGUnO1xuXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdQT1NUJztcblxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHt9O1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtQnBtT3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHBvc3RCb2R5KTtcbiAgICB9XG59XG4iXX0=