/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormControllersPage } from './form-controller.page';
import { browser, by, element, protractor } from 'protractor';
import { BrowserVisibility } from '../utils/browser-visibility';
import { LocalStorageUtil } from '../utils/local-storage.util';
export class LoginPage {
    constructor() {
        this.loginURL = browser.baseUrl + '/login';
        this.formControllersPage = new FormControllersPage();
        this.txtUsername = element(by.css('input[id="username"]'));
        this.txtPassword = element(by.css('input[id="password"]'));
        this.logoImg = element(by.css('img[id="adf-login-img-logo"]'));
        this.successRouteTxt = element(by.css('input[data-automation-id="adf-success-route"]'));
        this.logoTxt = element(by.css('input[data-automation-id="adf-url-logo"]'));
        this.usernameTooltip = element(by.css('span[data-automation-id="username-error"]'));
        this.passwordTooltip = element(by.css('span[data-automation-id="password-required"]'));
        this.loginTooltip = element(by.css('span[class="adf-login-error-message"]'));
        this.usernameInactive = element(by.css('input[id="username"][aria-invalid="false"]'));
        this.passwordInactive = element(by.css('input[id="password"][aria-invalid="false"]'));
        this.adfLogo = element(by.css('img[class="adf-img-logo ng-star-inserted"]'));
        this.usernameHighlighted = element(by.css('input[id="username"][aria-invalid="true"]'));
        this.passwordHighlighted = element(by.css('input[id="password"][aria-invalid="true"]'));
        this.signInButton = element(by.id('login-button'));
        this.showPasswordElement = element(by.css('mat-icon[data-automation-id="show_password"]'));
        this.hidePasswordElement = element(by.css('mat-icon[data-automation-id="hide_password"]'));
        this.rememberMe = element(by.css('mat-checkbox[id="adf-login-remember"]'));
        this.needHelp = element(by.css('div[id="adf-login-action-left"]'));
        this.register = element(by.css('div[id="adf-login-action-right"]'));
        this.footerSwitch = element(by.id('switch4'));
        this.rememberMeSwitch = element(by.id('adf-toggle-show-rememberme'));
        this.successRouteSwitch = element(by.id('adf-toggle-show-successRoute'));
        this.logoSwitch = element(by.id('adf-toggle-logo'));
        this.header = element(by.id('adf-header'));
        this.settingsIcon = element(by.cssContainingText('a[data-automation-id="settings"] mat-icon', 'settings'));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    goToLoginPage() {
        browser.waitForAngularEnabled(true);
        browser.driver.get((/** @type {?} */ (this)).loginURL);
        (/** @type {?} */ (this)).waitForElements();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    waitForElements() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).txtUsername);
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).txtPassword);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} username
     * @return {?}
     */
    enterUsername(username) {
        BrowserVisibility.waitUntilElementIsVisible(this.txtUsername);
        this.txtUsername.sendKeys('');
        this.txtUsername.clear();
        return this.txtUsername.sendKeys(username);
    }
    /**
     * @param {?} password
     * @return {?}
     */
    enterPassword(password) {
        BrowserVisibility.waitUntilElementIsVisible(this.txtPassword);
        this.txtPassword.clear();
        return this.txtPassword.sendKeys(password);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clearUsername() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).txtUsername);
        (/** @type {?} */ (this)).txtUsername.click();
        (/** @type {?} */ (this)).txtUsername.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            for (let i = value.length; i >= 0; i--) {
                (/** @type {?} */ (this)).txtUsername.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clearPassword() {
        BrowserVisibility.waitUntilElementIsVisible(this.txtPassword);
        this.txtPassword.getAttribute('value').then((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            for (let i = value.length; i >= 0; i--) {
                this.txtPassword.sendKeys(protractor.Key.BACK_SPACE);
            }
        }));
    }
    /**
     * @return {?}
     */
    getUsernameTooltip() {
        BrowserVisibility.waitUntilElementIsVisible(this.usernameTooltip);
        return this.usernameTooltip.getText();
    }
    /**
     * @return {?}
     */
    getPasswordTooltip() {
        BrowserVisibility.waitUntilElementIsVisible(this.passwordTooltip);
        return this.passwordTooltip.getText();
    }
    /**
     * @return {?}
     */
    getLoginError() {
        BrowserVisibility.waitUntilElementIsVisible(this.loginTooltip);
        return this.loginTooltip.getText();
    }
    /**
     * @return {?}
     */
    checkLoginImgURL() {
        BrowserVisibility.waitUntilElementIsVisible(this.logoImg);
        return this.logoImg.getAttribute('src');
    }
    /**
     * @return {?}
     */
    checkUsernameInactive() {
        BrowserVisibility.waitUntilElementIsVisible(this.usernameInactive);
    }
    /**
     * @return {?}
     */
    checkPasswordInactive() {
        BrowserVisibility.waitUntilElementIsVisible(this.passwordInactive);
    }
    /**
     * @return {?}
     */
    checkUsernameHighlighted() {
        this.adfLogo.click();
        BrowserVisibility.waitUntilElementIsVisible(this.usernameHighlighted);
    }
    /**
     * @return {?}
     */
    checkPasswordHighlighted() {
        this.adfLogo.click();
        BrowserVisibility.waitUntilElementIsVisible(this.passwordHighlighted);
    }
    /**
     * @return {?}
     */
    checkUsernameTooltipIsNotVisible() {
        BrowserVisibility.waitUntilElementIsNotVisible(this.usernameTooltip);
    }
    /**
     * @return {?}
     */
    checkPasswordTooltipIsNotVisible() {
        BrowserVisibility.waitUntilElementIsNotVisible(this.passwordTooltip);
    }
    /**
     * @return {?}
     */
    getSignInButtonIsEnabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.signInButton);
        return this.signInButton.isEnabled();
    }
    /**
     * @param {?} userModel
     * @return {?}
     */
    loginToProcessServicesUsingUserModel(userModel) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.goToLoginPage();
            yield LocalStorageUtil.clearStorage();
            yield LocalStorageUtil.setStorageItem('providers', 'BPM');
            yield LocalStorageUtil.apiReset();
            this.login(userModel.email, userModel.password);
        });
    }
    /**
     * @param {?} userModel
     * @return {?}
     */
    loginToContentServicesUsingUserModel(userModel) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.goToLoginPage();
            yield LocalStorageUtil.clearStorage();
            yield LocalStorageUtil.setStorageItem('providers', 'ECM');
            yield LocalStorageUtil.apiReset();
            this.login(userModel.getId(), userModel.getPassword());
        });
    }
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    loginToContentServices(username, password) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.goToLoginPage();
            yield LocalStorageUtil.clearStorage();
            yield LocalStorageUtil.setStorageItem('providers', 'ECM');
            yield LocalStorageUtil.apiReset();
            this.waitForElements();
            this.login(username, password);
        });
    }
    /**
     * @return {?}
     */
    clickSignInButton() {
        BrowserVisibility.waitUntilElementIsVisible(this.signInButton);
        this.signInButton.click();
    }
    /**
     * @return {?}
     */
    clickSettingsIcon() {
        BrowserVisibility.waitUntilElementIsVisible(this.settingsIcon);
        this.settingsIcon.click();
    }
    /**
     * @return {?}
     */
    showPassword() {
        BrowserVisibility.waitUntilElementIsVisible(this.showPasswordElement);
        this.showPasswordElement.click();
    }
    /**
     * @return {?}
     */
    hidePassword() {
        BrowserVisibility.waitUntilElementIsVisible(this.hidePasswordElement);
        this.hidePasswordElement.click();
    }
    /**
     * @return {?}
     */
    getShownPassword() {
        return this.txtPassword.getAttribute('value');
    }
    /**
     * @return {?}
     */
    checkPasswordIsHidden() {
        BrowserVisibility.waitUntilElementIsVisible(this.txtPassword);
    }
    /**
     * @return {?}
     */
    checkRememberIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible(this.rememberMe);
    }
    /**
     * @return {?}
     */
    checkRememberIsNotDisplayed() {
        BrowserVisibility.waitUntilElementIsNotVisible(this.rememberMe);
    }
    /**
     * @return {?}
     */
    checkNeedHelpIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible(this.needHelp);
    }
    /**
     * @return {?}
     */
    checkNeedHelpIsNotDisplayed() {
        BrowserVisibility.waitUntilElementIsNotVisible(this.needHelp);
    }
    /**
     * @return {?}
     */
    checkRegisterDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible(this.register);
    }
    /**
     * @return {?}
     */
    checkRegisterIsNotDisplayed() {
        BrowserVisibility.waitUntilElementIsNotVisible(this.register);
    }
    /**
     * @return {?}
     */
    enableFooter() {
        this.formControllersPage.enableToggle(this.footerSwitch);
    }
    /**
     * @return {?}
     */
    disableFooter() {
        this.formControllersPage.disableToggle(this.footerSwitch);
    }
    /**
     * @return {?}
     */
    disableRememberMe() {
        this.formControllersPage.disableToggle(this.rememberMeSwitch);
    }
    /**
     * @return {?}
     */
    enableSuccessRouteSwitch() {
        this.formControllersPage.enableToggle(this.successRouteSwitch);
    }
    /**
     * @return {?}
     */
    enableLogoSwitch() {
        this.formControllersPage.enableToggle(this.logoSwitch);
    }
    /**
     * @param {?} route
     * @return {?}
     */
    enterSuccessRoute(route) {
        BrowserVisibility.waitUntilElementIsVisible(this.successRouteTxt);
        this.successRouteTxt.sendKeys('');
        this.successRouteTxt.clear();
        return this.successRouteTxt.sendKeys(route);
    }
    /**
     * @param {?} logo
     * @return {?}
     */
    enterLogo(logo) {
        BrowserVisibility.waitUntilElementIsVisible(this.logoTxt);
        this.logoTxt.sendKeys('');
        this.logoTxt.clear();
        return this.logoTxt.sendKeys(logo);
    }
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    login(username, password) {
        this.waitForElements();
        this.enterUsername(username);
        this.enterPassword(password);
        this.clickSignInButton();
        return BrowserVisibility.waitUntilElementIsVisible(this.header);
    }
}
if (false) {
    /** @type {?} */
    LoginPage.prototype.loginURL;
    /** @type {?} */
    LoginPage.prototype.formControllersPage;
    /** @type {?} */
    LoginPage.prototype.txtUsername;
    /** @type {?} */
    LoginPage.prototype.txtPassword;
    /** @type {?} */
    LoginPage.prototype.logoImg;
    /** @type {?} */
    LoginPage.prototype.successRouteTxt;
    /** @type {?} */
    LoginPage.prototype.logoTxt;
    /** @type {?} */
    LoginPage.prototype.usernameTooltip;
    /** @type {?} */
    LoginPage.prototype.passwordTooltip;
    /** @type {?} */
    LoginPage.prototype.loginTooltip;
    /** @type {?} */
    LoginPage.prototype.usernameInactive;
    /** @type {?} */
    LoginPage.prototype.passwordInactive;
    /** @type {?} */
    LoginPage.prototype.adfLogo;
    /** @type {?} */
    LoginPage.prototype.usernameHighlighted;
    /** @type {?} */
    LoginPage.prototype.passwordHighlighted;
    /** @type {?} */
    LoginPage.prototype.signInButton;
    /** @type {?} */
    LoginPage.prototype.showPasswordElement;
    /** @type {?} */
    LoginPage.prototype.hidePasswordElement;
    /** @type {?} */
    LoginPage.prototype.rememberMe;
    /** @type {?} */
    LoginPage.prototype.needHelp;
    /** @type {?} */
    LoginPage.prototype.register;
    /** @type {?} */
    LoginPage.prototype.footerSwitch;
    /** @type {?} */
    LoginPage.prototype.rememberMeSwitch;
    /** @type {?} */
    LoginPage.prototype.successRouteSwitch;
    /** @type {?} */
    LoginPage.prototype.logoSwitch;
    /** @type {?} */
    LoginPage.prototype.header;
    /** @type {?} */
    LoginPage.prototype.settingsIcon;
}
//# sourceMappingURL=data:application/json;base64,