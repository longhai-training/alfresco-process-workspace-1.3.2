/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { by } from 'protractor';
import { BrowserVisibility } from '../utils/browser-visibility';
export class FormControllersPage {
    /**
     * @param {?} toggle
     * @return {?}
     */
    enableToggle(toggle) {
        BrowserVisibility.waitUntilElementIsVisible(toggle);
        toggle.getAttribute('class').then((/**
         * @param {?} check
         * @return {?}
         */
        (check) => {
            if (check.indexOf('mat-checked') < 0) {
                BrowserVisibility.waitUntilElementIsClickable(toggle.all(by.css('div')).first());
                toggle.all(by.css('div')).first().click();
            }
        }));
    }
    /**
     * @param {?} toggle
     * @return {?}
     */
    disableToggle(toggle) {
        BrowserVisibility.waitUntilElementIsVisible(toggle);
        toggle.getAttribute('class').then((/**
         * @param {?} check
         * @return {?}
         */
        (check) => {
            if (check.indexOf('mat-checked') >= 0) {
                BrowserVisibility.waitUntilElementIsClickable(toggle.all(by.css('div')).first());
                toggle.all(by.css('div')).first().click();
            }
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sbGVyLnBhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXRlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvY29yZS9wYWdlcy9mb3JtLWNvbnRyb2xsZXIucGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRWhFLE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBRTVCLFlBQVksQ0FBQyxNQUFNO1FBQ2YsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN4QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxpQkFBaUIsQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNqRixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUM3QztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsTUFBTTtRQUNoQixpQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3hDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ25DLGlCQUFpQixDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ2pGLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzdDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBieSB9IGZyb20gJ3Byb3RyYWN0b3InO1xuaW1wb3J0IHsgQnJvd3NlclZpc2liaWxpdHkgfSBmcm9tICcuLi91dGlscy9icm93c2VyLXZpc2liaWxpdHknO1xuXG5leHBvcnQgY2xhc3MgRm9ybUNvbnRyb2xsZXJzUGFnZSB7XG5cbiAgICBlbmFibGVUb2dnbGUodG9nZ2xlKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodG9nZ2xlKTtcbiAgICAgICAgdG9nZ2xlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS50aGVuKChjaGVjaykgPT4ge1xuICAgICAgICAgICAgaWYgKGNoZWNrLmluZGV4T2YoJ21hdC1jaGVja2VkJykgPCAwKSB7XG4gICAgICAgICAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzQ2xpY2thYmxlKHRvZ2dsZS5hbGwoYnkuY3NzKCdkaXYnKSkuZmlyc3QoKSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlLmFsbChieS5jc3MoJ2RpdicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRpc2FibGVUb2dnbGUodG9nZ2xlKSB7XG4gICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc1Zpc2libGUodG9nZ2xlKTtcbiAgICAgICAgdG9nZ2xlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS50aGVuKChjaGVjaykgPT4ge1xuICAgICAgICAgICAgaWYgKGNoZWNrLmluZGV4T2YoJ21hdC1jaGVja2VkJykgPj0gMCkge1xuICAgICAgICAgICAgICAgIEJyb3dzZXJWaXNpYmlsaXR5LndhaXRVbnRpbEVsZW1lbnRJc0NsaWNrYWJsZSh0b2dnbGUuYWxsKGJ5LmNzcygnZGl2JykpLmZpcnN0KCkpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZS5hbGwoYnkuY3NzKCdkaXYnKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=