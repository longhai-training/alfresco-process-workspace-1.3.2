/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BrowserVisibility } from '../utils/browser-visibility';
import { element, by } from 'protractor';
export class ErrorPage {
    constructor() {
        this.errorPageCode = element(by.css('adf-error-content .adf-error-content-code'));
        this.errorPageTitle = element(by.css('adf-error-content .adf-error-content-title'));
        this.errorPageDescription = element(by.css('adf-error-content .adf-error-content-description'));
        this.backButton = element(by.id('adf-return-button'));
        this.secondButton = element(by.id('adf-secondary-button'));
    }
    /**
     * @return {?}
     */
    clickBackButton() {
        BrowserVisibility.waitUntilElementIsVisible(this.backButton);
        this.backButton.click();
    }
    /**
     * @return {?}
     */
    clickSecondButton() {
        BrowserVisibility.waitUntilElementIsVisible(this.secondButton);
        this.secondButton.click();
    }
    /**
     * @return {?}
     */
    checkErrorCode() {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageCode);
    }
    /**
     * @return {?}
     */
    getErrorCode() {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageCode);
        return this.errorPageCode.getText();
    }
    /**
     * @return {?}
     */
    getErrorTitle() {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageTitle);
        return this.errorPageTitle.getText();
    }
    /**
     * @return {?}
     */
    getErrorDescription() {
        BrowserVisibility.waitUntilElementIsVisible(this.errorPageDescription);
        return this.errorPageDescription.getText();
    }
}
if (false) {
    /** @type {?} */
    ErrorPage.prototype.errorPageCode;
    /** @type {?} */
    ErrorPage.prototype.errorPageTitle;
    /** @type {?} */
    ErrorPage.prototype.errorPageDescription;
    /** @type {?} */
    ErrorPage.prototype.backButton;
    /** @type {?} */
    ErrorPage.prototype.secondButton;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IucGFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3BhZ2VzL2Vycm9yLnBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFekMsTUFBTSxPQUFPLFNBQVM7SUFBdEI7UUFFSSxrQkFBYSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQztRQUM3RSxtQkFBYyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztRQUMvRSx5QkFBb0IsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDLENBQUM7UUFDM0YsZUFBVSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqRCxpQkFBWSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztJQThCMUQsQ0FBQzs7OztJQTVCRyxlQUFlO1FBQ1gsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELGlCQUFpQjtRQUNiLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsYUFBYTtRQUNULGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNmLGlCQUFpQixDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9DLENBQUM7Q0FDSjs7O0lBbENHLGtDQUE2RTs7SUFDN0UsbUNBQStFOztJQUMvRSx5Q0FBMkY7O0lBQzNGLCtCQUFpRDs7SUFDakQsaUNBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQnJvd3NlclZpc2liaWxpdHkgfSBmcm9tICcuLi91dGlscy9icm93c2VyLXZpc2liaWxpdHknO1xuaW1wb3J0IHsgZWxlbWVudCwgYnkgfSBmcm9tICdwcm90cmFjdG9yJztcblxuZXhwb3J0IGNsYXNzIEVycm9yUGFnZSB7XG5cbiAgICBlcnJvclBhZ2VDb2RlID0gZWxlbWVudChieS5jc3MoJ2FkZi1lcnJvci1jb250ZW50IC5hZGYtZXJyb3ItY29udGVudC1jb2RlJykpO1xuICAgIGVycm9yUGFnZVRpdGxlID0gZWxlbWVudChieS5jc3MoJ2FkZi1lcnJvci1jb250ZW50IC5hZGYtZXJyb3ItY29udGVudC10aXRsZScpKTtcbiAgICBlcnJvclBhZ2VEZXNjcmlwdGlvbiA9IGVsZW1lbnQoYnkuY3NzKCdhZGYtZXJyb3ItY29udGVudCAuYWRmLWVycm9yLWNvbnRlbnQtZGVzY3JpcHRpb24nKSk7XG4gICAgYmFja0J1dHRvbiA9IGVsZW1lbnQoYnkuaWQoJ2FkZi1yZXR1cm4tYnV0dG9uJykpO1xuICAgIHNlY29uZEJ1dHRvbiA9IGVsZW1lbnQoYnkuaWQoJ2FkZi1zZWNvbmRhcnktYnV0dG9uJykpO1xuXG4gICAgY2xpY2tCYWNrQnV0dG9uKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuYmFja0J1dHRvbik7XG4gICAgICAgIHRoaXMuYmFja0J1dHRvbi5jbGljaygpO1xuICAgIH1cblxuICAgIGNsaWNrU2Vjb25kQnV0dG9uKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuc2Vjb25kQnV0dG9uKTtcbiAgICAgICAgdGhpcy5zZWNvbmRCdXR0b24uY2xpY2soKTtcbiAgICB9XG5cbiAgICBjaGVja0Vycm9yQ29kZSgpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmVycm9yUGFnZUNvZGUpO1xuICAgIH1cblxuICAgIGdldEVycm9yQ29kZSgpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmVycm9yUGFnZUNvZGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvclBhZ2VDb2RlLmdldFRleHQoKTtcbiAgICB9XG5cbiAgICBnZXRFcnJvclRpdGxlKCkge1xuICAgICAgICBCcm93c2VyVmlzaWJpbGl0eS53YWl0VW50aWxFbGVtZW50SXNWaXNpYmxlKHRoaXMuZXJyb3JQYWdlVGl0bGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvclBhZ2VUaXRsZS5nZXRUZXh0KCk7XG4gICAgfVxuXG4gICAgZ2V0RXJyb3JEZXNjcmlwdGlvbigpIHtcbiAgICAgICAgQnJvd3NlclZpc2liaWxpdHkud2FpdFVudGlsRWxlbWVudElzVmlzaWJsZSh0aGlzLmVycm9yUGFnZURlc2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JQYWdlRGVzY3JpcHRpb24uZ2V0VGV4dCgpO1xuICAgIH1cbn1cbiJdfQ==