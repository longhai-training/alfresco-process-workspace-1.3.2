/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { browser, by, element, protractor } from 'protractor';
import { BrowserVisibility } from '../utils/browser-visibility';
export class DataTableComponentPage {
    /**
     * @param {?=} rootElement
     */
    constructor(rootElement = element.all(by.css('adf-datatable')).first()) {
        this.rows = by.css(`adf-datatable div[class*='adf-datatable-body'] div[class*='adf-datatable-row']`);
        this.rootElement = rootElement;
        this.list = this.rootElement.all(by.css(`div[class*='adf-datatable-body'] div[class*='adf-datatable-row']`));
        this.contents = this.rootElement.all(by.css('div[class="adf-datatable-body"] span'));
        this.tableBody = this.rootElement.all(by.css(`div[class='adf-datatable-body']`)).first();
        this.spinner = this.rootElement.element(by.css('mat-progress-spinner'));
        this.allColumns = this.rootElement.all(by.css('div[data-automation-id*="auto_id_entry."]'));
        this.selectedRowNumber = this.rootElement.element(by.css(`div[class*='is-selected'] div[data-automation-id*='text_']`));
        this.allSelectedRows = this.rootElement.all(by.css(`div[class*='is-selected']`));
        this.selectAll = this.rootElement.element(by.css(`div[class*='adf-datatable-header'] mat-checkbox`));
        this.copyColumnTooltip = this.rootElement.element(by.css(`adf-copy-content-tooltip span`));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkAllRowsButtonIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkAllRows() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).selectAll).then((/**
         * @return {?}
         */
        () => {
            (/** @type {?} */ (this)).selectAll.click();
            BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll.element(by.css('input[aria-checked="true"]')));
        }));
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    uncheckAllRows() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectAll);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).selectAll).then((/**
         * @return {?}
         */
        () => {
            (/** @type {?} */ (this)).selectAll.click();
            BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).selectAll.element(by.css('input[aria-checked="true"]')));
        }));
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    clickCheckbox(columnName, columnValue) {
        /** @type {?} */
        const checkbox = this.getRowCheckbox(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsClickable(checkbox);
        checkbox.click();
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    checkRowIsNotChecked(columnName, columnValue) {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.getRowCheckbox(columnName, columnValue).element(by.css('input[aria-checked="true"]')));
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    checkRowIsChecked(columnName, columnValue) {
        /** @type {?} */
        const rowCheckbox = this.getRowCheckbox(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(rowCheckbox.element(by.css('input[aria-checked="true"]')));
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    getRowCheckbox(columnName, columnValue) {
        return this.getRow(columnName, columnValue)
            .element(by.css('mat-checkbox'));
    }
    /**
     * @return {?}
     */
    checkNoRowIsSelected() {
        BrowserVisibility.waitUntilElementIsNotOnPage(this.selectedRowNumber);
    }
    /**
     * @return {?}
     */
    getNumberOfSelectedRows() {
        return this.allSelectedRows.count();
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    selectRowWithKeyboard(columnName, columnValue) {
        /** @type {?} */
        const row = this.getRow(columnName, columnValue);
        browser.actions().sendKeys(protractor.Key.COMMAND).click(row).perform();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    selectRow(columnName, columnValue) {
        /** @type {?} */
        const row = (/** @type {?} */ (this)).getRow(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        BrowserVisibility.waitUntilElementIsClickable(row);
        row.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    checkRowIsSelected(columnName, columnValue) {
        /** @type {?} */
        const selectedRow = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue).element(by.xpath(`ancestor::div[contains(@class, 'is-selected')]`));
        BrowserVisibility.waitUntilElementIsVisible(selectedRow);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    checkRowIsNotSelected(columnName, columnValue) {
        /** @type {?} */
        const selectedRow = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue).element(by.xpath(`ancestor::div[contains(@class, 'is-selected')]`));
        BrowserVisibility.waitUntilElementIsNotOnPage(selectedRow);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} identifyingColumn
     * @param {?} identifyingValue
     * @param {?} columnName
     * @return {?}
     */
    getColumnValueForRow(identifyingColumn, identifyingValue, columnName) {
        /** @type {?} */
        const row = this.getRow(identifyingColumn, identifyingValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        /** @type {?} */
        const rowColumn = row.element(by.css(`div[title="${columnName}"] span`));
        BrowserVisibility.waitUntilElementIsVisible(rowColumn);
        return rowColumn.getText();
    }
    /**
     * Check the list is sorted.
     *
     * @param {?} sortOrder
     * @param {?} locator
     * @return {?} 'true' if the list is sorted as expected and 'false' if it isn't
     */
    checkListIsSorted(sortOrder, locator) {
        /** @type {?} */
        const deferred = protractor.promise.defer();
        /** @type {?} */
        const column = element.all(by.css(`div[title='${locator}'] span`));
        BrowserVisibility.waitUntilElementIsVisible(column.first());
        /** @type {?} */
        const initialList = [];
        column.each((/**
         * @param {?} currentElement
         * @return {?}
         */
        function (currentElement) {
            currentElement.getText().then((/**
             * @param {?} text
             * @return {?}
             */
            function (text) {
                initialList.push(text);
            }));
        })).then((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            let sortedList = initialList;
            sortedList = sortedList.sort();
            if (sortOrder === false) {
                sortedList = sortedList.reverse();
            }
            deferred.fulfill(initialList.toString() === sortedList.toString());
        }));
        return deferred.promise;
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    rightClickOnRow(columnName, columnValue) {
        /** @type {?} */
        const row = this.getRow(columnName, columnValue);
        browser.actions().click(row, protractor.Button.RIGHT).perform();
        BrowserVisibility.waitUntilElementIsVisible(element(by.id('adf-context-menu-content')));
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    getTooltip(columnName, columnValue) {
        return this.getCellElementByValue(columnName, columnValue).getAttribute('title');
    }
    /**
     * @param {?} filename
     * @return {?}
     */
    getFileHyperlink(filename) {
        return element(by.cssContainingText('adf-name-column[class*="adf-datatable-link"] span', filename));
    }
    /**
     * @return {?}
     */
    numberOfRows() {
        return this.rootElement.all(this.rows).count();
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getAllRowsColumnValues(column) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const columnLocator = by.css("adf-datatable div[class*='adf-datatable-body'] div[class*='adf-datatable-row'] div[title='" + column + "'] span");
            BrowserVisibility.waitUntilElementIsVisible(element.all(columnLocator).first());
            /** @type {?} */
            const initialList = yield element.all(columnLocator).getText();
            return initialList.filter((/**
             * @param {?} el
             * @return {?}
             */
            (el) => el));
        });
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    getRowsWithSameColumnValues(columnName, columnValue) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const columnLocator = by.css(`div[title='${columnName}'] div[data-automation-id="text_${columnValue}"] span`);
            BrowserVisibility.waitUntilElementIsVisible(this.rootElement.all(columnLocator).first());
            return this.rootElement.all(columnLocator).getText();
        });
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    doubleClickRow(columnName, columnValue) {
        /** @type {?} */
        const row = (/** @type {?} */ (this)).getRow(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        BrowserVisibility.waitUntilElementIsClickable(row);
        row.click();
        (/** @type {?} */ (this)).checkRowIsSelected(columnName, columnValue);
        browser.actions().sendKeys(protractor.Key.ENTER).perform();
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    waitForTableBody() {
        BrowserVisibility.waitUntilElementIsVisible(this.tableBody);
    }
    /**
     * @param {?} detail
     * @return {?}
     */
    getFirstElementDetail(detail) {
        /** @type {?} */
        const firstNode = element.all(by.css(`adf-datatable div[title="${detail}"] span`)).first();
        return firstNode.getText();
    }
    /**
     * @param {?} detail
     * @return {?}
     */
    geCellElementDetail(detail) {
        return element.all(by.css(`adf-datatable div[title="${detail}"] span`));
    }
    /**
     * @param {?} sortOrder
     * @param {?} column
     * @return {?}
     */
    sortByColumn(sortOrder, column) {
        /** @type {?} */
        const locator = by.css(`div[data-automation-id="auto_id_${column}"]`);
        BrowserVisibility.waitUntilElementIsVisible(element(locator));
        return element(locator).getAttribute('class').then((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (sortOrder === true) {
                if (!result.includes('sorted-asc')) {
                    if (result.includes('sorted-desc') || result.includes('sortable')) {
                        element(locator).click();
                    }
                }
            }
            else {
                if (result.includes('sorted-asc')) {
                    element(locator).click();
                }
                else if (result.includes('sortable')) {
                    element(locator).click();
                    element(locator).click();
                }
            }
            return Promise.resolve();
        }));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    checkContentIsDisplayed(columnName, columnValue) {
        /** @type {?} */
        const row = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsVisible(row);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    checkContentIsNotDisplayed(columnName, columnValue) {
        /** @type {?} */
        const row = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        BrowserVisibility.waitUntilElementIsNotOnPage(row);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    getRow(columnName, columnValue) {
        /** @type {?} */
        const row = this.rootElement.all(by.css(`div[title="${columnName}"] div[data-automation-id="text_${columnValue}"]`)).first()
            .element(by.xpath(`ancestor::div[contains(@class, 'adf-datatable-row')]`));
        BrowserVisibility.waitUntilElementIsVisible(row);
        return row;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    contentInPosition(position) {
        BrowserVisibility.waitUntilElementIsVisible(this.contents);
        return this.contents.get(position - 1).getText();
    }
    /**
     * @param {?} columnName
     * @param {?} columnValue
     * @return {?}
     */
    getCellElementByValue(columnName, columnValue) {
        return this.rootElement.all(by.css(`div[title="${columnName}"] div[data-automation-id="text_${columnValue}"] span`)).first();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkSpinnerIsDisplayed() {
        BrowserVisibility.waitUntilElementIsPresent((/** @type {?} */ (this)).spinner);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkSpinnerIsNotDisplayed() {
        BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).spinner);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    tableIsLoaded() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).rootElement);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} column
     * @return {THIS}
     */
    checkColumnIsDisplayed(column) {
        BrowserVisibility.waitUntilElementIsVisible(element(by.css(`div[data-automation-id="auto_id_entry.${column}"]`)));
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getNumberOfColumns() {
        return this.allColumns.count();
    }
    /**
     * @return {?}
     */
    getNumberOfRows() {
        return this.list.count();
    }
    /**
     * @param {?} rowNumber
     * @param {?} columnName
     * @return {?}
     */
    getCellByRowNumberAndColumnName(rowNumber, columnName) {
        return this.list.get(rowNumber).element(by.css(`div[title="${columnName}"] span`));
    }
    /**
     * @param {?} rowColumn
     * @param {?} rowContent
     * @param {?} columnName
     * @return {?}
     */
    getCellByRowContentAndColumn(rowColumn, rowContent, columnName) {
        return this.getRow(rowColumn, rowContent).element(by.css(`div[title='${columnName}']`));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    selectRowByContent(content) {
        /** @type {?} */
        const row = this.getCellByContent(content);
        return row.click();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} folderName
     * @return {THIS}
     */
    checkRowByContentIsSelected(folderName) {
        /** @type {?} */
        const selectedRow = (/** @type {?} */ (this)).getCellByContent(folderName).element(by.xpath(`ancestor::div[contains(@class, 'is-selected')]`));
        BrowserVisibility.waitUntilElementIsVisible(selectedRow);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    getCellByContent(content) {
        /** @type {?} */
        const cell = this.rootElement.element(by.cssContainingText(`div[class*='adf-datatable-row'] div[class*='adf-name-location-cell-name']`, content));
        BrowserVisibility.waitUntilElementIsVisible(cell);
        return cell;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    clickRowByContent(name) {
        /** @type {?} */
        const resultElement = this.rootElement.all(by.css(`div[data-automation-id='${name}']`)).first();
        BrowserVisibility.waitUntilElementIsVisible(resultElement);
        BrowserVisibility.waitUntilElementIsClickable(resultElement);
        resultElement.click();
    }
    /**
     * @return {?}
     */
    getCopyContentTooltip() {
        BrowserVisibility.waitUntilElementIsVisible(this.copyColumnTooltip);
        return this.copyColumnTooltip.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    copyContentTooltipIsNotDisplayed() {
        BrowserVisibility.waitUntilElementIsNotPresent((/** @type {?} */ (this)).copyColumnTooltip);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    mouseOverColumn(columnName, columnValue) {
        /** @type {?} */
        const column = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        (/** @type {?} */ (this)).mouseOverElement(column);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} elem
     * @return {THIS}
     */
    mouseOverElement(elem) {
        BrowserVisibility.waitUntilElementIsVisible(elem);
        browser.actions().mouseMove(elem).perform();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columnName
     * @param {?} columnValue
     * @return {THIS}
     */
    clickColumn(columnName, columnValue) {
        /** @type {?} */
        const column = (/** @type {?} */ (this)).getCellElementByValue(columnName, columnValue);
        (/** @type {?} */ (this)).clickElement(column);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} elem
     * @return {THIS}
     */
    clickElement(elem) {
        BrowserVisibility.waitUntilElementIsVisible(elem);
        BrowserVisibility.waitUntilElementIsClickable(elem);
        elem.click();
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    DataTableComponentPage.prototype.rootElement;
    /** @type {?} */
    DataTableComponentPage.prototype.list;
    /** @type {?} */
    DataTableComponentPage.prototype.contents;
    /** @type {?} */
    DataTableComponentPage.prototype.tableBody;
    /** @type {?} */
    DataTableComponentPage.prototype.spinner;
    /** @type {?} */
    DataTableComponentPage.prototype.rows;
    /** @type {?} */
    DataTableComponentPage.prototype.allColumns;
    /** @type {?} */
    DataTableComponentPage.prototype.selectedRowNumber;
    /** @type {?} */
    DataTableComponentPage.prototype.allSelectedRows;
    /** @type {?} */
    DataTableComponentPage.prototype.selectAll;
    /** @type {?} */
    DataTableComponentPage.prototype.copyColumnTooltip;
}
//# sourceMappingURL=data:application/json;base64,