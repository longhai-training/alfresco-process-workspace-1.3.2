/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { browser, protractor } from 'protractor';
/** @type {?} */
const until = protractor.ExpectedConditions;
/** @type {?} */
const DEFAULT_TIMEOUT = global['TestConfig'] ? global['TestConfig'].main.timeout : 40000;
export class BrowserVisibility {
    /*
         * Wait for element is visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsVisible(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        /** @type {?} */
        let isDisplayed = false;
        return browser.wait((/**
         * @return {?}
         */
        () => {
            browser.waitForAngularEnabled();
            elementToCheck.isDisplayed().then((/**
             * @return {?}
             */
            () => {
                isDisplayed = true;
            }), (/**
             * @return {?}
             */
            () => {
                isDisplayed = false;
            }));
            return isDisplayed;
        }), waitTimeout, 'Element is not visible ' + elementToCheck.locator());
    }
    /*
         * Wait for element to be clickable
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsClickable(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        /** @type {?} */
        let isDisplayed = false;
        return browser.wait((/**
         * @return {?}
         */
        () => {
            browser.waitForAngularEnabled();
            elementToCheck.isDisplayed().then((/**
             * @return {?}
             */
            () => {
                isDisplayed = true;
            }), (/**
             * @return {?}
             */
            () => {
                isDisplayed = false;
            }));
            return isDisplayed;
        }), waitTimeout, 'Element is not visible ' + elementToCheck.locator());
    }
    /*
       * Wait for element to not be visible
       */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsStale(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        return browser.wait(until.stalenessOf(elementToCheck), waitTimeout, 'Element is not in stale ' + elementToCheck.locator());
    }
    /*
         * Wait for element to not be visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsNotVisible(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        /** @type {?} */
        let isPresent = false;
        return browser.wait((/**
         * @return {?}
         */
        () => {
            browser.waitForAngularEnabled();
            elementToCheck.isPresent().then((/**
             * @param {?} present
             * @return {?}
             */
            (present) => {
                isPresent = !present;
            }));
            return isPresent;
        }), waitTimeout, 'Element is Visible and it should not' + elementToCheck.locator());
    }
    /*
         * Wait for element to have value
         */
    /**
     * @param {?} elementToCheck
     * @param {?} elementValue
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementHasValue(elementToCheck, elementValue, waitTimeout = DEFAULT_TIMEOUT) {
        browser.waitForAngularEnabled();
        browser.wait(until.textToBePresentInElementValue(elementToCheck, elementValue), waitTimeout, 'Element doesn\'t have a value ' + elementToCheck.locator());
    }
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsOnPage(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        return browser.wait(browser.wait(until.visibilityOf(elementToCheck)), waitTimeout);
    }
    /*
         * Wait for element to not be visible
         */
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsNotOnPage(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        return browser.wait(until.not(until.visibilityOf(elementToCheck)), waitTimeout, 'Element is not in the page ' + elementToCheck.locator());
    }
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsPresent(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        browser.waitForAngularEnabled();
        return browser.wait(until.presenceOf(elementToCheck), waitTimeout, 'Element is not present ' + elementToCheck.locator());
    }
    /**
     * @param {?} elementToCheck
     * @param {?=} waitTimeout
     * @return {?}
     */
    static waitUntilElementIsNotPresent(elementToCheck, waitTimeout = DEFAULT_TIMEOUT) {
        return browser.wait(until.not(until.presenceOf(elementToCheck)), waitTimeout, 'Element is not in the page ' + elementToCheck.locator());
    }
}
//# sourceMappingURL=data:application/json;base64,