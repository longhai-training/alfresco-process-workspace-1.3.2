/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class RolesService {
    /**
     * @param {?} api
     */
    constructor(api) {
        this.api = api;
    }
    /**
     * @param {?} roleName
     * @return {?}
     */
    getRoleIdByRoleName(roleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/roles`;
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            let roleId;
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            for (const key in data) {
                if (data[key].name === roleName) {
                    roleId = data[key].id;
                }
            }
            return roleId;
        });
    }
    /**
     * @param {?} groupId
     * @param {?} clientId
     * @param {?} clientRoleName
     * @return {?}
     */
    getClientRoleIdByRoleName(groupId, clientId, clientRoleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/groups/${groupId}/role-mappings/clients/${clientId}/available`;
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            let clientRoleId;
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            for (const key in data) {
                if (data[key].name === clientRoleName) {
                    clientRoleId = data[key].id;
                }
            }
            return clientRoleId;
        });
    }
}
if (false) {
    /** @type {?} */
    RolesService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2FjdGlvbnMvaWRlbnRpdHkvcm9sZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsTUFBTSxPQUFPLFlBQVk7Ozs7SUFJckIsWUFBWSxHQUFlO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBRUssbUJBQW1CLENBQUMsUUFBUTs7O2tCQUN4QixJQUFJLEdBQUcsUUFBUTs7a0JBQ2YsTUFBTSxHQUFHLEtBQUs7O2dCQUNoQixNQUFNOztrQkFDSixXQUFXLEdBQUcsRUFBRTs7a0JBQUUsUUFBUSxHQUFHLEVBQUU7O2tCQUUvQixJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQztZQUN6RixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDcEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQ3pCO2FBQ0o7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDO0tBQUE7Ozs7Ozs7SUFFSyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWM7OztrQkFDdkQsSUFBSSxHQUFHLFdBQVcsT0FBTywwQkFBMEIsUUFBUSxZQUFZOztrQkFDdkUsTUFBTSxHQUFHLEtBQUs7O2dCQUNoQixZQUFZOztrQkFDVixXQUFXLEdBQUcsRUFBRTs7a0JBQUUsUUFBUSxHQUFHLEVBQUU7O2tCQUUvQixJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQztZQUN6RixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDcEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRTtvQkFDbkMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQy9CO2FBQ0o7WUFDRCxPQUFPLFlBQVksQ0FBQztRQUN4QixDQUFDO0tBQUE7Q0FFSjs7O0lBcENHLDJCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hcGkuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBSb2xlc1NlcnZpY2Uge1xuXG4gICAgYXBpOiBBcGlTZXJ2aWNlO1xuXG4gICAgY29uc3RydWN0b3IoYXBpOiBBcGlTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFJvbGVJZEJ5Um9sZU5hbWUocm9sZU5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGAvcm9sZXNgO1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgbGV0IHJvbGVJZDtcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7fSwgcG9zdEJvZHkgPSB7fTtcblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkucGVyZm9ybUlkZW50aXR5T3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHBvc3RCb2R5KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGFba2V5XS5uYW1lID09PSByb2xlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJvbGVJZCA9IGRhdGFba2V5XS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm9sZUlkO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENsaWVudFJvbGVJZEJ5Um9sZU5hbWUoZ3JvdXBJZCwgY2xpZW50SWQsIGNsaWVudFJvbGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgL2dyb3Vwcy8ke2dyb3VwSWR9L3JvbGUtbWFwcGluZ3MvY2xpZW50cy8ke2NsaWVudElkfS9hdmFpbGFibGVgO1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcbiAgICAgICAgbGV0IGNsaWVudFJvbGVJZDtcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7fSwgcG9zdEJvZHkgPSB7fTtcblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkucGVyZm9ybUlkZW50aXR5T3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHBvc3RCb2R5KTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGFba2V5XS5uYW1lID09PSBjbGllbnRSb2xlTmFtZSkge1xuICAgICAgICAgICAgICAgIGNsaWVudFJvbGVJZCA9IGRhdGFba2V5XS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpZW50Um9sZUlkO1xuICAgIH1cblxufVxuIl19