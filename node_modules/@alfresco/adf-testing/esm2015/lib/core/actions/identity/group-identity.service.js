/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { StringUtil } from '../../utils/string.util';
export class GroupIdentityService {
    /**
     * @param {?} api
     */
    constructor(api) {
        this.api = api;
    }
    /**
     * @param {?=} groupName
     * @return {?}
     */
    createIdentityGroup(groupName = StringUtil.generateRandomString(5)) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.createGroup(groupName);
            /** @type {?} */
            const group = yield this.getGroupInfoByGroupName(groupName);
            return group;
        });
    }
    /**
     * @param {?} groupId
     * @return {?}
     */
    deleteIdentityGroup(groupId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.deleteGroup(groupId);
        });
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    createGroup(groupName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/groups';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {
                'name': groupName + 'TestGroup'
            };
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} groupId
     * @return {?}
     */
    deleteGroup(groupId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/groups/${groupId}`;
            /** @type {?} */
            const method = 'DELETE';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    getGroupInfoByGroupName(groupName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/groups`;
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = { 'search': groupName };
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data[0];
        });
    }
    /**
     * @param {?} groupId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    assignRole(groupId, roleId, roleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/groups/${groupId}/role-mappings/realm`;
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = [{ 'id': roleId, 'name': roleName }];
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * Add client roles.
     * @param {?} groupId ID of the target group
     * @param {?} clientId ID of the client
     * @param {?} roleId ID of the clientRole
     * @param {?} roleName of the clientRole
     * @return {?}
     */
    addClientRole(groupId, clientId, roleId, roleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/groups/${groupId}/role-mappings/clients/${clientId}`;
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = [{
                    'id': roleId,
                    'name': roleName,
                    'composite': false,
                    'clientRole': true,
                    'containerId': clientId
                }];
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * Gets the client ID using the app name.
     * @param {?} applicationName Name of the app
     * @return {?} client ID string
     */
    getClientIdByApplicationName(applicationName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/clients`;
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = { clientId: applicationName };
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data[0].id;
        });
    }
}
if (false) {
    /** @type {?} */
    GroupIdentityService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,