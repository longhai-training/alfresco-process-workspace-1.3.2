/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { UserModel } from '../../models/user.model';
export class IdentityService {
    /**
     * @param {?} api
     */
    constructor(api) {
        this.api = api;
    }
    /**
     * @param {?=} user
     * @return {?}
     */
    createIdentityUser(user = new UserModel()) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.createUser(user);
            /** @type {?} */
            const userIdentity = yield this.getUserInfoByUsername(user.username);
            yield this.resetPassword(userIdentity.id, user.password);
            user.idIdentityService = userIdentity.id;
            return user;
        });
    }
    /**
     * @param {?} user
     * @return {?}
     */
    createIdentityUserAndSyncECMBPM(user) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.api.config.provider === 'ECM' || this.api.config.provider === 'ALL') {
                /** @type {?} */
                const createUser = (/** @type {?} */ ({
                    firstName: user.firstName,
                    lastName: user.lastName,
                    password: user.password,
                    email: user.email,
                    id: user.email
                }));
                yield this.api.apiService.core.peopleApi.addPerson(createUser);
            }
            if (this.api.config.provider === 'BPM' || this.api.config.provider === 'ALL') {
                yield this.api.apiService.activiti.adminUsersApi.createNewUser({
                    email: user.email,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    password: user.password,
                    type: 'enterprise',
                    tenantId: 1,
                    company: null
                });
            }
            yield this.createIdentityUser(user);
        });
    }
    /**
     * @param {?} userId
     * @return {?}
     */
    deleteIdentityUser(userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.deleteUser(userId);
        });
    }
    /**
     * @param {?} user
     * @return {?}
     */
    createUser(user) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/users';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {
                'username': user.username,
                'firstName': user.firstName,
                'lastName': user.lastName,
                'enabled': true,
                'email': user.email
            };
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} userId
     * @return {?}
     */
    deleteUser(userId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/users/${userId}`;
            /** @type {?} */
            const method = 'DELETE';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} username
     * @return {?}
     */
    getUserInfoByUsername(username) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/users`;
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = { 'username': username };
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data[0];
        });
    }
    /**
     * @param {?} id
     * @param {?} password
     * @return {?}
     */
    resetPassword(id, password) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/users/${id}/reset-password`;
            /** @type {?} */
            const method = 'PUT';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = { 'type': 'password', 'value': password, 'temporary': false };
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} userId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    assignRole(userId, roleId, roleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/users/${userId}/role-mappings/realm`;
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = [{ 'id': roleId, 'name': roleName }];
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} userId
     * @param {?} clientId
     * @param {?} roleId
     * @param {?} roleName
     * @return {?}
     */
    deleteClientRole(userId, clientId, roleId, roleName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = `/users/${userId}/role-mappings/clients/${clientId}`;
            /** @type {?} */
            const method = 'DELETE';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = [{
                    'id': roleId,
                    'name': roleName,
                    'composite': false,
                    'clientRole': true,
                    'containerId': clientId
                }];
            /** @type {?} */
            const data = yield this.api.performIdentityOperation(path, method, queryParams, postBody);
            return data;
        });
    }
}
if (false) {
    /** @type {?} */
    IdentityService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,