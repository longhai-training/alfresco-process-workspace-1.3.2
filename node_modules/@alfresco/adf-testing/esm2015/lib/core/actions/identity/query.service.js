/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class QueryService {
    /**
     * @param {?} api
     */
    constructor(api) {
        this.api = api;
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    getProcessInstanceTasks(processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/query/v1/process-instances/' + processInstanceId + '/tasks';
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} processInstanceId
     * @param {?} appName
     * @return {?}
     */
    getProcessInstanceSubProcesses(processInstanceId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/query/v1/process-instances/' + processInstanceId + '/subprocesses';
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, {});
            return data;
        });
    }
}
if (false) {
    /** @type {?} */
    QueryService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2FjdGlvbnMvaWRlbnRpdHkvcXVlcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsTUFBTSxPQUFPLFlBQVk7Ozs7SUFJckIsWUFBWSxHQUFlO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7Ozs7OztJQUVLLHVCQUF1QixDQUFDLGlCQUFpQixFQUFFLE9BQU87OztrQkFDOUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsOEJBQThCLEdBQUcsaUJBQWlCLEdBQUcsUUFBUTs7a0JBQ3BGLE1BQU0sR0FBRyxLQUFLOztrQkFFZCxXQUFXLEdBQUcsRUFBRTs7a0JBQUUsUUFBUSxHQUFHLEVBQUU7O2tCQUUvQixJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQztZQUNwRixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0tBQUE7Ozs7OztJQUVLLDhCQUE4QixDQUFDLGlCQUFpQixFQUFFLE9BQU87OztrQkFDckQsSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLEdBQUcsOEJBQThCLEdBQUcsaUJBQWlCLEdBQUcsZUFBZTs7a0JBQzNGLE1BQU0sR0FBRyxLQUFLOztrQkFFZCxXQUFXLEdBQUcsRUFBRTs7a0JBRWhCLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDO1lBQzlFLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtDQUVKOzs7SUExQkcsMkJBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2FwaS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIFF1ZXJ5U2VydmljZSB7XG5cbiAgICBhcGk6IEFwaVNlcnZpY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihhcGk6IEFwaVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UHJvY2Vzc0luc3RhbmNlVGFza3MocHJvY2Vzc0luc3RhbmNlSWQsIGFwcE5hbWUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICcvJyArIGFwcE5hbWUgKyAnL3F1ZXJ5L3YxL3Byb2Nlc3MtaW5zdGFuY2VzLycgKyBwcm9jZXNzSW5zdGFuY2VJZCArICcvdGFza3MnO1xuICAgICAgICBjb25zdCBtZXRob2QgPSAnR0VUJztcblxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IHt9LCBwb3N0Qm9keSA9IHt9O1xuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmFwaS5wZXJmb3JtQnBtT3BlcmF0aW9uKHBhdGgsIG1ldGhvZCwgcXVlcnlQYXJhbXMsIHBvc3RCb2R5KTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UHJvY2Vzc0luc3RhbmNlU3ViUHJvY2Vzc2VzKHByb2Nlc3NJbnN0YW5jZUlkLCBhcHBOYW1lKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSAnLycgKyBhcHBOYW1lICsgJy9xdWVyeS92MS9wcm9jZXNzLWluc3RhbmNlcy8nICsgcHJvY2Vzc0luc3RhbmNlSWQgKyAnL3N1YnByb2Nlc3Nlcyc7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdHRVQnO1xuXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0ge307XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuYXBpLnBlcmZvcm1CcG1PcGVyYXRpb24ocGF0aCwgbWV0aG9kLCBxdWVyeVBhcmFtcywge30pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbn1cbiJdfQ==