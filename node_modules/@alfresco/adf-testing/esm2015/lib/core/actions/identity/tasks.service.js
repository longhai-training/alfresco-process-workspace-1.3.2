/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class TasksService {
    /**
     * @param {?} api
     */
    constructor(api) {
        this.api = api;
    }
    /**
     * @param {?} taskName
     * @param {?} appName
     * @param {?=} options
     * @return {?}
     */
    createStandaloneTask(taskName, appName, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/tasks';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = Object.assign({ 'name': taskName, 'payloadType': 'CreateTaskPayload' }, options);
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    completeTask(taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/tasks/' + taskId + '/complete';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = { 'payloadType': 'CompleteTaskPayload' };
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    claimTask(taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/tasks/' + taskId + '/claim';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    deleteTask(taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/tasks/' + taskId;
            /** @type {?} */
            const method = 'DELETE';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    createAndCompleteTask(taskName, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const task = yield this.createStandaloneTask(taskName, appName);
            yield this.claimTask(task.entry.id, appName);
            yield this.completeTask(task.entry.id, appName);
            return task;
        });
    }
    /**
     * @param {?} taskId
     * @param {?} appName
     * @return {?}
     */
    getTask(taskId, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/query/v1/tasks/' + taskId;
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
    /**
     * @param {?} taskName
     * @param {?} appName
     * @return {?}
     */
    getTaskId(taskName, appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/query/v1/tasks';
            /** @type {?} */
            const method = 'GET';
            /** @type {?} */
            const queryParams = { name: taskName };
            /** @type {?} */
            const postBody = {};
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data.list.entries[0].entry.id;
        });
    }
    /**
     * @param {?} parentTaskId
     * @param {?} appName
     * @param {?} name
     * @return {?}
     */
    createStandaloneSubtask(parentTaskId, appName, name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const path = '/' + appName + '/rb/v1/tasks';
            /** @type {?} */
            const method = 'POST';
            /** @type {?} */
            const queryParams = {};
            /** @type {?} */
            const postBody = { 'name': name, 'parentTaskId': parentTaskId, 'payloadType': 'CreateTaskPayload' };
            /** @type {?} */
            const data = yield this.api.performBpmOperation(path, method, queryParams, postBody);
            return data;
        });
    }
}
if (false) {
    /** @type {?} */
    TasksService.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,