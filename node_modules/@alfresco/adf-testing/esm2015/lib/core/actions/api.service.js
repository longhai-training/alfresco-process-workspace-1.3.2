/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiCompatibility as AlfrescoApi } from '@alfresco/js-api';
export class ApiService {
    /**
     * @param {?} clientId
     * @param {?} host
     * @param {?} hostSso
     * @param {?} provider
     */
    constructor(clientId, host, hostSso, provider) {
        this.config = {
            provider: provider,
            hostBpm: host,
            hostEcm: host,
            authType: 'OAUTH',
            oauth2: {
                host: hostSso,
                clientId: clientId,
                scope: 'openid',
                secret: '',
                implicitFlow: false,
                silentLogin: false,
                redirectUri: '/',
                redirectUriLogout: '/logout'
            }
        };
        this.apiService = new AlfrescoApi(this.config);
    }
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    login(username, password) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.apiService.login(username, password);
        });
    }
    /**
     * @param {?} path
     * @param {?} method
     * @param {?} queryParams
     * @param {?} postBody
     * @return {?}
     */
    performBpmOperation(path, method, queryParams, postBody) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const uri = this.config.hostBpm + path;
            /** @type {?} */
            const pathParams = {};
            /** @type {?} */
            const formParams = {};
            /** @type {?} */
            const contentTypes = ['application/json'];
            /** @type {?} */
            const accepts = ['application/json'];
            /** @type {?} */
            const headerParams = {
                'Authorization': 'bearer ' + this.apiService.oauth2Auth.token
            };
            return this.apiService.processClient.callCustomApi(uri, method, pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, Object)
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                throw (error);
            }));
        });
    }
    /**
     * @param {?} path
     * @param {?} method
     * @param {?} queryParams
     * @param {?} postBody
     * @return {?}
     */
    performIdentityOperation(path, method, queryParams, postBody) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const uri = this.config.oauth2.host.replace('/realms', '/admin/realms') + path;
            /** @type {?} */
            const pathParams = {};
            /** @type {?} */
            const formParams = {};
            /** @type {?} */
            const contentTypes = ['application/json'];
            /** @type {?} */
            const accepts = ['application/json'];
            /** @type {?} */
            const headerParams = {
                'Authorization': 'bearer ' + this.apiService.oauth2Auth.token
            };
            return this.apiService.processClient.callCustomApi(uri, method, pathParams, queryParams, headerParams, formParams, postBody, contentTypes, accepts, Object)
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                throw (error);
            }));
        });
    }
}
if (false) {
    /** @type {?} */
    ApiService.prototype.apiService;
    /** @type {?} */
    ApiService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXRlc3RpbmcvIiwic291cmNlcyI6WyJsaWIvY29yZS9hY3Rpb25zL2FwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsd0JBQXdCLElBQUksV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHM0UsTUFBTSxPQUFPLFVBQVU7Ozs7Ozs7SUFNbkIsWUFBWSxRQUFnQixFQUFFLElBQVksRUFBRSxPQUFlLEVBQUUsUUFBZ0I7UUFDekUsSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNWLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsT0FBTyxFQUFFLElBQUk7WUFDYixRQUFRLEVBQUUsT0FBTztZQUNqQixNQUFNLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLE9BQU87Z0JBQ2IsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLEtBQUssRUFBRSxRQUFRO2dCQUNmLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFlBQVksRUFBRSxLQUFLO2dCQUNuQixXQUFXLEVBQUUsS0FBSztnQkFDbEIsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLGlCQUFpQixFQUFFLFNBQVM7YUFDL0I7U0FFSixDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7O0lBRUssS0FBSyxDQUFDLFFBQWdCLEVBQUUsUUFBZ0I7O1lBQzFDLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELENBQUM7S0FBQTs7Ozs7Ozs7SUFFSyxtQkFBbUIsQ0FBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLFdBQWdCLEVBQUUsUUFBYTs7O2tCQUM3RSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSTs7a0JBQ2hDLFVBQVUsR0FBRyxFQUFFOztrQkFBRSxVQUFVLEdBQUcsRUFBRTs7a0JBQ2hDLFlBQVksR0FBRyxDQUFDLGtCQUFrQixDQUFDOztrQkFDbkMsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7O2tCQUU5QixZQUFZLEdBQUc7Z0JBQ2pCLGVBQWUsRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSzthQUNoRTtZQUVELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFDdkgsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUM7aUJBQzdCLEtBQUs7Ozs7WUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUMsQ0FBQztRQUNYLENBQUM7S0FBQTs7Ozs7Ozs7SUFFSyx3QkFBd0IsQ0FBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLFdBQWdCLEVBQUUsUUFBYTs7O2tCQUNsRixHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLEdBQUcsSUFBSTs7a0JBQ3hFLFVBQVUsR0FBRyxFQUFFOztrQkFBRSxVQUFVLEdBQUcsRUFBRTs7a0JBQ2hDLFlBQVksR0FBRyxDQUFDLGtCQUFrQixDQUFDOztrQkFDbkMsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7O2tCQUU5QixZQUFZLEdBQUc7Z0JBQ2pCLGVBQWUsRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSzthQUNoRTtZQUVELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFDdkgsWUFBWSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUM7aUJBQzdCLEtBQUs7Ozs7WUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUMsQ0FBQztRQUNYLENBQUM7S0FBQTtDQUVKOzs7SUFoRUcsZ0NBQXdCOztJQUV4Qiw0QkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBbGZyZXNjb0FwaUNvbXBhdGliaWxpdHkgYXMgQWxmcmVzY29BcGkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpQ29uZmlnIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaS9zcmMvYWxmcmVzY29BcGlDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XG5cbiAgICBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaTtcblxuICAgIGNvbmZpZzogQWxmcmVzY29BcGlDb25maWc7XG5cbiAgICBjb25zdHJ1Y3RvcihjbGllbnRJZDogc3RyaW5nLCBob3N0OiBzdHJpbmcsIGhvc3RTc286IHN0cmluZywgcHJvdmlkZXI6IHN0cmluZykge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlcixcbiAgICAgICAgICAgIGhvc3RCcG06IGhvc3QsXG4gICAgICAgICAgICBob3N0RWNtOiBob3N0LFxuICAgICAgICAgICAgYXV0aFR5cGU6ICdPQVVUSCcsXG4gICAgICAgICAgICBvYXV0aDI6IHtcbiAgICAgICAgICAgICAgICBob3N0OiBob3N0U3NvLFxuICAgICAgICAgICAgICAgIGNsaWVudElkOiBjbGllbnRJZCxcbiAgICAgICAgICAgICAgICBzY29wZTogJ29wZW5pZCcsXG4gICAgICAgICAgICAgICAgc2VjcmV0OiAnJyxcbiAgICAgICAgICAgICAgICBpbXBsaWNpdEZsb3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNpbGVudExvZ2luOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogJy8nLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpTG9nb3V0OiAnL2xvZ291dCdcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuYXBpU2VydmljZSA9IG5ldyBBbGZyZXNjb0FwaSh0aGlzLmNvbmZpZyk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9naW4odXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICBhc3luYyBwZXJmb3JtQnBtT3BlcmF0aW9uKHBhdGg6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIHF1ZXJ5UGFyYW1zOiBhbnksIHBvc3RCb2R5OiBhbnkpIHtcbiAgICAgICAgY29uc3QgdXJpID0gdGhpcy5jb25maWcuaG9zdEJwbSArIHBhdGg7XG4gICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSB7fSwgZm9ybVBhcmFtcyA9IHt9O1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICAgICAgY29uc3QgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuXG4gICAgICAgIGNvbnN0IGhlYWRlclBhcmFtcyA9IHtcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ2JlYXJlciAnICsgdGhpcy5hcGlTZXJ2aWNlLm9hdXRoMkF1dGgudG9rZW5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLnByb2Nlc3NDbGllbnQuY2FsbEN1c3RvbUFwaSh1cmksIG1ldGhvZCwgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICAgICAgICBjb250ZW50VHlwZXMsIGFjY2VwdHMsIE9iamVjdClcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyAoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcGVyZm9ybUlkZW50aXR5T3BlcmF0aW9uKHBhdGg6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIHF1ZXJ5UGFyYW1zOiBhbnksIHBvc3RCb2R5OiBhbnkpIHtcbiAgICAgICAgY29uc3QgdXJpID0gdGhpcy5jb25maWcub2F1dGgyLmhvc3QucmVwbGFjZSgnL3JlYWxtcycsICcvYWRtaW4vcmVhbG1zJykgKyBwYXRoO1xuICAgICAgICBjb25zdCBwYXRoUGFyYW1zID0ge30sIGZvcm1QYXJhbXMgPSB7fTtcbiAgICAgICAgY29uc3QgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgICAgIGNvbnN0IGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcblxuICAgICAgICBjb25zdCBoZWFkZXJQYXJhbXMgPSB7XG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdiZWFyZXIgJyArIHRoaXMuYXBpU2VydmljZS5vYXV0aDJBdXRoLnRva2VuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBpU2VydmljZS5wcm9jZXNzQ2xpZW50LmNhbGxDdXN0b21BcGkodXJpLCBtZXRob2QsIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgICAgICAgY29udGVudFR5cGVzLCBhY2NlcHRzLCBPYmplY3QpXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxufVxuIl19