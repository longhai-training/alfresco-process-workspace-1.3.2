/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BrowserVisibility } from '../../core/utils/browser-visibility';
import { by, element } from 'protractor';
export class FormFieldsPage {
    constructor() {
        this.formContent = element(by.css('adf-form'));
        this.refreshButton = element(by.css('div[class*="form-reload-button"] mat-icon'));
        this.saveButton = element(by.cssContainingText('mat-card-actions[class*="adf-for"] span', 'SAVE'));
        this.valueLocator = by.css('input');
        this.labelLocator = by.css('label');
        this.noFormMessage = element(by.css('span[id*="no-form-message"]'));
        this.completedTaskNoFormMessage = element(by.css('div[id*="completed-form-message"] p'));
        this.attachFormButton = element(by.id('adf-no-form-attach-form-button'));
        this.selectFormDropDownArrow = element.all(by.css('adf-attach-form div[class*="mat-select-arrow"]')).first();
        this.selectFormContent = element(by.css('div[class*="mat-select-panel"]'));
        this.completeButton = element(by.id('adf-form-complete'));
        this.errorMessage = by.css('.adf-error-text-container .adf-error-text');
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    setFieldValue(locator, field, value) {
        /** @type {?} */
        const fieldElement = element(locator(field));
        BrowserVisibility.waitUntilElementIsVisible(fieldElement);
        fieldElement.clear().sendKeys(value);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} fieldId
     * @return {?}
     */
    checkWidgetIsVisible(fieldId) {
        /** @type {?} */
        const fieldElement = element.all(by.css(`adf-form-field div[id='field-${fieldId}-container']`)).first();
        BrowserVisibility.waitUntilElementIsVisible(fieldElement);
    }
    /**
     * @param {?} fieldId
     * @return {?}
     */
    checkWidgetIsHidden(fieldId) {
        /** @type {?} */
        const hiddenElement = element(by.css(`adf-form-field div[id='field-${fieldId}-container'][hidden]`));
        BrowserVisibility.waitUntilElementIsVisible(hiddenElement);
    }
    /**
     * @param {?} fieldId
     * @return {?}
     */
    getWidget(fieldId) {
        /** @type {?} */
        const widget = element(by.css(`adf-form-field div[id='field-${fieldId}-container']`));
        BrowserVisibility.waitUntilElementIsVisible(widget);
        return widget;
    }
    /**
     * @param {?} fieldId
     * @param {?} valueLocatorParam
     * @return {?}
     */
    getFieldValue(fieldId, valueLocatorParam) {
        /** @type {?} */
        const value = this.getWidget(fieldId).element(valueLocatorParam || this.valueLocator);
        BrowserVisibility.waitUntilElementIsVisible(value);
        return value.getAttribute('value');
    }
    /**
     * @param {?} fieldId
     * @param {?} labelLocatorParam
     * @return {?}
     */
    getFieldLabel(fieldId, labelLocatorParam) {
        /** @type {?} */
        const label = this.getWidget(fieldId).all(labelLocatorParam || this.labelLocator).first();
        BrowserVisibility.waitUntilElementIsVisible(label);
        return label.getText();
    }
    /**
     * @param {?} fieldId
     * @return {?}
     */
    getFieldErrorMessage(fieldId) {
        /** @type {?} */
        const error = this.getWidget(fieldId).element(this.errorMessage);
        return error.getText();
    }
    /**
     * @param {?} fieldId
     * @param {?} labelLocatorParam
     * @return {?}
     */
    getFieldText(fieldId, labelLocatorParam) {
        /** @type {?} */
        const label = this.getWidget(fieldId).element(labelLocatorParam || this.labelLocator);
        BrowserVisibility.waitUntilElementIsVisible(label);
        return label.getText();
    }
    /**
     * @param {?} fieldId
     * @param {?=} locator
     * @return {?}
     */
    getFieldPlaceHolder(fieldId, locator = 'input') {
        /** @type {?} */
        const placeHolderLocator = element(by.css(`${locator}#${fieldId}`)).getAttribute('placeholder');
        BrowserVisibility.waitUntilElementIsVisible(placeHolderLocator);
        return placeHolderLocator;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} locator
     * @param {?} field
     * @param {?} val
     * @return {THIS}
     */
    checkFieldValue(locator, field, val) {
        BrowserVisibility.waitUntilElementHasValue(element(locator(field)), val);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    refreshForm() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).refreshButton);
        (/** @type {?} */ (this)).refreshButton.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    saveForm() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).saveButton);
        BrowserVisibility.waitUntilElementIsClickable((/** @type {?} */ (this)).saveButton);
        (/** @type {?} */ (this)).saveButton.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    noFormIsDisplayed() {
        BrowserVisibility.waitUntilElementIsNotOnPage((/** @type {?} */ (this)).formContent);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    checkFormIsDisplayed() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).formContent);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    getNoFormMessage() {
        BrowserVisibility.waitUntilElementIsVisible(this.noFormMessage);
        return this.noFormMessage.getText();
    }
    /**
     * @return {?}
     */
    getCompletedTaskNoFormMessage() {
        BrowserVisibility.waitUntilElementIsVisible(this.completedTaskNoFormMessage);
        return this.completedTaskNoFormMessage.getText();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clickOnAttachFormButton() {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).attachFormButton);
        (/** @type {?} */ (this)).attachFormButton.click();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} formName
     * @return {THIS}
     */
    selectForm(formName) {
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectFormDropDownArrow);
        (/** @type {?} */ (this)).selectFormDropDownArrow.click();
        BrowserVisibility.waitUntilElementIsVisible((/** @type {?} */ (this)).selectFormContent);
        (/** @type {?} */ (this)).selectFormFromDropDown(formName);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?} formName
     * @return {?}
     */
    selectFormFromDropDown(formName) {
        /** @type {?} */
        const formNameElement = element(by.cssContainingText('span', formName));
        BrowserVisibility.waitUntilElementIsVisible(formNameElement);
        formNameElement.click();
    }
    /**
     * @param {?} fieldId
     * @return {?}
     */
    checkWidgetIsReadOnlyMode(fieldId) {
        /** @type {?} */
        const widget = element(by.css(`adf-form-field div[id='field-${fieldId}-container']`));
        /** @type {?} */
        const widgetReadOnly = widget.element(by.css('div[class*="adf-readonly"]'));
        BrowserVisibility.waitUntilElementIsVisible(widgetReadOnly);
        return widgetReadOnly;
    }
    /**
     * @return {?}
     */
    completeForm() {
        BrowserVisibility.waitUntilElementIsVisible(this.completeButton);
        return this.completeButton.click();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fieldId
     * @param {?} value
     * @return {THIS}
     */
    setValueInInputById(fieldId, value) {
        /** @type {?} */
        const input = element(by.id(fieldId));
        BrowserVisibility.waitUntilElementIsVisible(input);
        input.clear().sendKeys(value);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    isCompleteFormButtonDisabled() {
        BrowserVisibility.waitUntilElementIsVisible(this.completeButton);
        return this.completeButton.getAttribute('disabled');
    }
}
if (false) {
    /** @type {?} */
    FormFieldsPage.prototype.formContent;
    /** @type {?} */
    FormFieldsPage.prototype.refreshButton;
    /** @type {?} */
    FormFieldsPage.prototype.saveButton;
    /** @type {?} */
    FormFieldsPage.prototype.valueLocator;
    /** @type {?} */
    FormFieldsPage.prototype.labelLocator;
    /** @type {?} */
    FormFieldsPage.prototype.noFormMessage;
    /** @type {?} */
    FormFieldsPage.prototype.completedTaskNoFormMessage;
    /** @type {?} */
    FormFieldsPage.prototype.attachFormButton;
    /** @type {?} */
    FormFieldsPage.prototype.selectFormDropDownArrow;
    /** @type {?} */
    FormFieldsPage.prototype.selectFormContent;
    /** @type {?} */
    FormFieldsPage.prototype.completeButton;
    /** @type {?} */
    FormFieldsPage.prototype.errorMessage;
}
//# sourceMappingURL=data:application/json;base64,