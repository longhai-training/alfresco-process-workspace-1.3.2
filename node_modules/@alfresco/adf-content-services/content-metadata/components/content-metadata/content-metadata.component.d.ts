/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { Observable, Subscription } from 'rxjs';
import { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService } from '@alfresco/adf-core';
import { ContentMetadataService } from '../../services/content-metadata.service';
import { CardViewGroup } from '../../interfaces/content-metadata.interfaces';
export declare class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {
    private contentMetadataService;
    private cardViewUpdateService;
    private nodesApiService;
    private logService;
    private alfrescoApiService;
    /** (required) The node entity to fetch metadata about */
    node: Node;
    /** Toggles whether the edit button should be shown */
    editable: boolean;
    /** Toggles whether to display empty values in the card view */
    displayEmpty: boolean;
    /** Toggles between expanded (ie, full information) and collapsed
     * (ie, reduced information) in the display
     */
    expanded: boolean;
    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */
    multi: boolean;
    /** Name of the metadata preset, which defines aspects and their properties */
    preset: string;
    /** Toggles whether the metadata properties should be shown */
    displayDefaultProperties: boolean;
    /** (Optional) shows the given aspect in the expanded  card */
    displayAspect: string;
    basicProperties$: Observable<CardViewItem[]>;
    groupedProperties$: Observable<CardViewGroup[]>;
    disposableNodeUpdate: Subscription;
    constructor(contentMetadataService: ContentMetadataService, cardViewUpdateService: CardViewUpdateService, nodesApiService: NodesApiService, logService: LogService, alfrescoApiService: AlfrescoApiService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private loadProperties;
    private saveNode;
    showGroup(group: CardViewGroup): number;
    ngOnDestroy(): void;
    canExpandTheCard(group: CardViewGroup): boolean;
    canExpandProperties(): boolean;
}
