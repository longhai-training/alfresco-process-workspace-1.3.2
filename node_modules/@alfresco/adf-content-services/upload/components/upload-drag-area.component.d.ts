/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileModel, NodeAllowableOperationSubject, NotificationService, TranslationService, UploadService, ContentService } from '@alfresco/adf-core';
import { NgZone } from '@angular/core';
import { UploadBase } from './base-upload/upload-base';
export declare class UploadDragAreaComponent extends UploadBase implements NodeAllowableOperationSubject {
    protected uploadService: UploadService;
    protected translationService: TranslationService;
    private notificationService;
    private contentService;
    protected ngZone: NgZone;
    constructor(uploadService: UploadService, translationService: TranslationService, notificationService: NotificationService, contentService: ContentService, ngZone: NgZone);
    /**
     * Method called when files are dropped in the drag area.
     *
     * @param files - files dropped in the drag area.
     */
    onFilesDropped(files: File[]): void;
    /**
     * Called when a folder are dropped in the drag area
     *
     * @param folder - name of the dropped folder
     */
    onFolderEntityDropped(folder: any): void;
    /**
     * Show undo notification bar.
     *
     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     */
    showUndoNotificationBar(latestFilesAdded: FileModel[]): void;
    /** Returns true or false considering the component options and node permissions */
    isDroppable(): boolean;
    /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param event DOM event
     */
    onUploadFiles(event: CustomEvent): void;
    private isTargetNodeFolder;
}
