/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ContentService, DataCellEvent, DataRowActionEvent, DataTableComponent, PaginatedComponent, AppConfigService, DataColumnListComponent, UserPreferencesService, PaginationModel, ThumbnailService, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, RequestPaginationModel, AlfrescoApiService, LockService } from '@alfresco/adf-core';
import { Node, NodeEntry, NodePaging, Pagination } from '@alfresco/js-api';
import { Subject, BehaviorSubject } from 'rxjs';
import { ShareDataRow } from './../data/share-data-row.model';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { ContentActionModel } from './../models/content-action.model';
import { PermissionStyleModel } from './../models/permissions-style.model';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
import { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';
import { RowFilter } from '../data/row-filter.model';
import { DocumentListService } from '../services/document-list.service';
export declare class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {
    private documentListService;
    private ngZone;
    private elementRef;
    private appConfig;
    private userPreferencesService;
    private contentService;
    private thumbnailService;
    private alfrescoApiService;
    private lockService;
    static SINGLE_CLICK_NAVIGATION: string;
    static DOUBLE_CLICK_NAVIGATION: string;
    DEFAULT_PAGINATION: Pagination;
    columnList: DataColumnListComponent;
    customLoadingContent: CustomLoadingContentTemplateDirective;
    customNoPermissionsTemplate: CustomNoPermissionTemplateDirective;
    customNoContentTemplate: CustomEmptyContentTemplateDirective;
    /** Include additional information about the node in the server request. For example: association, isLink, isLocked and others. */
    includeFields: string[];
    /**
     * Filters the Node list using the *where* condition of the REST API
     * (for example, isFolder=true). See the REST API documentation for more information.
     */
    where: string;
    /** Change the display mode of the table. Can be "list" or "gallery". */
    display: string;
    /** Define a set of CSS styles to apply depending on the permission
     * of the user on that node. See the Permission Style model
     * page for further details and examples.
     */
    permissionsStyle: PermissionStyleModel[];
    /** The default route for all the location-based columns (if declared). */
    locationFormat: string;
    /** Toggles navigation to folder content or file preview */
    navigate: boolean;
    /** Toggles the header */
    showHeader: boolean;
    /** User interaction for folder navigation or file preview.
     * Valid values are "click" and "dblclick". Default value: "dblclick"
     */
    navigationMode: string;
    /** Show document thumbnails rather than icons */
    thumbnails: boolean;
    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
     */
    selectionMode: string;
    /** Toggles multiselect mode */
    multiselect: boolean;
    /** Toggles content actions for each row */
    contentActions: boolean;
    /** Position of the content actions dropdown menu. Can be set to "left" or "right". */
    contentActionsPosition: string;
    /** Toggles context menus for each row */
    contextMenuActions: boolean;
    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */
    emptyFolderImageUrl: string;
    /**
     * When true, this enables you to drop files directly into subfolders shown
     * as items in the list. When false, the dropped file will be added to the
     * current folder (ie, the one containing all the items shown in the list).
     * See the Upload directive for further details about how the file drop is
     * handled.
     */
    allowDropFiles: boolean;
    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`
     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
     * override the default sorting detected by the component based on columns.
     */
    sorting: string[];
    /** Defines sorting mode. Can be either `client` (items in the list
     * are sorted client-side) or `server` (the ordering supplied by the
     * server is used without further client-side sorting).
     * Note that the `server` option *does not* request the server to sort the data
     * before delivering it.
     */
    sortingMode: string;
    /** The inline style to apply to every row. See
     * the Angular NgStyle
     * docs for more details and usage examples.
     */
    rowStyle: string;
    /** The CSS class to apply to every row */
    rowStyleClass: string;
    /** Toggles the loading state and animated spinners for the component. Used in
     * combination with `navigate=false` to perform custom navigation and loading
     * state indication.
     */
    loading: boolean;
    /** @hidden */
    _rowFilter: RowFilter | null;
    /**
     * Custom function to choose whether to show or hide rows.
     * See the [Row Filter Model](row-filter.model.md) page for
     * more information.
     */
    rowFilter: RowFilter;
    /**
     * Custom function to choose image file paths to show. See the
     * [Image Resolver Model](image-resolver.model.md) page for
     * more information.
     */
    imageResolver: any | null;
    /** Toggles the sticky header mode. */
    stickyHeader: boolean;
    _currentFolderId: string;
    /** The ID of the folder node to display or a reserved string alias for special sources */
    currentFolderId: string;
    /** The Document list will show all the nodes contained in the NodePaging entity */
    node: NodePaging;
    /** Default value is stored in the user preference settings. Use this only if you are not using pagination. */
    maxItems: number;
    /** Emitted when the user clicks a list node */
    nodeClick: EventEmitter<NodeEntityEvent>;
    /** Emitted when the user double-clicks a list node */
    nodeDblClick: EventEmitter<NodeEntityEvent>;
    /** Emitted when the current display folder changes */
    folderChange: EventEmitter<NodeEntryEvent>;
    /** Emitted when the user acts upon files with either single or double click
     * (depends on `navigation-mode`). Useful for integration with the
     * Viewer component.
     */
    preview: EventEmitter<NodeEntityEvent>;
    /** Emitted when the Document List has loaded all items and is ready for use */
    ready: EventEmitter<NodePaging>;
    /** Emitted when the API fails to get the Document List data */
    error: EventEmitter<any>;
    dataTable: DataTableComponent;
    actions: ContentActionModel[];
    contextActionHandler: Subject<any>;
    data: ShareDataTableAdapter;
    noPermission: boolean;
    selection: NodeEntry[];
    $folderNode: Subject<Node>;
    folderNode: Node;
    private _pagination;
    pagination: BehaviorSubject<PaginationModel>;
    private layoutPresets;
    private subscriptions;
    private rowMenuCache;
    private loadingTimeout;
    constructor(documentListService: DocumentListService, ngZone: NgZone, elementRef: ElementRef, appConfig: AppConfigService, userPreferencesService: UserPreferencesService, contentService: ContentService, thumbnailService: ThumbnailService, alfrescoApiService: AlfrescoApiService, lockService: LockService);
    getContextActions(node: NodeEntry): {
        model: ContentActionModel;
        node: NodeEntry;
        subject: Subject<any>;
    }[];
    readonly hasCustomLayout: boolean;
    private getDefaultSorting;
    private getLayoutPreset;
    isMobile(): boolean;
    isEmpty(): boolean;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    private setTableSchema;
    ngOnChanges(changes: SimpleChanges): void;
    reload(): void;
    contextActionCallback(action: any): void;
    getNodeActions(node: NodeEntry | any): ContentActionModel[];
    private refreshAction;
    private isActionVisible;
    private isActionDisabled;
    onShowContextMenu(e?: Event): void;
    navigateTo(node: Node | string): boolean;
    private getNodeFolderDestinationId;
    private isLinkFolder;
    updateCustomSourceData(nodeId: string): void;
    /**
     * Invoked when executing content action for a document or folder.
     * @param node Node to be the context of the execution.
     * @param action Action to be executed against the context.
     */
    executeContentAction(node: NodeEntry, action: ContentActionModel): void;
    private setLoadingState;
    loadFolder(): void;
    resetSelection(): void;
    onPageLoaded(nodePaging: NodePaging): void;
    /**
     * Creates a set of predefined columns.
     */
    setupDefaultColumns(preset?: string): void;
    onPreviewFile(node: NodeEntry): void;
    onNodeClick(nodeEntry: NodeEntry): void;
    onNodeDblClick(nodeEntry: NodeEntry): void;
    executeActionClick(nodeEntry: NodeEntry): void;
    onNodeSelect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onNodeUnselect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    onShowRowActionsMenu(event: DataCellEvent): void;
    onExecuteRowAction(event: DataRowActionEvent): void;
    private enforceSingleClickNavigationForMobile;
    canNavigateFolder(node: Node): boolean;
    private loadLayoutPresets;
    private onDataReady;
    updatePagination(requestPaginationModel: RequestPaginationModel): void;
    private resetNewFolderPagination;
    ngOnDestroy(): void;
    private handleError;
}
