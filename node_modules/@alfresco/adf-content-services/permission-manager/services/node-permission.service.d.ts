/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs';
import { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';
import { Node, NodeEntry, GroupMemberPaging, PermissionElement } from '@alfresco/js-api';
export declare class NodePermissionService {
    private apiService;
    private searchApiService;
    private nodeService;
    private translation;
    constructor(apiService: AlfrescoApiService, searchApiService: SearchService, nodeService: NodesApiService, translation: TranslationService);
    /**
     * Gets a list of roles for the current node.
     * @param node The target node
     * @returns Array of strings representing the roles
     */
    getNodeRoles(node: Node): Observable<string[]>;
    /**
     * Updates the permission role for a node.
     * @param node Target node
     * @param updatedPermissionRole Permission role to update or add
     * @returns Node with updated permission
     */
    updatePermissionRole(node: Node, updatedPermissionRole: PermissionElement): Observable<Node>;
    /**
     * Update permissions for a node.
     * @param nodeId ID of the target node
     * @param permissionList New permission settings
     * @returns Node with updated permissions
     */
    updateNodePermissions(nodeId: string, permissionList: NodeEntry[]): Observable<Node>;
    /**
     * Updates the locally set permissions for a node.
     * @param node ID of the target node
     * @param nodes Permission settings
     * @param nodeRole Permission role
     * @returns Node with updated permissions
     */
    updateLocallySetPermissions(node: Node, nodes: NodeEntry[], nodeRole: string[]): Observable<Node>;
    private getDuplicatedPermissions;
    private isEqualPermission;
    private transformNodeToPermissionElement;
    /**
     * Removes a permission setting from a node.
     * @param node ID of the target node
     * @param permissionToRemove Permission setting to remove
     * @returns Node with modified permissions
     */
    removePermission(node: Node, permissionToRemove: PermissionElement): Observable<Node>;
    private getGroupMembersBySiteName;
    /**
     * Gets all members related to a group name.
     * @param groupName Name of group to look for members
     * @param opts Extra options supported by JS-API
     * @returns List of members
     */
    getGroupMemberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging>;
    private formattedRoleName;
    private buildRetrieveSiteQueryBody;
}
