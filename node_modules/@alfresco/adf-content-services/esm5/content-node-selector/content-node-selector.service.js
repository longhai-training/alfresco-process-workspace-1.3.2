/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
/**
 * Internal service used by ContentNodeSelector component.
 */
var ContentNodeSelectorService = /** @class */ (function () {
    function ContentNodeSelectorService(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param searchTerm    The term to search for
     * @param rootNodeId    The root is to start the search from
     * @param skipCount     From where to start the loading
     * @param maxItems      How many items to load
     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when
     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)
     * and search is not supported for that alias, but can be performed on its corresponding nodes.
     */
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    ContentNodeSelectorService.prototype.search = /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    function (searchTerm, rootNodeId, skipCount, maxItems, extraNodeIds) {
        if (rootNodeId === void 0) { rootNodeId = null; }
        if (skipCount === void 0) { skipCount = 0; }
        if (maxItems === void 0) { maxItems = 25; }
        /** @type {?} */
        var extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return id !== rootNodeId; }))
                .forEach((/**
             * @param {?} extraId
             * @return {?}
             */
            function (extraId) {
                extraParentFiltering += " OR ANCESTOR:'workspace://SpacesStore/" + extraId + "'";
            }));
        }
        /** @type {?} */
        var parentFiltering = rootNodeId ? [{ query: "ANCESTOR:'workspace://SpacesStore/" + rootNodeId + "'" + extraParentFiltering }] : [];
        /** @type {?} */
        var defaultSearchNode = {
            query: {
                query: searchTerm + "* OR name:" + searchTerm + "*"
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: tslib_1.__spread([
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' }
            ], parentFiltering),
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    };
    ContentNodeSelectorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentNodeSelectorService.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    /** @nocollapse */ ContentNodeSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function ContentNodeSelectorService_Factory() { return new ContentNodeSelectorService(i0.inject(i1.SearchService)); }, token: ContentNodeSelectorService, providedIn: "root" });
    return ContentNodeSelectorService;
}());
export { ContentNodeSelectorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorService.prototype.searchService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFPM0M7SUFLSSxvQ0FBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFDaEQsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7Ozs7Ozs7Ozs7O0lBQ0ksMkNBQU07Ozs7Ozs7Ozs7SUFBYixVQUFjLFVBQWtCLEVBQUUsVUFBeUIsRUFBRSxTQUFxQixFQUFFLFFBQXFCLEVBQUUsWUFBdUI7UUFBaEcsMkJBQUEsRUFBQSxpQkFBeUI7UUFBRSwwQkFBQSxFQUFBLGFBQXFCO1FBQUUseUJBQUEsRUFBQSxhQUFxQjs7WUFFakcsb0JBQW9CLEdBQUcsRUFBRTtRQUU3QixJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFlBQVk7aUJBQ1AsTUFBTTs7OztZQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsRUFBRSxLQUFLLFVBQVUsRUFBakIsQ0FBaUIsRUFBQztpQkFDakMsT0FBTzs7OztZQUFDLFVBQUMsT0FBTztnQkFDYixvQkFBb0IsSUFBSSwyQ0FBeUMsT0FBTyxNQUFHLENBQUM7WUFDaEYsQ0FBQyxFQUFDLENBQUM7U0FDVjs7WUFFSyxlQUFlLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLHVDQUFxQyxVQUFVLFNBQUksb0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFOztZQUUxSCxpQkFBaUIsR0FBUTtZQUMzQixLQUFLLEVBQUU7Z0JBQ0gsS0FBSyxFQUFLLFVBQVUsa0JBQWEsVUFBVSxNQUFHO2FBQ2pEO1lBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDO1lBQ3hDLE1BQU0sRUFBRTtnQkFDSixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsU0FBUyxFQUFFLFNBQVM7YUFDdkI7WUFDRCxhQUFhO2dCQUNULEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFO2dCQUM3QixFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRTtlQUMvQixlQUFlLENBQ3JCO1lBQ0QsS0FBSyxFQUFFO2dCQUNILFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQzthQUN2QjtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbkUsQ0FBQzs7Z0JBckRKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBVlEsYUFBYTs7O3FDQWpCdEI7Q0ErRUMsQUF0REQsSUFzREM7U0FuRFksMEJBQTBCOzs7Ozs7SUFFdkIsbURBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgU2VhcmNoU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlUGFnaW5nIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogSW50ZXJuYWwgc2VydmljZSB1c2VkIGJ5IENvbnRlbnROb2RlU2VsZWN0b3IgY29tcG9uZW50LlxuICovXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnROb2RlU2VsZWN0b3JTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VhcmNoU2VydmljZTogU2VhcmNoU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgc2VhcmNoIGZvciBjb250ZW50IG5vZGUgc2VsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VhcmNoVGVybSAgICBUaGUgdGVybSB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIHJvb3ROb2RlSWQgICAgVGhlIHJvb3QgaXMgdG8gc3RhcnQgdGhlIHNlYXJjaCBmcm9tXG4gICAgICogQHBhcmFtIHNraXBDb3VudCAgICAgRnJvbSB3aGVyZSB0byBzdGFydCB0aGUgbG9hZGluZ1xuICAgICAqIEBwYXJhbSBtYXhJdGVtcyAgICAgIEhvdyBtYW55IGl0ZW1zIHRvIGxvYWRcbiAgICAgKiBAcGFyYW0gW2V4dHJhTm9kZUlkc10gIExpc3Qgb2YgZXh0cmEgbm9kZSBpZHMgdG8gc2VhcmNoIGZyb20uIFRoaXMgbGFzdCBwYXJhbWV0ZXIgaXMgbmVjZXNzYXJ5IHdoZW5cbiAgICAgKiB0aGUgcm9vdE5vZGVJZCBpcyBvbmUgb2YgdGhlIHN1cHBvcnRlZCBhbGlhc2VzIChlLmcuICctbXktJywgJy1yb290LScsICctbXlzaXRlcy0nLCBldGMuKVxuICAgICAqIGFuZCBzZWFyY2ggaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhhdCBhbGlhcywgYnV0IGNhbiBiZSBwZXJmb3JtZWQgb24gaXRzIGNvcnJlc3BvbmRpbmcgbm9kZXMuXG4gICAgICovXG4gICAgcHVibGljIHNlYXJjaChzZWFyY2hUZXJtOiBzdHJpbmcsIHJvb3ROb2RlSWQ6IHN0cmluZyA9IG51bGwsIHNraXBDb3VudDogbnVtYmVyID0gMCwgbWF4SXRlbXM6IG51bWJlciA9IDI1LCBleHRyYU5vZGVJZHM/OiBzdHJpbmdbXSk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuXG4gICAgICAgIGxldCBleHRyYVBhcmVudEZpbHRlcmluZyA9ICcnO1xuXG4gICAgICAgIGlmIChleHRyYU5vZGVJZHMgJiYgZXh0cmFOb2RlSWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZXh0cmFOb2RlSWRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoaWQpID0+IGlkICE9PSByb290Tm9kZUlkKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChleHRyYUlkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4dHJhUGFyZW50RmlsdGVyaW5nICs9IGAgT1IgQU5DRVNUT1I6J3dvcmtzcGFjZTovL1NwYWNlc1N0b3JlLyR7ZXh0cmFJZH0nYDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcmVudEZpbHRlcmluZyA9IHJvb3ROb2RlSWQgPyBbeyBxdWVyeTogYEFOQ0VTVE9SOid3b3Jrc3BhY2U6Ly9TcGFjZXNTdG9yZS8ke3Jvb3ROb2RlSWR9JyR7ZXh0cmFQYXJlbnRGaWx0ZXJpbmd9YCB9XSA6IFtdO1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRTZWFyY2hOb2RlOiBhbnkgPSB7XG4gICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgIHF1ZXJ5OiBgJHtzZWFyY2hUZXJtfSogT1IgbmFtZToke3NlYXJjaFRlcm19KmBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3BhdGgnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucyddLFxuICAgICAgICAgICAgcGFnaW5nOiB7XG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IG1heEl0ZW1zLFxuICAgICAgICAgICAgICAgIHNraXBDb3VudDogc2tpcENvdW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyUXVlcmllczogW1xuICAgICAgICAgICAgICAgIHsgcXVlcnk6IFwiVFlQRTonY206Zm9sZGVyJ1wiIH0sXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogJ05PVCBjbTpjcmVhdG9yOlN5c3RlbScgfSxcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRGaWx0ZXJpbmdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogWydub2RlcyddXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5zZWFyY2hCeVF1ZXJ5Qm9keShkZWZhdWx0U2VhcmNoTm9kZSk7XG4gICAgfVxufVxuIl19