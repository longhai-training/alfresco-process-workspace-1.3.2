/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { FormControl, Validators, FormGroup } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';
import { MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';
import { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';
import { UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
/** @type {?} */
var DEFAULT_FORMAT_DATE = 'DD/MM/YYYY';
var ɵ0 = MOMENT_DATE_FORMATS;
var SearchDateRangeComponent = /** @class */ (function () {
    function SearchDateRangeComponent(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.matcher = new LiveErrorStateMatcher();
        this.datePickerDateFormat = DEFAULT_FORMAT_DATE;
    }
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.getFromValidationMessage = /**
     * @return {?}
     */
    function () {
        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                    '';
    };
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.getToValidationMessage = /**
     * @return {?}
     */
    function () {
        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :
            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :
                this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :
                    this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :
                        '';
    };
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.settings) {
            this.datePickerDateFormat = this.settings.dateFormat || DEFAULT_FORMAT_DATE;
        }
        /** @type {?} */
        var theCustomDateAdapter = (/** @type {?} */ ((/** @type {?} */ (this.dateAdapter))));
        theCustomDateAdapter.overrideDisplayFormat = this.datePickerDateFormat;
        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            _this.setLocale(locale);
        }));
        /** @type {?} */
        var validators = Validators.compose([
            Validators.required
        ]);
        this.from = new FormControl('', validators);
        this.to = new FormControl('', validators);
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        });
        this.maxDate = this.dateAdapter.today().startOf('day');
    };
    /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    SearchDateRangeComponent.prototype.apply = /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    function (model, isValid) {
        if (isValid && this.id && this.context && this.settings && this.settings.field) {
            /** @type {?} */
            var start = moment(model.from).startOf('day').format();
            /** @type {?} */
            var end = moment(model.to).endOf('day').format();
            this.context.queryFragments[this.id] = this.settings.field + ":['" + start + "' TO '" + end + "']";
            this.context.update();
        }
    };
    /**
     * @return {?}
     */
    SearchDateRangeComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            this.context.update();
        }
    };
    /**
     * @param {?} event
     * @param {?} formControl
     * @return {?}
     */
    SearchDateRangeComponent.prototype.onChangedHandler = /**
     * @param {?} event
     * @param {?} formControl
     * @return {?}
     */
    function (event, formControl) {
        /** @type {?} */
        var inputValue = event.srcElement.value;
        /** @type {?} */
        var formatDate = this.dateAdapter.parse(inputValue, this.datePickerDateFormat);
        if (formatDate && formatDate.isValid()) {
            formControl.setValue(formatDate);
        }
        else if (formatDate) {
            formControl.setErrors({
                'invalidOnChange': true
            });
        }
        else {
            formControl.setErrors({
                'required': true
            });
        }
    };
    /**
     * @param {?} locale
     * @return {?}
     */
    SearchDateRangeComponent.prototype.setLocale = /**
     * @param {?} locale
     * @return {?}
     */
    function (locale) {
        this.dateAdapter.setLocale(locale);
        moment.locale(locale);
    };
    /**
     * @param {?} formControl
     * @return {?}
     */
    SearchDateRangeComponent.prototype.hasParseError = /**
     * @param {?} formControl
     * @return {?}
     */
    function (formControl) {
        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchDateRangeComponent.prototype.forcePlaceholder = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.srcElement.click();
    };
    SearchDateRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-date-range',
                    template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"from\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM-DATE' | translate }}\"\n                [matDatepicker]=\"fromDatepicker\"\n                [max]=\"maxDate\"\n                (focusout)=\"onChangedHandler($event, from)\"\n                data-automation-id=\"date-range-from-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"fromDatepicker\" data-automation-id=\"date-range-from-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #fromDatepicker></mat-datepicker>\n        <mat-error *ngIf=\"from.invalid\" data-automation-id=\"date-range-from-error\">\n            {{ getFromValidationMessage() | translate: { requiredFormat: datePickerDateFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input matInput\n                (input)=\"forcePlaceholder($event)\"\n                [formControl]=\"to\"\n                [errorStateMatcher]=\"matcher\"\n                placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO-DATE' | translate }}\"\n                [matDatepicker]=\"toDatepicker\"\n                [min]=\"from.value\"\n                [max]=\"maxDate\"\n                (focusout)=\"onChangedHandler($event, to)\"\n                data-automation-id=\"date-range-to-input\">\n        <mat-datepicker-toggle matSuffix [for]=\"toDatepicker\" data-automation-id=\"date-range-to-date-toggle\"></mat-datepicker-toggle>\n        <mat-datepicker #toDatepicker></mat-datepicker>\n        <mat-error *ngIf=\"to.invalid\" data-automation-id=\"date-range-to-error\">\n            {{ getToValidationMessage() | translate: { requiredFormat: datePickerDateFormat } }}\n        </mat-error>\n    </mat-form-field>\n\n    <div class=\"adf-facet-buttons adf-facet-buttons--topSpace\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"reset()\" data-automation-id=\"date-range-clear-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"date-range-apply-btn\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                    providers: [
                        { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },
                        { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-date-range' },
                    styles: [".adf-search-date-range>form{display:inline-flex;flex-direction:column;width:100%}"]
                }] }
    ];
    /** @nocollapse */
    SearchDateRangeComponent.ctorParameters = function () { return [
        { type: DateAdapter },
        { type: UserPreferencesService }
    ]; };
    return SearchDateRangeComponent;
}());
export { SearchDateRangeComponent };
if (false) {
    /** @type {?} */
    SearchDateRangeComponent.prototype.from;
    /** @type {?} */
    SearchDateRangeComponent.prototype.to;
    /** @type {?} */
    SearchDateRangeComponent.prototype.form;
    /** @type {?} */
    SearchDateRangeComponent.prototype.matcher;
    /** @type {?} */
    SearchDateRangeComponent.prototype.id;
    /** @type {?} */
    SearchDateRangeComponent.prototype.settings;
    /** @type {?} */
    SearchDateRangeComponent.prototype.context;
    /** @type {?} */
    SearchDateRangeComponent.prototype.maxDate;
    /** @type {?} */
    SearchDateRangeComponent.prototype.datePickerDateFormat;
    /**
     * @type {?}
     * @private
     */
    SearchDateRangeComponent.prototype.dateAdapter;
    /**
     * @type {?}
     * @private
     */
    SearchDateRangeComponent.prototype.userPreferencesService;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,