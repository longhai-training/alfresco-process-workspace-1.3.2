/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { SearchFilterList } from './models/search-filter-list.model';
import { takeWhile } from 'rxjs/operators';
var SearchFilterComponent = /** @class */ (function () {
    function SearchFilterComponent(queryBuilder, searchService, translationService) {
        var _this = this;
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.DEFAULT_PAGE_SIZE = 5;
        this.isAlive = true;
        /**
         * All facet field items to be displayed in the component. These are updated according to the response.
         *  When a new search is performed, the already existing items are updated with the new bucket count values and
         *  the newly received items are added to the responseFacets.
         */
        this.responseFacets = null;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetExpanded = {
            'default': false
        };
        this.selectedBuckets = [];
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetIntervals) {
            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;
        }
        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;
        this.queryBuilder.updated.pipe(takeWhile((/**
         * @return {?}
         */
        function () { return _this.isAlive; }))).subscribe((/**
         * @return {?}
         */
        function () {
            _this.queryBuilder.execute();
        }));
    }
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.queryBuilder) {
            this.queryBuilder.executed.pipe(takeWhile((/**
             * @return {?}
             */
            function () { return _this.isAlive; }))).subscribe((/**
             * @param {?} resultSetPaging
             * @return {?}
             */
            function (resultSetPaging) {
                _this.onDataLoaded(resultSetPaging);
                _this.searchService.dataLoaded.next(resultSetPaging);
            }));
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.isAlive = false;
    };
    /**
     * @private
     * @return {?}
     */
    SearchFilterComponent.prototype.updateSelectedBuckets = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.responseFacets) {
            this.selectedBuckets = [];
            var _loop_1 = function (field) {
                var _a;
                if (field.buckets) {
                    (_a = this_1.selectedBuckets).push.apply(_a, tslib_1.__spread(this_1.queryBuilder.getUserFacetBuckets(field.field)
                        .filter((/**
                     * @param {?} bucket
                     * @return {?}
                     */
                    function (bucket) { return bucket.checked; }))
                        .map((/**
                     * @param {?} bucket
                     * @return {?}
                     */
                    function (bucket) {
                        return { field: field, bucket: bucket };
                    }))));
                }
            };
            var this_1 = this;
            try {
                for (var _b = tslib_1.__values(this.responseFacets), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    _loop_1(field);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    };
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.onToggleBucket = /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.selectFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.unselectFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.canResetSelectedBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field.buckets) {
            return field.buckets.items.some((/**
             * @param {?} bucket
             * @return {?}
             */
            function (bucket) { return bucket.checked; }));
        }
        return false;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.resetSelectedBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var e_2, _a;
        if (field && field.buckets) {
            try {
                for (var _b = tslib_1.__values(field.buckets.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var bucket = _c.value;
                    bucket.checked = false;
                    this.queryBuilder.removeUserFacetBucket(field, bucket);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.resetAllSelectedBuckets = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.responseFacets.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            var e_3, _a;
            if (field && field.buckets) {
                try {
                    for (var _b = tslib_1.__values(field.buckets.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var bucket = _c.value;
                        bucket.checked = false;
                        _this.queryBuilder.removeUserFacetBucket(field, bucket);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                _this.updateSelectedBuckets();
            }
        }));
        this.queryBuilder.update();
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.resetAll = /**
     * @return {?}
     */
    function () {
        this.resetAllSelectedBuckets();
        this.responseFacets = null;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.shouldExpand = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.facetExpanded[field.type] || this.facetExpanded['default'];
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SearchFilterComponent.prototype.onDataLoaded = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var context = data.list.context;
        if (context) {
            this.parseFacets(context);
        }
        else {
            this.responseFacets = null;
        }
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacets = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        this.parseFacetFields(context);
        this.parseFacetIntervals(context);
        this.parseFacetQueries(context);
    };
    /**
     * @private
     * @param {?} context
     * @param {?} configFacetFields
     * @param {?} itemType
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetItems = /**
     * @private
     * @param {?} context
     * @param {?} configFacetFields
     * @param {?} itemType
     * @return {?}
     */
    function (context, configFacetFields, itemType) {
        var _this = this;
        configFacetFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var responseField = _this.findFacet(context, itemType, field.label);
            /** @type {?} */
            var responseBuckets = _this.getResponseBuckets(responseField, field)
                .filter(_this.getFilterByMinCount(field.mincount));
            /** @type {?} */
            var alreadyExistingField = _this.findResponseFacet(itemType, field.label);
            if (alreadyExistingField) {
                /** @type {?} */
                var alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                _this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                /** @type {?} */
                var bucketList = new SearchFilterList(responseBuckets, field.pageSize);
                bucketList.filter = _this.getBucketFilterFunction(bucketList);
                if (!_this.responseFacets) {
                    _this.responseFacets = [];
                }
                _this.responseFacets.push((/** @type {?} */ (tslib_1.__assign({}, field, { type: responseField.type || itemType, label: field.label, pageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, buckets: bucketList }))));
            }
        }));
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetFields = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
        this.parseFacetItems(context, configFacetFields, 'field');
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetIntervals = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];
        this.parseFacetItems(context, configFacetIntervals, 'interval');
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetQueries = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        /** @type {?} */
        var configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
        /** @type {?} */
        var configGroups = configFacetQueries.reduce((/**
         * @param {?} acc
         * @param {?} query
         * @return {?}
         */
        function (acc, query) {
            /** @type {?} */
            var group = _this.queryBuilder.getQueryGroup(query);
            if (acc[group]) {
                acc[group].push(query);
            }
            else {
                acc[group] = [query];
            }
            return acc;
        }), []);
        /** @type {?} */
        var mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;
        /** @type {?} */
        var mincountFilter = this.getFilterByMinCount(mincount);
        Object.keys(configGroups).forEach((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            /** @type {?} */
            var responseField = _this.findFacet(context, 'query', group);
            /** @type {?} */
            var responseBuckets = _this.getResponseQueryBuckets(responseField, configGroups[group])
                .filter(mincountFilter);
            /** @type {?} */
            var alreadyExistingField = _this.findResponseFacet('query', group);
            if (alreadyExistingField) {
                /** @type {?} */
                var alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                _this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                /** @type {?} */
                var bucketList = new SearchFilterList(responseBuckets, _this.facetQueriesPageSize);
                bucketList.filter = _this.getBucketFilterFunction(bucketList);
                if (!_this.responseFacets) {
                    _this.responseFacets = [];
                }
                _this.responseFacets.push((/** @type {?} */ ({
                    field: group,
                    type: responseField.type || 'query',
                    label: group,
                    pageSize: _this.DEFAULT_PAGE_SIZE,
                    currentPageSize: _this.DEFAULT_PAGE_SIZE,
                    buckets: bucketList
                })));
            }
        }));
    };
    /**
     * @private
     * @param {?} responseField
     * @param {?} configField
     * @return {?}
     */
    SearchFilterComponent.prototype.getResponseBuckets = /**
     * @private
     * @param {?} responseField
     * @param {?} configField
     * @return {?}
     */
    function (responseField, configField) {
        var _this = this;
        return ((responseField && responseField.buckets) || []).map((/**
         * @param {?} respBucket
         * @return {?}
         */
        function (respBucket) {
            respBucket['count'] = _this.getCountValue(respBucket);
            respBucket.filterQuery = respBucket.filterQuery || _this.getCorrespondingFilterQuery(configField, respBucket.label);
            return (/** @type {?} */ (tslib_1.__assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        }));
    };
    /**
     * @private
     * @param {?} responseField
     * @param {?} configGroup
     * @return {?}
     */
    SearchFilterComponent.prototype.getResponseQueryBuckets = /**
     * @private
     * @param {?} responseField
     * @param {?} configGroup
     * @return {?}
     */
    function (responseField, configGroup) {
        var _this = this;
        return (configGroup || []).map((/**
         * @param {?} query
         * @return {?}
         */
        function (query) {
            /** @type {?} */
            var respBucket = ((responseField && responseField.buckets) || [])
                .find((/**
             * @param {?} bucket
             * @return {?}
             */
            function (bucket) { return bucket.label === query.label; }));
            respBucket['count'] = _this.getCountValue(respBucket);
            return (/** @type {?} */ (tslib_1.__assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        }));
    };
    /**
     * @private
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.getCountValue = /**
     * @private
     * @param {?} bucket
     * @return {?}
     */
    function (bucket) {
        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)
            || 0;
    };
    /**
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.getBucketCountDisplay = /**
     * @param {?} bucket
     * @return {?}
     */
    function (bucket) {
        return bucket.count === null ? '' : "(" + bucket.count + ")";
    };
    /**
     * @private
     * @param {?} mincountInput
     * @return {?}
     */
    SearchFilterComponent.prototype.getFilterByMinCount = /**
     * @private
     * @param {?} mincountInput
     * @return {?}
     */
    function (mincountInput) {
        return (/**
         * @param {?} bucket
         * @return {?}
         */
        function (bucket) {
            /** @type {?} */
            var mincount = mincountInput;
            if (mincount === undefined) {
                mincount = 1;
            }
            return bucket.count >= mincount;
        });
    };
    /**
     * @private
     * @param {?} configFacetItem
     * @param {?} bucketLabel
     * @return {?}
     */
    SearchFilterComponent.prototype.getCorrespondingFilterQuery = /**
     * @private
     * @param {?} configFacetItem
     * @param {?} bucketLabel
     * @return {?}
     */
    function (configFacetItem, bucketLabel) {
        /** @type {?} */
        var filterQuery = null;
        if (configFacetItem.field && bucketLabel) {
            if (configFacetItem.sets) {
                /** @type {?} */
                var configSet = configFacetItem.sets.find((/**
                 * @param {?} set
                 * @return {?}
                 */
                function (set) { return bucketLabel === set.label; }));
                if (configSet) {
                    filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);
                }
            }
            else {
                filterQuery = configFacetItem.field + ":\"" + bucketLabel + "\"";
            }
        }
        return filterQuery;
    };
    /**
     * @private
     * @param {?} fieldName
     * @param {?} interval
     * @return {?}
     */
    SearchFilterComponent.prototype.buildIntervalQuery = /**
     * @private
     * @param {?} fieldName
     * @param {?} interval
     * @return {?}
     */
    function (fieldName, interval) {
        /** @type {?} */
        var start = interval.start;
        /** @type {?} */
        var end = interval.end;
        /** @type {?} */
        var startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';
        /** @type {?} */
        var endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';
        return fieldName + ":" + startLimit + "\"" + start + "\" TO \"" + end + "\"" + endLimit;
    };
    /**
     * @private
     * @param {?} context
     * @param {?} itemType
     * @param {?} fieldLabel
     * @return {?}
     */
    SearchFilterComponent.prototype.findFacet = /**
     * @private
     * @param {?} context
     * @param {?} itemType
     * @param {?} fieldLabel
     * @return {?}
     */
    function (context, itemType, fieldLabel) {
        return (context.facets || []).find((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response.type === itemType && response.label === fieldLabel; })) || {};
    };
    /**
     * @private
     * @param {?} itemType
     * @param {?} fieldLabel
     * @return {?}
     */
    SearchFilterComponent.prototype.findResponseFacet = /**
     * @private
     * @param {?} itemType
     * @param {?} fieldLabel
     * @return {?}
     */
    function (itemType, fieldLabel) {
        return (this.responseFacets || []).find((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response.type === itemType && response.label === fieldLabel; }));
    };
    /**
     * @private
     * @param {?} responseField
     * @param {?} responseBuckets
     * @param {?} alreadyExistingField
     * @param {?} alreadyExistingBuckets
     * @return {?}
     */
    SearchFilterComponent.prototype.updateExistingBuckets = /**
     * @private
     * @param {?} responseField
     * @param {?} responseBuckets
     * @param {?} alreadyExistingField
     * @param {?} alreadyExistingBuckets
     * @return {?}
     */
    function (responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {
        var _this = this;
        /** @type {?} */
        var bucketsToDelete = [];
        alreadyExistingBuckets
            .map((/**
         * @param {?} bucket
         * @return {?}
         */
        function (bucket) {
            /** @type {?} */
            var responseBucket = ((responseField && responseField.buckets) || []).find((/**
             * @param {?} respBucket
             * @return {?}
             */
            function (respBucket) { return respBucket.label === bucket.label; }));
            if (!responseBucket) {
                bucketsToDelete.push(bucket);
            }
            bucket.count = _this.getCountValue(responseBucket);
            return bucket;
        }));
        /** @type {?} */
        var hasSelection = this.selectedBuckets
            .find((/**
         * @param {?} selBuckets
         * @return {?}
         */
        function (selBuckets) { return alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type; }));
        if (!hasSelection && bucketsToDelete.length) {
            bucketsToDelete.forEach((/**
             * @param {?} bucket
             * @return {?}
             */
            function (bucket) {
                alreadyExistingField.buckets.deleteItem(bucket);
            }));
        }
        responseBuckets.forEach((/**
         * @param {?} respBucket
         * @return {?}
         */
        function (respBucket) {
            /** @type {?} */
            var existingBucket = alreadyExistingBuckets.find((/**
             * @param {?} oldBucket
             * @return {?}
             */
            function (oldBucket) { return oldBucket.label === respBucket.label; }));
            if (!existingBucket) {
                alreadyExistingField.buckets.addItem(respBucket);
            }
        }));
    };
    /**
     * @private
     * @param {?} bucketList
     * @return {?}
     */
    SearchFilterComponent.prototype.getBucketFilterFunction = /**
     * @private
     * @param {?} bucketList
     * @return {?}
     */
    function (bucketList) {
        var _this = this;
        return (/**
         * @param {?} bucket
         * @return {?}
         */
        function (bucket) {
            if (bucket && bucketList.filterText) {
                /** @type {?} */
                var pattern = (bucketList.filterText || '').toLowerCase();
                /** @type {?} */
                var label = (_this.translationService.instant(bucket.display) || _this.translationService.instant(bucket.label)).toLowerCase();
                return _this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
            }
            return true;
        });
    };
    SearchFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-filter',
                    template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <button *ngIf=\"displayResetButton && responseFacets\"\n            mat-button\n            color=\"primary\"\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            (click)=\"resetAll()\">\n        {{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL' | translate }}\n    </button>\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"responseFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <div class=\"adf-facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+field.label\"\n                        [(ngModel)]=\"field.buckets.filterText\">\n                    <button *ngIf=\"field.buckets.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n\n            <div class=\"adf-checklist\">\n                <mat-checkbox\n                    *ngFor=\"let bucket of field.buckets\"\n                    [checked]=\"bucket.checked\"\n                    [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n                    (change)=\"onToggleBucket($event, field, bucket)\">\n                    <div \n                        matTooltip=\"{{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\"\n                        matTooltipPosition=\"right\"\n                        class=\"adf-facet-label\">\n                        {{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\n                    </div>\n                </mat-checkbox>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage\">\n                <button *ngIf=\"canResetSelectedBuckets(field)\"\n                    mat-button\n                    color=\"primary\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n                </button>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedBuckets(field)\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowLessItems\"\n                    (click)=\"field.buckets.showLessItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowMoreItems\"\n                    (click)=\"field.buckets.showMoreItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-filter' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SearchFilterComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService },
        { type: SearchService },
        { type: TranslationService }
    ]; };
    return SearchFilterComponent;
}());
export { SearchFilterComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.DEFAULT_PAGE_SIZE;
    /** @type {?} */
    SearchFilterComponent.prototype.isAlive;
    /**
     * All facet field items to be displayed in the component. These are updated according to the response.
     *  When a new search is performed, the already existing items are updated with the new bucket count values and
     *  the newly received items are added to the responseFacets.
     * @type {?}
     */
    SearchFilterComponent.prototype.responseFacets;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.facetQueriesPageSize;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesLabel;
    /** @type {?} */
    SearchFilterComponent.prototype.facetExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.displayResetButton;
    /** @type {?} */
    SearchFilterComponent.prototype.selectedBuckets;
    /** @type {?} */
    SearchFilterComponent.prototype.queryBuilder;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.searchService;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,