/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
var DEFAULT_PAGE_SIZE = 5;
/**
 * @template T
 */
var /**
 * @template T
 */
SearchFilterList = /** @class */ (function () {
    function SearchFilterList(items, pageSize) {
        if (items === void 0) { items = []; }
        this.filteredItems = [];
        this._filterText = '';
        this.items = [];
        this.pageSize = DEFAULT_PAGE_SIZE;
        this.currentPageSize = DEFAULT_PAGE_SIZE;
        this._filter = (/**
         * @return {?}
         */
        function () { return true; });
        this.items = items;
        this.filteredItems = items;
        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;
        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;
    }
    Object.defineProperty(SearchFilterList.prototype, "filterText", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterText;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filterText = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "filter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filter;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filter = value;
            this.applyFilter();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    SearchFilterList.prototype.applyFilter = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.filter) {
            this.filteredItems = this.items.filter(this.filter);
        }
        else {
            this.filteredItems = this.items;
        }
        this.currentPageSize = this.pageSize;
    };
    Object.defineProperty(SearchFilterList.prototype, "visibleItems", {
        /** Returns visible portion of the items.  */
        get: /**
         * Returns visible portion of the items.
         * @return {?}
         */
        function () {
            return this.filteredItems.slice(0, this.currentPageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "length", {
        /** Returns entire collection length including items not displayed on the page. */
        get: /**
         * Returns entire collection length including items not displayed on the page.
         * @return {?}
         */
        function () {
            return this.items.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "canShowMoreItems", {
        /** Detects whether more items can be displayed. */
        get: /**
         * Detects whether more items can be displayed.
         * @return {?}
         */
        function () {
            return this.filteredItems.length > this.currentPageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "canShowLessItems", {
        /** Detects whether less items can be displayed. */
        get: /**
         * Detects whether less items can be displayed.
         * @return {?}
         */
        function () {
            return this.currentPageSize > this.pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchFilterList.prototype, "fitsPage", {
        /** Detects whether content fits single page. */
        get: /**
         * Detects whether content fits single page.
         * @return {?}
         */
        function () {
            return this.pageSize >= this.filteredItems.length;
        },
        enumerable: true,
        configurable: true
    });
    /** Display more items. */
    /**
     * Display more items.
     * @return {?}
     */
    SearchFilterList.prototype.showMoreItems = /**
     * Display more items.
     * @return {?}
     */
    function () {
        if (this.canShowMoreItems) {
            this.currentPageSize += this.pageSize;
        }
    };
    /** Display less items. */
    /**
     * Display less items.
     * @return {?}
     */
    SearchFilterList.prototype.showLessItems = /**
     * Display less items.
     * @return {?}
     */
    function () {
        if (this.canShowLessItems) {
            this.currentPageSize -= this.pageSize;
        }
    };
    /** Reset entire collection and page settings. */
    /**
     * Reset entire collection and page settings.
     * @return {?}
     */
    SearchFilterList.prototype.clear = /**
     * Reset entire collection and page settings.
     * @return {?}
     */
    function () {
        this.currentPageSize = this.pageSize;
        this.items = [];
        this.filteredItems = [];
        this.filterText = '';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SearchFilterList.prototype.addItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!item) {
            return;
        }
        this.items.push(item);
        this.applyFilter();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SearchFilterList.prototype.deleteItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var removeIndex = this.items.indexOf(item);
        if (removeIndex > -1) {
            this.items.splice(removeIndex, 1);
            this.filteredItems.splice(removeIndex, 1);
        }
    };
    /**
     * @return {?}
     */
    SearchFilterList.prototype[Symbol.iterator] = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pointer = 0;
        /** @type {?} */
        var items = this.visibleItems;
        return {
            next: /**
             * @return {?}
             */
            function () {
                if (pointer < items.length) {
                    return {
                        done: false,
                        value: items[pointer++]
                    };
                }
                else {
                    return {
                        done: true,
                        value: null
                    };
                }
            }
        };
    };
    return SearchFilterList;
}());
/**
 * @template T
 */
export { SearchFilterList };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchFilterList.prototype.filteredItems;
    /**
     * @type {?}
     * @private
     */
    SearchFilterList.prototype._filterText;
    /** @type {?} */
    SearchFilterList.prototype.items;
    /** @type {?} */
    SearchFilterList.prototype.pageSize;
    /** @type {?} */
    SearchFilterList.prototype.currentPageSize;
    /**
     * @type {?}
     * @private
     */
    SearchFilterList.prototype._filter;
}
//# sourceMappingURL=data:application/json;base64,