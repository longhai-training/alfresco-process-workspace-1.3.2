/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
var SearchSortingPickerComponent = /** @class */ (function () {
    function SearchSortingPickerComponent(queryBuilder) {
        this.queryBuilder = queryBuilder;
        this.options = [];
    }
    /**
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = this.queryBuilder.getSortingOptions();
        /** @type {?} */
        var primary = this.queryBuilder.getPrimarySorting();
        if (primary) {
            this.value = primary.key;
            this.ascending = primary.ascending;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.onValueChanged = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.value = key;
        this.ascending = this.getSortingOrder();
        this.applySorting();
    };
    /**
     * @param {?} ascending
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.onSortingChanged = /**
     * @param {?} ascending
     * @return {?}
     */
    function (ascending) {
        this.ascending = ascending;
        this.applySorting();
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.findOptionByKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key) {
            return this.options.find((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) { return opt.key === key; }));
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.applySorting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = this.findOptionByKey(this.value);
        if (option) {
            this.queryBuilder.sorting = [tslib_1.__assign({}, option, { ascending: this.ascending })];
            this.queryBuilder.update();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchSortingPickerComponent.prototype.getSortingOrder = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var option = this.findOptionByKey(this.value);
        if (option) {
            return option.ascending;
        }
        return this.queryBuilder.getPrimarySorting().ascending;
    };
    SearchSortingPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-sorting-picker',
                    template: "<adf-sorting-picker\n    [options]=\"options\"\n    [selected]=\"value\"\n    [ascending]=\"ascending\"\n    (valueChange)=\"onValueChanged($event)\"\n    (sortingChange)=\"onSortingChanged($event)\">\n</adf-sorting-picker>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-sorting-picker' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SearchSortingPickerComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService }
    ]; };
    return SearchSortingPickerComponent;
}());
export { SearchSortingPickerComponent };
if (false) {
    /** @type {?} */
    SearchSortingPickerComponent.prototype.options;
    /** @type {?} */
    SearchSortingPickerComponent.prototype.value;
    /** @type {?} */
    SearchSortingPickerComponent.prototype.ascending;
    /**
     * @type {?}
     * @private
     */
    SearchSortingPickerComponent.prototype.queryBuilder;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNlYXJjaC9jb21wb25lbnRzL3NlYXJjaC1zb3J0aW5nLXBpY2tlci9zZWFyY2gtc29ydGluZy1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFVLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRy9FO0lBYUksc0NBQW9CLFlBQXVDO1FBQXZDLGlCQUFZLEdBQVosWUFBWSxDQUEyQjtRQUozRCxZQUFPLEdBQThCLEVBQUUsQ0FBQztJQUlzQixDQUFDOzs7O0lBRS9ELCtDQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDOztZQUUvQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRTtRQUNyRCxJQUFJLE9BQU8sRUFBRTtZQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDdEM7SUFDTCxDQUFDOzs7OztJQUVELHFEQUFjOzs7O0lBQWQsVUFBZSxHQUFXO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELHVEQUFnQjs7OztJQUFoQixVQUFpQixTQUFrQjtRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBRU8sc0RBQWU7Ozs7O0lBQXZCLFVBQXdCLEdBQVc7UUFDL0IsSUFBSSxHQUFHLEVBQUU7WUFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTs7OztZQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQWYsQ0FBZSxFQUFDLENBQUM7U0FDdEQ7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVPLG1EQUFZOzs7O0lBQXBCOztZQUNVLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDL0MsSUFBSSxNQUFNLEVBQUU7WUFDUixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxzQkFDckIsTUFBTSxJQUNULFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxJQUMzQixDQUFDO1lBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUM5QjtJQUNMLENBQUM7Ozs7O0lBRU8sc0RBQWU7Ozs7SUFBdkI7O1lBQ1UsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvQyxJQUFJLE1BQU0sRUFBRTtZQUNSLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUMzQjtRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUMzRCxDQUFDOztnQkE3REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLDZPQUFxRDtvQkFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSwyQkFBMkIsRUFBRTs7aUJBQy9DOzs7O2dCQVRRLHlCQUF5Qjs7SUFrRWxDLG1DQUFDO0NBQUEsQUEvREQsSUErREM7U0F4RFksNEJBQTRCOzs7SUFFckMsK0NBQXdDOztJQUN4Qyw2Q0FBYzs7SUFDZCxpREFBbUI7Ozs7O0lBRVAsb0RBQStDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWFyY2hRdWVyeUJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VhcmNoLXF1ZXJ5LWJ1aWxkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTZWFyY2hTb3J0aW5nRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL3NlYXJjaC1zb3J0aW5nLWRlZmluaXRpb24uaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtc2VhcmNoLXNvcnRpbmctcGlja2VyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLXNvcnRpbmctcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zZWFyY2gtc29ydGluZy1waWNrZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgY2xhc3M6ICdhZGYtc2VhcmNoLXNvcnRpbmctcGlja2VyJyB9XG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaFNvcnRpbmdQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgb3B0aW9uczogU2VhcmNoU29ydGluZ0RlZmluaXRpb25bXSA9IFtdO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgYXNjZW5kaW5nOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBxdWVyeUJ1aWxkZXI6IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdGhpcy5xdWVyeUJ1aWxkZXIuZ2V0U29ydGluZ09wdGlvbnMoKTtcblxuICAgICAgICBjb25zdCBwcmltYXJ5ID0gdGhpcy5xdWVyeUJ1aWxkZXIuZ2V0UHJpbWFyeVNvcnRpbmcoKTtcbiAgICAgICAgaWYgKHByaW1hcnkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwcmltYXJ5LmtleTtcbiAgICAgICAgICAgIHRoaXMuYXNjZW5kaW5nID0gcHJpbWFyeS5hc2NlbmRpbmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlZChrZXk6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlID0ga2V5O1xuICAgICAgICB0aGlzLmFzY2VuZGluZyA9IHRoaXMuZ2V0U29ydGluZ09yZGVyKCk7XG4gICAgICAgIHRoaXMuYXBwbHlTb3J0aW5nKCk7XG4gICAgfVxuXG4gICAgb25Tb3J0aW5nQ2hhbmdlZChhc2NlbmRpbmc6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5hc2NlbmRpbmcgPSBhc2NlbmRpbmc7XG4gICAgICAgIHRoaXMuYXBwbHlTb3J0aW5nKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaW5kT3B0aW9uQnlLZXkoa2V5OiBzdHJpbmcpOiBTZWFyY2hTb3J0aW5nRGVmaW5pdGlvbiB7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQua2V5ID09PSBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlTb3J0aW5nKCkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmZpbmRPcHRpb25CeUtleSh0aGlzLnZhbHVlKTtcbiAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIuc29ydGluZyA9IFt7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9uLFxuICAgICAgICAgICAgICAgIGFzY2VuZGluZzogdGhpcy5hc2NlbmRpbmdcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFNvcnRpbmdPcmRlcigpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maW5kT3B0aW9uQnlLZXkodGhpcy52YWx1ZSk7XG4gICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uYXNjZW5kaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlCdWlsZGVyLmdldFByaW1hcnlTb3J0aW5nKCkuYXNjZW5kaW5nO1xuICAgIH1cblxufVxuIl19