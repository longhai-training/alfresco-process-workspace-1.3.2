/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { FormControl, Validators, FormGroup } from '@angular/forms';
import { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';
var SearchNumberRangeComponent = /** @class */ (function () {
    function SearchNumberRangeComponent() {
        this.matcher = new LiveErrorStateMatcher();
        this.format = '[{FROM} TO {TO}]';
    }
    /**
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.settings) {
            this.field = this.settings.field;
            this.format = this.settings.format || '[{FROM} TO {TO}]';
        }
        this.validators = Validators.compose([
            Validators.required,
            Validators.pattern(/^-?(0|[1-9]\d*)?$/),
            Validators.min(0)
        ]);
        this.from = new FormControl('', this.validators);
        this.to = new FormControl('', this.validators);
        this.form = new FormGroup({
            from: this.from,
            to: this.to
        }, this.formValidator);
    };
    /**
     * @param {?} formGroup
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.formValidator = /**
     * @param {?} formGroup
     * @return {?}
     */
    function (formGroup) {
        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : { 'mismatch': true };
    };
    /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.apply = /**
     * @param {?} model
     * @param {?} isValid
     * @return {?}
     */
    function (model, isValid) {
        if (isValid && this.id && this.context && this.field) {
            /** @type {?} */
            var map = new Map();
            map.set('FROM', model.from);
            map.set('TO', model.to);
            /** @type {?} */
            var value = this.formatString(this.format, map);
            this.context.queryFragments[this.id] = this.field + ":" + value;
            this.context.update();
        }
    };
    /**
     * @private
     * @param {?} str
     * @param {?} map
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.formatString = /**
     * @private
     * @param {?} str
     * @param {?} map
     * @return {?}
     */
    function (str, map) {
        /** @type {?} */
        var result = str;
        map.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            /** @type {?} */
            var expr = new RegExp('{' + key + '}', 'gm');
            result = result.replace(expr, value);
        }));
        return result;
    };
    /**
     * @return {?}
     */
    SearchNumberRangeComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.form.reset({
            from: '',
            to: ''
        });
        if (this.id && this.context) {
            this.context.queryFragments[this.id] = '';
            this.context.update();
        }
    };
    SearchNumberRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-number-range',
                    template: "<form [formGroup]=\"form\" novalidate (ngSubmit)=\"apply(form.value, form.valid)\">\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"from\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.FROM' | translate }}\"\n            autocomplete=\"off\"\n            data-automation-id=\"number-range-from-input\">\n        <mat-error *ngIf=\"from.hasError('pattern') || from.hasError('min')\" data-automation-id=\"number-range-from-error-invalid\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"from.hasError('required')\" data-automation-id=\"number-range-from-error-required\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n        <input\n            matInput [formControl]=\"to\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"{{ 'SEARCH.FILTER.RANGE.TO' | translate }}\"\n            autocomplete=\"off\"\n            data-automation-id=\"number-range-to-input\">\n        <mat-error *ngIf=\"to.hasError('pattern') || to.hasError('min')\" data-automation-id=\"number-range-to-error-invalid\">\n            {{ 'SEARCH.FILTER.VALIDATION.INVALID-FORMAT' | translate }}\n        </mat-error>\n        <mat-error *ngIf=\"to.hasError('required')\" data-automation-id=\"number-range-to-error-required\">\n            {{ 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' | translate }}\n        </mat-error>\n    </mat-form-field>\n\n\n    <div class=\"adf-facet-buttons\">\n        <button mat-button color=\"primary\" type=\"button\" (click)=\"reset()\" data-automation-id=\"number-range-btn-clear\">\n            {{ 'SEARCH.FILTER.ACTIONS.CLEAR' | translate }}\n        </button>\n        <button mat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" data-automation-id=\"number-range-btn-apply\">\n            {{ 'SEARCH.FILTER.ACTIONS.APPLY' | translate }}\n        </button>\n    </div>\n</form>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-number-range' },
                    styles: [".adf-search-number-range>form{display:inline-flex;flex-direction:column;width:100%}"]
                }] }
    ];
    return SearchNumberRangeComponent;
}());
export { SearchNumberRangeComponent };
if (false) {
    /** @type {?} */
    SearchNumberRangeComponent.prototype.from;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.to;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.form;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.matcher;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.id;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.settings;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.context;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.field;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.format;
    /** @type {?} */
    SearchNumberRangeComponent.prototype.validators;
}
//# sourceMappingURL=data:application/json;base64,