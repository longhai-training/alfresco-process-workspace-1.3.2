/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
import { RequestSortDefinitionInner } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var SearchQueryBuilderService = /** @class */ (function () {
    function SearchQueryBuilderService(appConfig, alfrescoApiService) {
        this.appConfig = appConfig;
        this.alfrescoApiService = alfrescoApiService;
        this._userQuery = '';
        this.updated = new Subject();
        this.executed = new Subject();
        this.error = new Subject();
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.paging = null;
        this.sorting = [];
        this.userFacetBuckets = {};
        this.config = {
            categories: []
        };
        // TODO: to be supported in future iterations
        this.ranges = {};
        this.resetToDefaults();
    }
    Object.defineProperty(SearchQueryBuilderService.prototype, "userQuery", {
        get: /**
         * @return {?}
         */
        function () {
            return this._userQuery;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            value = (value || '').trim();
            this._userQuery = value ? "(" + value + ")" : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the query to the defaults specified in the app config.
     */
    /**
     * Resets the query to the defaults specified in the app config.
     * @return {?}
     */
    SearchQueryBuilderService.prototype.resetToDefaults = /**
     * Resets the query to the defaults specified in the app config.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var template = this.appConfig.get('search');
        if (template) {
            this.config = JSON.parse(JSON.stringify(template));
            this.categories = (this.config.categories || []).filter((/**
             * @param {?} category
             * @return {?}
             */
            function (category) { return category.enabled; }));
            this.filterQueries = this.config.filterQueries || [];
            this.userFacetBuckets = {};
            if (this.config.sorting) {
                this.sorting = this.config.sorting.defaults || [];
            }
        }
    };
    /**
     * Adds a facet bucket to a field.
     * @param field The target field
     * @param bucket Bucket to add
     */
    /**
     * Adds a facet bucket to a field.
     * @param {?} field The target field
     * @param {?} bucket Bucket to add
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addUserFacetBucket = /**
     * Adds a facet bucket to a field.
     * @param {?} field The target field
     * @param {?} bucket Bucket to add
     * @return {?}
     */
    function (field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            var buckets = this.userFacetBuckets[field.field] || [];
            /** @type {?} */
            var existing = buckets.find((/**
             * @param {?} facetBucket
             * @return {?}
             */
            function (facetBucket) { return facetBucket.label === bucket.label; }));
            if (!existing) {
                buckets.push(bucket);
            }
            this.userFacetBuckets[field.field] = buckets;
        }
    };
    /**
     * Gets the buckets currently added to a field
     * @param field The target fields
     * @returns Bucket array
     */
    /**
     * Gets the buckets currently added to a field
     * @param {?} field The target fields
     * @return {?} Bucket array
     */
    SearchQueryBuilderService.prototype.getUserFacetBuckets = /**
     * Gets the buckets currently added to a field
     * @param {?} field The target fields
     * @return {?} Bucket array
     */
    function (field) {
        return this.userFacetBuckets[field] || [];
    };
    /**
     * Removes an existing bucket from a field.
     * @param field The target field
     * @param bucket Bucket to remove
     */
    /**
     * Removes an existing bucket from a field.
     * @param {?} field The target field
     * @param {?} bucket Bucket to remove
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeUserFacetBucket = /**
     * Removes an existing bucket from a field.
     * @param {?} field The target field
     * @param {?} bucket Bucket to remove
     * @return {?}
     */
    function (field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            var buckets = this.userFacetBuckets[field.field] || [];
            this.userFacetBuckets[field.field] = buckets
                .filter((/**
             * @param {?} facetBucket
             * @return {?}
             */
            function (facetBucket) { return facetBucket.label !== bucket.label; }));
        }
    };
    /**
     * Adds a filter query to the current query.
     * @param query Query string to add
     */
    /**
     * Adds a filter query to the current query.
     * @param {?} query Query string to add
     * @return {?}
     */
    SearchQueryBuilderService.prototype.addFilterQuery = /**
     * Adds a filter query to the current query.
     * @param {?} query Query string to add
     * @return {?}
     */
    function (query) {
        if (query) {
            /** @type {?} */
            var existing = this.filterQueries.find((/**
             * @param {?} filterQuery
             * @return {?}
             */
            function (filterQuery) { return filterQuery.query === query; }));
            if (!existing) {
                this.filterQueries.push({ query: query });
            }
        }
    };
    /**
     * Removes an existing filter query.
     * @param query The query to remove
     */
    /**
     * Removes an existing filter query.
     * @param {?} query The query to remove
     * @return {?}
     */
    SearchQueryBuilderService.prototype.removeFilterQuery = /**
     * Removes an existing filter query.
     * @param {?} query The query to remove
     * @return {?}
     */
    function (query) {
        if (query) {
            this.filterQueries = this.filterQueries
                .filter((/**
             * @param {?} filterQuery
             * @return {?}
             */
            function (filterQuery) { return filterQuery.query !== query; }));
        }
    };
    /**
     * Gets a facet query by label.
     * @param label Label of the query
     * @returns Facet query data
     */
    /**
     * Gets a facet query by label.
     * @param {?} label Label of the query
     * @return {?} Facet query data
     */
    SearchQueryBuilderService.prototype.getFacetQuery = /**
     * Gets a facet query by label.
     * @param {?} label Label of the query
     * @return {?} Facet query data
     */
    function (label) {
        if (label && this.hasFacetQueries) {
            /** @type {?} */
            var result = this.config.facetQueries.queries.find((/**
             * @param {?} query
             * @return {?}
             */
            function (query) { return query.label === label; }));
            if (result) {
                return tslib_1.__assign({}, result);
            }
        }
        return null;
    };
    /**
     * Gets a facet field by label.
     * @param label Label of the facet field
     * @returns Facet field data
     */
    /**
     * Gets a facet field by label.
     * @param {?} label Label of the facet field
     * @return {?} Facet field data
     */
    SearchQueryBuilderService.prototype.getFacetField = /**
     * Gets a facet field by label.
     * @param {?} label Label of the facet field
     * @return {?} Facet field data
     */
    function (label) {
        if (label) {
            /** @type {?} */
            var fields = this.config.facetFields.fields || [];
            /** @type {?} */
            var result = fields.find((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.label === label; }));
            if (result) {
                result.label = this.getSupportedLabel(result.label);
                return tslib_1.__assign({}, result);
            }
        }
        return null;
    };
    /**
     * Builds the current query and triggers the `updated` event.
     */
    /**
     * Builds the current query and triggers the `updated` event.
     * @return {?}
     */
    SearchQueryBuilderService.prototype.update = /**
     * Builds the current query and triggers the `updated` event.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var query = this.buildQuery();
        this.updated.next(query);
    };
    /**
     * Builds and executes the current query.
     * @returns Nothing
     */
    /**
     * Builds and executes the current query.
     * @return {?} Nothing
     */
    SearchQueryBuilderService.prototype.execute = /**
     * Builds and executes the current query.
     * @return {?} Nothing
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var query, resultSetPaging, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        query = this.buildQuery();
                        if (!query) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.alfrescoApiService.searchApi.search(query)];
                    case 1:
                        resultSetPaging = _a.sent();
                        this.executed.next(resultSetPaging);
                        _a.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        this.error.next(error_1);
                        this.executed.next({
                            list: {
                                pagination: {
                                    totalItems: 0
                                },
                                entries: []
                            }
                        });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Builds the current query.
     * @returns The finished query
     */
    /**
     * Builds the current query.
     * @return {?} The finished query
     */
    SearchQueryBuilderService.prototype.buildQuery = /**
     * Builds the current query.
     * @return {?} The finished query
     */
    function () {
        /** @type {?} */
        var query = this.getFinalQuery();
        /** @type {?} */
        var include = this.config.include || [];
        if (include.length === 0) {
            include.push('path', 'allowableOperations');
        }
        if (query) {
            /** @type {?} */
            var result = (/** @type {?} */ ({
                query: {
                    query: query,
                    language: 'afts'
                },
                include: include,
                paging: this.paging,
                fields: this.config.fields,
                filterQueries: this.filterQueries,
                facetQueries: this.facetQueries,
                facetIntervals: this.facetIntervals,
                facetFields: this.facetFields,
                sort: this.sort,
                highlight: this.highlight
            }));
            result['facetFormat'] = 'V2';
            return result;
        }
        return null;
    };
    /**
     * Gets the primary sorting definition.
     * @returns The primary sorting definition
     */
    /**
     * Gets the primary sorting definition.
     * @return {?} The primary sorting definition
     */
    SearchQueryBuilderService.prototype.getPrimarySorting = /**
     * Gets the primary sorting definition.
     * @return {?} The primary sorting definition
     */
    function () {
        if (this.sorting && this.sorting.length > 0) {
            return this.sorting[0];
        }
        return null;
    };
    /**
     * Gets all pre-configured sorting options that users can choose from.
     * @returns Pre-configured sorting options
     */
    /**
     * Gets all pre-configured sorting options that users can choose from.
     * @return {?} Pre-configured sorting options
     */
    SearchQueryBuilderService.prototype.getSortingOptions = /**
     * Gets all pre-configured sorting options that users can choose from.
     * @return {?} Pre-configured sorting options
     */
    function () {
        if (this.config && this.config.sorting) {
            return this.config.sorting.options || [];
        }
        return [];
    };
    /**
     * Gets the query group.
     * @param query Target query
     * @returns Query group
     */
    /**
     * Gets the query group.
     * @param {?} query Target query
     * @return {?} Query group
     */
    SearchQueryBuilderService.prototype.getQueryGroup = /**
     * Gets the query group.
     * @param {?} query Target query
     * @return {?} Query group
     */
    function (query) {
        return query.group || this.config.facetQueries.label || 'Facet Queries';
    };
    Object.defineProperty(SearchQueryBuilderService.prototype, "hasFacetQueries", {
        /**
         * Checks if FacetQueries has been defined
         * @returns True if defined, false otherwise
         */
        get: /**
         * Checks if FacetQueries has been defined
         * @return {?} True if defined, false otherwise
         */
        function () {
            if (this.config
                && this.config.facetQueries
                && this.config.facetQueries.queries
                && this.config.facetQueries.queries.length > 0) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "hasFacetIntervals", {
        /**
         * Checks if FacetIntervals has been defined
         * @returns True if defined, false otherwise
         */
        get: /**
         * Checks if FacetIntervals has been defined
         * @return {?} True if defined, false otherwise
         */
        function () {
            if (this.config
                && this.config.facetIntervals
                && this.config.facetIntervals.intervals
                && this.config.facetIntervals.intervals.length > 0) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "hasFacetHighlight", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config && this.config.highlight ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "sort", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.sorting.map((/**
             * @param {?} def
             * @return {?}
             */
            function (def) {
                return new RequestSortDefinitionInner({
                    type: def.type,
                    field: def.field,
                    ascending: def.ascending
                });
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetQueries", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.hasFacetQueries) {
                return this.config.facetQueries.queries.map((/**
                 * @param {?} query
                 * @return {?}
                 */
                function (query) {
                    query.group = _this.getQueryGroup(query);
                    return (/** @type {?} */ (tslib_1.__assign({}, query)));
                }));
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetIntervals", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.hasFacetIntervals) {
                /** @type {?} */
                var configIntervals = this.config.facetIntervals;
                return {
                    intervals: configIntervals.intervals.map((/**
                     * @param {?} interval
                     * @return {?}
                     */
                    function (interval) { return (/** @type {?} */ ({
                        label: _this.getSupportedLabel(interval.label),
                        field: interval.field,
                        sets: interval.sets.map((/**
                         * @param {?} set
                         * @return {?}
                         */
                        function (set) { return (/** @type {?} */ ({
                            label: _this.getSupportedLabel(set.label),
                            start: set.start,
                            end: set.end,
                            startInclusive: set.startInclusive,
                            endInclusive: set.endInclusive
                        })); }))
                    })); }))
                };
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchQueryBuilderService.prototype, "highlight", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.hasFacetHighlight ? this.config.highlight : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    SearchQueryBuilderService.prototype.getFinalQuery = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var query = '';
        this.categories.forEach((/**
         * @param {?} facet
         * @return {?}
         */
        function (facet) {
            /** @type {?} */
            var customQuery = _this.queryFragments[facet.id];
            if (customQuery) {
                if (query.length > 0) {
                    query += ' AND ';
                }
                query += "(" + customQuery + ")";
            }
        }));
        /** @type {?} */
        var result = [this.userQuery, query]
            .filter((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return entry; }))
            .join(' AND ');
        if (this.userFacetBuckets) {
            Object.keys(this.userFacetBuckets).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var subQuery = (_this.userFacetBuckets[key] || [])
                    .filter((/**
                 * @param {?} bucket
                 * @return {?}
                 */
                function (bucket) { return bucket.filterQuery; }))
                    .map((/**
                 * @param {?} bucket
                 * @return {?}
                 */
                function (bucket) { return bucket.filterQuery; }))
                    .join(' OR ');
                if (subQuery) {
                    if (result.length > 0) {
                        result += ' AND ';
                    }
                    result += "(" + subQuery + ")";
                }
            }));
        }
        return result;
    };
    Object.defineProperty(SearchQueryBuilderService.prototype, "facetFields", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var facetFields = this.config.facetFields && this.config.facetFields.fields;
            if (facetFields && facetFields.length > 0) {
                return {
                    facets: facetFields.map((/**
                     * @param {?} facet
                     * @return {?}
                     */
                    function (facet) { return (/** @type {?} */ ({
                        field: facet.field,
                        mincount: facet.mincount,
                        label: _this.getSupportedLabel(facet.label),
                        limit: facet.limit,
                        offset: facet.offset,
                        prefix: facet.prefix
                    })); }))
                };
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Encloses a label name with double quotes if it contains whitespace characters.
     * @param configLabel Original label text
     * @returns Label, possibly with quotes if it contains spaces
     */
    /**
     * Encloses a label name with double quotes if it contains whitespace characters.
     * @param {?} configLabel Original label text
     * @return {?} Label, possibly with quotes if it contains spaces
     */
    SearchQueryBuilderService.prototype.getSupportedLabel = /**
     * Encloses a label name with double quotes if it contains whitespace characters.
     * @param {?} configLabel Original label text
     * @return {?} Label, possibly with quotes if it contains spaces
     */
    function (configLabel) {
        /** @type {?} */
        var spaceInsideLabelIndex = configLabel.search(/\s/g);
        if (spaceInsideLabelIndex > -1) {
            return "\"" + configLabel + "\"";
        }
        return configLabel;
    };
    SearchQueryBuilderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SearchQueryBuilderService.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ SearchQueryBuilderService.ngInjectableDef = i0.defineInjectable({ factory: function SearchQueryBuilderService_Factory() { return new SearchQueryBuilderService(i0.inject(i1.AppConfigService), i0.inject(i1.AlfrescoApiService)); }, token: SearchQueryBuilderService, providedIn: "root" });
    return SearchQueryBuilderService;
}());
export { SearchQueryBuilderService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchQueryBuilderService.prototype._userQuery;
    /** @type {?} */
    SearchQueryBuilderService.prototype.updated;
    /** @type {?} */
    SearchQueryBuilderService.prototype.executed;
    /** @type {?} */
    SearchQueryBuilderService.prototype.error;
    /** @type {?} */
    SearchQueryBuilderService.prototype.categories;
    /** @type {?} */
    SearchQueryBuilderService.prototype.queryFragments;
    /** @type {?} */
    SearchQueryBuilderService.prototype.filterQueries;
    /** @type {?} */
    SearchQueryBuilderService.prototype.paging;
    /** @type {?} */
    SearchQueryBuilderService.prototype.sorting;
    /**
     * @type {?}
     * @protected
     */
    SearchQueryBuilderService.prototype.userFacetBuckets;
    /** @type {?} */
    SearchQueryBuilderService.prototype.config;
    /** @type {?} */
    SearchQueryBuilderService.prototype.ranges;
    /**
     * @type {?}
     * @private
     */
    SearchQueryBuilderService.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    SearchQueryBuilderService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,