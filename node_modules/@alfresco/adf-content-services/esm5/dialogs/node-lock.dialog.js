/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import moment from 'moment-es6';
import { Component, Inject, Optional } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { FormBuilder } from '@angular/forms';
import { NodeBodyLock } from '@alfresco/js-api';
import { AlfrescoApiService } from '@alfresco/adf-core';
var NodeLockDialogComponent = /** @class */ (function () {
    function NodeLockDialogComponent(formBuilder, dialog, alfrescoApi, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.alfrescoApi = alfrescoApi;
        this.data = data;
        this.node = null;
    }
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var node = this.data.node;
        this.nodeName = node.name;
        this.form = this.formBuilder.group({
            isLocked: node.isLocked || false,
            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',
            isTimeLock: !!node.properties['cm:expiryDate'],
            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()
        });
    };
    Object.defineProperty(NodeLockDialogComponent.prototype, "lockTimeInSeconds", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            if (this.form.value.isTimeLock) {
                /** @type {?} */
                var duration = moment.duration(moment(this.form.value.time).diff(moment()));
                return duration.asSeconds();
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeLockDialogComponent.prototype, "nodeBodyLock", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return new NodeBodyLock({
                'timeToExpire': this.lockTimeInSeconds,
                'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',
                'lifetime': 'PERSISTENT'
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    NodeLockDialogComponent.prototype.toggleLock = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this, nodesApi = _a.alfrescoApi.nodesApi, node = _a.data.node;
        if (this.form.value.isLocked) {
            return nodesApi.lockNode(node.id, this.nodeBodyLock);
        }
        return nodesApi.unlockNode(node.id);
    };
    /**
     * @return {?}
     */
    NodeLockDialogComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.toggleLock()
            .then((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            _this.data.node.isLocked = _this.form.value.isLocked;
            _this.dialog.close(node.entry);
        }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.data.onError(error); }));
    };
    NodeLockDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-node-lock',
                    template: "<h2 mat-dialog-title>\n    {{ 'CORE.FILE_DIALOG.FILE_LOCK' | translate }}\n</h2>\n\n<mat-dialog-content>\n    <br />\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-checkbox  data-automation-id=\"adf-lock-node-checkbox\" class=\"adf-lock-file-name\" [formControl]=\"form.controls['isLocked']\" ngDefaultControl>\n            {{ 'CORE.FILE_DIALOG.FILE_LOCK_CHECKBOX' | translate }} <strong>\"{{ nodeName }}\"</strong>\n        </mat-checkbox>\n\n        <br />\n\n        <div *ngIf=\"form.value.isLocked\">\n            <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['allowOwner']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.ALLOW_OTHERS_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-checkbox class=\"adf-lock-file-name\" [formControl]=\"form.controls['isTimeLock']\" ngDefaultControl>\n                {{ 'CORE.FILE_DIALOG.TIME_LOCK_CHECKBOX' | translate }}\n            </mat-checkbox>\n\n            <br />\n\n            <mat-form-field *ngIf=\"form.value.isTimeLock\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input matInput [formControl]=\"form.controls['time']\" [matDatetimepicker]=\"datetimePicker\" required autocomplete=\"false\">\n            </mat-form-field>\n        </div>\n    </form>\n    <br />\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button mat-button mat-dialog-close data-automation-id=\"lock-dialog-btn-cancel\">\n        {{ 'CORE.FILE_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\" mat-button (click)=\"submit()\">\n        {{ 'CORE.FILE_DIALOG.SAVE_BUTTON.LABEL' | translate }}\n    </button>\n</mat-dialog-actions>\n",
                    styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}"]
                }] }
    ];
    /** @nocollapse */
    NodeLockDialogComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MatDialogRef },
        { type: AlfrescoApiService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return NodeLockDialogComponent;
}());
export { NodeLockDialogComponent };
if (false) {
    /** @type {?} */
    NodeLockDialogComponent.prototype.form;
    /** @type {?} */
    NodeLockDialogComponent.prototype.node;
    /** @type {?} */
    NodeLockDialogComponent.prototype.nodeName;
    /**
     * @type {?}
     * @private
     */
    NodeLockDialogComponent.prototype.formBuilder;
    /** @type {?} */
    NodeLockDialogComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodeLockDialogComponent.prototype.alfrescoApi;
    /** @type {?} */
    NodeLockDialogComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1sb2NrLmRpYWxvZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImRpYWxvZ3Mvbm9kZS1sb2NrLmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLE1BQU0sTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEUsT0FBTyxFQUFFLFdBQVcsRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBRXhELE9BQU8sRUFBRSxZQUFZLEVBQW1CLE1BQU0sa0JBQWtCLENBQUM7QUFDakUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFeEQ7SUFXSSxpQ0FDWSxXQUF3QixFQUN6QixNQUE2QyxFQUM1QyxXQUErQixFQUdoQyxJQUFTO1FBTFIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDekIsV0FBTSxHQUFOLE1BQU0sQ0FBdUM7UUFDNUMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBR2hDLFNBQUksR0FBSixJQUFJLENBQUs7UUFUcEIsU0FBSSxHQUFTLElBQUksQ0FBQztJQVdsQixDQUFDOzs7O0lBRUQsMENBQVE7OztJQUFSO1FBQ1ksSUFBQSxxQkFBSTtRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUUxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQy9CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUs7WUFDaEMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssWUFBWTtZQUMzRCxVQUFVLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO1lBQzlDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFO1NBQ2pHLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxzQkFBWSxzREFBaUI7Ozs7O1FBQTdCO1lBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7O29CQUN0QixRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBQzdFLE9BQU8sUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQy9CO1lBRUQsT0FBTyxDQUFDLENBQUM7UUFDYixDQUFDOzs7T0FBQTtJQUVELHNCQUFZLGlEQUFZOzs7OztRQUF4QjtZQUNJLE9BQU8sSUFBSSxZQUFZLENBQUM7Z0JBQ3BCLGNBQWMsRUFBRSxJQUFJLENBQUMsaUJBQWlCO2dCQUN0QyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFDbkUsVUFBVSxFQUFFLFlBQVk7YUFDM0IsQ0FBQyxDQUFDO1FBQ1AsQ0FBQzs7O09BQUE7Ozs7O0lBRU8sNENBQVU7Ozs7SUFBbEI7UUFDVSxJQUFBLFNBQW9ELEVBQW5DLGtDQUFRLEVBQVksbUJBQWU7UUFFMUQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDMUIsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsd0NBQU07OztJQUFOO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsVUFBVSxFQUFFO2FBQ1osSUFBSTs7OztRQUFDLFVBQUMsSUFBZTtZQUNsQixLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ25ELEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLEVBQUM7YUFDRCxLQUFLOzs7O1FBQUMsVUFBQyxLQUFVLElBQUssT0FBQSxLQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBeEIsQ0FBd0IsRUFBQyxDQUFDO0lBQ3pELENBQUM7O2dCQW5FSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBRXpCLDAvREFBc0M7O2lCQUN6Qzs7OztnQkFUUSxXQUFXO2dCQURNLFlBQVk7Z0JBSTdCLGtCQUFrQjtnREFpQmxCLFFBQVEsWUFDUixNQUFNLFNBQUMsZUFBZTs7SUFvRC9CLDhCQUFDO0NBQUEsQUFwRUQsSUFvRUM7U0EvRFksdUJBQXVCOzs7SUFFaEMsdUNBQWdCOztJQUNoQix1Q0FBa0I7O0lBQ2xCLDJDQUFpQjs7Ozs7SUFHYiw4Q0FBZ0M7O0lBQ2hDLHlDQUFvRDs7Ozs7SUFDcEQsOENBQXVDOztJQUN2Qyx1Q0FFZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudC1lczYnO1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTUFUX0RJQUxPR19EQVRBLCBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBOb2RlQm9keUxvY2ssIE5vZGUsIE5vZGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbm9kZS1sb2NrJyxcbiAgICBzdHlsZVVybHM6IFsnLi9mb2xkZXIuZGlhbG9nLnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbm9kZS1sb2NrLmRpYWxvZy5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlTG9ja0RpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBmb3JtOiBGb3JtR3JvdXA7XG4gICAgbm9kZTogTm9kZSA9IG51bGw7XG4gICAgbm9kZU5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcixcbiAgICAgICAgcHVibGljIGRpYWxvZzogTWF0RGlhbG9nUmVmPE5vZGVMb2NrRGlhbG9nQ29tcG9uZW50PixcbiAgICAgICAgcHJpdmF0ZSBhbGZyZXNjb0FwaTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSlcbiAgICAgICAgcHVibGljIGRhdGE6IGFueVxuICAgICkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zdCB7IG5vZGUgfSA9IHRoaXMuZGF0YTtcbiAgICAgICAgdGhpcy5ub2RlTmFtZSA9IG5vZGUubmFtZTtcblxuICAgICAgICB0aGlzLmZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgICAgIGlzTG9ja2VkOiBub2RlLmlzTG9ja2VkIHx8IGZhbHNlLFxuICAgICAgICAgICAgYWxsb3dPd25lcjogbm9kZS5wcm9wZXJ0aWVzWydjbTpsb2NrVHlwZSddID09PSAnV1JJVEVfTE9DSycsXG4gICAgICAgICAgICBpc1RpbWVMb2NrOiAhIW5vZGUucHJvcGVydGllc1snY206ZXhwaXJ5RGF0ZSddLFxuICAgICAgICAgICAgdGltZTogISFub2RlLnByb3BlcnRpZXNbJ2NtOmV4cGlyeURhdGUnXSA/IG1vbWVudChub2RlLnByb3BlcnRpZXNbJ2NtOmV4cGlyeURhdGUnXSkgOiBtb21lbnQoKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBsb2NrVGltZUluU2Vjb25kcygpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5mb3JtLnZhbHVlLmlzVGltZUxvY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKG1vbWVudCh0aGlzLmZvcm0udmFsdWUudGltZSkuZGlmZihtb21lbnQoKSkpO1xuICAgICAgICAgICAgcmV0dXJuIGR1cmF0aW9uLmFzU2Vjb25kcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgbm9kZUJvZHlMb2NrKCk6IE5vZGVCb2R5TG9jayB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZUJvZHlMb2NrKHtcbiAgICAgICAgICAgICd0aW1lVG9FeHBpcmUnOiB0aGlzLmxvY2tUaW1lSW5TZWNvbmRzLFxuICAgICAgICAgICAgJ3R5cGUnOiB0aGlzLmZvcm0udmFsdWUuYWxsb3dPd25lciA/ICdBTExPV19PV05FUl9DSEFOR0VTJyA6ICdGVUxMJyxcbiAgICAgICAgICAgICdsaWZldGltZSc6ICdQRVJTSVNURU5UJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZUxvY2soKTogUHJvbWlzZTxOb2RlRW50cnk+IHtcbiAgICAgICAgY29uc3QgeyBhbGZyZXNjb0FwaTogeyBub2Rlc0FwaSB9LCBkYXRhOiB7IG5vZGUgfSB9ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5mb3JtLnZhbHVlLmlzTG9ja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXNBcGkubG9ja05vZGUobm9kZS5pZCwgdGhpcy5ub2RlQm9keUxvY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVzQXBpLnVubG9ja05vZGUobm9kZS5pZCk7XG4gICAgfVxuXG4gICAgc3VibWl0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRvZ2dsZUxvY2soKVxuICAgICAgICAgICAgLnRoZW4oKG5vZGU6IE5vZGVFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5ub2RlLmlzTG9ja2VkID0gdGhpcy5mb3JtLnZhbHVlLmlzTG9ja2VkO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmNsb3NlKG5vZGUuZW50cnkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gdGhpcy5kYXRhLm9uRXJyb3IoZXJyb3IpKTtcbiAgICB9XG59XG4iXX0=