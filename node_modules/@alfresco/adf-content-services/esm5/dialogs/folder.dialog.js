/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, Optional, EventEmitter, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { NodesApiService, TranslationService } from '@alfresco/adf-core';
import { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';
var FolderDialogComponent = /** @class */ (function () {
    function FolderDialogComponent(formBuilder, dialog, nodesApi, translation, data) {
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        this.nodesApi = nodesApi;
        this.translation = translation;
        this.data = data;
        this.folder = null;
        /**
         * Emitted when the edit/create folder give error for example a folder with same name already exist
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the edit/create folder is successfully created/modified
         */
        this.success = new EventEmitter();
        this.editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';
        this.createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';
        this.nodeType = 'cm:folder';
        if (data) {
            this.editTitle = data.editTitle || this.editTitle;
            this.createTitle = data.createTitle || this.createTitle;
            this.nodeType = data.nodeType || this.nodeType;
        }
    }
    Object.defineProperty(FolderDialogComponent.prototype, "editing", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.data.folder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FolderDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var folder = this.data.folder;
        /** @type {?} */
        var name = '';
        /** @type {?} */
        var description = '';
        if (folder) {
            var properties = folder.properties;
            name = folder.name || '';
            description = properties ? properties['cm:description'] : '';
        }
        /** @type {?} */
        var validators = {
            name: [
                Validators.required,
                forbidSpecialCharacters,
                forbidEndingDot,
                forbidOnlySpaces
            ]
        };
        this.form = this.formBuilder.group({
            name: [name, validators.name],
            description: [description]
        });
    };
    Object.defineProperty(FolderDialogComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            var name = this.form.value.name;
            return (name || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderDialogComponent.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            var description = this.form.value.description;
            return (description || '').trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderDialogComponent.prototype, "properties", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var _a = this, title = _a.name, description = _a.description;
            return {
                'cm:title': title,
                'cm:description': description
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    FolderDialogComponent.prototype.create = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this, name = _a.name, properties = _a.properties, nodeType = _a.nodeType, nodesApi = _a.nodesApi, parentNodeId = _a.data.parentNodeId;
        return nodesApi.createFolder(parentNodeId, { name: name, properties: properties, nodeType: nodeType });
    };
    /**
     * @private
     * @return {?}
     */
    FolderDialogComponent.prototype.edit = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this, name = _a.name, properties = _a.properties, nodesApi = _a.nodesApi, nodeId = _a.data.folder.id;
        return nodesApi.updateNode(nodeId, { name: name, properties: properties });
    };
    /**
     * @return {?}
     */
    FolderDialogComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, form = _a.form, dialog = _a.dialog, editing = _a.editing;
        if (!form.valid) {
            return;
        }
        (editing ? this.edit() : this.create())
            .subscribe((/**
         * @param {?} folder
         * @return {?}
         */
        function (folder) {
            _this.success.emit(folder);
            dialog.close(folder);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); }));
    };
    /**
     * @param {?} error
     * @return {?}
     */
    FolderDialogComponent.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';
        try {
            var statusCode = JSON.parse(error.message).error.statusCode;
            if (statusCode === 409) {
                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';
            }
        }
        catch (err) { /* Do nothing, keep the original message */ }
        this.error.emit(this.translation.instant(errorMessage));
        return error;
    };
    FolderDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-folder-dialog',
                    template: "<h2 mat-dialog-title>\n    {{ (editing ? editTitle : createTitle) | translate }}\n</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\" (submit)=\"submit()\">\n        <mat-form-field class=\"adf-full-width\">\n            <input\n                id=\"adf-folder-name-input\"\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                matInput\n                required\n                [formControl]=\"form.controls['name']\"/>\n\n            <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                <span *ngIf=\"form.controls['name'].errors?.required\">\n                    {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                </span>\n\n                <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                    {{ form.controls['name'].errors?.message | translate }}\n                </span>\n            </mat-hint>\n        </mat-form-field>\n\n        <br />\n        <br />\n\n        <mat-form-field class=\"adf-full-width\">\n            <textarea\n                id=\"adf-folder-description-input\"\n                matInput\n                placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                rows=\"4\"\n                [formControl]=\"form.controls['description']\"></textarea>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-dialog-buttons\">\n    <span class=\"adf-fill-remaining-space\"></span>\n\n    <button\n        mat-button\n        id=\"adf-folder-cancel-button\"\n        mat-dialog-close>\n        {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n    </button>\n\n    <button class=\"adf-dialog-action-button\"\n            id=\"adf-folder-create-button\"\n            mat-button\n            (click)=\"submit()\"\n            [disabled]=\"!form.valid\">\n        {{\n        (editing\n        ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n        : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n        ) | translate\n        }}\n    </button>\n</mat-dialog-actions>\n",
                    styles: [".adf-fill-remaining-space{flex:1 1 auto}.adf-full-width,.adf-lock-file-name .mat-checkbox-layout{width:100%}.adf-lock-file-name .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden}.adf-lock-file-name .mat-checkbox-inner-container{margin:auto 8px auto 0}"]
                }] }
    ];
    /** @nocollapse */
    FolderDialogComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MatDialogRef },
        { type: NodesApiService },
        { type: TranslationService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    FolderDialogComponent.propDecorators = {
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return FolderDialogComponent;
}());
export { FolderDialogComponent };
if (false) {
    /** @type {?} */
    FolderDialogComponent.prototype.form;
    /** @type {?} */
    FolderDialogComponent.prototype.folder;
    /**
     * Emitted when the edit/create folder give error for example a folder with same name already exist
     * @type {?}
     */
    FolderDialogComponent.prototype.error;
    /**
     * Emitted when the edit/create folder is successfully created/modified
     * @type {?}
     */
    FolderDialogComponent.prototype.success;
    /** @type {?} */
    FolderDialogComponent.prototype.editTitle;
    /** @type {?} */
    FolderDialogComponent.prototype.createTitle;
    /** @type {?} */
    FolderDialogComponent.prototype.nodeType;
    /**
     * @type {?}
     * @private
     */
    FolderDialogComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    FolderDialogComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    FolderDialogComponent.prototype.nodesApi;
    /**
     * @type {?}
     * @private
     */
    FolderDialogComponent.prototype.translation;
    /** @type {?} */
    FolderDialogComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,