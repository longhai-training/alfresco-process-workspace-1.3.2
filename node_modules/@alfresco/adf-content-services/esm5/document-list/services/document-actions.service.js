/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, TranslationService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { PermissionModel } from '../models/permissions.model';
import { DocumentListService } from './document-list.service';
import { NodeActionsService } from './node-actions.service';
import { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';
import * as i0 from "@angular/core";
import * as i1 from "./node-actions.service";
import * as i2 from "../../content-node-selector/content-node-dialog.service";
import * as i3 from "@alfresco/adf-core";
import * as i4 from "./document-list.service";
var DocumentActionsService = /** @class */ (function () {
    function DocumentActionsService(nodeActionsService, contentNodeDialogService, translation, documentListService, contentService) {
        this.nodeActionsService = nodeActionsService;
        this.contentNodeDialogService = contentNodeDialogService;
        this.translation = translation;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    /**
     * Gets the handler for an action.
     * @param key Identifier of the action
     * @returns The handler for the action
     */
    /**
     * Gets the handler for an action.
     * @param {?} key Identifier of the action
     * @return {?} The handler for the action
     */
    DocumentActionsService.prototype.getHandler = /**
     * Gets the handler for an action.
     * @param {?} key Identifier of the action
     * @return {?} The handler for the action
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var lKey = key.toLowerCase();
            return this.handlers[lKey] || null;
        }
        return null;
    };
    /**
     * Sets a new handler for an action.
     * @param key Identifier of the action
     * @param handler Handler for the action
     * @returns False if the key was an empty/null string, true otherwise
     */
    /**
     * Sets a new handler for an action.
     * @param {?} key Identifier of the action
     * @param {?} handler Handler for the action
     * @return {?} False if the key was an empty/null string, true otherwise
     */
    DocumentActionsService.prototype.setHandler = /**
     * Sets a new handler for an action.
     * @param {?} key Identifier of the action
     * @param {?} handler Handler for the action
     * @return {?} False if the key was an empty/null string, true otherwise
     */
    function (key, handler) {
        if (key) {
            /** @type {?} */
            var lKey = key.toLowerCase();
            this.handlers[lKey] = handler;
            return true;
        }
        return false;
    };
    /**
     * Checks if actions can be executed for an item.
     * @param nodeEntry Item to receive an action
     * @returns True if the action can be executed on this item, false otherwise
     */
    /**
     * Checks if actions can be executed for an item.
     * @param {?} nodeEntry Item to receive an action
     * @return {?} True if the action can be executed on this item, false otherwise
     */
    DocumentActionsService.prototype.canExecuteAction = /**
     * Checks if actions can be executed for an item.
     * @param {?} nodeEntry Item to receive an action
     * @return {?} True if the action can be executed on this item, false otherwise
     */
    function (nodeEntry) {
        return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;
    };
    /**
     * @private
     * @return {?}
     */
    DocumentActionsService.prototype.setupActionHandlers = /**
     * @private
     * @return {?}
     */
    function () {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
        this.handlers['lock'] = this.lockNode.bind(this);
    };
    /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.lockNode = /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        return this.contentNodeDialogService.openLockNodeDialog(node.entry);
    };
    /**
     * @private
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.downloadNode = /**
     * @private
     * @param {?} obj
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (obj, target, permission) {
        this.nodeActionsService.downloadNode(obj);
    };
    /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.copyNode = /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.copyContent(node.entry, permission);
        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);
        return actionObservable;
    };
    /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.moveNode = /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        /** @type {?} */
        var actionObservable = this.nodeActionsService.moveContent(node.entry, permission);
        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);
        return actionObservable;
    };
    /**
     * @private
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.prepareHandlers = /**
     * @private
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (actionObservable, type, action, target, permission) {
        var _this = this;
        actionObservable.subscribe((/**
         * @param {?} fileOperationMessage
         * @return {?}
         */
        function (fileOperationMessage) {
            _this.success.next(fileOperationMessage);
        }), this.error.next.bind(this.error));
    };
    /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    DocumentActionsService.prototype.deleteNode = /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    function (node, target, permission) {
        var _this = this;
        /** @type {?} */
        var handlerObservable;
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    _this.success.next(message);
                }), (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var message = _this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    _this.error.next(message);
                }));
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({
                    type: 'content',
                    action: 'delete',
                    permission: permission
                }));
                return throwError(new Error('No permission to delete'));
            }
        }
    };
    DocumentActionsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DocumentActionsService.ctorParameters = function () { return [
        { type: NodeActionsService },
        { type: ContentNodeDialogService },
        { type: TranslationService },
        { type: DocumentListService },
        { type: ContentService }
    ]; };
    /** @nocollapse */ DocumentActionsService.ngInjectableDef = i0.defineInjectable({ factory: function DocumentActionsService_Factory() { return new DocumentActionsService(i0.inject(i1.NodeActionsService), i0.inject(i2.ContentNodeDialogService), i0.inject(i3.TranslationService), i0.inject(i4.DocumentListService), i0.inject(i3.ContentService)); }, token: DocumentActionsService, providedIn: "root" });
    return DocumentActionsService;
}());
export { DocumentActionsService };
if (false) {
    /** @type {?} */
    DocumentActionsService.prototype.permissionEvent;
    /** @type {?} */
    DocumentActionsService.prototype.error;
    /** @type {?} */
    DocumentActionsService.prototype.success;
    /**
     * @type {?}
     * @private
     */
    DocumentActionsService.prototype.handlers;
    /**
     * @type {?}
     * @private
     */
    DocumentActionsService.prototype.nodeActionsService;
    /**
     * @type {?}
     * @private
     */
    DocumentActionsService.prototype.contentNodeDialogService;
    /**
     * @type {?}
     * @private
     */
    DocumentActionsService.prototype.translation;
    /**
     * @type {?}
     * @private
     */
    DocumentActionsService.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    DocumentActionsService.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,