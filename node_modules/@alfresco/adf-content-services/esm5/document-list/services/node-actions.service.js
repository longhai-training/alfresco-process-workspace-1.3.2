/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable, Output, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { AlfrescoApiService, ContentService, NodeDownloadDirective } from '@alfresco/adf-core';
import { MatDialog } from '@angular/material';
import { DocumentListService } from './document-list.service';
import { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';
import * as i0 from "@angular/core";
import * as i1 from "../../content-node-selector/content-node-dialog.service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "@alfresco/adf-core";
import * as i4 from "./document-list.service";
var NodeActionsService = /** @class */ (function () {
    function NodeActionsService(contentDialogService, dialogRef, content, documentListService, apiService, dialog) {
        this.contentDialogService = contentDialogService;
        this.dialogRef = dialogRef;
        this.content = content;
        this.documentListService = documentListService;
        this.apiService = apiService;
        this.dialog = dialog;
        this.error = new EventEmitter();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    NodeActionsService.prototype.downloadNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        new NodeDownloadDirective(this.apiService, this.dialog)
            .downloadNode(node);
    };
    /**
     * Copy content node
     *
     * @param contentEntry node to copy
     * @param permission permission which is needed to apply the action
     */
    /**
     * Copy content node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.copyContent = /**
     * Copy content node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('copy', 'content', contentEntry, permission);
    };
    /**
     * Copy folder node
     *
     * @param contentEntry node to copy
     * @param permission permission which is needed to apply the action
     */
    /**
     * Copy folder node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.copyFolder = /**
     * Copy folder node
     *
     * @param {?} contentEntry node to copy
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('copy', 'folder', contentEntry, permission);
    };
    /**
     * Move content node
     *
     * @param contentEntry node to move
     * @param permission permission which is needed to apply the action
     */
    /**
     * Move content node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.moveContent = /**
     * Move content node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('move', 'content', contentEntry, permission);
    };
    /**
     * Move folder node
     *
     * @param contentEntry node to move
     * @param permission permission which is needed to apply the action
     */
    /**
     * Move folder node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.moveFolder = /**
     * Move folder node
     *
     * @param {?} contentEntry node to move
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (contentEntry, permission) {
        return this.doFileOperation('move', 'folder', contentEntry, permission);
    };
    /**
     * General method for performing the given operation (copy|move)
     *
     * @param action the action to perform (copy|move)
     * @param type type of the content (content|folder)
     * @param contentEntry the contentEntry which has to have the action performed on
     * @param permission permission which is needed to apply the action
     */
    /**
     * General method for performing the given operation (copy|move)
     *
     * @private
     * @param {?} action the action to perform (copy|move)
     * @param {?} type type of the content (content|folder)
     * @param {?} contentEntry the contentEntry which has to have the action performed on
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    NodeActionsService.prototype.doFileOperation = /**
     * General method for performing the given operation (copy|move)
     *
     * @private
     * @param {?} action the action to perform (copy|move)
     * @param {?} type type of the content (content|folder)
     * @param {?} contentEntry the contentEntry which has to have the action performed on
     * @param {?=} permission permission which is needed to apply the action
     * @return {?}
     */
    function (action, type, contentEntry, permission) {
        var _this = this;
        /** @type {?} */
        var observable = new Subject();
        this.contentDialogService
            .openCopyMoveDialog(action, contentEntry, permission)
            .subscribe((/**
         * @param {?} selections
         * @return {?}
         */
        function (selections) {
            /** @type {?} */
            var selection = selections[0];
            _this.documentListService[action + "Node"].call(_this.documentListService, contentEntry.id, selection.id)
                .subscribe(observable.next.bind(observable, "OPERATION.SUCCESS." + type.toUpperCase() + "." + action.toUpperCase()), observable.error.bind(observable));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            observable.error(error);
            return observable;
        }));
        return observable;
    };
    NodeActionsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NodeActionsService.ctorParameters = function () { return [
        { type: ContentNodeDialogService },
        { type: MatDialog },
        { type: ContentService },
        { type: DocumentListService },
        { type: AlfrescoApiService },
        { type: MatDialog }
    ]; };
    NodeActionsService.propDecorators = {
        error: [{ type: Output }]
    };
    /** @nocollapse */ NodeActionsService.ngInjectableDef = i0.defineInjectable({ factory: function NodeActionsService_Factory() { return new NodeActionsService(i0.inject(i1.ContentNodeDialogService), i0.inject(i2.MatDialog), i0.inject(i3.ContentService), i0.inject(i4.DocumentListService), i0.inject(i3.AlfrescoApiService), i0.inject(i2.MatDialog)); }, token: NodeActionsService, providedIn: "root" });
    return NodeActionsService;
}());
export { NodeActionsService };
if (false) {
    /** @type {?} */
    NodeActionsService.prototype.error;
    /**
     * @type {?}
     * @private
     */
    NodeActionsService.prototype.contentDialogService;
    /** @type {?} */
    NodeActionsService.prototype.dialogRef;
    /** @type {?} */
    NodeActionsService.prototype.content;
    /**
     * @type {?}
     * @private
     */
    NodeActionsService.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    NodeActionsService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    NodeActionsService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,