/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectUtils } from '@alfresco/adf-core';
var ShareDataRow = /** @class */ (function () {
    function ShareDataRow(obj, contentService, permissionsStyle, thumbnailService) {
        this.obj = obj;
        this.contentService = contentService;
        this.permissionsStyle = permissionsStyle;
        this.thumbnailService = thumbnailService;
        this.cache = {};
        this.isSelected = false;
        this.cssClass = '';
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);
        if (permissionsStyle) {
            this.cssClass = this.getPermissionClass(obj);
        }
    }
    Object.defineProperty(ShareDataRow.prototype, "node", {
        get: /**
         * @return {?}
         */
        function () {
            return this.obj;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.obj = value;
            this.cache = {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nodeEntity
     * @return {?}
     */
    ShareDataRow.prototype.getPermissionClass = /**
     * @param {?} nodeEntity
     * @return {?}
     */
    function (nodeEntity) {
        var _this = this;
        /** @type {?} */
        var permissionsClasses = '';
        this.permissionsStyle.forEach((/**
         * @param {?} currentPermissionsStyle
         * @return {?}
         */
        function (currentPermissionsStyle) {
            if (_this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || _this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                if (_this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {
                    permissionsClasses += " " + currentPermissionsStyle.css;
                }
            }
        }));
        return permissionsClasses;
    };
    /**
     * @private
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    ShareDataRow.prototype.applyPermissionStyleToFile = /**
     * @private
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    function (node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFile && node.isFile);
    };
    /**
     * @private
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    ShareDataRow.prototype.applyPermissionStyleToFolder = /**
     * @private
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    function (node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFolder && node.isFolder);
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    ShareDataRow.prototype.isFolderAndHasPermissionToUpload = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    ShareDataRow.prototype.isFolder = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        return nodeEntry.entry && nodeEntry.entry.isFolder;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    ShareDataRow.prototype.cacheValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.cache[key] = value;
        return value;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ShareDataRow.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ObjectUtils.getValue(this.obj.entry, key);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShareDataRow.prototype.imageErrorResolver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.obj.entry.content) {
            return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ShareDataRow.prototype.hasValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.getValue(key) !== undefined;
    };
    ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
    return ShareDataRow;
}());
export { ShareDataRow };
if (false) {
    /** @type {?} */
    ShareDataRow.ERR_OBJECT_NOT_FOUND;
    /** @type {?} */
    ShareDataRow.prototype.cache;
    /** @type {?} */
    ShareDataRow.prototype.isSelected;
    /** @type {?} */
    ShareDataRow.prototype.isDropTarget;
    /** @type {?} */
    ShareDataRow.prototype.cssClass;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.obj;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.permissionsStyle;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.thumbnailService;
}
//# sourceMappingURL=data:application/json;base64,