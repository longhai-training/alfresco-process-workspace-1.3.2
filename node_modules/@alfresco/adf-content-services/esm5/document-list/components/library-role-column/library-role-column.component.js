/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Site } from '@alfresco/js-api';
var LibraryRoleColumnComponent = /** @class */ (function () {
    function LibraryRoleColumnComponent(api) {
        this.api = api;
        this.displayText$ = new BehaviorSubject('');
    }
    /**
     * @return {?}
     */
    LibraryRoleColumnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateValue();
        this.sub = this.api.nodeUpdated.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            /** @type {?} */
            var row = _this.context.row;
            if (row) {
                var entry = row.node.entry;
                if (entry === node) {
                    row.node = { entry: entry };
                    _this.updateValue();
                }
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    LibraryRoleColumnComponent.prototype.updateValue = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var node = this.context.row.node;
        if (node && node.entry) {
            /** @type {?} */
            var role = node.entry.role;
            switch (role) {
                case Site.RoleEnum.SiteManager:
                    this.displayText$.next('LIBRARY.ROLE.MANAGER');
                    break;
                case Site.RoleEnum.SiteCollaborator:
                    this.displayText$.next('LIBRARY.ROLE.COLLABORATOR');
                    break;
                case Site.RoleEnum.SiteContributor:
                    this.displayText$.next('LIBRARY.ROLE.CONTRIBUTOR');
                    break;
                case Site.RoleEnum.SiteConsumer:
                    this.displayText$.next('LIBRARY.ROLE.CONSUMER');
                    break;
                default:
                    this.displayText$.next('');
                    break;
            }
        }
    };
    /**
     * @return {?}
     */
    LibraryRoleColumnComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.sub) {
            this.sub.unsubscribe();
            this.sub = null;
        }
    };
    LibraryRoleColumnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-library-role-column',
                    template: "\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-library-role-column adf-datatable-content-cell' }
                }] }
    ];
    /** @nocollapse */
    LibraryRoleColumnComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    LibraryRoleColumnComponent.propDecorators = {
        context: [{ type: Input }]
    };
    return LibraryRoleColumnComponent;
}());
export { LibraryRoleColumnComponent };
if (false) {
    /** @type {?} */
    LibraryRoleColumnComponent.prototype.context;
    /** @type {?} */
    LibraryRoleColumnComponent.prototype.displayText$;
    /**
     * @type {?}
     * @private
     */
    LibraryRoleColumnComponent.prototype.sub;
    /**
     * @type {?}
     * @private
     */
    LibraryRoleColumnComponent.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1yb2xlLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkb2N1bWVudC1saXN0L2NvbXBvbmVudHMvbGlicmFyeS1yb2xlLWNvbHVtbi9saWJyYXJ5LXJvbGUtY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUVULEtBQUssRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBRXBCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBZ0IsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBbUIsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHekQ7SUFtQkksb0NBQW9CLEdBQXVCO1FBQXZCLFFBQUcsR0FBSCxHQUFHLENBQW9CO1FBSjNDLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQVMsRUFBRSxDQUFDLENBQUM7SUFJRCxDQUFDOzs7O0lBRS9DLDZDQUFROzs7SUFBUjtRQUFBLGlCQWNDO1FBYkcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBVTs7Z0JBQzNDLEdBQUcsR0FBaUIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHO1lBQzFDLElBQUksR0FBRyxFQUFFO2dCQUNHLElBQUEsc0JBQUs7Z0JBRWIsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO29CQUNoQixHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQztvQkFDckIsS0FBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN0QjthQUNKO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVTLGdEQUFXOzs7O0lBQXJCOztZQUNVLElBQUksR0FBYyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJO1FBQzdDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7O2dCQUNkLElBQUksR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7WUFDcEMsUUFBUSxJQUFJLEVBQUU7Z0JBQ1YsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7b0JBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7b0JBQy9DLE1BQU07Z0JBQ1YsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQjtvQkFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztvQkFDcEQsTUFBTTtnQkFDVixLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZTtvQkFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztvQkFDbkQsTUFBTTtnQkFDVixLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWTtvQkFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztvQkFDaEQsTUFBTTtnQkFDVjtvQkFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDM0IsTUFBTTthQUNiO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsZ0RBQVc7OztJQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNuQjtJQUNMLENBQUM7O2dCQWxFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFLHFMQUlUO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLG9EQUFvRCxFQUFFO2lCQUN4RTs7OztnQkFkUSxrQkFBa0I7OzswQkFnQnRCLEtBQUs7O0lBdURWLGlDQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0F4RFksMEJBQTBCOzs7SUFDbkMsNkNBQ2E7O0lBRWIsa0RBQStDOzs7OztJQUUvQyx5Q0FBMEI7Ozs7O0lBRWQseUNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LFxuICAgIElucHV0LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxuICAgIE9uRGVzdHJveVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgTm9kZSwgU2l0ZUVudHJ5LCBTaXRlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTaGFyZURhdGFSb3cgfSBmcm9tICcuLi8uLi9kYXRhL3NoYXJlLWRhdGEtcm93Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbGlicmFyeS1yb2xlLWNvbHVtbicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJhZGYtZGF0YXRhYmxlLWNlbGwtdmFsdWVcIiB0aXRsZT1cInt7IChkaXNwbGF5VGV4dCQgfCBhc3luYykgfCB0cmFuc2xhdGUgfX1cIj5cbiAgICAgICAgICAgIHt7IChkaXNwbGF5VGV4dCQgfCBhc3luYykgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgPC9zcGFuPlxuICAgIGAsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLWxpYnJhcnktcm9sZS1jb2x1bW4gYWRmLWRhdGF0YWJsZS1jb250ZW50LWNlbGwnIH1cbn0pXG5leHBvcnQgY2xhc3MgTGlicmFyeVJvbGVDb2x1bW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgQElucHV0KClcbiAgICBjb250ZXh0OiBhbnk7XG5cbiAgICBkaXNwbGF5VGV4dCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpO1xuXG4gICAgcHJpdmF0ZSBzdWI6IFN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuXG4gICAgICAgIHRoaXMuc3ViID0gdGhpcy5hcGkubm9kZVVwZGF0ZWQuc3Vic2NyaWJlKChub2RlOiBOb2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByb3c6IFNoYXJlRGF0YVJvdyA9IHRoaXMuY29udGV4dC5yb3c7XG4gICAgICAgICAgICBpZiAocm93KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlbnRyeSB9ID0gcm93Lm5vZGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkgPT09IG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93Lm5vZGUgPSB7IGVudHJ5IH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVWYWx1ZSgpIHtcbiAgICAgICAgY29uc3Qgbm9kZTogU2l0ZUVudHJ5ID0gdGhpcy5jb250ZXh0LnJvdy5ub2RlO1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmVudHJ5KSB7XG4gICAgICAgICAgICBjb25zdCByb2xlOiBzdHJpbmcgPSBub2RlLmVudHJ5LnJvbGU7XG4gICAgICAgICAgICBzd2l0Y2ggKHJvbGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuUm9sZUVudW0uU2l0ZU1hbmFnZXI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQoJ0xJQlJBUlkuUk9MRS5NQU5BR0VSJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU2l0ZS5Sb2xlRW51bS5TaXRlQ29sbGFib3JhdG9yOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlJPTEUuQ09MTEFCT1JBVE9SJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU2l0ZS5Sb2xlRW51bS5TaXRlQ29udHJpYnV0b3I6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQoJ0xJQlJBUlkuUk9MRS5DT05UUklCVVRPUicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuUm9sZUVudW0uU2l0ZUNvbnN1bWVyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlJPTEUuQ09OU1VNRVInKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCQubmV4dCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnN1Yikge1xuICAgICAgICAgICAgdGhpcy5zdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMuc3ViID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==