/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { BehaviorSubject } from 'rxjs';
import { Site } from '@alfresco/js-api';
var LibraryStatusColumnComponent = /** @class */ (function () {
    function LibraryStatusColumnComponent(api) {
        this.api = api;
        this.displayText$ = new BehaviorSubject('');
    }
    /**
     * @return {?}
     */
    LibraryStatusColumnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateValue();
        this.sub = this.api.nodeUpdated.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            /** @type {?} */
            var row = _this.context.row;
            if (row) {
                var entry = row.node.entry;
                if (entry === node) {
                    row.node = { entry: entry };
                    _this.updateValue();
                }
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    LibraryStatusColumnComponent.prototype.updateValue = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var node = this.context.row.node;
        if (node && node.entry) {
            /** @type {?} */
            var visibility = node.entry.visibility;
            switch (visibility) {
                case Site.VisibilityEnum.PUBLIC:
                    this.displayText$.next('LIBRARY.VISIBILITY.PUBLIC');
                    break;
                case Site.VisibilityEnum.PRIVATE:
                    this.displayText$.next('LIBRARY.VISIBILITY.PRIVATE');
                    break;
                case Site.VisibilityEnum.MODERATED:
                    this.displayText$.next('LIBRARY.VISIBILITY.MODERATED');
                    break;
                default:
                    this.displayText$.next('UNKNOWN');
                    break;
            }
        }
    };
    /**
     * @return {?}
     */
    LibraryStatusColumnComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.sub) {
            this.sub.unsubscribe();
            this.sub = null;
        }
    };
    LibraryStatusColumnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-library-status-column',
                    template: "\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    ",
                    host: { class: 'adf-library-status-column adf-datatable-content-cell' }
                }] }
    ];
    /** @nocollapse */
    LibraryStatusColumnComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    LibraryStatusColumnComponent.propDecorators = {
        context: [{ type: Input }]
    };
    return LibraryStatusColumnComponent;
}());
export { LibraryStatusColumnComponent };
if (false) {
    /** @type {?} */
    LibraryStatusColumnComponent.prototype.context;
    /** @type {?} */
    LibraryStatusColumnComponent.prototype.displayText$;
    /**
     * @type {?}
     * @private
     */
    LibraryStatusColumnComponent.prototype.sub;
    /**
     * @type {?}
     * @private
     */
    LibraryStatusColumnComponent.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1zdGF0dXMtY29sdW1uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImRvY3VtZW50LWxpc3QvY29tcG9uZW50cy9saWJyYXJ5LXN0YXR1cy1jb2x1bW4vbGlicmFyeS1zdGF0dXMtY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckQsT0FBTyxFQUFRLElBQUksRUFBYSxNQUFNLGtCQUFrQixDQUFDO0FBR3pEO0lBaUJJLHNDQUFvQixHQUF1QjtRQUF2QixRQUFHLEdBQUgsR0FBRyxDQUFvQjtRQUozQyxpQkFBWSxHQUFHLElBQUksZUFBZSxDQUFTLEVBQUUsQ0FBQyxDQUFDO0lBSUQsQ0FBQzs7OztJQUUvQywrQ0FBUTs7O0lBQVI7UUFBQSxpQkFjQztRQWJHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVuQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFDLElBQVU7O2dCQUMzQyxHQUFHLEdBQWlCLEtBQUksQ0FBQyxPQUFPLENBQUMsR0FBRztZQUMxQyxJQUFJLEdBQUcsRUFBRTtnQkFDRyxJQUFBLHNCQUFLO2dCQUViLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtvQkFDaEIsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7b0JBQ3JCLEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDdEI7YUFDSjtRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFUyxrREFBVzs7OztJQUFyQjs7WUFDVSxJQUFJLEdBQWMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTtRQUM3QyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFOztnQkFDZCxVQUFVLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBRWhELFFBQVEsVUFBVSxFQUFFO2dCQUNoQixLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTTtvQkFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztvQkFDcEQsTUFBTTtnQkFDVixLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTztvQkFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztvQkFDckQsTUFBTTtnQkFDVixLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUztvQkFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQztvQkFDdkQsTUFBTTtnQkFDVjtvQkFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDbEMsTUFBTTthQUNiO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsa0RBQVc7OztJQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNuQjtJQUNMLENBQUM7O2dCQTlESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsUUFBUSxFQUFFLHFMQUlUO29CQUNELElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxzREFBc0QsRUFBRTtpQkFDMUU7Ozs7Z0JBYlEsa0JBQWtCOzs7MEJBZXRCLEtBQUs7O0lBcURWLG1DQUFDO0NBQUEsQUEvREQsSUErREM7U0F0RFksNEJBQTRCOzs7SUFDckMsK0NBQ2E7O0lBRWIsb0RBQStDOzs7OztJQUUvQywyQ0FBMEI7Ozs7O0lBRWQsMkNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTm9kZSwgU2l0ZSwgU2l0ZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTaGFyZURhdGFSb3cgfSBmcm9tICcuLi8uLi9kYXRhL3NoYXJlLWRhdGEtcm93Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbGlicmFyeS1zdGF0dXMtY29sdW1uJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8c3BhbiBjbGFzcz1cImFkZi1kYXRhdGFibGUtY2VsbC12YWx1ZVwiIHRpdGxlPVwie3sgKGRpc3BsYXlUZXh0JCB8IGFzeW5jKSB8IHRyYW5zbGF0ZSB9fVwiPlxuICAgICAgICAgICAge3sgKGRpc3BsYXlUZXh0JCB8IGFzeW5jKSB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICA8L3NwYW4+XG4gICAgYCxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLWxpYnJhcnktc3RhdHVzLWNvbHVtbiBhZGYtZGF0YXRhYmxlLWNvbnRlbnQtY2VsbCcgfVxufSlcbmV4cG9ydCBjbGFzcyBMaWJyYXJ5U3RhdHVzQ29sdW1uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpXG4gICAgY29udGV4dDogYW55O1xuXG4gICAgZGlzcGxheVRleHQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KCcnKTtcblxuICAgIHByaXZhdGUgc3ViOiBTdWJzY3JpcHRpb247XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcblxuICAgICAgICB0aGlzLnN1YiA9IHRoaXMuYXBpLm5vZGVVcGRhdGVkLnN1YnNjcmliZSgobm9kZTogTm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm93OiBTaGFyZURhdGFSb3cgPSB0aGlzLmNvbnRleHQucm93O1xuICAgICAgICAgICAgaWYgKHJvdykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZW50cnkgfSA9IHJvdy5ub2RlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5ID09PSBub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5ub2RlID0geyBlbnRyeSB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdXBkYXRlVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IG5vZGU6IFNpdGVFbnRyeSA9IHRoaXMuY29udGV4dC5yb3cubm9kZTtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgY29uc3QgdmlzaWJpbGl0eTogc3RyaW5nID0gbm9kZS5lbnRyeS52aXNpYmlsaXR5O1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuVmlzaWJpbGl0eUVudW0uUFVCTElDOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlZJU0lCSUxJVFkuUFVCTElDJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgU2l0ZS5WaXNpYmlsaXR5RW51bS5QUklWQVRFOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlZJU0lCSUxJVFkuUFJJVkFURScpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNpdGUuVmlzaWJpbGl0eUVudW0uTU9ERVJBVEVEOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0JC5uZXh0KCdMSUJSQVJZLlZJU0lCSUxJVFkuTU9ERVJBVEVEJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQkLm5leHQoJ1VOS05PV04nKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3ViKSB7XG4gICAgICAgICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5zdWIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19