/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FlatTreeControl } from '@angular/cdk/tree';
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { TreeViewDataSource } from '../data/tree-view-datasource';
import { TreeViewService } from '../services/tree-view.service';
var TreeViewComponent = /** @class */ (function () {
    function TreeViewComponent(treeViewService) {
        this.treeViewService = treeViewService;
        /**
         * Emitted when a node in the tree view is clicked.
         */
        this.nodeClicked = new EventEmitter();
        /**
         * Emitted when an invalid node id is given.
         */
        this.error = new EventEmitter();
        this.getLevel = (/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.level; });
        this.isExpandable = (/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.expandable; });
        this.hasChild = (/**
         * @param {?} level
         * @param {?} nodeData
         * @return {?}
         */
        function (level, nodeData) { return nodeData.expandable; });
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    TreeViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['nodeId'] && changes['nodeId'].currentValue &&
            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {
            this.loadTreeNode();
        }
        else {
            this.dataSource.data = [];
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeViewComponent.prototype.onNodeClicked = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.nodeClicked.emit(node);
    };
    /**
     * @private
     * @return {?}
     */
    TreeViewComponent.prototype.loadTreeNode = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeViewService.getTreeNodes(this.nodeId)
            .subscribe((/**
         * @param {?} treeNode
         * @return {?}
         */
        function (treeNode) {
            _this.dataSource.data = treeNode;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.error.emit(error); }));
    };
    TreeViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tree-view-list',
                    template: "<mat-tree class=\"adf-tree-view-main\" [dataSource]=\"dataSource\"\n          [treeControl]=\"treeControl\" *ngIf=\"nodeId; else missingNodeId\">\n    <mat-tree-node class=\"adf-tree-view-node\"\n        *matTreeNodeDef=\"let treeNode\" id=\"{{treeNode.name + '-tree-node'}}\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        {{treeNode.name}}\n    </mat-tree-node>\n    <mat-tree-node class=\"adf-tree-view-node\"\n        id=\"{{treeNode.name + '-tree-child-node'}}\" *matTreeNodeDef=\"let treeNode; when: hasChild\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        <button id=\"{{'button-'+treeNode.name}}\" (click)=\"onNodeClicked(treeNode.node)\"\n                mat-icon-button [attr.aria-label]=\"'toggle ' + treeNode.filename\" matTreeNodeToggle>\n            <mat-icon class=\"adf-tree-view-icon\">\n                {{treeControl.isExpanded(treeNode) ? 'folder_open' : 'folder'}}\n            </mat-icon>\n        </button>\n        {{treeNode.name}}\n    </mat-tree-node>\n</mat-tree>\n<ng-template #missingNodeId>\n    <div id=\"adf-tree-view-missing-node\">\n        {{'ADF-TREE-VIEW.MISSING-ID' | translate}}\n    </div>\n</ng-template>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TreeViewComponent.ctorParameters = function () { return [
        { type: TreeViewService }
    ]; };
    TreeViewComponent.propDecorators = {
        nodeId: [{ type: Input }],
        nodeClicked: [{ type: Output }],
        error: [{ type: Output }]
    };
    return TreeViewComponent;
}());
export { TreeViewComponent };
if (false) {
    /**
     * Identifier of the node to display.
     * @type {?}
     */
    TreeViewComponent.prototype.nodeId;
    /**
     * Emitted when a node in the tree view is clicked.
     * @type {?}
     */
    TreeViewComponent.prototype.nodeClicked;
    /**
     * Emitted when an invalid node id is given.
     * @type {?}
     */
    TreeViewComponent.prototype.error;
    /** @type {?} */
    TreeViewComponent.prototype.treeControl;
    /** @type {?} */
    TreeViewComponent.prototype.dataSource;
    /** @type {?} */
    TreeViewComponent.prototype.getLevel;
    /** @type {?} */
    TreeViewComponent.prototype.isExpandable;
    /** @type {?} */
    TreeViewComponent.prototype.hasChild;
    /**
     * @type {?}
     * @private
     */
    TreeViewComponent.prototype.treeViewService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRyZWUtdmlldy9jb21wb25lbnRzL3RyZWUtdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUdoRTtJQXVCSSwyQkFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCOzs7O1FBVHBELGdCQUFXLEdBQTRCLElBQUksWUFBWSxFQUFFLENBQUM7Ozs7UUFJMUQsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBdUI5QyxhQUFROzs7O1FBQUcsVUFBQyxJQUFrQixJQUFLLE9BQUEsSUFBSSxDQUFDLEtBQUssRUFBVixDQUFVLEVBQUM7UUFFOUMsaUJBQVk7Ozs7UUFBRyxVQUFDLElBQWtCLElBQUssT0FBQSxJQUFJLENBQUMsVUFBVSxFQUFmLENBQWUsRUFBQztRQUV2RCxhQUFROzs7OztRQUFHLFVBQUMsS0FBYSxFQUFFLFFBQXNCLElBQUssT0FBQSxRQUFRLENBQUMsVUFBVSxFQUFuQixDQUFtQixFQUFDO1FBckJ0RSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksZUFBZSxDQUFlLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNyRixDQUFDOzs7OztJQUVELHVDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWTtZQUNuRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEVBQUU7WUFDcEUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3ZCO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7U0FDN0I7SUFDTCxDQUFDOzs7OztJQUVELHlDQUFhOzs7O0lBQWIsVUFBYyxJQUFlO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBUU8sd0NBQVk7Ozs7SUFBcEI7UUFBQSxpQkFRQztRQVBHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDekMsU0FBUzs7OztRQUNOLFVBQUMsUUFBd0I7WUFDckIsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ3BDLENBQUM7Ozs7UUFDRCxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF0QixDQUFzQixFQUNwQyxDQUFDO0lBQ1YsQ0FBQzs7Z0JBdkRKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QiwwckNBQXVDOztpQkFFMUM7Ozs7Z0JBUFEsZUFBZTs7O3lCQVluQixLQUFLOzhCQUlMLE1BQU07d0JBSU4sTUFBTTs7SUF1Q1gsd0JBQUM7Q0FBQSxBQXhERCxJQXdEQztTQWxEWSxpQkFBaUI7Ozs7OztJQUcxQixtQ0FDZTs7Ozs7SUFHZix3Q0FDMEQ7Ozs7O0lBRzFELGtDQUM4Qzs7SUFFOUMsd0NBQTJDOztJQUMzQyx1Q0FBK0I7O0lBb0IvQixxQ0FBOEM7O0lBRTlDLHlDQUF1RDs7SUFFdkQscUNBQTBFOzs7OztJQXRCOUQsNENBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmxhdFRyZWVDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RyZWUnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZUJhc2VOb2RlIH0gZnJvbSAnLi4vbW9kZWxzL3RyZWUtdmlldy5tb2RlbCc7XG5pbXBvcnQgeyBUcmVlVmlld0RhdGFTb3VyY2UgfSBmcm9tICcuLi9kYXRhL3RyZWUtdmlldy1kYXRhc291cmNlJztcbmltcG9ydCB7IFRyZWVWaWV3U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RyZWUtdmlldy5zZXJ2aWNlJztcbmltcG9ydCB7IE5vZGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi10cmVlLXZpZXctbGlzdCcsXG4gICAgdGVtcGxhdGVVcmw6ICd0cmVlLXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWyd0cmVlLXZpZXcuY29tcG9uZW50LnNjc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIFRyZWVWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBJZGVudGlmaWVyIG9mIHRoZSBub2RlIHRvIGRpc3BsYXkuICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSBub2RlIGluIHRoZSB0cmVlIHZpZXcgaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBub2RlQ2xpY2tlZDogRXZlbnRFbWl0dGVyPE5vZGVFbnRyeT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGludmFsaWQgbm9kZSBpZCBpcyBnaXZlbi4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICB0cmVlQ29udHJvbDogRmxhdFRyZWVDb250cm9sPFRyZWVCYXNlTm9kZT47XG4gICAgZGF0YVNvdXJjZTogVHJlZVZpZXdEYXRhU291cmNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmVlVmlld1NlcnZpY2U6IFRyZWVWaWV3U2VydmljZSkge1xuICAgICAgICB0aGlzLnRyZWVDb250cm9sID0gbmV3IEZsYXRUcmVlQ29udHJvbDxUcmVlQmFzZU5vZGU+KHRoaXMuZ2V0TGV2ZWwsIHRoaXMuaXNFeHBhbmRhYmxlKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlID0gbmV3IFRyZWVWaWV3RGF0YVNvdXJjZSh0aGlzLnRyZWVDb250cm9sLCB0aGlzLnRyZWVWaWV3U2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlc1snbm9kZUlkJ10gJiYgY2hhbmdlc1snbm9kZUlkJ10uY3VycmVudFZhbHVlICYmXG4gICAgICAgICAgICBjaGFuZ2VzWydub2RlSWQnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ25vZGVJZCddLnByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZFRyZWVOb2RlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Ob2RlQ2xpY2tlZChub2RlOiBOb2RlRW50cnkpIHtcbiAgICAgICAgdGhpcy5ub2RlQ2xpY2tlZC5lbWl0KG5vZGUpO1xuICAgIH1cblxuICAgIGdldExldmVsID0gKG5vZGU6IFRyZWVCYXNlTm9kZSkgPT4gbm9kZS5sZXZlbDtcblxuICAgIGlzRXhwYW5kYWJsZSA9IChub2RlOiBUcmVlQmFzZU5vZGUpID0+IG5vZGUuZXhwYW5kYWJsZTtcblxuICAgIGhhc0NoaWxkID0gKGxldmVsOiBudW1iZXIsIG5vZGVEYXRhOiBUcmVlQmFzZU5vZGUpID0+IG5vZGVEYXRhLmV4cGFuZGFibGU7XG5cbiAgICBwcml2YXRlIGxvYWRUcmVlTm9kZSgpIHtcbiAgICAgICAgdGhpcy50cmVlVmlld1NlcnZpY2UuZ2V0VHJlZU5vZGVzKHRoaXMubm9kZUlkKVxuICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAodHJlZU5vZGU6IFRyZWVCYXNlTm9kZVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhID0gdHJlZU5vZGU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHRoaXMuZXJyb3IuZW1pdChlcnJvcilcbiAgICAgICAgICAgICk7XG4gICAgfVxufVxuIl19