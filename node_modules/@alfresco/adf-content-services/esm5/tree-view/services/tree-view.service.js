/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { NodesApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { TreeBaseNode } from '../models/tree-view.model';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var TreeViewService = /** @class */ (function () {
    function TreeViewService(nodeApi) {
        this.nodeApi = nodeApi;
    }
    /**
     * @param {?} nodeId
     * @return {?}
     */
    TreeViewService.prototype.getTreeNodes = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        return this.nodeApi.getNodeChildren(nodeId)
            .pipe(map((/**
         * @param {?} nodePage
         * @return {?}
         */
        function (nodePage) {
            return nodePage.list.entries.filter((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.entry.isFolder ? node : null; }));
        })), map((/**
         * @param {?} nodes
         * @return {?}
         */
        function (nodes) { return nodes.map((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return new TreeBaseNode(node); })); })));
    };
    TreeViewService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TreeViewService.ctorParameters = function () { return [
        { type: NodesApiService }
    ]; };
    /** @nocollapse */ TreeViewService.ngInjectableDef = i0.defineInjectable({ factory: function TreeViewService_Factory() { return new TreeViewService(i0.inject(i1.NodesApiService)); }, token: TreeViewService, providedIn: "root" });
    return TreeViewService;
}());
export { TreeViewService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeViewService.prototype.nodeApi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJ0cmVlLXZpZXcvc2VydmljZXMvdHJlZS12aWV3LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXpELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRXJDO0lBS0kseUJBQW9CLE9BQXdCO1FBQXhCLFlBQU8sR0FBUCxPQUFPLENBQWlCO0lBQzVDLENBQUM7Ozs7O0lBRUQsc0NBQVk7Ozs7SUFBWixVQUFhLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQzthQUN0QyxJQUFJLENBQ0QsR0FBRzs7OztRQUFDLFVBQUMsUUFBb0I7WUFDckIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNOzs7O1lBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQWpDLENBQWlDLEVBQUMsQ0FBQztRQUNyRixDQUFDLEVBQUMsRUFDRixHQUFHOzs7O1FBQUMsVUFBQyxLQUFrQixJQUFLLE9BQUEsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxFQUF0QixDQUFzQixFQUFDLEVBQTNDLENBQTJDLEVBQUMsQ0FDM0UsQ0FBQztJQUNWLENBQUM7O2dCQWhCSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVRRLGVBQWU7OzswQkFqQnhCO0NBMENDLEFBbEJELElBa0JDO1NBZlksZUFBZTs7Ozs7O0lBRVosa0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTm9kZXNBcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyZWVCYXNlTm9kZSB9IGZyb20gJy4uL21vZGVscy90cmVlLXZpZXcubW9kZWwnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZywgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVHJlZVZpZXdTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm9kZUFwaTogTm9kZXNBcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgZ2V0VHJlZU5vZGVzKG5vZGVJZCk6IE9ic2VydmFibGU8VHJlZUJhc2VOb2RlW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZUFwaS5nZXROb2RlQ2hpbGRyZW4obm9kZUlkKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChub2RlUGFnZTogTm9kZVBhZ2luZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVBhZ2UubGlzdC5lbnRyaWVzLmZpbHRlcigobm9kZSkgPT4gbm9kZS5lbnRyeS5pc0ZvbGRlciA/IG5vZGUgOiBudWxsKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBtYXAoKG5vZGVzOiBOb2RlRW50cnlbXSkgPT4gbm9kZXMubWFwKChub2RlKSA9PiBuZXcgVHJlZUJhc2VOb2RlKG5vZGUpKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG59XG4iXX0=