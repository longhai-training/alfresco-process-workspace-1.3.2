/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { RatingService } from './services/rating.service';
var LikeComponent = /** @class */ (function () {
    function LikeComponent(ratingService) {
        this.ratingService = ratingService;
        /**
         * Emitted when the "vote" gets changed.
         */
        this.changeVote = new EventEmitter();
        this.likesCounter = 0;
        this.ratingType = 'likes';
        this.isLike = false;
    }
    /**
     * @return {?}
     */
    LikeComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.clean();
        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        function (ratingEntry) {
            if (ratingEntry.entry.aggregate) {
                _this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;
                if (ratingEntry.entry.ratedAt) {
                    _this.isLike = true;
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    LikeComponent.prototype.likeClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isLike) {
            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe((/**
             * @return {?}
             */
            function () {
                _this.likesCounter -= 1;
                _this.isLike = false;
                _this.changeVote.emit(_this.likesCounter);
            }));
        }
        else {
            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe((/**
             * @param {?} ratingEntry
             * @return {?}
             */
            function (ratingEntry) {
                _this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;
                _this.isLike = true;
                _this.changeVote.emit(_this.likesCounter);
            }));
        }
    };
    /**
     * @return {?}
     */
    LikeComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.isLike = false;
        this.likesCounter = 0;
    };
    LikeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-like',
                    template: "<div id=\"adf-like-container\" class=\"adf-like-container\">\n    <div class=\"adf-like\">\n        <span id=\"adf-like-{{nodeId}}\" [ngClass]=\"{'adf-like-select': isLike ,'adf-like-grey': !isLike  }\"\n              (click)=\"likeClick()\">\n            <mat-icon>thumb_up</mat-icon>\n        </span>\n    </div>\n    <div id=\"adf-like-counter\" class=\"adf-like-counter\">{{likesCounter}}</div>\n    <div class=\"adf-left\" *ngIf=\"likesCounter<=1\">Like</div>\n    <div class=\"adf-left\" *ngIf=\"likesCounter>1\">Likes</div>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-like-container{overflow:hidden;width:100%}.adf-like-container .adf-like{padding:5px;cursor:pointer;float:left;margin:5px 0 5px 5px}.adf-like-container .adf-like-select{cursor:pointer;color:#2196f3}.adf-like-container .adf-like-grey,.adf-like-container .adf-like-select:hover{cursor:pointer;color:grey}.adf-like-container .adf-like-grey:hover{cursor:pointer;color:#2196f3}.adf-like-container .adf-like-counter{float:left;padding:13px 0 0}.adf-like-container .adf-left{float:left;padding:13px 0 0 4px}"]
                }] }
    ];
    /** @nocollapse */
    LikeComponent.ctorParameters = function () { return [
        { type: RatingService }
    ]; };
    LikeComponent.propDecorators = {
        nodeId: [{ type: Input }],
        changeVote: [{ type: Output }]
    };
    return LikeComponent;
}());
export { LikeComponent };
if (false) {
    /**
     * Identifier of a node to apply likes to.
     * @type {?}
     */
    LikeComponent.prototype.nodeId;
    /**
     * Emitted when the "vote" gets changed.
     * @type {?}
     */
    LikeComponent.prototype.changeVote;
    /** @type {?} */
    LikeComponent.prototype.likesCounter;
    /** @type {?} */
    LikeComponent.prototype.ratingType;
    /** @type {?} */
    LikeComponent.prototype.isLike;
    /**
     * @type {?}
     * @private
     */
    LikeComponent.prototype.ratingService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlrZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJzb2NpYWwvbGlrZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHMUQ7SUFtQkksdUJBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlOzs7O1FBTmhELGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWhDLGlCQUFZLEdBQVcsQ0FBQyxDQUFDO1FBQ3pCLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFDN0IsV0FBTSxHQUFZLEtBQUssQ0FBQztJQUd4QixDQUFDOzs7O0lBRUQsbUNBQVc7OztJQUFYO1FBQUEsaUJBYUM7UUFaRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFYixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTOzs7O1FBQ2hFLFVBQUMsV0FBd0I7WUFDckIsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtnQkFDN0IsS0FBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7Z0JBQ2hFLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7b0JBQzNCLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2lCQUN0QjthQUNKO1FBQ0wsQ0FBQyxFQUNKLENBQUM7SUFDTixDQUFDOzs7O0lBRUQsaUNBQVM7OztJQUFUO1FBQUEsaUJBa0JDO1FBakJHLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVM7OztZQUNuRTtnQkFDSSxLQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQztnQkFDdkIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQ3BCLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QyxDQUFDLEVBQ0osQ0FBQztTQUNMO2FBQU07WUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUzs7OztZQUN2RSxVQUFDLFdBQXdCO2dCQUNyQixLQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztnQkFDaEUsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ25CLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QyxDQUFDLEVBQ0osQ0FBQztTQUNMO0lBQ0wsQ0FBQzs7OztJQUVELDZCQUFLOzs7SUFBTDtRQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7O2dCQTVESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFVBQVU7b0JBRXBCLHdpQkFBb0M7b0JBQ3BDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBUlEsYUFBYTs7O3lCQVdqQixLQUFLOzZCQUlMLE1BQU07O0lBaURYLG9CQUFDO0NBQUEsQUE3REQsSUE2REM7U0F2RFksYUFBYTs7Ozs7O0lBRXRCLCtCQUNlOzs7OztJQUdmLG1DQUNnQzs7SUFFaEMscUNBQXlCOztJQUN6QixtQ0FBNkI7O0lBQzdCLCtCQUF3Qjs7Ozs7SUFFWixzQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmF0aW5nU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcmF0aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmF0aW5nRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtbGlrZScsXG4gICAgc3R5bGVVcmxzOiBbJy4vbGlrZS5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9saWtlLmNvbXBvbmVudC5odG1sJyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIExpa2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIC8qKiBJZGVudGlmaWVyIG9mIGEgbm9kZSB0byBhcHBseSBsaWtlcyB0by4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJ2b3RlXCIgZ2V0cyBjaGFuZ2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZVZvdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBsaWtlc0NvdW50ZXI6IG51bWJlciA9IDA7XG4gICAgcmF0aW5nVHlwZTogc3RyaW5nID0gJ2xpa2VzJztcbiAgICBpc0xpa2U6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmF0aW5nU2VydmljZTogUmF0aW5nU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLmNsZWFuKCk7XG5cbiAgICAgICAgdGhpcy5yYXRpbmdTZXJ2aWNlLmdldFJhdGluZyh0aGlzLm5vZGVJZCwgdGhpcy5yYXRpbmdUeXBlKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAocmF0aW5nRW50cnk6IFJhdGluZ0VudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpa2VzQ291bnRlciA9IHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZS5udW1iZXJPZlJhdGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXRpbmdFbnRyeS5lbnRyeS5yYXRlZEF0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTGlrZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbGlrZUNsaWNrKCkge1xuICAgICAgICBpZiAodGhpcy5pc0xpa2UpIHtcbiAgICAgICAgICAgIHRoaXMucmF0aW5nU2VydmljZS5kZWxldGVSYXRpbmcodGhpcy5ub2RlSWQsIHRoaXMucmF0aW5nVHlwZSkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saWtlc0NvdW50ZXIgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xpa2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VWb3RlLmVtaXQodGhpcy5saWtlc0NvdW50ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJhdGluZ1NlcnZpY2UucG9zdFJhdGluZyh0aGlzLm5vZGVJZCwgdGhpcy5yYXRpbmdUeXBlLCB0cnVlKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJhdGluZ0VudHJ5OiBSYXRpbmdFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpa2VzQ291bnRlciA9IHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZS5udW1iZXJPZlJhdGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMaWtlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VWb3RlLmVtaXQodGhpcy5saWtlc0NvdW50ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhbigpIHtcbiAgICAgICAgdGhpcy5pc0xpa2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5saWtlc0NvdW50ZXIgPSAwO1xuICAgIH1cbn1cbiJdfQ==