/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { RatingService } from './services/rating.service';
var RatingComponent = /** @class */ (function () {
    function RatingComponent(ratingService) {
        this.ratingService = ratingService;
        this.average = 0;
        this.ratingType = 'fiveStar';
        /**
         * Emitted when the "vote" gets changed.
         */
        this.changeVote = new EventEmitter();
        this.stars = [];
    }
    /**
     * @return {?}
     */
    RatingComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);
        ratingObserver.subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        function (ratingEntry) {
            if (ratingEntry.entry.aggregate) {
                _this.average = ratingEntry.entry.aggregate.average;
                _this.calculateStars();
            }
        }));
        return ratingObserver;
    };
    /**
     * @return {?}
     */
    RatingComponent.prototype.calculateStars = /**
     * @return {?}
     */
    function () {
        this.stars = [];
        for (var i = 0; i < 5; i++) {
            if (i < this.average) {
                this.stars.push({ fill: true });
            }
            else {
                this.stars.push({ fill: false });
            }
        }
        this.changeVote.emit(this.average);
    };
    /**
     * @param {?} vote
     * @return {?}
     */
    RatingComponent.prototype.updateVote = /**
     * @param {?} vote
     * @return {?}
     */
    function (vote) {
        var _this = this;
        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        function (ratingEntry) {
            if (ratingEntry.entry.aggregate) {
                if (_this.average !== ratingEntry.entry.aggregate.average) {
                    _this.average = ratingEntry.entry.aggregate.average;
                    _this.calculateStars();
                }
            }
        }));
    };
    RatingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-rating',
                    template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                         (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                         (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n</mat-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-rating-container{overflow:hidden;width:100%}.adf-rating-container .adf-rating-star{float:left;transition:.3s;padding:1px;cursor:pointer;width:25px!important}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0 2px!important}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-grey-star{color:grey}.adf-rating-container .adf-stars-container{padding:0!important;margin:0!important;display:inline-block}.adf-rating-container .adf-rating-star:hover{-webkit-transform:rotate(13deg) scale(1.2);transform:rotate(13deg) scale(1.2)}"]
                }] }
    ];
    /** @nocollapse */
    RatingComponent.ctorParameters = function () { return [
        { type: RatingService }
    ]; };
    RatingComponent.propDecorators = {
        nodeId: [{ type: Input }],
        changeVote: [{ type: Output }]
    };
    return RatingComponent;
}());
export { RatingComponent };
if (false) {
    /**
     * Identifier of the node to apply the rating to.
     * @type {?}
     */
    RatingComponent.prototype.nodeId;
    /** @type {?} */
    RatingComponent.prototype.average;
    /** @type {?} */
    RatingComponent.prototype.ratingType;
    /**
     * Emitted when the "vote" gets changed.
     * @type {?}
     */
    RatingComponent.prototype.changeVote;
    /** @type {?} */
    RatingComponent.prototype.stars;
    /**
     * @type {?}
     * @private
     */
    RatingComponent.prototype.ratingService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNvY2lhbC9yYXRpbmcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRzFEO0lBc0JJLHlCQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVZoRCxZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLGVBQVUsR0FBVyxVQUFVLENBQUM7Ozs7UUFJaEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFaEMsVUFBSyxHQUFlLEVBQUUsQ0FBQztJQUd2QixDQUFDOzs7O0lBRUQscUNBQVc7OztJQUFYO1FBQUEsaUJBYUM7O1lBWlMsY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUVqRixjQUFjLENBQUMsU0FBUzs7OztRQUNwQixVQUFDLFdBQXdCO1lBQ3JCLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7Z0JBQzdCLEtBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO2dCQUNuRCxLQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDekI7UUFDTCxDQUFDLEVBQ0osQ0FBQztRQUVGLE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCx3Q0FBYzs7O0lBQWQ7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUVoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNwQztTQUNKO1FBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsb0NBQVU7Ozs7SUFBVixVQUFXLElBQVk7UUFBdkIsaUJBV0M7UUFWRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUzs7OztRQUN2RSxVQUFDLFdBQXdCO1lBQ3JCLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7Z0JBQzdCLElBQUksS0FBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7b0JBQ3RELEtBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO29CQUNuRCxLQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBQ3pCO2FBQ0o7UUFDTCxDQUFDLEVBQ0osQ0FBQztJQUNOLENBQUM7O2dCQWpFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFlBQVk7b0JBRXRCLDRyQkFBc0M7b0JBQ3RDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOztpQkFDeEM7Ozs7Z0JBUlEsYUFBYTs7O3lCQVlqQixLQUFLOzZCQVFMLE1BQU07O0lBaURYLHNCQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0E1RFksZUFBZTs7Ozs7O0lBR3hCLGlDQUNlOztJQUVmLGtDQUFvQjs7SUFFcEIscUNBQWdDOzs7OztJQUdoQyxxQ0FDZ0M7O0lBRWhDLGdDQUF1Qjs7Ozs7SUFFWCx3Q0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmF0aW5nU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcmF0aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmF0aW5nRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcmF0aW5nJyxcbiAgICBzdHlsZVVybHM6IFsnLi9yYXRpbmcuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcmF0aW5nLmNvbXBvbmVudC5odG1sJyxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFJhdGluZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogSWRlbnRpZmllciBvZiB0aGUgbm9kZSB0byBhcHBseSB0aGUgcmF0aW5nIHRvLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICBhdmVyYWdlOiBudW1iZXIgPSAwO1xuXG4gICAgcmF0aW5nVHlwZTogc3RyaW5nID0gJ2ZpdmVTdGFyJztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIFwidm90ZVwiIGdldHMgY2hhbmdlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBjaGFuZ2VWb3RlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgc3RhcnM6IEFycmF5PGFueT4gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmF0aW5nU2VydmljZTogUmF0aW5nU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICBjb25zdCByYXRpbmdPYnNlcnZlciA9IHRoaXMucmF0aW5nU2VydmljZS5nZXRSYXRpbmcodGhpcy5ub2RlSWQsIHRoaXMucmF0aW5nVHlwZSk7XG5cbiAgICAgICAgcmF0aW5nT2JzZXJ2ZXIuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKHJhdGluZ0VudHJ5OiBSYXRpbmdFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYXRpbmdFbnRyeS5lbnRyeS5hZ2dyZWdhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdmVyYWdlID0gcmF0aW5nRW50cnkuZW50cnkuYWdncmVnYXRlLmF2ZXJhZ2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlU3RhcnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHJhdGluZ09ic2VydmVyO1xuICAgIH1cblxuICAgIGNhbGN1bGF0ZVN0YXJzKCkge1xuICAgICAgICB0aGlzLnN0YXJzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIDwgdGhpcy5hdmVyYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFycy5wdXNoKHsgZmlsbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFycy5wdXNoKHsgZmlsbDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoYW5nZVZvdGUuZW1pdCh0aGlzLmF2ZXJhZ2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZVZvdGUodm90ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucmF0aW5nU2VydmljZS5wb3N0UmF0aW5nKHRoaXMubm9kZUlkLCB0aGlzLnJhdGluZ1R5cGUsIHZvdGUpLnN1YnNjcmliZShcbiAgICAgICAgICAgIChyYXRpbmdFbnRyeTogUmF0aW5nRW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmF0aW5nRW50cnkuZW50cnkuYWdncmVnYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF2ZXJhZ2UgIT09IHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZS5hdmVyYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF2ZXJhZ2UgPSByYXRpbmdFbnRyeS5lbnRyeS5hZ2dyZWdhdGUuYXZlcmFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlU3RhcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=