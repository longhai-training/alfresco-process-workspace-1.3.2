/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
/**
 * This component provide a list of all the tag inside the ECM
 */
var TagListComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param tagService
     */
    function TagListComponent(tagService) {
        var _this = this;
        this.tagService = tagService;
        /**
         * Emitted when a tag is selected.
         */
        this.result = new EventEmitter();
        /**
         * Array of tags that are displayed
         */
        this.tagsEntries = [];
        /**
         * Number of items per iteration
         */
        this.size = 10;
        this.isLoading = false;
        this.isSizeMinimum = true;
        this.defaultPagination = {
            skipCount: 0,
            maxItems: this.size,
            hasMoreItems: false
        };
        this.pagination = this.defaultPagination;
        this.tagService.refresh.subscribe((/**
         * @return {?}
         */
        function () {
            _this.tagsEntries = [];
            _this.refreshTag(_this.defaultPagination);
        }));
    }
    /**
     * @return {?}
     */
    TagListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return this.refreshTag(this.defaultPagination);
    };
    /**
     * @param {?=} opts
     * @return {?}
     */
    TagListComponent.prototype.refreshTag = /**
     * @param {?=} opts
     * @return {?}
     */
    function (opts) {
        var _this = this;
        this.tagService.getAllTheTags(opts).subscribe((/**
         * @param {?} tags
         * @return {?}
         */
        function (tags) {
            _this.tagsEntries = _this.tagsEntries.concat(tags.list.entries);
            _this.pagination = tags.list.pagination;
            _this.result.emit(_this.tagsEntries);
            _this.isLoading = false;
        }));
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadMoreTags = /**
     * @return {?}
     */
    function () {
        if (this.pagination.hasMoreItems) {
            this.isLoading = true;
            this.isSizeMinimum = false;
            this.refreshTag({
                skipCount: this.pagination.skipCount + this.pagination.count,
                maxItems: this.size
            });
        }
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadLessTags = /**
     * @return {?}
     */
    function () {
        this.isSizeMinimum = false;
        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
        this.pagination.hasMoreItems = true;
        if (this.tagsEntries.length <= this.size) {
            this.isSizeMinimum = true;
        }
    };
    TagListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-list',
                    template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip class=\"adf-primary-background-color\">\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-tag-chips-list,.adf-tag-chips-list div{display:flex;flex-direction:column}.adf-list-tag{display:block;font-size:16px}.adf-tag-list-controls{margin-top:30px;display:flex;justify-content:center}"]
                }] }
    ];
    /** @nocollapse */
    TagListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagListComponent.propDecorators = {
        result: [{ type: Output }]
    };
    return TagListComponent;
}());
export { TagListComponent };
if (false) {
    /**
     * Emitted when a tag is selected.
     * @type {?}
     */
    TagListComponent.prototype.result;
    /**
     * Array of tags that are displayed
     * @type {?}
     */
    TagListComponent.prototype.tagsEntries;
    /**
     * Number of items per iteration
     * @type {?}
     */
    TagListComponent.prototype.size;
    /** @type {?} */
    TagListComponent.prototype.defaultPagination;
    /** @type {?} */
    TagListComponent.prototype.pagination;
    /** @type {?} */
    TagListComponent.prototype.isLoading;
    /** @type {?} */
    TagListComponent.prototype.isSizeMinimum;
    /**
     * @type {?}
     * @private
     */
    TagListComponent.prototype.tagService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsidGFnL3RhZy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7O0FBTXBEO0lBNEJJOzs7T0FHRztJQUNILDBCQUFvQixVQUFzQjtRQUExQyxpQkFjQztRQWRtQixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBdEIxQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7OztRQUs1QixnQkFBVyxHQUFRLEVBQUUsQ0FBQzs7OztRQUt0QixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBS2xCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFRakIsSUFBSSxDQUFDLGlCQUFpQixHQUFHO1lBQ3JCLFNBQVMsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ25CLFlBQVksRUFBRSxLQUFLO1NBQ3RCLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUV6QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTOzs7UUFBQztZQUM5QixLQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztZQUN0QixLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELG1DQUFROzs7SUFBUjtRQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7OztJQUVELHFDQUFVOzs7O0lBQVYsVUFBVyxJQUFVO1FBQXJCLGlCQU9DO1FBTkcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBUztZQUNwRCxLQUFJLENBQUMsV0FBVyxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUQsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUN2QyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbkMsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDM0IsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsdUNBQVk7OztJQUFaO1FBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRTtZQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUUzQixJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNaLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUs7Z0JBQzVELFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTthQUN0QixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7SUFFRCx1Q0FBWTs7O0lBQVo7UUFDSSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlGLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzlFLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUVwQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDN0I7SUFDTCxDQUFDOztnQkFsRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QiwwNEJBQXdDO29CQUV4QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQVhRLFVBQVU7Ozt5QkFlZCxNQUFNOztJQTBFWCx1QkFBQztDQUFBLEFBbkZELElBbUZDO1NBN0VZLGdCQUFnQjs7Ozs7O0lBR3pCLGtDQUM0Qjs7Ozs7SUFLNUIsdUNBQXNCOzs7OztJQUt0QixnQ0FBa0I7O0lBRWxCLDZDQUFtQzs7SUFDbkMsc0NBQTRCOztJQUU1QixxQ0FBa0I7O0lBQ2xCLHlDQUFxQjs7Ozs7SUFNVCxzQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYWdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy90YWcuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHByb3ZpZGUgYSBsaXN0IG9mIGFsbCB0aGUgdGFnIGluc2lkZSB0aGUgRUNNXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXRhZy1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGFnLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3RhZy1saXN0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBUYWdMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSB0YWcgaXMgc2VsZWN0ZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgcmVzdWx0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgdGFncyB0aGF0IGFyZSBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICB0YWdzRW50cmllczogYW55ID0gW107XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgaXRlbXMgcGVyIGl0ZXJhdGlvblxuICAgICAqL1xuICAgIHNpemU6IG51bWJlciA9IDEwO1xuXG4gICAgZGVmYXVsdFBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbDtcbiAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWw7XG5cbiAgICBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgICBpc1NpemVNaW5pbXVtID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHRhZ1NlcnZpY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhZ1NlcnZpY2U6IFRhZ1NlcnZpY2UpIHtcblxuICAgICAgICB0aGlzLmRlZmF1bHRQYWdpbmF0aW9uID0ge1xuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuc2l6ZSxcbiAgICAgICAgICAgIGhhc01vcmVJdGVtczogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSB0aGlzLmRlZmF1bHRQYWdpbmF0aW9uO1xuXG4gICAgICAgIHRoaXMudGFnU2VydmljZS5yZWZyZXNoLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhZ3NFbnRyaWVzID0gW107XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUYWcodGhpcy5kZWZhdWx0UGFnaW5hdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVGFnKHRoaXMuZGVmYXVsdFBhZ2luYXRpb24pO1xuICAgIH1cblxuICAgIHJlZnJlc2hUYWcob3B0cz86IGFueSkge1xuICAgICAgICB0aGlzLnRhZ1NlcnZpY2UuZ2V0QWxsVGhlVGFncyhvcHRzKS5zdWJzY3JpYmUoKHRhZ3M6IGFueSkgPT4ge1xuICAgICAgICAgICAgdGhpcy50YWdzRW50cmllcyA9IHRoaXMudGFnc0VudHJpZXMuY29uY2F0KHRhZ3MubGlzdC5lbnRyaWVzKTtcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHRhZ3MubGlzdC5wYWdpbmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5yZXN1bHQuZW1pdCh0aGlzLnRhZ3NFbnRyaWVzKTtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvYWRNb3JlVGFncygpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbi5oYXNNb3JlSXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaXNTaXplTWluaW11bSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUYWcoe1xuICAgICAgICAgICAgICAgIHNraXBDb3VudDogdGhpcy5wYWdpbmF0aW9uLnNraXBDb3VudCArIHRoaXMucGFnaW5hdGlvbi5jb3VudCxcbiAgICAgICAgICAgICAgICBtYXhJdGVtczogdGhpcy5zaXplXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRMZXNzVGFncygpIHtcbiAgICAgICAgdGhpcy5pc1NpemVNaW5pbXVtID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGFnc0VudHJpZXMgPSB0aGlzLnRhZ3NFbnRyaWVzLnNsaWNlKDAsIHRoaXMudGFnc0VudHJpZXMubGVuZ3RoIC0gdGhpcy5wYWdpbmF0aW9uLmNvdW50KTtcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uLnNraXBDb3VudCA9IHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgLSB0aGlzLnBhZ2luYXRpb24uY291bnQ7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5oYXNNb3JlSXRlbXMgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLnRhZ3NFbnRyaWVzLmxlbmd0aCA8PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTaXplTWluaW11bSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=