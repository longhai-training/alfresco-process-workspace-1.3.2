/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';
import { NodePermissionService } from './node-permission.service';
import { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "./node-permission.service";
import * as i3 from "@alfresco/adf-core";
var NodePermissionDialogService = /** @class */ (function () {
    function NodePermissionDialogService(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    /**
     * Opens a dialog to add permissions to a node.
     * @param node ID of the target node
     * @param title Dialog title
     * @returns Node with updated permissions
     */
    /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    NodePermissionDialogService.prototype.openAddPermissionDialog = /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    function (node, title) {
        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            /** @type {?} */
            var confirm_1 = new Subject();
            confirm_1.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            var data = {
                nodeId: node.id,
                title: title,
                confirm: confirm_1
            };
            this.openDialog(data, 'adf-add-permission-dialog', '630px');
            return confirm_1;
        }
        else {
            /** @type {?} */
            var errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    };
    /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    NodePermissionDialogService.prototype.openDialog = /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /**
     * Closes the currently-open dialog.
     */
    /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    NodePermissionDialogService.prototype.close = /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * Opens a dialog to update permissions for a node.
     * @param nodeId ID of the target node
     * @param title Dialog title
     * @returns Node with updated permissions
     */
    /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    NodePermissionDialogService.prototype.updateNodePermissionByDialog = /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    function (nodeId, title) {
        var _this = this;
        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })
            .pipe(switchMap((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            return _this.openAddPermissionDialog(node.entry, title)
                .pipe(switchMap((/**
             * @param {?} selection
             * @return {?}
             */
            function (selection) {
                return _this.nodePermissionService.updateNodePermissions(nodeId, selection);
            })));
        })));
    };
    NodePermissionDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NodePermissionDialogService.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NodePermissionService },
        { type: ContentService }
    ]; };
    /** @nocollapse */ NodePermissionDialogService.ngInjectableDef = i0.defineInjectable({ factory: function NodePermissionDialogService_Factory() { return new NodePermissionDialogService(i0.inject(i1.MatDialog), i0.inject(i2.NodePermissionService), i0.inject(i3.ContentService)); }, token: NodePermissionDialogService, providedIn: "root" });
    return NodePermissionDialogService;
}());
export { NodePermissionDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NodePermissionDialogService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodePermissionDialogService.prototype.nodePermissionService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionDialogService.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,