/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';
import { NodePermissionService } from '../../services/node-permission.service';
import { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
var AddPermissionComponent = /** @class */ (function () {
    function AddPermissionComponent(nodePermissionService, nodeApiService, contentService) {
        var _this = this;
        this.nodePermissionService = nodePermissionService;
        this.nodeApiService = nodeApiService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs during the update.
         */
        this.error = new EventEmitter();
        this.selectedItems = [];
        this.nodeApiService.getNode(this.nodeId).subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return _this.currentNode = node; }));
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    AddPermissionComponent.prototype.onSelect = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        this.selectedItems = selection;
    };
    /**
     * @return {?}
     */
    AddPermissionComponent.prototype.isAddEnabled = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS) &&
            this.selectedItems.length !== 0;
    };
    /**
     * @return {?}
     */
    AddPermissionComponent.prototype.applySelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)
                .subscribe((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                _this.success.emit(node);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.error.emit(error);
            }));
        }
    };
    AddPermissionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-add-permission',
                    template: "<adf-add-permission-panel\n    (select)=\"onSelect($event)\">\n</adf-add-permission-panel>\n<div id=\"adf-add-permission-actions\">\n   <button mat-button\n          id=\"adf-add-permission-action-button\"\n          class=\"adf-permission-action\"\n          [disabled]=\"!isAddEnabled()\"\n          (click)=\"applySelection()\">\n     {{'PERMISSION_MANAGER.ADD-PERMISSION.ADD-ACTION' | translate}}\n    </button>\n</div>\n\n\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AddPermissionComponent.ctorParameters = function () { return [
        { type: NodePermissionService },
        { type: NodesApiService },
        { type: ContentService }
    ]; };
    AddPermissionComponent.propDecorators = {
        nodeId: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return AddPermissionComponent;
}());
export { AddPermissionComponent };
if (false) {
    /**
     * ID of the target node.
     * @type {?}
     */
    AddPermissionComponent.prototype.nodeId;
    /**
     * Emitted when the node is updated successfully.
     * @type {?}
     */
    AddPermissionComponent.prototype.success;
    /**
     * Emitted when an error occurs during the update.
     * @type {?}
     */
    AddPermissionComponent.prototype.error;
    /** @type {?} */
    AddPermissionComponent.prototype.selectedItems;
    /** @type {?} */
    AddPermissionComponent.prototype.currentNode;
    /** @type {?} */
    AddPermissionComponent.prototype.currentNodeRoles;
    /**
     * @type {?}
     * @private
     */
    AddPermissionComponent.prototype.nodePermissionService;
    /**
     * @type {?}
     * @private
     */
    AddPermissionComponent.prototype.nodeApiService;
    /**
     * @type {?}
     * @private
     */
    AddPermissionComponent.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXBlcm1pc3Npb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicGVybWlzc2lvbi1tYW5hZ2VyL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5RjtJQXdCSSxnQ0FBb0IscUJBQTRDLEVBQzVDLGNBQStCLEVBQy9CLGNBQThCO1FBRmxELGlCQUlDO1FBSm1CLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsbUJBQWMsR0FBZCxjQUFjLENBQWlCO1FBQy9CLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjs7OztRQVpsRCxZQUFPLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7Ozs7UUFJakQsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTlDLGtCQUFhLEdBQWdCLEVBQUUsQ0FBQztRQU81QixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEVBQXZCLENBQXVCLEVBQUMsQ0FBQztJQUMxRixDQUFDOzs7OztJQUVELHlDQUFROzs7O0lBQVIsVUFBUyxTQUFzQjtRQUMzQixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsNkNBQVk7OztJQUFaO1FBQ0ksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsdUJBQXVCLENBQUMsaUJBQWlCLENBQUM7WUFDdEcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7SUFFRCwrQ0FBYzs7O0lBQWQ7UUFBQSxpQkFXQztRQVZHLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLEVBQUU7WUFDekcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQztpQkFDNUUsU0FBUzs7OztZQUNOLFVBQUMsSUFBSTtnQkFDRCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QixDQUFDOzs7O1lBQ0QsVUFBQyxLQUFLO2dCQUNGLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUMsRUFBQyxDQUFDO1NBQ2Q7SUFDTCxDQUFDOztnQkFsREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLHliQUE4QztvQkFFOUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkFSUSxxQkFBcUI7Z0JBQ3JCLGVBQWU7Z0JBQUUsY0FBYzs7O3lCQVduQyxLQUFLOzBCQUlMLE1BQU07d0JBSU4sTUFBTTs7SUFtQ1gsNkJBQUM7Q0FBQSxBQXBERCxJQW9EQztTQTlDWSxzQkFBc0I7Ozs7OztJQUcvQix3Q0FDZTs7Ozs7SUFHZix5Q0FDaUQ7Ozs7O0lBR2pELHVDQUM4Qzs7SUFFOUMsK0NBQWdDOztJQUNoQyw2Q0FBa0I7O0lBQ2xCLGtEQUEyQjs7Ozs7SUFFZix1REFBb0Q7Ozs7O0lBQ3BELGdEQUF1Qzs7Ozs7SUFDdkMsZ0RBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlRW50cnksIE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE5vZGVQZXJtaXNzaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL25vZGUtcGVybWlzc2lvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vZGVzQXBpU2VydmljZSwgQ29udGVudFNlcnZpY2UsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtYWRkLXBlcm1pc3Npb24nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hZGQtcGVybWlzc2lvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYWRkLXBlcm1pc3Npb24uY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIEFkZFBlcm1pc3Npb25Db21wb25lbnQge1xuXG4gICAgLyoqIElEIG9mIHRoZSB0YXJnZXQgbm9kZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbm9kZSBpcyB1cGRhdGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8Tm9kZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgdGhlIHVwZGF0ZS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBzZWxlY3RlZEl0ZW1zOiBOb2RlRW50cnlbXSA9IFtdO1xuICAgIGN1cnJlbnROb2RlOiBOb2RlO1xuICAgIGN1cnJlbnROb2RlUm9sZXM6IHN0cmluZ1tdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlUGVybWlzc2lvblNlcnZpY2U6IE5vZGVQZXJtaXNzaW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5vZGVBcGlTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5ub2RlQXBpU2VydmljZS5nZXROb2RlKHRoaXMubm9kZUlkKS5zdWJzY3JpYmUoKG5vZGUpID0+IHRoaXMuY3VycmVudE5vZGUgPSBub2RlKTtcbiAgICB9XG5cbiAgICBvblNlbGVjdChzZWxlY3Rpb246IE5vZGVFbnRyeVtdKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcyA9IHNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICBpc0FkZEVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc0FsbG93YWJsZU9wZXJhdGlvbnModGhpcy5jdXJyZW50Tm9kZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zLmxlbmd0aCAhPT0gMDtcbiAgICB9XG5cbiAgICBhcHBseVNlbGVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudFNlcnZpY2UuaGFzQWxsb3dhYmxlT3BlcmF0aW9ucyh0aGlzLmN1cnJlbnROb2RlLCBBbGxvd2FibGVPcGVyYXRpb25zRW51bS5VUERBVEVQRVJNSVNTSU9OUykpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZVBlcm1pc3Npb25TZXJ2aWNlLnVwZGF0ZU5vZGVQZXJtaXNzaW9ucyh0aGlzLm5vZGVJZCwgdGhpcy5zZWxlY3RlZEl0ZW1zKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgICAgIChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19