/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
var InheritPermissionDirective = /** @class */ (function () {
    function InheritPermissionDirective(nodeService, contentService) {
        this.nodeService = nodeService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated.
         */
        this.updated = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    InheritPermissionDirective.prototype.onInheritPermissionClicked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.nodeService.getNode(this.nodeId).subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (_this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                /** @type {?} */
                var nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };
                _this.nodeService.updateNode(_this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((/**
                 * @param {?} nodeUpdated
                 * @return {?}
                 */
                function (nodeUpdated) {
                    _this.updated.emit(nodeUpdated);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.error.emit(error); }));
            }
            else {
                _this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        }));
    };
    InheritPermissionDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                    host: {
                        'role': 'button',
                        '(click)': 'onInheritPermissionClicked()'
                    }
                },] }
    ];
    /** @nocollapse */
    InheritPermissionDirective.ctorParameters = function () { return [
        { type: NodesApiService },
        { type: ContentService }
    ]; };
    InheritPermissionDirective.propDecorators = {
        nodeId: [{ type: Input }],
        updated: [{ type: Output }],
        error: [{ type: Output }]
    };
    return InheritPermissionDirective;
}());
export { InheritPermissionDirective };
if (false) {
    /**
     * ID of the node to add/remove inherited permissions.
     * @type {?}
     */
    InheritPermissionDirective.prototype.nodeId;
    /**
     * Emitted when the node is updated.
     * @type {?}
     */
    InheritPermissionDirective.prototype.updated;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    InheritPermissionDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    InheritPermissionDirective.prototype.nodeService;
    /**
     * @type {?}
     * @private
     */
    InheritPermissionDirective.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5oZXJpdGVkLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJwZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy9pbmhlcml0ZWQtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRzlGO0lBcUJJLG9DQUFvQixXQUE0QixFQUM1QixjQUE4QjtRQUQ5QixnQkFBVyxHQUFYLFdBQVcsQ0FBaUI7UUFDNUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCOzs7O1FBUGxELFlBQU8sR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7OztRQUl2RCxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFJbkQsQ0FBQzs7OztJQUVELCtEQUEwQjs7O0lBQTFCO1FBQUEsaUJBV0M7UUFWRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBVTtZQUN2RCxJQUFJLEtBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLEVBQUU7O29CQUN2RixRQUFRLEdBQUcsRUFBRSxXQUFXLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsRUFBRTtnQkFDbEcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUzs7OztnQkFBQyxVQUFDLFdBQWlCO29CQUN6RyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDbkMsQ0FBQzs7OztnQkFBRSxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUF0QixDQUFzQixFQUFDLENBQUM7YUFDekM7aUJBQU07Z0JBQ0gsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQzthQUMzRDtRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBcENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsMkVBQTJFO29CQUNyRixJQUFJLEVBQUU7d0JBQ0YsTUFBTSxFQUFFLFFBQVE7d0JBQ2hCLFNBQVMsRUFBRSw4QkFBOEI7cUJBQzVDO2lCQUNKOzs7O2dCQVRRLGVBQWU7Z0JBQUUsY0FBYzs7O3lCQWFuQyxLQUFLOzBCQUlMLE1BQU07d0JBSU4sTUFBTTs7SUFvQlgsaUNBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQS9CWSwwQkFBMEI7Ozs7OztJQUduQyw0Q0FDZTs7Ozs7SUFHZiw2Q0FDdUQ7Ozs7O0lBR3ZELDJDQUNtRDs7Ozs7SUFFdkMsaURBQW9DOzs7OztJQUNwQyxvREFBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZXNBcGlTZXJ2aWNlLCBDb250ZW50U2VydmljZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0gfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2J1dHRvblthZGYtaW5oZXJpdC1wZXJtaXNzaW9uXSwgbWF0LWJ1dHRvbi10b2dnbGVbYWRmLWluaGVyaXQtcGVybWlzc2lvbl0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ3JvbGUnOiAnYnV0dG9uJyxcbiAgICAgICAgJyhjbGljayknOiAnb25Jbmhlcml0UGVybWlzc2lvbkNsaWNrZWQoKSdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIEluaGVyaXRQZXJtaXNzaW9uRGlyZWN0aXZlIHtcblxuICAgIC8qKiBJRCBvZiB0aGUgbm9kZSB0byBhZGQvcmVtb3ZlIGluaGVyaXRlZCBwZXJtaXNzaW9ucy4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbm9kZSBpcyB1cGRhdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHVwZGF0ZWQ6IEV2ZW50RW1pdHRlcjxOb2RlPiA9IG5ldyBFdmVudEVtaXR0ZXI8Tm9kZT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlU2VydmljZTogTm9kZXNBcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgY29udGVudFNlcnZpY2U6IENvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgb25Jbmhlcml0UGVybWlzc2lvbkNsaWNrZWQoKSB7XG4gICAgICAgIHRoaXMubm9kZVNlcnZpY2UuZ2V0Tm9kZSh0aGlzLm5vZGVJZCkuc3Vic2NyaWJlKChub2RlOiBOb2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50U2VydmljZS5oYXNBbGxvd2FibGVPcGVyYXRpb25zKG5vZGUsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtLlVQREFURVBFUk1JU1NJT05TKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVCb2R5ID0geyBwZXJtaXNzaW9uczogeyBpc0luaGVyaXRhbmNlRW5hYmxlZDogIW5vZGUucGVybWlzc2lvbnMuaXNJbmhlcml0YW5jZUVuYWJsZWQgfSB9O1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZVNlcnZpY2UudXBkYXRlTm9kZSh0aGlzLm5vZGVJZCwgbm9kZUJvZHksIHsgaW5jbHVkZTogWydwZXJtaXNzaW9ucyddIH0pLnN1YnNjcmliZSgobm9kZVVwZGF0ZWQ6IE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVkLmVtaXQobm9kZVVwZGF0ZWQpO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4gdGhpcy5lcnJvci5lbWl0KGVycm9yKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdCgnUEVSTUlTU0lPTl9NQU5BR0VSLkVSUk9SLk5PVC1BTExPV0VEJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuIl19