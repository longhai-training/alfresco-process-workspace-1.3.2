/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var UploadFilesEvent = /** @class */ (function () {
    function UploadFilesEvent(files, uploadService, callback) {
        this.files = files;
        this.uploadService = uploadService;
        this.callback = callback;
        this.isDefaultPrevented = false;
    }
    Object.defineProperty(UploadFilesEvent.prototype, "defaultPrevented", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDefaultPrevented;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UploadFilesEvent.prototype.preventDefault = /**
     * @return {?}
     */
    function () {
        this.isDefaultPrevented = true;
    };
    /**
     * @return {?}
     */
    UploadFilesEvent.prototype.pauseUpload = /**
     * @return {?}
     */
    function () {
        this.preventDefault();
    };
    /**
     * @return {?}
     */
    UploadFilesEvent.prototype.resumeUpload = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.files && this.files.length > 0) {
            (_a = this.uploadService).addToQueue.apply(_a, tslib_1.__spread(this.files));
            this.uploadService.uploadFilesInTheQueue(this.callback);
        }
    };
    return UploadFilesEvent;
}());
export { UploadFilesEvent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadFilesEvent.prototype.isDefaultPrevented;
    /** @type {?} */
    UploadFilesEvent.prototype.files;
    /**
     * @type {?}
     * @private
     */
    UploadFilesEvent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    UploadFilesEvent.prototype.callback;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWZpbGVzLmV2ZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsidXBsb2FkL2NvbXBvbmVudHMvdXBsb2FkLWZpbGVzLmV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTtJQVdJLDBCQUNXLEtBQXVCLEVBQ3RCLGFBQTRCLEVBQzVCLFFBQTJCO1FBRjVCLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3RCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBYi9CLHVCQUFrQixHQUFZLEtBQUssQ0FBQztJQWN6QyxDQUFDO0lBWkosc0JBQUksOENBQWdCOzs7O1FBQXBCO1lBQ0ksT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7Ozs7SUFFRCx5Q0FBYzs7O0lBQWQ7UUFDSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFRRCxzQ0FBVzs7O0lBQVg7UUFDSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELHVDQUFZOzs7SUFBWjs7UUFDSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLENBQUEsS0FBQSxJQUFJLENBQUMsYUFBYSxDQUFBLENBQUMsVUFBVSw0QkFBSSxJQUFJLENBQUMsS0FBSyxHQUFFO1lBQzdDLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNEO0lBQ0wsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQTNCRCxJQTJCQzs7Ozs7OztJQTFCRyw4Q0FBNEM7O0lBV3hDLGlDQUE4Qjs7Ozs7SUFDOUIseUNBQW9DOzs7OztJQUNwQyxvQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaWxlTW9kZWwsIFVwbG9hZFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBVcGxvYWRGaWxlc0V2ZW50IHtcbiAgICBwcml2YXRlIGlzRGVmYXVsdFByZXZlbnRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZDtcbiAgICB9XG5cbiAgICBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICAgICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZmlsZXM6IEFycmF5PEZpbGVNb2RlbD4sXG4gICAgICAgIHByaXZhdGUgdXBsb2FkU2VydmljZTogVXBsb2FkU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBjYWxsYmFjazogRXZlbnRFbWl0dGVyPGFueT5cbiAgICApIHt9XG5cbiAgICBwYXVzZVVwbG9hZCgpIHtcbiAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHJlc3VtZVVwbG9hZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsZXMgJiYgdGhpcy5maWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZFNlcnZpY2UuYWRkVG9RdWV1ZSguLi50aGlzLmZpbGVzKTtcbiAgICAgICAgICAgIHRoaXMudXBsb2FkU2VydmljZS51cGxvYWRGaWxlc0luVGhlUXVldWUodGhpcy5jYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=