/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileUploadStatus, UploadService } from '@alfresco/adf-core';
import { ChangeDetectorRef, Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { merge } from 'rxjs';
import { FileUploadingListComponent } from './file-uploading-list.component';
var FileUploadingDialogComponent = /** @class */ (function () {
    function FileUploadingDialogComponent(uploadService, changeDetector) {
        this.uploadService = uploadService;
        this.changeDetector = changeDetector;
        /**
         * Dialog position. Can be 'left' or 'right'.
         */
        this.position = 'right';
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.isDialogMinimized = false;
        this.isConfirmation = false;
    }
    /**
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.listSubscription = this.uploadService
            .queueChanged.subscribe((/**
         * @param {?} fileList
         * @return {?}
         */
        function (fileList) {
            _this.filesUploadingList = fileList;
            if (_this.filesUploadingList.length) {
                _this.isDialogActive = true;
            }
        }));
        this.counterSubscription = merge(this.uploadService.fileUploadComplete, this.uploadService.fileUploadDeleted)
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.totalCompleted = event.totalComplete;
            _this.changeDetector.detectChanges();
        }));
        this.errorSubscription = this.uploadService.fileUploadError
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.totalErrors = event.totalError;
            _this.changeDetector.detectChanges();
        }));
        this.fileUploadSubscription = this.uploadService
            .fileUpload.subscribe((/**
         * @return {?}
         */
        function () {
            _this.changeDetector.detectChanges();
        }));
        this.uploadService.fileDeleted.subscribe((/**
         * @param {?} objId
         * @return {?}
         */
        function (objId) {
            if (_this.filesUploadingList) {
                /** @type {?} */
                var file = _this.filesUploadingList.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return item.data.entry.id === objId;
                }));
                if (file) {
                    file.status = FileUploadStatus.Cancelled;
                    _this.changeDetector.detectChanges();
                }
            }
        }));
    };
    /**
     * Toggle confirmation message.
     */
    /**
     * Toggle confirmation message.
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.toggleConfirmation = /**
     * Toggle confirmation message.
     * @return {?}
     */
    function () {
        this.isConfirmation = !this.isConfirmation;
        if (this.isDialogMinimized) {
            this.isDialogMinimized = false;
        }
    };
    /**
     * Cancel uploads and hide confirmation
     */
    /**
     * Cancel uploads and hide confirmation
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.cancelAllUploads = /**
     * Cancel uploads and hide confirmation
     * @return {?}
     */
    function () {
        this.toggleConfirmation();
        this.uploadList.cancelAllFiles();
    };
    /**
     * Toggle dialog minimized state.
     */
    /**
     * Toggle dialog minimized state.
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.toggleMinimized = /**
     * Toggle dialog minimized state.
     * @return {?}
     */
    function () {
        this.isDialogMinimized = !this.isDialogMinimized;
        this.changeDetector.detectChanges();
    };
    /**
     * Dismiss dialog
     */
    /**
     * Dismiss dialog
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.close = /**
     * Dismiss dialog
     * @return {?}
     */
    function () {
        this.isConfirmation = false;
        this.totalCompleted = 0;
        this.totalErrors = 0;
        this.filesUploadingList = [];
        this.isDialogActive = false;
        this.isDialogMinimized = false;
        this.uploadService.clearQueue();
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    FileUploadingDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uploadService.clearQueue();
        this.listSubscription.unsubscribe();
        this.counterSubscription.unsubscribe();
        this.fileUploadSubscription.unsubscribe();
        this.errorSubscription.unsubscribe();
    };
    FileUploadingDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-file-uploading-dialog',
                    template: "<div *ngIf=\"isDialogActive\"\n     class=\"adf-upload-dialog\"\n     id=\"upload-dialog\"\n     [class.adf-upload-dialog--minimized]=\"isDialogMinimized\"\n     [class.adf-upload-dialog--position-left]=\"position === 'left'\"\n     [class.adf-upload-dialog--position-right]=\"position === 'right'\">\n    <header class=\"adf-upload-dialog__header\">\n        <button\n            mat-button\n            color=\"secondary\"\n            [disabled]=\"isConfirmation\"\n            (click)=\"toggleMinimized()\">\n            <mat-icon\n                mat-list-icon\n                title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                    {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n            </mat-icon>\n        </button>\n\n        <span\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"!uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                | translate: {\n                    completed: totalCompleted,\n                    total: filesUploadingList.length\n                }\n            }}\n        </span>\n\n        <span\n            class=\"adf-upload-dialog__title\"\n            *ngIf=\"uploadList.isUploadCancelled()\">\n            {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n        </span>\n    </header>\n\n    <section class=\"adf-upload-dialog__info\"\n        *ngIf=\"totalErrors\">\n        {{\n            (totalErrors > 1\n                 ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                 : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                 | translate: { total: totalErrors }\n        }}\n    </section>\n\n    <section class=\"adf-upload-dialog__content\"\n        [class.adf-upload-dialog--padding]=\"isConfirmation\">\n        <adf-file-uploading-list\n            [class.adf-upload-dialog--hide]=\"isConfirmation\"\n            #uploadList\n            [files]=\"filesUploadingList\">\n                <ng-template let-file=\"$implicit\">\n                     <adf-file-uploading-list-row\n                        [file]=\"file\"\n                        (remove)=\"uploadList.removeFile(file)\"\n                        (cancel)=\"uploadList.cancelFile(file)\">\n                    </adf-file-uploading-list-row>\n                </ng-template>\n        </adf-file-uploading-list>\n\n        <div\n            class=\"adf-upload-dialog__confirmation\"\n            [class.adf-upload-dialog--hide]=\"!isConfirmation\">\n                <p class=\"adf-upload-dialog__confirmation--title\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                </p>\n\n                <p class=\"adf-upload-dialog__confirmation--text\">\n                    {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                </p>\n        </div>\n    </section>\n\n    <footer class=\"adf-upload-dialog__actions\"\n            *ngIf=\"!isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel-all\"\n            color=\"primary\"\n            mat-button\n            *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}\n        </button>\n\n        <button\n            id=\"adf-upload-dialog-close\"\n            *ngIf=\"uploadList.isUploadCompleted() || uploadList.isUploadCancelled()\"\n            mat-button\n            color=\"primary\"\n            (click)=\"close()\">\n            {{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}\n        </button>\n    </footer>\n\n    <footer class=\"adf-upload-dialog__actions\"\n            *ngIf=\"isConfirmation\">\n        <button\n            id=\"adf-upload-dialog-cancel\"\n            color=\"secondary\"\n            mat-button\n            (click)=\"cancelAllUploads()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}\n        </button>\n\n        <button\n            id=\"adf-upload-dialog-confirm\"\n            mat-button\n            color=\"primary\"\n            (click)=\"toggleConfirmation()\">\n            {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}\n        </button>\n    </footer>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FileUploadingDialogComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: ChangeDetectorRef }
    ]; };
    FileUploadingDialogComponent.propDecorators = {
        uploadList: [{ type: ViewChild, args: ['uploadList',] }],
        position: [{ type: Input }],
        error: [{ type: Output }]
    };
    return FileUploadingDialogComponent;
}());
export { FileUploadingDialogComponent };
if (false) {
    /** @type {?} */
    FileUploadingDialogComponent.prototype.uploadList;
    /**
     * Dialog position. Can be 'left' or 'right'.
     * @type {?}
     */
    FileUploadingDialogComponent.prototype.position;
    /**
     * Emitted when a file in the list has an error.
     * @type {?}
     */
    FileUploadingDialogComponent.prototype.error;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.filesUploadingList;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.isDialogActive;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.totalCompleted;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.totalErrors;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.isDialogMinimized;
    /** @type {?} */
    FileUploadingDialogComponent.prototype.isConfirmation;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.listSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.counterSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.fileUploadSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.errorSubscription;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadingDialogComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,