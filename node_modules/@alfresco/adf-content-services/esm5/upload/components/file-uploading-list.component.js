/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';
import { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
var FileUploadingListComponent = /** @class */ (function () {
    function FileUploadingListComponent(uploadService, nodesApi, translateService) {
        this.uploadService = uploadService;
        this.nodesApi = nodesApi;
        this.translateService = translateService;
        this.FileUploadStatus = FileUploadStatus;
        this.files = [];
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
    }
    /**
     * Cancel file upload
     *
     * @param file File model to cancel upload for.
     *
     * @memberOf FileUploadingListComponent
     */
    /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelFile = /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    function (file) {
        this.uploadService.cancelUpload(file);
    };
    /**
     * Remove uploaded file
     *
     * @param file File model to remove upload for.
     *
     * @memberOf FileUploadingListComponent
     */
    /**
     * Remove uploaded file
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to remove upload for.
     *
     * @return {?}
     */
    FileUploadingListComponent.prototype.removeFile = /**
     * Remove uploaded file
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to remove upload for.
     *
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.deleteNode(file).subscribe((/**
         * @return {?}
         */
        function () {
            if (file.status === FileUploadStatus.Error) {
                _this.notifyError(file);
            }
            _this.cancelNodeVersionInstances(file);
            _this.uploadService.cancelUpload(file);
        }));
    };
    /**
     * Call the appropriate method for each file, depending on state
     */
    /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelAllFiles = /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    function () {
        var _this = this;
        this.getUploadingFiles().forEach((/**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            return _this.uploadService.cancelUpload(file);
        }));
        /** @type {?} */
        var deletedFiles = this.files
            .filter((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.status === FileUploadStatus.Complete; }))
            .map((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return _this.deleteNode(file); }));
        forkJoin.apply(void 0, tslib_1.__spread(deletedFiles)).subscribe((/**
         * @param {?} files
         * @return {?}
         */
        function (files) {
            var _a;
            /** @type {?} */
            var errors = files.filter((/**
             * @param {?} file
             * @return {?}
             */
            function (file) { return file.status === FileUploadStatus.Error; }));
            if (errors.length) {
                _this.notifyError.apply(_this, tslib_1.__spread(errors));
            }
            (_a = _this.uploadService).cancelUpload.apply(_a, tslib_1.__spread(files));
        }));
    };
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     */
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    FileUploadingListComponent.prototype.isUploadCompleted = /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    function () {
        return (!this.isUploadCancelled() &&
            Boolean(this.files.length) &&
            !this.files.some((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var status = _a.status;
                return status === FileUploadStatus.Starting ||
                    status === FileUploadStatus.Progress ||
                    status === FileUploadStatus.Pending;
            })));
    };
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     */
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    FileUploadingListComponent.prototype.isUploadCancelled = /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    function () {
        return (!!this.files.length &&
            this.files.every((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var status = _a.status;
                return status === FileUploadStatus.Aborted ||
                    status === FileUploadStatus.Cancelled ||
                    status === FileUploadStatus.Deleted;
            })));
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    FileUploadingListComponent.prototype.deleteNode = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var id = file.data.entry.id;
        return this.nodesApi.deleteNode(id, { permanent: true }).pipe(map((/**
         * @return {?}
         */
        function () {
            file.status = FileUploadStatus.Deleted;
            return file;
        })), catchError((/**
         * @return {?}
         */
        function () {
            file.status = FileUploadStatus.Error;
            return of(file);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    FileUploadingListComponent.prototype.cancelNodeVersionInstances = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.files
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.data.entry.id === file.data.entry.id &&
                item.options.newVersion;
        }))
            .map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.status = FileUploadStatus.Deleted;
        }));
    };
    /**
     * @private
     * @param {...?} files
     * @return {?}
     */
    FileUploadingListComponent.prototype.notifyError = /**
     * @private
     * @param {...?} files
     * @return {?}
     */
    function () {
        var files = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            files[_i] = arguments[_i];
        }
        /** @type {?} */
        var messageError = null;
        if (files.length === 1) {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
        }
        else {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
        }
        this.error.emit(messageError);
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadingListComponent.prototype.getUploadingFiles = /**
     * @private
     * @return {?}
     */
    function () {
        return this.files.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.status === FileUploadStatus.Pending ||
                item.status === FileUploadStatus.Progress ||
                item.status === FileUploadStatus.Starting) {
                return item;
            }
        }));
    };
    FileUploadingListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-file-uploading-list',
                    template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                    styles: [":host{display:flex;flex-direction:column}"]
                }] }
    ];
    /** @nocollapse */
    FileUploadingListComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: NodesApiService },
        { type: TranslationService }
    ]; };
    FileUploadingListComponent.propDecorators = {
        template: [{ type: ContentChild, args: [TemplateRef,] }],
        files: [{ type: Input }],
        error: [{ type: Output }]
    };
    return FileUploadingListComponent;
}());
export { FileUploadingListComponent };
if (false) {
    /** @type {?} */
    FileUploadingListComponent.prototype.FileUploadStatus;
    /** @type {?} */
    FileUploadingListComponent.prototype.template;
    /** @type {?} */
    FileUploadingListComponent.prototype.files;
    /**
     * Emitted when a file in the list has an error.
     * @type {?}
     */
    FileUploadingListComponent.prototype.error;
    /**
     * @type {?}
     * @private
     */
    FileUploadingListComponent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadingListComponent.prototype.nodesApi;
    /**
     * @type {?}
     * @private
     */
    FileUploadingListComponent.prototype.translateService;
}
//# sourceMappingURL=data:application/json;base64,