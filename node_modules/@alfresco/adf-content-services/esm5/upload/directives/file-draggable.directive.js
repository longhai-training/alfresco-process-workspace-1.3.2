/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { FileUtils } from '@alfresco/adf-core';
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var FileDraggableDirective = /** @class */ (function () {
    function FileDraggableDirective(el, ngZone) {
        this.ngZone = ngZone;
        /**
         * Enables/disables drag-and-drop functionality.
         */
        this.enabled = true;
        /**
         * Emitted when one or more files are dragged and dropped onto the draggable element.
         */
        this.filesDropped = new EventEmitter();
        /**
         * Emitted when a directory is dragged and dropped onto the draggable element.
         */
        this.folderEntityDropped = new EventEmitter();
        this.cssClassName = 'adf-file-draggable__input-focus';
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    FileDraggableDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.element.addEventListener('dragenter', _this.onDragEnter.bind(_this));
            _this.element.addEventListener('dragover', _this.onDragOver.bind(_this));
            _this.element.addEventListener('dragleave', _this.onDragLeave.bind(_this));
            _this.element.addEventListener('drop', _this.onDropFiles.bind(_this));
        }));
    };
    /**
     * @return {?}
     */
    FileDraggableDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.element.removeEventListener('dragenter', this.onDragEnter);
        this.element.removeEventListener('dragover', this.onDragOver);
        this.element.removeEventListener('dragleave', this.onDragLeave);
        this.element.removeEventListener('drop', this.onDropFiles);
    };
    /**
     * Method called when files is dropped in the drag and drop area.
     * @param event DOM event.
     */
    /**
     * Method called when files is dropped in the drag and drop area.
     * @param {?} event DOM event.
     * @return {?}
     */
    FileDraggableDirective.prototype.onDropFiles = /**
     * Method called when files is dropped in the drag and drop area.
     * @param {?} event DOM event.
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            // Chrome, Edge, Firefox, Opera (Files + Folders)
            /** @type {?} */
            var items = event.dataTransfer.items;
            if (items) {
                /** @type {?} */
                var files = [];
                for (var i = 0; i < items.length; i++) {
                    if (items[i].webkitGetAsEntry) {
                        /** @type {?} */
                        var item = items[i].webkitGetAsEntry();
                        if (item) {
                            if (item.isFile) {
                                /** @type {?} */
                                var file = items[i].getAsFile();
                                if (file) {
                                    files.push(file);
                                }
                            }
                            else if (item.isDirectory) {
                                this.folderEntityDropped.emit(item);
                            }
                        }
                    }
                }
                if (files.length > 0) {
                    this.filesDropped.emit(files);
                }
            }
            else {
                // IE, Safari, Chrome, Edge, Firefox, Opera (Files only)
                /** @type {?} */
                var files = FileUtils.toFileArray(event.dataTransfer.files);
                this.filesDropped.emit(files);
            }
            this.element.classList.remove(this.cssClassName);
        }
    };
    /**
     * Change the style of the drag area when a file drag in.
     *
     * @param event - DOM event.
     */
    /**
     * Change the style of the drag area when a file drag in.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    FileDraggableDirective.prototype.onDragEnter = /**
     * Change the style of the drag area when a file drag in.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.add(this.cssClassName);
        }
    };
    /**
     * Change the style of the drag area when a file drag out.
     *
     * @param event - DOM event.
     */
    /**
     * Change the style of the drag area when a file drag out.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    FileDraggableDirective.prototype.onDragLeave = /**
     * Change the style of the drag area when a file drag out.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.remove(this.cssClassName);
        }
    };
    /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param event
     */
    /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param {?} event
     * @return {?}
     */
    FileDraggableDirective.prototype.onDragOver = /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.add(this.cssClassName);
        }
    };
    /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param $event - DOM event.
     */
    /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param {?} event
     * @return {?}
     */
    FileDraggableDirective.prototype.preventDefault = /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    FileDraggableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-file-draggable]'
                },] }
    ];
    /** @nocollapse */
    FileDraggableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    FileDraggableDirective.propDecorators = {
        enabled: [{ type: Input, args: ['adf-file-draggable',] }],
        filesDropped: [{ type: Output }],
        folderEntityDropped: [{ type: Output }]
    };
    return FileDraggableDirective;
}());
export { FileDraggableDirective };
if (false) {
    /** @type {?} */
    FileDraggableDirective.prototype.files;
    /**
     * Enables/disables drag-and-drop functionality.
     * @type {?}
     */
    FileDraggableDirective.prototype.enabled;
    /**
     * Emitted when one or more files are dragged and dropped onto the draggable element.
     * @type {?}
     */
    FileDraggableDirective.prototype.filesDropped;
    /**
     * Emitted when a directory is dragged and dropped onto the draggable element.
     * @type {?}
     */
    FileDraggableDirective.prototype.folderEntityDropped;
    /**
     * @type {?}
     * @private
     */
    FileDraggableDirective.prototype.cssClassName;
    /**
     * @type {?}
     * @private
     */
    FileDraggableDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FileDraggableDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,