/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Node } from '@alfresco/js-api';
import { FolderDialogComponent } from '../dialogs/folder.dialog';
import { ContentService } from '@alfresco/adf-core';
var FolderEditDirective = /** @class */ (function () {
    function FolderEditDirective(dialogRef, elementRef, content) {
        this.dialogRef = dialogRef;
        this.elementRef = elementRef;
        this.content = content;
        /**
         * Emitted when an error occurs (eg, a folder with same name already exists).
         */
        this.error = new EventEmitter();
        /**
         * Title of folder edit dialog.
         */
        this.title = null;
        /**
         * Emitted when the folder has been edited successfully.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FolderEditDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.folder) {
            this.openDialog();
        }
    };
    Object.defineProperty(FolderEditDirective.prototype, "dialogConfig", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var width = FolderEditDirective.DIALOG_WIDTH;
            var folder = this.folder;
            return {
                data: {
                    folder: folder,
                    editTitle: this.title
                },
                width: width + "px"
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    FolderEditDirective.prototype.openDialog = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this, dialogRef = _a.dialogRef, dialogConfig = _a.dialogConfig, content = _a.content;
        /** @type {?} */
        var dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.error.emit(error);
        }));
        dialogInstance.componentInstance.success.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            _this.success.emit(node);
        }));
        dialogInstance.afterClosed().subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (node) {
                content.folderEdit.next(node);
            }
        }));
    };
    FolderEditDirective.DIALOG_WIDTH = 400;
    FolderEditDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-edit-folder]'
                },] }
    ];
    /** @nocollapse */
    FolderEditDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: ElementRef },
        { type: ContentService }
    ]; };
    FolderEditDirective.propDecorators = {
        folder: [{ type: Input, args: ['adf-edit-folder',] }],
        error: [{ type: Output }],
        title: [{ type: Input }],
        success: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return FolderEditDirective;
}());
export { FolderEditDirective };
if (false) {
    /** @type {?} */
    FolderEditDirective.DIALOG_WIDTH;
    /**
     * Folder node to edit.
     * @type {?}
     */
    FolderEditDirective.prototype.folder;
    /**
     * Emitted when an error occurs (eg, a folder with same name already exists).
     * @type {?}
     */
    FolderEditDirective.prototype.error;
    /**
     * Title of folder edit dialog.
     * @type {?}
     */
    FolderEditDirective.prototype.title;
    /**
     * Emitted when the folder has been edited successfully.
     * @type {?}
     */
    FolderEditDirective.prototype.success;
    /** @type {?} */
    FolderEditDirective.prototype.dialogRef;
    /** @type {?} */
    FolderEditDirective.prototype.elementRef;
    /** @type {?} */
    FolderEditDirective.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWVkaXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiZm9sZGVyLWRpcmVjdGl2ZS9mb2xkZXItZWRpdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsU0FBUyxFQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBRS9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV4QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQ7SUE4QkksNkJBQ1csU0FBb0IsRUFDcEIsVUFBc0IsRUFDdEIsT0FBdUI7UUFGdkIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFlBQU8sR0FBUCxPQUFPLENBQWdCOzs7O1FBckJsQyxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7UUFJbkQsVUFBSyxHQUFXLElBQUksQ0FBQzs7OztRQUlyQixZQUFPLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7SUFjcEQsQ0FBQzs7Ozs7SUFYSixxQ0FBTzs7OztJQURQLFVBQ1EsS0FBSztRQUNULEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDO0lBUUQsc0JBQVksNkNBQVk7Ozs7O1FBQXhCO1lBQ1ksSUFBQSx3Q0FBbUI7WUFDbkIsSUFBQSxvQkFBTTtZQUVkLE9BQU87Z0JBQ0gsSUFBSSxFQUFFO29CQUNGLE1BQU0sUUFBQTtvQkFDTixTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7aUJBQ3hCO2dCQUNELEtBQUssRUFBSyxLQUFLLE9BQUk7YUFDdEIsQ0FBQztRQUNOLENBQUM7OztPQUFBOzs7OztJQUVPLHdDQUFVOzs7O0lBQWxCO1FBQUEsaUJBaUJDO1FBaEJTLElBQUEsU0FBMkMsRUFBekMsd0JBQVMsRUFBRSw4QkFBWSxFQUFFLG9CQUFnQjs7WUFDM0MsY0FBYyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDO1FBRTFFLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsS0FBSztZQUNuRCxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLEVBQUMsQ0FBQztRQUVILGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBVTtZQUMxRCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLEVBQUMsQ0FBQztRQUVILGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxJQUFVO1lBQzlDLElBQUksSUFBSSxFQUFFO2dCQUNOLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDO0lBOURNLGdDQUFZLEdBQVcsR0FBRyxDQUFDOztnQkFKckMsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7aUJBQ2hDOzs7O2dCQVRRLFNBQVM7Z0JBREUsVUFBVTtnQkFNckIsY0FBYzs7O3lCQVNsQixLQUFLLFNBQUMsaUJBQWlCO3dCQUl2QixNQUFNO3dCQUlOLEtBQUs7MEJBSUwsTUFBTTswQkFHTixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUUsUUFBUSxDQUFFOztJQTZDdkMsMEJBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQWhFWSxtQkFBbUI7OztJQUM1QixpQ0FBa0M7Ozs7O0lBR2xDLHFDQUNhOzs7OztJQUdiLG9DQUNtRDs7Ozs7SUFHbkQsb0NBQ3FCOzs7OztJQUdyQixzQ0FDdUQ7O0lBV25ELHdDQUEyQjs7SUFDM0IseUNBQTZCOztJQUM3QixzQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1pbnB1dC1yZW5hbWUgICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZywgTWF0RGlhbG9nQ29uZmlnIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbmltcG9ydCB7IEZvbGRlckRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvZm9sZGVyLmRpYWxvZyc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1lZGl0LWZvbGRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEZvbGRlckVkaXREaXJlY3RpdmUge1xuICAgIHN0YXRpYyBESUFMT0dfV0lEVEg6IG51bWJlciA9IDQwMDtcblxuICAgIC8qKiBGb2xkZXIgbm9kZSB0byBlZGl0LiAqL1xuICAgIEBJbnB1dCgnYWRmLWVkaXQtZm9sZGVyJylcbiAgICBmb2xkZXI6IE5vZGU7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyAoZWcsIGEgZm9sZGVyIHdpdGggc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzKS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBUaXRsZSBvZiBmb2xkZXIgZWRpdCBkaWFsb2cuICovXG4gICAgQElucHV0KClcbiAgICB0aXRsZTogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvbGRlciBoYXMgYmVlbiBlZGl0ZWQgc3VjY2Vzc2Z1bGx5LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxOb2RlPiA9IG5ldyBFdmVudEVtaXR0ZXI8Tm9kZT4oKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyAnJGV2ZW50JyBdKVxuICAgIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMuZm9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5EaWFsb2coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2csXG4gICAgICAgIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBwdWJsaWMgY29udGVudDogQ29udGVudFNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBwcml2YXRlIGdldCBkaWFsb2dDb25maWcoKTogTWF0RGlhbG9nQ29uZmlnIHtcbiAgICAgICAgY29uc3QgeyBESUFMT0dfV0lEVEg6IHdpZHRoIH0gPSBGb2xkZXJFZGl0RGlyZWN0aXZlO1xuICAgICAgICBjb25zdCB7IGZvbGRlciB9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGZvbGRlcixcbiAgICAgICAgICAgICAgICBlZGl0VGl0bGU6IHRoaXMudGl0bGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aWR0aDogYCR7d2lkdGh9cHhgXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuRGlhbG9nKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGRpYWxvZ1JlZiwgZGlhbG9nQ29uZmlnLCBjb250ZW50IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaWFsb2dJbnN0YW5jZSA9IGRpYWxvZ1JlZi5vcGVuKEZvbGRlckRpYWxvZ0NvbXBvbmVudCwgZGlhbG9nQ29uZmlnKTtcblxuICAgICAgICBkaWFsb2dJbnN0YW5jZS5jb21wb25lbnRJbnN0YW5jZS5lcnJvci5zdWJzY3JpYmUoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkaWFsb2dJbnN0YW5jZS5jb21wb25lbnRJbnN0YW5jZS5zdWNjZXNzLnN1YnNjcmliZSgobm9kZTogTm9kZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdWNjZXNzLmVtaXQobm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpYWxvZ0luc3RhbmNlLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKChub2RlOiBOb2RlKSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuZm9sZGVyRWRpdC5uZXh0KG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=