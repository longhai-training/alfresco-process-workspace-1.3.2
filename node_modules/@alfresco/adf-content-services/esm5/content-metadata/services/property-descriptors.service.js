/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { defer, forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var PropertyDescriptorsService = /** @class */ (function () {
    function PropertyDescriptorsService(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * @param {?} groupNames
     * @return {?}
     */
    PropertyDescriptorsService.prototype.load = /**
     * @param {?} groupNames
     * @return {?}
     */
    function (groupNames) {
        var _this = this;
        /** @type {?} */
        var groupFetchStreams = groupNames
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        function (groupName) { return groupName.replace(':', '_'); }))
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        function (groupName) { return defer((/**
         * @return {?}
         */
        function () { return _this.alfrescoApiService.classesApi.getClass(groupName); })); }));
        return forkJoin(groupFetchStreams).pipe(map(this.convertToObject));
    };
    /**
     * @private
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    PropertyDescriptorsService.prototype.convertToObject = /**
     * @private
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    function (propertyGroupsArray) {
        return propertyGroupsArray.reduce((/**
         * @param {?} propertyGroups
         * @param {?} propertyGroup
         * @return {?}
         */
        function (propertyGroups, propertyGroup) {
            var _a;
            return Object.assign({}, propertyGroups, (_a = {},
                _a[propertyGroup.name] = propertyGroup,
                _a));
        }), {});
    };
    PropertyDescriptorsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PropertyDescriptorsService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ PropertyDescriptorsService.ngInjectableDef = i0.defineInjectable({ factory: function PropertyDescriptorsService_Factory() { return new PropertyDescriptorsService(i0.inject(i1.AlfrescoApiService)); }, token: PropertyDescriptorsService, providedIn: "root" });
    return PropertyDescriptorsService;
}());
export { PropertyDescriptorsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PropertyDescriptorsService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvcHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBYyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRXJDO0lBS0ksb0NBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQUcsQ0FBQzs7Ozs7SUFFOUQseUNBQUk7Ozs7SUFBSixVQUFLLFVBQW9CO1FBQXpCLGlCQVFDOztZQVBTLGlCQUFpQixHQUFHLFVBQVU7YUFDL0IsR0FBRzs7OztRQUFDLFVBQUMsU0FBUyxJQUFLLE9BQUEsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQTNCLENBQTJCLEVBQUM7YUFDL0MsR0FBRzs7OztRQUFDLFVBQUMsU0FBUyxJQUFLLE9BQUEsS0FBSzs7O1FBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUF0RCxDQUFzRCxFQUFDLEVBQXBFLENBQW9FLEVBQUU7UUFFOUYsT0FBTyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQzVCLENBQUM7SUFDTixDQUFDOzs7Ozs7SUFFTyxvREFBZTs7Ozs7SUFBdkIsVUFBd0IsbUJBQW9DO1FBQ3hELE9BQU8sbUJBQW1CLENBQUMsTUFBTTs7Ozs7UUFBQyxVQUFDLGNBQWMsRUFBRSxhQUFhOztZQUM1RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWM7Z0JBQ25DLEdBQUMsYUFBYSxDQUFDLElBQUksSUFBRyxhQUFhO29CQUNyQyxDQUFDO1FBQ1AsQ0FBQyxHQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7Z0JBdkJKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBUFEsa0JBQWtCOzs7cUNBbEIzQjtDQStDQyxBQXhCRCxJQXdCQztTQXJCWSwwQkFBMEI7Ozs7OztJQUV2Qix3REFBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZGVmZXIsIGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQcm9wZXJ0eUdyb3VwLCBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxmcmVzY29BcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UpIHt9XG5cbiAgICBsb2FkKGdyb3VwTmFtZXM6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxQcm9wZXJ0eUdyb3VwQ29udGFpbmVyPiB7XG4gICAgICAgIGNvbnN0IGdyb3VwRmV0Y2hTdHJlYW1zID0gZ3JvdXBOYW1lc1xuICAgICAgICAgICAgLm1hcCgoZ3JvdXBOYW1lKSA9PiBncm91cE5hbWUucmVwbGFjZSgnOicsICdfJykpXG4gICAgICAgICAgICAubWFwKChncm91cE5hbWUpID0+IGRlZmVyKCAoKSA9PiB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5jbGFzc2VzQXBpLmdldENsYXNzKGdyb3VwTmFtZSkpICk7XG5cbiAgICAgICAgcmV0dXJuIGZvcmtKb2luKGdyb3VwRmV0Y2hTdHJlYW1zKS5waXBlKFxuICAgICAgICAgICAgbWFwKHRoaXMuY29udmVydFRvT2JqZWN0KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udmVydFRvT2JqZWN0KHByb3BlcnR5R3JvdXBzQXJyYXk6IFByb3BlcnR5R3JvdXBbXSk6IFByb3BlcnR5R3JvdXBDb250YWluZXIge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cHNBcnJheS5yZWR1Y2UoKHByb3BlcnR5R3JvdXBzLCBwcm9wZXJ0eUdyb3VwKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJvcGVydHlHcm91cHMsIHtcbiAgICAgICAgICAgICAgICBbcHJvcGVydHlHcm91cC5uYW1lXTogcHJvcGVydHlHcm91cFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG59XG4iXX0=