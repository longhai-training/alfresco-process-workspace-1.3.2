/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var BasicPropertiesService = /** @class */ (function () {
    function BasicPropertiesService(fileSizePipe) {
        this.fileSizePipe = fileSizePipe;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    BasicPropertiesService.prototype.getProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var sizeInBytes = node.content ? node.content.sizeInBytes : '';
        /** @type {?} */
        var mimeTypeName = node.content ? node.content.mimeTypeName : '';
        /** @type {?} */
        var author = node.properties ? node.properties['cm:author'] : '';
        /** @type {?} */
        var description = node.properties ? node.properties['cm:description'] : '';
        /** @type {?} */
        var title = node.properties ? node.properties['cm:title'] : '';
        return [
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.NAME',
                value: node.name,
                key: 'name',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.TITLE',
                value: title,
                key: 'properties.cm:title',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.CREATOR',
                value: node.createdByUser.displayName,
                key: 'createdByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.CREATED_DATE',
                value: node.createdAt,
                key: 'createdAt',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.SIZE',
                value: sizeInBytes,
                key: 'content.sizeInBytes',
                pipes: [{ pipe: this.fileSizePipe }],
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIER',
                value: node.modifiedByUser.displayName,
                key: 'modifiedByUser.displayName',
                editable: false
            }),
            new CardViewDateItemModel({
                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',
                value: node.modifiedAt,
                key: 'modifiedAt',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.MIMETYPE',
                value: mimeTypeName,
                key: 'content.mimeTypeName',
                editable: false
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.AUTHOR',
                value: author,
                key: 'properties.cm:author',
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'CORE.METADATA.BASIC.DESCRIPTION',
                value: description,
                key: 'properties.cm:description',
                multiline: true,
                editable: true
            })
        ];
    };
    BasicPropertiesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BasicPropertiesService.ctorParameters = function () { return [
        { type: FileSizePipe }
    ]; };
    /** @nocollapse */ BasicPropertiesService.ngInjectableDef = i0.defineInjectable({ factory: function BasicPropertiesService_Factory() { return new BasicPropertiesService(i0.inject(i1.FileSizePipe)); }, token: BasicPropertiesService, providedIn: "root" });
    return BasicPropertiesService;
}());
export { BasicPropertiesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BasicPropertiesService.prototype.fileSizePipe;
}
//# sourceMappingURL=data:application/json;base64,