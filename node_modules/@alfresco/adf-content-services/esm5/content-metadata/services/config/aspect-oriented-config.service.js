/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getGroup, getProperty } from './property-group-reader';
var AspectOrientedConfigService = /** @class */ (function () {
    function AspectOrientedConfigService(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    AspectOrientedConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        if (this.isIncludeAllEnabled()) {
            return true;
        }
        /** @type {?} */
        var groupNames = Object.keys(this.config);
        return groupNames.indexOf(groupName) !== -1;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    AspectOrientedConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        var _this = this;
        /** @type {?} */
        var aspects = this.config;
        /** @type {?} */
        var aspectNames = Object.keys(aspects);
        return aspectNames
            .reduce((/**
         * @param {?} groupAccumulator
         * @param {?} aspectName
         * @return {?}
         */
        function (groupAccumulator, aspectName) {
            /** @type {?} */
            var newGroup = _this.getOrganisedPropertyGroup(propertyGroups, aspectName);
            return groupAccumulator.concat(newGroup);
        }), [])
            .filter((/**
         * @param {?} organisedPropertyGroup
         * @return {?}
         */
        function (organisedPropertyGroup) { return organisedPropertyGroup.properties.length > 0; }));
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    AspectOrientedConfigService.prototype.appendAllPreset = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        /** @type {?} */
        var groups = Object.keys(propertyGroups)
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        function (groupName) {
            /** @type {?} */
            var propertyGroup = propertyGroups[groupName];
            /** @type {?} */
            var properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map((/**
                 * @param {?} propertyName
                 * @return {?}
                 */
                function (propertyName) { return properties[propertyName]; }))
            });
        }));
        return groups;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    AspectOrientedConfigService.prototype.filterExcludedPreset = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        var _this = this;
        if (this.config.exclude) {
            return propertyGroups.filter((/**
             * @param {?} preset
             * @return {?}
             */
            function (preset) {
                return !_this.config.exclude.includes(preset.name);
            }));
        }
        return propertyGroups;
    };
    /**
     * @return {?}
     */
    AspectOrientedConfigService.prototype.isIncludeAllEnabled = /**
     * @return {?}
     */
    function () {
        return this.config.includeAll;
    };
    /**
     * @private
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    AspectOrientedConfigService.prototype.getOrganisedPropertyGroup = /**
     * @private
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    function (propertyGroups, aspectName) {
        /** @type {?} */
        var group = getGroup(propertyGroups, aspectName);
        /** @type {?} */
        var newGroup = [];
        if (group) {
            /** @type {?} */
            var aspectProperties = this.config[aspectName];
            /** @type {?} */
            var properties = void 0;
            if (aspectProperties === '*') {
                properties = getProperty(propertyGroups, aspectName, aspectProperties);
            }
            else {
                properties = ((/** @type {?} */ (aspectProperties)))
                    .map((/**
                 * @param {?} propertyName
                 * @return {?}
                 */
                function (propertyName) { return getProperty(propertyGroups, aspectName, propertyName); }))
                    .filter((/**
                 * @param {?} props
                 * @return {?}
                 */
                function (props) { return props !== undefined; }));
            }
            newGroup = [{ title: group.title, properties: properties }];
        }
        return newGroup;
    };
    return AspectOrientedConfigService;
}());
export { AspectOrientedConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AspectOrientedConfigService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,