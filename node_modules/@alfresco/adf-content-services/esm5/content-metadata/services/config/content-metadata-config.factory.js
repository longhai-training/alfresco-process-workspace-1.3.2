/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, LogService } from '@alfresco/adf-core';
import { AspectOrientedConfigService } from './aspect-oriented-config.service';
import { IndifferentConfigService } from './indifferent-config.service';
import { LayoutOrientedConfigService } from './layout-oriented-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var ContentMetadataConfigFactory = /** @class */ (function () {
    function ContentMetadataConfigFactory(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    /**
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.get = /**
     * @param {?=} presetName
     * @return {?}
     */
    function (presetName) {
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error("No content-metadata preset for: " + presetName);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    };
    /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.createConfig = /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    function (presetConfig) {
        /** @type {?} */
        var config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService((/** @type {?} */ (presetConfig)));
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService((/** @type {?} */ (presetConfig)));
        }
        else {
            config = new IndifferentConfigService((/** @type {?} */ (presetConfig)));
        }
        Object.freeze(config);
        return config;
    };
    /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.isAspectOrientedPreset = /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    function (presetConfig) {
        return this.isObject(presetConfig);
    };
    /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.isLayoutOrientedPreset = /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    function (presetConfig) {
        return Array.isArray(presetConfig);
    };
    /**
     * @private
     * @param {?} x
     * @return {?}
     */
    ContentMetadataConfigFactory.prototype.isObject = /**
     * @private
     * @param {?} x
     * @return {?}
     */
    function (x) {
        return x != null && typeof x === 'object';
    };
    ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
    ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
    ContentMetadataConfigFactory.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentMetadataConfigFactory.ctorParameters = function () { return [
        { type: AppConfigService },
        { type: LogService }
    ]; };
    /** @nocollapse */ ContentMetadataConfigFactory.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataConfigFactory_Factory() { return new ContentMetadataConfigFactory(i0.inject(i1.AppConfigService), i0.inject(i1.LogService)); }, token: ContentMetadataConfigFactory, providedIn: "root" });
    return ContentMetadataConfigFactory;
}());
export { ContentMetadataConfigFactory };
if (false) {
    /** @type {?} */
    ContentMetadataConfigFactory.INDIFFERENT_PRESET;
    /** @type {?} */
    ContentMetadataConfigFactory.DEFAULT_PRESET_NAME;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataConfigFactory.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataConfigFactory.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jb25maWcuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQVMvRTtJQVFJLHNDQUFvQixnQkFBa0MsRUFBVSxVQUFzQjtRQUFsRSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7Ozs7O0lBRW5GLDBDQUFHOzs7O0lBQVYsVUFBVyxVQUE4QjtRQUE5QiwyQkFBQSxFQUFBLHNCQUE4Qjs7WUFDakMsWUFBWTtRQUNoQixJQUFJO1lBQ0EsWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkY7UUFBQyxXQUFNO1lBQ0osSUFBSSxVQUFVLEtBQUssNEJBQTRCLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ2pFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLHFDQUFtQyxVQUFZLENBQUMsQ0FBQzthQUMxRTtZQUNELFlBQVksR0FBRyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQztTQUNsRTtRQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7Ozs7SUFFTyxtREFBWTs7Ozs7SUFBcEIsVUFBcUIsWUFBMEI7O1lBQ3ZDLE1BQTZCO1FBRWpDLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzNDLE1BQU0sR0FBRyxJQUFJLDJCQUEyQixDQUFDLG1CQUF1QixZQUFZLEVBQUEsQ0FBQyxDQUFDO1NBQ2pGO2FBQU0sSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEQsTUFBTSxHQUFHLElBQUksMkJBQTJCLENBQUMsbUJBQXVCLFlBQVksRUFBQSxDQUFDLENBQUM7U0FDakY7YUFBTTtZQUNILE1BQU0sR0FBRyxJQUFJLHdCQUF3QixDQUFDLG1CQUFvQixZQUFZLEVBQUEsQ0FBQyxDQUFDO1NBQzNFO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFTyw2REFBc0I7Ozs7O0lBQTlCLFVBQStCLFlBQTBCO1FBQ3JELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7SUFFTyw2REFBc0I7Ozs7O0lBQTlCLFVBQStCLFlBQTBCO1FBQ3JELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7SUFFTywrQ0FBUTs7Ozs7SUFBaEIsVUFBaUIsQ0FBQztRQUNkLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7SUFDOUMsQ0FBQztJQTVDZSwrQ0FBa0IsR0FBRyxHQUFHLENBQUM7SUFDekIsZ0RBQW1CLEdBQUcsU0FBUyxDQUFDOztnQkFObkQsVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFkUSxnQkFBZ0I7Z0JBQUUsVUFBVTs7O3VDQWxCckM7Q0FnRkMsQUFsREQsSUFrREM7U0EvQ1ksNEJBQTRCOzs7SUFFckMsZ0RBQXlDOztJQUN6QyxpREFBZ0Q7Ozs7O0lBRXBDLHdEQUEwQzs7Ozs7SUFBRSxrREFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEFzcGVjdE9yaWVudGVkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IEluZGlmZmVyZW50Q29uZmlnU2VydmljZSB9IGZyb20gJy4vaW5kaWZmZXJlbnQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5b3V0T3JpZW50ZWRDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9sYXlvdXQtb3JpZW50ZWQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBQcmVzZXRDb25maWcsXG4gICAgQ29udGVudE1ldGFkYXRhQ29uZmlnLFxuICAgIEFzcGVjdE9yaWVudGVkQ29uZmlnLFxuICAgIEluRGlmZmVyZW50Q29uZmlnLFxuICAgIExheW91dE9yaWVudGVkQ29uZmlnXG59IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5IHtcblxuICAgIHN0YXRpYyByZWFkb25seSBJTkRJRkZFUkVOVF9QUkVTRVQgPSAnKic7XG4gICAgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfUFJFU0VUX05BTUUgPSAnZGVmYXVsdCc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge31cblxuICAgIHB1YmxpYyBnZXQocHJlc2V0TmFtZTogc3RyaW5nID0gJ2RlZmF1bHQnKTogQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcbiAgICAgICAgbGV0IHByZXNldENvbmZpZztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXNldENvbmZpZyA9IHRoaXMuYXBwQ29uZmlnU2VydmljZS5jb25maWdbJ2NvbnRlbnQtbWV0YWRhdGEnXS5wcmVzZXRzW3ByZXNldE5hbWVdO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIGlmIChwcmVzZXROYW1lICE9PSBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LkRFRkFVTFRfUFJFU0VUX05BTUUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoYE5vIGNvbnRlbnQtbWV0YWRhdGEgcHJlc2V0IGZvcjogJHtwcmVzZXROYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlc2V0Q29uZmlnID0gQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeS5JTkRJRkZFUkVOVF9QUkVTRVQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb25maWcocHJlc2V0Q29uZmlnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUNvbmZpZyhwcmVzZXRDb25maWc6IFByZXNldENvbmZpZyk6IENvbnRlbnRNZXRhZGF0YUNvbmZpZyB7XG4gICAgICAgIGxldCBjb25maWc6IENvbnRlbnRNZXRhZGF0YUNvbmZpZztcblxuICAgICAgICBpZiAodGhpcy5pc0xheW91dE9yaWVudGVkUHJlc2V0KHByZXNldENvbmZpZykpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IG5ldyBMYXlvdXRPcmllbnRlZENvbmZpZ1NlcnZpY2UoPExheW91dE9yaWVudGVkQ29uZmlnPiBwcmVzZXRDb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNBc3BlY3RPcmllbnRlZFByZXNldChwcmVzZXRDb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcgPSBuZXcgQXNwZWN0T3JpZW50ZWRDb25maWdTZXJ2aWNlKDxBc3BlY3RPcmllbnRlZENvbmZpZz4gcHJlc2V0Q29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IG5ldyBJbmRpZmZlcmVudENvbmZpZ1NlcnZpY2UoPEluRGlmZmVyZW50Q29uZmlnPiBwcmVzZXRDb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmZyZWV6ZShjb25maWcpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNBc3BlY3RPcmllbnRlZFByZXNldChwcmVzZXRDb25maWc6IFByZXNldENvbmZpZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc09iamVjdChwcmVzZXRDb25maWcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNMYXlvdXRPcmllbnRlZFByZXNldChwcmVzZXRDb25maWc6IFByZXNldENvbmZpZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwcmVzZXRDb25maWcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNPYmplY3QoeCkge1xuICAgICAgICByZXR1cm4geCAhPSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0JztcbiAgICB9XG59XG4iXX0=