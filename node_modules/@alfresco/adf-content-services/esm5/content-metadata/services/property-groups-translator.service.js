/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { CardViewTextItemModel, CardViewBoolItemModel, CardViewDateItemModel, CardViewDatetimeItemModel, CardViewIntItemModel, CardViewFloatItemModel, LogService, MultiValuePipe, AppConfigService } from '@alfresco/adf-core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
/** @type {?} */
var D_TEXT = 'd:text';
/** @type {?} */
var D_MLTEXT = 'd:mltext';
/** @type {?} */
var D_DATE = 'd:date';
/** @type {?} */
var D_DATETIME = 'd:datetime';
/** @type {?} */
var D_INT = 'd:int';
/** @type {?} */
var D_LONG = 'd:long';
/** @type {?} */
var D_FLOAT = 'd:float';
/** @type {?} */
var D_DOUBLE = 'd:double';
/** @type {?} */
var D_BOOLEAN = 'd:boolean';
var PropertyGroupTranslatorService = /** @class */ (function () {
    function PropertyGroupTranslatorService(logService, multiValuePipe, appConfig) {
        this.logService = logService;
        this.multiValuePipe = multiValuePipe;
        this.appConfig = appConfig;
        this.valueSeparator = this.appConfig.get('content-metadata.multi-value-pipe-separator');
    }
    /**
     * @param {?} propertyGroups
     * @param {?} propertyValues
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.translateToCardViewGroups = /**
     * @param {?} propertyGroups
     * @param {?} propertyValues
     * @return {?}
     */
    function (propertyGroups, propertyValues) {
        var _this = this;
        return propertyGroups.map((/**
         * @param {?} propertyGroup
         * @return {?}
         */
        function (propertyGroup) {
            /** @type {?} */
            var translatedPropertyGroup = Object.assign({}, propertyGroup);
            translatedPropertyGroup.properties = _this.translateArray(propertyGroup.properties, propertyValues);
            return translatedPropertyGroup;
        }));
    };
    /**
     * @private
     * @param {?} properties
     * @param {?} propertyValues
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.translateArray = /**
     * @private
     * @param {?} properties
     * @param {?} propertyValues
     * @return {?}
     */
    function (properties, propertyValues) {
        var _this = this;
        return properties.map((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            return _this.translate(property, propertyValues);
        }));
    };
    /**
     * @private
     * @param {?} property
     * @param {?} propertyValues
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.translate = /**
     * @private
     * @param {?} property
     * @param {?} propertyValues
     * @return {?}
     */
    function (property, propertyValues) {
        /** @type {?} */
        var propertyValue;
        if (propertyValues && propertyValues[property.name]) {
            propertyValue = propertyValues[property.name];
        }
        this.checkECMTypeValidity(property.dataType);
        /** @type {?} */
        var prefix = 'properties.';
        /** @type {?} */
        var propertyDefinition = {
            label: property.title || property.name,
            value: propertyValue,
            key: "" + prefix + property.name,
            default: property.defaultValue,
            editable: true
        };
        /** @type {?} */
        var cardViewItemProperty;
        switch (property.dataType) {
            case D_MLTEXT:
                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                    multiline: true
                }));
                break;
            case D_INT:
            case D_LONG:
                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);
                break;
            case D_FLOAT:
            case D_DOUBLE:
                cardViewItemProperty = new CardViewFloatItemModel(propertyDefinition);
                break;
            case D_DATE:
                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);
                break;
            case D_DATETIME:
                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);
                break;
            case D_BOOLEAN:
                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);
                break;
            case D_TEXT:
            default:
                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {
                    multivalued: property.multiValued,
                    multiline: property.multiValued,
                    pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator] }]
                }));
        }
        return cardViewItemProperty;
    };
    /**
     * @private
     * @param {?} ecmPropertyType
     * @return {?}
     */
    PropertyGroupTranslatorService.prototype.checkECMTypeValidity = /**
     * @private
     * @param {?} ecmPropertyType
     * @return {?}
     */
    function (ecmPropertyType) {
        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {
            this.logService.error("Unknown type for mapping: " + ecmPropertyType);
        }
    };
    PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];
    PropertyGroupTranslatorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PropertyGroupTranslatorService.ctorParameters = function () { return [
        { type: LogService },
        { type: MultiValuePipe },
        { type: AppConfigService }
    ]; };
    /** @nocollapse */ PropertyGroupTranslatorService.ngInjectableDef = i0.defineInjectable({ factory: function PropertyGroupTranslatorService_Factory() { return new PropertyGroupTranslatorService(i0.inject(i1.LogService), i0.inject(i1.MultiValuePipe), i0.inject(i1.AppConfigService)); }, token: PropertyGroupTranslatorService, providedIn: "root" });
    return PropertyGroupTranslatorService;
}());
export { PropertyGroupTranslatorService };
if (false) {
    /** @type {?} */
    PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES;
    /** @type {?} */
    PropertyGroupTranslatorService.prototype.valueSeparator;
    /**
     * @type {?}
     * @private
     */
    PropertyGroupTranslatorService.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    PropertyGroupTranslatorService.prototype.multiValuePipe;
    /**
     * @type {?}
     * @private
     */
    PropertyGroupTranslatorService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,