/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of, iif } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
var ContentMetadataService = /** @class */ (function () {
    function ContentMetadataService(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ContentMetadataService.prototype.getBasicProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return of(this.basicPropertiesService.getProperties(node));
    };
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataService.prototype.getGroupedProperties = /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    function (node, presetName) {
        var _this = this;
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            var contentMetadataConfig_1 = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            var groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((/**
             * @param {?} groupName
             * @return {?}
             */
            function (groupName) { return contentMetadataConfig_1.isGroupAllowed(groupName); }));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(switchMap((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) {
                    return iif((/**
                     * @return {?}
                     */
                    function () { return contentMetadataConfig_1.isIncludeAllEnabled(); }), of(contentMetadataConfig_1.appendAllPreset(groups).concat(contentMetadataConfig_1.reorganiseByConfig(groups))), of(contentMetadataConfig_1.reorganiseByConfig(groups)));
                })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return contentMetadataConfig_1.filterExcludedPreset(groups); })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return _this.filterEmptyPreset(groups); })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return _this.setTitleToNameIfNotSet(groups); })), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                function (groups) { return _this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties); })));
            }
        }
        return groupedProperties;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    ContentMetadataService.prototype.setTitleToNameIfNotSet = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        propertyGroups.map((/**
         * @param {?} propertyGroup
         * @return {?}
         */
        function (propertyGroup) {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        }));
        return propertyGroups;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    ContentMetadataService.prototype.filterEmptyPreset = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        return propertyGroups.filter((/**
         * @param {?} props
         * @return {?}
         */
        function (props) { return props.properties.length; }));
    };
    ContentMetadataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentMetadataService.ctorParameters = function () { return [
        { type: BasicPropertiesService },
        { type: ContentMetadataConfigFactory },
        { type: PropertyGroupTranslatorService },
        { type: PropertyDescriptorsService }
    ]; };
    /** @nocollapse */ ContentMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.inject(i1.BasicPropertiesService), i0.inject(i2.ContentMetadataConfigFactory), i0.inject(i3.PropertyGroupTranslatorService), i0.inject(i4.PropertyDescriptorsService)); }, token: ContentMetadataService, providedIn: "root" });
    return ContentMetadataService;
}());
export { ContentMetadataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.basicPropertiesService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyDescriptorsService;
}
//# sourceMappingURL=data:application/json;base64,