/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService } from '@alfresco/adf-core';
import { ContentMetadataService } from '../../services/content-metadata.service';
import { switchMap } from 'rxjs/operators';
var ContentMetadataComponent = /** @class */ (function () {
    function ContentMetadataComponent(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService) {
        this.contentMetadataService = contentMetadataService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.nodesApiService = nodesApiService;
        this.logService = logService;
        this.alfrescoApiService = alfrescoApiService;
        /**
         * Toggles whether the edit button should be shown
         */
        this.editable = false;
        /**
         * Toggles whether to display empty values in the card view
         */
        this.displayEmpty = false;
        /**
         * Toggles between expanded (ie, full information) and collapsed
         * (ie, reduced information) in the display
         */
        this.expanded = false;
        /**
         * The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time
         */
        this.multi = false;
        /**
         * Toggles whether the metadata properties should be shown
         */
        this.displayDefaultProperties = true;
        /**
         * (Optional) shows the given aspect in the expanded  card
         */
        this.displayAspect = null;
    }
    /**
     * @return {?}
     */
    ContentMetadataComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.disposableNodeUpdate = this.cardViewUpdateService.itemUpdated$
            .pipe(switchMap(this.saveNode.bind(this)))
            .subscribe((/**
         * @param {?} updatedNode
         * @return {?}
         */
        function (updatedNode) {
            Object.assign(_this.node, updatedNode);
            _this.alfrescoApiService.nodeUpdated.next(_this.node);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.logService.error(error); }));
        this.loadProperties(this.node);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ContentMetadataComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.node && !changes.node.firstChange) {
            this.loadProperties(changes.node.currentValue);
        }
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    ContentMetadataComponent.prototype.loadProperties = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);
            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
        }
    };
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    ContentMetadataComponent.prototype.saveNode = /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var nodeBody = _a.changed;
        return this.nodesApiService.updateNode(this.node.id, nodeBody);
    };
    /**
     * @param {?} group
     * @return {?}
     */
    ContentMetadataComponent.prototype.showGroup = /**
     * @param {?} group
     * @return {?}
     */
    function (group) {
        /** @type {?} */
        var properties = group.properties.filter((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            return !!property.displayValue;
        }));
        return properties.length;
    };
    /**
     * @return {?}
     */
    ContentMetadataComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposableNodeUpdate.unsubscribe();
    };
    /**
     * @param {?} group
     * @return {?}
     */
    ContentMetadataComponent.prototype.canExpandTheCard = /**
     * @param {?} group
     * @return {?}
     */
    function (group) {
        return group.title === this.displayAspect;
    };
    /**
     * @return {?}
     */
    ContentMetadataComponent.prototype.canExpandProperties = /**
     * @return {?}
     */
    function () {
        return !this.expanded || this.displayAspect === 'Properties';
    };
    ContentMetadataComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-metadata',
                    template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\" [multi]=\"multi\">\n        <mat-expansion-panel\n            *ngIf=\"displayDefaultProperties\"\n            [expanded]=\"canExpandProperties()\"\n            [hideToggle]=\"canExpandProperties()\"\n            [attr.data-automation-id]=\"'adf-metadata-group-properties'\" >\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-card-view\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\" class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel *ngIf=\"showGroup(group) || editable\"\n                    [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                    [expanded]=\"canExpandTheCard(group) || !displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n</div>\n",
                    host: { 'class': 'adf-content-metadata' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentMetadataComponent.ctorParameters = function () { return [
        { type: ContentMetadataService },
        { type: CardViewUpdateService },
        { type: NodesApiService },
        { type: LogService },
        { type: AlfrescoApiService }
    ]; };
    ContentMetadataComponent.propDecorators = {
        node: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        expanded: [{ type: Input }],
        multi: [{ type: Input }],
        preset: [{ type: Input }],
        displayDefaultProperties: [{ type: Input }],
        displayAspect: [{ type: Input }]
    };
    return ContentMetadataComponent;
}());
export { ContentMetadataComponent };
if (false) {
    /**
     * (required) The node entity to fetch metadata about
     * @type {?}
     */
    ContentMetadataComponent.prototype.node;
    /**
     * Toggles whether the edit button should be shown
     * @type {?}
     */
    ContentMetadataComponent.prototype.editable;
    /**
     * Toggles whether to display empty values in the card view
     * @type {?}
     */
    ContentMetadataComponent.prototype.displayEmpty;
    /**
     * Toggles between expanded (ie, full information) and collapsed
     * (ie, reduced information) in the display
     * @type {?}
     */
    ContentMetadataComponent.prototype.expanded;
    /**
     * The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time
     * @type {?}
     */
    ContentMetadataComponent.prototype.multi;
    /**
     * Name of the metadata preset, which defines aspects and their properties
     * @type {?}
     */
    ContentMetadataComponent.prototype.preset;
    /**
     * Toggles whether the metadata properties should be shown
     * @type {?}
     */
    ContentMetadataComponent.prototype.displayDefaultProperties;
    /**
     * (Optional) shows the given aspect in the expanded  card
     * @type {?}
     */
    ContentMetadataComponent.prototype.displayAspect;
    /** @type {?} */
    ContentMetadataComponent.prototype.basicProperties$;
    /** @type {?} */
    ContentMetadataComponent.prototype.groupedProperties$;
    /** @type {?} */
    ContentMetadataComponent.prototype.disposableNodeUpdate;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.contentMetadataService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.nodesApiService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW1ldGFkYXRhL2NvbXBvbmVudHMvY29udGVudC1tZXRhZGF0YS9jb250ZW50LW1ldGFkYXRhLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBK0MsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakgsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXhDLE9BQU8sRUFBZ0IsZUFBZSxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRWpGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQThDSSxrQ0FDWSxzQkFBOEMsRUFDOUMscUJBQTRDLEVBQzVDLGVBQWdDLEVBQ2hDLFVBQXNCLEVBQ3RCLGtCQUFzQztRQUp0QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjs7OztRQXJDbEQsYUFBUSxHQUFZLEtBQUssQ0FBQzs7OztRQUkxQixpQkFBWSxHQUFZLEtBQUssQ0FBQzs7Ozs7UUFNOUIsYUFBUSxHQUFZLEtBQUssQ0FBQzs7OztRQUkxQixVQUFLLEdBQUcsS0FBSyxDQUFDOzs7O1FBUWQsNkJBQXdCLEdBQVksSUFBSSxDQUFDOzs7O1FBSXpDLGtCQUFhLEdB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QUs7d0JBSUwsS0FBSzt5QkFJTCxLQUFLOzJDQUlMLEtBQUs7Z0NBSUwsS0FBSzs7SUFvRVYsK0JBQUM7Q0FBQSxBQTNHRCxJQTJHQztTQXBHWSx3QkFBd0I7Ozs7OztJQUVqQyx3Q0FDVzs7Ozs7SUFHWCw0Q0FDMEI7Ozs7O0lBRzFCLGdEQUM4Qjs7Ozs7O0lBSzlCLDRDQUMwQjs7Ozs7SUFHMUIseUNBQ2M7Ozs7O0lBR2QsMENBQ2U7Ozs7O0lBR2YsNERBQ3lDOzs7OztJQUd6QyxpREFDNkI7O0lBRTdCLG9EQUE2Qzs7SUFDN0Msc0RBQWdEOztJQUNoRCx3REFBbUM7Ozs7O0lBRy9CLDBEQUFzRDs7Ozs7SUFDdEQseURBQW9EOzs7OztJQUNwRCxtREFBd0M7Ozs7O0lBQ3hDLDhDQUE4Qjs7Ozs7SUFDOUIsc0RBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtLCBOb2Rlc0FwaVNlcnZpY2UsIExvZ1NlcnZpY2UsIENhcmRWaWV3VXBkYXRlU2VydmljZSwgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbnRlbnRNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FyZFZpZXdHcm91cCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29udGVudC1tZXRhZGF0YScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NvbnRlbnQtbWV0YWRhdGEuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbnRlbnQtbWV0YWRhdGEuY29tcG9uZW50LnNjc3MnXSxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdhZGYtY29udGVudC1tZXRhZGF0YScgfSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnRNZXRhZGF0YUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIC8qKiAocmVxdWlyZWQpIFRoZSBub2RlIGVudGl0eSB0byBmZXRjaCBtZXRhZGF0YSBhYm91dCAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZTogTm9kZTtcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdGhlIGVkaXQgYnV0dG9uIHNob3VsZCBiZSBzaG93biAqL1xuICAgIEBJbnB1dCgpXG4gICAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdG8gZGlzcGxheSBlbXB0eSB2YWx1ZXMgaW4gdGhlIGNhcmQgdmlldyAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUVtcHR5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlcyBiZXR3ZWVuIGV4cGFuZGVkIChpZSwgZnVsbCBpbmZvcm1hdGlvbikgYW5kIGNvbGxhcHNlZFxuICAgICAqIChpZSwgcmVkdWNlZCBpbmZvcm1hdGlvbikgaW4gdGhlIGRpc3BsYXlcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGV4cGFuZGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVGhlIG11bHRpIHBhcmFtZXRlciBvZiB0aGUgdW5kZXJseWluZyBtYXRlcmlhbCBleHBhbnNpb24gcGFuZWwsIHNldCB0byB0cnVlIHRvIGFsbG93IG11bHRpIGFjY29yZGlvbiB0byBiZSBleHBhbmRlZCBhdCB0aGUgc2FtZSB0aW1lICovXG4gICAgQElucHV0KClcbiAgICBtdWx0aSA9IGZhbHNlO1xuXG4gICAgLyoqIE5hbWUgb2YgdGhlIG1ldGFkYXRhIHByZXNldCwgd2hpY2ggZGVmaW5lcyBhc3BlY3RzIGFuZCB0aGVpciBwcm9wZXJ0aWVzICovXG4gICAgQElucHV0KClcbiAgICBwcmVzZXQ6IHN0cmluZztcblxuICAgIC8qKiBUb2dnbGVzIHdoZXRoZXIgdGhlIG1ldGFkYXRhIHByb3BlcnRpZXMgc2hvdWxkIGJlIHNob3duICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIChPcHRpb25hbCkgc2hvd3MgdGhlIGdpdmVuIGFzcGVjdCBpbiB0aGUgZXhwYW5kZWQgIGNhcmQgKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlBc3BlY3Q6IHN0cmluZyA9IG51bGw7XG5cbiAgICBiYXNpY1Byb3BlcnRpZXMkOiBPYnNlcnZhYmxlPENhcmRWaWV3SXRlbVtdPjtcbiAgICBncm91cGVkUHJvcGVydGllcyQ6IE9ic2VydmFibGU8Q2FyZFZpZXdHcm91cFtdPjtcbiAgICBkaXNwb3NhYmxlTm9kZVVwZGF0ZTogU3Vic2NyaXB0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgY29udGVudE1ldGFkYXRhU2VydmljZTogQ29udGVudE1ldGFkYXRhU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBjYXJkVmlld1VwZGF0ZVNlcnZpY2U6IENhcmRWaWV3VXBkYXRlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBub2Rlc0FwaVNlcnZpY2U6IE5vZGVzQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlXG4gICAgKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZU5vZGVVcGRhdGUgPSAgdGhpcy5jYXJkVmlld1VwZGF0ZVNlcnZpY2UuaXRlbVVwZGF0ZWQkXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBzd2l0Y2hNYXAodGhpcy5zYXZlTm9kZS5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAodXBkYXRlZE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm5vZGUsIHVwZGF0ZWROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2Uubm9kZVVwZGF0ZWQubmV4dCh0aGlzLm5vZGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubG9hZFByb3BlcnRpZXModGhpcy5ub2RlKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLm5vZGUgJiYgIWNoYW5nZXMubm9kZS5maXJzdENoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5sb2FkUHJvcGVydGllcyhjaGFuZ2VzLm5vZGUuY3VycmVudFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZFByb3BlcnRpZXMobm9kZTogTm9kZSkge1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNpY1Byb3BlcnRpZXMkID0gdGhpcy5jb250ZW50TWV0YWRhdGFTZXJ2aWNlLmdldEJhc2ljUHJvcGVydGllcyhub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBlZFByb3BlcnRpZXMkID0gdGhpcy5jb250ZW50TWV0YWRhdGFTZXJ2aWNlLmdldEdyb3VwZWRQcm9wZXJ0aWVzKG5vZGUsIHRoaXMucHJlc2V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2F2ZU5vZGUoeyBjaGFuZ2VkOiBub2RlQm9keSB9KTogT2JzZXJ2YWJsZTxOb2RlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzQXBpU2VydmljZS51cGRhdGVOb2RlKHRoaXMubm9kZS5pZCwgbm9kZUJvZHkpO1xuICAgIH1cblxuICAgIHNob3dHcm91cChncm91cDogQ2FyZFZpZXdHcm91cCkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZ3JvdXAucHJvcGVydGllcy5maWx0ZXIoKHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gISFwcm9wZXJ0eS5kaXNwbGF5VmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlTm9kZVVwZGF0ZS51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjYW5FeHBhbmRUaGVDYXJkKGdyb3VwOiBDYXJkVmlld0dyb3VwKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBncm91cC50aXRsZSA9PT0gdGhpcy5kaXNwbGF5QXNwZWN0O1xuICAgIH1cblxuICAgIHB1YmxpYyBjYW5FeHBhbmRQcm9wZXJ0aWVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuZXhwYW5kZWQgfHwgdGhpcy5kaXNwbGF5QXNwZWN0ID09PSAnUHJvcGVydGllcyc7XG4gICAgfVxuXG59XG4iXX0=