/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
var ContentMetadataCardComponent = /** @class */ (function () {
    function ContentMetadataCardComponent(contentService) {
        this.contentService = contentService;
        /**
         * (optional) This flag displays/hides empty metadata
         * fields.
         */
        this.displayEmpty = false;
        /**
         * (optional) This flag displays desired aspect when open for the first time
         * fields.
         */
        this.displayAspect = null;
        /**
         * (optional) This flag sets the metadata in read only mode
         * preventing changes.
         */
        this.readOnly = false;
        /**
         * (optional) This flag allows the component to display more
         * than one accordion at a time.
         */
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
    }
    Object.defineProperty(ContentMetadataCardComponent.prototype, "displayDefaultProperties", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayDefaultProperties;
        },
        /** (optional) This flag displays/hides the metadata
         * properties.
         */
        set: /**
         * (optional) This flag displays/hides the metadata
         * properties.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayDefaultProperties = value;
            this.onDisplayDefaultPropertiesChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.displayAspect && changes.displayAspect.currentValue) {
            this.expanded = true;
        }
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.onDisplayDefaultPropertiesChange = /**
     * @return {?}
     */
    function () {
        this.expanded = !this._displayDefaultProperties;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleEdit = /**
     * @return {?}
     */
    function () {
        this.editable = !this.editable;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleExpanded = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.hasAllowableOperations = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);
    };
    ContentMetadataCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-metadata-card',
                    template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [displayAspect]=\"displayAspect\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"!readOnly && hasAllowableOperations()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-content-metadata-card' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentMetadataCardComponent.ctorParameters = function () { return [
        { type: ContentService }
    ]; };
    ContentMetadataCardComponent.propDecorators = {
        node: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        displayAspect: [{ type: Input }],
        preset: [{ type: Input }],
        readOnly: [{ type: Input }],
        multi: [{ type: Input }],
        displayDefaultProperties: [{ type: Input }]
    };
    return ContentMetadataCardComponent;
}());
export { ContentMetadataCardComponent };
if (false) {
    /**
     * (required) The node entity to fetch metadata about
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.node;
    /**
     * (optional) This flag displays/hides empty metadata
     * fields.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.displayEmpty;
    /**
     * (optional) This flag displays desired aspect when open for the first time
     * fields.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.displayAspect;
    /**
     * (required) Name of the metadata preset, which defines aspects
     * and their properties.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.preset;
    /**
     * (optional) This flag sets the metadata in read only mode
     * preventing changes.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.readOnly;
    /**
     * (optional) This flag allows the component to display more
     * than one accordion at a time.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.multi;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataCardComponent.prototype._displayDefaultProperties;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.editable;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataCardComponent.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvY29tcG9uZW50cy9jb250ZW50LW1ldGFkYXRhLWNhcmQvY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBNEIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU3RTtJQTZESSxzQ0FBb0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCOzs7OztRQTdDbEQsaUJBQVksR0FBWSxLQUFLLENBQUM7Ozs7O1FBTTlCLGtCQUFhLEdBQVcsSUFBSSxDQUFDOzs7OztRQVk3QixhQUFRLEdBQUcsS0FBSyxDQUFDOzs7OztRQU1qQixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBRU4sOEJBQXlCLEdBQVksSUFBSSxDQUFDO1FBZWxELGFBQVEsR0FBWSxLQUFLLENBQUM7SUFLMUIsQ0FBQztJQWZELHNCQUNJLGtFQUF3Qjs7OztRQUs1QjtZQUNJLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO1FBQzFDLENBQUM7UUFYRDs7V0FFRzs7Ozs7OztRQUNILFVBQzZCLEtBQWM7WUFDdkMsSUFBSSxDQUFDLHlCQUF5QixHQUFHLEtBQUssQ0FBQztZQUN2QyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTs7Ozs7SUFhRCxrREFBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFO1lBQzdELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO0lBQ0wsQ0FBQzs7OztJQUVELHVFQUFnQzs7O0lBQWhDO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUNwRCxDQUFDOzs7O0lBRUQsaURBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELHFEQUFjOzs7SUFBZDtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCw2REFBc0I7OztJQUF0QjtRQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pHLENBQUM7O2dCQXBGSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsdXVEQUFxRDtvQkFFckQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRTs7aUJBQ2pEOzs7O2dCQVJRLGNBQWM7Ozt1QkFXbEIsS0FBSzsrQkFNTCxLQUFLO2dDQU1MLEtBQUs7eUJBTUwsS0FBSzsyQkFNTCxLQUFLO3dCQU1MLEtBQUs7MkNBUUwsS0FBSzs7SUFzQ1YsbUNBQUM7Q0FBQSxBQXJGRCxJQXFGQztTQTlFWSw0QkFBNEI7Ozs7OztJQUVyQyw0Q0FDVzs7Ozs7O0lBS1gsb0RBQzhCOzs7Ozs7SUFLOUIscURBQzZCOzs7Ozs7SUFLN0IsOENBQ2U7Ozs7OztJQUtmLGdEQUNpQjs7Ozs7O0lBS2pCLDZDQUNjOzs7OztJQUVkLGlFQUFrRDs7SUFlbEQsZ0RBQTBCOztJQUUxQixnREFBa0I7Ozs7O0lBRU4sc0RBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29udGVudC1tZXRhZGF0YS1jYXJkJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jb250ZW50LW1ldGFkYXRhLWNhcmQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ2FkZi1jb250ZW50LW1ldGFkYXRhLWNhcmQnIH1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhQ2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgLyoqIChyZXF1aXJlZCkgVGhlIG5vZGUgZW50aXR5IHRvIGZldGNoIG1ldGFkYXRhIGFib3V0ICovXG4gICAgQElucHV0KClcbiAgICBub2RlOiBOb2RlO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIGRpc3BsYXlzL2hpZGVzIGVtcHR5IG1ldGFkYXRhXG4gICAgICogZmllbGRzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUVtcHR5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgZGlzcGxheXMgZGVzaXJlZCBhc3BlY3Qgd2hlbiBvcGVuIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAqIGZpZWxkcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlBc3BlY3Q6IHN0cmluZyA9IG51bGw7XG5cbiAgICAvKiogKHJlcXVpcmVkKSBOYW1lIG9mIHRoZSBtZXRhZGF0YSBwcmVzZXQsIHdoaWNoIGRlZmluZXMgYXNwZWN0c1xuICAgICAqIGFuZCB0aGVpciBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJlc2V0OiBzdHJpbmc7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgc2V0cyB0aGUgbWV0YWRhdGEgaW4gcmVhZCBvbmx5IG1vZGVcbiAgICAgKiBwcmV2ZW50aW5nIGNoYW5nZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICByZWFkT25seSA9IGZhbHNlO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIGFsbG93cyB0aGUgY29tcG9uZW50IHRvIGRpc3BsYXkgbW9yZVxuICAgICAqIHRoYW4gb25lIGFjY29yZGlvbiBhdCBhIHRpbWUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBtdWx0aSA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBfZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBkaXNwbGF5cy9oaWRlcyB0aGUgbWV0YWRhdGFcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGRpc3BsYXlEZWZhdWx0UHJvcGVydGllcyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vbkRpc3BsYXlEZWZhdWx0UHJvcGVydGllc0NoYW5nZSgpO1xuICAgIH1cblxuICAgIGdldCBkaXNwbGF5RGVmYXVsdFByb3BlcnRpZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGV4cGFuZGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmIChjaGFuZ2VzLmRpc3BsYXlBc3BlY3QgJiYgY2hhbmdlcy5kaXNwbGF5QXNwZWN0LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRpc3BsYXlEZWZhdWx0UHJvcGVydGllc0NoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgdG9nZ2xlRWRpdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9ICF0aGlzLmVkaXRhYmxlO1xuICAgIH1cblxuICAgIHRvZ2dsZUV4cGFuZGVkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gICAgfVxuXG4gICAgaGFzQWxsb3dhYmxlT3BlcmF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuaGFzQWxsb3dhYmxlT3BlcmF0aW9ucyh0aGlzLm5vZGUsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtLlVQREFURSk7XG4gICAgfVxufVxuIl19