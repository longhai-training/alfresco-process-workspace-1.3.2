/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild, ElementRef } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';
import { FormGroup, FormControl } from '@angular/forms';
import { tap, skip } from 'rxjs/operators';
import { SharedLinksApiService, NodesApiService, ContentService, RenditionsService } from '@alfresco/adf-core';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import moment from 'moment-es6';
var ShareDialogComponent = /** @class */ (function () {
    function ShareDialogComponent(sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.renditionService = renditionService;
        this.data = data;
        this.subscriptions = [];
        this.minDate = moment().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            'sharedUrl': new FormControl(''),
            'time': new FormControl({ value: '', disabled: false })
        });
    }
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.canUpdate) {
            this.form.controls['time'].disable();
        }
        this.subscriptions.push(this.form.valueChanges
            .pipe(skip(1), tap((/**
         * @param {?} updates
         * @return {?}
         */
        function (updates) {
            _this.updateNode(updates);
        })))
            .subscribe((/**
         * @param {?} updates
         * @return {?}
         */
        function (updates) { return _this.updateEntryExpiryDate(updates); })));
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            /** @type {?} */
            var properties = this.data.node.entry.properties;
            if (properties && !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
    };
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe; }));
    };
    /**
     * @return {?}
     */
    ShareDialogComponent.prototype.removeShare = /**
     * @return {?}
     */
    function () {
        this.deleteSharedLink(this.sharedId);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShareDialogComponent.prototype.onSlideShareChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    };
    Object.defineProperty(ShareDialogComponent.prototype, "canUpdate", {
        get: /**
         * @return {?}
         */
        function () {
            return this.contentService.hasAllowableOperations(this.data.node.entry, 'update');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    ShareDialogComponent.prototype.openConfirmationDialog = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClose().subscribe((/**
         * @param {?} deleteSharedLink
         * @return {?}
         */
        function (deleteSharedLink) {
            if (deleteSharedLink) {
                _this.deleteSharedLink(_this.sharedId);
            }
            else {
                _this.isFileShared = true;
            }
        }));
    };
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    ShareDialogComponent.prototype.createSharedLinks = /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId)
            .subscribe((/**
         * @param {?} sharedLink
         * @return {?}
         */
        function (sharedLink) {
            if (sharedLink.entry) {
                _this.sharedId = sharedLink.entry.id;
                _this.data.node.entry.properties['qshare:sharedId'] = _this.sharedId;
                _this.isDisabled = false;
                _this.isFileShared = true;
                _this.renditionService.generateRenditionForNode(_this.data.node.entry.id).subscribe((/**
                 * @return {?}
                 */
                function () { }));
                _this.updateForm();
            }
        }), (/**
         * @return {?}
         */
        function () {
            _this.isDisabled = false;
            _this.isFileShared = false;
        }));
    };
    /**
     * @private
     * @param {?} sharedId
     * @return {?}
     */
    ShareDialogComponent.prototype.deleteSharedLink = /**
     * @private
     * @param {?} sharedId
     * @return {?}
     */
    function (sharedId) {
        var _this = this;
        this.isDisabled = true;
        this.sharedLinksApiService.deleteSharedLink(sharedId).subscribe((/**
         * @return {?}
         */
        function () {
            _this.data.node.entry.properties['qshare:sharedId'] = null;
            _this.data.node.entry.properties['qshare:expiryDate'] = null;
            _this.dialogRef.close(false);
        }), (/**
         * @return {?}
         */
        function () {
            _this.isDisabled = false;
            _this.isFileShared = false;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ShareDialogComponent.prototype.updateForm = /**
     * @private
     * @return {?}
     */
    function () {
        var entry = this.data.node.entry;
        /** @type {?} */
        var expiryDate = entry.properties['qshare:expiryDate'];
        this.form.setValue({
            'sharedUrl': "" + this.baseShareUrl + this.sharedId,
            'time': expiryDate ? expiryDate : null
        });
    };
    /**
     * @private
     * @param {?} updates
     * @return {?}
     */
    ShareDialogComponent.prototype.updateNode = /**
     * @private
     * @param {?} updates
     * @return {?}
     */
    function (updates) {
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': updates.time ? updates.time.utc().format() : null
            }
        });
    };
    /**
     * @private
     * @param {?} updates
     * @return {?}
     */
    ShareDialogComponent.prototype.updateEntryExpiryDate = /**
     * @private
     * @param {?} updates
     * @return {?}
     */
    function (updates) {
        var properties = this.data.node.entry.properties;
        properties['qshare:expiryDate'] = updates.time
            ? updates.time.local()
            : null;
    };
    ShareDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-share-dialog',
                    template: "<div class=\"adf-share-link__dialog-content\">\n    <h1 data-automation-id=\"adf-share-dialog-title\"\n        class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </h1>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</h1>\n\n            <mat-slide-toggle\n                color=\"primary\"\n                data-automation-id=\"adf-share-toggle\"\n                [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\"\n                (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width\">\n                <input #sharedLinkInput\n                    data-automation-id=\"adf-share-link\"\n                    class=\"adf-share-link__input\"\n                    matInput\n                    cdkFocusInitial\n                    placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\"\n                    formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                    <mat-icon class=\"adf-input-action\" matSuffix\n                          [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\"\n                          [adf-clipboard] [target]=\"sharedLinkInput\">\n                        link\n                    </mat-icon>\n            </mat-form-field>\n\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</h1>\n            <mat-form-field class=\"adf-full-width\">\n                <mat-datetimepicker-toggle [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker type=\"datetime\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    matInput\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\">\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button\n            data-automation-id=\"adf-share-dialog-close\"\n            mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                    host: { 'class': 'adf-share-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__label{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87;flex:1 1 auto}.adf-share-link-dialog .adf-share-link__title{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87}.adf-share-link-dialog .adf-share-link__info{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;opacity:.87;opacity:.54;font-size:13px}.adf-share-link-dialog .adf-share-link--row{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.adf-share-link-dialog .adf-share-link__input{opacity:.54}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
                }] }
    ];
    /** @nocollapse */
    ShareDialogComponent.ctorParameters = function () { return [
        { type: SharedLinksApiService },
        { type: MatDialogRef },
        { type: MatDialog },
        { type: NodesApiService },
        { type: ContentService },
        { type: RenditionsService },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    ShareDialogComponent.propDecorators = {
        sharedLinkInput: [{ type: ViewChild, args: ['sharedLinkInput',] }]
    };
    return ShareDialogComponent;
}());
export { ShareDialogComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.subscriptions;
    /** @type {?} */
    ShareDialogComponent.prototype.minDate;
    /** @type {?} */
    ShareDialogComponent.prototype.sharedId;
    /** @type {?} */
    ShareDialogComponent.prototype.fileName;
    /** @type {?} */
    ShareDialogComponent.prototype.baseShareUrl;
    /** @type {?} */
    ShareDialogComponent.prototype.isFileShared;
    /** @type {?} */
    ShareDialogComponent.prototype.isDisabled;
    /** @type {?} */
    ShareDialogComponent.prototype.form;
    /** @type {?} */
    ShareDialogComponent.prototype.sharedLinkInput;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.sharedLinksApiService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.nodesApiService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.renditionService;
    /** @type {?} */
    ShareDialogComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,