/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit, OnDestroy } from '@angular/core';
import { MatCheckboxChange } from '@angular/material';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { FacetFieldBucket } from '../../facet-field-bucket.interface';
import { FacetField } from '../../facet-field.interface';
export declare class SearchFilterComponent implements OnInit, OnDestroy {
    queryBuilder: SearchQueryBuilderService;
    private searchService;
    private translationService;
    private DEFAULT_PAGE_SIZE;
    isAlive: boolean;
    /** All facet field items to be displayed in the component. These are updated according to the response.
     *  When a new search is performed, the already existing items are updated with the new bucket count values and
     *  the newly received items are added to the responseFacets.
     */
    responseFacets: FacetField[];
    private facetQueriesPageSize;
    facetQueriesLabel: string;
    facetExpanded: {
        'default': boolean;
    };
    displayResetButton: boolean;
    selectedBuckets: Array<{
        field: FacetField;
        bucket: FacetFieldBucket;
    }>;
    constructor(queryBuilder: SearchQueryBuilderService, searchService: SearchService, translationService: TranslationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateSelectedBuckets;
    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket): void;
    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket): void;
    canResetSelectedBuckets(field: FacetField): boolean;
    resetSelectedBuckets(field: FacetField): void;
    resetAllSelectedBuckets(): void;
    resetAll(): void;
    shouldExpand(field: FacetField): boolean;
    onDataLoaded(data: any): void;
    private parseFacets;
    private parseFacetItems;
    private parseFacetFields;
    private parseFacetIntervals;
    private parseFacetQueries;
    private getResponseBuckets;
    private getResponseQueryBuckets;
    private getCountValue;
    getBucketCountDisplay(bucket: FacetFieldBucket): string;
    private getFilterByMinCount;
    private getCorrespondingFilterQuery;
    private buildIntervalQuery;
    private findFacet;
    private findResponseFacet;
    private updateExistingBuckets;
    private getBucketFilterFunction;
}
