/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataSorting } from '@alfresco/adf-core';
import { ShareDataRow } from './share-data-row.model';
export class ShareDataTableAdapter {
    /**
     * @param {?} thumbnailService
     * @param {?} contentService
     * @param {?=} schema
     * @param {?=} sorting
     * @param {?=} sortingMode
     */
    constructor(thumbnailService, contentService, schema = [], sorting, sortingMode = 'client') {
        this.thumbnailService = thumbnailService;
        this.contentService = contentService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortingMode(value) {
        /** @type {?} */
        let newValue = (value || 'client').toLowerCase();
        if (newValue !== 'client' && newValue !== 'server') {
            newValue = 'client';
        }
        this._sortingMode = newValue;
    }
    /**
     * @return {?}
     */
    get sortingMode() {
        return this._sortingMode;
    }
    /**
     * @return {?}
     */
    getRows() {
        return this.rows;
    }
    // TODO: disable this api
    /**
     * @param {?} rows
     * @return {?}
     */
    setRows(rows) {
        this.rows = rows || [];
        this.sort();
    }
    /**
     * @return {?}
     */
    getColumns() {
        return this.columns;
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    setColumns(columns) {
        this.columns = columns || [];
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    getValue(row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        /** @type {?} */
        const dataRow = (/** @type {?} */ (row));
        /** @type {?} */
        const value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                /** @type {?} */
                const resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            /** @type {?} */
            const node = ((/** @type {?} */ (row))).node;
            if (node.entry.isFolder) {
                return this.getFolderIcon(node);
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.thumbnailService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                /** @type {?} */
                const mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.thumbnailService.getMimeTypeIcon(mimeType);
                }
            }
            return this.thumbnailService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                /** @type {?} */
                const resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    }
    /**
     * @return {?}
     */
    getSorting() {
        return this.sorting;
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    setSorting(sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    }
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    sort(key, direction) {
        /** @type {?} */
        const sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    setFilter(filter) {
        this.filter = filter;
    }
    /**
     * @param {?} resolver
     * @return {?}
     */
    setImageResolver(resolver) {
        this.imageResolver = resolver;
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getFolderIcon(node) {
        if (this.isSmartFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('smartFolder');
        }
        else if (this.isRuleFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('ruleFolder');
        }
        else if (this.isALinkFolder(node)) {
            return this.thumbnailService.getMimeTypeIcon('linkFolder');
        }
        else {
            return this.thumbnailService.getMimeTypeIcon('folder');
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isSmartFolder(node) {
        /** @type {?} */
        const nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isRuleFolder(node) {
        /** @type {?} */
        const nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('rule:rules') > -1 ||
            (nodeAspects.indexOf('rule:rules') > -1);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isALinkFolder(node) {
        /** @type {?} */
        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;
        return nodeType === 'app:folderlink';
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getNodeAspectNames(node) {
        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    sortRows(rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        /** @type {?} */
        const options = {};
        if (sorting && sorting.key && rows && rows.length > 0) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                /** @type {?} */
                let left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                let right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            }));
        }
    }
    /**
     * @param {?} nodePaging
     * @param {?=} merge
     * @return {?}
     */
    loadPage(nodePaging, merge = false) {
        /** @type {?} */
        let shareDataRows = [];
        if (nodePaging && nodePaging.list) {
            /** @type {?} */
            const nodeEntries = nodePaging.list.entries;
            if (nodeEntries && nodeEntries.length > 0) {
                shareDataRows = nodeEntries.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService)));
                if (this.filter) {
                    shareDataRows = shareDataRows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    // Sort by first sortable or just first column
                    if (this.columns && this.columns.length > 0) {
                        /** @type {?} */
                        const sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(shareDataRows, sorting);
                        }
                        else {
                            /** @type {?} */
                            const sortable = this.columns.filter((/**
                             * @param {?} c
                             * @return {?}
                             */
                            (c) => c.sortable));
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge) {
            /** @type {?} */
            const listPrunedDuplicate = shareDataRows.filter((/**
             * @param {?} elementToFilter
             * @return {?}
             */
            (elementToFilter) => {
                /** @type {?} */
                const isPresent = this.rows.find((/**
                 * @param {?} currentRow
                 * @return {?}
                 */
                (currentRow) => {
                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;
                }));
                return !isPresent;
            }));
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = shareDataRows;
        }
    }
}
if (false) {
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_ROW_NOT_FOUND;
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_COL_NOT_FOUND;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype._sortingMode;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.sorting;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.rows;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.filter;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.imageResolver;
    /** @type {?} */
    ShareDataTableAdapter.prototype.thumbnails;
    /** @type {?} */
    ShareDataTableAdapter.prototype.permissionsStyle;
    /** @type {?} */
    ShareDataTableAdapter.prototype.selectedRow;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,