/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectUtils } from '@alfresco/adf-core';
export class ShareDataRow {
    /**
     * @param {?} obj
     * @param {?} contentService
     * @param {?} permissionsStyle
     * @param {?=} thumbnailService
     */
    constructor(obj, contentService, permissionsStyle, thumbnailService) {
        this.obj = obj;
        this.contentService = contentService;
        this.permissionsStyle = permissionsStyle;
        this.thumbnailService = thumbnailService;
        this.cache = {};
        this.isSelected = false;
        this.cssClass = '';
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);
        if (permissionsStyle) {
            this.cssClass = this.getPermissionClass(obj);
        }
    }
    /**
     * @return {?}
     */
    get node() {
        return this.obj;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set node(value) {
        this.obj = value;
        this.cache = {};
    }
    /**
     * @param {?} nodeEntity
     * @return {?}
     */
    getPermissionClass(nodeEntity) {
        /** @type {?} */
        let permissionsClasses = '';
        this.permissionsStyle.forEach((/**
         * @param {?} currentPermissionsStyle
         * @return {?}
         */
        (currentPermissionsStyle) => {
            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {
                if (this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {
                    permissionsClasses += ` ${currentPermissionsStyle.css}`;
                }
            }
        }));
        return permissionsClasses;
    }
    /**
     * @private
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    applyPermissionStyleToFile(node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFile && node.isFile);
    }
    /**
     * @private
     * @param {?} node
     * @param {?} currentPermissionsStyle
     * @return {?}
     */
    applyPermissionStyleToFolder(node, currentPermissionsStyle) {
        return (currentPermissionsStyle.isFolder && node.isFolder);
    }
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    isFolderAndHasPermissionToUpload(nodeEntry) {
        return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');
    }
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    isFolder(nodeEntry) {
        return nodeEntry.entry && nodeEntry.entry.isFolder;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    cacheValue(key, value) {
        this.cache[key] = value;
        return value;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ObjectUtils.getValue(this.obj.entry, key);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    imageErrorResolver(event) {
        if (this.obj.entry.content) {
            return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    hasValue(key) {
        return this.getValue(key) !== undefined;
    }
}
ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
if (false) {
    /** @type {?} */
    ShareDataRow.ERR_OBJECT_NOT_FOUND;
    /** @type {?} */
    ShareDataRow.prototype.cache;
    /** @type {?} */
    ShareDataRow.prototype.isSelected;
    /** @type {?} */
    ShareDataRow.prototype.isDropTarget;
    /** @type {?} */
    ShareDataRow.prototype.cssClass;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.obj;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.permissionsStyle;
    /**
     * @type {?}
     * @private
     */
    ShareDataRow.prototype.thumbnailService;
}
//# sourceMappingURL=data:application/json;base64,