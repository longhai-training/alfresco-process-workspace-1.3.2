/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { SearchRequest, SiteMemberPaging } from '@alfresco/js-api';
import { Injectable } from '@angular/core';
import { Observable, from, of, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class CustomResourcesService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.CREATE_PERMISSION = 'create';
    }
    /**
     * Gets files recently accessed by a user.
     * @param {?} personId ID of the user
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} filters Specifies additional filters to apply (joined with **AND**)
     * @return {?} List of nodes for the recently used files
     */
    getRecentFiles(personId, pagination, filters) {
        /** @type {?} */
        const defaultFilter = [
            'TYPE:"content"',
            '-PNAME:"0/wiki"',
            '-TYPE:"app:filelink"',
            '-TYPE:"cm:thumbnail"',
            '-TYPE:"cm:failedThumbnail"',
            '-TYPE:"cm:rating"',
            '-TYPE:"dl:dataList"',
            '-TYPE:"dl:todoList"',
            '-TYPE:"dl:issue"',
            '-TYPE:"dl:contact"',
            '-TYPE:"dl:eventAgenda"',
            '-TYPE:"dl:event"',
            '-TYPE:"dl:task"',
            '-TYPE:"dl:simpletask"',
            '-TYPE:"dl:meetingAgenda"',
            '-TYPE:"dl:location"',
            '-TYPE:"fm:topic"',
            '-TYPE:"fm:post"',
            '-TYPE:"ia:calendarEvent"',
            '-TYPE:"lnk:link"'
        ];
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.apiService.peopleApi.getPerson(personId)
                .then((/**
             * @param {?} person
             * @return {?}
             */
            (person) => {
                /** @type {?} */
                const username = person.entry.id;
                /** @type {?} */
                const filterQueries = [
                    { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },
                    { query: `cm:modifier:${username} OR cm:creator:${username}` },
                    { query: defaultFilter.join(' AND ') }
                ];
                if (filters && filters.length > 0) {
                    filterQueries.push({
                        query: filters.join()
                    });
                }
                /** @type {?} */
                const query = new SearchRequest({
                    query: {
                        query: '*',
                        language: 'afts'
                    },
                    filterQueries,
                    include: ['path', 'properties', 'allowableOperations'],
                    sort: [{
                            type: 'FIELD',
                            field: 'cm:modified',
                            ascending: false
                        }],
                    paging: {
                        maxItems: pagination.maxItems,
                        skipCount: pagination.skipCount
                    }
                });
                return this.apiService.searchApi.search(query)
                    .then((/**
                 * @param {?} searchResult
                 * @return {?}
                 */
                (searchResult) => {
                    observer.next(searchResult);
                    observer.complete();
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    observer.error(err);
                    observer.complete();
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                observer.error(err);
                observer.complete();
            }));
        })).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets favorite files for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of favorite files
     */
    loadFavorites(pagination, includeFields = []) {
        /** @type {?} */
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        const options = {
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount,
            where: '(EXISTS(target/file) OR EXISTS(target/folder))',
            include: includeFieldsRequest
        };
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.apiService.favoritesApi.getFavorites('-me-', options)
                .then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                /** @type {?} */
                const page = {
                    list: {
                        entries: result.list.entries
                            .map((/**
                         * @param {?} __0
                         * @return {?}
                         */
                        ({ entry: { target } }) => ({
                            entry: target.file || target.folder
                        })))
                            .map((/**
                         * @param {?} __0
                         * @return {?}
                         */
                        ({ entry }) => {
                            entry.properties = {
                                'cm:title': entry.title,
                                'cm:description': entry.description
                            };
                            return { entry };
                        })),
                        pagination: result.list.pagination
                    }
                };
                observer.next(page);
                observer.complete();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                observer.error(err);
                observer.complete();
            }));
        })).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets sites that the current user is a member of.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    loadMemberSites(pagination) {
        /** @type {?} */
        const options = {
            include: ['properties'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.apiService.peopleApi.listSiteMembershipsForPerson('-me-', options)
                .then((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                /** @type {?} */
                const page = new SiteMemberPaging({
                    list: {
                        entries: result.list.entries
                            .map((/**
                         * @param {?} __0
                         * @return {?}
                         */
                        ({ entry: { site } }) => {
                            site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];
                            site.name = site.name || site.title;
                            return {
                                entry: site
                            };
                        })),
                        pagination: result.list.pagination
                    }
                });
                observer.next(page);
                observer.complete();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                observer.error(err);
                observer.complete();
            }));
        })).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets all sites in the repository.
     * @param {?} pagination Specifies how to paginate the results
     * @return {?} List of sites
     */
    loadSites(pagination) {
        /** @type {?} */
        const options = {
            include: ['properties', 'aspectNames'],
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this.apiService.sitesApi.getSites(options)
                .then((/**
             * @param {?} page
             * @return {?}
             */
            (page) => {
                page.list.entries.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                ({ entry }) => {
                    entry.name = entry.name || entry.title;
                    return { entry };
                }));
                observer.next(page);
                observer.complete();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                observer.error(err);
                observer.complete();
            }));
        })).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets all items currently in the trash.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of deleted items
     */
    loadTrashcan(pagination, includeFields = []) {
        /** @type {?} */
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        const options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.apiService.nodesApi.getDeletedNodes(options))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Gets shared links for the current user.
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of shared links
     */
    loadSharedLinks(pagination, includeFields = []) {
        /** @type {?} */
        const includeFieldsRequest = this.getIncludesFields(includeFields);
        /** @type {?} */
        const options = {
            include: includeFieldsRequest,
            maxItems: pagination.maxItems,
            skipCount: pagination.skipCount
        };
        return from(this.apiService.sharedLinksApi.findSharedLinks(options))
            .pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err))));
    }
    /**
     * Is the folder ID one of the well-known aliases?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is a well-known name, false otherwise
     */
    isCustomSource(folderId) {
        /** @type {?} */
        let isCustomSources = false;
        /** @type {?} */
        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];
        if (sources.indexOf(folderId) > -1) {
            isCustomSources = true;
        }
        return isCustomSources;
    }
    /**
     * Is the folder ID a "-my", "-root-", or "-shared-" alias?
     * @param {?} folderId Folder ID name to check
     * @return {?} True if the ID is one of the supported sources, false otherwise
     */
    isSupportedSource(folderId) {
        /** @type {?} */
        let isSupportedSources = false;
        /** @type {?} */
        const sources = ['-my-', '-root-', '-shared-'];
        if (sources.indexOf(folderId) > -1) {
            isSupportedSources = true;
        }
        return isSupportedSources;
    }
    /**
     * Gets a folder's contents.
     * @param {?} nodeId ID of the target folder node
     * @param {?} pagination Specifies how to paginate the results
     * @param {?=} includeFields List of data field names to include in the results
     * @return {?} List of items contained in the folder
     */
    loadFolderByNodeId(nodeId, pagination, includeFields = []) {
        if (nodeId === '-trashcan-') {
            return this.loadTrashcan(pagination, includeFields);
        }
        else if (nodeId === '-sharedlinks-') {
            return this.loadSharedLinks(pagination, includeFields);
        }
        else if (nodeId === '-sites-') {
            return this.loadSites(pagination);
        }
        else if (nodeId === '-mysites-') {
            return this.loadMemberSites(pagination);
        }
        else if (nodeId === '-favorites-') {
            return this.loadFavorites(pagination, includeFields);
        }
        else if (nodeId === '-recent-') {
            return this.getRecentFiles('-me-', pagination);
        }
    }
    // TODO: remove it from here
    /**
     * Gets the contents of one of the well-known aliases in the form of node ID strings.
     * @param {?} nodeId ID of the target folder node
     * @param {?=} pagination Specifies how to paginate the results
     * @return {?} List of node IDs
     */
    getCorrespondingNodeIds(nodeId, pagination = {}) {
        if (this.isCustomSource(nodeId)) {
            return this.loadFolderByNodeId(nodeId, pagination)
                .pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                return result.list.entries.map((/**
                 * @param {?} node
                 * @return {?}
                 */
                (node) => this.getIdFromEntry(node, nodeId)));
            })));
        }
        else if (nodeId) {
            // cases when nodeId is '-my-', '-root-' or '-shared-'
            return from(this.apiService.nodesApi.getNode(nodeId)
                .then((/**
             * @param {?} node
             * @return {?}
             */
            (node) => [node.entry.id])));
        }
        return of([]);
    }
    /**
     * Chooses the correct ID for a node entry.
     * @param {?} node Node object
     * @param {?} nodeId ID of the node object
     * @return {?} ID value
     */
    getIdFromEntry(node, nodeId) {
        if (nodeId === '-sharedlinks-') {
            return node.entry.nodeId;
        }
        else if (nodeId === '-sites-' || nodeId === '-mysites-') {
            return node.entry.guid;
        }
        else if (nodeId === '-favorites-') {
            return node.entry.targetGuid;
        }
        else {
            return node.entry.id;
        }
    }
    /**
     * Does the well-known alias have a corresponding node ID?
     * @param {?} nodeId Node to check
     * @return {?} True if the alias has a corresponding node ID, false otherwise
     */
    hasCorrespondingNodeIds(nodeId) {
        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);
    }
    /**
     * @private
     * @param {?} includeFields
     * @return {?}
     */
    getIncludesFields(includeFields) {
        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((/**
         * @param {?} element
         * @param {?} index
         * @param {?} array
         * @return {?}
         */
        (element, index, array) => index === array.indexOf(element)));
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
CustomResourcesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CustomResourcesService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ CustomResourcesService.ngInjectableDef = i0.defineInjectable({ factory: function CustomResourcesService_Factory() { return new CustomResourcesService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService)); }, token: CustomResourcesService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CustomResourcesService.prototype.CREATE_PERMISSION;
    /**
     * @type {?}
     * @private
     */
    CustomResourcesService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    CustomResourcesService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXJlc291cmNlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiZG9jdW1lbnQtbGlzdC9zZXJ2aWNlcy9jdXN0b20tcmVzb3VyY2VzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUNILGtCQUFrQixFQUNsQixVQUFVLEVBRWIsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixPQUFPLEVBS0gsYUFBYSxFQUdiLGdCQUFnQixFQUVuQixNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFLakQsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7SUFJL0IsWUFBb0IsVUFBOEIsRUFDOUIsVUFBc0I7UUFEdEIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUhsQyxzQkFBaUIsR0FBRyxRQUFRLENBQUM7SUFJckMsQ0FBQzs7Ozs7Ozs7SUFTRCxjQUFjLENBQUMsUUFBZ0IsRUFBRSxVQUEyQixFQUFFLE9BQWtCOztjQUN0RSxhQUFhLEdBQUc7WUFDbEIsZ0JBQWdCO1lBQ2hCLGlCQUFpQjtZQUNqQixzQkFBc0I7WUFDdEIsc0JBQXNCO1lBQ3RCLDRCQUE0QjtZQUM1QixtQkFBbUI7WUFDbkIscUJBQXFCO1lBQ3JCLHFCQUFxQjtZQUNyQixrQkFBa0I7WUFDbEIsb0JBQW9CO1lBQ3BCLHdCQUF3QjtZQUN4QixrQkFBa0I7WUFDbEIsaUJBQWlCO1lBQ2pCLHVCQUF1QjtZQUN2QiwwQkFBMEI7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MjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICBMb2dTZXJ2aWNlLFxuICAgIFBhZ2luYXRpb25Nb2RlbFxufSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5pbXBvcnQge1xuICAgIE5vZGVQYWdpbmcsXG4gICAgUGVyc29uRW50cnksXG4gICAgU2l0ZVBhZ2luZyxcbiAgICBEZWxldGVkTm9kZXNQYWdpbmcsXG4gICAgU2VhcmNoUmVxdWVzdCxcbiAgICBTaGFyZWRMaW5rUGFnaW5nLFxuICAgIEZhdm9yaXRlUGFnaW5nLFxuICAgIFNpdGVNZW1iZXJQYWdpbmcsXG4gICAgU2l0ZVJvbGVQYWdpbmdcbn0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbVJlc291cmNlc1NlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBDUkVBVEVfUEVSTUlTU0lPTiA9ICdjcmVhdGUnO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBmaWxlcyByZWNlbnRseSBhY2Nlc3NlZCBieSBhIHVzZXIuXG4gICAgICogQHBhcmFtIHBlcnNvbklkIElEIG9mIHRoZSB1c2VyXG4gICAgICogQHBhcmFtIHBhZ2luYXRpb24gU3BlY2lmaWVzIGhvdyB0byBwYWdpbmF0ZSB0aGUgcmVzdWx0c1xuICAgICAqIEBwYXJhbSBmaWx0ZXJzIFNwZWNpZmllcyBhZGRpdGlvbmFsIGZpbHRlcnMgdG8gYXBwbHkgKGpvaW5lZCB3aXRoICoqQU5EKiopXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBub2RlcyBmb3IgdGhlIHJlY2VudGx5IHVzZWQgZmlsZXNcbiAgICAgKi9cbiAgICBnZXRSZWNlbnRGaWxlcyhwZXJzb25JZDogc3RyaW5nLCBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWwsIGZpbHRlcnM/OiBzdHJpbmdbXSk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuICAgICAgICBjb25zdCBkZWZhdWx0RmlsdGVyID0gW1xuICAgICAgICAgICAgJ1RZUEU6XCJjb250ZW50XCInLFxuICAgICAgICAgICAgJy1QTkFNRTpcIjAvd2lraVwiJyxcbiAgICAgICAgICAgICctVFlQRTpcImFwcDpmaWxlbGlua1wiJyxcbiAgICAgICAgICAgICctVFlQRTpcImNtOnRodW1ibmFpbFwiJyxcbiAgICAgICAgICAgICctVFlQRTpcImNtOmZhaWxlZFRodW1ibmFpbFwiJyxcbiAgICAgICAgICAgICctVFlQRTpcImNtOnJhdGluZ1wiJyxcbiAgICAgICAgICAgICctVFlQRTpcImRsOmRhdGFMaXN0XCInLFxuICAgICAgICAgICAgJy1UWVBFOlwiZGw6dG9kb0xpc3RcIicsXG4gICAgICAgICAgICAnLVRZUEU6XCJkbDppc3N1ZVwiJyxcbiAgICAgICAgICAgICctVFlQRTpcImRsOmNvbnRhY3RcIicsXG4gICAgICAgICAgICAnLVRZUEU6XCJkbDpldmVudEFnZW5kYVwiJyxcbiAgICAgICAgICAgICctVFlQRTpcImRsOmV2ZW50XCInLFxuICAgICAgICAgICAgJy1UWVBFOlwiZGw6dGFza1wiJyxcbiAgICAgICAgICAgICctVFlQRTpcImRsOnNpbXBsZXRhc2tcIicsXG4gICAgICAgICAgICAnLVRZUEU6XCJkbDptZWV0aW5nQWdlbmRhXCInLFxuICAgICAgICAgICAgJy1UWVBFOlwiZGw6bG9jYXRpb25cIicsXG4gICAgICAgICAgICAnLVRZUEU6XCJmbTp0b3BpY1wiJyxcbiAgICAgICAgICAgICctVFlQRTpcImZtOnBvc3RcIicsXG4gICAgICAgICAgICAnLVRZUEU6XCJpYTpjYWxlbmRhckV2ZW50XCInLFxuICAgICAgICAgICAgJy1UWVBFOlwibG5rOmxpbmtcIidcbiAgICAgICAgXTtcblxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaVNlcnZpY2UucGVvcGxlQXBpLmdldFBlcnNvbihwZXJzb25JZClcbiAgICAgICAgICAgICAgICAudGhlbigocGVyc29uOiBQZXJzb25FbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcm5hbWUgPSBwZXJzb24uZW50cnkuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJRdWVyaWVzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcXVlcnk6IGBjbTptb2RpZmllZDpbTk9XL0RBWS0zMERBWVMgVE8gTk9XL0RBWSsxREFZXWAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHF1ZXJ5OiBgY206bW9kaWZpZXI6JHt1c2VybmFtZX0gT1IgY206Y3JlYXRvcjoke3VzZXJuYW1lfWAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHF1ZXJ5OiBkZWZhdWx0RmlsdGVyLmpvaW4oJyBBTkQgJykgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcnMgJiYgZmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyUXVlcmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IGZpbHRlcnMuam9pbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5OiBTZWFyY2hSZXF1ZXN0ID0gbmV3IFNlYXJjaFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiAnYWZ0cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclF1ZXJpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZTogWydwYXRoJywgJ3Byb3BlcnRpZXMnLCAnYWxsb3dhYmxlT3BlcmF0aW9ucyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnQ6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdGSUVMRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnY206bW9kaWZpZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2NlbmRpbmc6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEl0ZW1zOiBwYWdpbmF0aW9uLm1heEl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHBhZ2luYXRpb24uc2tpcENvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcGlTZXJ2aWNlLnNlYXJjaEFwaS5zZWFyY2gocXVlcnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHNlYXJjaFJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChzZWFyY2hSZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnBpcGUoY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGZhdm9yaXRlIGZpbGVzIGZvciB0aGUgY3VycmVudCB1c2VyLlxuICAgICAqIEBwYXJhbSBwYWdpbmF0aW9uIFNwZWNpZmllcyBob3cgdG8gcGFnaW5hdGUgdGhlIHJlc3VsdHNcbiAgICAgKiBAcGFyYW0gaW5jbHVkZUZpZWxkcyBMaXN0IG9mIGRhdGEgZmllbGQgbmFtZXMgdG8gaW5jbHVkZSBpbiB0aGUgcmVzdWx0c1xuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgZmF2b3JpdGUgZmlsZXNcbiAgICAgKi9cbiAgICBsb2FkRmF2b3JpdGVzKHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCwgaW5jbHVkZUZpZWxkczogc3RyaW5nW10gPSBbXSk6IE9ic2VydmFibGU8Tm9kZVBhZ2luZz4ge1xuICAgICAgICBjb25zdCBpbmNsdWRlRmllbGRzUmVxdWVzdCA9IHRoaXMuZ2V0SW5jbHVkZXNGaWVsZHMoaW5jbHVkZUZpZWxkcyk7XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1heEl0ZW1zOiBwYWdpbmF0aW9uLm1heEl0ZW1zLFxuICAgICAgICAgICAgc2tpcENvdW50OiBwYWdpbmF0aW9uLnNraXBDb3VudCxcbiAgICAgICAgICAgIHdoZXJlOiAnKEVYSVNUUyh0YXJnZXQvZmlsZSkgT1IgRVhJU1RTKHRhcmdldC9mb2xkZXIpKScsXG4gICAgICAgICAgICBpbmNsdWRlOiBpbmNsdWRlRmllbGRzUmVxdWVzdFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBpU2VydmljZS5mYXZvcml0ZXNBcGkuZ2V0RmF2b3JpdGVzKCctbWUtJywgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0OiBGYXZvcml0ZVBhZ2luZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZTogRmF2b3JpdGVQYWdpbmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzOiByZXN1bHQubGlzdC5lbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh7IGVudHJ5OiB7IHRhcmdldCB9IH06IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeTogdGFyZ2V0LmZpbGUgfHwgdGFyZ2V0LmZvbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh7IGVudHJ5IH06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbTp0aXRsZSc6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY206ZGVzY3JpcHRpb24nOiBlbnRyeS5kZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZW50cnkgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiByZXN1bHQubGlzdC5wYWdpbmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChwYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSkucGlwZShjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgc2l0ZXMgdGhhdCB0aGUgY3VycmVudCB1c2VyIGlzIGEgbWVtYmVyIG9mLlxuICAgICAqIEBwYXJhbSBwYWdpbmF0aW9uIFNwZWNpZmllcyBob3cgdG8gcGFnaW5hdGUgdGhlIHJlc3VsdHNcbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIHNpdGVzXG4gICAgICovXG4gICAgbG9hZE1lbWJlclNpdGVzKHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCk6IE9ic2VydmFibGU8U2l0ZU1lbWJlclBhZ2luZz4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgaW5jbHVkZTogWydwcm9wZXJ0aWVzJ10sXG4gICAgICAgICAgICBtYXhJdGVtczogcGFnaW5hdGlvbi5tYXhJdGVtcyxcbiAgICAgICAgICAgIHNraXBDb3VudDogcGFnaW5hdGlvbi5za2lwQ291bnRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwaVNlcnZpY2UucGVvcGxlQXBpLmxpc3RTaXRlTWVtYmVyc2hpcHNGb3JQZXJzb24oJy1tZS0nLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQ6IFNpdGVSb2xlUGFnaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlOiBTaXRlTWVtYmVyUGFnaW5nID0gbmV3IFNpdGVNZW1iZXJQYWdpbmcoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXM6IHJlc3VsdC5saXN0LmVudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHsgZW50cnk6IHsgc2l0ZSB9IH06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGUuYWxsb3dhYmxlT3BlcmF0aW9ucyA9IHNpdGUuYWxsb3dhYmxlT3BlcmF0aW9ucyA/IHNpdGUuYWxsb3dhYmxlT3BlcmF0aW9ucyA6IFt0aGlzLkNSRUFURV9QRVJNSVNTSU9OXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlLm5hbWUgPSBzaXRlLm5hbWUgfHwgc2l0ZS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeTogc2l0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogcmVzdWx0Lmxpc3QucGFnaW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5waXBlKGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgc2l0ZXMgaW4gdGhlIHJlcG9zaXRvcnkuXG4gICAgICogQHBhcmFtIHBhZ2luYXRpb24gU3BlY2lmaWVzIGhvdyB0byBwYWdpbmF0ZSB0aGUgcmVzdWx0c1xuICAgICAqIEByZXR1cm5zIExpc3Qgb2Ygc2l0ZXNcbiAgICAgKi9cbiAgICBsb2FkU2l0ZXMocGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsKTogT2JzZXJ2YWJsZTxOb2RlUGFnaW5nPiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpbmNsdWRlOiBbJ3Byb3BlcnRpZXMnLCAnYXNwZWN0TmFtZXMnXSxcbiAgICAgICAgICAgIG1heEl0ZW1zOiBwYWdpbmF0aW9uLm1heEl0ZW1zLFxuICAgICAgICAgICAgc2tpcENvdW50OiBwYWdpbmF0aW9uLnNraXBDb3VudFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBpU2VydmljZS5zaXRlc0FwaS5nZXRTaXRlcyhvcHRpb25zKVxuICAgICAgICAgICAgICAgIC50aGVuKChwYWdlOiBTaXRlUGFnaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlLmxpc3QuZW50cmllcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHsgZW50cnkgfTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5Lm5hbWUgPSBlbnRyeS5uYW1lIHx8IGVudHJ5LnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBlbnRyeSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5waXBlKGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgaXRlbXMgY3VycmVudGx5IGluIHRoZSB0cmFzaC5cbiAgICAgKiBAcGFyYW0gcGFnaW5hdGlvbiBTcGVjaWZpZXMgaG93IHRvIHBhZ2luYXRlIHRoZSByZXN1bHRzXG4gICAgICogQHBhcmFtIGluY2x1ZGVGaWVsZHMgTGlzdCBvZiBkYXRhIGZpZWxkIG5hbWVzIHRvIGluY2x1ZGUgaW4gdGhlIHJlc3VsdHNcbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIGRlbGV0ZWQgaXRlbXNcbiAgICAgKi9cbiAgICBsb2FkVHJhc2hjYW4ocGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsLCBpbmNsdWRlRmllbGRzOiBzdHJpbmdbXSA9IFtdKTogT2JzZXJ2YWJsZTxEZWxldGVkTm9kZXNQYWdpbmc+IHtcbiAgICAgICAgY29uc3QgaW5jbHVkZUZpZWxkc1JlcXVlc3QgPSB0aGlzLmdldEluY2x1ZGVzRmllbGRzKGluY2x1ZGVGaWVsZHMpO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpbmNsdWRlOiBpbmNsdWRlRmllbGRzUmVxdWVzdCxcbiAgICAgICAgICAgIG1heEl0ZW1zOiBwYWdpbmF0aW9uLm1heEl0ZW1zLFxuICAgICAgICAgICAgc2tpcENvdW50OiBwYWdpbmF0aW9uLnNraXBDb3VudFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXBpU2VydmljZS5ub2Rlc0FwaS5nZXREZWxldGVkTm9kZXMob3B0aW9ucykpXG4gICAgICAgICAgICAucGlwZShjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSkpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBzaGFyZWQgbGlua3MgZm9yIHRoZSBjdXJyZW50IHVzZXIuXG4gICAgICogQHBhcmFtIHBhZ2luYXRpb24gU3BlY2lmaWVzIGhvdyB0byBwYWdpbmF0ZSB0aGUgcmVzdWx0c1xuICAgICAqIEBwYXJhbSBpbmNsdWRlRmllbGRzIExpc3Qgb2YgZGF0YSBmaWVsZCBuYW1lcyB0byBpbmNsdWRlIGluIHRoZSByZXN1bHRzXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBzaGFyZWQgbGlua3NcbiAgICAgKi9cbiAgICBsb2FkU2hhcmVkTGlua3MocGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsLCBpbmNsdWRlRmllbGRzOiBzdHJpbmdbXSA9IFtdKTogT2JzZXJ2YWJsZTxTaGFyZWRMaW5rUGFnaW5nPiB7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVGaWVsZHNSZXF1ZXN0ID0gdGhpcy5nZXRJbmNsdWRlc0ZpZWxkcyhpbmNsdWRlRmllbGRzKTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgaW5jbHVkZTogaW5jbHVkZUZpZWxkc1JlcXVlc3QsXG4gICAgICAgICAgICBtYXhJdGVtczogcGFnaW5hdGlvbi5tYXhJdGVtcyxcbiAgICAgICAgICAgIHNraXBDb3VudDogcGFnaW5hdGlvbi5za2lwQ291bnRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLmFwaVNlcnZpY2Uuc2hhcmVkTGlua3NBcGkuZmluZFNoYXJlZExpbmtzKG9wdGlvbnMpKVxuICAgICAgICAgICAgLnBpcGUoY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJcyB0aGUgZm9sZGVyIElEIG9uZSBvZiB0aGUgd2VsbC1rbm93biBhbGlhc2VzP1xuICAgICAqIEBwYXJhbSBmb2xkZXJJZCBGb2xkZXIgSUQgbmFtZSB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIElEIGlzIGEgd2VsbC1rbm93biBuYW1lLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0N1c3RvbVNvdXJjZShmb2xkZXJJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpc0N1c3RvbVNvdXJjZXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgc291cmNlcyA9IFsnLXRyYXNoY2FuLScsICctc2hhcmVkbGlua3MtJywgJy1zaXRlcy0nLCAnLW15c2l0ZXMtJywgJy1mYXZvcml0ZXMtJywgJy1yZWNlbnQtJ107XG5cbiAgICAgICAgaWYgKHNvdXJjZXMuaW5kZXhPZihmb2xkZXJJZCkgPiAtMSkge1xuICAgICAgICAgICAgaXNDdXN0b21Tb3VyY2VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0N1c3RvbVNvdXJjZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXMgdGhlIGZvbGRlciBJRCBhIFwiLW15XCIsIFwiLXJvb3QtXCIsIG9yIFwiLXNoYXJlZC1cIiBhbGlhcz9cbiAgICAgKiBAcGFyYW0gZm9sZGVySWQgRm9sZGVyIElEIG5hbWUgdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBJRCBpcyBvbmUgb2YgdGhlIHN1cHBvcnRlZCBzb3VyY2VzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc1N1cHBvcnRlZFNvdXJjZShmb2xkZXJJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpc1N1cHBvcnRlZFNvdXJjZXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgc291cmNlcyA9IFsnLW15LScsICctcm9vdC0nLCAnLXNoYXJlZC0nXTtcblxuICAgICAgICBpZiAoc291cmNlcy5pbmRleE9mKGZvbGRlcklkKSA+IC0xKSB7XG4gICAgICAgICAgICBpc1N1cHBvcnRlZFNvdXJjZXMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkU291cmNlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgZm9sZGVyJ3MgY29udGVudHMuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IGZvbGRlciBub2RlXG4gICAgICogQHBhcmFtIHBhZ2luYXRpb24gU3BlY2lmaWVzIGhvdyB0byBwYWdpbmF0ZSB0aGUgcmVzdWx0c1xuICAgICAqIEBwYXJhbSBpbmNsdWRlRmllbGRzIExpc3Qgb2YgZGF0YSBmaWVsZCBuYW1lcyB0byBpbmNsdWRlIGluIHRoZSByZXN1bHRzXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBpdGVtcyBjb250YWluZWQgaW4gdGhlIGZvbGRlclxuICAgICAqL1xuICAgIGxvYWRGb2xkZXJCeU5vZGVJZChub2RlSWQ6IHN0cmluZywgcGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsLCBpbmNsdWRlRmllbGRzOiBzdHJpbmdbXSA9IFtdKTogYW55IHtcbiAgICAgICAgaWYgKG5vZGVJZCA9PT0gJy10cmFzaGNhbi0nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkVHJhc2hjYW4ocGFnaW5hdGlvbiwgaW5jbHVkZUZpZWxkcyk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZUlkID09PSAnLXNoYXJlZGxpbmtzLScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRTaGFyZWRMaW5rcyhwYWdpbmF0aW9uLCBpbmNsdWRlRmllbGRzKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlSWQgPT09ICctc2l0ZXMtJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZFNpdGVzKHBhZ2luYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVJZCA9PT0gJy1teXNpdGVzLScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRNZW1iZXJTaXRlcyhwYWdpbmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlSWQgPT09ICctZmF2b3JpdGVzLScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRGYXZvcml0ZXMocGFnaW5hdGlvbiwgaW5jbHVkZUZpZWxkcyk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZUlkID09PSAnLXJlY2VudC0nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWNlbnRGaWxlcygnLW1lLScsIHBhZ2luYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlIGl0IGZyb20gaGVyZVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY29udGVudHMgb2Ygb25lIG9mIHRoZSB3ZWxsLWtub3duIGFsaWFzZXMgaW4gdGhlIGZvcm0gb2Ygbm9kZSBJRCBzdHJpbmdzLlxuICAgICAqIEBwYXJhbSBub2RlSWQgSUQgb2YgdGhlIHRhcmdldCBmb2xkZXIgbm9kZVxuICAgICAqIEBwYXJhbSBwYWdpbmF0aW9uIFNwZWNpZmllcyBob3cgdG8gcGFnaW5hdGUgdGhlIHJlc3VsdHNcbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIG5vZGUgSURzXG4gICAgICovXG4gICAgZ2V0Q29ycmVzcG9uZGluZ05vZGVJZHMobm9kZUlkOiBzdHJpbmcsIHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCA9IHt9KTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xuICAgICAgICBpZiAodGhpcy5pc0N1c3RvbVNvdXJjZShub2RlSWQpKSB7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRGb2xkZXJCeU5vZGVJZChub2RlSWQsIHBhZ2luYXRpb24pXG4gICAgICAgICAgICAgICAgLnBpcGUobWFwKChyZXN1bHQ6IGFueSk6IHN0cmluZ1tdID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5saXN0LmVudHJpZXMubWFwKChub2RlOiBhbnkpOiBzdHJpbmcgPT4gdGhpcy5nZXRJZEZyb21FbnRyeShub2RlLCBub2RlSWQpKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChub2RlSWQpIHtcbiAgICAgICAgICAgIC8vIGNhc2VzIHdoZW4gbm9kZUlkIGlzICctbXktJywgJy1yb290LScgb3IgJy1zaGFyZWQtJ1xuICAgICAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLm5vZGVzQXBpLmdldE5vZGUobm9kZUlkKVxuICAgICAgICAgICAgICAgIC50aGVuKChub2RlKSA9PiBbbm9kZS5lbnRyeS5pZF0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvZihbXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hvb3NlcyB0aGUgY29ycmVjdCBJRCBmb3IgYSBub2RlIGVudHJ5LlxuICAgICAqIEBwYXJhbSBub2RlIE5vZGUgb2JqZWN0XG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgbm9kZSBvYmplY3RcbiAgICAgKiBAcmV0dXJucyBJRCB2YWx1ZVxuICAgICAqL1xuICAgIGdldElkRnJvbUVudHJ5KG5vZGU6IGFueSwgbm9kZUlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAobm9kZUlkID09PSAnLXNoYXJlZGxpbmtzLScpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmVudHJ5Lm5vZGVJZDtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlSWQgPT09ICctc2l0ZXMtJyB8fCBub2RlSWQgPT09ICctbXlzaXRlcy0nKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5lbnRyeS5ndWlkO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVJZCA9PT0gJy1mYXZvcml0ZXMtJykge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZW50cnkudGFyZ2V0R3VpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmVudHJ5LmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG9lcyB0aGUgd2VsbC1rbm93biBhbGlhcyBoYXZlIGEgY29ycmVzcG9uZGluZyBub2RlIElEP1xuICAgICAqIEBwYXJhbSBub2RlSWQgTm9kZSB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGFsaWFzIGhhcyBhIGNvcnJlc3BvbmRpbmcgbm9kZSBJRCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaGFzQ29ycmVzcG9uZGluZ05vZGVJZHMobm9kZUlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDdXN0b21Tb3VyY2Uobm9kZUlkKSB8fCB0aGlzLmlzU3VwcG9ydGVkU291cmNlKG5vZGVJZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRJbmNsdWRlc0ZpZWxkcyhpbmNsdWRlRmllbGRzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFsncGF0aCcsICdwcm9wZXJ0aWVzJywgJ2FsbG93YWJsZU9wZXJhdGlvbnMnLCAncGVybWlzc2lvbnMnLCAnYXNwZWN0TmFtZXMnLCAuLi5pbmNsdWRlRmllbGRzXVxuICAgICAgICAgICAgLmZpbHRlcigoZWxlbWVudCwgaW5kZXgsIGFycmF5KSA9PiBpbmRleCA9PT0gYXJyYXkuaW5kZXhPZihlbGVtZW50KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogUmVzcG9uc2UpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==