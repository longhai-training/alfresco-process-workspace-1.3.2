/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DocumentActionsService } from '../../services/document-actions.service';
import { FolderActionsService } from '../../services/folder-actions.service';
import { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';
import { ContentActionListComponent } from './content-action-list.component';
export class ContentActionComponent {
    /**
     * @param {?} list
     * @param {?} documentActions
     * @param {?} folderActions
     */
    constructor(list, documentActions, folderActions) {
        this.list = list;
        this.documentActions = documentActions;
        this.folderActions = folderActions;
        /**
         * The title of the action as shown in the menu.
         */
        this.title = 'Action';
        /**
         * Visibility state (see examples).
         */
        this.visible = true;
        /**
         * Type of item that the action applies to. Can be "document" or "folder"
         */
        this.target = ContentActionTarget.All;
        /**
         * Is the menu item disabled?
         */
        this.disabled = false;
        /**
         * Emitted when the user selects the action from the menu.
         */
        this.execute = new EventEmitter();
        /**
         * Emitted when a permission error occurs
         */
        this.permissionEvent = new EventEmitter();
        /**
         * Emitted when an error occurs during the action.
         * Applies to copy and move actions.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the action succeeds with the success string message.
         * Applies to copy, move and delete actions.
         */
        this.success = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.target === ContentActionTarget.All) {
            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);
            this.documentActionModel = this.generateAction(ContentActionTarget.Document);
        }
        else {
            this.documentActionModel = this.generateAction(this.target);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.visible && !changes.visible.firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.visible = changes.visible.currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.visible = changes.visible.currentValue;
            }
        }
        if (changes.disabled && !changes.disabled.firstChange) {
            if (this.documentActionModel) {
                this.documentActionModel.disabled = changes.disabled.currentValue;
            }
            if (this.folderActionModel) {
                this.folderActionModel.disabled = changes.disabled.currentValue;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
        this.subscriptions = [];
        if (this.documentActionModel) {
            this.unregister(this.documentActionModel);
            this.documentActionModel = null;
        }
        if (this.folderActionModel) {
            this.unregister(this.folderActionModel);
            this.folderActionModel = null;
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    register(model) {
        if (this.list) {
            return this.list.registerAction(model);
        }
        return false;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    unregister(model) {
        if (this.list) {
            return this.list.unregisterAction(model);
        }
        return false;
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    generateAction(target) {
        /** @type {?} */
        const model = new ContentActionModel({
            title: this.title,
            icon: this.icon,
            permission: this.permission,
            disableWithNoPermission: this.disableWithNoPermission,
            target: target,
            disabled: this.disabled,
            visible: this.visible
        });
        if (this.handler) {
            model.handler = this.getSystemHandler(target, this.handler);
        }
        if (this.execute) {
            model.execute = (/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                this.execute.emit({ value });
            });
        }
        this.register(model);
        return model;
    }
    /**
     * @param {?} target
     * @param {?} name
     * @return {?}
     */
    getSystemHandler(target, name) {
        if (target) {
            target = target.toLowerCase();
            if (target === ContentActionTarget.Document) {
                if (this.documentActions) {
                    this.subscriptions.push(this.documentActions.permissionEvent.subscribe((/**
                     * @param {?} permission
                     * @return {?}
                     */
                    (permission) => {
                        this.permissionEvent.emit(permission);
                    })), this.documentActions.error.subscribe((/**
                     * @param {?} errors
                     * @return {?}
                     */
                    (errors) => {
                        this.error.emit(errors);
                    })), this.documentActions.success.subscribe((/**
                     * @param {?} message
                     * @return {?}
                     */
                    (message) => {
                        this.success.emit(message);
                    })));
                    return this.documentActions.getHandler(name);
                }
                return null;
            }
            if (target === ContentActionTarget.Folder) {
                if (this.folderActions) {
                    this.subscriptions.push(this.folderActions.permissionEvent.subscribe((/**
                     * @param {?} permission
                     * @return {?}
                     */
                    (permission) => {
                        this.permissionEvent.emit(permission);
                    })), this.folderActions.error.subscribe((/**
                     * @param {?} errors
                     * @return {?}
                     */
                    (errors) => {
                        this.error.emit(errors);
                    })), this.folderActions.success.subscribe((/**
                     * @param {?} message
                     * @return {?}
                     */
                    (message) => {
                        this.success.emit(message);
                    })));
                    return this.folderActions.getHandler(name);
                }
                return null;
            }
        }
        return null;
    }
}
ContentActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'content-action',
                template: '',
                providers: [
                    DocumentActionsService,
                    FolderActionsService
                ]
            }] }
];
/** @nocollapse */
ContentActionComponent.ctorParameters = () => [
    { type: ContentActionListComponent },
    { type: DocumentActionsService },
    { type: FolderActionsService }
];
ContentActionComponent.propDecorators = {
    title: [{ type: Input }],
    icon: [{ type: Input }],
    visible: [{ type: Input }],
    handler: [{ type: Input }],
    target: [{ type: Input }],
    permission: [{ type: Input }],
    disableWithNoPermission: [{ type: Input }],
    disabled: [{ type: Input }],
    execute: [{ type: Output }],
    permissionEvent: [{ type: Output }],
    error: [{ type: Output }],
    success: [{ type: Output }]
};
if (false) {
    /**
     * The title of the action as shown in the menu.
     * @type {?}
     */
    ContentActionComponent.prototype.title;
    /**
     * The name of the icon to display next to the menu command (can be left blank).
     * @type {?}
     */
    ContentActionComponent.prototype.icon;
    /**
     * Visibility state (see examples).
     * @type {?}
     */
    ContentActionComponent.prototype.visible;
    /**
     * System actions. Can be "delete", "download", "copy" or "move".
     * @type {?}
     */
    ContentActionComponent.prototype.handler;
    /**
     * Type of item that the action applies to. Can be "document" or "folder"
     * @type {?}
     */
    ContentActionComponent.prototype.target;
    /**
     * The permission type.
     * @type {?}
     */
    ContentActionComponent.prototype.permission;
    /**
     * Should this action be disabled in the menu if the user doesn't have permission for it?
     * @type {?}
     */
    ContentActionComponent.prototype.disableWithNoPermission;
    /**
     * Is the menu item disabled?
     * @type {?}
     */
    ContentActionComponent.prototype.disabled;
    /**
     * Emitted when the user selects the action from the menu.
     * @type {?}
     */
    ContentActionComponent.prototype.execute;
    /**
     * Emitted when a permission error occurs
     * @type {?}
     */
    ContentActionComponent.prototype.permissionEvent;
    /**
     * Emitted when an error occurs during the action.
     * Applies to copy and move actions.
     * @type {?}
     */
    ContentActionComponent.prototype.error;
    /**
     * Emitted when the action succeeds with the success string message.
     * Applies to copy, move and delete actions.
     * @type {?}
     */
    ContentActionComponent.prototype.success;
    /** @type {?} */
    ContentActionComponent.prototype.documentActionModel;
    /** @type {?} */
    ContentActionComponent.prototype.folderActionModel;
    /**
     * @type {?}
     * @private
     */
    ContentActionComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    ContentActionComponent.prototype.list;
    /**
     * @type {?}
     * @private
     */
    ContentActionComponent.prototype.documentActions;
    /**
     * @type {?}
     * @private
     */
    ContentActionComponent.prototype.folderActions;
}
//# sourceMappingURL=data:application/json;base64,