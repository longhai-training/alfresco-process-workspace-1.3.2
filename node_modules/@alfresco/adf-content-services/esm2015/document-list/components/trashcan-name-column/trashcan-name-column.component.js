/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';
export class TrashcanNameColumnComponent {
    constructor() {
        this.isLibrary = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.node = this.context.row.node;
        /** @type {?} */
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.isLibrary = this.node.entry.nodeType === 'st:site';
            if (this.isLibrary) {
                const { properties } = this.node.entry;
                this.displayText = this.makeLibraryTitle(this.node.entry, rows);
                this.displayTooltip =
                    properties['cm:description'] || properties['cm:title'];
            }
            else {
                this.displayText = this.node.entry.name || this.node.entry.id;
            }
        }
    }
    /**
     * @param {?} library
     * @param {?} rows
     * @return {?}
     */
    makeLibraryTitle(library, rows) {
        /** @type {?} */
        const entries = rows.map((/**
         * @param {?} r
         * @return {?}
         */
        (r) => r.node.entry));
        const { id } = library;
        /** @type {?} */
        const title = library.properties['cm:title'];
        /** @type {?} */
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((/**
             * @param {?} entry
             * @return {?}
             */
            (entry) => {
                return entry.id !== id && entry.properties['cm:title'] === title;
            }));
        }
        return isDuplicate
            ? `${library.properties['cm:title']} (${library.name})`
            : `${library.properties['cm:title']}`;
    }
}
TrashcanNameColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-trashcan-name-column',
                template: `
    <ng-container *ngIf="!isLibrary">
      <span class="adf-datatable-cell-value" title="{{ node | adfNodeNameTooltip }}">{{ displayText }}</span>
    </ng-container>
    <ng-container *ngIf="isLibrary">
      <span class="adf-datatable-cell-value" title="{{ displayTooltip }}">{{ displayText }}</span>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-datatable-content-cell adf-trashcan-name-column' }
            }] }
];
TrashcanNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TrashcanNameColumnComponent.prototype.context;
    /** @type {?} */
    TrashcanNameColumnComponent.prototype.isLibrary;
    /** @type {?} */
    TrashcanNameColumnComponent.prototype.displayText;
    /** @type {?} */
    TrashcanNameColumnComponent.prototype.displayTooltip;
    /** @type {?} */
    TrashcanNameColumnComponent.prototype.node;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhc2hjYW4tbmFtZS1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiZG9jdW1lbnQtbGlzdC9jb21wb25lbnRzL3RyYXNoY2FuLW5hbWUtY29sdW1uL3RyYXNoY2FuLW5hbWUtY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN2QixpQkFBaUIsRUFFakIsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDO0FBa0J2QixNQUFNLE9BQU8sMkJBQTJCO0lBZHhDO1FBa0JFLGNBQVMsR0FBRyxLQUFLLENBQUM7SUF5Q3BCLENBQUM7Ozs7SUFwQ0MsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDOztjQUM1QixJQUFJLEdBQXdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1FBRTlELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUM7WUFFeEQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO3NCQUNaLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO2dCQUV0QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDaEUsSUFBSSxDQUFDLGNBQWM7b0JBQ2pCLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUMxRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7YUFDL0Q7U0FDRjtJQUNILENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUFDLE9BQVksRUFBRSxJQUF5Qjs7Y0FDaEQsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxDQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFDO2NBQ3JELEVBQUUsRUFBRSxFQUFFLEdBQUcsT0FBTzs7Y0FDaEIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDOztZQUV4QyxXQUFXLEdBQUcsS0FBSztRQUV2QixJQUFJLE9BQU8sRUFBRTtZQUNYLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSTs7OztZQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQ3hDLE9BQU8sS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLENBQUM7WUFDbkUsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sV0FBVztZQUNoQixDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxJQUFJLEdBQUc7WUFDdkQsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO0lBQzFDLENBQUM7OztZQTFERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsUUFBUSxFQUFFOzs7Ozs7O0dBT1Q7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUscURBQXFELEVBQUU7YUFDdkU7OztzQkFFRSxLQUFLOzs7O0lBQU4sOENBQ2E7O0lBRWIsZ0RBQWtCOztJQUNsQixrREFBb0I7O0lBQ3BCLHFEQUF1Qjs7SUFDdkIsMkNBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIE9uSW5pdCxcbiAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IFNoYXJlRGF0YVJvdyB9IGZyb20gJy4uLy4uL2RhdGEvc2hhcmUtZGF0YS1yb3cubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhZGYtdHJhc2hjYW4tbmFtZS1jb2x1bW4nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXNMaWJyYXJ5XCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImFkZi1kYXRhdGFibGUtY2VsbC12YWx1ZVwiIHRpdGxlPVwie3sgbm9kZSB8IGFkZk5vZGVOYW1lVG9vbHRpcCB9fVwiPnt7IGRpc3BsYXlUZXh0IH19PC9zcGFuPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpc0xpYnJhcnlcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYWRmLWRhdGF0YWJsZS1jZWxsLXZhbHVlXCIgdGl0bGU9XCJ7eyBkaXNwbGF5VG9vbHRpcCB9fVwiPnt7IGRpc3BsYXlUZXh0IH19PC9zcGFuPlxuICAgIDwvbmctY29udGFpbmVyPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgaG9zdDogeyBjbGFzczogJ2FkZi1kYXRhdGFibGUtY29udGVudC1jZWxsIGFkZi10cmFzaGNhbi1uYW1lLWNvbHVtbicgfVxufSlcbmV4cG9ydCBjbGFzcyBUcmFzaGNhbk5hbWVDb2x1bW5Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKVxuICBjb250ZXh0OiBhbnk7XG5cbiAgaXNMaWJyYXJ5ID0gZmFsc2U7XG4gIGRpc3BsYXlUZXh0OiBzdHJpbmc7XG4gIGRpc3BsYXlUb29sdGlwOiBzdHJpbmc7XG4gIG5vZGU6IE5vZGVFbnRyeTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLm5vZGUgPSB0aGlzLmNvbnRleHQucm93Lm5vZGU7XG4gICAgY29uc3Qgcm93czogQXJyYXk8U2hhcmVEYXRhUm93PiA9IHRoaXMuY29udGV4dC5kYXRhLnJvd3MgfHwgW107XG5cbiAgICBpZiAodGhpcy5ub2RlICYmIHRoaXMubm9kZS5lbnRyeSkge1xuICAgICAgdGhpcy5pc0xpYnJhcnkgPSB0aGlzLm5vZGUuZW50cnkubm9kZVR5cGUgPT09ICdzdDpzaXRlJztcblxuICAgICAgaWYgKHRoaXMuaXNMaWJyYXJ5KSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gdGhpcy5ub2RlLmVudHJ5O1xuXG4gICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSB0aGlzLm1ha2VMaWJyYXJ5VGl0bGUodGhpcy5ub2RlLmVudHJ5LCByb3dzKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5VG9vbHRpcCA9XG4gICAgICAgICAgcHJvcGVydGllc1snY206ZGVzY3JpcHRpb24nXSB8fCBwcm9wZXJ0aWVzWydjbTp0aXRsZSddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9IHRoaXMubm9kZS5lbnRyeS5uYW1lIHx8IHRoaXMubm9kZS5lbnRyeS5pZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtYWtlTGlicmFyeVRpdGxlKGxpYnJhcnk6IGFueSwgcm93czogQXJyYXk8U2hhcmVEYXRhUm93Pik6IHN0cmluZyB7XG4gICAgY29uc3QgZW50cmllcyA9IHJvd3MubWFwKChyOiBTaGFyZURhdGFSb3cpID0+IHIubm9kZS5lbnRyeSk7XG4gICAgY29uc3QgeyBpZCB9ID0gbGlicmFyeTtcbiAgICBjb25zdCB0aXRsZSA9IGxpYnJhcnkucHJvcGVydGllc1snY206dGl0bGUnXTtcblxuICAgIGxldCBpc0R1cGxpY2F0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGVudHJpZXMpIHtcbiAgICAgIGlzRHVwbGljYXRlID0gZW50cmllcy5zb21lKChlbnRyeTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBlbnRyeS5pZCAhPT0gaWQgJiYgZW50cnkucHJvcGVydGllc1snY206dGl0bGUnXSA9PT0gdGl0bGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNEdXBsaWNhdGVcbiAgICAgID8gYCR7bGlicmFyeS5wcm9wZXJ0aWVzWydjbTp0aXRsZSddfSAoJHtsaWJyYXJ5Lm5hbWV9KWBcbiAgICAgIDogYCR7bGlicmFyeS5wcm9wZXJ0aWVzWydjbTp0aXRsZSddfWA7XG4gIH1cbn1cbiJdfQ==