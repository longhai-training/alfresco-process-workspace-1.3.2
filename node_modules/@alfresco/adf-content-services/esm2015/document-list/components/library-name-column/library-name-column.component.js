/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ElementRef } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { BehaviorSubject } from 'rxjs';
export class LibraryNameColumnComponent {
    /**
     * @param {?} element
     * @param {?} alfrescoApiService
     */
    constructor(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.displayTooltip$ = new BehaviorSubject('');
        this.displayText$ = new BehaviorSubject('');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateValue();
        this.sub = this.alfrescoApiService.nodeUpdated.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            /** @type {?} */
            const row = this.context.row;
            if (row) {
                const { entry } = row.node;
                if (entry === node) {
                    row.node = { entry };
                    this.updateValue();
                }
            }
        }));
    }
    /**
     * @protected
     * @return {?}
     */
    updateValue() {
        this.node = this.context.row.node;
        /** @type {?} */
        const rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.displayText$.next(this.makeLibraryTitle((/** @type {?} */ (this.node.entry)), rows));
            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    }
    /**
     * @param {?} library
     * @return {?}
     */
    makeLibraryTooltip(library) {
        const { description, title } = library;
        return description || title || '';
    }
    /**
     * @param {?} library
     * @param {?} rows
     * @return {?}
     */
    makeLibraryTitle(library, rows) {
        /** @type {?} */
        const entries = rows.map((/**
         * @param {?} row
         * @return {?}
         */
        (row) => row.node.entry));
        const { title, id } = library;
        /** @type {?} */
        let isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((/**
             * @param {?} entry
             * @return {?}
             */
            (entry) => {
                return entry.id !== id && entry.title === title;
            }));
        }
        return isDuplicate ? `${title} (${id})` : `${title}`;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.sub) {
            this.sub.unsubscribe();
            this.sub = null;
        }
    }
}
LibraryNameColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-library-name-column',
                template: `
        <span class="adf-datatable-cell-value" title="{{ displayTooltip$ | async }}" (click)="onClick()">
            {{ displayText$ | async }}
        </span>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'
                }
            }] }
];
/** @nocollapse */
LibraryNameColumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AlfrescoApiService }
];
LibraryNameColumnComponent.propDecorators = {
    context: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LibraryNameColumnComponent.prototype.context;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.displayTooltip$;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.displayText$;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.node;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.sub;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,