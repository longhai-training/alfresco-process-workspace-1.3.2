/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { RatingService } from './services/rating.service';
export class RatingComponent {
    /**
     * @param {?} ratingService
     */
    constructor(ratingService) {
        this.ratingService = ratingService;
        this.average = 0;
        this.ratingType = 'fiveStar';
        /**
         * Emitted when the "vote" gets changed.
         */
        this.changeVote = new EventEmitter();
        this.stars = [];
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        /** @type {?} */
        const ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);
        ratingObserver.subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        (ratingEntry) => {
            if (ratingEntry.entry.aggregate) {
                this.average = ratingEntry.entry.aggregate.average;
                this.calculateStars();
            }
        }));
        return ratingObserver;
    }
    /**
     * @return {?}
     */
    calculateStars() {
        this.stars = [];
        for (let i = 0; i < 5; i++) {
            if (i < this.average) {
                this.stars.push({ fill: true });
            }
            else {
                this.stars.push({ fill: false });
            }
        }
        this.changeVote.emit(this.average);
    }
    /**
     * @param {?} vote
     * @return {?}
     */
    updateVote(vote) {
        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe((/**
         * @param {?} ratingEntry
         * @return {?}
         */
        (ratingEntry) => {
            if (ratingEntry.entry.aggregate) {
                if (this.average !== ratingEntry.entry.aggregate.average) {
                    this.average = ratingEntry.entry.aggregate.average;
                    this.calculateStars();
                }
            }
        }));
    }
}
RatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-rating',
                template: "<mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n    <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index\">\n            <span id=\"adf-rate-{{idx}}\">\n                <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                         (click)=\"updateVote(idx + 1)\">star_rate\n                </mat-icon>\n                <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                         (click)=\"updateVote(idx + 1)\">star_border\n                </mat-icon>\n            </span>\n    </mat-list-item>\n</mat-list>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-rating-container{overflow:hidden;width:100%}.adf-rating-container .adf-rating-star{float:left;transition:.3s;padding:1px;cursor:pointer;width:25px!important}.adf-rating-container .adf-rating-star .mat-list-item-content{padding:0 2px!important}.adf-rating-container .adf-colored-star{color:#ffe944}.adf-rating-container .adf-grey-star{color:grey}.adf-rating-container .adf-stars-container{padding:0!important;margin:0!important;display:inline-block}.adf-rating-container .adf-rating-star:hover{-webkit-transform:rotate(13deg) scale(1.2);transform:rotate(13deg) scale(1.2)}"]
            }] }
];
/** @nocollapse */
RatingComponent.ctorParameters = () => [
    { type: RatingService }
];
RatingComponent.propDecorators = {
    nodeId: [{ type: Input }],
    changeVote: [{ type: Output }]
};
if (false) {
    /**
     * Identifier of the node to apply the rating to.
     * @type {?}
     */
    RatingComponent.prototype.nodeId;
    /** @type {?} */
    RatingComponent.prototype.average;
    /** @type {?} */
    RatingComponent.prototype.ratingType;
    /**
     * Emitted when the "vote" gets changed.
     * @type {?}
     */
    RatingComponent.prototype.changeVote;
    /** @type {?} */
    RatingComponent.prototype.stars;
    /**
     * @type {?}
     * @private
     */
    RatingComponent.prototype.ratingService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNvY2lhbC9yYXRpbmcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBUzFELE1BQU0sT0FBTyxlQUFlOzs7O0lBZ0J4QixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQVZoRCxZQUFPLEdBQVcsQ0FBQyxDQUFDO1FBRXBCLGVBQVUsR0FBVyxVQUFVLENBQUM7Ozs7UUFJaEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFaEMsVUFBSyxHQUFlLEVBQUUsQ0FBQztJQUd2QixDQUFDOzs7O0lBRUQsV0FBVzs7Y0FDRCxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRWpGLGNBQWMsQ0FBQyxTQUFTOzs7O1FBQ3BCLENBQUMsV0FBd0IsRUFBRSxFQUFFO1lBQ3pCLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO2dCQUNuRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDekI7UUFDTCxDQUFDLEVBQ0osQ0FBQztRQUVGLE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDcEM7U0FDSjtRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxJQUFZO1FBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxTQUFTOzs7O1FBQ3ZFLENBQUMsV0FBd0IsRUFBRSxFQUFFO1lBQ3pCLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7Z0JBQzdCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7b0JBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO29CQUNuRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBQ3pCO2FBQ0o7UUFDTCxDQUFDLEVBQ0osQ0FBQztJQUNOLENBQUM7OztZQWpFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLFlBQVk7Z0JBRXRCLDRyQkFBc0M7Z0JBQ3RDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN4Qzs7OztZQVJRLGFBQWE7OztxQkFZakIsS0FBSzt5QkFRTCxNQUFNOzs7Ozs7O0lBUlAsaUNBQ2U7O0lBRWYsa0NBQW9COztJQUVwQixxQ0FBZ0M7Ozs7O0lBR2hDLHFDQUNnQzs7SUFFaEMsZ0NBQXVCOzs7OztJQUVYLHdDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSYXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9yYXRpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBSYXRpbmdFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1yYXRpbmcnLFxuICAgIHN0eWxlVXJsczogWycuL3JhdGluZy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9yYXRpbmcuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUmF0aW5nQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiBJZGVudGlmaWVyIG9mIHRoZSBub2RlIHRvIGFwcGx5IHRoZSByYXRpbmcgdG8uICovXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIGF2ZXJhZ2U6IG51bWJlciA9IDA7XG5cbiAgICByYXRpbmdUeXBlOiBzdHJpbmcgPSAnZml2ZVN0YXInO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJ2b3RlXCIgZ2V0cyBjaGFuZ2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZVZvdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBzdGFyczogQXJyYXk8YW55PiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByYXRpbmdTZXJ2aWNlOiBSYXRpbmdTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IHJhdGluZ09ic2VydmVyID0gdGhpcy5yYXRpbmdTZXJ2aWNlLmdldFJhdGluZyh0aGlzLm5vZGVJZCwgdGhpcy5yYXRpbmdUeXBlKTtcblxuICAgICAgICByYXRpbmdPYnNlcnZlci5zdWJzY3JpYmUoXG4gICAgICAgICAgICAocmF0aW5nRW50cnk6IFJhdGluZ0VudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF2ZXJhZ2UgPSByYXRpbmdFbnRyeS5lbnRyeS5hZ2dyZWdhdGUuYXZlcmFnZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVTdGFycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gcmF0aW5nT2JzZXJ2ZXI7XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlU3RhcnMoKSB7XG4gICAgICAgIHRoaXMuc3RhcnMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCB0aGlzLmF2ZXJhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzLnB1c2goeyBmaWxsOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJzLnB1c2goeyBmaWxsOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhbmdlVm90ZS5lbWl0KHRoaXMuYXZlcmFnZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlVm90ZSh2b3RlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5yYXRpbmdTZXJ2aWNlLnBvc3RSYXRpbmcodGhpcy5ub2RlSWQsIHRoaXMucmF0aW5nVHlwZSwgdm90ZSkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKHJhdGluZ0VudHJ5OiBSYXRpbmdFbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYXRpbmdFbnRyeS5lbnRyeS5hZ2dyZWdhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXZlcmFnZSAhPT0gcmF0aW5nRW50cnkuZW50cnkuYWdncmVnYXRlLmF2ZXJhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXZlcmFnZSA9IHJhdGluZ0VudHJ5LmVudHJ5LmFnZ3JlZ2F0ZS5hdmVyYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVTdGFycygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==