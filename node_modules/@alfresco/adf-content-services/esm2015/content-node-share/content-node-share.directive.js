/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material';
import { NodeEntry } from '@alfresco/js-api';
import { ShareDialogComponent } from './content-node-share.dialog';
export class NodeSharedDirective {
    /**
     * @param {?} dialog
     * @param {?} zone
     */
    constructor(dialog, zone) {
        this.dialog = dialog;
        this.zone = zone;
        this.isFile = false;
        this.isShared = false;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.node) {
            this.shareNode(this.node);
        }
    }
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    shareNode(nodeEntry) {
        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
            this.dialog.open(ShareDialogComponent, {
                width: '600px',
                panelClass: 'adf-share-link-dialog',
                data: {
                    node: nodeEntry,
                    baseShareUrl: this.baseShareUrl
                }
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.zone.onStable.subscribe((/**
         * @return {?}
         */
        () => {
            if (this.node && this.node.entry) {
                this.isFile = this.node.entry.isFile;
                this.isShared = this.node.entry.properties['qshare:sharedId'];
            }
        }));
    }
}
NodeSharedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-share]',
                exportAs: 'adfShare'
            },] }
];
/** @nocollapse */
NodeSharedDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: NgZone }
];
NodeSharedDirective.propDecorators = {
    node: [{ type: Input, args: ['adf-share',] }],
    baseShareUrl: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NodeSharedDirective.prototype.isFile;
    /** @type {?} */
    NodeSharedDirective.prototype.isShared;
    /**
     * Node to share.
     * @type {?}
     */
    NodeSharedDirective.prototype.node;
    /**
     * Prefix to add to the generated link.
     * @type {?}
     */
    NodeSharedDirective.prototype.baseShareUrl;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNoYXJlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbm9kZS1zaGFyZS9jb250ZW50LW5vZGUtc2hhcmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU1uRSxNQUFNLE9BQU8sbUJBQW1COzs7OztJQXFCNUIsWUFBb0IsTUFBaUIsRUFBVSxJQUFZO1FBQXZDLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBbkIzRCxXQUFNLEdBQVksS0FBSyxDQUFDO1FBQ3hCLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFrQm9DLENBQUM7Ozs7SUFOL0QsT0FBTztRQUNILElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO0lBQ0wsQ0FBQzs7Ozs7SUFJRCxTQUFTLENBQUMsU0FBb0I7UUFDMUIsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN4RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDbkMsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsVUFBVSxFQUFFLHVCQUF1QjtnQkFDbkMsSUFBSSxFQUFFO29CQUNGLElBQUksRUFBRSxTQUFTO29CQUNmLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtpQkFDbEM7YUFDSixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDakU7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7OztZQS9DSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRSxVQUFVO2FBQ3ZCOzs7O1lBUlEsU0FBUztZQURrQyxNQUFNOzs7bUJBaUJyRCxLQUFLLFNBQUMsV0FBVzsyQkFJakIsS0FBSztzQkFHTCxZQUFZLFNBQUMsT0FBTzs7OztJQVpyQixxQ0FBd0I7O0lBQ3hCLHVDQUEwQjs7Ozs7SUFJMUIsbUNBQ2dCOzs7OztJQUdoQiwyQ0FDcUI7Ozs7O0lBU1QscUNBQXlCOzs7OztJQUFFLG1DQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgT25DaGFuZ2VzLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IE5vZGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5pbXBvcnQgeyBTaGFyZURpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vY29udGVudC1ub2RlLXNoYXJlLmRpYWxvZyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2FkZi1zaGFyZV0nLFxuICAgIGV4cG9ydEFzOiAnYWRmU2hhcmUnXG59KVxuZXhwb3J0IGNsYXNzIE5vZGVTaGFyZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgaXNGaWxlOiBib29sZWFuID0gZmFsc2U7XG4gICAgaXNTaGFyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBOb2RlIHRvIHNoYXJlLiAqL1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcbiAgICBASW5wdXQoJ2FkZi1zaGFyZScpXG4gICAgbm9kZTogTm9kZUVudHJ5O1xuXG4gICAgLyoqIFByZWZpeCB0byBhZGQgdG8gdGhlIGdlbmVyYXRlZCBsaW5rLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYmFzZVNoYXJlVXJsOiBzdHJpbmc7XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gICAgb25DbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZSkge1xuICAgICAgICAgICAgdGhpcy5zaGFyZU5vZGUodGhpcy5ub2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2csIHByaXZhdGUgem9uZTogTmdab25lKSB7fVxuXG4gICAgc2hhcmVOb2RlKG5vZGVFbnRyeTogTm9kZUVudHJ5KSB7XG4gICAgICAgIGlmIChub2RlRW50cnkgJiYgbm9kZUVudHJ5LmVudHJ5ICYmIG5vZGVFbnRyeS5lbnRyeS5pc0ZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLm9wZW4oU2hhcmVEaWFsb2dDb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogJzYwMHB4JyxcbiAgICAgICAgICAgICAgICBwYW5lbENsYXNzOiAnYWRmLXNoYXJlLWxpbmstZGlhbG9nJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGVFbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgYmFzZVNoYXJlVXJsOiB0aGlzLmJhc2VTaGFyZVVybFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIHRoaXMuem9uZS5vblN0YWJsZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubm9kZSAmJiB0aGlzLm5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRmlsZSA9IHRoaXMubm9kZS5lbnRyeS5pc0ZpbGU7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NoYXJlZCA9IHRoaXMubm9kZS5lbnRyeS5wcm9wZXJ0aWVzWydxc2hhcmU6c2hhcmVkSWQnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19