/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { of, from, throwError } from 'rxjs';
import { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';
import { switchMap, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class NodePermissionService {
    /**
     * @param {?} apiService
     * @param {?} searchApiService
     * @param {?} nodeService
     * @param {?} translation
     */
    constructor(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    getNodeRoles(node) {
        /** @type {?} */
        const retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap((/**
         * @param {?} siteNodeList
         * @return {?}
         */
        (siteNodeList) => {
            if (siteNodeList.list.entries.length > 0) {
                /** @type {?} */
                const siteName = siteNodeList.list.entries[0].entry.name;
                return this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of(node.permissions.settable);
            }
        })));
    }
    /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    updatePermissionRole(node, updatedPermissionRole) {
        /** @type {?} */
        const permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        const index = node.permissions.locallySet.map((/**
         * @param {?} permission
         * @return {?}
         */
        (permission) => permission.authorityId)).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    updateNodePermissions(nodeId, permissionList) {
        return this.nodeService.getNode(nodeId).pipe(switchMap((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            return this.getNodeRoles(node).pipe(switchMap((/**
             * @param {?} nodeRoles
             * @return {?}
             */
            (nodeRoles) => of({ node, nodeRoles }))));
        })), switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        ({ node, nodeRoles }) => this.updateLocallySetPermissions(node, permissionList, nodeRoles))));
    }
    /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    updateLocallySetPermissions(node, nodes, nodeRole) {
        /** @type {?} */
        const permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        const permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);
        /** @type {?} */
        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            /** @type {?} */
            const list = duplicatedPermissions.map((/**
             * @param {?} permission
             * @return {?}
             */
            (permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name)).join(', ');
            /** @type {?} */
            const duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    /**
     * @private
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    getDuplicatedPermissions(nodeLocallySet, permissionListAdded) {
        /** @type {?} */
        const duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach((/**
             * @param {?} permission
             * @return {?}
             */
            (permission) => {
                /** @type {?} */
                const duplicate = nodeLocallySet.find((/**
                 * @param {?} localPermission
                 * @return {?}
                 */
                (localPermission) => this.isEqualPermission(localPermission, permission)));
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            }));
        }
        return duplicatePermissions;
    }
    /**
     * @private
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    isEqualPermission(oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    }
    /**
     * @private
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    transformNodeToPermissionElement(nodes, nodeRole) {
        return nodes.map((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            /** @type {?} */
            const newPermissionElement = (/** @type {?} */ ({
                'authorityId': node.entry.properties['cm:authorityName'] ?
                    node.entry.properties['cm:authorityName'] :
                    node.entry.properties['cm:userName'],
                'name': nodeRole,
                'accessStatus': 'ALLOWED'
            }));
            return newPermissionElement;
        }));
    }
    /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    removePermission(node, permissionToRemove) {
        /** @type {?} */
        const permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        const index = node.permissions.locallySet.map((/**
         * @param {?} permission
         * @return {?}
         */
        (permission) => permission.authorityId)).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
    }
    /**
     * @private
     * @param {?} siteName
     * @return {?}
     */
    getGroupMembersBySiteName(siteName) {
        /** @type {?} */
        const groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemberByGroupName(groupName)
            .pipe(map((/**
         * @param {?} groupMemberPaging
         * @return {?}
         */
        (groupMemberPaging) => {
            /** @type {?} */
            const displayResult = [];
            groupMemberPaging.list.entries.forEach((/**
             * @param {?} member
             * @return {?}
             */
            (member) => {
                displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            }));
            return displayResult;
        })));
    }
    /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JS-API
     * @return {?} List of members
     */
    getGroupMemberByGroupName(groupName, opts) {
        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));
    }
    /**
     * @private
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    formattedRoleName(displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    }
    /**
     * @private
     * @param {?} nodePath
     * @return {?}
     */
    buildRetrieveSiteQueryBody(nodePath) {
        /** @type {?} */
        const pathNames = nodePath.map((/**
         * @param {?} node
         * @return {?}
         */
        (node) => 'name: "' + node.name + '"'));
        /** @type {?} */
        const buildedPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': buildedPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    }
}
NodePermissionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NodePermissionService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchService },
    { type: NodesApiService },
    { type: TranslationService }
];
/** @nocollapse */ NodePermissionService.ngInjectableDef = i0.defineInjectable({ factory: function NodePermissionService_Factory() { return new NodePermissionService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.SearchService), i0.inject(i1.NodesApiService), i0.inject(i1.TranslationService)); }, token: NodePermissionService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.searchApiService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.nodeService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.translation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1wZXJtaXNzaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJwZXJtaXNzaW9uLW1hbmFnZXIvc2VydmljZXMvbm9kZS1wZXJtaXNzaW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU1RyxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFLaEQsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7OztJQUU5QixZQUFvQixVQUE4QixFQUM5QixnQkFBK0IsRUFDL0IsV0FBNEIsRUFDNUIsV0FBK0I7UUFIL0IsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFlO1FBQy9CLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUM1QixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFDbkQsQ0FBQzs7Ozs7O0lBT0QsWUFBWSxDQUFDLElBQVU7O2NBQ2IscUJBQXFCLEdBQWMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzVGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDO2FBQ2hFLElBQUksQ0FDRCxTQUFTOzs7O1FBQUMsQ0FBQyxZQUFpQixFQUFFLEVBQUU7WUFDNUIsSUFBSyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxN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Qy9DLE9BQU87WUFDSCxPQUFPLEVBQUU7Z0JBQ0wsT0FBTyxFQUFFLGdCQUFnQjthQUM1QjtZQUNELFFBQVEsRUFBRTtnQkFDTixVQUFVLEVBQUUsR0FBRztnQkFDZixXQUFXLEVBQUUsQ0FBQzthQUNqQjtZQUNELFNBQVMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUM7WUFDeEMsZUFBZSxFQUFFO2dCQUNiO29CQUNJLE9BQU8sRUFDSCxnQkFBZ0I7aUJBQ3ZCO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQzs7O1lBckxKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQU5RLGtCQUFrQjtZQUFFLGFBQWE7WUFBRSxlQUFlO1lBQUUsa0JBQWtCOzs7Ozs7OztJQVMvRCwyQ0FBc0M7Ozs7O0lBQ3RDLGlEQUF1Qzs7Ozs7SUFDdkMsNENBQW9DOzs7OztJQUNwQyw0Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgZnJvbSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBTZWFyY2hTZXJ2aWNlLCBOb2Rlc0FwaVNlcnZpY2UsIFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBRdWVyeUJvZHksIE5vZGUsIE5vZGVFbnRyeSwgUGF0aEVsZW1lbnQsIEdyb3VwTWVtYmVyRW50cnksIEdyb3VwTWVtYmVyUGFnaW5nLCBQZXJtaXNzaW9uRWxlbWVudCB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTm9kZVBlcm1pc3Npb25TZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgc2VhcmNoQXBpU2VydmljZTogU2VhcmNoU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIG5vZGVTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2Ygcm9sZXMgZm9yIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGUgVGhlIHRhcmdldCBub2RlXG4gICAgICogQHJldHVybnMgQXJyYXkgb2Ygc3RyaW5ncyByZXByZXNlbnRpbmcgdGhlIHJvbGVzXG4gICAgICovXG4gICAgZ2V0Tm9kZVJvbGVzKG5vZGU6IE5vZGUpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IHJldHJpZXZlU2l0ZVF1ZXJ5Qm9keTogUXVlcnlCb2R5ID0gdGhpcy5idWlsZFJldHJpZXZlU2l0ZVF1ZXJ5Qm9keShub2RlLnBhdGguZWxlbWVudHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hBcGlTZXJ2aWNlLnNlYXJjaEJ5UXVlcnlCb2R5KHJldHJpZXZlU2l0ZVF1ZXJ5Qm9keSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoc2l0ZU5vZGVMaXN0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzaXRlTm9kZUxpc3QubGlzdC5lbnRyaWVzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaXRlTmFtZSA9IHNpdGVOb2RlTGlzdC5saXN0LmVudHJpZXNbMF0uZW50cnkubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEdyb3VwTWVtYmVyc0J5U2l0ZU5hbWUoc2l0ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKG5vZGUucGVybWlzc2lvbnMuc2V0dGFibGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcGVybWlzc2lvbiByb2xlIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGUgVGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gdXBkYXRlZFBlcm1pc3Npb25Sb2xlIFBlcm1pc3Npb24gcm9sZSB0byB1cGRhdGUgb3IgYWRkXG4gICAgICogQHJldHVybnMgTm9kZSB3aXRoIHVwZGF0ZWQgcGVybWlzc2lvblxuICAgICAqL1xuICAgIHVwZGF0ZVBlcm1pc3Npb25Sb2xlKG5vZGU6IE5vZGUsIHVwZGF0ZWRQZXJtaXNzaW9uUm9sZTogUGVybWlzc2lvbkVsZW1lbnQpOiBPYnNlcnZhYmxlPE5vZGU+IHtcbiAgICAgICAgY29uc3QgcGVybWlzc2lvbkJvZHkgPSB7IHBlcm1pc3Npb25zOiB7IGxvY2FsbHlTZXQ6IFtdfSB9O1xuICAgICAgICBjb25zdCBpbmRleCA9IG5vZGUucGVybWlzc2lvbnMubG9jYWxseVNldC5tYXAoKHBlcm1pc3Npb24pID0+IHBlcm1pc3Npb24uYXV0aG9yaXR5SWQpLmluZGV4T2YodXBkYXRlZFBlcm1pc3Npb25Sb2xlLmF1dGhvcml0eUlkKTtcbiAgICAgICAgcGVybWlzc2lvbkJvZHkucGVybWlzc2lvbnMubG9jYWxseVNldCA9IHBlcm1pc3Npb25Cb2R5LnBlcm1pc3Npb25zLmxvY2FsbHlTZXQuY29uY2F0KG5vZGUucGVybWlzc2lvbnMubG9jYWxseVNldCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHBlcm1pc3Npb25Cb2R5LnBlcm1pc3Npb25zLmxvY2FsbHlTZXRbaW5kZXhdID0gdXBkYXRlZFBlcm1pc3Npb25Sb2xlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVybWlzc2lvbkJvZHkucGVybWlzc2lvbnMubG9jYWxseVNldC5wdXNoKHVwZGF0ZWRQZXJtaXNzaW9uUm9sZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZVNlcnZpY2UudXBkYXRlTm9kZShub2RlLmlkLCBwZXJtaXNzaW9uQm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHBlcm1pc3Npb25zIGZvciBhIG5vZGUuXG4gICAgICogQHBhcmFtIG5vZGVJZCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGVcbiAgICAgKiBAcGFyYW0gcGVybWlzc2lvbkxpc3QgTmV3IHBlcm1pc3Npb24gc2V0dGluZ3NcbiAgICAgKiBAcmV0dXJucyBOb2RlIHdpdGggdXBkYXRlZCBwZXJtaXNzaW9uc1xuICAgICAqL1xuICAgIHVwZGF0ZU5vZGVQZXJtaXNzaW9ucyhub2RlSWQ6IHN0cmluZywgcGVybWlzc2lvbkxpc3Q6IE5vZGVFbnRyeVtdKTogT2JzZXJ2YWJsZTxOb2RlPiB7XG4gICAgICAgcmV0dXJuIHRoaXMubm9kZVNlcnZpY2UuZ2V0Tm9kZShub2RlSWQpLnBpcGUoXG4gICAgICAgICAgIHN3aXRjaE1hcCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVSb2xlcyhub2RlKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKG5vZGVSb2xlcykgPT4gb2Yoe25vZGUsIG5vZGVSb2xlc30pIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKHtub2RlLCBub2RlUm9sZXN9KSA9PiB0aGlzLnVwZGF0ZUxvY2FsbHlTZXRQZXJtaXNzaW9ucyhub2RlLCBwZXJtaXNzaW9uTGlzdCwgbm9kZVJvbGVzKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBsb2NhbGx5IHNldCBwZXJtaXNzaW9ucyBmb3IgYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSBub2RlcyBQZXJtaXNzaW9uIHNldHRpbmdzXG4gICAgICogQHBhcmFtIG5vZGVSb2xlIFBlcm1pc3Npb24gcm9sZVxuICAgICAqIEByZXR1cm5zIE5vZGUgd2l0aCB1cGRhdGVkIHBlcm1pc3Npb25zXG4gICAgICovXG4gICAgdXBkYXRlTG9jYWxseVNldFBlcm1pc3Npb25zKG5vZGU6IE5vZGUsIG5vZGVzOiBOb2RlRW50cnlbXSwgbm9kZVJvbGU6IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxOb2RlPiB7XG4gICAgICAgIGNvbnN0IHBlcm1pc3Npb25Cb2R5ID0geyBwZXJtaXNzaW9uczogeyBsb2NhbGx5U2V0OiBbXX0gfTtcbiAgICAgICAgY29uc3QgcGVybWlzc2lvbkxpc3QgPSB0aGlzLnRyYW5zZm9ybU5vZGVUb1Blcm1pc3Npb25FbGVtZW50KG5vZGVzLCBub2RlUm9sZVswXSk7XG4gICAgICAgIGNvbnN0IGR1cGxpY2F0ZWRQZXJtaXNzaW9ucyA9IHRoaXMuZ2V0RHVwbGljYXRlZFBlcm1pc3Npb25zKG5vZGUucGVybWlzc2lvbnMubG9jYWxseVNldCwgcGVybWlzc2lvbkxpc3QpO1xuICAgICAgICBpZiAoZHVwbGljYXRlZFBlcm1pc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBkdXBsaWNhdGVkUGVybWlzc2lvbnMubWFwKChwZXJtaXNzaW9uKSA9PiAnYXV0aG9yaXR5IC0+ICcgKyBwZXJtaXNzaW9uLmF1dGhvcml0eUlkICsgJyAvIHJvbGUgLT4gJyArIHBlcm1pc3Npb24ubmFtZSkuam9pbignLCAnKTtcbiAgICAgICAgICAgIGNvbnN0IGR1cGxpY2F0ZVBlcm1pc3Npb25NZXNzYWdlOiBzdHJpbmcgPSB0aGlzLnRyYW5zbGF0aW9uLmluc3RhbnQoJ1BFUk1JU1NJT05fTUFOQUdFUi5FUlJPUi5EVVBMSUNBVEUtUEVSTUlTU0lPTicsICB7bGlzdH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZHVwbGljYXRlUGVybWlzc2lvbk1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHBlcm1pc3Npb25Cb2R5LnBlcm1pc3Npb25zLmxvY2FsbHlTZXQgPSBub2RlLnBlcm1pc3Npb25zLmxvY2FsbHlTZXQgPyBub2RlLnBlcm1pc3Npb25zLmxvY2FsbHlTZXQuY29uY2F0KHBlcm1pc3Npb25MaXN0KSA6IHBlcm1pc3Npb25MaXN0O1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlU2VydmljZS51cGRhdGVOb2RlKG5vZGUuaWQsIHBlcm1pc3Npb25Cb2R5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldER1cGxpY2F0ZWRQZXJtaXNzaW9ucyhub2RlTG9jYWxseVNldDogUGVybWlzc2lvbkVsZW1lbnRbXSwgcGVybWlzc2lvbkxpc3RBZGRlZDogUGVybWlzc2lvbkVsZW1lbnRbXSk6IFBlcm1pc3Npb25FbGVtZW50W10ge1xuICAgICAgICBjb25zdCBkdXBsaWNhdGVQZXJtaXNzaW9uczogUGVybWlzc2lvbkVsZW1lbnRbXSA9IFtdO1xuICAgICAgICBpZiAobm9kZUxvY2FsbHlTZXQpIHtcbiAgICAgICAgICAgIHBlcm1pc3Npb25MaXN0QWRkZWQuZm9yRWFjaCgocGVybWlzc2lvbjogUGVybWlzc2lvbkVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkdXBsaWNhdGUgPSBub2RlTG9jYWxseVNldC5maW5kKChsb2NhbFBlcm1pc3Npb24pID0+IHRoaXMuaXNFcXVhbFBlcm1pc3Npb24obG9jYWxQZXJtaXNzaW9uLCBwZXJtaXNzaW9uKSk7XG4gICAgICAgICAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICBkdXBsaWNhdGVQZXJtaXNzaW9ucy5wdXNoKGR1cGxpY2F0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGR1cGxpY2F0ZVBlcm1pc3Npb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNFcXVhbFBlcm1pc3Npb24ob2xkUGVybWlzc2lvbjogUGVybWlzc2lvbkVsZW1lbnQsIG5ld1Blcm1pc3Npb246IFBlcm1pc3Npb25FbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBvbGRQZXJtaXNzaW9uLmFjY2Vzc1N0YXR1cyA9PT0gbmV3UGVybWlzc2lvbi5hY2Nlc3NTdGF0dXMgJiZcbiAgICAgICAgICAgICAgIG9sZFBlcm1pc3Npb24uYXV0aG9yaXR5SWQgPT09IG5ld1Blcm1pc3Npb24uYXV0aG9yaXR5SWQgJiZcbiAgICAgICAgICAgICAgIG9sZFBlcm1pc3Npb24ubmFtZSA9PT0gbmV3UGVybWlzc2lvbi5uYW1lO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNmb3JtTm9kZVRvUGVybWlzc2lvbkVsZW1lbnQobm9kZXM6IE5vZGVFbnRyeVtdLCBub2RlUm9sZTogYW55KTogUGVybWlzc2lvbkVsZW1lbnRbXSB7XG4gICAgICAgIHJldHVybiBub2Rlcy5tYXAoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Blcm1pc3Npb25FbGVtZW50OiBQZXJtaXNzaW9uRWxlbWVudCA9IDxQZXJtaXNzaW9uRWxlbWVudD4ge1xuICAgICAgICAgICAgICAgICdhdXRob3JpdHlJZCc6IG5vZGUuZW50cnkucHJvcGVydGllc1snY206YXV0aG9yaXR5TmFtZSddID9cbiAgICAgICAgICAgICAgICAgICAgbm9kZS5lbnRyeS5wcm9wZXJ0aWVzWydjbTphdXRob3JpdHlOYW1lJ10gOlxuICAgICAgICAgICAgICAgICAgICBub2RlLmVudHJ5LnByb3BlcnRpZXNbJ2NtOnVzZXJOYW1lJ10sXG4gICAgICAgICAgICAgICAgJ25hbWUnOiBub2RlUm9sZSxcbiAgICAgICAgICAgICAgICAnYWNjZXNzU3RhdHVzJzogJ0FMTE9XRUQnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG5ld1Blcm1pc3Npb25FbGVtZW50O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcGVybWlzc2lvbiBzZXR0aW5nIGZyb20gYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSBwZXJtaXNzaW9uVG9SZW1vdmUgUGVybWlzc2lvbiBzZXR0aW5nIHRvIHJlbW92ZVxuICAgICAqIEByZXR1cm5zIE5vZGUgd2l0aCBtb2RpZmllZCBwZXJtaXNzaW9uc1xuICAgICAqL1xuICAgIHJlbW92ZVBlcm1pc3Npb24obm9kZTogTm9kZSwgcGVybWlzc2lvblRvUmVtb3ZlOiBQZXJtaXNzaW9uRWxlbWVudCk6IE9ic2VydmFibGU8Tm9kZT4ge1xuICAgICAgICBjb25zdCBwZXJtaXNzaW9uQm9keSA9IHsgcGVybWlzc2lvbnM6IHsgbG9jYWxseVNldDogW10gfSB9O1xuICAgICAgICBjb25zdCBpbmRleCA9IG5vZGUucGVybWlzc2lvbnMubG9jYWxseVNldC5tYXAoKHBlcm1pc3Npb24pID0+IHBlcm1pc3Npb24uYXV0aG9yaXR5SWQpLmluZGV4T2YocGVybWlzc2lvblRvUmVtb3ZlLmF1dGhvcml0eUlkKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgbm9kZS5wZXJtaXNzaW9ucy5sb2NhbGx5U2V0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBwZXJtaXNzaW9uQm9keS5wZXJtaXNzaW9ucy5sb2NhbGx5U2V0ID0gbm9kZS5wZXJtaXNzaW9ucy5sb2NhbGx5U2V0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZVNlcnZpY2UudXBkYXRlTm9kZShub2RlLmlkLCBwZXJtaXNzaW9uQm9keSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEdyb3VwTWVtYmVyc0J5U2l0ZU5hbWUoc2l0ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lID0gJ0dST1VQX3NpdGVfJyArIHNpdGVOYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRHcm91cE1lbWJlckJ5R3JvdXBOYW1lKGdyb3VwTmFtZSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgoZ3JvdXBNZW1iZXJQYWdpbmc6IEdyb3VwTWVtYmVyUGFnaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3BsYXlSZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwTWVtYmVyUGFnaW5nLmxpc3QuZW50cmllcy5mb3JFYWNoKChtZW1iZXI6IEdyb3VwTWVtYmVyRW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlSZXN1bHQucHVzaCh0aGlzLmZvcm1hdHRlZFJvbGVOYW1lKG1lbWJlci5lbnRyeS5kaXNwbGF5TmFtZSwgJ3NpdGVfJyArIHNpdGVOYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGxheVJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBtZW1iZXJzIHJlbGF0ZWQgdG8gYSBncm91cCBuYW1lLlxuICAgICAqIEBwYXJhbSBncm91cE5hbWUgTmFtZSBvZiBncm91cCB0byBsb29rIGZvciBtZW1iZXJzXG4gICAgICogQHBhcmFtIG9wdHMgRXh0cmEgb3B0aW9ucyBzdXBwb3J0ZWQgYnkgSlMtQVBJXG4gICAgICogQHJldHVybnMgTGlzdCBvZiBtZW1iZXJzXG4gICAgICovXG4gICAgZ2V0R3JvdXBNZW1iZXJCeUdyb3VwTmFtZShncm91cE5hbWU6IHN0cmluZywgb3B0cz86IGFueSk6IE9ic2VydmFibGU8R3JvdXBNZW1iZXJQYWdpbmc+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hcGlTZXJ2aWNlLmdyb3Vwc0FwaS5nZXRHcm91cE1lbWJlcnMoZ3JvdXBOYW1lLCBvcHRzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXR0ZWRSb2xlTmFtZShkaXNwbGF5TmFtZSwgc2l0ZU5hbWUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZGlzcGxheU5hbWUucmVwbGFjZShzaXRlTmFtZSArICdfJywgJycpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRSZXRyaWV2ZVNpdGVRdWVyeUJvZHkobm9kZVBhdGg6IFBhdGhFbGVtZW50W10pOiBRdWVyeUJvZHkge1xuICAgICAgICBjb25zdCBwYXRoTmFtZXMgPSBub2RlUGF0aC5tYXAoKG5vZGU6IFBhdGhFbGVtZW50KSA9PiAnbmFtZTogXCInICsgbm9kZS5uYW1lICsgJ1wiJyk7XG4gICAgICAgIGNvbnN0IGJ1aWxkZWRQYXRoTmFtZXMgPSBwYXRoTmFtZXMuam9pbignIE9SICcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3F1ZXJ5Jzoge1xuICAgICAgICAgICAgICAgICdxdWVyeSc6IGJ1aWxkZWRQYXRoTmFtZXNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncGFnaW5nJzoge1xuICAgICAgICAgICAgICAgICdtYXhJdGVtcyc6IDEwMCxcbiAgICAgICAgICAgICAgICAnc2tpcENvdW50JzogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdpbmNsdWRlJzogWydhc3BlY3ROYW1lcycsICdwcm9wZXJ0aWVzJ10sXG4gICAgICAgICAgICAnZmlsdGVyUXVlcmllcyc6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICdxdWVyeSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRZUEU6J3N0OnNpdGUnXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXG59XG4iXX0=