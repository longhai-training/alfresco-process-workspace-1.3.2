/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';
import { NodePermissionService } from './node-permission.service';
import { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "./node-permission.service";
import * as i3 from "@alfresco/adf-core";
export class NodePermissionDialogService {
    /**
     * @param {?} dialog
     * @param {?} nodePermissionService
     * @param {?} contentService
     */
    constructor(dialog, nodePermissionService, contentService) {
        this.dialog = dialog;
        this.nodePermissionService = nodePermissionService;
        this.contentService = contentService;
    }
    /**
     * Opens a dialog to add permissions to a node.
     * @param {?} node ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    openAddPermissionDialog(node, title) {
        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
            /** @type {?} */
            const confirm = new Subject();
            confirm.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            const data = {
                nodeId: node.id,
                title: title,
                confirm: confirm
            };
            this.openDialog(data, 'adf-add-permission-dialog', '630px');
            return confirm;
        }
        else {
            /** @type {?} */
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';
            return throwError(errors);
        }
    }
    /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    openDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
    }
    /**
     * Closes the currently-open dialog.
     * @return {?}
     */
    close() {
        this.dialog.closeAll();
    }
    /**
     * Opens a dialog to update permissions for a node.
     * @param {?=} nodeId ID of the target node
     * @param {?=} title Dialog title
     * @return {?} Node with updated permissions
     */
    updateNodePermissionByDialog(nodeId, title) {
        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })
            .pipe(switchMap((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            return this.openAddPermissionDialog(node.entry, title)
                .pipe(switchMap((/**
             * @param {?} selection
             * @return {?}
             */
            (selection) => {
                return this.nodePermissionService.updateNodePermissions(nodeId, selection);
            })));
        })));
    }
}
NodePermissionDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NodePermissionDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: NodePermissionService },
    { type: ContentService }
];
/** @nocollapse */ NodePermissionDialogService.ngInjectableDef = i0.defineInjectable({ factory: function NodePermissionDialogService_Factory() { return new NodePermissionDialogService(i0.inject(i1.MatDialog), i0.inject(i2.NodePermissionService), i0.inject(i3.ContentService)); }, token: NodePermissionDialogService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NodePermissionDialogService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodePermissionDialogService.prototype.nodePermissionService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionDialogService.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1wZXJtaXNzaW9uLWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicGVybWlzc2lvbi1tYW5hZ2VyL3NlcnZpY2VzL25vZGUtcGVybWlzc2lvbi1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUc1RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0UsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUszQyxNQUFNLE9BQU8sMkJBQTJCOzs7Ozs7SUFFcEMsWUFBb0IsTUFBaUIsRUFDakIscUJBQTRDLEVBQzVDLGNBQThCO1FBRjlCLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDakIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDbEQsQ0FBQzs7Ozs7OztJQVFELHVCQUF1QixDQUFDLElBQVUsRUFBRSxLQUFjO1FBQzlDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsaUJBQWlCLENBQUMsRUFBRTs7a0JBQ3ZGLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBZTtZQUUxQyxPQUFPLENBQUMsU0FBUyxDQUFDO2dCQUNkLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDbEMsQ0FBQyxDQUFDOztrQkFFRyxJQUFJLEdBQTRCO2dCQUNsQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ2YsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osT0FBTyxFQUFFLE9BQU87YUFDbkI7WUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1RCxPQUFPLE9BQU8sQ0FBQztTQUNsQjthQUFNOztrQkFDRyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEUsTUFBTSxDQUFDLE9BQU8sR0FBRyxzQ0FBc0MsQ0FBQztZQUN4RCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7Ozs7O0lBRU8sVUFBVSxDQUFDLElBQVMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUN4RSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDaEgsQ0FBQzs7Ozs7SUFLRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7Ozs7O0lBUUQsNEJBQTRCLENBQUMsTUFBZSxFQUFFLEtBQWM7UUFDeEQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUM7YUFDM0UsSUFBSSxDQUNELFNBQVM7Ozs7UUFBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7aUJBQ2pELElBQUksQ0FDRCxTQUFTOzs7O1lBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQy9FLENBQUMsRUFBQyxDQUNMLENBQUM7UUFDVixDQUFDLEVBQUMsQ0FDTCxDQUFDO0lBQ1YsQ0FBQzs7O1lBcEVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQVpRLFNBQVM7WUFNVCxxQkFBcUI7WUFDckIsY0FBYzs7Ozs7Ozs7SUFRUCw2Q0FBeUI7Ozs7O0lBQ3pCLDREQUFvRDs7Ozs7SUFDcEQscURBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWRkUGVybWlzc2lvbkRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBZGRQZXJtaXNzaW9uRGlhbG9nRGF0YSB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tZGlhbG9nLWRhdGEuaW50ZXJmYWNlJztcbmltcG9ydCB7IE5vZGVFbnRyeSwgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgTm9kZVBlcm1pc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi9ub2RlLXBlcm1pc3Npb24uc2VydmljZSc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0gfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5vZGVQZXJtaXNzaW9uRGlhbG9nU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbm9kZVBlcm1pc3Npb25TZXJ2aWNlOiBOb2RlUGVybWlzc2lvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIGRpYWxvZyB0byBhZGQgcGVybWlzc2lvbnMgdG8gYSBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSB0aXRsZSBEaWFsb2cgdGl0bGVcbiAgICAgKiBAcmV0dXJucyBOb2RlIHdpdGggdXBkYXRlZCBwZXJtaXNzaW9uc1xuICAgICAqL1xuICAgIG9wZW5BZGRQZXJtaXNzaW9uRGlhbG9nKG5vZGU6IE5vZGUsIHRpdGxlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxOb2RlRW50cnlbXT4ge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50U2VydmljZS5oYXNBbGxvd2FibGVPcGVyYXRpb25zKG5vZGUsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtLlVQREFURVBFUk1JU1NJT05TKSkge1xuICAgICAgICAgICAgY29uc3QgY29uZmlybSA9IG5ldyBTdWJqZWN0PE5vZGVFbnRyeVtdPigpO1xuXG4gICAgICAgICAgICBjb25maXJtLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHRoaXMuY2xvc2UuYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGE6IEFkZFBlcm1pc3Npb25EaWFsb2dEYXRhID0ge1xuICAgICAgICAgICAgICAgIG5vZGVJZDogbm9kZS5pZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgY29uZmlybTogY29uZmlybVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5vcGVuRGlhbG9nKGRhdGEsICdhZGYtYWRkLXBlcm1pc3Npb24tZGlhbG9nJywgJzYzMHB4Jyk7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlybTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh7IGVycm9yOiB7IHN0YXR1c0NvZGU6IDQwMyB9IH0pKTtcbiAgICAgICAgICAgIGVycm9ycy5tZXNzYWdlID0gJ1BFUk1JU1NJT05fTUFOQUdFUi5FUlJPUi5OT1QtQUxMT1dFRCc7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuRGlhbG9nKGRhdGE6IGFueSwgY3VycmVudFBhbmVsQ2xhc3M6IHN0cmluZywgY2hvc2VuV2lkdGg6IHN0cmluZykge1xuICAgICAgICB0aGlzLmRpYWxvZy5vcGVuKEFkZFBlcm1pc3Npb25EaWFsb2dDb21wb25lbnQsIHsgZGF0YSwgcGFuZWxDbGFzczogY3VycmVudFBhbmVsQ2xhc3MsIHdpZHRoOiBjaG9zZW5XaWR0aCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGN1cnJlbnRseS1vcGVuIGRpYWxvZy5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2VBbGwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyBhIGRpYWxvZyB0byB1cGRhdGUgcGVybWlzc2lvbnMgZm9yIGEgbm9kZS5cbiAgICAgKiBAcGFyYW0gbm9kZUlkIElEIG9mIHRoZSB0YXJnZXQgbm9kZVxuICAgICAqIEBwYXJhbSB0aXRsZSBEaWFsb2cgdGl0bGVcbiAgICAgKiBAcmV0dXJucyBOb2RlIHdpdGggdXBkYXRlZCBwZXJtaXNzaW9uc1xuICAgICAqL1xuICAgIHVwZGF0ZU5vZGVQZXJtaXNzaW9uQnlEaWFsb2cobm9kZUlkPzogc3RyaW5nLCB0aXRsZT86IHN0cmluZyk6IE9ic2VydmFibGU8Tm9kZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50U2VydmljZS5nZXROb2RlKG5vZGVJZCwgeyBpbmNsdWRlOiBbJ2FsbG93YWJsZU9wZXJhdGlvbnMnXSB9KVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5BZGRQZXJtaXNzaW9uRGlhbG9nKG5vZGUuZW50cnksIHRpdGxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoTWFwKChzZWxlY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZVBlcm1pc3Npb25TZXJ2aWNlLnVwZGF0ZU5vZGVQZXJtaXNzaW9ucyhub2RlSWQsIHNlbGVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgfVxufVxuIl19