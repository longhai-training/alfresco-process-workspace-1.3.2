/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
export class InheritPermissionDirective {
    /**
     * @param {?} nodeService
     * @param {?} contentService
     */
    constructor(nodeService, contentService) {
        this.nodeService = nodeService;
        this.contentService = contentService;
        /**
         * Emitted when the node is updated.
         */
        this.updated = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onInheritPermissionClicked() {
        this.nodeService.getNode(this.nodeId).subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {
                /** @type {?} */
                const nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };
                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((/**
                 * @param {?} nodeUpdated
                 * @return {?}
                 */
                (nodeUpdated) => {
                    this.updated.emit(nodeUpdated);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => this.error.emit(error)));
            }
            else {
                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');
            }
        }));
    }
}
InheritPermissionDirective.decorators = [
    { type: Directive, args: [{
                selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',
                host: {
                    'role': 'button',
                    '(click)': 'onInheritPermissionClicked()'
                }
            },] }
];
/** @nocollapse */
InheritPermissionDirective.ctorParameters = () => [
    { type: NodesApiService },
    { type: ContentService }
];
InheritPermissionDirective.propDecorators = {
    nodeId: [{ type: Input }],
    updated: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * ID of the node to add/remove inherited permissions.
     * @type {?}
     */
    InheritPermissionDirective.prototype.nodeId;
    /**
     * Emitted when the node is updated.
     * @type {?}
     */
    InheritPermissionDirective.prototype.updated;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    InheritPermissionDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    InheritPermissionDirective.prototype.nodeService;
    /**
     * @type {?}
     * @private
     */
    InheritPermissionDirective.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5oZXJpdGVkLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJwZXJtaXNzaW9uLW1hbmFnZXIvY29tcG9uZW50cy9pbmhlcml0ZWQtYnV0dG9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBVTlGLE1BQU0sT0FBTywwQkFBMEI7Ozs7O0lBY25DLFlBQW9CLFdBQTRCLEVBQzVCLGNBQThCO1FBRDlCLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQUM1QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7Ozs7UUFQbEQsWUFBTyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDOzs7O1FBSXZELFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUluRCxDQUFDOzs7O0lBRUQsMEJBQTBCO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxJQUFVLEVBQUUsRUFBRTtZQUMzRCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLEVBQUU7O3NCQUN2RixRQUFRLEdBQUcsRUFBRSxXQUFXLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsRUFBRTtnQkFDbEcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUzs7OztnQkFBQyxDQUFDLFdBQWlCLEVBQUUsRUFBRTtvQkFDN0csSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ25DLENBQUM7Ozs7Z0JBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUM7YUFDekM7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQzthQUMzRDtRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMkVBQTJFO2dCQUNyRixJQUFJLEVBQUU7b0JBQ0YsTUFBTSxFQUFFLFFBQVE7b0JBQ2hCLFNBQVMsRUFBRSw4QkFBOEI7aUJBQzVDO2FBQ0o7Ozs7WUFUUSxlQUFlO1lBQUUsY0FBYzs7O3FCQWFuQyxLQUFLO3NCQUlMLE1BQU07b0JBSU4sTUFBTTs7Ozs7OztJQVJQLDRDQUNlOzs7OztJQUdmLDZDQUN1RDs7Ozs7SUFHdkQsMkNBQ21EOzs7OztJQUV2QyxpREFBb0M7Ozs7O0lBQ3BDLG9EQUFzQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm5vLWlucHV0LXJlbmFtZSAgKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2Rlc0FwaVNlcnZpY2UsIENvbnRlbnRTZXJ2aWNlLCBBbGxvd2FibGVPcGVyYXRpb25zRW51bSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnYnV0dG9uW2FkZi1pbmhlcml0LXBlcm1pc3Npb25dLCBtYXQtYnV0dG9uLXRvZ2dsZVthZGYtaW5oZXJpdC1wZXJtaXNzaW9uXScsXG4gICAgaG9zdDoge1xuICAgICAgICAncm9sZSc6ICdidXR0b24nLFxuICAgICAgICAnKGNsaWNrKSc6ICdvbkluaGVyaXRQZXJtaXNzaW9uQ2xpY2tlZCgpJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgSW5oZXJpdFBlcm1pc3Npb25EaXJlY3RpdmUge1xuXG4gICAgLyoqIElEIG9mIHRoZSBub2RlIHRvIGFkZC9yZW1vdmUgaW5oZXJpdGVkIHBlcm1pc3Npb25zLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBub2RlIGlzIHVwZGF0ZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgdXBkYXRlZDogRXZlbnRFbWl0dGVyPE5vZGU+ID0gbmV3IEV2ZW50RW1pdHRlcjxOb2RlPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5vZGVTZXJ2aWNlOiBOb2Rlc0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBvbkluaGVyaXRQZXJtaXNzaW9uQ2xpY2tlZCgpIHtcbiAgICAgICAgdGhpcy5ub2RlU2VydmljZS5nZXROb2RlKHRoaXMubm9kZUlkKS5zdWJzY3JpYmUoKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc0FsbG93YWJsZU9wZXJhdGlvbnMobm9kZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0uVVBEQVRFUEVSTUlTU0lPTlMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUJvZHkgPSB7IHBlcm1pc3Npb25zOiB7IGlzSW5oZXJpdGFuY2VFbmFibGVkOiAhbm9kZS5wZXJtaXNzaW9ucy5pc0luaGVyaXRhbmNlRW5hYmxlZCB9IH07XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU2VydmljZS51cGRhdGVOb2RlKHRoaXMubm9kZUlkLCBub2RlQm9keSwgeyBpbmNsdWRlOiBbJ3Blcm1pc3Npb25zJ10gfSkuc3Vic2NyaWJlKChub2RlVXBkYXRlZDogTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZWQuZW1pdChub2RlVXBkYXRlZCk7XG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB0aGlzLmVycm9yLmVtaXQoZXJyb3IpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvci5lbWl0KCdQRVJNSVNTSU9OX01BTkFHRVIuRVJST1IuTk9ULUFMTE9XRUQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iXX0=