/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation, EventEmitter, Output, ViewChild } from '@angular/core';
import { SearchPermissionConfigurationService } from './search-config-permission.service';
import { SearchService, SearchConfigurationService } from '@alfresco/adf-core';
import { SearchComponent } from '../../../search/components/search.component';
import { FormControl } from '@angular/forms';
import { debounceTime } from 'rxjs/operators';
import { NodeEntry } from '@alfresco/js-api';
export class AddPermissionPanelComponent {
    constructor() {
        /**
         * Emitted when a permission list item is selected.
         */
        this.select = new EventEmitter();
        this.searchInput = new FormControl();
        this.searchedWord = '';
        this.debounceSearch = 200;
        this.selectedItems = [];
        this.EVERYONE = new NodeEntry({ entry: { properties: { 'cm:authorityName': 'GROUP_EVERYONE' } } });
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch))
            .subscribe((/**
         * @param {?} searchValue
         * @return {?}
         */
        (searchValue) => {
            this.searchedWord = searchValue;
            if (!searchValue) {
                this.search.resetResults();
            }
        }));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    elementClicked(item) {
        if (this.isAlreadySelected(item)) {
            this.selectedItems.splice(this.selectedItems.indexOf(item), 1);
        }
        else {
            this.selectedItems.push(item);
        }
        this.select.emit(this.selectedItems);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    isAlreadySelected(item) {
        return this.selectedItems.indexOf(item) >= 0;
    }
    /**
     * @return {?}
     */
    clearSearch() {
        this.searchedWord = '';
        this.selectedItems.splice(0, this.selectedItems.length);
        this.search.resetResults();
    }
}
AddPermissionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-add-permission-panel',
                template: "<mat-form-field floatPlaceholder=\"never\" class=\"adf-permission-search-input\">\n    <input matInput\n        id=\"searchInput\"\n        [formControl]=\"searchInput\"\n        type=\"text\"\n        placeholder=\"{{'PERMISSION_MANAGER.ADD-PERMISSION.SEARCH' | translate}}\"\n        [value]=\"searchedWord\">\n\n    <mat-icon *ngIf=\"searchedWord?.length > 0\"\n        class=\"adf-permission-search-icon\"\n        data-automation-id=\"adf-permission-clear-input\"\n        id=\"adf-permission-clear-input\"\n        matSuffix (click)=\"clearSearch()\">clear\n    </mat-icon>\n\n    <mat-icon *ngIf=\"searchedWord?.length === 0\"\n        class=\"adf-permission-search-icon\"\n        data-automation-id=\"adf-permission-search-icon\"\n        matSuffix>search\n    </mat-icon>\n</mat-form-field>\n\n<div *ngIf=\"searchedWord?.length === 0\" id=\"adf-add-permission-type-search\">\n    <span class=\"adf-permission-start-message\">{{'PERMISSION_MANAGER.ADD-PERMISSION.TYPE-MESSAGE' | translate}}</span>\n</div>\n\n<adf-search #search [searchTerm]=\"searchedWord\"\n        id=\"adf-add-permission-authority-results\"\n        class=\"adf-permission-result-list\"\n        [class.adf-permission-result-list-search]=\"searchedWord.length === 0\">\n<ng-template let-data>\n    <mat-selection-list class=\"adf-permission-result-list-elements\">\n        <mat-list-option\n            id=\"adf-add-permission-group-everyone\"\n            class=\"adf-list-option-item\"\n            (click)=\"elementClicked(EVERYONE)\">\n            <mat-icon mat-list-icon id=\"add-group-icon\">\n                group_add\n            </mat-icon>\n            <p>\n                {{'PERMISSION_MANAGER.ADD-PERMISSION.EVERYONE' | translate}}\n            </p>\n        </mat-list-option>\n\n        <mat-list-option *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                            (click)=\"elementClicked(item)\"\n                            class=\"adf-list-option-item\"\n                            id=\"result_option_{{idx}}\">\n            <mat-icon mat-list-icon id=\"add-group-icon\"\n                      *ngIf=\"item?.entry?.nodeType === 'cm:authorityContainer' else show_person_icon\">\n                      group_add\n            </mat-icon>\n            <ng-template #show_person_icon>\n                <mat-icon id=\"add-person-icon\" mat-list-icon>person_add</mat-icon>\n            </ng-template>\n            <p>\n             {{item.entry?.properties['cm:authorityName']?\n                                    item.entry?.properties['cm:authorityName'] :\n                                    item.entry?.properties['cm:firstName']}}</p>\n        </mat-list-option>\n    </mat-selection-list>\n</ng-template>\n</adf-search>\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },
                    SearchService
                ],
                styles: [""]
            }] }
];
/** @nocollapse */
AddPermissionPanelComponent.ctorParameters = () => [];
AddPermissionPanelComponent.propDecorators = {
    search: [{ type: ViewChild, args: ['search',] }],
    select: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AddPermissionPanelComponent.prototype.search;
    /**
     * Emitted when a permission list item is selected.
     * @type {?}
     */
    AddPermissionPanelComponent.prototype.select;
    /** @type {?} */
    AddPermissionPanelComponent.prototype.searchInput;
    /** @type {?} */
    AddPermissionPanelComponent.prototype.searchedWord;
    /** @type {?} */
    AddPermissionPanelComponent.prototype.debounceSearch;
    /** @type {?} */
    AddPermissionPanelComponent.prototype.selectedItems;
    /** @type {?} */
    AddPermissionPanelComponent.prototype.EVERYONE;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXBlcm1pc3Npb24tcGFuZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicGVybWlzc2lvbi1tYW5hZ2VyL2NvbXBvbmVudHMvYWRkLXBlcm1pc3Npb24vYWRkLXBlcm1pc3Npb24tcGFuZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUYsT0FBTyxFQUFFLGFBQWEsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVk3QyxNQUFNLE9BQU8sMkJBQTJCO0lBaUJwQzs7OztRQVZBLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUvQyxnQkFBVyxHQUFnQixJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQzdDLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLG1CQUFjLEdBQVcsR0FBRyxDQUFDO1FBRTdCLGtCQUFhLEdBQWdCLEVBQUUsQ0FBQztRQUVoQyxhQUFRLEdBQWMsSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDO1FBR2pHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWTthQUM1QixJQUFJLENBQ0QsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FDcEM7YUFDQSxTQUFTOzs7O1FBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztZQUNoQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDOUI7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsY0FBYyxDQUFDLElBQWU7UUFDMUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEU7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7OztJQUVPLGlCQUFpQixDQUFDLElBQWU7UUFDckMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQy9CLENBQUM7OztZQXpESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsNHNGQUFvRDtnQkFFcEQsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFNBQVMsRUFBRTtvQkFDUCxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsb0NBQW9DLEVBQUU7b0JBQ3ZGLGFBQWE7aUJBQ2hCOzthQUNKOzs7OztxQkFHSSxTQUFTLFNBQUMsUUFBUTtxQkFJbEIsTUFBTTs7OztJQUpQLDZDQUN3Qjs7Ozs7SUFHeEIsNkNBQytDOztJQUUvQyxrREFBNkM7O0lBQzdDLG1EQUFrQjs7SUFDbEIscURBQTZCOztJQUU3QixvREFBZ0M7O0lBRWhDLCtDQUFxRyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlYXJjaFBlcm1pc3Npb25Db25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4vc2VhcmNoLWNvbmZpZy1wZXJtaXNzaW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VhcmNoU2VydmljZSwgU2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgU2VhcmNoQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vc2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5vZGVFbnRyeSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1hZGQtcGVybWlzc2lvbi1wYW5lbCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2FkZC1wZXJtaXNzaW9uLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9hZGQtcGVybWlzc2lvbi1wYW5lbC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogU2VhcmNoQ29uZmlndXJhdGlvblNlcnZpY2UsIHVzZUNsYXNzOiBTZWFyY2hQZXJtaXNzaW9uQ29uZmlndXJhdGlvblNlcnZpY2UgfSxcbiAgICAgICAgU2VhcmNoU2VydmljZVxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgQWRkUGVybWlzc2lvblBhbmVsQ29tcG9uZW50IHtcblxuICAgIEBWaWV3Q2hpbGQoJ3NlYXJjaCcpXG4gICAgc2VhcmNoOiBTZWFyY2hDb21wb25lbnQ7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgcGVybWlzc2lvbiBsaXN0IGl0ZW0gaXMgc2VsZWN0ZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgc2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHNlYXJjaElucHV0OiBGb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuICAgIHNlYXJjaGVkV29yZCA9ICcnO1xuICAgIGRlYm91bmNlU2VhcmNoOiBudW1iZXIgPSAyMDA7XG5cbiAgICBzZWxlY3RlZEl0ZW1zOiBOb2RlRW50cnlbXSA9IFtdO1xuXG4gICAgRVZFUllPTkU6IE5vZGVFbnRyeSA9IG5ldyBOb2RlRW50cnkoeyBlbnRyeTogeyBwcm9wZXJ0aWVzOiB7J2NtOmF1dGhvcml0eU5hbWUnOiAnR1JPVVBfRVZFUllPTkUnfX19KTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNlYXJjaElucHV0LnZhbHVlQ2hhbmdlc1xuICAgICAgICAucGlwZShcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSh0aGlzLmRlYm91bmNlU2VhcmNoKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKHNlYXJjaFZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGVkV29yZCA9IHNlYXJjaFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFzZWFyY2hWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoLnJlc2V0UmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlbGVtZW50Q2xpY2tlZChpdGVtOiBOb2RlRW50cnkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbHJlYWR5U2VsZWN0ZWQoaXRlbSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtcy5zcGxpY2UodGhpcy5zZWxlY3RlZEl0ZW1zLmluZGV4T2YoaXRlbSksIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3QuZW1pdCh0aGlzLnNlbGVjdGVkSXRlbXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNBbHJlYWR5U2VsZWN0ZWQoaXRlbTogTm9kZUVudHJ5KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbXMuaW5kZXhPZihpdGVtKSA+PSAwO1xuICAgIH1cblxuICAgIGNsZWFyU2VhcmNoKCkge1xuICAgICAgICB0aGlzLnNlYXJjaGVkV29yZCA9ICcnO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbXMuc3BsaWNlKDAsIHRoaXMuc2VsZWN0ZWRJdGVtcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnNlYXJjaC5yZXNldFJlc3VsdHMoKTtcbiAgICB9XG5cbn1cbiJdfQ==