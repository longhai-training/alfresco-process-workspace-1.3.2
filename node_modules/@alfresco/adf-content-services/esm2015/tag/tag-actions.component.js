/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { TranslationService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
/**
 *
 * This component, provide a list of the tags relative a node with actions button to add or remove new tag
 */
export class TagActionsComponent {
    /**
     * @param {?} tagService
     * @param {?} translateService
     */
    constructor(tagService, translateService) {
        this.tagService = tagService;
        this.translateService = translateService;
        /**
         * Emitted when a tag is added successfully.
         */
        this.successAdd = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an action is chosen.
         */
        this.result = new EventEmitter();
        this.disableAddTag = true;
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.tagService.refresh.subscribe((/**
         * @return {?}
         */
        () => {
            this.refreshTag();
        })));
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        return this.refreshTag();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    refreshTag() {
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe((/**
             * @param {?} tagPaging
             * @return {?}
             */
            (tagPaging) => {
                this.tagsEntries = tagPaging.list.entries;
                this.disableAddTag = false;
                this.result.emit(this.tagsEntries);
            }), (/**
             * @return {?}
             */
            () => {
                this.tagsEntries = null;
                this.disableAddTag = true;
                this.result.emit(this.tagsEntries);
            }));
        }
    }
    /**
     * @return {?}
     */
    addTag() {
        if (this.searchTag(this.newTagName)) {
            this.translateService.get('TAG.MESSAGES.EXIST').subscribe((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.errorMsg = error;
            }));
            this.error.emit(this.errorMsg);
        }
        else {
            this.tagService.addTag(this.nodeId, this.newTagName).subscribe((/**
             * @return {?}
             */
            () => {
                this.newTagName = '';
                this.successAdd.emit(this.nodeId);
            }));
        }
    }
    /**
     * @param {?} searchTagName
     * @return {?}
     */
    searchTag(searchTagName) {
        if (this.tagsEntries) {
            return this.tagsEntries.find((/**
             * @param {?} currentTag
             * @return {?}
             */
            (currentTag) => {
                return (searchTagName === currentTag.entry.tag);
            }));
        }
    }
    /**
     * @return {?}
     */
    cleanErrorMsg() {
        this.errorMsg = '';
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    removeTag(tag) {
        this.tagService.removeTag(this.nodeId, tag);
    }
}
TagActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tag-node-actions-list',
                template: "<mat-list>\n    <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{currentEntry.entry.tag}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n            <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{currentEntry.entry.tag}}\">\n                {{currentEntry.entry.tag}}\n            </div>\n            <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n        </div>\n    </mat-list-item>\n</mat-list>\n<table class=\"adf-full-width\" cellspacing=\"0\">\n    <tr>\n        <td>\n            <mat-form-field class=\"adf-full-width\">\n                <input matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                       type=\"text\"\n                       (keypress)=\"cleanErrorMsg()\"\n                       [(ngModel)]=\"newTagName\"\n                       id=\"new-tag-text\"/>\n                <mat-hint data-automation-id=\"errorMessage\" *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n            </mat-form-field>\n        </td>\n        <td>\n            <button class=\"adf-full-width\" color=\"primary\" id=\"add-tag\" (click)=\"addTag()\" [disabled]=\"disableAddTag\"\n                    mat-raised-button>\n                {{'TAG.BUTTON.ADD' | translate }}\n            </button>\n        </td>\n    </tr>\n</table>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-full-width{width:100%}.adf-tag-actions-delete-icon{float:right;cursor:pointer}.adf-tag-actions-delete-text{font-size:16px;float:left}.adf-tag-actions-container{padding:8px 0;height:20px}"]
            }] }
];
/** @nocollapse */
TagActionsComponent.ctorParameters = () => [
    { type: TagService },
    { type: TranslationService }
];
TagActionsComponent.propDecorators = {
    nodeId: [{ type: Input }],
    successAdd: [{ type: Output }],
    error: [{ type: Output }],
    result: [{ type: Output }]
};
if (false) {
    /**
     * The identifier of a node.
     * @type {?}
     */
    TagActionsComponent.prototype.nodeId;
    /**
     * Emitted when a tag is added successfully.
     * @type {?}
     */
    TagActionsComponent.prototype.successAdd;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TagActionsComponent.prototype.error;
    /**
     * Emitted when an action is chosen.
     * @type {?}
     */
    TagActionsComponent.prototype.result;
    /** @type {?} */
    TagActionsComponent.prototype.newTagName;
    /** @type {?} */
    TagActionsComponent.prototype.tagsEntries;
    /** @type {?} */
    TagActionsComponent.prototype.errorMsg;
    /** @type {?} */
    TagActionsComponent.prototype.disableAddTag;
    /**
     * @type {?}
     * @private
     */
    TagActionsComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    TagActionsComponent.prototype.tagService;
    /**
     * @type {?}
     * @private
     */
    TagActionsComponent.prototype.translateService;
}
//# sourceMappingURL=data:application/json;base64,