/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { SitesService, LogService } from '@alfresco/adf-core';
import { SitePaging, SiteEntry } from '@alfresco/js-api';
import { MatSelect } from '@angular/material';
/** @enum {string} */
const Relations = {
    Members: 'members',
    Containers: 'containers',
};
export { Relations };
export class DropdownSitesComponent {
    /**
     * @param {?} sitesService
     * @param {?} logService
     */
    constructor(sitesService, logService) {
        this.sitesService = sitesService;
        this.logService = logService;
        /**
         * Hide the "My Files" option.
         */
        this.hideMyFiles = false;
        /**
         * A custom list of sites to be displayed by the dropdown. If no value
         * is given, the sites of the current user are displayed by default. A
         * list of objects only with properties 'title' and 'guid' is enough to
         * be able to display the dropdown.
         */
        this.siteList = null;
        /**
         * Id of the selected site
         */
        this.value = null;
        /**
         * Text or a translation key to act as a placeholder. Default value is the
         * key "DROPDOWN.PLACEHOLDER_LABEL".
         */
        this.placeholder = 'DROPDOWN.PLACEHOLDER_LABEL';
        /**
         * Emitted when the user selects a site. When the default option is selected,
         * an empty model is emitted.
         */
        this.change = new EventEmitter();
        this.loading = true;
        this.skipCount = 0;
        this.MAX_ITEMS = 50;
        this.ITEM_HEIGHT = 45;
        this.ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT = (this.ITEM_HEIGHT * (this.MAX_ITEMS / 2));
        this.selected = null;
        this.MY_FILES_VALUE = '-my-';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.siteSelect.openedChange.subscribe((/**
         * @return {?}
         */
        () => {
            if (this.siteSelect.panelOpen) {
                this.siteSelect.panel.nativeElement.addEventListener('scroll', (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => this.loadAllOnScroll(event)));
            }
        }));
        if (!this.siteList) {
            this.loadSiteList();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    loadAllOnScroll(event) {
        if (this.isInfiniteScrollingEnabled() && this.isScrollInNextFetchArea(event)) {
            this.loading = true;
            this.loadSiteList();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    isScrollInNextFetchArea(event) {
        return event.target.scrollTop >= (event.target.scrollHeight - event.target.offsetHeight - this.ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectedSite(event) {
        this.change.emit(event.value);
    }
    /**
     * @private
     * @return {?}
     */
    loadSiteList() {
        /** @type {?} */
        const extendedOptions = {
            skipCount: this.skipCount,
            maxItems: this.MAX_ITEMS
        };
        this.skipCount += this.MAX_ITEMS;
        if (this.relations) {
            extendedOptions.relations = [this.relations];
        }
        this.sitesService.getSites(extendedOptions).subscribe((/**
         * @param {?} sitePaging
         * @return {?}
         */
        (sitePaging) => {
            if (!this.siteList) {
                this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;
                if (!this.hideMyFiles) {
                    /** @type {?} */
                    const siteEntry = new SiteEntry({
                        entry: {
                            id: '-my-',
                            guid: '-my-',
                            title: 'DROPDOWN.MY_FILES_OPTION'
                        }
                    });
                    this.siteList.list.entries.unshift(siteEntry);
                    if (!this.value) {
                        this.value = '-my-';
                    }
                }
            }
            else {
                /** @type {?} */
                const siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;
                this.siteList.list.entries = this.siteList.list.entries.concat(siteList.list.entries);
                this.siteList.list.pagination = sitePaging.list.pagination;
            }
            this.selected = this.siteList.list.entries.find((/**
             * @param {?} site
             * @return {?}
             */
            (site) => site.entry.id === this.value));
            this.loading = false;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.logService.error(error);
        }));
    }
    /**
     * @return {?}
     */
    showLoading() {
        return this.loading && (this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems);
    }
    /**
     * @return {?}
     */
    isInfiniteScrollingEnabled() {
        return !this.loading && (this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems);
    }
    /**
     * @private
     * @param {?} sites
     * @return {?}
     */
    filteredResultsByMember(sites) {
        /** @type {?} */
        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();
        sites.list.entries = sites.list.entries.filter((/**
         * @param {?} site
         * @return {?}
         */
        (site) => this.isCurrentUserMember(site, loggedUserName)));
        return sites;
    }
    /**
     * @private
     * @param {?} site
     * @param {?} loggedUserName
     * @return {?}
     */
    isCurrentUserMember(site, loggedUserName) {
        return site.entry.visibility === 'PUBLIC' ||
            !!site.relations.members.list.entries.find((/**
             * @param {?} member
             * @return {?}
             */
            (member) => {
                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();
            }));
    }
}
DropdownSitesComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-sites-dropdown',
                template: "<div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n    <mat-form-field>\n        <mat-select\n            #siteSelect\n            data-automation-id=\"site-my-files-option\"\n            class=\"adf-site-dropdown-list-element\"\n            id=\"site-dropdown\"\n            placeholder=\"{{placeholder | translate}}\"\n            floatPlaceholder=\"never\"\n            [(value)]=\"selected\"\n            (selectionChange)=\"selectedSite($event)\">\n            <mat-option *ngFor=\"let site of siteList?.list.entries;\" [value]=\"site\">\n                {{ site.entry.title | translate}}\n            </mat-option>\n            <mat-option *ngIf=\"showLoading()\" disabled=\"true\" data-automation-id=\"site-loading\">\n                {{ 'ADF_DROPDOWN.LOADING' | translate}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-sites-dropdown' },
                styles: [".adf-sites-dropdown.adf-full-width .mat-form-field{width:100%}"]
            }] }
];
/** @nocollapse */
DropdownSitesComponent.ctorParameters = () => [
    { type: SitesService },
    { type: LogService }
];
DropdownSitesComponent.propDecorators = {
    hideMyFiles: [{ type: Input }],
    siteList: [{ type: Input }],
    value: [{ type: Input }],
    placeholder: [{ type: Input }],
    relations: [{ type: Input }],
    change: [{ type: Output }],
    siteSelect: [{ type: ViewChild, args: ['siteSelect',] }]
};
if (false) {
    /**
     * Hide the "My Files" option.
     * @type {?}
     */
    DropdownSitesComponent.prototype.hideMyFiles;
    /**
     * A custom list of sites to be displayed by the dropdown. If no value
     * is given, the sites of the current user are displayed by default. A
     * list of objects only with properties 'title' and 'guid' is enough to
     * be able to display the dropdown.
     * @type {?}
     */
    DropdownSitesComponent.prototype.siteList;
    /**
     * Id of the selected site
     * @type {?}
     */
    DropdownSitesComponent.prototype.value;
    /**
     * Text or a translation key to act as a placeholder. Default value is the
     * key "DROPDOWN.PLACEHOLDER_LABEL".
     * @type {?}
     */
    DropdownSitesComponent.prototype.placeholder;
    /**
     * Filter for the results of the sites query. Possible values are
     * "members" and "containers". When "members" is used, the site list
     * will be restricted to the sites that the user is a member of.
     * @type {?}
     */
    DropdownSitesComponent.prototype.relations;
    /**
     * Emitted when the user selects a site. When the default option is selected,
     * an empty model is emitted.
     * @type {?}
     */
    DropdownSitesComponent.prototype.change;
    /** @type {?} */
    DropdownSitesComponent.prototype.siteSelect;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.skipCount;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.MAX_ITEMS;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.ITEM_HEIGHT;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT;
    /** @type {?} */
    DropdownSitesComponent.prototype.selected;
    /** @type {?} */
    DropdownSitesComponent.prototype.MY_FILES_VALUE;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.sitesService;
    /**
     * @type {?}
     * @private
     */
    DropdownSitesComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,