/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Subject, from } from 'rxjs';
import { Component, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialogRef } from '@angular/material';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { debounceTime, mergeMap, takeUntil } from 'rxjs/operators';
export class LibraryDialogComponent {
    /**
     * @param {?} alfrescoApiService
     * @param {?} formBuilder
     * @param {?} dialog
     */
    constructor(alfrescoApiService, formBuilder, dialog) {
        this.alfrescoApiService = alfrescoApiService;
        this.formBuilder = formBuilder;
        this.dialog = dialog;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the new library is created successfully. The
         * event parameter is a SiteEntry object with the details of the
         * newly-created library.
         */
        this.success = new EventEmitter();
        this.onDestroy$ = new Subject();
        this.createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';
        this.libraryTitleExists = false;
        this.visibilityOptions = [
            { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },
            { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },
            {
                value: 'MODERATED',
                label: 'LIBRARY.VISIBILITY.MODERATED',
                disabled: false
            }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const validators = {
            id: [
                Validators.required,
                Validators.maxLength(72),
                this.forbidSpecialCharacters
            ],
            title: [
                Validators.required,
                this.forbidOnlySpaces,
                Validators.minLength(2),
                Validators.maxLength(256)
            ],
            description: [Validators.maxLength(512)]
        };
        this.form = this.formBuilder.group({
            title: [null, validators.title],
            id: [null, validators.id, this.createSiteIdValidator()],
            description: ['', validators.description]
        });
        this.visibilityOption = this.visibilityOptions[0].value;
        this.form.controls['title'].valueChanges
            .pipe(debounceTime(300), mergeMap((/**
         * @param {?} title
         * @return {?}
         */
        (title) => this.checkLibraryNameExists(title)), (/**
         * @param {?} title
         * @return {?}
         */
        (title) => title)), takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} title
         * @return {?}
         */
        (title) => {
            if (!this.form.controls['id'].dirty && this.canGenerateId(title)) {
                this.form.patchValue({ id: this.sanitize(title.trim()) });
                this.form.controls['id'].markAsTouched();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @return {?}
     */
    get title() {
        const { title } = this.form.value;
        return (title || '').trim();
    }
    /**
     * @return {?}
     */
    get id() {
        const { id } = this.form.value;
        return (id || '').trim();
    }
    /**
     * @return {?}
     */
    get description() {
        const { description } = this.form.value;
        return (description || '').trim();
    }
    /**
     * @return {?}
     */
    get visibility() {
        return this.visibilityOption || '';
    }
    /**
     * @return {?}
     */
    submit() {
        const { form, dialog } = this;
        if (!form.valid) {
            return;
        }
        this.create().subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            this.success.emit(node);
            dialog.close(node);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => this.handleError(error)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    visibilityChangeHandler(event) {
        this.visibilityOption = event.value;
    }
    /**
     * @private
     * @return {?}
     */
    create() {
        const { title, id, description, visibility } = this;
        /** @type {?} */
        const siteBody = (/** @type {?} */ ({
            id,
            title,
            description,
            visibility
        }));
        return from(this.alfrescoApiService.sitesApi.createSite(siteBody));
    }
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    sanitize(input) {
        return input.replace(/[\s\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');
    }
    /**
     * @private
     * @param {?} title
     * @return {?}
     */
    canGenerateId(title) {
        return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        const { error: { statusCode } } = JSON.parse(error.message);
        if (statusCode === 409) {
            this.form.controls['id'].setErrors({
                message: 'LIBRARY.ERRORS.CONFLICT'
            });
        }
        return error;
    }
    /**
     * @private
     * @param {?} libraryTitle
     * @return {?}
     */
    checkLibraryNameExists(libraryTitle) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let entries = [];
            try {
                entries = (yield this.findLibraryByTitle(libraryTitle)).list.entries;
            }
            catch (_a) {
                entries = [];
            }
            if (entries.length) {
                this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();
            }
            else {
                this.libraryTitleExists = false;
            }
        });
    }
    /**
     * @private
     * @param {?} libraryTitle
     * @return {?}
     */
    findLibraryByTitle(libraryTitle) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.alfrescoApiService
                .getInstance()
                .core.queriesApi.findSites(libraryTitle, {
                maxItems: 1,
                fields: ['title']
            });
        });
    }
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    forbidSpecialCharacters({ value }) {
        if (value === null || value.length === 0) {
            return null;
        }
        /** @type {?} */
        const validCharacters = /[^A-Za-z0-9-]/;
        /** @type {?} */
        const isValid = !validCharacters.test(value);
        return isValid
            ? null
            : {
                message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'
            };
    }
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    forbidOnlySpaces({ value }) {
        if (value === null || value.length === 0) {
            return null;
        }
        /** @type {?} */
        const isValid = !!(value || '').trim();
        return isValid
            ? null
            : {
                message: 'LIBRARY.ERRORS.ONLY_SPACES'
            };
    }
    /**
     * @private
     * @return {?}
     */
    createSiteIdValidator() {
        /** @type {?} */
        let timer;
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            if (timer) {
                clearTimeout(timer);
            }
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            (resolve) => {
                timer = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    return from(this.alfrescoApiService.sitesApi.getSite(control.value)).subscribe((/**
                     * @return {?}
                     */
                    () => resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' })), (/**
                     * @return {?}
                     */
                    () => resolve(null)));
                }), 300);
            }));
        });
    }
}
LibraryDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-library-dialog',
                template: "<h2 mat-dialog-title>{{ createTitle | translate }}</h2>\n\n<mat-dialog-content>\n  <form novalidate [formGroup]=\"form\" (submit)=\"submit()\">\n    <mat-form-field>\n      <input\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.NAME' | translate }}\"\n        required\n        matInput\n        autofocus\n        formControlName=\"title\"\n        autocomplete=\"off\"\n      />\n\n      <mat-hint *ngIf=\"libraryTitleExists\">{{\n        'LIBRARY.HINTS.SITE_TITLE_EXISTS' | translate\n      }}</mat-hint>\n      <mat-error *ngIf=\"form.controls['title'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_LONG' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].hasError('minlength')\">\n        {{ 'LIBRARY.ERRORS.TITLE_TOO_SHORT' | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['title'].errors?.message\">\n        {{ form.controls['title'].errors?.message | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        required\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.SITE_ID' | translate }}\"\n        matInput\n        formControlName=\"id\"\n        autocomplete=\"off\"\n      />\n\n      <mat-error *ngIf=\"form.controls['id'].errors?.message\">\n        {{ form.controls['id'].errors?.message | translate }}\n      </mat-error>\n\n      <mat-error *ngIf=\"form.controls['id'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.ID_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <textarea\n        matInput\n        placeholder=\"{{ 'LIBRARY.DIALOG.FORM.DESCRIPTION' | translate }}\"\n        rows=\"3\"\n        formControlName=\"description\"\n      ></textarea>\n\n      <mat-error *ngIf=\"form.controls['description'].hasError('maxlength')\">\n        {{ 'LIBRARY.ERRORS.DESCRIPTION_TOO_LONG' | translate }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-radio-group\n      [ngModelOptions]=\"{ standalone: true }\"\n      [(ngModel)]=\"visibilityOption\"\n      (change)=\"visibilityChangeHandler($event)\"\n    >\n      <mat-radio-button\n        color=\"primary\"\n        [disabled]=\"option.disabled\"\n        *ngFor=\"let option of visibilityOptions\"\n        [attr.data-automation-id]=\"option.value\"\n        [value]=\"option.value\"\n        [checked]=\"visibilityOption.value === option.value\"\n      >\n        {{ option.label | translate }}\n      </mat-radio-button>\n    </mat-radio-group>\n  </form>\n</mat-dialog-content>\n\n<mat-dialog-actions class=\"adf-action-buttons\">\n  <button mat-button mat-dialog-close data-automation-id=\"cancel-library-id\">\n    {{ 'LIBRARY.DIALOG.CANCEL' | translate }}\n  </button>\n\n  <button\n    color=\"primary\"\n    mat-button\n    (click)=\"submit()\"\n    [disabled]=\"!form.valid\"\n    data-automation-id=\"create-library-id\"\n  >\n    {{ 'LIBRARY.DIALOG.CREATE' | translate }}\n  </button>\n</mat-dialog-actions>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-library-dialog' },
                styles: [".adf-library-dialog .mat-radio-group{display:flex;flex-direction:column;margin:0 0 20px}.adf-library-dialog .mat-radio-group .mat-radio-button{margin:10px 0}.adf-library-dialog .mat-form-field{width:100%}.adf-library-dialog mat-form-field{padding-top:20px}.adf-library-dialog .adf-action-buttons{display:flex;flex-direction:row;justify-content:flex-end}.adf-library-dialog .adf-action-buttons .mat-button{text-transform:uppercase}"]
            }] }
];
/** @nocollapse */
LibraryDialogComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: FormBuilder },
    { type: MatDialogRef }
];
LibraryDialogComponent.propDecorators = {
    error: [{ type: Output }],
    success: [{ type: Output }]
};
if (false) {
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    LibraryDialogComponent.prototype.error;
    /**
     * Emitted when the new library is created successfully. The
     * event parameter is a SiteEntry object with the details of the
     * newly-created library.
     * @type {?}
     */
    LibraryDialogComponent.prototype.success;
    /** @type {?} */
    LibraryDialogComponent.prototype.onDestroy$;
    /** @type {?} */
    LibraryDialogComponent.prototype.createTitle;
    /** @type {?} */
    LibraryDialogComponent.prototype.libraryTitleExists;
    /** @type {?} */
    LibraryDialogComponent.prototype.form;
    /** @type {?} */
    LibraryDialogComponent.prototype.visibilityOption;
    /** @type {?} */
    LibraryDialogComponent.prototype.visibilityOptions;
    /**
     * @type {?}
     * @private
     */
    LibraryDialogComponent.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    LibraryDialogComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    LibraryDialogComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,