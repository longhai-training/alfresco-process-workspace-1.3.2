/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getProperty } from './property-group-reader';
export class LayoutOrientedConfigService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    isGroupAllowed(groupName) {
        if (this.isIncludeAllEnabled()) {
            return true;
        }
        return this.getMatchingGroups(groupName).length > 0;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    reorganiseByConfig(propertyGroups) {
        /** @type {?} */
        const layoutBlocks = this.config.filter((/**
         * @param {?} itemsGroup
         * @return {?}
         */
        (itemsGroup) => itemsGroup.items));
        /** @type {?} */
        const organisedPropertyGroup = layoutBlocks.map((/**
         * @param {?} layoutBlock
         * @return {?}
         */
        (layoutBlock) => {
            /** @type {?} */
            const flattenedItems = this.flattenItems(layoutBlock.items);
            /** @type {?} */
            const properties = flattenedItems.reduce((/**
             * @param {?} props
             * @param {?} explodedItem
             * @return {?}
             */
            (props, explodedItem) => {
                /** @type {?} */
                const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];
                return props.concat(property);
            }), []);
            return {
                title: layoutBlock.title,
                properties
            };
        }));
        return organisedPropertyGroup;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    appendAllPreset(propertyGroups) {
        return Object.keys(propertyGroups)
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        (groupName) => {
            /** @type {?} */
            const propertyGroup = propertyGroups[groupName];
            /** @type {?} */
            const properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map((/**
                 * @param {?} propertyName
                 * @return {?}
                 */
                (propertyName) => properties[propertyName]))
            });
        }));
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    filterExcludedPreset(propertyGroups) {
        /** @type {?} */
        let excludedConfig = this.config
            .map((/**
         * @param {?} config
         * @return {?}
         */
        (config) => config.exclude))
            .find((/**
         * @param {?} exclude
         * @return {?}
         */
        (exclude) => exclude !== undefined));
        if (excludedConfig === undefined) {
            excludedConfig = [];
        }
        else if (typeof excludedConfig === 'string') {
            excludedConfig = [excludedConfig];
        }
        return propertyGroups.filter((/**
         * @param {?} props
         * @return {?}
         */
        (props) => {
            return !excludedConfig.includes(props.name);
        }));
    }
    /**
     * @return {?}
     */
    isIncludeAllEnabled() {
        /** @type {?} */
        const includeAllProperty = this.config
            .map((/**
         * @param {?} config
         * @return {?}
         */
        (config) => config.includeAll))
            .find((/**
         * @param {?} includeAll
         * @return {?}
         */
        (includeAll) => includeAll !== undefined));
        return includeAllProperty !== undefined ? includeAllProperty : false;
    }
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    flattenItems(items) {
        return items.reduce((/**
         * @param {?} accumulator
         * @param {?} item
         * @return {?}
         */
        (accumulator, item) => {
            /** @type {?} */
            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];
            /** @type {?} */
            const flattenedProperties = properties.map((/**
             * @param {?} propertyName
             * @return {?}
             */
            (propertyName) => {
                return {
                    groupName: item.aspect || item.type,
                    propertyName
                };
            }));
            return accumulator.concat(flattenedProperties);
        }), []);
    }
    /**
     * @private
     * @param {?} groupName
     * @return {?}
     */
    getMatchingGroups(groupName) {
        return this.config
            .map((/**
         * @param {?} layoutBlock
         * @return {?}
         */
        (layoutBlock) => layoutBlock.items))
            .reduce((/**
         * @param {?} accumulator
         * @param {?} items
         * @return {?}
         */
        (accumulator, items) => accumulator.concat(items)), [])
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.aspect === groupName || item.type === groupName));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LayoutOrientedConfigService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,