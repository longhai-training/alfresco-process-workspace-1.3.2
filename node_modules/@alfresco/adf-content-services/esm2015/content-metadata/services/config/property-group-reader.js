/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @type {?} */
const emptyGroup = {
    properties: {}
};
/**
 * @param {?} object
 * @return {?}
 */
function convertObjectToArray(object) {
    return Object.keys(object).map((/**
     * @param {?} key
     * @return {?}
     */
    (key) => object[key]));
}
/**
 * @param {?} propertyGroups
 * @param {?} groupName
 * @return {?}
 */
export function getGroup(propertyGroups, groupName) {
    return propertyGroups[groupName];
}
/**
 * @param {?} propertyGroups
 * @param {?} groupName
 * @param {?} propertyName
 * @return {?}
 */
export function getProperty(propertyGroups, groupName, propertyName) {
    /** @type {?} */
    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;
    /** @type {?} */
    let propertyDefinitions;
    if (propertyName === '*') {
        propertyDefinitions = convertObjectToArray(groupDefinition.properties);
    }
    else {
        propertyDefinitions = groupDefinition.properties[propertyName];
    }
    return propertyDefinitions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktZ3JvdXAtcmVhZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb25maWcvcHJvcGVydHktZ3JvdXAtcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQW1CTSxVQUFVLEdBQUc7SUFDZixVQUFVLEVBQUUsRUFBRTtDQUNqQjs7Ozs7QUFFRCxTQUFTLG9CQUFvQixDQUFDLE1BQVc7SUFDckMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUc7Ozs7SUFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUM7QUFDekQsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxjQUFzQyxFQUFFLFNBQWlCO0lBQzlFLE9BQU8sY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLGNBQXNDLEVBQUUsU0FBaUIsRUFBRSxZQUFvQjs7VUFDakcsZUFBZSxHQUFHLFFBQVEsQ0FBQyxjQUFjLEVBQUUsU0FBUyxDQUFDLElBQUksVUFBVTs7UUFDckUsbUJBQW1CO0lBRXZCLElBQUksWUFBWSxLQUFLLEdBQUcsRUFBRTtRQUN0QixtQkFBbUIsR0FBRyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUU7U0FBTTtRQUNILG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDbEU7SUFFRCxPQUFPLG1CQUFtQixDQUFDO0FBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQcm9wZXJ0eUdyb3VwLCBQcm9wZXJ0eSwgUHJvcGVydHlHcm91cENvbnRhaW5lciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcblxuY29uc3QgZW1wdHlHcm91cCA9IHtcbiAgICBwcm9wZXJ0aWVzOiB7fVxufTtcblxuZnVuY3Rpb24gY29udmVydE9iamVjdFRvQXJyYXkob2JqZWN0OiBhbnkpOiBQcm9wZXJ0eVtdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqZWN0KS5tYXAoKGtleSkgPT4gb2JqZWN0W2tleV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JvdXAocHJvcGVydHlHcm91cHM6IFByb3BlcnR5R3JvdXBDb250YWluZXIsIGdyb3VwTmFtZTogc3RyaW5nKTogUHJvcGVydHlHcm91cCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHByb3BlcnR5R3JvdXBzW2dyb3VwTmFtZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wZXJ0eShwcm9wZXJ0eUdyb3VwczogUHJvcGVydHlHcm91cENvbnRhaW5lciwgZ3JvdXBOYW1lOiBzdHJpbmcsIHByb3BlcnR5TmFtZTogc3RyaW5nKTogUHJvcGVydHkgfCBQcm9wZXJ0eVtdIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBncm91cERlZmluaXRpb24gPSBnZXRHcm91cChwcm9wZXJ0eUdyb3VwcywgZ3JvdXBOYW1lKSB8fCBlbXB0eUdyb3VwO1xuICAgIGxldCBwcm9wZXJ0eURlZmluaXRpb25zO1xuXG4gICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJyonKSB7XG4gICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbnMgPSBjb252ZXJ0T2JqZWN0VG9BcnJheShncm91cERlZmluaXRpb24ucHJvcGVydGllcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcGVydHlEZWZpbml0aW9ucyA9IGdyb3VwRGVmaW5pdGlvbi5wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BlcnR5RGVmaW5pdGlvbnM7XG59XG4iXX0=