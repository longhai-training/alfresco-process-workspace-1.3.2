/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AppConfigService, LogService } from '@alfresco/adf-core';
import { AspectOrientedConfigService } from './aspect-oriented-config.service';
import { IndifferentConfigService } from './indifferent-config.service';
import { LayoutOrientedConfigService } from './layout-oriented-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ContentMetadataConfigFactory {
    /**
     * @param {?} appConfigService
     * @param {?} logService
     */
    constructor(appConfigService, logService) {
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    /**
     * @param {?=} presetName
     * @return {?}
     */
    get(presetName = 'default') {
        /** @type {?} */
        let presetConfig;
        try {
            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];
        }
        catch (_a) {
            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {
                this.logService.error(`No content-metadata preset for: ${presetName}`);
            }
            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;
        }
        return this.createConfig(presetConfig);
    }
    /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    createConfig(presetConfig) {
        /** @type {?} */
        let config;
        if (this.isLayoutOrientedPreset(presetConfig)) {
            config = new LayoutOrientedConfigService((/** @type {?} */ (presetConfig)));
        }
        else if (this.isAspectOrientedPreset(presetConfig)) {
            config = new AspectOrientedConfigService((/** @type {?} */ (presetConfig)));
        }
        else {
            config = new IndifferentConfigService((/** @type {?} */ (presetConfig)));
        }
        Object.freeze(config);
        return config;
    }
    /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    isAspectOrientedPreset(presetConfig) {
        return this.isObject(presetConfig);
    }
    /**
     * @private
     * @param {?} presetConfig
     * @return {?}
     */
    isLayoutOrientedPreset(presetConfig) {
        return Array.isArray(presetConfig);
    }
    /**
     * @private
     * @param {?} x
     * @return {?}
     */
    isObject(x) {
        return x != null && typeof x === 'object';
    }
}
ContentMetadataConfigFactory.INDIFFERENT_PRESET = '*';
ContentMetadataConfigFactory.DEFAULT_PRESET_NAME = 'default';
ContentMetadataConfigFactory.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentMetadataConfigFactory.ctorParameters = () => [
    { type: AppConfigService },
    { type: LogService }
];
/** @nocollapse */ ContentMetadataConfigFactory.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataConfigFactory_Factory() { return new ContentMetadataConfigFactory(i0.inject(i1.AppConfigService), i0.inject(i1.LogService)); }, token: ContentMetadataConfigFactory, providedIn: "root" });
if (false) {
    /** @type {?} */
    ContentMetadataConfigFactory.INDIFFERENT_PRESET;
    /** @type {?} */
    ContentMetadataConfigFactory.DEFAULT_PRESET_NAME;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataConfigFactory.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataConfigFactory.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jb25maWcuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQVkvRSxNQUFNLE9BQU8sNEJBQTRCOzs7OztJQUtyQyxZQUFvQixnQkFBa0MsRUFBVSxVQUFzQjtRQUFsRSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7Ozs7O0lBRW5GLEdBQUcsQ0FBQyxhQUFxQixTQUFTOztZQUNqQyxZQUFZO1FBQ2hCLElBQUk7WUFDQSxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2RjtRQUFDLFdBQU07WUFDSixJQUFJLFVBQVUsS0FBSyw0QkFBNEIsQ0FBQyxtQkFBbUIsRUFBRTtnQkFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUNBQW1DLFVBQVUsRUFBRSxDQUFDLENBQUM7YUFDMUU7WUFDRCxZQUFZLEdBQUcsNEJBQTRCLENBQUMsa0JBQWtCLENBQUM7U0FDbEU7UUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7O0lBRU8sWUFBWSxDQUFDLFlBQTBCOztZQUN2QyxNQUE2QjtRQUVqQyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUMzQyxNQUFNLEdBQUcsSUFBSSwyQkFBMkIsQ0FBQyxtQkFBdUIsWUFBWSxFQUFBLENBQUMsQ0FBQztTQUNqRjthQUFNLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2xELE1BQU0sR0FBRyxJQUFJLDJCQUEyQixDQUFDLG1CQUF1QixZQUFZLEVBQUEsQ0FBQyxDQUFDO1NBQ2pGO2FBQU07WUFDSCxNQUFNLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxtQkFBb0IsWUFBWSxFQUFBLENBQUMsQ0FBQztTQUMzRTtRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7Ozs7O0lBRU8sc0JBQXNCLENBQUMsWUFBMEI7UUFDckQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7OztJQUVPLHNCQUFzQixDQUFDLFlBQTBCO1FBQ3JELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7Ozs7SUFFTyxRQUFRLENBQUMsQ0FBQztRQUNkLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7SUFDOUMsQ0FBQzs7QUE1Q2UsK0NBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQ3pCLGdEQUFtQixHQUFHLFNBQVMsQ0FBQzs7WUFObkQsVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBZFEsZ0JBQWdCO1lBQUUsVUFBVTs7Ozs7SUFpQmpDLGdEQUF5Qzs7SUFDekMsaURBQWdEOzs7OztJQUVwQyx3REFBMEM7Ozs7O0lBQUUsa0RBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSwgTG9nU2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBBc3BlY3RPcmllbnRlZENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2FzcGVjdC1vcmllbnRlZC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBJbmRpZmZlcmVudENvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2luZGlmZmVyZW50LWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IExheW91dE9yaWVudGVkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vbGF5b3V0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgUHJlc2V0Q29uZmlnLFxuICAgIENvbnRlbnRNZXRhZGF0YUNvbmZpZyxcbiAgICBBc3BlY3RPcmllbnRlZENvbmZpZyxcbiAgICBJbkRpZmZlcmVudENvbmZpZyxcbiAgICBMYXlvdXRPcmllbnRlZENvbmZpZ1xufSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2NvbnRlbnQtbWV0YWRhdGEuaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeSB7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgSU5ESUZGRVJFTlRfUFJFU0VUID0gJyonO1xuICAgIHN0YXRpYyByZWFkb25seSBERUZBVUxUX1BSRVNFVF9OQU1FID0gJ2RlZmF1bHQnO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHBDb25maWdTZXJ2aWNlOiBBcHBDb25maWdTZXJ2aWNlLCBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHt9XG5cbiAgICBwdWJsaWMgZ2V0KHByZXNldE5hbWU6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IENvbnRlbnRNZXRhZGF0YUNvbmZpZyB7XG4gICAgICAgIGxldCBwcmVzZXRDb25maWc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVzZXRDb25maWcgPSB0aGlzLmFwcENvbmZpZ1NlcnZpY2UuY29uZmlnWydjb250ZW50LW1ldGFkYXRhJ10ucHJlc2V0c1twcmVzZXROYW1lXTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBpZiAocHJlc2V0TmFtZSAhPT0gQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeS5ERUZBVUxUX1BSRVNFVF9OQU1FKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGBObyBjb250ZW50LW1ldGFkYXRhIHByZXNldCBmb3I6ICR7cHJlc2V0TmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXNldENvbmZpZyA9IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkuSU5ESUZGRVJFTlRfUFJFU0VUO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ29uZmlnKHByZXNldENvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVDb25maWcocHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWcpOiBDb250ZW50TWV0YWRhdGFDb25maWcge1xuICAgICAgICBsZXQgY29uZmlnOiBDb250ZW50TWV0YWRhdGFDb25maWc7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNMYXlvdXRPcmllbnRlZFByZXNldChwcmVzZXRDb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcgPSBuZXcgTGF5b3V0T3JpZW50ZWRDb25maWdTZXJ2aWNlKDxMYXlvdXRPcmllbnRlZENvbmZpZz4gcHJlc2V0Q29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQXNwZWN0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnID0gbmV3IEFzcGVjdE9yaWVudGVkQ29uZmlnU2VydmljZSg8QXNwZWN0T3JpZW50ZWRDb25maWc+IHByZXNldENvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcgPSBuZXcgSW5kaWZmZXJlbnRDb25maWdTZXJ2aWNlKDxJbkRpZmZlcmVudENvbmZpZz4gcHJlc2V0Q29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5mcmVlemUoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzQXNwZWN0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNPYmplY3QocHJlc2V0Q29uZmlnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzTGF5b3V0T3JpZW50ZWRQcmVzZXQocHJlc2V0Q29uZmlnOiBQcmVzZXRDb25maWcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocHJlc2V0Q29uZmlnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzT2JqZWN0KHgpIHtcbiAgICAgICAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG4gICAgfVxufVxuIl19