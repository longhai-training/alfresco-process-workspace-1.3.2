/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getGroup, getProperty } from './property-group-reader';
export class AspectOrientedConfigService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    isGroupAllowed(groupName) {
        if (this.isIncludeAllEnabled()) {
            return true;
        }
        /** @type {?} */
        const groupNames = Object.keys(this.config);
        return groupNames.indexOf(groupName) !== -1;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    reorganiseByConfig(propertyGroups) {
        /** @type {?} */
        const aspects = this.config;
        /** @type {?} */
        const aspectNames = Object.keys(aspects);
        return aspectNames
            .reduce((/**
         * @param {?} groupAccumulator
         * @param {?} aspectName
         * @return {?}
         */
        (groupAccumulator, aspectName) => {
            /** @type {?} */
            const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);
            return groupAccumulator.concat(newGroup);
        }), [])
            .filter((/**
         * @param {?} organisedPropertyGroup
         * @return {?}
         */
        (organisedPropertyGroup) => organisedPropertyGroup.properties.length > 0));
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    appendAllPreset(propertyGroups) {
        /** @type {?} */
        const groups = Object.keys(propertyGroups)
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        (groupName) => {
            /** @type {?} */
            const propertyGroup = propertyGroups[groupName];
            /** @type {?} */
            const properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map((/**
                 * @param {?} propertyName
                 * @return {?}
                 */
                (propertyName) => properties[propertyName]))
            });
        }));
        return groups;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    filterExcludedPreset(propertyGroups) {
        if (this.config.exclude) {
            return propertyGroups.filter((/**
             * @param {?} preset
             * @return {?}
             */
            (preset) => {
                return !this.config.exclude.includes(preset.name);
            }));
        }
        return propertyGroups;
    }
    /**
     * @return {?}
     */
    isIncludeAllEnabled() {
        return this.config.includeAll;
    }
    /**
     * @private
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    getOrganisedPropertyGroup(propertyGroups, aspectName) {
        /** @type {?} */
        const group = getGroup(propertyGroups, aspectName);
        /** @type {?} */
        let newGroup = [];
        if (group) {
            /** @type {?} */
            const aspectProperties = this.config[aspectName];
            /** @type {?} */
            let properties;
            if (aspectProperties === '*') {
                properties = getProperty(propertyGroups, aspectName, aspectProperties);
            }
            else {
                properties = ((/** @type {?} */ (aspectProperties)))
                    .map((/**
                 * @param {?} propertyName
                 * @return {?}
                 */
                (propertyName) => getProperty(propertyGroups, aspectName, propertyName)))
                    .filter((/**
                 * @param {?} props
                 * @return {?}
                 */
                (props) => props !== undefined));
            }
            newGroup = [{ title: group.title, properties }];
        }
        return newGroup;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AspectOrientedConfigService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb25maWcvYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEUsTUFBTSxPQUFPLDJCQUEyQjs7OztJQUVwQyxZQUFvQixNQUFXO1FBQVgsV0FBTSxHQUFOLE1BQU0sQ0FBSztJQUFJLENBQUM7Ozs7O0lBRTdCLGNBQWMsQ0FBQyxTQUFpQjtRQUNuQyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O2NBQ0ssVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQyxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxjQUFzQzs7Y0FDdEQsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNOztjQUN2QixXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFdEMsT0FBTyxXQUFXO2FBQ2IsTUFBTTs7Ozs7UUFBQyxDQUFDLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxFQUFFOztrQkFDL0IsUUFBUSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDO1lBQzNFLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLENBQUMsR0FBRSxFQUFFLENBQUM7YUFDTCxNQUFNOzs7O1FBQUMsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUMsQ0FBQztJQUMxRixDQUFDOzs7OztJQUVNLGVBQWUsQ0FBQyxjQUFzQzs7Y0FDbkQsTUFBTSxHQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO2FBQ3RDLEdBQUc7Ozs7UUFBQyxDQUFDLFNBQVMsRUFBRSxFQUFFOztrQkFDVCxhQUFhLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQzs7a0JBQzNDLFVBQVUsR0FBRyxhQUFhLENBQUMsVUFBVTtZQUV6QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGFBQWEsRUFBRTtnQkFDcEMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRzs7OztnQkFBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFDO2FBQ3RGLENBQUMsQ0FBQztRQUNQLENBQUMsRUFBQztRQUVOLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBRU0sb0JBQW9CLENBQUMsY0FBd0M7UUFDaEUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNyQixPQUFPLGNBQWMsQ0FBQyxNQUFNOzs7O1lBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEQsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFTSxtQkFBbUI7UUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUNsQyxDQUFDOzs7Ozs7O0lBRU8seUJBQXlCLENBQUMsY0FBYyxFQUFFLFVBQVU7O2NBQ2xELEtBQUssR0FBRyxRQUFRLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQzs7WUFDOUMsUUFBUSxHQUFHLEVBQUU7UUFFakIsSUFBSSxLQUFLLEVBQUU7O2tCQUNELGdCQUFnQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDOztnQkFDNUMsVUFBVTtZQUVkLElBQUksZ0JBQWdCLEtBQUssR0FBRyxFQUFFO2dCQUMxQixVQUFVLEdBQUcsV0FBVyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzthQUMxRTtpQkFBTTtnQkFDSCxVQUFVLEdBQUcsQ0FBQyxtQkFBVyxnQkFBZ0IsRUFBQSxDQUFDO3FCQUNyQyxHQUFHOzs7O2dCQUFDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsRUFBQztxQkFDNUUsTUFBTTs7OztnQkFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBQyxDQUFDO2FBQy9DO1lBRUQsUUFBUSxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztDQUNKOzs7Ozs7SUF0RWUsNkNBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29udGVudE1ldGFkYXRhQ29uZmlnLCBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwLCBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgZ2V0R3JvdXAsIGdldFByb3BlcnR5IH0gZnJvbSAnLi9wcm9wZXJ0eS1ncm91cC1yZWFkZXInO1xuXG5leHBvcnQgY2xhc3MgQXNwZWN0T3JpZW50ZWRDb25maWdTZXJ2aWNlIGltcGxlbWVudHMgQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBhbnkpIHsgfVxuXG4gICAgcHVibGljIGlzR3JvdXBBbGxvd2VkKGdyb3VwTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmlzSW5jbHVkZUFsbEVuYWJsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGdyb3VwTmFtZXMuaW5kZXhPZihncm91cE5hbWUpICE9PSAtMTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVvcmdhbmlzZUJ5Q29uZmlnKHByb3BlcnR5R3JvdXBzOiBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyKTogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdIHtcbiAgICAgICAgY29uc3QgYXNwZWN0cyA9IHRoaXMuY29uZmlnLFxuICAgICAgICAgICAgYXNwZWN0TmFtZXMgPSBPYmplY3Qua2V5cyhhc3BlY3RzKTtcblxuICAgICAgICByZXR1cm4gYXNwZWN0TmFtZXNcbiAgICAgICAgICAgIC5yZWR1Y2UoKGdyb3VwQWNjdW11bGF0b3IsIGFzcGVjdE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdHcm91cCA9IHRoaXMuZ2V0T3JnYW5pc2VkUHJvcGVydHlHcm91cChwcm9wZXJ0eUdyb3VwcywgYXNwZWN0TmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwQWNjdW11bGF0b3IuY29uY2F0KG5ld0dyb3VwKTtcbiAgICAgICAgICAgIH0sIFtdKVxuICAgICAgICAgICAgLmZpbHRlcigob3JnYW5pc2VkUHJvcGVydHlHcm91cCkgPT4gb3JnYW5pc2VkUHJvcGVydHlHcm91cC5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBhcHBlbmRBbGxQcmVzZXQocHJvcGVydHlHcm91cHM6IFByb3BlcnR5R3JvdXBDb250YWluZXIpOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10ge1xuICAgICAgICBjb25zdCBncm91cHMgPSAgT2JqZWN0LmtleXMocHJvcGVydHlHcm91cHMpXG4gICAgICAgICAgICAubWFwKChncm91cE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cHNbZ3JvdXBOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHByb3BlcnR5R3JvdXAucHJvcGVydGllcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcm9wZXJ0eUdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLm1hcCgocHJvcGVydHlOYW1lKSA9PiBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWx0ZXJFeGNsdWRlZFByZXNldChwcm9wZXJ0eUdyb3VwczogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdKTogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmV4Y2x1ZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3Vwcy5maWx0ZXIoKHByZXNldCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5jb25maWcuZXhjbHVkZS5pbmNsdWRlcyhwcmVzZXQubmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cHM7XG4gICAgfVxuXG4gICAgcHVibGljIGlzSW5jbHVkZUFsbEVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5pbmNsdWRlQWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0T3JnYW5pc2VkUHJvcGVydHlHcm91cChwcm9wZXJ0eUdyb3VwcywgYXNwZWN0TmFtZSkge1xuICAgICAgICBjb25zdCBncm91cCA9IGdldEdyb3VwKHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lKTtcbiAgICAgICAgbGV0IG5ld0dyb3VwID0gW107XG5cbiAgICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCBhc3BlY3RQcm9wZXJ0aWVzID0gdGhpcy5jb25maWdbYXNwZWN0TmFtZV07XG4gICAgICAgICAgICBsZXQgcHJvcGVydGllcztcblxuICAgICAgICAgICAgaWYgKGFzcGVjdFByb3BlcnRpZXMgPT09ICcqJykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBnZXRQcm9wZXJ0eShwcm9wZXJ0eUdyb3VwcywgYXNwZWN0TmFtZSwgYXNwZWN0UHJvcGVydGllcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSAoPHN0cmluZ1tdPiBhc3BlY3RQcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChwcm9wZXJ0eU5hbWUpID0+IGdldFByb3BlcnR5KHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lLCBwcm9wZXJ0eU5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChwcm9wcykgPT4gcHJvcHMgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld0dyb3VwID0gW3sgdGl0bGU6IGdyb3VwLnRpdGxlLCBwcm9wZXJ0aWVzIH1dO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld0dyb3VwO1xuICAgIH1cbn1cbiJdfQ==