/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of, iif } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
export class ContentMetadataService {
    /**
     * @param {?} basicPropertiesService
     * @param {?} contentMetadataConfigFactory
     * @param {?} propertyGroupTranslatorService
     * @param {?} propertyDescriptorsService
     */
    constructor(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getBasicProperties(node) {
        return of(this.basicPropertiesService.getProperties(node));
    }
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    getGroupedProperties(node, presetName = 'default') {
        /** @type {?} */
        let groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            const contentMetadataConfig = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            const groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((/**
             * @param {?} groupName
             * @return {?}
             */
            (groupName) => contentMetadataConfig.isGroupAllowed(groupName)));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(switchMap((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => iif((/**
                 * @return {?}
                 */
                () => contentMetadataConfig.isIncludeAllEnabled()), of(contentMetadataConfig.appendAllPreset(groups).concat(contentMetadataConfig.reorganiseByConfig(groups))), of(contentMetadataConfig.reorganiseByConfig(groups))))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => contentMetadataConfig.filterExcludedPreset(groups))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => this.filterEmptyPreset(groups))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => this.setTitleToNameIfNotSet(groups))), map((/**
                 * @param {?} groups
                 * @return {?}
                 */
                (groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties))));
            }
        }
        return groupedProperties;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    setTitleToNameIfNotSet(propertyGroups) {
        propertyGroups.map((/**
         * @param {?} propertyGroup
         * @return {?}
         */
        (propertyGroup) => {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        }));
        return propertyGroups;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    filterEmptyPreset(propertyGroups) {
        return propertyGroups.filter((/**
         * @param {?} props
         * @return {?}
         */
        (props) => props.properties.length));
    }
}
ContentMetadataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentMetadataService.ctorParameters = () => [
    { type: BasicPropertiesService },
    { type: ContentMetadataConfigFactory },
    { type: PropertyGroupTranslatorService },
    { type: PropertyDescriptorsService }
];
/** @nocollapse */ ContentMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.inject(i1.BasicPropertiesService), i0.inject(i2.ContentMetadataConfigFactory), i0.inject(i3.PropertyGroupTranslatorService), i0.inject(i4.PropertyDescriptorsService)); }, token: ContentMetadataService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.basicPropertiesService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyDescriptorsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUd0RixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFLaEQsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7OztJQUUvQixZQUFvQixzQkFBOEMsRUFDOUMsNEJBQTBELEVBQzFELDhCQUE4RCxFQUM5RCwwQkFBc0Q7UUFIdEQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQThCO1FBQzFELG1DQUE4QixHQUE5Qiw4QkFBOEIsQ0FBZ0M7UUFDOUQsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtJQUMxRSxDQUFDOzs7OztJQUVELGtCQUFrQixDQUFDLElBQVU7UUFDekIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7Ozs7OztJQUVELG9CQUFvQixDQUFDLElBQVUsRUFBRSxhQUFxQixTQUFTOztZQUN2RCxpQkFBaUIsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBRTlCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTs7a0JBQ1oscUJBQXFCLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7O2tCQUMzRSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVc7aUJBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUNyQixNQUFNOzs7O1lBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBQztZQUUvRSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixpQkFBaUIsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDckUsU0FBUzs7OztnQkFBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ2pCLEdBQUc7OztnQkFDQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxtQkFBbUIsRUFBRSxHQUNqRCxFQUFFLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQzFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUN2RCxFQUFDLEVBQ04sR0FBRzs7OztnQkFBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEVBQUMsRUFDbkUsR0FBRzs7OztnQkFBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFDLEVBQy9DLEdBQUc7Ozs7Z0JBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUNwRCxHQUFHOzs7O2dCQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBQyxDQUMxRyxDQUFDO2FBQ0w7U0FDSjtRQUVELE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxzQkFBc0IsQ0FBQyxjQUF3QztRQUMzRCxjQUFjLENBQUMsR0FBRzs7OztRQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDakMsYUFBYSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDcEUsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLGNBQXdDO1FBQ3RELE9BQU8sY0FBYyxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUMsQ0FBQztJQUNyRSxDQUFDOzs7WUFwREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBWFEsc0JBQXNCO1lBS3RCLDRCQUE0QjtZQUg1Qiw4QkFBOEI7WUFJOUIsMEJBQTBCOzs7Ozs7OztJQVFuQix3REFBc0Q7Ozs7O0lBQ3RELDhEQUFrRTs7Ozs7SUFDbEUsZ0VBQXNFOzs7OztJQUN0RSw0REFBOEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBCYXNpY1Byb3BlcnRpZXNTZXJ2aWNlIH0gZnJvbSAnLi9iYXNpYy1wcm9wZXJ0aWVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGlpZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9wcm9wZXJ0eS1ncm91cHMtdHJhbnNsYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3SXRlbSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBDYXJkVmlld0dyb3VwLCBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeSB9IGZyb20gJy4vY29uZmlnL2NvbnRlbnQtbWV0YWRhdGEtY29uZmlnLmZhY3RvcnknO1xuaW1wb3J0IHsgUHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UgfSBmcm9tICcuL3Byb3BlcnR5LWRlc2NyaXB0b3JzLnNlcnZpY2UnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2ljUHJvcGVydGllc1NlcnZpY2U6IEJhc2ljUHJvcGVydGllc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5OiBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlOiBQcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZTogUHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXRCYXNpY1Byb3BlcnRpZXMobm9kZTogTm9kZSk6IE9ic2VydmFibGU8Q2FyZFZpZXdJdGVtW10+IHtcbiAgICAgICAgcmV0dXJuIG9mKHRoaXMuYmFzaWNQcm9wZXJ0aWVzU2VydmljZS5nZXRQcm9wZXJ0aWVzKG5vZGUpKTtcbiAgICB9XG5cbiAgICBnZXRHcm91cGVkUHJvcGVydGllcyhub2RlOiBOb2RlLCBwcmVzZXROYW1lOiBzdHJpbmcgPSAnZGVmYXVsdCcpOiBPYnNlcnZhYmxlPENhcmRWaWV3R3JvdXBbXT4ge1xuICAgICAgICBsZXQgZ3JvdXBlZFByb3BlcnRpZXMgPSBvZihbXSk7XG5cbiAgICAgICAgaWYgKG5vZGUuYXNwZWN0TmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRNZXRhZGF0YUNvbmZpZyA9IHRoaXMuY29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeS5nZXQocHJlc2V0TmFtZSksXG4gICAgICAgICAgICAgICAgZ3JvdXBOYW1lcyA9IG5vZGUuYXNwZWN0TmFtZXNcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChub2RlLm5vZGVUeXBlKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChncm91cE5hbWUpID0+IGNvbnRlbnRNZXRhZGF0YUNvbmZpZy5pc0dyb3VwQWxsb3dlZChncm91cE5hbWUpKTtcblxuICAgICAgICAgICAgaWYgKGdyb3VwTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdyb3VwZWRQcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZS5sb2FkKGdyb3VwTmFtZXMpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoZ3JvdXBzKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgaWlmKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IGNvbnRlbnRNZXRhZGF0YUNvbmZpZy5pc0luY2x1ZGVBbGxFbmFibGVkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YoY29udGVudE1ldGFkYXRhQ29uZmlnLmFwcGVuZEFsbFByZXNldChncm91cHMpLmNvbmNhdChjb250ZW50TWV0YWRhdGFDb25maWcucmVvcmdhbmlzZUJ5Q29uZmlnKGdyb3VwcykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZihjb250ZW50TWV0YWRhdGFDb25maWcucmVvcmdhbmlzZUJ5Q29uZmlnKGdyb3VwcykpXG4gICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwKChncm91cHMpID0+IGNvbnRlbnRNZXRhZGF0YUNvbmZpZy5maWx0ZXJFeGNsdWRlZFByZXNldChncm91cHMpKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwKChncm91cHMpID0+IHRoaXMuZmlsdGVyRW1wdHlQcmVzZXQoZ3JvdXBzKSksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZ3JvdXBzKSA9PiB0aGlzLnNldFRpdGxlVG9OYW1lSWZOb3RTZXQoZ3JvdXBzKSksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZ3JvdXBzKSA9PiB0aGlzLnByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZS50cmFuc2xhdGVUb0NhcmRWaWV3R3JvdXBzKGdyb3Vwcywgbm9kZS5wcm9wZXJ0aWVzKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwZWRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIHNldFRpdGxlVG9OYW1lSWZOb3RTZXQocHJvcGVydHlHcm91cHM6IE9yZ2FuaXNlZFByb3BlcnR5R3JvdXBbXSk6IE9yZ2FuaXNlZFByb3BlcnR5R3JvdXBbXSB7XG4gICAgICAgIHByb3BlcnR5R3JvdXBzLm1hcCgocHJvcGVydHlHcm91cCkgPT4ge1xuICAgICAgICAgICAgcHJvcGVydHlHcm91cC50aXRsZSA9IHByb3BlcnR5R3JvdXAudGl0bGUgfHwgcHJvcGVydHlHcm91cC5uYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXBzO1xuICAgIH1cblxuICAgIGZpbHRlckVtcHR5UHJlc2V0KHByb3BlcnR5R3JvdXBzOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10pOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10gIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXBzLmZpbHRlcigocHJvcHMpID0+IHByb3BzLnByb3BlcnRpZXMubGVuZ3RoKTtcbiAgICB9XG59XG4iXX0=