/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { defer, forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class PropertyDescriptorsService {
    /**
     * @param {?} alfrescoApiService
     */
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * @param {?} groupNames
     * @return {?}
     */
    load(groupNames) {
        /** @type {?} */
        const groupFetchStreams = groupNames
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        (groupName) => groupName.replace(':', '_')))
            .map((/**
         * @param {?} groupName
         * @return {?}
         */
        (groupName) => defer((/**
         * @return {?}
         */
        () => this.alfrescoApiService.classesApi.getClass(groupName)))));
        return forkJoin(groupFetchStreams).pipe(map(this.convertToObject));
    }
    /**
     * @private
     * @param {?} propertyGroupsArray
     * @return {?}
     */
    convertToObject(propertyGroupsArray) {
        return propertyGroupsArray.reduce((/**
         * @param {?} propertyGroups
         * @param {?} propertyGroup
         * @return {?}
         */
        (propertyGroups, propertyGroup) => {
            return Object.assign({}, propertyGroups, {
                [propertyGroup.name]: propertyGroup
            });
        }), {});
    }
}
PropertyDescriptorsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PropertyDescriptorsService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/** @nocollapse */ PropertyDescriptorsService.ngInjectableDef = i0.defineInjectable({ factory: function PropertyDescriptorsService_Factory() { return new PropertyDescriptorsService(i0.inject(i1.AlfrescoApiService)); }, token: PropertyDescriptorsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PropertyDescriptorsService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvc2VydmljZXMvcHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBYyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBS3JDLE1BQU0sT0FBTywwQkFBMEI7Ozs7SUFFbkMsWUFBb0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBRyxDQUFDOzs7OztJQUU5RCxJQUFJLENBQUMsVUFBb0I7O2NBQ2YsaUJBQWlCLEdBQUcsVUFBVTthQUMvQixHQUFHOzs7O1FBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFDO2FBQy9DLEdBQUc7Ozs7UUFBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsS0FBSzs7O1FBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUMsRUFBRTtRQUU5RixPQUFPLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FDNUIsQ0FBQztJQUNOLENBQUM7Ozs7OztJQUVPLGVBQWUsQ0FBQyxtQkFBb0M7UUFDeEQsT0FBTyxtQkFBbUIsQ0FBQyxNQUFNOzs7OztRQUFDLENBQUMsY0FBYyxFQUFFLGFBQWEsRUFBRSxFQUFFO1lBQ2hFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFO2dCQUNyQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxhQUFhO2FBQ3RDLENBQUMsQ0FBQztRQUNQLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztJQUNYLENBQUM7OztZQXZCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFQUSxrQkFBa0I7Ozs7Ozs7O0lBVVgsd0RBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGRlZmVyLCBmb3JrSm9pbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvcGVydHlHcm91cCwgUHJvcGVydHlHcm91cENvbnRhaW5lciB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7fVxuXG4gICAgbG9hZChncm91cE5hbWVzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8UHJvcGVydHlHcm91cENvbnRhaW5lcj4ge1xuICAgICAgICBjb25zdCBncm91cEZldGNoU3RyZWFtcyA9IGdyb3VwTmFtZXNcbiAgICAgICAgICAgIC5tYXAoKGdyb3VwTmFtZSkgPT4gZ3JvdXBOYW1lLnJlcGxhY2UoJzonLCAnXycpKVxuICAgICAgICAgICAgLm1hcCgoZ3JvdXBOYW1lKSA9PiBkZWZlciggKCkgPT4gdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuY2xhc3Nlc0FwaS5nZXRDbGFzcyhncm91cE5hbWUpKSApO1xuXG4gICAgICAgIHJldHVybiBmb3JrSm9pbihncm91cEZldGNoU3RyZWFtcykucGlwZShcbiAgICAgICAgICAgIG1hcCh0aGlzLmNvbnZlcnRUb09iamVjdClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnZlcnRUb09iamVjdChwcm9wZXJ0eUdyb3Vwc0FycmF5OiBQcm9wZXJ0eUdyb3VwW10pOiBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXBzQXJyYXkucmVkdWNlKChwcm9wZXJ0eUdyb3VwcywgcHJvcGVydHlHcm91cCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByb3BlcnR5R3JvdXBzLCB7XG4gICAgICAgICAgICAgICAgW3Byb3BlcnR5R3JvdXAubmFtZV06IHByb3BlcnR5R3JvdXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxufVxuIl19