/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
export class ContentMetadataCardComponent {
    /**
     * @param {?} contentService
     */
    constructor(contentService) {
        this.contentService = contentService;
        /**
         * (optional) This flag displays/hides empty metadata
         * fields.
         */
        this.displayEmpty = false;
        /**
         * (optional) This flag displays desired aspect when open for the first time
         * fields.
         */
        this.displayAspect = null;
        /**
         * (optional) This flag sets the metadata in read only mode
         * preventing changes.
         */
        this.readOnly = false;
        /**
         * (optional) This flag allows the component to display more
         * than one accordion at a time.
         */
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
    }
    /**
     * (optional) This flag displays/hides the metadata
     * properties.
     * @param {?} value
     * @return {?}
     */
    set displayDefaultProperties(value) {
        this._displayDefaultProperties = value;
        this.onDisplayDefaultPropertiesChange();
    }
    /**
     * @return {?}
     */
    get displayDefaultProperties() {
        return this._displayDefaultProperties;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.displayAspect && changes.displayAspect.currentValue) {
            this.expanded = true;
        }
    }
    /**
     * @return {?}
     */
    onDisplayDefaultPropertiesChange() {
        this.expanded = !this._displayDefaultProperties;
    }
    /**
     * @return {?}
     */
    toggleEdit() {
        this.editable = !this.editable;
    }
    /**
     * @return {?}
     */
    toggleExpanded() {
        this.expanded = !this.expanded;
    }
    /**
     * @return {?}
     */
    hasAllowableOperations() {
        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);
    }
}
ContentMetadataCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-metadata-card',
                template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [displayAspect]=\"displayAspect\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"!readOnly && hasAllowableOperations()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-metadata-card' },
                styles: [""]
            }] }
];
/** @nocollapse */
ContentMetadataCardComponent.ctorParameters = () => [
    { type: ContentService }
];
ContentMetadataCardComponent.propDecorators = {
    node: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayAspect: [{ type: Input }],
    preset: [{ type: Input }],
    readOnly: [{ type: Input }],
    multi: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }]
};
if (false) {
    /**
     * (required) The node entity to fetch metadata about
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.node;
    /**
     * (optional) This flag displays/hides empty metadata
     * fields.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.displayEmpty;
    /**
     * (optional) This flag displays desired aspect when open for the first time
     * fields.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.displayAspect;
    /**
     * (required) Name of the metadata preset, which defines aspects
     * and their properties.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.preset;
    /**
     * (optional) This flag sets the metadata in read only mode
     * preventing changes.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.readOnly;
    /**
     * (optional) This flag allows the component to display more
     * than one accordion at a time.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.multi;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataCardComponent.prototype._displayDefaultProperties;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.editable;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataCardComponent.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvY29tcG9uZW50cy9jb250ZW50LW1ldGFkYXRhLWNhcmQvY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBNEIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQVM3RSxNQUFNLE9BQU8sNEJBQTRCOzs7O0lBc0RyQyxZQUFvQixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7Ozs7O1FBN0NsRCxpQkFBWSxHQUFZLEtBQUssQ0FBQzs7Ozs7UUFNOUIsa0JBQWEsR0FBVyxJQUFJLENBQUM7Ozs7O1FBWTdCLGFBQVEsR0FBRyxLQUFLLENBQUM7Ozs7O1FBTWpCLFVBQUssR0FBRyxLQUFLLENBQUM7UUFFTiw4QkFBeUIsR0FBWSxJQUFJLENBQUM7UUFlbEQsYUFBUSxHQUFZLEtBQUssQ0FBQztJQUsxQixDQUFDOzs7Ozs7O0lBZkQsSUFDSSx3QkFBd0IsQ0FBQyxLQUFjO1FBQ3ZDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7OztJQUVELElBQUksd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO0lBQzFDLENBQUM7Ozs7O0lBU0QsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRTtZQUM3RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNMLENBQUM7Ozs7SUFFRCxnQ0FBZ0M7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUNwRCxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELHNCQUFzQjtRQUNsQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRyxDQUFDOzs7WUFwRkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLHV1REFBcUQ7Z0JBRXJELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUU7O2FBQ2pEOzs7O1lBUlEsY0FBYzs7O21CQVdsQixLQUFLOzJCQU1MLEtBQUs7NEJBTUwsS0FBSztxQkFNTCxLQUFLO3VCQU1MLEtBQUs7b0JBTUwsS0FBSzt1Q0FRTCxLQUFLOzs7Ozs7O0lBdENOLDRDQUNXOzs7Ozs7SUFLWCxvREFDOEI7Ozs7OztJQUs5QixxREFDNkI7Ozs7OztJQUs3Qiw4Q0FDZTs7Ozs7O0lBS2YsZ0RBQ2lCOzs7Ozs7SUFLakIsNkNBQ2M7Ozs7O0lBRWQsaUVBQWtEOztJQWVsRCxnREFBMEI7O0lBRTFCLGdEQUFrQjs7Ozs7SUFFTixzREFBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0gfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb250ZW50LW1ldGFkYXRhLWNhcmQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb250ZW50LW1ldGFkYXRhLWNhcmQuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbnRlbnQtbWV0YWRhdGEtY2FyZC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLWNvbnRlbnQtbWV0YWRhdGEtY2FyZCcgfVxufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50TWV0YWRhdGFDYXJkQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICAvKiogKHJlcXVpcmVkKSBUaGUgbm9kZSBlbnRpdHkgdG8gZmV0Y2ggbWV0YWRhdGEgYWJvdXQgKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGU6IE5vZGU7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgZGlzcGxheXMvaGlkZXMgZW1wdHkgbWV0YWRhdGFcbiAgICAgKiBmaWVsZHMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBkaXNwbGF5RW1wdHk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBkaXNwbGF5cyBkZXNpcmVkIGFzcGVjdCB3aGVuIG9wZW4gZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICogZmllbGRzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUFzcGVjdDogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiAocmVxdWlyZWQpIE5hbWUgb2YgdGhlIG1ldGFkYXRhIHByZXNldCwgd2hpY2ggZGVmaW5lcyBhc3BlY3RzXG4gICAgICogYW5kIHRoZWlyIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwcmVzZXQ6IHN0cmluZztcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBzZXRzIHRoZSBtZXRhZGF0YSBpbiByZWFkIG9ubHkgbW9kZVxuICAgICAqIHByZXZlbnRpbmcgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHJlYWRPbmx5ID0gZmFsc2U7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgYWxsb3dzIHRoZSBjb21wb25lbnQgdG8gZGlzcGxheSBtb3JlXG4gICAgICogdGhhbiBvbmUgYWNjb3JkaW9uIGF0IGEgdGltZS5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIG11bHRpID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIF9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIGRpc3BsYXlzL2hpZGVzIHRoZSBtZXRhZGF0YVxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZXQgZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2Rpc3BsYXlEZWZhdWx0UHJvcGVydGllcyA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9uRGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgZ2V0IGRpc3BsYXlEZWZhdWx0UHJvcGVydGllcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXlEZWZhdWx0UHJvcGVydGllcztcbiAgICB9XG5cbiAgICBlZGl0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgZXhwYW5kZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRlbnRTZXJ2aWNlOiBDb250ZW50U2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoYW5nZXMuZGlzcGxheUFzcGVjdCAmJiBjaGFuZ2VzLmRpc3BsYXlBc3BlY3QuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzQ2hhbmdlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuX2Rpc3BsYXlEZWZhdWx0UHJvcGVydGllcztcbiAgICB9XG5cbiAgICB0b2dnbGVFZGl0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVkaXRhYmxlID0gIXRoaXMuZWRpdGFibGU7XG4gICAgfVxuXG4gICAgdG9nZ2xlRXhwYW5kZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcbiAgICB9XG5cbiAgICBoYXNBbGxvd2FibGVPcGVyYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50U2VydmljZS5oYXNBbGxvd2FibGVPcGVyYXRpb25zKHRoaXMubm9kZSwgQWxsb3dhYmxlT3BlcmF0aW9uc0VudW0uVVBEQVRFKTtcbiAgICB9XG59XG4iXX0=