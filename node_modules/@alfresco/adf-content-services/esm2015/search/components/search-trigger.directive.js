/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable: no-input-rename no-use-before-declare no-input-rename  */
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, Inject, Input, NgZone, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { Subject, merge, of, fromEvent } from 'rxjs';
import { SearchComponent } from './search.component';
import { filter, switchMap, takeUntil } from 'rxjs/operators';
/** @type {?} */
export const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SearchTriggerDirective)),
    multi: true
};
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class SearchTriggerDirective {
    /**
     * @param {?} element
     * @param {?} ngZone
     * @param {?} changeDetectorRef
     * @param {?} document
     */
    constructor(element, ngZone, changeDetectorRef, document) {
        this.element = element;
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.onDestroy$ = new Subject();
        this.autocomplete = 'off';
        this._panelOpen = false;
        this.escapeEventStream = new Subject();
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
        if (this.escapeEventStream) {
            this.escapeEventStream = null;
        }
        if (this.closingActionsSubscription) {
            this.closingActionsSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    get panelOpen() {
        return this._panelOpen && this.searchPanel.showPanel;
    }
    /**
     * @return {?}
     */
    openPanel() {
        this.searchPanel.isOpen = this._panelOpen = true;
        this.closingActionsSubscription = this.subscribeToClosingActions();
    }
    /**
     * @return {?}
     */
    closePanel() {
        if (this._panelOpen) {
            this.closingActionsSubscription.unsubscribe();
            this._panelOpen = false;
            this.searchPanel.resetResults();
            this.searchPanel.hidePanel();
            this.changeDetectorRef.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    get panelClosingActions() {
        return merge(this.escapeEventStream, this.outsideClickStream);
    }
    /**
     * @private
     * @return {?}
     */
    get outsideClickStream() {
        if (!this.document) {
            return of(null);
        }
        return merge(fromEvent(this.document, 'click'), fromEvent(this.document, 'touchend')).pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const clickTarget = (/** @type {?} */ (event.target));
            return this._panelOpen && clickTarget !== this.element.nativeElement;
        })), takeUntil(this.onDestroy$));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        Promise.resolve(null).then((/**
         * @return {?}
         */
        () => this.setTriggerValue(value)));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeydown(event) {
        /** @type {?} */
        const keyCode = event.keyCode;
        if (keyCode === ESCAPE && this.panelOpen) {
            this.escapeEventStream.next();
            event.stopPropagation();
        }
        else if (keyCode === ENTER) {
            this.escapeEventStream.next();
            event.preventDefault();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleInput(event) {
        if (document.activeElement === event.target) {
            /** @type {?} */
            const inputValue = ((/** @type {?} */ (event.target))).value;
            this.onChange(inputValue);
            if (inputValue) {
                this.searchPanel.keyPressedStream.next(inputValue);
                this.openPanel();
            }
            else {
                this.searchPanel.resetResults();
                this.closePanel();
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isPanelOptionClicked(event) {
        /** @type {?} */
        let isPanelOption = false;
        if (event) {
            /** @type {?} */
            const clickTarget = (/** @type {?} */ (event.target));
            isPanelOption = !this.isNoResultOption(event) &&
                !!this.searchPanel.panel &&
                !!this.searchPanel.panel.nativeElement.contains(clickTarget);
        }
        return isPanelOption;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isNoResultOption(event) {
        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToClosingActions() {
        /** @type {?} */
        const firstStable = this.ngZone.onStable.asObservable();
        /** @type {?} */
        const optionChanges = this.searchPanel.keyPressedStream.asObservable();
        return merge(firstStable, optionChanges)
            .pipe(switchMap((/**
         * @return {?}
         */
        () => {
            this.searchPanel.setVisibility();
            return this.panelClosingActions;
        })), takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.setValueAndClose(event)));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setTriggerValue(value) {
        /** @type {?} */
        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?
            this.searchPanel.displayWith(value) : value;
        /** @type {?} */
        const inputValue = toDisplay != null ? toDisplay : '';
        this.element.nativeElement.value = inputValue;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    setValueAndClose(event) {
        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {
            this.setTriggerValue(event.target.textContent.trim());
            this.onChange(event.target.textContent.trim());
            this.element.nativeElement.focus();
        }
        this.closePanel();
    }
}
SearchTriggerDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,
                host: {
                    'role': 'combobox',
                    '[attr.autocomplete]': 'autocomplete',
                    'aria-autocomplete': 'list',
                    '[attr.aria-expanded]': 'panelOpen.toString()',
                    '(blur)': 'onTouched()',
                    '(input)': 'handleInput($event)',
                    '(keydown)': 'handleKeydown($event)'
                },
                providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]
            },] }
];
/** @nocollapse */
SearchTriggerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];
SearchTriggerDirective.propDecorators = {
    searchPanel: [{ type: Input, args: ['searchAutocomplete',] }],
    autocomplete: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.onDestroy$;
    /** @type {?} */
    SearchTriggerDirective.prototype.searchPanel;
    /** @type {?} */
    SearchTriggerDirective.prototype.autocomplete;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype._panelOpen;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.closingActionsSubscription;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.escapeEventStream;
    /** @type {?} */
    SearchTriggerDirective.prototype.onChange;
    /** @type {?} */
    SearchTriggerDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    SearchTriggerDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,