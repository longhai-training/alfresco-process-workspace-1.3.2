/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { SearchFilterService } from '../search-filter/search-filter.service';
export class SearchWidgetContainerComponent {
    /**
     * @param {?} searchFilterService
     * @param {?} queryBuilder
     * @param {?} componentFactoryResolver
     */
    constructor(searchFilterService, queryBuilder, componentFactoryResolver) {
        this.searchFilterService = searchFilterService;
        this.queryBuilder = queryBuilder;
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const componentType = this.searchFilterService.widgets[this.selector];
        if (componentType) {
            /** @type {?} */
            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            if (factory) {
                this.content.clear();
                this.componentRef = this.content.createComponent(factory, 0);
                this.setupWidget(this.componentRef);
            }
        }
    }
    /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    setupWidget(ref) {
        if (ref && ref.instance) {
            ref.instance.id = this.id;
            ref.instance.settings = Object.assign({}, this.settings);
            ref.instance.context = this.queryBuilder;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
}
SearchWidgetContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-widget-container',
                template: '<div #content></div>'
            }] }
];
/** @nocollapse */
SearchWidgetContainerComponent.ctorParameters = () => [
    { type: SearchFilterService },
    { type: SearchQueryBuilderService },
    { type: ComponentFactoryResolver }
];
SearchWidgetContainerComponent.propDecorators = {
    content: [{ type: ViewChild, args: ['content', { read: ViewContainerRef },] }],
    id: [{ type: Input }],
    selector: [{ type: Input }],
    settings: [{ type: Input }],
    config: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SearchWidgetContainerComponent.prototype.content;
    /** @type {?} */
    SearchWidgetContainerComponent.prototype.id;
    /** @type {?} */
    SearchWidgetContainerComponent.prototype.selector;
    /** @type {?} */
    SearchWidgetContainerComponent.prototype.settings;
    /** @type {?} */
    SearchWidgetContainerComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    SearchWidgetContainerComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    SearchWidgetContainerComponent.prototype.searchFilterService;
    /**
     * @type {?}
     * @private
     */
    SearchWidgetContainerComponent.prototype.queryBuilder;
    /**
     * @type {?}
     * @private
     */
    SearchWidgetContainerComponent.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXdpZGdldC1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic2VhcmNoL2NvbXBvbmVudHMvc2VhcmNoLXdpZGdldC1jb250YWluZXIvc2VhcmNoLXdpZGdldC1jb250YWluZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBbUMsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekksT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDL0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFNN0UsTUFBTSxPQUFPLDhCQUE4Qjs7Ozs7O0lBbUJ2QyxZQUNZLG1CQUF3QyxFQUN4QyxZQUF1QyxFQUN2Qyx3QkFBa0Q7UUFGbEQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBMkI7UUFDdkMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtJQUM5RCxDQUFDOzs7O0lBRUQsUUFBUTs7Y0FDRSxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JFLElBQUksYUFBYSxFQUFFOztrQkFDVCxPQUFPLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztZQUNwRixJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdkM7U0FDSjtJQUNMLENBQUM7Ozs7OztJQUVPLFdBQVcsQ0FBQyxHQUFzQjtRQUN0QyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ3JCLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDMUIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLHFCQUFRLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQztZQUM3QyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQzVDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNMLENBQUM7OztZQXRESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7OztZQUxRLG1CQUFtQjtZQURuQix5QkFBeUI7WUFEdUQsd0JBQXdCOzs7c0JBVTVHLFNBQVMsU0FBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7aUJBRy9DLEtBQUs7dUJBR0wsS0FBSzt1QkFHTCxLQUFLO3FCQUdMLEtBQUs7Ozs7SUFaTixpREFDMEI7O0lBRTFCLDRDQUNXOztJQUVYLGtEQUNpQjs7SUFFakIsa0RBQ2M7O0lBRWQsZ0RBQ1k7Ozs7O0lBRVosc0RBQXdDOzs7OztJQUdwQyw2REFBZ0Q7Ozs7O0lBQ2hELHNEQUErQzs7Ozs7SUFDL0Msa0VBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmLCBPbkluaXQsIE9uRGVzdHJveSwgQ29tcG9uZW50UmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZWFyY2gtcXVlcnktYnVpbGRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFNlYXJjaEZpbHRlclNlcnZpY2UgfSBmcm9tICcuLi9zZWFyY2gtZmlsdGVyL3NlYXJjaC1maWx0ZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlYXJjaC13aWRnZXQtY29udGFpbmVyJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgI2NvbnRlbnQ+PC9kaXY+J1xufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hXaWRnZXRDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBAVmlld0NoaWxkKCdjb250ZW50JywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pXG4gICAgY29udGVudDogVmlld0NvbnRhaW5lclJlZjtcblxuICAgIEBJbnB1dCgpXG4gICAgaWQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgc2VsZWN0b3I6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgc2V0dGluZ3M6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgY29uZmlnOiBhbnk7XG5cbiAgICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzZWFyY2hGaWx0ZXJTZXJ2aWNlOiBTZWFyY2hGaWx0ZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHF1ZXJ5QnVpbGRlcjogU2VhcmNoUXVlcnlCdWlsZGVyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnRUeXBlID0gdGhpcy5zZWFyY2hGaWx0ZXJTZXJ2aWNlLndpZGdldHNbdGhpcy5zZWxlY3Rvcl07XG4gICAgICAgIGlmIChjb21wb25lbnRUeXBlKSB7XG4gICAgICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50VHlwZSk7XG4gICAgICAgICAgICBpZiAoZmFjdG9yeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250ZW50LmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwV2lkZ2V0KHRoaXMuY29tcG9uZW50UmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBXaWRnZXQocmVmOiBDb21wb25lbnRSZWY8YW55Pikge1xuICAgICAgICBpZiAocmVmICYmIHJlZi5pbnN0YW5jZSkge1xuICAgICAgICAgICAgcmVmLmluc3RhbmNlLmlkID0gdGhpcy5pZDtcbiAgICAgICAgICAgIHJlZi5pbnN0YW5jZS5zZXR0aW5ncyA9IHsgLi4udGhpcy5zZXR0aW5ncyB9O1xuICAgICAgICAgICAgcmVmLmluc3RhbmNlLmNvbnRleHQgPSB0aGlzLnF1ZXJ5QnVpbGRlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19