/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';
import { RequestSortDefinitionInner } from '@alfresco/js-api';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class SearchQueryBuilderService {
    /**
     * @param {?} appConfig
     * @param {?} alfrescoApiService
     */
    constructor(appConfig, alfrescoApiService) {
        this.appConfig = appConfig;
        this.alfrescoApiService = alfrescoApiService;
        this._userQuery = '';
        this.updated = new Subject();
        this.executed = new Subject();
        this.error = new Subject();
        this.categories = [];
        this.queryFragments = {};
        this.filterQueries = [];
        this.paging = null;
        this.sorting = [];
        this.userFacetBuckets = {};
        this.config = {
            categories: []
        };
        // TODO: to be supported in future iterations
        this.ranges = {};
        this.resetToDefaults();
    }
    /**
     * @return {?}
     */
    get userQuery() {
        return this._userQuery;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set userQuery(value) {
        value = (value || '').trim();
        this._userQuery = value ? `(${value})` : '';
    }
    /**
     * Resets the query to the defaults specified in the app config.
     * @return {?}
     */
    resetToDefaults() {
        /** @type {?} */
        const template = this.appConfig.get('search');
        if (template) {
            this.config = JSON.parse(JSON.stringify(template));
            this.categories = (this.config.categories || []).filter((/**
             * @param {?} category
             * @return {?}
             */
            (category) => category.enabled));
            this.filterQueries = this.config.filterQueries || [];
            this.userFacetBuckets = {};
            if (this.config.sorting) {
                this.sorting = this.config.sorting.defaults || [];
            }
        }
    }
    /**
     * Adds a facet bucket to a field.
     * @param {?} field The target field
     * @param {?} bucket Bucket to add
     * @return {?}
     */
    addUserFacetBucket(field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            const buckets = this.userFacetBuckets[field.field] || [];
            /** @type {?} */
            const existing = buckets.find((/**
             * @param {?} facetBucket
             * @return {?}
             */
            (facetBucket) => facetBucket.label === bucket.label));
            if (!existing) {
                buckets.push(bucket);
            }
            this.userFacetBuckets[field.field] = buckets;
        }
    }
    /**
     * Gets the buckets currently added to a field
     * @param {?} field The target fields
     * @return {?} Bucket array
     */
    getUserFacetBuckets(field) {
        return this.userFacetBuckets[field] || [];
    }
    /**
     * Removes an existing bucket from a field.
     * @param {?} field The target field
     * @param {?} bucket Bucket to remove
     * @return {?}
     */
    removeUserFacetBucket(field, bucket) {
        if (field && field.field && bucket) {
            /** @type {?} */
            const buckets = this.userFacetBuckets[field.field] || [];
            this.userFacetBuckets[field.field] = buckets
                .filter((/**
             * @param {?} facetBucket
             * @return {?}
             */
            (facetBucket) => facetBucket.label !== bucket.label));
        }
    }
    /**
     * Adds a filter query to the current query.
     * @param {?} query Query string to add
     * @return {?}
     */
    addFilterQuery(query) {
        if (query) {
            /** @type {?} */
            const existing = this.filterQueries.find((/**
             * @param {?} filterQuery
             * @return {?}
             */
            (filterQuery) => filterQuery.query === query));
            if (!existing) {
                this.filterQueries.push({ query: query });
            }
        }
    }
    /**
     * Removes an existing filter query.
     * @param {?} query The query to remove
     * @return {?}
     */
    removeFilterQuery(query) {
        if (query) {
            this.filterQueries = this.filterQueries
                .filter((/**
             * @param {?} filterQuery
             * @return {?}
             */
            (filterQuery) => filterQuery.query !== query));
        }
    }
    /**
     * Gets a facet query by label.
     * @param {?} label Label of the query
     * @return {?} Facet query data
     */
    getFacetQuery(label) {
        if (label && this.hasFacetQueries) {
            /** @type {?} */
            const result = this.config.facetQueries.queries.find((/**
             * @param {?} query
             * @return {?}
             */
            (query) => query.label === label));
            if (result) {
                return Object.assign({}, result);
            }
        }
        return null;
    }
    /**
     * Gets a facet field by label.
     * @param {?} label Label of the facet field
     * @return {?} Facet field data
     */
    getFacetField(label) {
        if (label) {
            /** @type {?} */
            const fields = this.config.facetFields.fields || [];
            /** @type {?} */
            const result = fields.find((/**
             * @param {?} field
             * @return {?}
             */
            (field) => field.label === label));
            if (result) {
                result.label = this.getSupportedLabel(result.label);
                return Object.assign({}, result);
            }
        }
        return null;
    }
    /**
     * Builds the current query and triggers the `updated` event.
     * @return {?}
     */
    update() {
        /** @type {?} */
        const query = this.buildQuery();
        this.updated.next(query);
    }
    /**
     * Builds and executes the current query.
     * @return {?} Nothing
     */
    execute() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                const query = this.buildQuery();
                if (query) {
                    /** @type {?} */
                    const resultSetPaging = yield this.alfrescoApiService.searchApi.search(query);
                    this.executed.next(resultSetPaging);
                }
            }
            catch (error) {
                this.error.next(error);
                this.executed.next({
                    list: {
                        pagination: {
                            totalItems: 0
                        },
                        entries: []
                    }
                });
            }
        });
    }
    /**
     * Builds the current query.
     * @return {?} The finished query
     */
    buildQuery() {
        /** @type {?} */
        const query = this.getFinalQuery();
        /** @type {?} */
        const include = this.config.include || [];
        if (include.length === 0) {
            include.push('path', 'allowableOperations');
        }
        if (query) {
            /** @type {?} */
            const result = (/** @type {?} */ ({
                query: {
                    query: query,
                    language: 'afts'
                },
                include: include,
                paging: this.paging,
                fields: this.config.fields,
                filterQueries: this.filterQueries,
                facetQueries: this.facetQueries,
                facetIntervals: this.facetIntervals,
                facetFields: this.facetFields,
                sort: this.sort,
                highlight: this.highlight
            }));
            result['facetFormat'] = 'V2';
            return result;
        }
        return null;
    }
    /**
     * Gets the primary sorting definition.
     * @return {?} The primary sorting definition
     */
    getPrimarySorting() {
        if (this.sorting && this.sorting.length > 0) {
            return this.sorting[0];
        }
        return null;
    }
    /**
     * Gets all pre-configured sorting options that users can choose from.
     * @return {?} Pre-configured sorting options
     */
    getSortingOptions() {
        if (this.config && this.config.sorting) {
            return this.config.sorting.options || [];
        }
        return [];
    }
    /**
     * Gets the query group.
     * @param {?} query Target query
     * @return {?} Query group
     */
    getQueryGroup(query) {
        return query.group || this.config.facetQueries.label || 'Facet Queries';
    }
    /**
     * Checks if FacetQueries has been defined
     * @return {?} True if defined, false otherwise
     */
    get hasFacetQueries() {
        if (this.config
            && this.config.facetQueries
            && this.config.facetQueries.queries
            && this.config.facetQueries.queries.length > 0) {
            return true;
        }
        return false;
    }
    /**
     * Checks if FacetIntervals has been defined
     * @return {?} True if defined, false otherwise
     */
    get hasFacetIntervals() {
        if (this.config
            && this.config.facetIntervals
            && this.config.facetIntervals.intervals
            && this.config.facetIntervals.intervals.length > 0) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    get hasFacetHighlight() {
        return this.config && this.config.highlight ? true : false;
    }
    /**
     * @protected
     * @return {?}
     */
    get sort() {
        return this.sorting.map((/**
         * @param {?} def
         * @return {?}
         */
        (def) => {
            return new RequestSortDefinitionInner({
                type: def.type,
                field: def.field,
                ascending: def.ascending
            });
        }));
    }
    /**
     * @protected
     * @return {?}
     */
    get facetQueries() {
        if (this.hasFacetQueries) {
            return this.config.facetQueries.queries.map((/**
             * @param {?} query
             * @return {?}
             */
            (query) => {
                query.group = this.getQueryGroup(query);
                return (/** @type {?} */ (Object.assign({}, query)));
            }));
        }
        return null;
    }
    /**
     * @protected
     * @return {?}
     */
    get facetIntervals() {
        if (this.hasFacetIntervals) {
            /** @type {?} */
            const configIntervals = this.config.facetIntervals;
            return {
                intervals: configIntervals.intervals.map((/**
                 * @param {?} interval
                 * @return {?}
                 */
                (interval) => (/** @type {?} */ ({
                    label: this.getSupportedLabel(interval.label),
                    field: interval.field,
                    sets: interval.sets.map((/**
                     * @param {?} set
                     * @return {?}
                     */
                    (set) => (/** @type {?} */ ({
                        label: this.getSupportedLabel(set.label),
                        start: set.start,
                        end: set.end,
                        startInclusive: set.startInclusive,
                        endInclusive: set.endInclusive
                    }))))
                }))))
            };
        }
        return null;
    }
    /**
     * @protected
     * @return {?}
     */
    get highlight() {
        return this.hasFacetHighlight ? this.config.highlight : null;
    }
    /**
     * @protected
     * @return {?}
     */
    getFinalQuery() {
        /** @type {?} */
        let query = '';
        this.categories.forEach((/**
         * @param {?} facet
         * @return {?}
         */
        (facet) => {
            /** @type {?} */
            const customQuery = this.queryFragments[facet.id];
            if (customQuery) {
                if (query.length > 0) {
                    query += ' AND ';
                }
                query += `(${customQuery})`;
            }
        }));
        /** @type {?} */
        let result = [this.userQuery, query]
            .filter((/**
         * @param {?} entry
         * @return {?}
         */
        (entry) => entry))
            .join(' AND ');
        if (this.userFacetBuckets) {
            Object.keys(this.userFacetBuckets).forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                /** @type {?} */
                const subQuery = (this.userFacetBuckets[key] || [])
                    .filter((/**
                 * @param {?} bucket
                 * @return {?}
                 */
                (bucket) => bucket.filterQuery))
                    .map((/**
                 * @param {?} bucket
                 * @return {?}
                 */
                (bucket) => bucket.filterQuery))
                    .join(' OR ');
                if (subQuery) {
                    if (result.length > 0) {
                        result += ' AND ';
                    }
                    result += `(${subQuery})`;
                }
            }));
        }
        return result;
    }
    /**
     * @protected
     * @return {?}
     */
    get facetFields() {
        /** @type {?} */
        const facetFields = this.config.facetFields && this.config.facetFields.fields;
        if (facetFields && facetFields.length > 0) {
            return {
                facets: facetFields.map((/**
                 * @param {?} facet
                 * @return {?}
                 */
                (facet) => (/** @type {?} */ ({
                    field: facet.field,
                    mincount: facet.mincount,
                    label: this.getSupportedLabel(facet.label),
                    limit: facet.limit,
                    offset: facet.offset,
                    prefix: facet.prefix
                }))))
            };
        }
        return null;
    }
    /**
     * Encloses a label name with double quotes if it contains whitespace characters.
     * @param {?} configLabel Original label text
     * @return {?} Label, possibly with quotes if it contains spaces
     */
    getSupportedLabel(configLabel) {
        /** @type {?} */
        const spaceInsideLabelIndex = configLabel.search(/\s/g);
        if (spaceInsideLabelIndex > -1) {
            return `"${configLabel}"`;
        }
        return configLabel;
    }
}
SearchQueryBuilderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SearchQueryBuilderService.ctorParameters = () => [
    { type: AppConfigService },
    { type: AlfrescoApiService }
];
/** @nocollapse */ SearchQueryBuilderService.ngInjectableDef = i0.defineInjectable({ factory: function SearchQueryBuilderService_Factory() { return new SearchQueryBuilderService(i0.inject(i1.AppConfigService), i0.inject(i1.AlfrescoApiService)); }, token: SearchQueryBuilderService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchQueryBuilderService.prototype._userQuery;
    /** @type {?} */
    SearchQueryBuilderService.prototype.updated;
    /** @type {?} */
    SearchQueryBuilderService.prototype.executed;
    /** @type {?} */
    SearchQueryBuilderService.prototype.error;
    /** @type {?} */
    SearchQueryBuilderService.prototype.categories;
    /** @type {?} */
    SearchQueryBuilderService.prototype.queryFragments;
    /** @type {?} */
    SearchQueryBuilderService.prototype.filterQueries;
    /** @type {?} */
    SearchQueryBuilderService.prototype.paging;
    /** @type {?} */
    SearchQueryBuilderService.prototype.sorting;
    /**
     * @type {?}
     * @protected
     */
    SearchQueryBuilderService.prototype.userFacetBuckets;
    /** @type {?} */
    SearchQueryBuilderService.prototype.config;
    /** @type {?} */
    SearchQueryBuilderService.prototype.ranges;
    /**
     * @type {?}
     * @private
     */
    SearchQueryBuilderService.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    SearchQueryBuilderService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,