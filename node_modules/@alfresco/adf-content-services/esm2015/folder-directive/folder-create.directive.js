/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';
import { MatDialog } from '@angular/material';
import { FolderDialogComponent } from '../dialogs/folder.dialog';
import { ContentService } from '@alfresco/adf-core';
/** @type {?} */
const DEFAULT_FOLDER_PARENT_ID = '-my-';
export class FolderCreateDirective {
    /**
     * @param {?} dialogRef
     * @param {?} content
     */
    constructor(dialogRef, content) {
        this.dialogRef = dialogRef;
        this.content = content;
        /**
         * Parent folder where the new folder will be located after creation.
         */
        this.parentNodeId = DEFAULT_FOLDER_PARENT_ID;
        /**
         * Title of folder creation dialog.
         */
        this.title = null;
        /**
         * Type of node to create.
         */
        this.nodeType = 'cm:folder';
        /**
         * Emitted when an error occurs (eg, a folder with same name already exists).
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the folder is created successfully.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        event.preventDefault();
        this.openDialog();
    }
    /**
     * @private
     * @return {?}
     */
    get dialogConfig() {
        const { DIALOG_WIDTH: width } = FolderCreateDirective;
        const { parentNodeId, title: createTitle, nodeType } = this;
        return {
            data: { parentNodeId, createTitle, nodeType },
            width: `${width}px`
        };
    }
    /**
     * @private
     * @return {?}
     */
    openDialog() {
        const { dialogRef, dialogConfig, content } = this;
        /** @type {?} */
        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);
        dialogInstance.componentInstance.error.subscribe((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.error.emit(error);
        }));
        dialogInstance.componentInstance.success.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            this.success.emit(node);
        }));
        dialogInstance.afterClosed().subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            if (node) {
                content.folderCreate.next(node);
            }
        }));
    }
}
FolderCreateDirective.DIALOG_WIDTH = 400;
FolderCreateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-create-folder]'
            },] }
];
/** @nocollapse */
FolderCreateDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: ContentService }
];
FolderCreateDirective.propDecorators = {
    parentNodeId: [{ type: Input, args: ['adf-create-folder',] }],
    title: [{ type: Input }],
    nodeType: [{ type: Input }],
    error: [{ type: Output }],
    success: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FolderCreateDirective.DIALOG_WIDTH;
    /**
     * Parent folder where the new folder will be located after creation.
     * @type {?}
     */
    FolderCreateDirective.prototype.parentNodeId;
    /**
     * Title of folder creation dialog.
     * @type {?}
     */
    FolderCreateDirective.prototype.title;
    /**
     * Type of node to create.
     * @type {?}
     */
    FolderCreateDirective.prototype.nodeType;
    /**
     * Emitted when an error occurs (eg, a folder with same name already exists).
     * @type {?}
     */
    FolderCreateDirective.prototype.error;
    /**
     * Emitted when the folder is created successfully.
     * @type {?}
     */
    FolderCreateDirective.prototype.success;
    /** @type {?} */
    FolderCreateDirective.prototype.dialogRef;
    /** @type {?} */
    FolderCreateDirective.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWNyZWF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJmb2xkZXItZGlyZWN0aXZlL2ZvbGRlci1jcmVhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsU0FBUyxFQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBRS9ELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7TUFFOUMsd0JBQXdCLEdBQUcsTUFBTTtBQUt2QyxNQUFNLE9BQU8scUJBQXFCOzs7OztJQTZCOUIsWUFDVyxTQUFvQixFQUNwQixPQUF1QjtRQUR2QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLFlBQU8sR0FBUCxPQUFPLENBQWdCOzs7O1FBMUJsQyxpQkFBWSxHQUFXLHdCQUF3QixDQUFDOzs7O1FBSWhELFVBQUssR0FBVyxJQUFJLENBQUM7Ozs7UUFJckIsYUFBUSxHQUFHLFdBQVcsQ0FBQzs7OztRQUl2QixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7UUFJbkQsWUFBTyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDO0lBV3BELENBQUM7Ozs7O0lBUkosT0FBTyxDQUFDLEtBQUs7UUFDVCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBT0QsSUFBWSxZQUFZO2NBQ2QsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcscUJBQXFCO2NBQy9DLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSTtRQUUzRCxPQUFPO1lBQ0gsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7WUFDN0MsS0FBSyxFQUFFLEdBQUcsS0FBSyxJQUFJO1NBQ3RCLENBQUM7SUFDTixDQUFDOzs7OztJQUVPLFVBQVU7Y0FDUixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSTs7Y0FDM0MsY0FBYyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDO1FBRTFFLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsU0FBUzs7OztRQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxFQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLElBQVUsRUFBRSxFQUFFO1lBQzlELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUFDO1FBRUgsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLElBQVUsRUFBRSxFQUFFO1lBQ2xELElBQUksSUFBSSxFQUFFO2dCQUNOLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ25DO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOztBQTVETSxrQ0FBWSxHQUFXLEdBQUcsQ0FBQzs7WUFKckMsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxxQkFBcUI7YUFDbEM7Ozs7WUFUUSxTQUFTO1lBR1QsY0FBYzs7OzJCQVdsQixLQUFLLFNBQUMsbUJBQW1CO29CQUl6QixLQUFLO3VCQUlMLEtBQUs7b0JBSUwsTUFBTTtzQkFJTixNQUFNO3NCQUdOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBRSxRQUFRLENBQUU7Ozs7SUF0Qm5DLG1DQUFrQzs7Ozs7SUFHbEMsNkNBQ2dEOzs7OztJQUdoRCxzQ0FDcUI7Ozs7O0lBR3JCLHlDQUN1Qjs7Ozs7SUFHdkIsc0NBQ21EOzs7OztJQUduRCx3Q0FDdUQ7O0lBU25ELDBDQUEyQjs7SUFDM0Isd0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2csIE1hdERpYWxvZ0NvbmZpZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IE5vZGUgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IEZvbGRlckRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvZm9sZGVyLmRpYWxvZyc7XG5pbXBvcnQgeyBDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbmNvbnN0IERFRkFVTFRfRk9MREVSX1BBUkVOVF9JRCA9ICctbXktJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbYWRmLWNyZWF0ZS1mb2xkZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBGb2xkZXJDcmVhdGVEaXJlY3RpdmUge1xuICAgIHN0YXRpYyBESUFMT0dfV0lEVEg6IG51bWJlciA9IDQwMDtcblxuICAgIC8qKiBQYXJlbnQgZm9sZGVyIHdoZXJlIHRoZSBuZXcgZm9sZGVyIHdpbGwgYmUgbG9jYXRlZCBhZnRlciBjcmVhdGlvbi4gKi9cbiAgICBASW5wdXQoJ2FkZi1jcmVhdGUtZm9sZGVyJylcbiAgICBwYXJlbnROb2RlSWQ6IHN0cmluZyA9IERFRkFVTFRfRk9MREVSX1BBUkVOVF9JRDtcblxuICAgIC8qKiBUaXRsZSBvZiBmb2xkZXIgY3JlYXRpb24gZGlhbG9nLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGl0bGU6IHN0cmluZyA9IG51bGw7XG5cbiAgICAvKiogVHlwZSBvZiBub2RlIHRvIGNyZWF0ZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVUeXBlID0gJ2NtOmZvbGRlcic7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyAoZWcsIGEgZm9sZGVyIHdpdGggc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzKS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGZvbGRlciBpcyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8Tm9kZT4gPSBuZXcgRXZlbnRFbWl0dGVyPE5vZGU+KCk7XG5cbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsgJyRldmVudCcgXSlcbiAgICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMub3BlbkRpYWxvZygpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgZGlhbG9nUmVmOiBNYXREaWFsb2csXG4gICAgICAgIHB1YmxpYyBjb250ZW50OiBDb250ZW50U2VydmljZVxuICAgICkge31cblxuICAgIHByaXZhdGUgZ2V0IGRpYWxvZ0NvbmZpZygpOiBNYXREaWFsb2dDb25maWcge1xuICAgICAgICBjb25zdCB7IERJQUxPR19XSURUSDogd2lkdGggfSA9IEZvbGRlckNyZWF0ZURpcmVjdGl2ZTtcbiAgICAgICAgY29uc3QgeyBwYXJlbnROb2RlSWQsIHRpdGxlOiBjcmVhdGVUaXRsZSwgbm9kZVR5cGUgfSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHsgcGFyZW50Tm9kZUlkLCBjcmVhdGVUaXRsZSwgbm9kZVR5cGUgfSxcbiAgICAgICAgICAgIHdpZHRoOiBgJHt3aWR0aH1weGBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wZW5EaWFsb2coKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgZGlhbG9nUmVmLCBkaWFsb2dDb25maWcsIGNvbnRlbnQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRpYWxvZ0luc3RhbmNlID0gZGlhbG9nUmVmLm9wZW4oRm9sZGVyRGlhbG9nQ29tcG9uZW50LCBkaWFsb2dDb25maWcpO1xuXG4gICAgICAgIGRpYWxvZ0luc3RhbmNlLmNvbXBvbmVudEluc3RhbmNlLmVycm9yLnN1YnNjcmliZSgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpYWxvZ0luc3RhbmNlLmNvbXBvbmVudEluc3RhbmNlLnN1Y2Nlc3Muc3Vic2NyaWJlKChub2RlOiBOb2RlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChub2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlhbG9nSW5zdGFuY2UuYWZ0ZXJDbG9zZWQoKS5zdWJzY3JpYmUoKG5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5mb2xkZXJDcmVhdGUubmV4dChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19