/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { FileUtils } from '@alfresco/adf-core';
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output } from '@angular/core';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class FileDraggableDirective {
    /**
     * @param {?} el
     * @param {?} ngZone
     */
    constructor(el, ngZone) {
        this.ngZone = ngZone;
        /**
         * Enables/disables drag-and-drop functionality.
         */
        this.enabled = true;
        /**
         * Emitted when one or more files are dragged and dropped onto the draggable element.
         */
        this.filesDropped = new EventEmitter();
        /**
         * Emitted when a directory is dragged and dropped onto the draggable element.
         */
        this.folderEntityDropped = new EventEmitter();
        this.cssClassName = 'adf-file-draggable__input-focus';
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));
            this.element.addEventListener('dragover', this.onDragOver.bind(this));
            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));
            this.element.addEventListener('drop', this.onDropFiles.bind(this));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.element.removeEventListener('dragenter', this.onDragEnter);
        this.element.removeEventListener('dragover', this.onDragOver);
        this.element.removeEventListener('dragleave', this.onDragLeave);
        this.element.removeEventListener('drop', this.onDropFiles);
    }
    /**
     * Method called when files is dropped in the drag and drop area.
     * @param {?} event DOM event.
     * @return {?}
     */
    onDropFiles(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            // Chrome, Edge, Firefox, Opera (Files + Folders)
            /** @type {?} */
            const items = event.dataTransfer.items;
            if (items) {
                /** @type {?} */
                const files = [];
                for (let i = 0; i < items.length; i++) {
                    if (items[i].webkitGetAsEntry) {
                        /** @type {?} */
                        const item = items[i].webkitGetAsEntry();
                        if (item) {
                            if (item.isFile) {
                                /** @type {?} */
                                const file = items[i].getAsFile();
                                if (file) {
                                    files.push(file);
                                }
                            }
                            else if (item.isDirectory) {
                                this.folderEntityDropped.emit(item);
                            }
                        }
                    }
                }
                if (files.length > 0) {
                    this.filesDropped.emit(files);
                }
            }
            else {
                // IE, Safari, Chrome, Edge, Firefox, Opera (Files only)
                /** @type {?} */
                const files = FileUtils.toFileArray(event.dataTransfer.files);
                this.filesDropped.emit(files);
            }
            this.element.classList.remove(this.cssClassName);
        }
    }
    /**
     * Change the style of the drag area when a file drag in.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    onDragEnter(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.add(this.cssClassName);
        }
    }
    /**
     * Change the style of the drag area when a file drag out.
     *
     * @param {?} event - DOM event.
     * @return {?}
     */
    onDragLeave(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.remove(this.cssClassName);
        }
    }
    /**
     * Change the style of the drag area when a file is over the drag area.
     *
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        if (this.enabled && !event.defaultPrevented) {
            this.preventDefault(event);
            this.element.classList.add(this.cssClassName);
        }
    }
    /**
     * Prevent default and stop propagation of the DOM event.
     *
     * @param {?} event
     * @return {?}
     */
    preventDefault(event) {
        event.stopPropagation();
        event.preventDefault();
    }
}
FileDraggableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-file-draggable]'
            },] }
];
/** @nocollapse */
FileDraggableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
FileDraggableDirective.propDecorators = {
    enabled: [{ type: Input, args: ['adf-file-draggable',] }],
    filesDropped: [{ type: Output }],
    folderEntityDropped: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FileDraggableDirective.prototype.files;
    /**
     * Enables/disables drag-and-drop functionality.
     * @type {?}
     */
    FileDraggableDirective.prototype.enabled;
    /**
     * Emitted when one or more files are dragged and dropped onto the draggable element.
     * @type {?}
     */
    FileDraggableDirective.prototype.filesDropped;
    /**
     * Emitted when a directory is dragged and dropped onto the draggable element.
     * @type {?}
     */
    FileDraggableDirective.prototype.folderEntityDropped;
    /**
     * @type {?}
     * @private
     */
    FileDraggableDirective.prototype.cssClassName;
    /**
     * @type {?}
     * @private
     */
    FileDraggableDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    FileDraggableDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,