/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';
import { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
export class FileUploadingListComponent {
    /**
     * @param {?} uploadService
     * @param {?} nodesApi
     * @param {?} translateService
     */
    constructor(uploadService, nodesApi, translateService) {
        this.uploadService = uploadService;
        this.nodesApi = nodesApi;
        this.translateService = translateService;
        this.FileUploadStatus = FileUploadStatus;
        this.files = [];
        /**
         * Emitted when a file in the list has an error.
         */
        this.error = new EventEmitter();
    }
    /**
     * Cancel file upload
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to cancel upload for.
     *
     * @return {?}
     */
    cancelFile(file) {
        this.uploadService.cancelUpload(file);
    }
    /**
     * Remove uploaded file
     *
     * \@memberOf FileUploadingListComponent
     * @param {?} file File model to remove upload for.
     *
     * @return {?}
     */
    removeFile(file) {
        this.deleteNode(file).subscribe((/**
         * @return {?}
         */
        () => {
            if (file.status === FileUploadStatus.Error) {
                this.notifyError(file);
            }
            this.cancelNodeVersionInstances(file);
            this.uploadService.cancelUpload(file);
        }));
    }
    /**
     * Call the appropriate method for each file, depending on state
     * @return {?}
     */
    cancelAllFiles() {
        this.getUploadingFiles().forEach((/**
         * @param {?} file
         * @return {?}
         */
        (file) => this.uploadService.cancelUpload(file)));
        /** @type {?} */
        const deletedFiles = this.files
            .filter((/**
         * @param {?} file
         * @return {?}
         */
        (file) => file.status === FileUploadStatus.Complete))
            .map((/**
         * @param {?} file
         * @return {?}
         */
        (file) => this.deleteNode(file)));
        forkJoin(...deletedFiles).subscribe((/**
         * @param {?} files
         * @return {?}
         */
        (files) => {
            /** @type {?} */
            const errors = files.filter((/**
             * @param {?} file
             * @return {?}
             */
            (file) => file.status === FileUploadStatus.Error));
            if (errors.length) {
                this.notifyError(...errors);
            }
            this.uploadService.cancelUpload(...files);
        }));
    }
    /**
     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending
     * @return {?}
     */
    isUploadCompleted() {
        return (!this.isUploadCancelled() &&
            Boolean(this.files.length) &&
            !this.files.some((/**
             * @param {?} __0
             * @return {?}
             */
            ({ status }) => status === FileUploadStatus.Starting ||
                status === FileUploadStatus.Progress ||
                status === FileUploadStatus.Pending)));
    }
    /**
     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states
     * @return {?}
     */
    isUploadCancelled() {
        return (!!this.files.length &&
            this.files.every((/**
             * @param {?} __0
             * @return {?}
             */
            ({ status }) => status === FileUploadStatus.Aborted ||
                status === FileUploadStatus.Cancelled ||
                status === FileUploadStatus.Deleted)));
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    deleteNode(file) {
        const { id } = file.data.entry;
        return this.nodesApi.deleteNode(id, { permanent: true }).pipe(map((/**
         * @return {?}
         */
        () => {
            file.status = FileUploadStatus.Deleted;
            return file;
        })), catchError((/**
         * @return {?}
         */
        () => {
            file.status = FileUploadStatus.Error;
            return of(file);
        })));
    }
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    cancelNodeVersionInstances(file) {
        this.files
            .filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.data.entry.id === file.data.entry.id &&
            item.options.newVersion))
            .map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            item.status = FileUploadStatus.Deleted;
        }));
    }
    /**
     * @private
     * @param {...?} files
     * @return {?}
     */
    notifyError(...files) {
        /** @type {?} */
        let messageError = null;
        if (files.length === 1) {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR', { fileName: files[0].name });
        }
        else {
            messageError = this.translateService.instant('FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR', { total: files.length });
        }
        this.error.emit(messageError);
    }
    /**
     * @private
     * @return {?}
     */
    getUploadingFiles() {
        return this.files.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (item.status === FileUploadStatus.Pending ||
                item.status === FileUploadStatus.Progress ||
                item.status === FileUploadStatus.Starting) {
                return item;
            }
        }));
    }
}
FileUploadingListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-file-uploading-list',
                template: "<div class=\"upload-list\">\n    <ng-template\n        ngFor\n        [ngForOf]=\"files\"\n        [ngForTemplate]=\"template\">\n    </ng-template>\n</div>\n",
                styles: [":host{display:flex;flex-direction:column}"]
            }] }
];
/** @nocollapse */
FileUploadingListComponent.ctorParameters = () => [
    { type: UploadService },
    { type: NodesApiService },
    { type: TranslationService }
];
FileUploadingListComponent.propDecorators = {
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    files: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FileUploadingListComponent.prototype.FileUploadStatus;
    /** @type {?} */
    FileUploadingListComponent.prototype.template;
    /** @type {?} */
    FileUploadingListComponent.prototype.files;
    /**
     * Emitted when a file in the list has an error.
     * @type {?}
     */
    FileUploadingListComponent.prototype.error;
    /**
     * @type {?}
     * @private
     */
    FileUploadingListComponent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadingListComponent.prototype.nodesApi;
    /**
     * @type {?}
     * @private
     */
    FileUploadingListComponent.prototype.translateService;
}
//# sourceMappingURL=data:application/json;base64,