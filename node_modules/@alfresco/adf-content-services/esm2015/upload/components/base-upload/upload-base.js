/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileModel } from '@alfresco/adf-core';
import { EventEmitter, Input, Output } from '@angular/core';
import { UploadFilesEvent } from '../upload-files.event';
/**
 * @abstract
 */
export class UploadBase {
    /**
     * @param {?} uploadService
     * @param {?} translationService
     * @param {?} ngZone
     */
    constructor(uploadService, translationService, ngZone) {
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.ngZone = ngZone;
        /**
         * The ID of the root. Use the nodeId for
         * Content Services or the taskId/processId for Process Services.
         */
        this.rootFolderId = '-root-';
        /**
         * Toggles component disabled state (if there is no node permission checking).
         */
        this.disabled = false;
        /**
         * Filter for accepted file types.
         */
        this.acceptedFilesType = '*';
        /**
         * Toggles versioning.
         */
        this.versioning = false;
        /**
         * majorVersion boolean field to true to indicate a major version should be created.
         */
        this.majorVersion = false;
        /**
         * Custom node type for uploaded file
         */
        this.nodeType = 'cm:content';
        /**
         * Emitted when the file is uploaded successfully.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when the upload begins.
         */
        this.beginUpload = new EventEmitter();
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.uploadService.fileUploadError.subscribe((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.error.emit(error);
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        (subscription) => subscription.unsubscribe()));
        this.subscriptions = [];
    }
    /**
     * Upload a list of file in the specified path
     * @param {?} files
     * @return {?}
     */
    uploadFiles(files) {
        /** @type {?} */
        const filteredFiles = files
            .map((/**
         * @param {?} file
         * @return {?}
         */
        (file) => {
            return this.createFileModel(file, this.rootFolderId, (((/** @type {?} */ (file))).webkitRelativePath || '').replace(/\/[^\/]*$/, ''));
        }));
        this.uploadQueue(filteredFiles);
    }
    /**
     * @param {?} files
     * @return {?}
     */
    uploadFilesInfo(files) {
        /** @type {?} */
        const filteredFiles = files
            .map((/**
         * @param {?} fileInfo
         * @return {?}
         */
        (fileInfo) => {
            return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);
        }));
        this.uploadQueue(filteredFiles);
    }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    uploadQueue(files) {
        /** @type {?} */
        const filteredFiles = files
            .filter(this.isFileAcceptable.bind(this))
            .filter(this.isFileSizeAcceptable.bind(this));
        this.ngZone.run((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const event = new UploadFilesEvent([...filteredFiles], this.uploadService, this.success);
            this.beginUpload.emit(event);
            if (!event.defaultPrevented) {
                if (filteredFiles.length > 0) {
                    this.uploadService.addToQueue(...filteredFiles);
                    this.uploadService.uploadFilesInTheQueue(this.success);
                }
            }
        }));
    }
    /**
     * Checks if the given file is allowed by the extension filters
     *
     * @protected
     * @param {?} file FileModel
     * @return {?}
     */
    isFileAcceptable(file) {
        if (this.acceptedFilesType === '*') {
            return true;
        }
        /** @type {?} */
        const allowedExtensions = this.acceptedFilesType
            .split(',')
            .map((/**
         * @param {?} ext
         * @return {?}
         */
        (ext) => ext.trim().replace(/^\./, '')));
        if (allowedExtensions.indexOf(file.extension) !== -1) {
            return true;
        }
        return false;
    }
    /**
     * Creates FileModel from File
     *
     * @protected
     * @param {?} file
     * @param {?} parentId
     * @param {?} path
     * @param {?=} id
     * @return {?}
     */
    createFileModel(file, parentId, path, id) {
        return new FileModel(file, {
            comment: this.comment,
            majorVersion: this.majorVersion,
            newVersion: this.versioning,
            parentId: parentId,
            path: path,
            nodeType: this.nodeType
        }, id);
    }
    /**
     * @protected
     * @param {?} file
     * @return {?}
     */
    isFileSizeAllowed(file) {
        /** @type {?} */
        let isFileSizeAllowed = true;
        if (this.isMaxFileSizeDefined()) {
            isFileSizeAllowed = this.isFileSizeCorrect(file);
        }
        return isFileSizeAllowed;
    }
    /**
     * @protected
     * @return {?}
     */
    isMaxFileSizeDefined() {
        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;
    }
    /**
     * @protected
     * @param {?} file
     * @return {?}
     */
    isFileSizeCorrect(file) {
        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;
    }
    /**
     * Checks if the given file is an acceptable size
     *
     * @private
     * @param {?} file FileModel
     * @return {?}
     */
    isFileSizeAcceptable(file) {
        /** @type {?} */
        let acceptableSize = true;
        if (!this.isFileSizeAllowed(file)) {
            acceptableSize = false;
            /** @type {?} */
            const message = this.translationService.instant('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', { fileName: file.name });
            this.error.emit(message);
        }
        return acceptableSize;
    }
}
UploadBase.propDecorators = {
    maxFilesSize: [{ type: Input }],
    rootFolderId: [{ type: Input }],
    disabled: [{ type: Input }],
    acceptedFilesType: [{ type: Input }],
    versioning: [{ type: Input }],
    majorVersion: [{ type: Input }],
    comment: [{ type: Input }],
    nodeType: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    beginUpload: [{ type: Output }]
};
if (false) {
    /**
     * Sets a limit on the maximum size (in bytes) of a file to be uploaded.
     * Has no effect if undefined.
     * @type {?}
     */
    UploadBase.prototype.maxFilesSize;
    /**
     * The ID of the root. Use the nodeId for
     * Content Services or the taskId/processId for Process Services.
     * @type {?}
     */
    UploadBase.prototype.rootFolderId;
    /**
     * Toggles component disabled state (if there is no node permission checking).
     * @type {?}
     */
    UploadBase.prototype.disabled;
    /**
     * Filter for accepted file types.
     * @type {?}
     */
    UploadBase.prototype.acceptedFilesType;
    /**
     * Toggles versioning.
     * @type {?}
     */
    UploadBase.prototype.versioning;
    /**
     * majorVersion boolean field to true to indicate a major version should be created.
     * @type {?}
     */
    UploadBase.prototype.majorVersion;
    /**
     * When you overwrite existing content, you can use the comment field to add a version comment that appears in the version history
     * @type {?}
     */
    UploadBase.prototype.comment;
    /**
     * Custom node type for uploaded file
     * @type {?}
     */
    UploadBase.prototype.nodeType;
    /**
     * Emitted when the file is uploaded successfully.
     * @type {?}
     */
    UploadBase.prototype.success;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    UploadBase.prototype.error;
    /**
     * Emitted when the upload begins.
     * @type {?}
     */
    UploadBase.prototype.beginUpload;
    /**
     * @type {?}
     * @protected
     */
    UploadBase.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    UploadBase.prototype.uploadService;
    /**
     * @type {?}
     * @protected
     */
    UploadBase.prototype.translationService;
    /**
     * @type {?}
     * @protected
     */
    UploadBase.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,