/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EXTENDIBLE_COMPONENT, FileUtils, NotificationService, TranslationService, UploadService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { Component, forwardRef, ViewEncapsulation, NgZone } from '@angular/core';
import { UploadBase } from './base-upload/upload-base';
export class UploadDragAreaComponent extends UploadBase {
    /**
     * @param {?} uploadService
     * @param {?} translationService
     * @param {?} notificationService
     * @param {?} contentService
     * @param {?} ngZone
     */
    constructor(uploadService, translationService, notificationService, contentService, ngZone) {
        super(uploadService, translationService, ngZone);
        this.uploadService = uploadService;
        this.translationService = translationService;
        this.notificationService = notificationService;
        this.contentService = contentService;
        this.ngZone = ngZone;
    }
    /**
     * Method called when files are dropped in the drag area.
     *
     * @param {?} files - files dropped in the drag area.
     * @return {?}
     */
    onFilesDropped(files) {
        if (!this.disabled && files.length) {
            this.uploadFiles(files);
        }
    }
    /**
     * Called when a folder are dropped in the drag area
     *
     * @param {?} folder - name of the dropped folder
     * @return {?}
     */
    onFolderEntityDropped(folder) {
        if (!this.disabled && folder.isDirectory) {
            FileUtils.flatten(folder).then((/**
             * @param {?} filesInfo
             * @return {?}
             */
            (filesInfo) => {
                this.uploadFilesInfo(filesInfo);
            }));
        }
    }
    /**
     * Show undo notification bar.
     *
     * @param {?} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     * @return {?}
     */
    showUndoNotificationBar(latestFilesAdded) {
        /** @type {?} */
        let messageTranslate;
        /** @type {?} */
        let actionTranslate;
        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe((/**
         * @return {?}
         */
        () => {
            this.uploadService.cancelUpload(...latestFilesAdded);
        }));
    }
    /**
     * Returns true or false considering the component options and node permissions
     * @return {?}
     */
    isDroppable() {
        return !this.disabled;
    }
    /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param {?} event DOM event
     * @return {?}
     */
    onUploadFiles(event) {
        event.stopPropagation();
        event.preventDefault();
        /** @type {?} */
        const isAllowed = this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE);
        if (isAllowed) {
            /** @type {?} */
            const fileInfo = event.detail.files;
            if (this.isTargetNodeFolder(event)) {
                /** @type {?} */
                const destinationFolderName = event.detail.data.obj.entry.name;
                fileInfo.map((/**
                 * @param {?} file
                 * @return {?}
                 */
                (file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder));
            }
            if (fileInfo && fileInfo.length > 0) {
                this.uploadFilesInfo(fileInfo);
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isTargetNodeFolder(event) {
        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;
    }
}
UploadDragAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-upload-drag-area',
                template: "<div [adf-file-draggable]=\"isDroppable()\" class=\"adf-upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($event)\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n",
                host: { 'class': 'adf-upload-drag-area' },
                viewProviders: [
                    { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => UploadDragAreaComponent)) }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
UploadDragAreaComponent.ctorParameters = () => [
    { type: UploadService },
    { type: TranslationService },
    { type: NotificationService },
    { type: ContentService },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    UploadDragAreaComponent.prototype.uploadService;
    /**
     * @type {?}
     * @protected
     */
    UploadDragAreaComponent.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    UploadDragAreaComponent.prototype.notificationService;
    /**
     * @type {?}
     * @private
     */
    UploadDragAreaComponent.prototype.contentService;
    /**
     * @type {?}
     * @protected
     */
    UploadDragAreaComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,