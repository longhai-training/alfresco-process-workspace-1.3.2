/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FlatTreeControl } from '@angular/cdk/tree';
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { TreeViewDataSource } from '../data/tree-view-datasource';
import { TreeViewService } from '../services/tree-view.service';
export class TreeViewComponent {
    /**
     * @param {?} treeViewService
     */
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
        /**
         * Emitted when a node in the tree view is clicked.
         */
        this.nodeClicked = new EventEmitter();
        /**
         * Emitted when an invalid node id is given.
         */
        this.error = new EventEmitter();
        this.getLevel = (/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.level);
        this.isExpandable = (/**
         * @param {?} node
         * @return {?}
         */
        (node) => node.expandable);
        this.hasChild = (/**
         * @param {?} level
         * @param {?} nodeData
         * @return {?}
         */
        (level, nodeData) => nodeData.expandable);
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['nodeId'] && changes['nodeId'].currentValue &&
            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {
            this.loadTreeNode();
        }
        else {
            this.dataSource.data = [];
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onNodeClicked(node) {
        this.nodeClicked.emit(node);
    }
    /**
     * @private
     * @return {?}
     */
    loadTreeNode() {
        this.treeViewService.getTreeNodes(this.nodeId)
            .subscribe((/**
         * @param {?} treeNode
         * @return {?}
         */
        (treeNode) => {
            this.dataSource.data = treeNode;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => this.error.emit(error)));
    }
}
TreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tree-view-list',
                template: "<mat-tree class=\"adf-tree-view-main\" [dataSource]=\"dataSource\"\n          [treeControl]=\"treeControl\" *ngIf=\"nodeId; else missingNodeId\">\n    <mat-tree-node class=\"adf-tree-view-node\"\n        *matTreeNodeDef=\"let treeNode\" id=\"{{treeNode.name + '-tree-node'}}\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        {{treeNode.name}}\n    </mat-tree-node>\n    <mat-tree-node class=\"adf-tree-view-node\"\n        id=\"{{treeNode.name + '-tree-child-node'}}\" *matTreeNodeDef=\"let treeNode; when: hasChild\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        <button id=\"{{'button-'+treeNode.name}}\" (click)=\"onNodeClicked(treeNode.node)\"\n                mat-icon-button [attr.aria-label]=\"'toggle ' + treeNode.filename\" matTreeNodeToggle>\n            <mat-icon class=\"adf-tree-view-icon\">\n                {{treeControl.isExpanded(treeNode) ? 'folder_open' : 'folder'}}\n            </mat-icon>\n        </button>\n        {{treeNode.name}}\n    </mat-tree-node>\n</mat-tree>\n<ng-template #missingNodeId>\n    <div id=\"adf-tree-view-missing-node\">\n        {{'ADF-TREE-VIEW.MISSING-ID' | translate}}\n    </div>\n</ng-template>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TreeViewComponent.ctorParameters = () => [
    { type: TreeViewService }
];
TreeViewComponent.propDecorators = {
    nodeId: [{ type: Input }],
    nodeClicked: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /**
     * Identifier of the node to display.
     * @type {?}
     */
    TreeViewComponent.prototype.nodeId;
    /**
     * Emitted when a node in the tree view is clicked.
     * @type {?}
     */
    TreeViewComponent.prototype.nodeClicked;
    /**
     * Emitted when an invalid node id is given.
     * @type {?}
     */
    TreeViewComponent.prototype.error;
    /** @type {?} */
    TreeViewComponent.prototype.treeControl;
    /** @type {?} */
    TreeViewComponent.prototype.dataSource;
    /** @type {?} */
    TreeViewComponent.prototype.getLevel;
    /** @type {?} */
    TreeViewComponent.prototype.isExpandable;
    /** @type {?} */
    TreeViewComponent.prototype.hasChild;
    /**
     * @type {?}
     * @private
     */
    TreeViewComponent.prototype.treeViewService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRyZWUtdmlldy9jb21wb25lbnRzL3RyZWUtdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQVNoRSxNQUFNLE9BQU8saUJBQWlCOzs7O0lBaUIxQixZQUFvQixlQUFnQztRQUFoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7Ozs7UUFUcEQsZ0JBQVcsR0FBNEIsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7OztRQUkxRCxVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUF1QjlDLGFBQVE7Ozs7UUFBRyxDQUFDLElBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUM7UUFFOUMsaUJBQVk7Ozs7UUFBRyxDQUFDLElBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUM7UUFFdkQsYUFBUTs7Ozs7UUFBRyxDQUFDLEtBQWEsRUFBRSxRQUFzQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFDO1FBckJ0RSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksZUFBZSxDQUFlLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNyRixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWTtZQUNuRCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEVBQUU7WUFDcEUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3ZCO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7U0FDN0I7SUFDTCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxJQUFlO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBUU8sWUFBWTtRQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ3pDLFNBQVM7Ozs7UUFDTixDQUFDLFFBQXdCLEVBQUUsRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDcEMsQ0FBQzs7OztRQUNELENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDcEMsQ0FBQztJQUNWLENBQUM7OztZQXZESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsMHJDQUF1Qzs7YUFFMUM7Ozs7WUFQUSxlQUFlOzs7cUJBWW5CLEtBQUs7MEJBSUwsTUFBTTtvQkFJTixNQUFNOzs7Ozs7O0lBUlAsbUNBQ2U7Ozs7O0lBR2Ysd0NBQzBEOzs7OztJQUcxRCxrQ0FDOEM7O0lBRTlDLHdDQUEyQzs7SUFDM0MsdUNBQStCOztJQW9CL0IscUNBQThDOztJQUU5Qyx5Q0FBdUQ7O0lBRXZELHFDQUEwRTs7Ozs7SUF0QjlELDRDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZsYXRUcmVlQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay90cmVlJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyZWVCYXNlTm9kZSB9IGZyb20gJy4uL21vZGVscy90cmVlLXZpZXcubW9kZWwnO1xuaW1wb3J0IHsgVHJlZVZpZXdEYXRhU291cmNlIH0gZnJvbSAnLi4vZGF0YS90cmVlLXZpZXctZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBUcmVlVmlld1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90cmVlLXZpZXcuc2VydmljZSc7XG5pbXBvcnQgeyBOb2RlRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdHJlZS12aWV3LWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAndHJlZS12aWV3LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsndHJlZS12aWV3LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5cbmV4cG9ydCBjbGFzcyBUcmVlVmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogSWRlbnRpZmllciBvZiB0aGUgbm9kZSB0byBkaXNwbGF5LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbm9kZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgbm9kZSBpbiB0aGUgdHJlZSB2aWV3IGlzIGNsaWNrZWQuICovXG4gICAgQE91dHB1dCgpXG4gICAgbm9kZUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxOb2RlRW50cnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBpbnZhbGlkIG5vZGUgaWQgaXMgZ2l2ZW4uICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgdHJlZUNvbnRyb2w6IEZsYXRUcmVlQ29udHJvbDxUcmVlQmFzZU5vZGU+O1xuICAgIGRhdGFTb3VyY2U6IFRyZWVWaWV3RGF0YVNvdXJjZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJlZVZpZXdTZXJ2aWNlOiBUcmVlVmlld1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy50cmVlQ29udHJvbCA9IG5ldyBGbGF0VHJlZUNvbnRyb2w8VHJlZUJhc2VOb2RlPih0aGlzLmdldExldmVsLCB0aGlzLmlzRXhwYW5kYWJsZSk7XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZSA9IG5ldyBUcmVlVmlld0RhdGFTb3VyY2UodGhpcy50cmVlQ29udHJvbCwgdGhpcy50cmVlVmlld1NlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ25vZGVJZCddICYmIGNoYW5nZXNbJ25vZGVJZCddLmN1cnJlbnRWYWx1ZSAmJlxuICAgICAgICAgICAgY2hhbmdlc1snbm9kZUlkJ10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWydub2RlSWQnXS5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRUcmVlTm9kZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTm9kZUNsaWNrZWQobm9kZTogTm9kZUVudHJ5KSB7XG4gICAgICAgIHRoaXMubm9kZUNsaWNrZWQuZW1pdChub2RlKTtcbiAgICB9XG5cbiAgICBnZXRMZXZlbCA9IChub2RlOiBUcmVlQmFzZU5vZGUpID0+IG5vZGUubGV2ZWw7XG5cbiAgICBpc0V4cGFuZGFibGUgPSAobm9kZTogVHJlZUJhc2VOb2RlKSA9PiBub2RlLmV4cGFuZGFibGU7XG5cbiAgICBoYXNDaGlsZCA9IChsZXZlbDogbnVtYmVyLCBub2RlRGF0YTogVHJlZUJhc2VOb2RlKSA9PiBub2RlRGF0YS5leHBhbmRhYmxlO1xuXG4gICAgcHJpdmF0ZSBsb2FkVHJlZU5vZGUoKSB7XG4gICAgICAgIHRoaXMudHJlZVZpZXdTZXJ2aWNlLmdldFRyZWVOb2Rlcyh0aGlzLm5vZGVJZClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHRyZWVOb2RlOiBUcmVlQmFzZU5vZGVbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2UuZGF0YSA9IHRyZWVOb2RlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB0aGlzLmVycm9yLmVtaXQoZXJyb3IpXG4gICAgICAgICAgICApO1xuICAgIH1cbn1cbiJdfQ==