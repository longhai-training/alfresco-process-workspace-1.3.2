/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { FlatTreeControl } from '@angular/cdk/tree';
import { TreeViewService } from '../services/tree-view.service';
export class TreeViewDataSource {
    /**
     * @param {?} treeControl
     * @param {?} treeViewService
     */
    constructor(treeControl, treeViewService) {
        this.treeControl = treeControl;
        this.treeViewService = treeViewService;
        this.dataChange = new BehaviorSubject([]);
        this.childrenSubscription = null;
        this.changeSubscription = null;
        this.dataChange.subscribe((/**
         * @param {?} treeNodes
         * @return {?}
         */
        (treeNodes) => this.treeNodes = treeNodes));
    }
    /**
     * @return {?}
     */
    get data() {
        return this.treeNodes;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this.treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    /**
     * @param {?} collectionViewer
     * @return {?}
     */
    connect(collectionViewer) {
        this.changeSubscription = this.treeControl.expansionModel.onChange.subscribe((/**
         * @param {?} change
         * @return {?}
         */
        (change) => {
            if (((/** @type {?} */ (change))).added &&
                ((/** @type {?} */ (change))).added.length > 0) {
                this.expandTreeNodes((/** @type {?} */ (change)));
            }
            else if (((/** @type {?} */ (change))).removed) {
                this.reduceTreeNodes((/** @type {?} */ (change)));
            }
        }));
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map((/**
         * @return {?}
         */
        () => this.data)));
    }
    /**
     * @return {?}
     */
    disconnect() {
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @param {?} change
     * @return {?}
     */
    expandTreeNodes(change) {
        change.added.forEach((/**
         * @param {?} node
         * @return {?}
         */
        (node) => this.expandNode(node)));
    }
    /**
     * @private
     * @param {?} change
     * @return {?}
     */
    reduceTreeNodes(change) {
        change.removed.slice().reverse().forEach((/**
         * @param {?} node
         * @return {?}
         */
        (node) => this.toggleNode(node)));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    expandNode(node) {
        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)
            .subscribe((/**
         * @param {?} children
         * @return {?}
         */
        (children) => {
            /** @type {?} */
            const index = this.data.indexOf(node);
            if (!children || index < 0) {
                node.expandable = false;
                return;
            }
            /** @type {?} */
            const nodes = children.map((/**
             * @param {?} actualNode
             * @return {?}
             */
            (actualNode) => {
                actualNode.level = node.level + 1;
                return actualNode;
            }));
            this.data.splice(index + 1, 0, ...nodes);
            this.dataChange.next(this.data);
        }));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    toggleNode(node) {
        /** @type {?} */
        const index = this.data.indexOf(node);
        /** @type {?} */
        let count = 0;
        for (let i = index + 1; i < this.data.length
            && this.data[i].level > node.level; i++, count++) { }
        this.data.splice(index + 1, count);
        this.dataChange.next(this.data);
    }
}
TreeViewDataSource.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeViewDataSource.ctorParameters = () => [
    { type: FlatTreeControl },
    { type: TreeViewService }
];
if (false) {
    /** @type {?} */
    TreeViewDataSource.prototype.treeNodes;
    /** @type {?} */
    TreeViewDataSource.prototype.dataChange;
    /** @type {?} */
    TreeViewDataSource.prototype.childrenSubscription;
    /** @type {?} */
    TreeViewDataSource.prototype.changeSubscription;
    /**
     * @type {?}
     * @private
     */
    TreeViewDataSource.prototype.treeControl;
    /**
     * @type {?}
     * @private
     */
    TreeViewDataSource.prototype.treeViewService;
}
//# sourceMappingURL=data:application/json;base64,