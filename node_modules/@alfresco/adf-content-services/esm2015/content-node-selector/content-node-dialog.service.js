/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { ContentService, ThumbnailService } from '@alfresco/adf-core';
import { Subject, throwError } from 'rxjs';
import { SitesService, TranslationService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { DocumentListService } from '../document-list/services/document-list.service';
import { ContentNodeSelectorComponent } from './content-node-selector.component';
import { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@alfresco/adf-core";
import * as i3 from "../document-list/services/document-list.service";
export class ContentNodeDialogService {
    /**
     * @param {?} dialog
     * @param {?} contentService
     * @param {?} documentListService
     * @param {?} siteService
     * @param {?} translation
     * @param {?} thumbnailService
     */
    constructor(dialog, contentService, documentListService, siteService, translation, thumbnailService) {
        this.dialog = dialog;
        this.contentService = contentService;
        this.documentListService = documentListService;
        this.siteService = siteService;
        this.translation = translation;
        this.thumbnailService = thumbnailService;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * Opens a file browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected file(s)
     */
    openFileBrowseDialogByFolderId(folderNodeId) {
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((/**
         * @param {?} nodeEntry
         * @return {?}
         */
        (nodeEntry) => {
            return this.openUploadFileDialog('Choose', nodeEntry.entry);
        })));
    }
    /**
     * Opens a lock node dialog.
     * @param {?} contentEntry Node to lock
     * @return {?} Error/status message (if any)
     */
    openLockNodeDialog(contentEntry) {
        /** @type {?} */
        const observable = new Subject();
        if (this.contentService.hasAllowableOperations(contentEntry, AllowableOperationsEnum.LOCK)) {
            this.dialog.open(NodeLockDialogComponent, {
                data: {
                    node: contentEntry,
                    onError: (/**
                     * @param {?} error
                     * @return {?}
                     */
                    (error) => {
                        this.error.emit(error);
                        observable.error(error);
                    })
                },
                width: '400px'
            });
        }
        else {
            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');
        }
        return observable;
    }
    /**
     * Opens a file browser at a chosen site location.
     * @return {?} Information about the selected file(s)
     */
    openFileBrowseDialogBySite() {
        return this.siteService.getSites().pipe(switchMap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);
        })));
    }
    /**
     * Opens a folder browser at a chosen site location.
     * @return {?} Information about the selected folder(s)
     */
    openFolderBrowseDialogBySite() {
        return this.openFolderBrowseDialogByFolderId('-my-');
    }
    /**
     * Opens a folder browser at a chosen folder location.
     * @param {?} folderNodeId ID of the folder to use
     * @return {?} Information about the selected folder(s)
     */
    openFolderBrowseDialogByFolderId(folderNodeId) {
        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            return this.openUploadFolderDialog('Choose', node.entry);
        })));
    }
    /**
     * Opens a dialog to copy or move an item to a new location.
     * @param {?} action Name of the action (eg, "Copy" or "Move") to show in the title
     * @param {?} contentEntry Item to be copied or moved
     * @param {?=} permission Permission for the operation
     * @param {?=} excludeSiteContent The site content that should be filtered out
     * @return {?} Information about files that were copied/moved
     */
    openCopyMoveDialog(action, contentEntry, permission, excludeSiteContent) {
        if (this.contentService.hasAllowableOperations(contentEntry, permission)) {
            /** @type {?} */
            const select = new Subject();
            select.subscribe({
                complete: this.close.bind(this)
            });
            /** @type {?} */
            const title = this.getTitleTranslation(action, contentEntry.name);
            /** @type {?} */
            const data = {
                title: title,
                actionName: action,
                currentFolderId: contentEntry.parentId,
                imageResolver: this.imageResolver.bind(this),
                where: '(isFolder=true)',
                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),
                excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,
                select: select
            };
            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
            return select;
        }
        else {
            /** @type {?} */
            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));
            return throwError(errors);
        }
    }
    /**
     * Gets the translation of the dialog title.
     * @param {?} action Name of the action to display in the dialog title
     * @param {?} name Name of the item on which the action is being performed
     * @return {?} Translated version of the title
     */
    getTitleTranslation(action, name) {
        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });
    }
    /**
     * Opens a dialog to choose folders to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry  Item to upload
     * @return {?} Information about the chosen folder(s)
     */
    openUploadFolderDialog(action, contentEntry) {
        /** @type {?} */
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        const data = {
            title: `${action} '${contentEntry.name}' to ...`,
            actionName: action,
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),
            where: '(isFolder=true)',
            select: select
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        return select;
    }
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} action Name of the action to show in the title
     * @param {?} contentEntry Item to upload
     * @return {?} Information about the chosen file(s)
     */
    openUploadFileDialog(action, contentEntry) {
        /** @type {?} */
        const select = new Subject();
        select.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        const data = {
            title: `${action} '${contentEntry.name}' to ...`,
            actionName: action,
            currentFolderId: contentEntry.id,
            imageResolver: this.imageResolver.bind(this),
            isSelectionValid: this.isNodeFile.bind(this),
            select: select
        };
        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');
        return select;
    }
    /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    openContentNodeDialog(data, currentPanelClass, chosenWidth) {
        this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });
    }
    /**
     * @private
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    imageResolver(row, col) {
        /** @type {?} */
        const entry = row.node.entry;
        if (!this.contentService.hasAllowableOperations(entry, 'create')) {
            return this.thumbnailService.getMimeTypeIcon('disable/folder');
        }
        return null;
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    isNodeFile(entry) {
        return entry.isFile;
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    hasAllowableOperationsOnNodeFolder(entry) {
        return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    isNodeFolder(entry) {
        return entry.isFolder;
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    isCopyMoveSelectionValid(entry) {
        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    hasEntityCreatePermission(entry) {
        return this.contentService.hasAllowableOperations(entry, 'create');
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    isSite(entry) {
        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';
    }
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    close() {
        this.dialog.closeAll();
    }
}
ContentNodeDialogService.nonDocumentSiteContent = [
    'blog',
    'calendar',
    'dataLists',
    'discussions',
    'links',
    'wiki'
];
ContentNodeDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentNodeDialogService.ctorParameters = () => [
    { type: MatDialog },
    { type: ContentService },
    { type: DocumentListService },
    { type: SitesService },
    { type: TranslationService },
    { type: ThumbnailService }
];
ContentNodeDialogService.propDecorators = {
    error: [{ type: Output }]
};
/** @nocollapse */ ContentNodeDialogService.ngInjectableDef = i0.defineInjectable({ factory: function ContentNodeDialogService_Factory() { return new ContentNodeDialogService(i0.inject(i1.MatDialog), i0.inject(i2.ContentService), i0.inject(i3.DocumentListService), i0.inject(i2.SitesService), i0.inject(i2.TranslationService), i0.inject(i2.ThumbnailService)); }, token: ContentNodeDialogService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ContentNodeDialogService.nonDocumentSiteContent;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    ContentNodeDialogService.prototype.error;
    /**
     * @type {?}
     * @private
     */
    ContentNodeDialogService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    ContentNodeDialogService.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ContentNodeDialogService.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    ContentNodeDialogService.prototype.siteService;
    /**
     * @type {?}
     * @private
     */
    ContentNodeDialogService.prototype.translation;
    /**
     * @type {?}
     * @private
     */
    ContentNodeDialogService.prototype.thumbnailService;
}
//# sourceMappingURL=data:application/json;base64,