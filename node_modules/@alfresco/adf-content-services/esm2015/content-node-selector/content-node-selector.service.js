/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
/**
 * Internal service used by ContentNodeSelector component.
 */
export class ContentNodeSelectorService {
    /**
     * @param {?} searchService
     */
    constructor(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    search(searchTerm, rootNodeId = null, skipCount = 0, maxItems = 25, extraNodeIds) {
        /** @type {?} */
        let extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            (id) => id !== rootNodeId))
                .forEach((/**
             * @param {?} extraId
             * @return {?}
             */
            (extraId) => {
                extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;
            }));
        }
        /** @type {?} */
        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];
        /** @type {?} */
        const defaultSearchNode = {
            query: {
                query: `${searchTerm}* OR name:${searchTerm}*`
            },
            include: ['path', 'allowableOperations'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' },
                ...parentFiltering
            ],
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    }
}
ContentNodeSelectorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentNodeSelectorService.ctorParameters = () => [
    { type: SearchService }
];
/** @nocollapse */ ContentNodeSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function ContentNodeSelectorService_Factory() { return new ContentNodeSelectorService(i0.inject(i1.SearchService)); }, token: ContentNodeSelectorService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorService.prototype.searchService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQVUzQyxNQUFNLE9BQU8sMEJBQTBCOzs7O0lBRW5DLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQ2hELENBQUM7Ozs7Ozs7Ozs7O0lBYU0sTUFBTSxDQUFDLFVBQWtCLEVBQUUsYUFBcUIsSUFBSSxFQUFFLFlBQW9CLENBQUMsRUFBRSxXQUFtQixFQUFFLEVBQUUsWUFBdUI7O1lBRTFILG9CQUFvQixHQUFHLEVBQUU7UUFFN0IsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUNyQyxZQUFZO2lCQUNQLE1BQU07Ozs7WUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLFVBQVUsRUFBQztpQkFDakMsT0FBTzs7OztZQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2pCLG9CQUFvQixJQUFJLHlDQUF5QyxPQUFPLEdBQUcsQ0FBQztZQUNoRixDQUFDLEVBQUMsQ0FBQztTQUNWOztjQUVLLGVBQWUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUscUNBQXFDLFVBQVUsSUFBSSxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7Y0FFMUgsaUJBQWlCLEdBQVE7WUFDM0IsS0FBSyxFQUFFO2dCQUNILEtBQUssRUFBRSxHQUFHLFVBQVUsYUFBYSxVQUFVLEdBQUc7YUFDakQ7WUFDRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUscUJBQXFCLENBQUM7WUFDeEMsTUFBTSxFQUFFO2dCQUNKLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixTQUFTLEVBQUUsU0FBUzthQUN2QjtZQUNELGFBQWEsRUFBRTtnQkFDWCxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtnQkFDN0IsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUU7Z0JBQ2xDLEdBQUcsZUFBZTthQUNyQjtZQUNELEtBQUssRUFBRTtnQkFDSCxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUM7YUFDdkI7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25FLENBQUM7OztZQXJESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFWUSxhQUFhOzs7Ozs7OztJQWFOLG1EQUFvQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZyB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEludGVybmFsIHNlcnZpY2UgdXNlZCBieSBDb250ZW50Tm9kZVNlbGVjdG9yIGNvbXBvbmVudC5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50Tm9kZVNlbGVjdG9yU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHNlYXJjaCBmb3IgY29udGVudCBub2RlIHNlbGVjdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHNlYXJjaFRlcm0gICAgVGhlIHRlcm0gdG8gc2VhcmNoIGZvclxuICAgICAqIEBwYXJhbSByb290Tm9kZUlkICAgIFRoZSByb290IGlzIHRvIHN0YXJ0IHRoZSBzZWFyY2ggZnJvbVxuICAgICAqIEBwYXJhbSBza2lwQ291bnQgICAgIEZyb20gd2hlcmUgdG8gc3RhcnQgdGhlIGxvYWRpbmdcbiAgICAgKiBAcGFyYW0gbWF4SXRlbXMgICAgICBIb3cgbWFueSBpdGVtcyB0byBsb2FkXG4gICAgICogQHBhcmFtIFtleHRyYU5vZGVJZHNdICBMaXN0IG9mIGV4dHJhIG5vZGUgaWRzIHRvIHNlYXJjaCBmcm9tLiBUaGlzIGxhc3QgcGFyYW1ldGVyIGlzIG5lY2Vzc2FyeSB3aGVuXG4gICAgICogdGhlIHJvb3ROb2RlSWQgaXMgb25lIG9mIHRoZSBzdXBwb3J0ZWQgYWxpYXNlcyAoZS5nLiAnLW15LScsICctcm9vdC0nLCAnLW15c2l0ZXMtJywgZXRjLilcbiAgICAgKiBhbmQgc2VhcmNoIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoYXQgYWxpYXMsIGJ1dCBjYW4gYmUgcGVyZm9ybWVkIG9uIGl0cyBjb3JyZXNwb25kaW5nIG5vZGVzLlxuICAgICAqL1xuICAgIHB1YmxpYyBzZWFyY2goc2VhcmNoVGVybTogc3RyaW5nLCByb290Tm9kZUlkOiBzdHJpbmcgPSBudWxsLCBza2lwQ291bnQ6IG51bWJlciA9IDAsIG1heEl0ZW1zOiBudW1iZXIgPSAyNSwgZXh0cmFOb2RlSWRzPzogc3RyaW5nW10pOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcblxuICAgICAgICBsZXQgZXh0cmFQYXJlbnRGaWx0ZXJpbmcgPSAnJztcblxuICAgICAgICBpZiAoZXh0cmFOb2RlSWRzICYmIGV4dHJhTm9kZUlkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV4dHJhTm9kZUlkc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGlkKSA9PiBpZCAhPT0gcm9vdE5vZGVJZClcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoZXh0cmFJZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcmVudEZpbHRlcmluZyArPSBgIE9SIEFOQ0VTVE9SOid3b3Jrc3BhY2U6Ly9TcGFjZXNTdG9yZS8ke2V4dHJhSWR9J2A7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJlbnRGaWx0ZXJpbmcgPSByb290Tm9kZUlkID8gW3sgcXVlcnk6IGBBTkNFU1RPUjond29ya3NwYWNlOi8vU3BhY2VzU3RvcmUvJHtyb290Tm9kZUlkfScke2V4dHJhUGFyZW50RmlsdGVyaW5nfWAgfV0gOiBbXTtcblxuICAgICAgICBjb25zdCBkZWZhdWx0U2VhcmNoTm9kZTogYW55ID0ge1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogYCR7c2VhcmNoVGVybX0qIE9SIG5hbWU6JHtzZWFyY2hUZXJtfSpgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZTogWydwYXRoJywgJ2FsbG93YWJsZU9wZXJhdGlvbnMnXSxcbiAgICAgICAgICAgIHBhZ2luZzoge1xuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiBtYXhJdGVtcyxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHNraXBDb3VudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbHRlclF1ZXJpZXM6IFtcbiAgICAgICAgICAgICAgICB7IHF1ZXJ5OiBcIlRZUEU6J2NtOmZvbGRlcidcIiB9LFxuICAgICAgICAgICAgICAgIHsgcXVlcnk6ICdOT1QgY206Y3JlYXRvcjpTeXN0ZW0nIH0sXG4gICAgICAgICAgICAgICAgLi4ucGFyZW50RmlsdGVyaW5nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IFsnbm9kZXMnXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VhcmNoQnlRdWVyeUJvZHkoZGVmYXVsdFNlYXJjaE5vZGUpO1xuICAgIH1cbn1cbiJdfQ==