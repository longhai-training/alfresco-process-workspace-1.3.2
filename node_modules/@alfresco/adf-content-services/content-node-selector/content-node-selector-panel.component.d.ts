/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit } from '@angular/core';
import { HighlightDirective, UserPreferencesService, PaginationModel, InfinitePaginationComponent, PaginatedComponent } from '@alfresco/adf-core';
import { FormControl } from '@angular/forms';
import { Node, NodePaging, Pagination, SiteEntry, SitePaging } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list/components/document-list.component';
import { RowFilter } from '../document-list/data/row-filter.model';
import { ImageResolver } from '../document-list/data/image-resolver.model';
import { ContentNodeSelectorService } from './content-node-selector.service';
import { CustomResourcesService } from '../document-list/services/custom-resources.service';
export declare type ValidationFunction = (entry: Node) => boolean;
export declare class ContentNodeSelectorPanelComponent implements OnInit {
    private contentNodeSelectorService;
    private customResourcesService;
    private userPreferencesService;
    DEFAULT_PAGINATION: Pagination;
    /** Node ID of the folder currently listed. */
    currentFolderId: string;
    /** Hide the "My Files" option added to the site list by default.
     * See the [Sites Dropdown component](sites-dropdown.component.md)
     * for more information.
     */
    dropdownHideMyFiles: boolean;
    /** Custom site for site dropdown. This is the same as the `siteList`.
     * property of the Sites Dropdown component (see its doc page
     * for more information).
     */
    dropdownSiteList: SitePaging;
    _rowFilter: RowFilter;
    /** Custom *where* filter function. See the
     * Document List component
     * for more information.
     */
    where: string;
    /**
     * Custom row filter function. See the
     * [Row Filter Model](row-filter.model.md) page
     * for more information.
     */
    rowFilter: RowFilter;
    _excludeSiteContent: string[];
    /** Custom list of site content componentIds.
     * Used to filter out the corresponding items from the displayed nodes
     */
    excludeSiteContent: string[];
    /**
     * Custom image resolver function. See the
     * [Image Resolver Model](image-resolver.model.md) page
     * for more information.
     */
    imageResolver: ImageResolver;
    /** Number of items shown per page in the list. */
    pageSize: number;
    /** Function used to decide if the selected node has permission to be selected.
     * Default value is a function that always returns true.
     */
    isSelectionValid: ValidationFunction;
    /** Transformation to be performed on the chosen/folder node before building the
     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.
     * You can change the path elements from the node that are used to build the
     * breadcrumb using this function.
     */
    breadcrumbTransform: (node: any) => any;
    /** Emitted when the user has chosen an item. */
    select: EventEmitter<Node[]>;
    documentList: DocumentListComponent;
    highlighter: HighlightDirective;
    nodePaging: NodePaging | null;
    siteId: null | string;
    searchTerm: string;
    showingSearchResults: boolean;
    loadingSearchResults: boolean;
    inDialog: boolean;
    _chosenNode: Node;
    folderIdToShow: string | null;
    breadcrumbFolderTitle: string | null;
    pagination: PaginationModel;
    infinitePaginationComponent: InfinitePaginationComponent;
    infiniteScroll: boolean;
    debounceSearch: number;
    searchInput: FormControl;
    target: PaginatedComponent;
    constructor(contentNodeSelectorService: ContentNodeSelectorService, customResourcesService: CustomResourcesService, userPreferencesService: UserPreferencesService);
    chosenNode: Node;
    ngOnInit(): void;
    private createRowFilter;
    private isExcludedSiteContent;
    /**
     * Updates the site attribute and starts a new search
     *
     * @param chosenSite SiteEntry to search within
     */
    siteChanged(chosenSite: SiteEntry): void;
    /**
     * Updates the searchTerm attribute and starts a new search
     *
     * @param searchTerm string value to search against
     */
    search(searchTerm: string): void;
    /**
     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb
     */
    readonly breadcrumbFolderNode: Node | null;
    /**
     * Clear the search input and reset to last folder node in which search was performed
     */
    clear(): void;
    /**
     * Clear the search input and search related data
     */
    clearSearch(): void;
    /**
     * Update the result list depending on the criteria
     */
    private updateResults;
    /**
     * Load the first page of a new search result
     */
    private startNewSearch;
    /**
     * Perform the call to searchService with the proper parameters
     */
    private querySearch;
    /**
     * Show the results of the search
     *
     * @param results Search results
     */
    private showSearchResults;
    /**
     * Sets showingSearchResults state to be able to differentiate between search results or folder results
     */
    onFolderChange(): void;
    /**
     * Attempts to set the currently loaded node
     */
    onFolderLoaded(): void;
    /**
     * Returns whether breadcrumb has to be shown or not
     */
    showBreadcrumbs(): true | Node;
    /**
     * Loads the next batch of search results
     *
     * @param event Pagination object
     */
    getNextPageOfSearch(pagination: Pagination): void;
    /**
     * Selects node as chosen if it has the right permission, clears the selection otherwise
     *
     * @param entry
     */
    private attemptNodeSelection;
    /**
     * Clears the chosen node
     */
    resetChosenNode(): void;
    /**
     * Invoked when user selects a node
     *
     * @param event CustomEvent for node-select
     */
    onNodeSelect(event: any): void;
    setTitleIfCustomSite(site: SiteEntry): void;
}
